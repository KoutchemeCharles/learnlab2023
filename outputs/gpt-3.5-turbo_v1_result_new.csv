,Unnamed: 0,id,course_id,type,exam,prompt,testcase,max_score,input_str,input_cast,output,assignment,conditional,function_call,function_def,function_return,loop_counting,loop_until,loop_elements,loop_nested,stat_calculate,file_read,file_write,list,list_2d,dictionary,item_set,tuple,skeleton,code,exec_result,score,text
0,0,a3_3_animals,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a list called `list_of_animals`. Write a
program that prints out each of the items in this list (one item per line).



**EXAMPLE:  
** If, for example, the list contained the items: ""A"", ""B"", ""C""

Your program should print:

    
    
    A  
    B  
    C



**NOTE:**

  * You must use a loop to complete this task. 




# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_animals = ['Tiger', 'Deer', 'Zebra', 'Elephant', 'Swordfish', 'Giraffe', 'Sloth']

#Your code goes here.","from cs110 import autograder
import random, math

list_of_animals = ['Tiger', 'Deer', 'Zebra', 'Elephant', 'Swordfish', 'Giraffe', 'Sloth']

def solution():
    result = []
    
    for item in list_of_animals:
        result.append(item)
    
    return result
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""a3_3_animals.py"", [])
    expected_output = solution()
    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    return round(100 / len(expected_output) * num_matches, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_animals = ['Tiger', 'Deer', 'Zebra', 'Elephant', 'Swordfish', 'Giraffe', 'Sloth']

#Your code goes here.","
for animal in list_of_animals:
    print(animal)
",completed,0.0,"Unit Test Returned: 0.0
"
1,1,a3_1_cargo,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with a list called `list_of_cargo_planes`. Write a
program that prints a single, specified plane from the list. Your program
shall take a number via user input used to identify which plane to print. For
example, if the user types a 3, you should print out the third item.



**NOTE:**

  * You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)




","from cs110 import autograder
import random, math

soln_list =  [
                'C-2', 'C-5', 'C-9', 'C-12', 'C-17', 'UV-18', 'C-20', 'C-21', 'C-22', 'C-23', 'C-26', 'C-27',
                'C-35', 'C-38', 'CT-39', 'C-40', 'C-130', 'C-135', 'C-141', 'ATT', 'CSA', 'NSA', 'GRA', 'CRAF'
            ] 
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_cargo.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == soln_list[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(soln_list[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,,completed,0.0,"----------------------------------------------------------
Testing item #1: 
----------------------------------------------------------
Unexpected Output (Expected C-2)

----------------------------------------------------------
Testing item #22: 
----------------------------------------------------------
Unexpected Output (Expected NSA)

----------------------------------------------------------
Testing item #24: 
----------------------------------------------------------
Unexpected Output (Expected CRAF)

Unit Test Returned: 0.0
"
2,2,a3_3_games,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a list called `list_of_games`. Write a program
that prints out each of the items in this list (one item per line).



**EXAMPLE:  
** If, for example, the list contained the items: ""A"", ""B"", ""C""

Your program should print:

    
    
    A  
    B  
    C



**NOTE:**

  * You must use a loop to complete this task. 




# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_games = ['Monopoly', 'Risk', 'Clue', 'Chess', 'Operation', 'Jenga', 'Jumanji']

#Your code goes here.","from cs110 import autograder
import random, math

list_of_games = ['Monopoly', 'Risk', 'Clue', 'Chess', 'Operation', 'Jenga', 'Jumanji']

def solution():
    result = []
    
    for item in list_of_games:
        result.append(item)
    
    return result
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""a3_3_games.py"", [])
    expected_output = solution()
    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    return round(100 / len(expected_output) * num_matches, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_games = ['Monopoly', 'Risk', 'Clue', 'Chess', 'Operation', 'Jenga', 'Jumanji']

#Your code goes here.","
for game in list_of_games:
    print(game)
",completed,0.0,"Unit Test Returned: 0.0
"
3,3,a3_4_heights,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a list called list_of_heights. Write a program
that prints out the range ( _i.e.,  _the difference between the max and min
height)



**EXAMPLE:  
** If, for example, the list contained the values: 53, 60, 65

Your program should print:

    
    
    12






","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_heights.py""

list_of_heights = [74, 75, 63, 59, 81, 76, 79, 61, 58, 70,
                   61, 53, 82, 67, 73, 50, 59, 73, 57, 75,
                   78, 64, 69, 57, 79, 74, 48, 51, 48, 64]

max_value = max(list_of_heights) 
min_value = min(list_of_heights)

def verify_code():
    print(""Test 1:  Scanning your solution . . . "", end='')
    
    file = open(STUDENT_FILE, ""r"")
    contents = file.read()
        
    if ""for"" not in contents and ""while"" not in contents and ""max"" not in contents and ""min"" not in contents and ""sort"" not in contents:
        print(""Could not find code that gets the tallest and shortest heights . . ."")
        return False
    
    print(""Good. You are actually computing the answer."")
    return True



# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if verify_code():
        print(""Test 2:  Checking Output . . . "", end='')
        score += 60
        
        if len(lines) >= 1:           
            if autograder.equals(lines[0], max_value - min_value):
                print(""Range Look Good!"")
                score += 40
            else:
                print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
                
        else:
            print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
list_of_heights = [53, 60, 65]
print(max(list_of_heights) - min(list_of_heights))
","failed: must be real number, not str",0.0,
4,6,lsn9_practice4,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a program that asks the user for the area of three plots of land.

  * The first area will be provided to you in ACRES
  * The second area will be provided to you in SQUARE MILES (1 Acre = 0.0015625 Sq Miles)
  * The third area will be provided to you in SQUARE KILOMETERS

Your program will output ""Plot X is the biggest"", replacing X with either a 1,
2, or 3 depending on if the first, second, or third plot of land is the
biggest, respectively. For this problem, you may assume that the plots are all
different sizes (e.g., no two plots will be the same size)

**NOTES:**

  * **1 acre = 0.0015625 square miles**
  * **1 sq kilometer = 0.386102 square miles**

**EXAMPLES:**

**EXAMPLE 1** | **EXAMPLE 2**  
---|---  
**Inputs** |

35  
0.25  
1

|

150  
1  
2.2  
  
**Expected Output** | Plot 3 is the biggest | Plot 2 is the biggest


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def solution(area_1, area_2, area_3):
    area_1 = area_1 * 0.0015625
    area_3 = area_3 * 0.386102

    if area_1 > area_2 and area_1 > area_3:
        return ""Plot 1 is the biggest""
    elif area_2 > area_1 and area_2 > area_3:
        return ""Plot 2 is the biggest""
    elif area_3 > area_1 and area_3 > area_2:
        return ""Plot 3 is the biggest""
    
    return ""This should never return""

def run_test(area1, area2, area3):
    global num_tests_run, num_tests_passed
    
    num_tests_run += 1
    expected_output = solution(area1, area2, area3)
        
    print(""--------------------------------------------"")
    print(""Comparing %1.1f acres, %1.1f sq miles, and %1.1f sq km"" % (area1, area2, area3))
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn9_practice4.py"", [area1, area2, area3])
    
    if output.strip() == expected_output:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", expected_output)
        print(""\n"")

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))
    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))
    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)








",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def get_area_in_acres():
    acres = float(input(""Enter area in acres: ""))
    return acres

def get_area_in_square_miles():
    square_miles = float(input(""Enter area in square miles: ""))
    return square_miles
  
def get_area_in_square_kilometers():
    square_kilometers = float(input(""Enter area in square kilometers: ""))
    return square_kilometers

def compare_areas(area1, area2, area3):
    if area1 > area2 and area1 > area3:
        print(""Plot 1 is the biggest"")
    elif area2 > area1 and area2 > area3:
        print(""Plot 2 is the biggest"")
    else:
        print(""Plot 3 is the biggest"")

area1 = get_area_in_acres()
area2 = get_area_in_square_miles() * 0.0015625
area3 = get_area_in_square_kilometers() * 0.386102

compare_areas(area1, area2, area3)

",completed,0.0,"--------------------------------------------
Comparing 187.4 acres, 0.6 sq miles, and 1.3 sq km
--------------------------------------------
INCORRECT. Expected: Plot 2 is the biggest


--------------------------------------------
Comparing 119.8 acres, 0.4 sq miles, and 2.5 sq km
--------------------------------------------
INCORRECT. Expected: Plot 3 is the biggest


--------------------------------------------
Comparing 399.4 acres, 0.8 sq miles, and 4.4 sq km
--------------------------------------------
INCORRECT. Expected: Plot 3 is the biggest


Unit Test Returned: 0.0
"
5,7,lsn9_practice3,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a program that asks the user for the price of an item in US dollars /
cents. Then calculate and print out the equivalent price of the item in:

  *     * British Pounds (1.25 USD per Pound)
    * Korean Won (1 Won == 0.00083 USD)
    * Mexican Pesos (1 Peso == 53.81 Won)

Print each currency on a separate line.


","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    
    dollar_amount = round(random.uniform(1.00, 1000.00), 2)
    pound_amount = dollar_amount / 1.25
    won_amount = dollar_amount / 0.00083
    peso_amount = won_amount / 53.81
    
    output, error_message = autograder.run_script(""lsn9_practice3.py"", [dollar_amount])   
    lines = output.split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], pound_amount):
        print(""Correct Pound Conversion"")
        score += 33
    else:
        print(""Incorrect Pound Conversion.  Expected"", pound_amount)
        
    if len(lines) > 1 and autograder.equals(lines[1], won_amount):
        print(""Correct Won Conversion"")
        score += 33
    else:
        print(""Incorrect Won Conversion.  Expected"", won_amount)
        
    if len(lines) > 2 and autograder.equals(lines[2], peso_amount):
        print(""Correct Peso Conversion"")
        score += 34
    else:
        print(""Incorrect Peso Conversion.  Expected"", peso_amount)
    
    return score
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
price = float(input(""Enter the price in US dollars/cents: ""))

pounds = price * 1.25
won = price / 0.00083
pesos = won / 53.81

print(""Equivalent price in British Pounds:"", pounds)
print(""Equivalent price in Korean Won:"", won)
print(""Equivalent price in Mexican Pesos:"", pesos)
",completed,0.0,"Incorrect Pound Conversion.  Expected 458.304
Incorrect Won Conversion.  Expected 690216.8674698794
Incorrect Peso Conversion.  Expected 12826.925617355128
Unit Test Returned: 0
"
6,8,lsn9_practice2,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a program that gets two (x, y) coordinates from
the user.  Write a program that calculates the distance between these two
points, and prints them out.

HINT:  You will have to use the math module.


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
    
    x1 = round(random.uniform(-10, 10), 1)
    y1 = round(random.uniform(-10, 10), 1)
    x2 = round(random.uniform(-10, 10), 1)
    y2 = round(random.uniform(-10, 10), 1)
    
    num_tests_run += 1
    solution = math.sqrt(abs(x1-x2)**2 + abs(y1-y2)**2)
    
    print(""--------------------------------------------"")
    print(""Calculating distance between (%1.1f, %1.1f) and (%1.1f, %1.1f)"" % (x1, y1, x2, y2))
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn9_practice2.py"", [x1, y1, x2, y2], False)
    print(""Your Output:"", output.strip())
    
    if autograder.equals(output, solution):
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT"")    
        print(""Expected:"", solution)
        print(""\n"")

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    run_test()

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)










# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

x1 = float(input(""Enter the x-coordinate for point 1: ""))
y1 = float(input(""Enter the y-coordinate for point 1: ""))
x2 = float(input(""Enter the x-coordinate for point 2: ""))
y2 = float(input(""Enter the y-coordinate for point 2: ""))

distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)

print(""The distance between the two points is:"", distance)
",completed,0.0,"--------------------------------------------
Calculating distance between (-3.2, 2.8) and (-4.1, -7.9)
--------------------------------------------
Your Output: The distance between the two points is: 10.737783756436892
INCORRECT
Expected: 10.737783756436892


--------------------------------------------
Calculating distance between (-5.1, -0.1) and (-5.1, 7.6)
--------------------------------------------
Your Output: The distance between the two points is: 7.699999999999999
INCORRECT
Expected: 7.699999999999999


Unit Test Returned: 0.0
"
7,9,lsn9_practice1,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a program that prints out the class year.
Write the approrpriate input statement above this line to make this program
work.


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(class_year):
    global num_tests_run, num_tests_passed
    
    num_tests_run += 1
    solution = ""Members of the class of "" + str(class_year) + "" arrived at USAFA in "" + str(class_year - 4)
    
    print(""--------------------------------------------"")
    print(""Testing Class Year ="", class_year)
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn9_practice1.py"", [class_year], False)
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT"")
        print(""Your Output:"", output.strip())
        print(""Expected:"", solution)
        if "".0"" in output.strip():
            print(""*** HINT:  Is year a floating point number? ***"")
        print(""\n"")

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(random.randint(1959, 2024))
    run_test(random.randint(1959, 2024))

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
year = input(""Enter your class year: "")
print(""Class year:"", year)
",completed,0.0,"--------------------------------------------
Testing Class Year = 1991
--------------------------------------------
INCORRECT
Your Output: Class year: 1991
Expected: Members of the class of 1991 arrived at USAFA in 1987


--------------------------------------------
Testing Class Year = 2003
--------------------------------------------
INCORRECT
Your Output: Class year: 2003
Expected: Members of the class of 2003 arrived at USAFA in 1999


Unit Test Returned: 0.0
"
8,10,lsn8_uod,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You've been asked to develop a tool to help identify the uniform of the day,
based on temperature and wind speed.

The command center has provided the following table for guidance:

| Temperature  
---|---  
Wind Speed |  | <40 | 40 | >40 and <60 | 60 | >60  
<15 | Parkas | A-Jackets | A-Jackets | A-Jackets | Blues  
15 | ABUs | ABUs | Parkas | Parkas | Blues  
>15 | ABUs | ABUs | Parkas | Parkas | A-Jackets  
  
Create a Python program that first gets the temperature (in degrees
Fahrenheit) and then the wind speed (in knots) from the user. You may assume
that all inputs are non-negative numbers.

It should then output the correct response, as described above.


","from cs110 import autograder
import random, math

num_tests_passed = 0

# The Actual Solution
def solution(temp, wind):
    if temp < 40:
        if wind < 15:
            return ""Parkas""
        else:
            return ""ABUs""
    elif temp == 40:
        if wind < 15:
            return 'A-Jackets'
        else:
            return 'ABUs'
    elif temp > 40 and temp <= 60:
        if wind < 15:
            return 'A-Jackets'
        else:
            return 'Parkas'
    else:
        if wind <= 15:
            return 'Blues'
        else:
            return 'A-Jackets'


def run_test(temp, wind):
    global num_tests_passed
    
    print(""Testing Temp ="", temp, 'and Wind =', wind)
    output, error_message = autograder.run_script(""lsn8_uod.py"", [temp, wind], False)
    
    print(""Output:"", output.strip())
    
    if output.strip() == solution(temp, wind):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT.  Expected:"", solution(temp, wind), ""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(39, 14)
    run_test(39, 15)
    run_test(39, 16)
    run_test(40, 14)
    run_test(40, 15)
    run_test(40, 16)
    run_test(50, 14)
    run_test(50, 15)
    run_test(50, 16)
    run_test(60, 14)
    run_test(60, 15)
    run_test(60, 16)
    run_test(61, 14)
    run_test(61, 15)
    run_test(61, 16)
    
    return round(num_tests_passed * (100 / 15), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)






",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
temp = int(input(""Enter the temperature in Fahrenheit: ""))
wind_speed = int(input(""Enter the wind speed in knots: ""))

if temp < 15:
    if wind_speed < 40:
        uniform = ""Parkas""
    else:
        uniform = ""A-Jackets""
elif temp == 15:
    if wind_speed < 40:
        uniform = ""ABUs""
    elif wind_speed < 60:
        uniform = ""Parkas""
    else:
        uniform = ""Blues""
else:
    if wind_speed < 40:
        uniform = ""ABUs""
    elif wind_speed < 60:
        uniform = ""Parkas""
    else:
        uniform = ""A-Jackets""

print(""The uniform of the day is:"", uniform)
",completed,0.0,"Testing Temp = 39 and Wind = 14
Output: The uniform of the day is: ABUs
INCORRECT.  Expected: Parkas 

Testing Temp = 39 and Wind = 15
Output: The uniform of the day is: ABUs
INCORRECT.  Expected: ABUs 

Testing Temp = 39 and Wind = 16
Output: The uniform of the day is: ABUs
INCORRECT.  Expected: ABUs 

Testing Temp = 40 and Wind = 14
Output: The uniform of the day is: ABUs
INCORRECT.  Expected: A-Jackets 

Testing Temp = 40 and Wind = 15
Output: The uniform of the day is: ABUs
INCORRECT.  Expected: ABUs 

Testing Temp = 40 and Wind = 16
Output: The uniform of the day is: ABUs
INCORRECT.  Expected: ABUs 

Testing Temp = 50 and Wind = 14
Output: The uniform of the day is: ABUs
INCORRECT.  Expected: A-Jackets 

Testing Temp = 50 and Wind = 15
Output: The uniform of the day is: ABUs
INCORRECT.  Expected: Parkas 

Testing Temp = 50 and Wind = 16
Output: The uniform of the day is: ABUs
INCORRECT.  Expected: Parkas 

Testing Temp = 60 and Wind = 14
Output: The uniform of the day is: ABUs
INCORRECT.  Expected: A-Jackets 

Testing Temp = 60 and Wind = 15
Output: The uniform of the day is: ABUs
INCORRECT.  Expected: Parkas 

Testing Temp = 60 and Wind = 16
Output: The uniform of the day is: ABUs
INCORRECT.  Expected: Parkas 

Testing Temp = 61 and Wind = 14
Output: The uniform of the day is: ABUs
INCORRECT.  Expected: Blues 

Testing Temp = 61 and Wind = 15
Output: The uniform of the day is: ABUs
INCORRECT.  Expected: Blues 

Testing Temp = 61 and Wind = 16
Output: The uniform of the day is: ABUs
INCORRECT.  Expected: A-Jackets 

Unit Test Returned: 0.0
"
9,11,lsn8_speeding,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a program that gets a speed (in miles per hour). You may assume that
all inputs are non-negative numbers.

It should output the kind of ticket a police officer should give the driver
(according to the table below).

Speed (mph) | <= 65 | >65 and <= 70 | >70 and <= 75 | > 75 and <= 80 | > 80  
---|---|---|---|---|---  
Ticket | No Ticket | Warning | Speeding | Reckless Driving | Reckless
Endangerment  
  
**EXAMPLES:**

| Example 1 | Example 2 | Example 3 | Example 4 | Example 5  
---|---|---|---|---|---  
Input | 48 | 68 | 72 | 78 | 136  
Expected Output  | No Ticket | Warning | Speeding | Reckless Driving |
Reckless Endangerment


","from cs110 import autograder
import random, math

# The Actual Solution
def solution(speed):
    # Determines what to return based on the table
    if (speed <= 65):
        return ""No Ticket""
    elif (speed >65 and speed <= 70):
        return ""Warning""
    elif (speed > 70 and speed <= 75):
        return ""Speeding""  
    elif (speed >75 and speed <= 80):
        return ""Reckless Driving""
    elif (speed > 80):
        return ""Reckless Endangerment""

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    num_tests_passed = 0
    
    SPEEDS_TO_TEST = [random.randint(0, 65),
                      65,
                      random.randint(66, 70),
                      70,
                      random.randint(71, 75),
                      75,
                      random.randint(76, 80),
                      80,
                      random.randint(81, 100)]
    
    for i in range(0, len(SPEEDS_TO_TEST)):
        print(""-------------------------------"")
        print(""Test"", i+1)
        print(""-------------------------------"")
        speed = SPEEDS_TO_TEST[i]
        output, error_message = autograder.run_script(""lsn8_speeding.py"", [speed])
        
        if output.strip() == solution(speed):
            print(""SUCCESS!\n"")
            num_tests_passed += 1
        else:
            print(""INCORRECT.  Expected:"", solution(speed), ""\n"")
    
    return round(num_tests_passed * (100 / len(SPEEDS_TO_TEST)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def ticket(speed):
  if speed <= 65:
    return ""No Ticket""
  elif speed <= 70:
    return ""Warning""
  elif speed <= 75:
    return ""Speeding""
  elif speed <= 80:
    return ""Reckless Driving""
  else:
    return ""Reckless Endangerment""

print(ticket(48))
print(ticket(68))
print(ticket(72))
print(ticket(78))
print(ticket(136))
",completed,0.0,"-------------------------------
Test 1
-------------------------------
INCORRECT.  Expected: No Ticket 

-------------------------------
Test 2
-------------------------------
INCORRECT.  Expected: No Ticket 

-------------------------------
Test 3
-------------------------------
INCORRECT.  Expected: Warning 

-------------------------------
Test 4
-------------------------------
INCORRECT.  Expected: Warning 

-------------------------------
Test 5
-------------------------------
INCORRECT.  Expected: Speeding 

-------------------------------
Test 6
-------------------------------
INCORRECT.  Expected: Speeding 

-------------------------------
Test 7
-------------------------------
INCORRECT.  Expected: Reckless Driving 

-------------------------------
Test 8
-------------------------------
INCORRECT.  Expected: Reckless Driving 

-------------------------------
Test 9
-------------------------------
INCORRECT.  Expected: Reckless Endangerment 

Unit Test Returned: 0.0
"
10,12,lsn8_skill2,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a program that gets the user's body
temperature. If the body temperature is between 97-99 (inclusive), print
""Normal"". Otherwise, print ""Abnormal""


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

# The Actual Solution
def solution(gpa, apa, mpa):
    if gpa < 2.0 or apa < 2.0 or mpa < 2.0:
        return ""Probation""
    else:
        return ""No Probation""


def run_test(gpa, apa, mpa):
    global num_tests_run, num_tests_passed
    
    num_tests_run += 1
    
    print(""--------------------------------------------"")
    print(""Testing GPA ="", str(gpa) + "";"", ""APA ="", str(apa) + "";"", ""MPA ="", mpa)
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn8_skill2.py"", [gpa, apa, mpa], False)
        
    print(output.strip())
        
    if output.strip() == solution(gpa, apa, mpa):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT.  Expected:"", solution(gpa, apa, mpa), ""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    #round(random.uniform(0.1, 1.9),1)
    #round(random.uniform(2.1, 4.0),1)
    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1))
    run_test(round(random.uniform(0.1, 1.9),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1))
    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(0.1, 1.9),1), round(random.uniform(2.1, 4.0),1))
    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(0.1, 1.9),1))

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
temperature = float(input(""Enter body temperature: ""))

if temperature >= 97 and temperature <= 99:
    print(""Normal"")
else:
    print(""Abnormal"")
",completed,0.0,"--------------------------------------------
Testing GPA = 3.6; APA = 2.2; MPA = 2.3
--------------------------------------------
Abnormal
INCORRECT.  Expected: No Probation 

--------------------------------------------
Testing GPA = 0.2; APA = 2.2; MPA = 3.8
--------------------------------------------
Abnormal
INCORRECT.  Expected: Probation 

--------------------------------------------
Testing GPA = 3.3; APA = 1.0; MPA = 2.7
--------------------------------------------
Abnormal
INCORRECT.  Expected: Probation 

--------------------------------------------
Testing GPA = 2.4; APA = 2.6; MPA = 0.8
--------------------------------------------
Abnormal
INCORRECT.  Expected: Probation 

Unit Test Returned: 0.0
"
11,13,lsn8_skill1,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a program that gets the user's body
temperature. If the body temperature is between 97-99 (inclusive), print
""Normal"". Otherwise, print ""Abnormal""


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

# The Actual Solution
def solution(body_temperature):
    if body_temperature >= 97 and body_temperature <= 99:
        return ""Normal""
    else:
        return ""Abnormal""


def run_test(body_temperature):
    global num_tests_run, num_tests_passed
    
    num_tests_run += 1
    
    print(""--------------------------------------------"")
    print(""Testing Temperature ="", body_temperature)
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn8_skill1.py"", [body_temperature], False)
        
    if output.strip() == solution(body_temperature):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT.  Expected:"", solution(body_temperature), ""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(96.9)
    run_test(97)
    run_test(98.5)
    run_test(99)
    run_test(99.1)

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"--------------------------------------------
Testing Temperature = 96.9
--------------------------------------------
INCORRECT.  Expected: Abnormal 

--------------------------------------------
Testing Temperature = 97
--------------------------------------------
INCORRECT.  Expected: Normal 

--------------------------------------------
Testing Temperature = 98.5
--------------------------------------------
INCORRECT.  Expected: Normal 

--------------------------------------------
Testing Temperature = 99
--------------------------------------------
INCORRECT.  Expected: Normal 

--------------------------------------------
Testing Temperature = 99.1
--------------------------------------------
INCORRECT.  Expected: Abnormal 

Unit Test Returned: 0.0
"
12,14,lsn8_roundtrip,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write a Python program that gets three values from the user:

  * The distance to a destination (in miles)
  * The amount of fuel in the user's car (in gallons)
  * The # of miles the user's car can travel per gallon of gas (i.e., Miles Per Gallon)

You may assume that all inputs are non-negative numbers.

Calculate the amount of fuel needed to reach the destination. Then output
whether or not the user needs to refuel during a round trip, using the below
table as a guide:

Fuel Consumed (One-Way) | =< 50% | > 50% and <= 100% | > 100%  
---|---|---|---  
Output | No Refueling Needed | Refuel on Way Back | Refuel En Route  
  
**EXAMPLES:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 100  
10  
30 | 100  
5  
20 | 100  
7  
10  
Output | No Refueling Needed | Refuel on Way Back | Refuel En Route  
  
**NOTE: Your Output Must Match Exactly**


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
            
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 1"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn8_roundtrip.py"", [100,10,30])
    
    if output.strip() == ""No Refueling Needed"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect.  Expected: No Refueling Needed\n"")
        
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 2"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn8_roundtrip.py"", [100,5,20])
    
    if output.strip() == ""Refuel on Way Back"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect.  Expected: Refuel on Way Back\n"")
    
        # Runs the Script
    print(""-------------------------------"")
    print(""Test 3"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn8_roundtrip.py"", [100,7,10])
    
    if output.strip() == ""Refuel En Route"":
        print(""CORRECT\n"")
        points_earned += 34
    else:
        print(""Incorrect.  Expected: Refuel En Route\n"")

    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)






",100,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
distance = float(input(""Enter the distance to the destination (in miles): ""))
fuel = float(input(""Enter the amount of fuel in your car (in gallons): ""))
mpg = float(input(""Enter the miles per gallon of your car: ""))

fuel_needed = distance / mpg

if fuel >= fuel_needed * 2:
    print(""No Refueling Needed"")
elif fuel >= fuel_needed:
    print(""Refuel on Way Back"")
else:
    print(""Refuel En Route"")
",completed,100.0,"-------------------------------
Test 1
-------------------------------
CORRECT

-------------------------------
Test 2
-------------------------------
CORRECT

-------------------------------
Test 3
-------------------------------
CORRECT

Unit Test Returned: 100
"
13,15,lsn8_lists,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write an algorithm that gets a decimal GPA, APA, and MPA from the user (in
that order). You may assume that all inputs are non-negative whole numbers.

It then reports which meritorious list the cadet is on. If the GPA is equal to
or above 3.0, the cadet is on the ""Dean's List"", and if the APA is equal to or
above 3.0, the cadet is on the ""Athletic Director's List"", and if the MPA is
equal to or above 3.0, the cadet is on the ""Commandant's List"". Finally, if
the cadet qualifies for all three individual lists, then the cadet is on the
""Superintendent's List"". The algorithm should report all the lists the cadet
is on (in the order defined above), unless the cadet is on the Superintendents
List, in which case, it should report only, ""Superintendent's List"".

| No List | Dean's List | Athletic Director's List | Commandant's List |
Superintendent's List  
---|---|---|---|---|---  
GPA | < 3.0 | >= 3.0 | n/a | n/a | >= 3.0  
APA | < 3.0 | n/a | >= 3.0 | n/a | >= 3.0  
MPA | < 3.0 | n/a | n/a | >= 3.0 | >= 3.0  
  
**EXAMPLES:**

Example 1 | Example 2 | Example 3 | Example 4 | Example 5  
---|---|---|---|---  
Input | 2.8  
2.6  
2.5 | 3.5  
3.2  
2.8 | 3.3  
2.8  
3.4 | 3.6  
3.8  
3.2 | 2.8  
3.5  
3.8  
Output | No List | Dean's List  
Athletic Director's List | Dean's List  
Commandant's List | Superintendent's List | Athletic Director's List  
Commandant's List


","from cs110 import autograder
import random, math

num_tests_passed = 0

# The Actual Solution
def solution(gpa, apa, mpa):
    answer = """"
    
    # Determines what output to present (note how we are using the "" character because of the 's)
    if (gpa < 3.0 and apa < 3.0 and mpa < 3.0):
        answer += ""No List\n""
    elif (gpa >= 3.0 and apa >= 3.0 and mpa >= 3.0):
        answer += ""Superintendent's List\n""
    else:
        # Note that these are 3 separate if statements; we do this because we don't know what list(s) the cadet is on
        if (gpa >= 3.0):
            answer += ""Dean's List\n""
        
        if (apa >= 3.0):
            answer += ""Athletic Director's List\n""
        
        if (mpa >= 3.0):
            answer += ""Commandant's List\n""

    return answer.strip()


def run_test(gpa, apa, mpa):
    global num_tests_passed
    
    print(""--------------------------------------------"")
    print(""Testing GPA ="", str(gpa) + "";"", ""APA ="", str(apa) + "";"", ""MPA ="", mpa)
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn8_lists.py"", [gpa, apa, mpa])
        
    if output.strip() == solution(gpa, apa, mpa):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT.  Expected:"", solution(gpa, apa, mpa), ""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(2.8, 2.6, 2.5)
    run_test(3.5, 3.2, 2.8)
    run_test(3.3, 2.8, 3.4)
    run_test(3.6, 3.8, 3.2)
    run_test(2.8, 3.5, 3.8)
    
    return round(num_tests_passed * (100 / 5), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)






",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
gpa = float(input(""Enter GPA: ""))
apa = float(input(""Enter APA: ""))
mpa = float(input(""Enter MPA: ""))

lists = []

if gpa >= 3.0:
    lists.append(""Dean's List"")
if apa >= 3.0:
    lists.append(""Athletic Director's List"")
if mpa >= 3.0:
    lists.append(""Commandant's List"")

if len(lists) == 3:
    print(""Superintendent's List"")
else:
    for list_name in lists:
        print(list_name)
",completed,80.0,"--------------------------------------------
Testing GPA = 2.8; APA = 2.6; MPA = 2.5
--------------------------------------------
INCORRECT.  Expected: No List 

--------------------------------------------
Testing GPA = 3.5; APA = 3.2; MPA = 2.8
--------------------------------------------
SUCCESS!

--------------------------------------------
Testing GPA = 3.3; APA = 2.8; MPA = 3.4
--------------------------------------------
SUCCESS!

--------------------------------------------
Testing GPA = 3.6; APA = 3.8; MPA = 3.2
--------------------------------------------
SUCCESS!

--------------------------------------------
Testing GPA = 2.8; APA = 3.5; MPA = 3.8
--------------------------------------------
SUCCESS!

Unit Test Returned: 80.0
"
14,17,lsn7_skill2,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a program that gets a course name and number
(e.g., Math 243) from the user. Modify the program to do the following:

  * If the course name is equal to ""CS110"", print ""You get to program!""
  * Otherwise, print ""Boo, no programming.""


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
            
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 1 - CS110"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn7_skill2.py"", [""CS110""])
    
    if output.strip() == ""You get to program!"":
        print(""CORRECT\n"")
        points_earned += 50
    else:
        print(""Incorrect.  Expected: You get to program!\n"")
        
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 2 - Another Class"")
    print(""-------------------------------"")
    classes = ['Math 151', 'English 111', 'Physics 110']
    random_class = classes[random.randint(0, len(classes)-1)]
    output, error_message = autograder.run_script(""lsn7_skill2.py"", [random_class])
    
    if output.strip() == ""Boo, no programming."":
        print(""CORRECT\n"")
        points_earned += 50
    else:
        print(""Incorrect.  Expected: Boo, no programming.\n"")

    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)






",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
course_name = input(""Enter the course name and number (e.g., Math 243): "")

if course_name == ""CS110"":
    print(""You get to program!"")
else:
    print(""Boo, no programming."")
",completed,100.0,"-------------------------------
Test 1 - CS110
-------------------------------
CORRECT

-------------------------------
Test 2 - Another Class
-------------------------------
CORRECT

Unit Test Returned: 100
"
15,18,lsn7_skill1,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a program that gets a temperature from the
user. Modify the program to do the following:

  * If the temperature is less than or equal to 32, print ""Water Has Frozen""
  * Otherwise (i.e., else), print ""Above Water's Freezing Point""


","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
    
    # Generates Random Values
    above_freezing = random.uniform(33, 100)
    below_freezing = random.uniform(-100, 31)
    at_freezing    = 32
        
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 1 - Below Freezing"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn7_skill1.py"", [below_freezing])
    
    if output.strip() == ""Water Has Frozen"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect.  Expected: Water Has Frozen\n"")
        
    
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 2 - Above Freezing"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn7_skill1.py"", [above_freezing])
    
    if output.strip() == ""Above Water's Freezing Point"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect.  Expected: Above Water's Freezing Point\n"")
        
    
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 3 - Exactly 32 Degrees"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn7_skill1.py"", [32])
    
    if output.strip() == ""Water Has Frozen"":
        print(""CORRECT"")
        points_earned += 34
    else:
        print(""Incorrect.  Expected: Water Has Frozen\n"")

    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)









# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
temperature = float(input(""Enter the temperature: ""))

if temperature <= 32:
    print(""Water Has Frozen"")
else:
    print(""Above Water's Freezing Point"")
",completed,100.0,"-------------------------------
Test 1 - Below Freezing
-------------------------------
CORRECT

-------------------------------
Test 2 - Above Freezing
-------------------------------
CORRECT

-------------------------------
Test 3 - Exactly 32 Degrees
-------------------------------
CORRECT
Unit Test Returned: 100
"
16,19,lsn7_positive,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write a Python  **program**  that gets a floating point number from the user:

  * If the number is positive, print the word `POSITIVE`
  * Otherwise, print the word `NOT POSITIVE`

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 10 | -5 | 0  
Output | POSITIVE | NOT POSITIVE | NOT POSITIVE


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
    
    # Generates Random Values
    negative_value = random.randint(-100, -1)
    positive_value = random.randint(1, 100)
        
    # Runs the Script
    print(""-------------------------------"")
    print(""# Test 1 - Positive Number"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn7_positive.py"", [positive_value])
    
    if output.strip() == ""POSITIVE"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect Output:"", output)
        print(""Expected POSITIVE\n"")
        
    
    # Runs the Script
    print(""-------------------------------"")
    print(""# Test 2 - Negative Number"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn7_positive.py"", [negative_value])
    
    if output.strip() == ""NOT POSITIVE"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect Output:"", output)
        print(""Expected NOT POSITIVE\n"")
        
    
    # Runs the Script
    print(""-------------------------------"")
    print(""# Test 3 - Zero"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn7_positive.py"", [0])
    
    if output.strip() == ""NOT POSITIVE"":
        print(""CORRECT"")
        points_earned += 34
    else:
        print(""Incorrect Output:"", output)
        print(""Expected NOT POSITIVE\n"")

    return points_earned

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"-------------------------------
# Test 1 - Positive Number
-------------------------------
Incorrect Output: 
Expected POSITIVE

-------------------------------
# Test 2 - Negative Number
-------------------------------
Incorrect Output: 
Expected NOT POSITIVE

-------------------------------
# Test 3 - Zero
-------------------------------
Incorrect Output: 
Expected NOT POSITIVE

Unit Test Returned: 0
"
17,20,lsn7_largest,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write a program that takes three integers as parameters, and prints the
largest (i.e., highest) number.

Ex: If the input is:

    
    
    7
    15
    3
    

Your function should return:

    
    
    15
    

  
In the event that all 3 numbers are the same, output that number.

Ex: If the input is:

    
    
    5
    5
    5
    

Your function should return:

    
    
    5


","from cs110 import autograder
import random, math


def run_test(num1, num2, num3):
    print(""-------------------------------"")
    print(""# Testing: "" + str(num1) + "" "" + str(num2) + "" "" + str(num3))
    print(""-------------------------------"")
    
    output, error_message = autograder.run_script(""lsn7_largest.py"", [num1, num2, num3])
    
    if autograder.equals(output, max(num1, num2, num3)):
        print(""CORRECT\n"")
        return True
    else:
        print(""Incorrect.  Expected"", max(num1, num2, num3))
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    tests_passed = 0
    
    # Generate 3 Random Numbers
    num1 = 0
    num2 = 0
    num3 = 0
    
    # Ensures that the 3 Numbers are Different
    while num1 == num2 or num1 == num3 or num2 == num3:
        num1 = random.randint(0, 100)
        num2 = random.randint(0, 100)
        num3 = random.randint(0, 100)
    
    # Sorts the numbers
    # This is needed so that we can test relationships between numbers
    numbers = [num1, num2, num3]
    numbers.sort()
    num1 = numbers[0]
    num2 = numbers[1]
    num3 = numbers[2]
    
    # Test 1:  num1, num2, num3
    if run_test(num1, num2, num3):
        tests_passed += 1

    # Test 2:  num1, num3, num2
    if run_test(num1, num3, num2):
        tests_passed += 1
        
    # Test 3:  num2, num3, num1
    if run_test(num2, num3, num1):
        tests_passed += 1
    
    # Test 4:  num3, num1, num2
    if run_test(num3, num1, num2):
        tests_passed += 1

    # Test 5:  num2, num1, num3
    if run_test(num2, num1, num3):
        tests_passed += 1
    
    # Test 6:  3 Equal Numbers
    if run_test(num1, num1, num1):
        tests_passed += 1
            
    print(""Passed "" + str(tests_passed) + "" out of 6 tests"")
    return round(tests_passed * (100 / 6), 1)
    
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def find_largest(a, b, c):
    if a >= b and a >= c:
        return a
    elif b >= a and b >= c:
        return b
    else:
        return c

num1 = int(input())
num2 = int(input())
num3 = int(input())

result = find_largest(num1, num2, num3)
print(result)
","failed: must be real number, not str",0.0,
18,21,lsn7_classyear,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Using the below table as a guide, write a Python program that takes the user's
class year as input, and outputs their cadet class. If the class year is
before 2021, output ""Graduate"". Alternatively, if the class year is larger
than 2024, output ""Not a Cadet"".

You may assume that all inputs provided to your application are years
(represented as Integers)

| Example 1 | Example 2 | Example 3 | Example 4 | Example 5 | Example 6  
---|---|---|---|---|---|---  
Input | 2021 | 2022 | 2023 | 2024 | 2020 | 2025  
Output | Firstie | Two Degree | Three Degree | Four Degree | Graduate | Not a
Cadet


","from cs110 import autograder
import random, math


def solution(class_year):
    if class_year < 2021:
        return ""Graduate""
    elif class_year == 2021:
        return ""Firstie""
    elif class_year == 2022:
        return ""Two Degree""
    elif class_year == 2023:
        return ""Three Degree""
    elif class_year == 2024:
        return ""Four Degree""
    else:
        return ""Not a Cadet""

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    START_YEAR = 2020
    END_YEAR = 2025
    number_correct = 0
    
    for year in range(START_YEAR, END_YEAR + 1):
        print(""------------------------------"")
        print(""Testing: "" + str(year))
        print(""------------------------------"")
        
        # Runs the Script
        output, error_message = autograder.run_script(""lsn7_classyear.py"", [year])
                
        lines = output.split(""\n"")
               
        if lines[0] == solution(year):
            print(""PASS\n"")
            number_correct += 1
        else:
            print(""FAIL\n"")
    
    print(""Passed "" + str(number_correct) + "" out of "" + str(END_YEAR - START_YEAR + 1) + "" tests"")
    return round(number_correct * (100 / (END_YEAR - START_YEAR + 1)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
class_year = int(input(""Enter your class year: ""))

if class_year < 2021:
    print(""Graduate"")
elif class_year == 2021:
    print(""Firstie"")
elif class_year == 2022:
    print(""Two Degree"")
elif class_year == 2023:
    print(""Three Degree"")
elif class_year == 2024:
    print(""Four Degree"")
else:
    print(""Not a Cadet"")
",completed,100.0,"------------------------------
Testing: 2020
------------------------------
PASS

------------------------------
Testing: 2021
------------------------------
PASS

------------------------------
Testing: 2022
------------------------------
PASS

------------------------------
Testing: 2023
------------------------------
PASS

------------------------------
Testing: 2024
------------------------------
PASS

------------------------------
Testing: 2025
------------------------------
PASS

Passed 6 out of 6 tests
Unit Test Returned: 100.0
"
19,22,lsn7_atmosphere,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** The Earth's atmosphere is divided into a series of layers. Write an
algorithm that asks the user for the altitude in kilometers. Then output the
corresponding layer according to the following table:

Altitude | ≤10km | >10km&≤50km | >50km&≤85km | >85km&≤1000km |
>1000km&≤100,000km | >100,000km  
---|---|---|---|---|---|---  
**Layer** | Troposphere | Stratosphere | Mesosphere | Thermosphere | Exosphere
| Space


","from cs110 import autograder
import random, math

def solution(altitude):
    if altitude >= 0:
        if altitude <= 10:
            return ""Troposphere""
    if altitude >= 11:
        if altitude <= 50:
            return ""Stratosphere""
    if altitude >= 51:
        if altitude <= 85:
            return ""Mesosphere""
    if altitude >= 86:
        if altitude <= 1000:
            return ""Thermosphere""
    if altitude >= 1001:
        if altitude <= 100000:
            return ""Exosphere""
        else:
            return ""Space""
        
# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    TEST_VALUES = [0, 1, 10, 11, 50, 51, 85, 86, 1000, 1001, 100000, 100001]
    tests_passed = 0
    
    for altitude in TEST_VALUES:
        print(""--------------------------"")
        print(""Testing "" + str(altitude) + "" km"")
        print(""--------------------------"")
        
        # Runs the Script
        output, error_message = autograder.run_script(""lsn7_atmosphere.py"", [altitude])
                               
        # Your Test Goes Here (Return True if Pass, False Otherwise)   
        if output.strip() == solution(altitude):
            print(""Passed\n"")
            tests_passed += 1
        else:
            print(""Failed (Expected: "" + solution(altitude) + "")\n"")
    
    print(""Passed"", tests_passed, ""out of"", len(TEST_VALUES), ""tests."")
    return round(tests_passed * (100 / len(TEST_VALUES)), 2)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"--------------------------
Testing 0 km
--------------------------
Failed (Expected: Troposphere)

--------------------------
Testing 1 km
--------------------------
Failed (Expected: Troposphere)

--------------------------
Testing 10 km
--------------------------
Failed (Expected: Troposphere)

--------------------------
Testing 11 km
--------------------------
Failed (Expected: Stratosphere)

--------------------------
Testing 50 km
--------------------------
Failed (Expected: Stratosphere)

--------------------------
Testing 51 km
--------------------------
Failed (Expected: Mesosphere)

--------------------------
Testing 85 km
--------------------------
Failed (Expected: Mesosphere)

--------------------------
Testing 86 km
--------------------------
Failed (Expected: Thermosphere)

--------------------------
Testing 1000 km
--------------------------
Failed (Expected: Thermosphere)

--------------------------
Testing 1001 km
--------------------------
Failed (Expected: Exosphere)

--------------------------
Testing 100000 km
--------------------------
Failed (Expected: Exosphere)

--------------------------
Testing 100001 km
--------------------------
Failed (Expected: Space)

Passed 0 out of 12 tests.
Unit Test Returned: 0.0
"
20,23,lsn6_temperature,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

Write an algorithm that prompts the user for a temperature in °F and then
outputs K and °C in that order.

**EXAMPLE:**

| Example 1 | Example 2  
---|---|---  
Input | 32 | 0  
Output | 273.15  
0 | 255.372  
-17.778  
  
**Note: Output must match within a predefined tolerance.**


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    degrees_farenheit = random.random() * 451.0
    degrees_celsius = (degrees_farenheit - 32.0) * 5/9
    degrees_kelvin = degrees_celsius + 273.15
        
    # Runs the Script
    output, error_message = autograder.run_script(""lsn6_temperature.py"", [degrees_farenheit])
    
    lines = output.split('\n')
    
    if autograder.equals(lines[0], degrees_kelvin):
        print(""Conversion to Kelvin looks good."")
        if autograder.equals(lines[1], degrees_celsius):
            print(""Conversion to Celsius looks good."")
            return 100.0
        else:
            print(""Conversion to Celsius incorrect.\nYour result: "" + str(lines[1]) + ""\nExpected: "" + str(degrees_celsius))
            return 50.0
    else:
        if autograder.equals(lines[0], degrees_celsius):
            print(""Looks like you swapped the order of your output. Look at the Problem Statement and try again."")
        else:
            print(""Conversion to Kelvin incorrect.\nYour result: "" + str(lines[0]) + ""\nExpected: "" + str(degrees_kelvin))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)










# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
# Prompt user for temperature in °F
temp_f = float(input(""Enter temperature in °F: ""))

# Convert temperature to Kelvin
temp_k = (temp_f + 459.67) * 5/9

# Convert temperature to °C
temp_c = (temp_f - 32) * 5/9

# Print the results
print(f""{temp_k:.2f}"")
print(f""{temp_c:.2f}"")
","failed: must be real number, not str",0.0,
21,24,lsn6_skill2,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a template that gets a distance and speed from
the user, and calculates the travel time. Unfortunately, the code does not
work. Analyze the code (and error message) and fix the problem.


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    # Generates Random Values
    distance = random.uniform(100, 200)
    speed = random.uniform(20, 50)
    time = distance / speed
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn6_skill2.py"", [distance, speed])
    
    if autograder.equals(output, time):
        print(""PASSED"")
        return 100
    else:
        print(""Incorrect Output, Expected"", time)
        return 0


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
distance = float(input(""Enter distance in miles: ""))
speed = float(input(""Enter speed in miles per hour: ""))

# calculate the travel time
time = distance / speed

print(""The travel time is:"", time, ""hours"")
",completed,0.0,"Incorrect Output, Expected 5.759223949943766
Unit Test Returned: 0
"
22,25,lsn6_skill1,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Prompt the user for 3 different values. Store the values in variables using
the names specified within the template. DO NOT include any prompts when
asking for a value from the user.


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    points_earned = 0   
    
    output, error = autograder.run_script(""lsn6_skill1.py"", ['abc', 123, 123.45])
    
    lines = output.split(""\n"")
    
    if (lines[0] == ""<class 'str'>""):
        points_earned += 33
        print(""my_string correct!"")
    else:
        print(""my_string is either not present, or is not the correct data type"")
    
    if (lines[1] == ""<class 'int'>""):
        points_earned += 33
        print(""my_integer correct!"")
    else:
        print(""my_integer is either not present, or is not the correct data type"")
        
    if (lines[2] == ""<class 'float'>""):
        points_earned += 34
        print(""my_float correct!"")
    else:
        print(""my_float is either not present, or is not the correct data type"")
        
    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
# Prompt the user for 3 different values
value1 = input()
value2 = input()
value3 = input()

# Print the values
print(""Value 1:"", value1)
print(""Value 2:"", value2)
print(""Value 3:"", value3)
",completed,0.0,"my_string is either not present, or is not the correct data type
my_integer is either not present, or is not the correct data type
my_float is either not present, or is not the correct data type
Unit Test Returned: 0
"
23,26,lsn6_projectile,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

Write a python program that can calculate the range of a projectile when fired
from an artillery on level ground. Your program will ask the user to input the
initial velocity (`v`) and angle in degrees (`theta`). Your program should
then calculate and print the range using the following formula:

`range = (v^2 * sin(2 * theta)) / 9.8`  
 **WARNING: The above formula is not valid Python.**  
  

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 800  
45 | 600  
30 | 535.2  
81.7  
Output | 65306.122 | 31813.178 | 8350.235  
  
**Hints**

  * You need to use the `math` module's trig functions to solve this problem. Type `import math` at the top of your code to add it to your program.
  * The `sin()` and `cos()` functions assume that the angle is in  **radians**


","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 5
    num_correct = 0
    
    for i in range(NUM_TESTS):
        # Generates Random Values
        velocity = random.randint(400, 900)
        theta = random.random() * 90.0
        answer = (velocity**2 * math.sin(2 * theta * math.pi/180.0)) / 9.8   
            
        print(""----------------------------------------"")
        print(""TEST CASE"", i+1)
        print(""----------------------------------------"")
        
        # Runs the Script
        output, error_message = autograder.run_script(""lsn6_projectile.py"", [velocity, theta])

        # Optional:  Displays the Error Message (if one is provided)
        if error_message != '':
            print(""Error Occurred: "" + error_message)    
        
        lines = output.split('\n')
        
        if autograder.equals(lines[0], answer):
            print(""CORRECT.\n\n"")
            num_correct += 1
        else:
            print(""INCORRECT (Expected: "" + str(answer) + "")\n\n"")
    
    return (100 / NUM_TESTS) * num_correct
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

v = float(input(""Enter the initial velocity: ""))
theta = float(input(""Enter the angle in degrees: ""))

theta_rad = math.radians(theta)
range = (v**2 * math.sin(2 * theta_rad)) / 9.8

print(f""The range is: {range}"")
",completed,0.0,"----------------------------------------
TEST CASE 1
----------------------------------------
INCORRECT (Expected: 19024.956604186966)


----------------------------------------
TEST CASE 2
----------------------------------------
INCORRECT (Expected: 12231.360412427015)


----------------------------------------
TEST CASE 3
----------------------------------------
INCORRECT (Expected: 40571.171286648714)


----------------------------------------
TEST CASE 4
----------------------------------------
INCORRECT (Expected: 3006.4917580344736)


----------------------------------------
TEST CASE 5
----------------------------------------
INCORRECT (Expected: 20346.570712657034)


Unit Test Returned: 0.0
"
24,27,lsn6_math,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

Given three floating-point numbers x, y, and z, output the square root of x,
the absolute value of (y minus z) , and the factorial of (the ceiling of z).
Each input should be on a new line, and rounded to a maximum of 2 decimal
places.

(Hint: use the [`round` (Links to an external
site.)](https://docs.python.org/3/library/functions.html#round) function to
round your outputs!):

`round(# to round, # of digits to round to)`

**EXAMPLE:**

    
    
    5.0
    6.5
    3.2
    

Then the output is:

    
    
    2.24
    3.30
    24.00
    

NOTE: Decimal places may be slightly off depending on the exact numbers used.


","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num1 = random.random() * 100.0
    num2 = random.random() * 100.0
    num3 = random.random() * 10.0
    
    part1 = round(math.sqrt(num1), 2)
    part2 = round(math.fabs(num2 - num3), 2)
    part3 = round(math.factorial(math.ceil(num3)), 2)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn6_math.py"", [num1, num2, num3])
    
    lines = output.split('\n')
    
    if autograder.equals(lines[0], part1, 0.001) and autograder.equals(lines[1], part2, 0.001) and autograder.equals(lines[2], part3, 0.001):
        print(""Looks Good!"")
        return 100
    else:
        print(""One or more calculations did not work. Expected:\n"" + str(part1) + ""\n"" + str(part2) + ""\n"" + str(part3))
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"One or more calculations did not work. Expected:
2.58
28.68
5040
Unit Test Returned: 0
"
25,28,lsn6_calories,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

The following equations estimate the calories burned when exercising ([source
(Links to an external
site.)](https://web.archive.org/web/20121021230025/http://fitnowtraining.com/2012/01/formula-
for-calories-burned/)):

Men: Calories = ( (Age x 0.2017) + (Weight x 0.09036) + (Heart Rate x 0.6309)
-- 55.0969 ) x Time / 4.184

Women: Calories = ( (Age x 0.074) -- (Weight x 0.05741) + (Heart Rate x
0.4472) -- 20.4022 ) x Time / 4.184

Write a program using inputs age (years), weight (pounds), heart rate (beats
per minute), and time (minutes), respectively. Output calories burned for men
and women.

Output each floating-point value (your program will be marked correct so long
as it outputs a value within a predefined range)

**EXAMPLE:**

If the input is:

    
    
    49
    155
    148
    60
    

Then the output is:

    
    
    891.47
    580.94


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    age_years = random.randint(10, 99)
    weight_pounds = random.randint(80, 400)
    heart_bpm = random.randint(50, 140)
    time_minutes = random.randint(15, 90)
    
    calories_man   = ( (age_years * 0.2017) + (weight_pounds * 0.09036) + (heart_bpm * 0.6309) - 55.0969 )  * time_minutes / 4.184
    calories_woman = ( (age_years * 0.074)  - (weight_pounds * 0.05741) + (heart_bpm * 0.4472) - 20.4022 ) * time_minutes / 4.184
        
    # Runs the Script
    output, error_message = autograder.run_script(""lsn6_calories.py"", [age_years, weight_pounds, heart_bpm, time_minutes])
      
    lines = output.split('\n')
      
    if autograder.equals(lines[0], calories_man):
        print(""Male Calorie Calculations Look Good."")
        if autograder.equals(lines[1], calories_woman):
            print(""Female Calorie Calculations Look Good."")
            return 100.0
        else:
            print(""Female Calorie Calculation is Incorrect.\nExpected: "" + str(calories_woman))
            return 50.0
    else:
        print(""Male Calorie Calculation is Incorrect.\nExpected: "" + str(calories_man))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
# get input values
age = int(input())
weight = int(input())
heart_rate = int(input())
time = int(input())

# calculate calories burned for men
calories_men = ((age * 0.2017) + (weight * 0.09036) + (heart_rate * 0.6309) - 55.0969) * time / 4.184

# calculate calories burned for women
calories_women = ((age * 0.074) - (weight * 0.05741) + (heart_rate * 0.4472) - 20.4022) * time / 4.184

# print the output
print(""{:.2f}"".format(calories_men))
print(""{:.2f}"".format(calories_women))
","failed: must be real number, not str",0.0,
26,29,lsn6_bits_to_kmg,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

One byte is comprised of 8 bits. A typical computer program has a requirement
for much more memory. Therefore, many bytes can be grouped together to make
larger memory amounts. Our convention is for computer memory is scaled in
logical increments of 210 = 1024.

For example:

  * 1024 bytes = 1 kilobyte (KB)
  * 1024 KB = 1 megabyte (MB)
  * 1024 MB = 1 gigabyte (GB)

Write an algorithm that prompts the user for a number of bits and then outputs
the equivalent number of kilobytes, megabytes, and gigabytes.

**EXAMPLE:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 1000000 | 6879000 | 92445694  
Output | 122.07  
0.12  
0.00012 | 839.72  
0.82  
.0008 | 11,284.87  
11.02  
0.01  
  
**Note: Output must match within a predefined tolerance.**


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_bits = random.randint(1, 1000000)
    num_bytes = num_bits / 8
    num_kb = num_bytes / 1024
    num_mb = num_kb / 1024
    num_gb = num_mb / 1024
        
    # Runs the Script
    output, error_message = autograder.run_script(""lsn6_bits_to_kmg.py"", [num_bits])
      
    lines = output.split('\n')
      
    if autograder.equals(lines[0], num_kb):
        print(""Kilobyte Conversion Looks Good."")
        if autograder.equals(lines[1], num_mb):
            print(""Megabyte Conversion Looks Good."")
            if autograder.equals(lines[2], num_gb):
                print(""Gigabyte Conversion Looks Good."")
                return 100.0
            else:
                print(""Num GB is Incorrect.\n  Expected: "" + str(num_gb))
                return 67.0
        else:
            print(""Num MB is Incorrect.\n  Expected: "" + str(num_mb))
            return 33.0
    else:
        print(""Num KB is Incorrect.\n  Expected: "" + str(num_kb))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def convert_bits_to_memory():
    bits = int(input(""Enter the number of bits: ""))
    kilobytes = bits / 8 / 1024
    megabytes = kilobytes / 1024
    gigabytes = megabytes / 1024
    print(f""{kilobytes:.2f}"")
    print(f""{megabytes:.2f}"")
    print(f""{gigabytes:.5f}"")

convert_bits_to_memory()
","failed: must be real number, not str",0.0,
27,30,lsn6_bits_to_bytes,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

**PROBLEM STATEMENT:  
**

The basic unit of computer memory is a bit. A bit can represent two values (on
or off, 0 or 1). To represent more information, bits are grouped together in
larger quantities. Beyond a bit, the next logical grouping is a byte, where 1
byte has 8 bits. Write an algorithm that prompts the user for a number of bits
and then outputs the equivalent number of bytes.

**EXAMPLE:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 8 | 800 | 7234  
Output | 1.0 | 100.0 | 904.25  
  
**Note: Output must match exactly.**


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_bits = random.randint(1, 1000000)
    num_bytes = num_bits / 8

    # Runs the Script
    output, error_message = autograder.run_script(""lsn6_bits_to_bytes.py"", [num_bits])
      
    if autograder.equals(output, num_bytes):
        print(""Num Bytes Looks Good."")
        return 100.0
    else:
        print(""Num Bytes is Incorrect.\nExpected: "" + str(num_bytes))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
num_bits = int(input(""Enter the number of bits: ""))
num_bytes = num_bits / 8
print(num_bytes)
","failed: must be real number, not str",0.0,
28,31,lsn6_bit_representation,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

One way bits can hold information is computer images. Computer images are
composed of a grid of small, independent colored cells known as pixels. The
number of colors each pixel can hold is related to the number bits allocated
to each pixel. A simple black and white image, for example, would have a
single bit per pixel, where the value of the bit would represent black or
white for that pixel. Allocating 2 bits per pixel would allow each pixel to
have one of four colors.

Generally speaking, the number of color options available to a particular
pixel can be described as:

    
    
    numberofcolors = 2number of bits

In Python, write an algorithm that prompts the user for a number of bits and
then outputs the number of different colors that could be represented by a
single pixel.

**EXAMPLE:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 3 | 8 | 24  
Output | 8 | 256 | 16777216  
  
**Note: Output must match exactly.**


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_bits = random.randint(1, 32)
    num_colors = 2 ** num_bits

    # Runs the Script
    output, error_message = autograder.run_script(""lsn6_bit_representation.py"", [num_bits])
      
    if autograder.equals(output, num_colors):
        print(""Num Colors Looks Good."")
        return 100.0
    else:
        print(""Num Colors is Incorrect.\nExpected: "" + str(num_colors))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
# Prompt the user for the number of bits
bits = int(input('Enter the number of bits: '))

# Calculate the number of colors
number_of_colors = 2 ** bits

# Output the result
print('The number of different colors that could be represented by a single pixel is', number_of_colors)
",completed,0.0,"Num Colors is Incorrect.
Expected: 134217728
Unit Test Returned: 0.0
"
29,32,lsn5_skill2,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a program that gets a cadet's age, and stores it in a variable called
**your_age.**

Print the user's age + 4.

For example, if the user types:

    
    
     18

Your program should print:

    
    
    22


","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    # Generates Random Values
    age = random.randint(18, 30)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn5_skill2.py"", [age])
    
    if autograder.equals(output, age+4):
        print(""PASSED"")
        return 100
    elif autograder.equals(output, age):
        print(""Close!  You forgot to add 4 to the age before printing it out"")
        return 50
    else:
        print(""Incorrect Output, Expected"", age+4)
        return 0


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"Incorrect Output, Expected 27
Unit Test Returned: 0
"
30,33,lsn5_skill1,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Create a variable called  **name,  **and set it equal to your name
(represented as a string--don't forget to use the quotation marks!).


","from cs110 import autograder
import random

from lsn5_skill1 import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    points_earned = 0   
    
    print(""Looking for a variable called 'name' . . . "", end='')
    
    if 'name' in globals():
        points_earned += 50
        print(""FOUND!"")
        print(""Now, checking to make sure your name is a string"")
        
        if type(name).__name__ == 'str':
            points_earned += 50
            print(""Good Job"", name + ""!"")
        else:
            print(""Make sure you are surrounding your name with quotation marks"")
    else:
        print(""NOT FOUND :("")
        
    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
name = ""John Doe""  # Replace with your own name
",completed,100.0,"Looking for a variable called 'name' . . . FOUND!
Now, checking to make sure your name is a string
Good Job John Doe!
Unit Test Returned: 100
"
31,34,lsn5_scoreaverage,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write an algorithm that prompts the user for three sports game scores and
outputs the average.

  
**EXAMPLE:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 8  
15  
12 | 89  
103  
63 | 14  
42  
36  
Output | 11.666666666666666 | 85.0 | 30.666666666666668  
  
**Note: Output must match (within a predefined tolerance).**


","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    score1 = random.randint(0, 100)
    score2 = random.randint(0, 100)
    score3 = random.randint(0, 100)
    average = (score1 + score2 + score3) / 3.0
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn5_scoreaverage.py"", [score1, score2, score3])
    
    if autograder.equals(output, average):
        print(""PASSED!"")
        return 100
    else:
        print(""Value doesn't match.\nExpected: "" + str(average))
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
# prompt user for three sports game scores and calculate the average

# prompt user for input
score1 = float(input(""Enter the score for game 1: ""))
score2 = float(input(""Enter the score for game 2: ""))
score3 = float(input(""Enter the score for game 3: ""))

# calculate the average
average = (score1 + score2 + score3) / 3

# output the result
print(""The average score is:"", average)
",completed,0.0,"Value doesn't match.
Expected: 22.666666666666668
Unit Test Returned: 0
"
32,35,lsn5_pointspread,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

A ""Point Spread"" is a term used to in sports (and gambling) to describe the
difference between two teams' scores. For example, if one team scores 20
points and another team scores 30 points, the point spread is 10. A point
spread is always a positive number.

Write an algorithm that prompts the user for two sports game scores and
outputs the point spread.  
  
**  
EXAMPLE:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 8  
15 | 89  
103 | 42  
14  
Output | 7 | 14 | 28  
  
**Note: Output must match exactly.**


","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    score1 = random.randint(0, 50)
    score2 = random.randint(score1, 100)
    spread = abs(score1 - score2)

    points_earned = 0

    # Trial #1:  score 1 > score2
    print(""Testing when score 1 is bigger than score 2 . . ."")
    output, error_message = autograder.run_script(""lsn5_pointspread.py"", [score1, score2])
    
    if autograder.equals(output, spread):
        print(""PASSED!\n"")
        points_earned += 50
    else:
        print(""Value doesn't match.\nExpected: "" + str(spread)  + ""\n"")
        
    # Trial #2:  score 2 > score1
    print(""Testing when score 2 is bigger than score 1 . . ."")
    output, error_message = autograder.run_script(""lsn5_pointspread.py"", [score2, score1])
    
    if autograder.equals(output, spread):
        print(""PASSED!"")
        points_earned += 50
    else:
        print(""Value doesn't match.\nExpected: "" + str(spread))
    
    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"Testing when score 1 is bigger than score 2 . . .
Value doesn't match.
Expected: 80

Testing when score 2 is bigger than score 1 . . .
Value doesn't match.
Expected: 80
Unit Test Returned: 0
"
33,36,lsn5_madlib,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Mad Libs are activities that have a person provide various words, which are
then used to complete a short story in unexpected (and hopefully funny) ways.
(EDITOR'S NOTE: Do you kids even do Mad Libs anymore?)

Complete the program to read the needed values from input, that the existing
output statement(s) can use to output a short story.

**EXAMPLE:**

If the input is:

    
    
    Eric
    Chipotle
    12
    burritos
    

Then the output is:

    
    
    Eric went to Chipotle to buy 12 different types of burritos


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    first_names = ['Adrian', 'Troy', 'Dave', 'Paul', 'Kelly', 'Steve', 'Barry']
    generic_locations = ['Best Buy', 'AAFES', 'Target', 'THE Walmart', 'Home Depot']
    nouns = ['Video Games', 'Board Games', 'Nintendo Switches', 'Sony PS4s', 'Microsoft (Ugh) Xbox Ones']
    
    first_name = first_names[random.randint(0, len(first_names) - 1)]
    generic_location = generic_locations[random.randint(0, len(generic_locations) - 1)]
    whole_number = random.randint(0, 100)
    plural_noun = nouns[random.randint(0, len(nouns) - 1)]

    expected_output = first_name + ' went to ' + generic_location + ' to buy ' + str(whole_number) + ' different types of ' + plural_noun + ""\n""

    # Runs the Script
    output, error_message = autograder.run_script(""lsn5_madlib.py"", [first_name, generic_location, whole_number, plural_noun])
    
    if output == expected_output:
        print(""PASSED!"")
        return 100
    else:
        print(""String doesn't match.\nExpected: "" + expected_output)
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


",100,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
name = input()
place = input()
number = input()
food = input()

print(name, 'went to', place, 'to buy', number, 'different types of', food)
",completed,100.0,"PASSED!
Unit Test Returned: 100
"
34,37,lsn5_girlscouts,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a program that asks the user for the amount of money he/she has on
hand, and outputs the number of girl scout cookies that he/she can purchase.
Use the following prices:

$5 per box for the ""Super Six"" (Thin Mints, Samoas, Tagalongs, Do-Si-Dos,
Trefoils, Savannah Smiles)  
$6 per box for the Specialty Cookies (S'mores, Toffee-tastic)

**For this problem, assume that the user will buy all of one or the other. In
other words, output the number of boxes that he/she would be able to obtain if
he/she bought nothing but the Super Six, and nothing but the Specialty
Cookies.**

**HINT:**  
You can convert a number to an integer by using the int() function. For
example:  
 **int(2.51)** will convert the number to 2

EXAMPLE:  
If the input is:

    
    
    26

Then the output is:

    
    
    5 boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles  
    4 boxes of S'mores and Toffee-tastic


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    dollar_amount = round(random.uniform(10.00, 100.00), 2)
    super_six_amount = (dollar_amount // 5)
    specialty_amount = (dollar_amount // 6)
    score = 0
    
    line_1 = str(int(super_six_amount)) + "" boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles""
    line_2 = str(int(specialty_amount)) + "" boxes of S'mores and Toffee-tastic""
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn5_girlscouts.py"", [dollar_amount])
    output_lines = output.split('\n')
    
    if line_1 == output_lines[0]:
        print(""First Line is Correct"")
        score += 50
    else:
        print(""First Line is Incorrect.  Expected:"", line_1)
    
    if line_2 == output_lines[1]:
        print(""Second Line is Correct"")
        score += 50
    else:
        print(""Second Line is Incorrect.  Expected:"", line_2)
    
    return score
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,failed: list index out of range,0.0,
35,38,lsn5_arrivaltime,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write an algorithm that prompts the user for a distance to travel (in miles)
and a speed (in mph) and outputs time of arrival in hours.

  
**For Example:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 72  
60 | 1282  
85 | 120.5  
59.2  
Output | 1.2 | 15.0823 | 2.0355  
  
**Note: Output needs to match the examples.**


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    distance = round(random.random() * 1000, 1)
    speed = round(random.random() * 60, 1)
    time = distance / speed
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn5_arrivaltime.py"", [distance, speed])
    
    if autograder.equals(output, time):
        print(""PASSED!"")
        return 100
    else:
        print(""Value doesn't match.\nExpected: "" + str(time))
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def calculate_time_of_arrival(distance, speed):
    time = distance / speed
    return round(time, 4)

distance_input = float(input(""Enter the distance to travel (in miles): ""))
speed_input = float(input(""Enter the speed (in mph): ""))

arrival_time = calculate_time_of_arrival(distance_input, speed_input)
print(""The time of arrival is"", arrival_time, ""hours."")
```
",completed,0.0,"Value doesn't match.
Expected: 325.8571428571429
Unit Test Returned: 0
"
36,39,lsn4_printpractice,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

The template file contains various words/phrases that you need to print out
(exactly as written) using Python's `print()` function. For example:

  1. Print the phrase ""Welcome to Computer Science 110!""

  2. Print the result to the following math expression: (640 * 480 * 24) / 8

  3. etc (see the template for details)

Each print statement should be written directly below the corresponding
comment. While you can technically ""cheat"" on this problem, we encourage you
to practice all the various ways that you can use the `print` function. You
will thank us later!


","from cs110 import autograder

def test_passed():
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_printpractice.py"", [])

    student_output = output.strip().split('\n')
    expected_output = ['Welcome to Computer Science 110!', '921600.0', 'Liam is 8 years old', 'F-15  Eagle', 'F-16  Fighting Falcon', 'B-2   Spirit', 'C-141 Starlifter']
    num_matches = autograder.compare_strings(student_output, expected_output)
    
    return round(num_matches * (100 / len(expected_output)), 1)


# Testbench (to be run in an IDE)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
# 1. Print the phrase ""Welcome to Computer Science 110!""
print(""Welcome to Computer Science 110!"")

# 2. Print the result to the following math expression: (640 * 480 * 24) / 8
print((640 * 480 * 24) / 8)
",completed,28.6,"Unit Test Returned: 28.6
"
37,40,lsn4_parking,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

Write a program that prints a formatted ""No parking"" sign as shown below. Note
the first line has two leading spaces. For ALL labs, end with newline (unless
otherwise stated).

    
    
     NO PARKING  
    1:00 - 5:00 a.m.  
      
    


","from cs110 import autograder

def test_passed():
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_parking.py"", [])
        
    if output.startswith(""  NO PARKING\n""):
        if output == ""  NO PARKING\n1:00 - 5:00 a.m.\n"":
            print(""Passed!"")
            return 100
        else:
            print(""Something is wrong with the second line."")
            return 50
    else:
        print(""Something is wrong with the first line."")
        return 0

# Testbench (to be run in an IDE)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
print(""  NO PARKING\n1:00 - 5:00 a.m.\n"")
",completed,50.0,"Something is wrong with the second line.
Unit Test Returned: 50
"
38,41,lsn4_ascii,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a Python program that prints out a cat:

    
    
    /\ /\
     o o
     = =
     ---  
      
    

_Hint: A backslash  `\` in a string acts as an escape character, such as with
a newline_ `\n`.  _So, to print an actual backslash, escape that backslash by
prepending another backslash. Ex: The following prints a single backslash:_
`print('\\')`


","from cs110 import autograder

def test_passed():
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_ascii.py"", [])
    
    lines = output.split('\n')
    
    # Checks for the Cat
    if lines[0].rstrip() == '/\\   /\\':
        #test_feedback.write('1')
        if lines[1].rstrip() == '  o o':
            #test_feedback.write('2')
            if lines[2].rstrip() == ' =   =':
                #test_feedback.write('3')
                if lines[3].rstrip() == '  ---':
                    #test_feedback.write('4')
                    print('Cat Looks Good!\n')
                    return 100
                else:
                    print('Problem in the fourth line of the cat') 
            else:
                print('Problem in the third line of the cat')  
        else:
            print('Problem in the second line of the cat')  
    else:
        print('Problem in the first line of the cat')
    
    return 0

# Testbench (to be run in an IDE)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
print(""   /\\ /\\"")
print(""    o o"")
print(""    = ="")
print(""    ---"")
",completed,0.0,"Problem in the first line of the cat
Unit Test Returned: 0
"
39,42,lsn33_practice8,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:**

You have been provided with a file called oscar_age_male.csv, which contains
information about male oscar award winners from the 1920s to 2015. Here is a
typical line from the file:

    
    
    1928,44,Emil Jannings,The Last Command

As always, each data element corresponds to a different piece of information.
Here is a table that describes how to interpret each column:

**Year** | **Actor Age** | **Name** | **Film**  
---|---|---|---  
1928 | 44 | Emil Jannings | The Last Command  
  


Write a Python program that reads this file, and gets the following inputs
from the user:

  *     * A start year
    * An end year

Your program should output the age of the youngest actor during that time span
(including the start and end years), as well as the names of all actors that
are within 5 years (inclusive) of the youngest age. For simplicity's sake,
don't try to calculate the current age of the actors; just go with what is in
the file.



For example, if the youngest actor is 25, and the names of the actors within 5
years of the youngest age are Bob and Tom, your program should output:  
  
25  
Bob  
Tom




","from cs110 import autograder
import random, math

inputs  = [[1994, 2010], [1955, 1979], [1960, 1969]]
outputs = [['29', 'Nicolas Cage', 'Adrien Brody'],
           ['30', 'Marlon Brando', 'Maximilian Schell', 'Richard Dreyfuss'],
           ['31', 'Charlton Heston', 'Maximilian Schell']]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_index = random.randint(0, len(inputs)-1)
    print(random_index)
    input_list = inputs[random_index]
    expected_output = outputs[random_index]
    
    output, error = autograder.run_script(""lsn33_practice8.py"", input_list)
    
    lines = output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_output)
       
    return round(num_matches * (100.0 / len(expected_output)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,,"Below is the solution to the problem:

```python
import csv

def find_youngest_actors(start_year, end_year):
    youngest_age = float('inf')
    youngest_actors = []
    
    with open('oscar_age_male.csv', 'r') as file:
        reader = csv.reader(file)
        next(reader)  # Skip header row
        
        for row in reader:
            year, actor_age, name, film = row
            year = int(year)
            actor_age = int(actor_age)
            
            if start_year <= year <= end_year:
                if actor_age < youngest_age:
                    youngest_age = actor_age
                    youngest_actors = [name]
                elif actor_age == youngest_age:
                    youngest_actors.append(name)
    
    youngest_actors.insert(0, youngest_age)
    return youngest_actors

# Get user inputs
start_year = int(input(""Enter start year: ""))
end_year = int(input(""Enter end year: ""))

result = find_youngest_actors(start_year, end_year)

# Output result
for actor in result:
    print(actor)
```

NOTE: Make sure to have the `oscar_age_male.csv` file in the same directory as the Python script.",completed,0.0,"2
Unit Test Returned: 0.0
"
40,43,lsn33_practice7,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**SIMPLE PIG LATIN RULES:**

  *  If the word starts with a vowel, add 'way' to the end of the word. 
  *  If the word starts with a consonant, take the first letter, put it on the end of the word and ad 'ay' to the end.

**PROBLEM STATEMENT:**

Write a function called **pig_latin  **take takes in a string of words and
returns the string converted to pig latin.

Example 1 | Example 2  
---|---  
Input | ""Lets test this out"" | ""Rick Astley is my hero""  
Expected Output | ""etsLay esttay histay outway "" | ""ickRay Astleyway isway
ymay erohay""


","import webbrowser

print(""That's it, the video is the joke. Feel free to practice this problem but there's not an actual score."")

webbrowser.open('https://www.youtube.com/watch?v=dQw4w9WgXcQ')


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
def pig_latin(sentence):
    vowels = ['a', 'e', 'i', 'o', 'u']
    words = sentence.split()
    pig_latin_sentence = """"
    
    for word in words:
        if word[0].lower() in vowels:
            pig_latin_word = word + 'way '
        else:
            pig_latin_word = word[1:] + word[0] + 'ay '
        pig_latin_sentence += pig_latin_word
    
    return pig_latin_sentence.rstrip()
```
Example test:
",failed: 'NoneType' object is not callable,0.0,
41,44,lsn33_practice6,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

Write a python program that gets a temperature from the user, a level of
precipitation (rain, snow, none), and a humidity level (high, medium, low).
Using the following rules, print the correct output.

  * If the temperature is above 84.9 degrees, and the humidity is 'high' or 'medium', print 'Walk slowly'.
  * If the precipitation is 'snow' or 'rain', print 'Do not run!'.
  * For all other situations, print 'Move quickly'.



  | **Example 1** | **Example 1**  
---|---|---  
**Input(s)** |

85  
rain  
high

|

75  
snow  
low  
  
**Expected Output** | Walk slowly | Do not run!  
  





","from cs110 import autograder
import random

num_tests_passed = 0
num_tests_run = 0

def run_test(temp, precip, humidity):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""--------------------------------------------------------------"")
    print(""Testing temperature ="", temp, ""precipitation ="", precip, ""humidity ="", humidity)
    print(""--------------------------------------------------------------"")
    
    # SOLUTION
    if temp > 84.9 and (humidity == 'high' or humidity == 'medium'):
        solution = 'Walk slowly'
    elif precip == 'snow' or precip == 'rain':
        solution = 'Do not run!'
    else:
        solution = 'Move quickly'
    
    output, error_message = autograder.run_script(""lsn33_practice6.py"", [temp, precip, humidity])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    # options for random test cases
    humidity_list = ['high', 'medium', 'low']
    precip_list = ['snow', 'rain', 'none']
    
    # pick random sample for each test case
    for i in range(10):
        humidity = random.choice(humidity_list)
        precip = random.choice(precip_list)
        if precip == 'snow':
            temp_list = [12, 14, 20, 32, 41]
        else:
            temp_list = [77, 84.9, 92]
        temp = random.choice(temp_list)
        
        # run test
        run_test(temp, precip, humidity)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
temperature = float(input(""Enter temperature: ""))
precipitation = input(""Enter precipitation: "")
humidity = input(""Enter humidity: "")

if temperature > 84.9 and (humidity == 'high' or humidity == 'medium'):
    print('Walk slowly')
elif precipitation == 'snow' or precipitation == 'rain':
    print('Do not run!')
else:
    print('Move quickly')
",completed,100.0,"--------------------------------------------------------------
Testing temperature = 92 precipitation = rain humidity = high
--------------------------------------------------------------
CORRECT!

--------------------------------------------------------------
Testing temperature = 20 precipitation = snow humidity = low
--------------------------------------------------------------
CORRECT!

--------------------------------------------------------------
Testing temperature = 20 precipitation = snow humidity = medium
--------------------------------------------------------------
CORRECT!

--------------------------------------------------------------
Testing temperature = 12 precipitation = snow humidity = medium
--------------------------------------------------------------
CORRECT!

--------------------------------------------------------------
Testing temperature = 77 precipitation = none humidity = high
--------------------------------------------------------------
CORRECT!

--------------------------------------------------------------
Testing temperature = 41 precipitation = snow humidity = high
--------------------------------------------------------------
CORRECT!

--------------------------------------------------------------
Testing temperature = 12 precipitation = snow humidity = high
--------------------------------------------------------------
CORRECT!

--------------------------------------------------------------
Testing temperature = 14 precipitation = snow humidity = high
--------------------------------------------------------------
CORRECT!

--------------------------------------------------------------
Testing temperature = 92 precipitation = rain humidity = low
--------------------------------------------------------------
CORRECT!

--------------------------------------------------------------
Testing temperature = 41 precipitation = snow humidity = high
--------------------------------------------------------------
CORRECT!

Unit Test Returned: 100.0
"
42,45,lsn33_practice5,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

Boyle's Law states, for an ideal gas, that the pressure (p) multiplied by #
the volume of a container (v) is always constant. So, if we have an initial
pressure and volume (p1 * v1 = k) and we decrease the volume (v2) the pressure
(v2) must increase. The formula for this is

    
    
    p1 * v1 = p2 * v2

Write a python program the gets the first pressure, first volume, and second
volume. Calculate the new pressure and print it to the console.



  | **Example 1**  
---|---  
**Input(s)** |

25  
100  
150  
  
**Expected Output** | 16.667  
  





","from cs110 import autograder
import random

num_tests_passed = 0
num_tests_run = 0

def run_test(p1, v1, v2):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""--------------------------------------------------------------"")
    print(""Testing pressure 1 ="", p1, ""volume 1 ="", v1, ""volume 2 ="", v2)
    print(""--------------------------------------------------------------"")
    
    # SOLUTION
    solution = p1 * v1 / v2 
    
    output, error_message = autograder.run_script(""lsn33_practice5.py"", [p1, v1, v2])
    
    if float(output.strip()) == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    for i in range(5):
        run_test(round(random.uniform(0, 100),2), round(random.uniform(0, 100),2), round(random.uniform(0, 100),2))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
p1 = float(input())
v1 = float(input())
v2 = float(input())

p2 = (p1 * v1) / v2

print(p2)
",completed,100.0,"--------------------------------------------------------------
Testing pressure 1 = 76.81 volume 1 = 62.98 volume 2 = 12.84
--------------------------------------------------------------
CORRECT!

--------------------------------------------------------------
Testing pressure 1 = 50.56 volume 1 = 8.43 volume 2 = 95.08
--------------------------------------------------------------
CORRECT!

--------------------------------------------------------------
Testing pressure 1 = 34.54 volume 1 = 52.5 volume 2 = 38.52
--------------------------------------------------------------
CORRECT!

--------------------------------------------------------------
Testing pressure 1 = 63.77 volume 1 = 31.05 volume 2 = 9.85
--------------------------------------------------------------
CORRECT!

--------------------------------------------------------------
Testing pressure 1 = 39.09 volume 1 = 69.68 volume 2 = 43.44
--------------------------------------------------------------
CORRECT!

Unit Test Returned: 100.0
"
43,46,lsn33_practice4,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You are going to be given values for a dictionary. These will be an historic
landmark as the key and the location of that landmark as the value. You will
continue to receive input until the user types ""DONE"".

After the dictionary is populated, get a landmark key as an input from the
user and print the location where the landmark is. If the landmark isn't in
the dictionary, print ""Landmark not found"".



  | **Example 1**  
---|---  
**Input(s)** |

Pyramids  
Egypt  
Mt Rushmore  
South Dakota  
Empire State Building  
New York City  
DONE  
Mt Rushmore  
  
**Expected Output** | South Dakota  
  





","from cs110 import autograder
import random, math

input_list = [""Statue of Liberty"",
              ""New York City"",
              ""Grand Canyon"",
              ""Airzona"",
              ""Tower of Pisa"",
              ""Italy"",
              ""Pikes Peak"",
              ""Colorado"",
              ""Liberty Bell"",
              ""Pennsylvania"",
              ""Sears Tower"",
              ""Chicago"",
              ""DONE"",
              ""Statue of Liberty""]

expected_output = [""New York City""]
# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(""lsn33_practice4.py"", input_list)
    lines = output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_output)
       
    return round(num_matches * (100.0 / len(expected_output)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,,,completed,0.0,"Unit Test Returned: 0.0
"
44,47,lsn33_practice3,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You are being provided with three sets. Each set contains the brands of cars
that a car dealer is willing to sell.

Write a Python Program that gets the name of a brand from the user. Then have
it print ""Dealer 1"", ""Dealer 2"", and/or ""Dealer 3"" (one per line) depending on
whether or not the dealer sells that type of car.

If all 3 dealers sell the car brand, output ""All Dealers""



**EXAMPLES:**

  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input(s)** | Toyota | Acura | Ford  
**Expected Output** | Dealer 2  
Dealer 3 | All Dealers | Dealer 1  
  





","from cs110 import autograder
import random, statistics

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    # Hard Coded Test Cases . . . the best
    test_cases = [
                    [['Audi'], [""Dealer 3""]],
                    [['Toyota'], [""Dealer 2"", ""Dealer 3""]],
                    [['Acura'], [""All Dealers""]],
                 ]
    
    for test_case in test_cases:
        print(""----------------------"")
        print(""Test Case"", test_cases.index(test_case) + 1)
        print(""----------------------"")
        
        # Runs the Script
        input_list = test_case[0]
        expected_output = test_case[1]
        output, error_message = autograder.run_script(""lsn33_practice3.py"", input_list)
        
        output_list = output.split('\n')
        
        if len(output_list) - 1 != len(expected_output):
            print(""Your program's output does not have the expected number of lines"")
        else:
            lines_correct = 0
            for i in range(len(expected_output)):
                if str(expected_output[i]) == output_list[i]:
                    print(""Line"", i+1, ""is correct"")
                    lines_correct += 1
                else:
                    print(""Line"", i+1, ""is incorrect (Expected:"" + str(expected_output[i]) + "")"")
            
            score += (100 / len(test_cases)) * (lines_correct / len(expected_output))
        
        print()
        
    return round(score, 1)
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,,"
# Define the car sets for each dealer
dealer1 = {""Honda"", ""Toyota"", ""Ford""}
dealer2 = {""Acura"", ""Toyota"", ""BMW""}
dealer3 = {""Ford"", ""Chevrolet"", ""Toyota""}

# Get the brand name from the user
brand = input(""Enter the name of a car brand: "")

# Check if each dealer sells the car brand
if brand in dealer1:
    print(""Dealer 1"")
if brand in dealer2:
    print(""Dealer 2"")
if brand in dealer3:
    print(""Dealer 3"")

# Check if all dealers sell the car brand
if brand in dealer1 and brand in dealer2 and brand in dealer3:
    print(""All Dealers"")
",completed,0.0,"----------------------
Test Case 1
----------------------
Your program's output does not have the expected number of lines

----------------------
Test Case 2
----------------------
Your program's output does not have the expected number of lines

----------------------
Test Case 3
----------------------
Line 1 is incorrect (Expected:All Dealers)

Unit Test Returned: 0.0
"
45,48,lsn33_practice2,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

In Star Trek, starships travel across interstellar space at many times the
speed of light.  Due to the immense speeds involved, velocity in Star Trek is
described using a fictitious unit of measurement known as a ""Warp Factor"".
For reference, Warp Factor 1.0 is equivalent to the speed of light, whereas
Warp Factor 9.0 is more than 700 times faster!

Write a program that asks the user for the number of starships to analyze, as
well as a target distance in light years.  Your program will then get the name
of each starship (e.g., ""USS Enterprise) as well as its maximum cruise speed
(e.g., 9.6), in that order.

Your program will then output the following:

  * The number of days it would take for the fastest starship to travel the target distance
  * The names of all ships that can travel the same distance within 7 days (inclusive) of the fastest time



**HINT:   We have provided you with a function called calculate_travel_time,
which takes a warp factor and distance as parameters, and returns the number
of days it would take to travel that distance.  Call this function to solve
the problem.**



**EXAMPLES:**

  | **Example 1** | **Example 2**  
---|---|---  
**Input(s)** | 2  
1.0  
USS Horizon  
2.0  
USS Daedalus  
2.5 | 2  
250  
USS Voyager  
9.975  
USS Enterprise-E  
9.8  
**Expected Output** | 17.2  
USS Daedalus | 42.7  
USS Voyager  
USS Enterprise-E


","from cs110 import autograder
import random, statistics

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    # Hard Coded Test Cases . . . the best
    test_cases = [
                    [[3, 1.0, ""USS Enterprise-D"", 9.6, ""USS Voyager"", 9.975, ""USS Rubicon"", 4.0],
                        [0.2, ""USS Enterprise-D"", ""USS Voyager"", ""USS Rubicon""]],
                    [[5, 100, ""USS Discovery"", 7.5, ""USS Enterprise-A"", 8, ""USS Constellation"", 9.2, ""USS Farragut"", 9.4, ""USS Stargazer"", 6.0],
                        [20.8, ""USS Constellation"", ""USS Farragut""]],
                 ]
    
    for test_case in test_cases:
        print(""----------------------"")
        print(""Test Case"", test_cases.index(test_case) + 1)
        print(""----------------------"")
        
        # Runs the Script
        input_list = test_case[0]
        expected_output = test_case[1]
        output, error_message = autograder.run_script(""lsn33_practice2.py"", input_list)
        
        output_list = output.split('\n')
        
        if len(output_list) - 1 != len(expected_output):
            print(""Your program's output does not have the expected number of lines"")
        else:
            lines_correct = 0
            for i in range(len(expected_output)):
                if str(expected_output[i]) == output_list[i]:
                    print(""Line"", i+1, ""is correct"")
                    lines_correct += 1
                else:
                    print(""Line"", i+1, ""is incorrect (Expected:"" + str(expected_output[i]) + "")"")
            
            score += (100 / len(test_cases)) * (lines_correct / len(expected_output))
        
        print()
        
    return round(score, 1)
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,,"
def calculate_travel_time(warp_factor, distance):
    speed_of_light = 299792458
    speed = warp_factor * speed_of_light
    seconds = distance * 365 * 24 * 60 * 60
    return seconds / speed / 60 / 60 / 24


def main():
    num_ships = int(input(""Enter the number of starships to analyze: ""))
    target_distance = float(input(""Enter the target distance in light years: ""))

    ships = []
    for i in range(num_ships):
        ship_name = input(""Enter the name of starship {}: "".format(i + 1))
        max_speed = float(input(""Enter the maximum cruise speed of starship {}: "".format(i + 1)))
        ships.append((ship_name, max_speed))

    fastest_time = float('inf')
    fastest_ship = ''
    for ship in ships:
        ship_name, max_speed = ship
        travel_time = calculate_travel_time(max_speed, target_distance)
        if travel_time < fastest_time:
            fastest_time = travel_time
            fastest_ship = ship_name

    print(""The number of days it would take for the fastest starship to travel the target distance: {}"".format(fastest_time))

    print(""The names of all ships that can travel the same distance within 7 days of the fastest time:"")
    for ship in ships:
        ship_name, max_speed = ship
        travel_time = calculate_travel_time(max_speed, target_distance)
        if abs(travel_time - fastest_time) <= 7:
            print(ship_name)


if __name__ == ""__main__"":
    main()
",completed,0.0,"----------------------
Test Case 1
----------------------
Your program's output does not have the expected number of lines

----------------------
Test Case 2
----------------------
Your program's output does not have the expected number of lines

Unit Test Returned: 0
"
46,49,lsn33_practice1,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

Write a Python program that keeps asking the user for positive integers until
the user types -1.

Your program will then output the following:

  * # of even numbers
  * Average of all the even numbers (if no even numbers were input, print 0)
  * # of odd numbers
  * Average of all the odd numbers (if no odd numbers were input, print 0)

You may assume that the user will type AT LEAST one number. You cannot assume,
however, that the user will enter both an odd and even number.



HINT:  
Use the mod function to determine if a number is even or odd  
  
print(5 % 2) will print ""1"" because there is a remainder of 1 when you divide
5 by 2

print(4 % 2) will print ""0"" because there is no remainder when you divide 4 by
2



**EXAMPLES:**

  | **Example 1** | **Example 2**  
---|---|---  
**Input(s)** | 2  
3  
4  
5 | 3  
5  
7  
**Expected Output** | 2  
3  
2  
4 | 0  
0  
3  
5


","from cs110 import autograder
import random, statistics

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    # Hard Coded Test Cases . . . the best
    test_cases = [ [[2, 4, 6, 8, 10, -1], [5, 6, 0, 0]],
                   [[1, 3, 5, 7, 9, -1], [0, 0, 5, 5.0]],
                   [[23, 45, 81, 1, 29, 35, 44, 76, 23, -1], [2, 60.0, 7, 33.857142857142854]]]
    
    for test_case in test_cases:
        # Runs the Script
        input_list = test_case[0]
        expected_output = test_case[1]
        output, error_message = autograder.run_script(""lsn33_practice1.py"", input_list)
        
        output_list = output.split('\n')
        
        if len(output_list) - 1 != len(expected_output):
            print(""Your program's output does not have the expected number of lines"")
        else:
            lines_correct = 0
            for i in range(len(expected_output)):
                if autograder.equals(str(expected_output[i]), output_list[i]):
                    print(""Line"", i+1, ""is correct"")
                    lines_correct += 1
                else:
                    print(""Line"", i+1, ""is incorrect (Expected:"" + str(expected_output[i]) + "")"")
            
            score += (100 / len(test_cases)) * (lines_correct / len(expected_output))
            
        
    return round(score, 1)
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,,"
even_count = 0
even_sum = 0
odd_count = 0
odd_sum = 0

while True:
    num = int(input(""Enter a positive integer (-1 to exit): ""))
    
    if num == -1:
        break
    
    if num % 2 == 0:
        even_count += 1
        even_sum += num
    else:
        odd_count += 1
        odd_sum += num

if even_count == 0:
    even_avg = 0
else:
    even_avg = even_sum / even_count

if odd_count == 0:
    odd_avg = 0
else:
    odd_avg = odd_sum / odd_count

print(even_count)
print(even_avg)
print(odd_count)
print(odd_avg)
```
",completed,0.0,"Your program's output does not have the expected number of lines
Your program's output does not have the expected number of lines
Your program's output does not have the expected number of lines
Unit Test Returned: 0
"
47,50,lsn26_plots,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 




**PROBLEM STATEMENT:  
** In this lab, you are being given the freedom to explore `matplotlib`'s
plotting capabilities.

The template ZIP file contains several interesting datasets that we have
collected from the internet (although you are free to include any other
dataset if you wish). Examine these datasets, and generate at least 2
""interesting"" graphs. Each plot should use a different dataset. Additionally,
each plot must be a different type (line and pie graph, etc)

Use the `subplot` feature to make sure all of the graphs fit on one screen.
Most importantly, make sure you label your axes, give your charts a title, use
color, etc.

  
**HINT**

  * Use numpy's `genfromtxt` function to read the values in the file. If you forget how to use this function, refer to the lecture video.




","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn26_plots.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













",100,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,,"
import matplotlib.pyplot as plt
import numpy as np

# Read data from file
data1 = np.genfromtxt('dataset1.csv', delimiter=',')
data2 = np.genfromtxt('dataset2.csv', delimiter=',')

# Plot first graph
plt.subplot(2, 1, 1)
plt.plot(data1[:, 0], data1[:, 1], color='blue')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Line Graph')

# Plot second graph
plt.subplot(2, 1, 2)
plt.pie(data2[:, 1], labels=data2[:, 0], colors=['red', 'green', 'blue'])
plt.title('Pie Chart')

# Display the plots
plt.tight_layout()
plt.show()
",completed,100.0,"Thank you for your submission. Your instructor will let you know if there is a problem.
Unit Test Returned: 100.0
"
48,51,lsn26_percentile,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** Write a Python program that asks the user for the number of assessment
scores to input, and then gets that many values. Analyze the data using
numpy's statistics functions, and print out the following information (one per
line):

  * the average (i.e., mean)
  * the number of scores in the 90th percentile (i.e., the number of scores that are at least as high as the 90th percentile score)
  * the number of scores no more than one standard deviation from the mean


","from cs110 import autograder
import random, math
import numpy as np

def solution(list_of_scores):
    
    result = []
    num_90th_percentile = 0
    within_std = 0

    scores_array = np.array(list_of_scores)
    percentile_90 = np.percentile(scores_array, 90)
    stdev = np.std(scores_array)
    average = np.average(scores_array)

    for s in list_of_scores:
        if s >= percentile_90:
            num_90th_percentile += 1
        if s <= average + stdev and s >= average - stdev:
            within_std += 1

    result.append(str(average) + '\n')
    result.append(str(num_90th_percentile) + ""\n"")
    result.append(str(within_std) + ""\n"")
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
        
    num_values = random.randint(5, 10)
    values = []
    input_list = [ num_values ]
    
    for i in range(num_values):
        value = random.randint(50, 100)
        values.append(value)
        input_list.append(value)
    
    output, error = autograder.run_script(""lsn26_percentile.py"", input_list)
    lines = output.strip().split('\n')
    expected_output = solution(values)
    
    num_matches = autograder.compare_strings(lines, expected_output)
       
    return round(num_matches * (100.0 / len(expected_output)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)











",100,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,,"
import numpy as np

# ask user for the number of scores
num_scores = int(input(""Enter the number of assessment scores: ""))

# get the scores from the user
scores = []
for i in range(num_scores):
    score = float(input(""Enter a score: ""))
    scores.append(score)

# calculate mean using numpy's mean function
mean = np.mean(scores)

# calculate 90th percentile using numpy's percentile function
percentile_90 = np.percentile(scores, 90)

# find the number of scores that are at least as high as the 90th percentile score
num_90_percentile = len([score for score in scores if score >= percentile_90])

# calculate standard deviation using numpy's std function
std_deviation = np.std(scores)

# find the number of scores no more than one standard deviation from the mean
num_within_std_dev = len([score for score in scores if score >= mean-std_deviation and score <= mean+std_deviation])

# print the results
print(""Average: "", mean)
print(""Number of scores in the 90th percentile: "", num_90_percentile)
print(""Number of scores within one standard deviation from the mean: "", num_within_std_dev)
```
",completed,0.0,"Unit Test Returned: 0.0
"
49,52,lsn26_calculus,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

Using the numpy module, write a Python program that does the following and
prints (one answer per line):

  1. Create (and print) the following polynomial as a poly1d: `18x^4 + 12x^2 + 3x + 1`

  2. Print the value of the polynomial when `x = 2`

  3. Print the roots of the polynomial

  4. Print the derivative of the polynomial

  5. Print the instantaneous slope of the polynomial at `x = -1` (HINT: Evaluate the derivative at x = -1)

  6. Print the integral of the polynomial

  7. Calculate area under the curve between `x = 5` and `x = 10` (HINT: Evaluate the integral at x=10, and subtract the integral at x=5)




","from cs110 import autograder
import random, math

expected_output = [
""    4      2"",
""18 x + 12 x + 3 x + 1"",
""343"",
""[ 0.14325174+0.80294311j  0.14325174-0.80294311j -0.14325174+0.25098038j"",
"" -0.14325174-0.25098038j]"",
""    3"",
""72 x + 24 x + 3"",
""-93"",
""     5     3       2"",
""3.6 x + 4 x + 1.5 x + 1 x"",
""352367.5"",
]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(""lsn26_calculus.py"", [])
    lines = output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_output)
       
    return round(num_matches * (100.0 / len(expected_output)), 1)

        
# Testbench (to run on outside of zyBooks)
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)











",100,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import numpy as np

# Create and print the polynomial
poly = np.poly1d([18, 0, 12, 3, 1])
print(poly)

# Evaluate the polynomial at x = 2
print(poly(2))

# Calculate and print the roots of the polynomial
roots = np.roots(poly)
print(roots)

# Calculate and print the derivative of the polynomial
derivative = np.polyder(poly)
print(derivative)

# Evaluate the derivative at x = -1
slope = np.polyval(derivative, -1)
print(slope)

# Calculate and print the integral of the polynomial
integral = np.polyint(poly)
print(integral)

# Calculate the area under the curve between x = 5 and x = 10
area = np.polyval(integral, 10) - np.polyval(integral, 5)
print(area)
```
",completed,0.0,"Unit Test Returned: 0.0
"
50,54,lsn25_skill2,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You are being provided with a function called mini_sort that takes two
numbers as parameters. Modify this function so that it returns a tuple
containing the numbers in ascending order.



**EXAMPLES:**

mini_sort(1, 2) should return the tuple:  (1, 2)

mini_sort(50, 40) should return the tuple:  (40, 50)




","from cs110 import autograder
import random, math
import lsn25_skill2

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    a = random.randint(0, 5)
    b = random.randint(6, 10)
    c = random.randint(100, 200)
    d = random.randint(0, 99)
    
    score = 0
    
    print(""Test #1.  Calling mini_sort(%d, %d)"" % (a, b))
    output = lsn25_skill2.mini_sort(a, b)
    print(""  Your Function Returned:"", output)
    if output == (a, b):
        print(""  CORRECT\n"")
        score += 50
    else:
        print(""  INCORRECT.  Expected"", (a, b), ""\n"")
        
    print(""Test #2.  Calling mini_sort(%d, %d)"" % (c, d))
    output = lsn25_skill2.mini_sort(c, d)
    print(""  Your Function Returned:"", output)
    if output == (d, c):
        print(""  CORRECT\n"")
        score += 50
    else:
        print(""  INCORRECT.  Expected"", (d, c), ""\n"")
    
    return score

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,,,failed: module 'lsn25_skill2' has no attribute 'mini_sort',0.0,
51,55,lsn25_skill1,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a dictionary that contains the designator for
an aircraft (e.g., F-16) and its nickname (e.g., Fighting Falcon). Write a
program that gets a new aircraft designator and nickname from the user, and
adds it to the dictionary


","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    aircraft_dictionary = {""F-16"":""Fighting Falcon"", ""F-22"":""Raptor"", ""B-2"":""Spirit"", ""F-15"":""Eagle""}
    
    aircraft = [(""C-141"", ""Starlifter""), (""C-5"", ""Galaxy""), (""MQ-9"", ""Reaper"")]
    random_aircraft = aircraft[random.randint(0, len(aircraft)-1)]
    aircraft_dictionary[random_aircraft[0]] = random_aircraft[1]
    
    output, error = autograder.run_script(""lsn25_skill1.py"", random_aircraft)
    
    if output.strip() == str(aircraft_dictionary):
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT. Expected:"")
        print(aircraft_dictionary)
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,,"
aircraft_dict = {
    'F-16': 'Fighting Falcon',
    'F-22': 'Raptor',
    'F-35': 'Lightning II',
    'F/A-18': 'Hornet',
    'B-2': 'Spirit',
}

designator = input(""Enter aircraft designator: "")
nickname = input(""Enter aircraft nickname: "")

aircraft_dict[designator] = nickname

print(""New aircraft added to dictionary:"")
print(aircraft_dict)
",completed,0.0,"INCORRECT. Expected:
{'F-16': 'Fighting Falcon', 'F-22': 'Raptor', 'B-2': 'Spirit', 'F-15': 'Eagle', 'C-141': 'Starlifter'}
Unit Test Returned: 0.0
"
52,56,lsn25_rectangle,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 




**PROBLEM STATEMENT:  
**

Write a function called `get_rectangle_info` that takes 2 values as
parameters:

  * A tuple containing the (x, y) coordinate of one corner of a box
  * A tuple containing the (x, y) coordinate of the opposite corner of a box



Your function should return a  **tuple**  containing the following information
(in order):

  * the area of the box
  * the perimeter of the box
  * the length of the largest side
  * the length of the shortest side


","from cs110 import autograder
import random, math
import lsn25_rectangle

# Solution
def solution(corner1, corner2):
    width = abs(corner1[0] - corner2[0])
    height = abs(corner1[1] - corner2[1])
    largest_side = max(width, height)
    shortest_side = min(width, height)
    area = width * height
    perimeter = width * 2 + height * 2
    
    return (area, perimeter, largest_side, shortest_side)


# Runs the test
def run_test(corner1, corner2):
    global tests_passed
    
    result = lsn25_rectangle.get_rectangle_info(corner1, corner2)
    expected_value = solution(corner1, corner2)
    
    if result is None:
        print(""Failed with inputs"", corner1, corner2, ""-- Your function did not return anything"")
    elif type(result) is not tuple:
        print(""Failed with inputs"", corner1, corner2, ""-- Your function did not return a tuple"")
    elif len(result) != 4:
        print(""Failed with inputs"", corner1, corner2, ""-- Your function did not return a tuple with 4 items in it"")
    elif result == expected_value:
        print(""Passed with inputs"", corner1, corner2, ""-- Your function correctly returned"", result)
        return True
    else:
        print(""Failed with inputs"", corner1, corner2, ""-- Your function returned"", result, ""instead of"", expected_value)

    return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 5
    tests_passed = 0
    
    for i in range(NUM_TESTS):
        # Generate 4 Random Numbers
        x1 = random.randint(-100, 100)
        y1 = random.randint(-100, 100)
        x2 = random.randint(-100, 100)
        y2 = random.randint(-100, 100)
        
        # Makes sure that I didn't accidentally generate a line
        while (x1 == x2):
            x1 = random.randint(-100, 100)            
        while (y1 == y2):
            y1 = random.randint(-100, 100)
    
        if run_test((x1, y1), (x2, y2)):
            tests_passed += 1
    
    return 100/NUM_TESTS * tests_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



",100,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,,"
def get_rectangle_info(corner1, corner2):
    x1, y1 = corner1
    x2, y2 = corner2
    
    length = abs(x2 - x1)
    width = abs(y2 - y1)
    
    area = length * width
    perimeter = 2 * (length + width)
    
    if length > width:
        longest_side = length
        shortest_side = width
    else:
        longest_side = width
        shortest_side = length
    
    return (area, perimeter, longest_side, shortest_side)
",completed,100.0,"Passed with inputs (-42, -59) (64, 71) -- Your function correctly returned (13780, 472, 130, 106)
Passed with inputs (-6, 70) (-40, 55) -- Your function correctly returned (510, 98, 34, 15)
Passed with inputs (20, -74) (33, 86) -- Your function correctly returned (2080, 346, 160, 13)
Passed with inputs (96, 58) (11, 48) -- Your function correctly returned (850, 190, 85, 10)
Passed with inputs (75, -25) (-80, 77) -- Your function correctly returned (15810, 514, 155, 102)
Unit Test Returned: 100.0
"
53,57,lsn25_midpoint,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** Write a function called get_midpoint that takes four values as parameters:

  * X coordinate of the first point
  * Y coordinate of the first point
  * X coordinate of the second point
  * Y coordinate of the second point

Your function should return a tuple containing the midpoint.




","from cs110 import autograder
import random, math
import lsn25_midpoint

# Runs the test
def run_test(x1, y1, x2, y2):
    global tests_passed
    
    result = lsn25_midpoint.get_midpoint(x1, y1, x2, y2)
    expected_value = ((x1+x2)/2, (y1+y2)/2)
    
    if result is None:
        print(""Failed with values %d, %d, %d, and %d.  Your function did not return anything."" % (x1, y1, x2, y2))
    elif type(result) is not tuple:
        print(""Failed with values %d, %d, %d, and %d.  Your function did not return a tuple."" % (x1, y1, x2, y2))
    elif len(result) != 2:
        print(""Failed with values %d, %d, %d, and %d.  Your function did not return a tuple of length 2."" % (x1, y1, x2, y2))
    elif result == expected_value:
        print(""Passed Test Using values %d, %d, %d, and %d. Received (%d, %d)"" % (x1, y1, x2, y2, result[0], result[1]))
        return True
    else:
        print(""Failed Test Using values %d, %d, %d, and %d. Received (%d, %d), but Expected (%d, %d)"" % (x1, y1, x2, y2, result[0], result[1], expected_value[0], expected_value[1]))

    return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 5
    tests_passed = 0
    
    for i in range(NUM_TESTS):
        # Generate 4 Random Numbers
        x1 = random.randint(-100, 100)
        y1 = random.randint(-100, 100)
        x2 = random.randint(-100, 100)
        y2 = random.randint(-100, 100)
        
        if run_test(x1, y1, x2, y2):
            tests_passed += 1
    
    return (100 / NUM_TESTS) * tests_passed
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,,"
def get_midpoint(x1, y1, x2, y2):
    midpoint_x = (x1 + x2) / 2
    midpoint_y = (y1 + y2) / 2
    return (midpoint_x, midpoint_y)
",completed,100.0,"Passed Test Using values -100, 38, 52, and -45. Received (-24, -3)
Passed Test Using values 54, 84, -41, and -39. Received (6, 22)
Passed Test Using values 19, 19, -18, and 21. Received (0, 20)
Passed Test Using values -75, 22, -25, and -51. Received (-50, -14)
Passed Test Using values -84, -45, -22, and -96. Received (-53, -70)
Unit Test Returned: 100.0
"
54,60,lsn25_contactlist,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 




**PROBLEM STATEMENT:  
**

Write a Python program that stores names and phone numbers for your
classmates. Your program will keep asking the user to input names and phone
numbers until he/she types ""DONE"". Your program will then store the
names/numbers in a dictionary, and allow the user to repeatedly type in names
until he/she types ""DONE"".

  * If name is in the contact list, your program will output the corresponding phone number.
  * If the name is  **not**  in the contact list, your program will output ""NOT FOUND""



**EXAMPLES:**

  | Example  
---|---  
Inputs | Adrian  
555-5555  
Liam  
666-6666  
Michelle  
777-7777  
DONE  
Adrian  
Jim  
DONE  
Outputs | 555-5555  
NOT FOUND


","from cs110 import autograder
import random, math

input_list = [""Kirk"",
""555-5555"",
""Spock"",
""666-6666"",
""McCoy"",
""777-7777"",
""DONE"",
""Kirk"",
""Spock"",
""Mccoy"",
""DONE""]

expected_output = [
""555-5555"",
""666-6666"",
""NOT FOUND"",
]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(""lsn25_contactlist.py"", input_list)
    lines = output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_output)
       
    return round(num_matches * (100.0 / len(expected_output)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,,"
contacts = {}

while True:
    name = input(""Enter a name (or 'DONE' to finish): "")

    if name == 'DONE':
        break

    if name in contacts:
        print(contacts[name])
    else:
        print(""NOT FOUND"")

    number = input(""Enter a phone number: "")
    contacts[name] = number
",completed,33.3,"Unit Test Returned: 33.3
"
55,61,lsn24_nasa,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write a Python program that repeatedly asks the user for names of famous NASA
space missions (e.g., Apollo 11) as well as the year in which the mission took
place, until the user types the word ""DONE"" for the mission.

Your program should output:

  1. Year of the **latest mission** (most recent) 
  2. Names of all missions that occurred within 3 years prior to the most recent mission (inclusive)

**EXAMPLES:**



| Example 1 | Example 2  
---|---|---  
Input | Gemini 3  
1965  
Gemini 4  
1965  
Gemini 12  
1966  
DONE |

Mercury 5  
1961  
Apollo 11  
1969  
DONE  
  
Output | 1966  
Gemini 3  
Gemini 4  
Gemini 12 | 1969  
Apollo 11


","from cs110 import autograder
import random, math

mission_info = [
    ['Apollo 1', 1967],
    ['Apollo 7', 1968],
    ['Apollo 8', 1968],
    ['Apollo 9', 1969],
    ['Apollo 10', 1969],
    ['Apollo 11', 1969],
    ['Apollo 12', 1969],
    ['Apollo 13', 1970],
    ['Apollo 14', 1971],
    ['Apollo 15', 1971],
    ['Apollo 16', 1972],
    ['Apollo 17', 1972],
    ]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    inputs = []
    expected_outputs = []
    
    mission_table = []
    
    for mission in random.sample(mission_info, 5):
        inputs.append(mission[0])
        inputs.append(mission[1])
        mission_table.append([int(mission[1]), mission[0]])
    inputs.append(""DONE"")
    
    max_row = max(mission_table)
    expected_outputs.append(str(max_row[0]))
    
    for m in mission_table:
        if (int(m[0]) >= int(max_row[0]) - 3):
            expected_outputs.append(m[1])
    
    output, errors = autograder.run_script(""lsn24_nasa.py"", inputs)
    lines = output.strip().split('\n')
    
    lines_match = autograder.compare_strings(lines, expected_outputs)
    
    if lines_match == len(expected_outputs):
        return 100.0
    else:
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,1,1,1,0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,,"
latest_year = 0
missions = []

while True:
    mission = input(""Enter the mission name: "")
    if mission == ""DONE"":
        break
    year = int(input(""Enter the year of the mission: ""))
    
    if year > latest_year:
        latest_year = year
        missions = [mission]
    elif year == latest_year or year >= latest_year - 3:
        missions.append(mission)

print(latest_year)
for mission in missions:
    print(mission)
",completed,0.0,"Unit Test Returned: 0.0
"
56,62,lsn24_mitches,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write a Python Program that analyzes the food at Mitchell Hall. Your program
will ask for the number of meals to analyze and then get both:

  1. The name of the meal
  2. The number of calories per serving

Your program should output the average calorie count of all meals, as well as
the names of meals that are with 200 calories of the average (inclusive).



| **Example 1** | **Example 2**  
---|---|---  
Input |

3  
Shepherd's Pie  
300  
Foot Long Hot Dog  
350  
Hamburger  
960  
  

| 4  
Pizza  
600  
Cheeseburger  
450  
Pancakes  
1100  
Burrito  
900  
Expected Output | 536.6666666666666  
Foot Long Hot Dog | 762.5  
Pizza  
Burrito  
  



","from cs110 import autograder
import random, math

meal_info = [
    ['Hot Dogs', 600],
    ['French Dip', 540],
    ['Chicken Cordon Bleu', 300],
    ['Turkey Sandwich', 350],
    ['Mitch\'s Mountain', 1100],
    ['Shepherd\'s Pie', 272],
    ['Teriyaki Chicken', 250],
    ]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    inputs = []
    expected_outputs = []
    
    meal_table = []
    table_size = random.randint(3, 5)
    total = 0
    inputs.append(table_size)
    
    for meal in random.sample(meal_info, table_size):
        total += meal[1]
        inputs.append(meal[0])
        inputs.append(meal[1])
        meal_table.append([meal[0], meal[1]])
    
    average = total / len(meal_table)
    expected_outputs.append(str(average))
    
    for m in meal_table:
        if m[1] >= average-200 and m[1] <= average+200:
            expected_outputs.append(m[0])
    
    output, errors = autograder.run_script(""lsn24_mitches.py"", inputs)
    lines = output.strip().split('\n')
    
    lines_match = autograder.compare_strings(lines, expected_outputs)
    
    if lines_match == len(expected_outputs):
        return 100.0
    else:
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,,,completed,0.0,"Unit Test Returned: 0.0
"
57,63,lsn24_education,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Now that you are a Freshman at USAFA, it might be interesting to learn about
how many years men and women spend in school in different countries. In the
problem, we have provided you with a dataset called `education.csv` that
contains information from various countries about years spent in education.
Here is a typical line from the file:



`Zimbabwe,2010,M,15,64,8.04,5.92,2.09,0.03,3926`



Each position in the line represents a different ""data element"". Here is a key
for your reference:

Country | Year | Gender | Start Age | End Age | Total Years in School |
Primary School | Secondary School | Tertiary School | Population (thousands)  
---|---|---|---|---|---|---|---|---|---  
Zimbabwe | 2010 | M | 15 | 64 | 8.04 | 5.92 | 2.09 | 0.03 | 3926  
  


  
Write a Python program that asks the user for the name of country (e.g.,
""Zimbabwe""), followed by a Gender (""M"" or ""F""). Your program should print the
average number of years that gender spends in school followed by the years
that are greater than or equal to the average.

  
For example, if ""Zimbabwe"" and ""M"" were entered as the country and gender of
interest, respectively, then your program should print out:

**`2.5117241379310347`  
`1960`  
`1965`  
`1970`  
`1975`  
`1980`  
`1985`  
`1990`  
`1995`  
`2000`  
`2005`  
`2010`**


","from cs110 import autograder
import random, math

test_inputs = [['Canada', 'M'], ['Egypt', 'F']]
expected_outputs = [['7.140344827586206', '1945', '1950', '1955', '1960', '1965', '1970', '1975', '1980', '1985', '1990', '1995', '2000', '2005', '2010'],
                    ['1.1858620689655173', '1980', '1985', '1990', '1995', '2000', '2005', '2010']]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    test_case_to_run = random.randint(0, len(test_inputs)-1)
    inputs = test_inputs[test_case_to_run]
    outputs = expected_outputs[test_case_to_run]
    
    output, errors = autograder.run_script(""lsn24_education.py"", inputs)
    lines = output.strip().split('\n')
    
    lines_match = autograder.compare_strings(lines, outputs)
    
    if lines_match == len(outputs):
        return 100.0
    else:
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,,"
import csv

def calculate_average_education(country, gender, dataset):
    total_years = 0
    num_entries = 0

    for row in dataset:
        if row[0] == country and row[2] == gender:
            total_years += float(row[5])
            num_entries += 1

    if num_entries == 0:
        return 0

    average_years = total_years / num_entries

    return average_years


def print_years_greater_or_equal(country, gender, dataset):
    for row in dataset:
        if row[0] == country and row[2] == gender:
            if float(row[5]) >= average_years:
                print(row[1])


filename = 'education.csv'
dataset = []

with open(filename, 'r') as file:
    csvreader = csv.reader(file)
    next(csvreader)  # Skip header row
    dataset = list(csvreader)

country = input(""Enter the name of the country: "")
gender = input(""Enter the gender (M or F): "")

average_years = calculate_average_education(country, gender, dataset)

if average_years != 0:
    print(average_years)
    print_years_greater_or_equal(country, gender, dataset)
else:
    print(""No data available for the specified country and gender."")
```
",completed,0.0,"Unit Test Returned: 0.0
"
58,64,lsn24_airspeed,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You are writing a program to determine which aircraft  can fly in formation
based on their (min) safe cruise speed. Write a python program  
that asks the user for:

  1. The number of aircraft to analyze
  2. The target cruise velocity, in mph



Your program will then repeatedly ask the user for the designator for each
aircraft and its cruise velocity. Once all of the values have been input, your
program will output:

  1. The NUMBER of aircraft whose cruise velocity is within 50mph of the target (above or below, inclusive)
  2. The designator of each aircraft that meets the above criteria



| **Example 1** | **Example 2**  
---|---|---  
Input |

3  
400  
F-15  
450  
F-16  
425  
F-22  
500

| 4  
230  
C-130  
250  
F-35  
450  
B-52  
390  
C-141  
375  
Expected Output | 2  
F-15  
F-16 | 1  
C-130  
  



","from cs110 import autograder
import random, math

test_cases = [[3, 400, 'F-15', 450, 'F-16', 425, 'F-22', 600],
              [4, 230, 'C-130', 250, 'F-35', 450, 'B-52', 390, 'C-141', 375]]
answers    = [['2', 'F-15', 'F-16'],
              ['1', 'C-130']]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    test_to_run = random.randint(0, len(test_cases)-1)
    inputs = test_cases[test_to_run]
    expected_output = answers[test_to_run]    
    
    output, errors = autograder.run_script(""lsn24_airspeed.py"", inputs)
    lines = output.strip().split('\n')
    
    lines_match = autograder.compare_strings(lines, expected_output)
    
    if lines_match == len(expected_output):
        return 100.0
    else:
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,"
def determine_aircraft():
    num_aircraft = int(input(""Enter the number of aircraft to analyze: ""))
    target_velocity = int(input(""Enter the target cruise velocity in mph: ""))

    aircraft_count = 0
    aircraft_list = []

    for _ in range(num_aircraft):
        designator = input(""Enter the designator for the aircraft: "")
        cruise_velocity = int(input(""Enter the cruise velocity in mph: ""))

        if abs(cruise_velocity - target_velocity) <= 50:
            aircraft_count += 1
            aircraft_list.append(designator)

    print(""Number of aircraft within range:"", aircraft_count)
    print(""Designator of each aircraft within range:"")
    for aircraft in aircraft_list:
        print(aircraft)


determine_aircraft()
",completed,0.0,"Unit Test Returned: 0.0
"
59,65,lsn23_soundboard,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Using PythonGraph, create a ""soundboard"" application. Your program should
display a list of colored buttons (i.e., rectangles). When the user clicks
inside of a rectangle, the program plays a different sound.

The provided template file comes with a single button implemented. Your job is
to study this code and create at least 5 other buttons. Note: The buttons do
not have to be laid out in the same arrangement, but they should look
organized.

When you are finished, upload your python code. Do NOT upload any of the sound
files.


","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn23_soundboard.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













",100,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import pygame
import pygame.freetype
from pygame.locals import *
from sys import exit
from random import *

# Initialize pygame
pygame.init()

# Set up the window
screen_width, screen_height = 640, 480
screen = pygame.display.set_mode((screen_width, screen_height), 0, 32)
pygame.display.set_caption(""Soundboard"")

# Set up the colors
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
ORANGE = (255, 165, 0)

# Create a dictionary of sound files
sounds = {
    RED: pygame.mixer.Sound(""red_sound.wav""),
    GREEN: pygame.mixer.Sound(""green_sound.wav""),
    BLUE: pygame.mixer.Sound(""blue_sound.wav""),
    YELLOW: pygame.mixer.Sound(""yellow_sound.wav""),
    ORANGE: pygame.mixer.Sound(""orange_sound.wav"")
}

# Function to play a sound based on the color passed in
def play_sound(color):
    if color in sounds:
        sounds[color].play()

# Function to draw a button
def draw_button(x, y, width, height, color):
    pygame.draw.rect(screen, color, (x, y, width, height))

# Create the initial button
button_x = 240
button_y = 200
button_width = 160
button_height = 80
button_color = RED

# Main game loop
while True:
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            exit()

        if event.type == MOUSEBUTTONUP:
            mouse_x, mouse_y = pygame.mouse.get_pos()
            if button_x <= mouse_x <= button_x + button_width and button_y <= mouse_y <= button_y + button_height:
                play_sound(button_color)

    screen.fill(WHITE)

    # Draw the buttons
    draw_button(button_x, button_y, button_width, button_height, button_color)

    # Update the display
    pygame.display.update()
```
",completed,0.0,"There appears to be a syntax error in your code.
Unit Test Returned: 0.0
"
60,66,lsn23_skill1,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM NAME:  
** lsn23_skill1



**PROBLEM STATEMENT:  
** You have been provided with the template code for an animation.  Study the
code for a minute, then modify the code to do the following WHEN THE LEFT
MOUSE BUTTON IS HELD DOWN:

  1. Write the code needed to get the mouse's x and y coordinates
  2. Draw a circle centered at the mouse's x and y coordinates


","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0.0
    
    if autograder.code_compiles(""lsn23_skill1.py""):
        file = open(""lsn23_skill1.py"", ""r"")
        file_contents = file.read()
        
        if ""get_mouse_x("" in file_contents:
            print(""get_mouse_x called"")
            score += 33
        else:
            print(""get_mouse_x does not appear to be called."")
            
        if ""get_mouse_y("" in file_contents:
            print(""get_mouse_y called"")
            score += 33
        else:
            print(""get_mouse_y does not appear to be called."")
            
        if ""draw_circle("" in file_contents:
            print(""draw_circle called"")
            score += 34
        else:
            print(""draw_circle does not appear to be called."")
            
    else:
        print(""There appears to be an error in your python Script that is preventing it from running"")
    
    print(""\nThank you for your submission.  Your instructor will let you know if there is an issue."")
    return score        
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import pygame

# Initialize Pygame
pygame.init()

# Set up the window
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption(""Circle Animation"")

# Set up the clock
clock = pygame.time.Clock()

# Set up the colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)

# Set up variables for the circle
circle_radius = 50
circle_color = WHITE

# Main game loop
running = True
while running:
    # Clear the screen
    screen.fill(BLACK)
    
    # Check for events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            mouse_pos = pygame.mouse.get_pos()
            pygame.draw.circle(screen, circle_color, mouse_pos, circle_radius)
    
    # Update the display
    pygame.display.flip()
    
    # Set the FPS
    clock.tick(60)

# Quit the program
pygame.quit()
",completed,0.0,"get_mouse_x does not appear to be called.
get_mouse_y does not appear to be called.
draw_circle does not appear to be called.

Thank you for your submission.  Your instructor will let you know if there is an issue.
Unit Test Returned: 0.0
"
61,67,lsn23_paint,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

Using PythonGraph, create a simple paint application. Your program should draw
circles on the window whenever the user presses the left mouse button. Your
program should also listen for keyboard inputs, and allow the user to change
colors and the size of the circle by pressing on different keys.

A simple paint program has been provided to you as a starting point. Study the
code and make the necessary modifications.

When you are finished, upload your python code.


","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn23_paint.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













",100,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import pygame
from pygame.locals import *

SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600

BACKGROUND_COLOR = (255, 255, 255)
CIRCLE_COLOR = (0, 0, 0)

pygame.init()

screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption('Simple Paint')

clock = pygame.time.Clock()

circle_radius = 10
circle_color = CIRCLE_COLOR

drawing = False

while True:
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()

        elif event.type == KEYDOWN:
            if event.key == K_r:
                circle_color = (255, 0, 0)
            elif event.key == K_g:
                circle_color = (0, 255, 0)
            elif event.key == K_b:
                circle_color = (0, 0, 255)
            elif event.key == K_1:
                circle_radius = 10
            elif event.key == K_2:
                circle_radius = 20
            elif event.key == K_3:
                circle_radius = 30

        elif event.type == MOUSEBUTTONDOWN:
            if event.button == 1:
                drawing = True

        elif event.type == MOUSEBUTTONUP:
            if event.button == 1:
                drawing = False

        elif event.type == MOUSEMOTION:
            if drawing:
                pos = pygame.mouse.get_pos()
                pygame.draw.circle(screen, circle_color, pos, circle_radius)

    screen.fill(BACKGROUND_COLOR)

    pygame.display.flip()

    clock.tick(60)
",completed,100.0,"Thank you for your submission. Your instructor will let you know if there is a problem.
Unit Test Returned: 100.0
"
62,68,lsn22_skill1,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM NAME:  
** lsn22_skill1



**PROBLEM STATEMENT:  
** You have been provided with the template code for an animation.  Study the
code for a minute, then perform the following tasks:

  * In the draw() function, add one line of code that draws a circle.  
For the center, use the ball_x and ball_y variables defined on lines 21 and 22  
  

  * In the update() function, add code that modifies the value of ball_x and ball_y.  
For example, add 1 to ball_x every time update() is called, and see what
happens.


","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0.0
    
    if autograder.code_compiles(""lsn22_skill1.py""):
        file = open(""lsn22_skill1.py"", ""r"")
        file_contents = file.read()
        
        if ""draw_circle("" in file_contents:
            print(""draw_circle called"")
            score += 50
        else:
            print(""draw_circle does not appear to be called.  You need to call it in the draw() function"")
            
        if file_contents.count(""ball_x"") + file_contents.count(""ball_y"") > 5:
            print(""Looks like you are using ball_x and/or ball_y"")
            score += 50
        else:
            print(""Make sure you are changing the value of ball_x and ball_y in update()."")
            
    else:
        print(""There appears to be an error in your python Script that is preventing it from running"")
    
    print(""\nThank you for your submission.  Your instructor will let you know if there is an issue."")
    return score        
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"draw_circle does not appear to be called.  You need to call it in the draw() function
Make sure you are changing the value of ball_x and ball_y in update().

Thank you for your submission.  Your instructor will let you know if there is an issue.
Unit Test Returned: 0.0
"
63,69,lsn22_bouncingtriangle,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Using the Bouncing Ball from the previous lab as a starting point, generate
an animation of a bouncing triangle. The triangle's vertices should start at
random locations, and bounce whenever the triangle hits a wall.





**HINTS** :

  * Try drawing 3 bouncing balls on the screen.
  * Once the balls are moving correctly, draw 3 lines to connect them!


","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn22_bouncingtriangle.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













",100,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,,,completed,100.0,"Thank you for your submission. Your instructor will let you know if there is a problem.
Unit Test Returned: 100.0
"
64,70,lsn22_bouncingballs,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 




**PROBLEM STATEMENT:  
** Write a python algorithm that asks the user for the number of balls to
draw. Then, open a pythonGraph window and draw that many bouncing balls on the
screen.



**Challenge** :

  * Try to randomize every aspect of the bouncing balls (e.g., their radius, color, speed)




","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn22_bouncingballs.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













",100,0,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,,"
import random
from pythongraph import *

def draw_bouncing_balls(num_balls):
    graph = CreateWindow(800, 600)
    balls = []
    
    for _ in range(num_balls):
        radius = random.randint(10, 50)
        x = random.randint(radius, 800 - radius)
        y = random.randint(radius, 600 - radius)
        color = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
        speed_x = random.randint(-5, 5)
        speed_y = random.randint(-5, 5)
        
        ball = Circle(x, y, radius, color)
        balls.append((ball, speed_x, speed_y))
    
    while True:
        for ball, speed_x, speed_y in balls:
            ball.move(speed_x, speed_y)
            if ball.get_left() < 0 or ball.get_right() > 800:
                speed_x *= -1
            if ball.get_top() < 0 or ball.get_bottom() > 600:
                speed_y *= -1
            ball.draw(graph)
        
        graph.update()
```

To run the program and draw 10 bouncing balls, you can call the function `draw_bouncing_balls(10)`. You can change the number of balls as desired.",completed,0.0,"There appears to be a syntax error in your code.
Unit Test Returned: 0.0
"
65,71,lsn22_bouncingball,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** Using the pythonGraph animation template, create an animation of a bouncing
ball. Your ball should start at a random location, and change direction each
time it hits a side, top, or bottom of the window.  
  



**CHALLENGE:**

  1. Try to make the ball change color every time it hits a wall.




","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn22_bouncingball.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













",100,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,,"
import random
from pythongraph import Animation

class BouncingBallAnimation(Animation):
    def __init__(self, width, height):
        super().__init__(width, height)
        self.ball_size = 20
        self.ball_color = (255, 0, 0)
        self.ball_pos = (random.randint(0, self.width - self.ball_size),
                         random.randint(0, self.height - self.ball_size))
        self.dx = random.choice([-1, 1])
        self.dy = random.choice([-1, 1])
    
    def update(self):
        ball_x, ball_y = self.ball_pos
        ball_x += self.dx
        ball_y += self.dy
        
        if ball_x < 0 or ball_x > self.width - self.ball_size:
            self.dx *= -1
            self.ball_color = (random.randint(0, 255),
                               random.randint(0, 255),
                               random.randint(0, 255))
        if ball_y < 0 or ball_y > self.height - self.ball_size:
            self.dy *= -1
            self.ball_color = (random.randint(0, 255),
                               random.randint(0, 255),
                               random.randint(0, 255))
        
        self.ball_pos = (ball_x, ball_y)
        
    def draw(self):
        self.clear()
        self.shape.rectangle(self.ball_pos[0], self.ball_pos[1],
                             self.ball_size, self.ball_size,
                             fill=self.ball_color)
        self.show()

width = 800
height = 600
animation = BouncingBallAnimation(width, height)
animation.start()
",completed,100.0,"Thank you for your submission. Your instructor will let you know if there is a problem.
Unit Test Returned: 100.0
"
66,72,lsn21_triangle,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 




**PROBLEM STATEMENT:  
**

Write an algorithm that asks the user for X and Y coordinates of a single
point (the coordinates of the top left point on the triangle), the length of
the base, and the height of a right triangle. Then, open a graphics window and
draw the triangle. The area of the triangle is should be displayed at the
bottom center of the window in black.



**HINTS:**

  * Make sure you get the user input BEFORE you open the window. Otherwise, the program will freeze.
  * The `draw_text` function will draw text on a screen. Don't worry about getting the text EXACTLY in the center (it's hard!).




","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn21_triangle.py"", doraise=True)
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
        
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import graphics as gr

# Get user input
x = int(input(""Enter the x-coordinate of the top left point: ""))
y = int(input(""Enter the y-coordinate of the top left point: ""))
base = int(input(""Enter the length of the base: ""))
height = int(input(""Enter the height: ""))

# Calculate area of the triangle
area = (base * height) / 2

# Open graphics window
window = gr.GraphWin(""Triangle"", 500, 500)

# Draw triangle
point1 = gr.Point(x, y)
point2 = gr.Point(x + base, y)
point3 = gr.Point(x + base/2, y + height)
triangle = gr.Polygon(point1, point2, point3)
triangle.setFill(""white"")
triangle.draw(window)

# Draw area text
area_text = gr.Text(gr.Point(250, 480), ""Area: {}"".format(area))
area_text.setTextColor(""black"")
area_text.draw(window)

# Wait for mouse click to close the window
window.getMouse()
window.close()
",completed,100.0,"----------------------------------------------------------------------
*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***
----------------------------------------------------------------------

Thank you for your submission. Your instructor will let you know if there is a problem.
Unit Test Returned: 100.0
"
67,73,lsn21_stamp,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** Create a pythonGraph function called `draw_stamp` that accepts an x and y
coordinate as parameters. Add code so that this function will then draw a
picture (of your choosing) centered on that coordinate.



To test your function, create a pythonGraph window, and call your function
several times (each time, passing it a different set of x and y coordinates).


","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn21_stamp.py"", doraise=True)
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
        
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import pythonGraph

def draw_stamp(x, y):
    pythonGraph.moveTo(x, y)
    pythonGraph.penDown()
    pythonGraph.drawCircle(50) # draw the stamp
    pythonGraph.drawRectangle(100, 50) # draw the handle
    pythonGraph.penUp()

window = pythonGraph.createWindow(400, 400)

draw_stamp(100, 100)
draw_stamp(-100, -100)
draw_stamp(200, -200)

window.wait() # to keep the window open
",completed,100.0,"----------------------------------------------------------------------
*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***
----------------------------------------------------------------------

Thank you for your submission. Your instructor will let you know if there is a problem.
Unit Test Returned: 100.0
"
68,74,lsn21_skill1,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM NAME:  
** lsn21_skill1



**PROBLEM STATEMENT:  
** Read the pythonGraph documentation, and write the following 3 lines of
code:

  1. Use the open_window function to create a graphics window
  2. Use the draw_circle function to draw a circle (any size and/or color).
  3. Call the wait_for_close function to keep the graphics window open until you click the X in the top right corner.


","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0.0
    
    if autograder.code_compiles(""lsn21_skill1.py""):
        file = open(""lsn21_skill1.py"", ""r"")
        file_contents = file.read()
    
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
    
        if ""open_window("" in file_contents:
            print(""open_window Called"")
            score += 33
        else:
            print(""open_window does not appear to be called"")
        
        if ""draw_circle("" in file_contents:
            print(""draw_circle Called"")
            score += 34
        else:
            print(""draw_circle does not appear to be called"")
            
        if ""wait_for_close("" in file_contents:
            print(""wait_for_close Called"")
            score += 33
        else:
            print(""wait_for_close does not appear to be called"")
            
    else:
        print(""There appears to be an error in your python Script that is preventing it from running"")
    
    return score        
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
from pythonGraph import *

open_window()
draw_circle(100,50,50,'blue')
wait_for_close()
",completed,100.0,"----------------------------------------------------------------------
*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***
----------------------------------------------------------------------

open_window Called
draw_circle Called
wait_for_close Called
Unit Test Returned: 100.0
"
69,75,lsn21_simpledrawing,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

Using pythonGraph (and the documentation for pythonGraph), experiment with
each of the drawing commands listed (drawing commands begin with the keyword
""draw""). Draw something interesting using at least 4 different drawing
commands. One of those drawing commands must be `draw_image`

**NOTE:  
** The best files will be added to our Python ""Hall of Fame"".


","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    drawing_functions = [""draw_arc"", ""draw_image"", ""draw_rectangle"", ""draw_circle"", ""draw_ellipse"", ""draw_line"", ""draw_pixel"", ""draw_text"", ""write_text""]
    drawing_functions_called = []
    
    print(""----------------------------------------------------------------------"")
    print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
    print(""----------------------------------------------------------------------\n"")
    
    file = open(""lsn21_simpledrawing.py"", ""r"")
    file_contents = file.read()
    
    for f in drawing_functions:
        if f in file_contents and f not in drawing_functions_called:
            drawing_functions_called.append(f)
    
    if len(drawing_functions_called) >= 4 and ""draw_image"" in drawing_functions_called:
        print(""Good Job!"")
        return 100.0
    elif len(drawing_functions_called) >= 4 and ""draw_image"" not in drawing_functions_called:
        print(""Missing at least one call of draw_image"")
        return 90.0
    else:
        print(""Not enough different drawing functions.  Need 4 unique (including draw_image) calls."")
        return 25 * len(drawing_functions_called)
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
from graph import *

# Create a window with a 500x500 pixel canvas
canvas = Canvas(500, 500)
window = Window(""PythonGraph"", canvas)

# Draw a red rectangle
canvas.draw_rectangle(100, 100, 200, 200, fill=""red"")

# Draw a green oval
canvas.draw_oval(300, 100, 400, 200, fill=""green"")

# Draw a blue triangle
canvas.draw_polygon([(100, 300), (200, 400), (0, 400)], fill=""blue"")

# Draw an image
canvas.draw_image(250, 300, ""example_image.png"")

# Update the window to display the drawings
window.update()

# Wait for the user to close the window
window.wait_for_close()
```
",completed,50.0,"----------------------------------------------------------------------
*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***
----------------------------------------------------------------------

Not enough different drawing functions.  Need 4 unique (including draw_image) calls.
Unit Test Returned: 50
"
70,76,lsn21_randomcircles,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** Create a pythonGraph that asks the user for the number of circles to draw.
Your program should then open a pythonGraph window and then draw that many
circles somewhere within view.

**Hints**

  * Import the `random` module in order to generate random numbers. There are specifically two functions that are useful:
  * `random.random()` returns a random number between 0.0 and 1.0
  * `random.randint(start, end)` returns a random integer between `start` and `end`




","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:
        py_compile.compile(""lsn21_randomcircles.py"", doraise=True)
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,,completed,100.0,"----------------------------------------------------------------------
*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***
----------------------------------------------------------------------

Thank you for your submission. Your instructor will let you know if there is a problem.
Unit Test Returned: 100.0
"
71,77,lsn20_unpopularnames,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 




**PROBLEM STATEMENT:  
**

This lab makes use of the names.csv dataset, which provides a list of over
1200+ names that were given to children in 2011. Here is a typical line from
the file:



`FEMALE, HISPANIC, GIA, 21`



  
Each position in the line (separated by a comma) represents a different ""data
element"". Here is a key for your reference:

Gender | Ethnicity | Name | Count  
(i.e., Number of Children Assigned this Name)  
---|---|---|---  
FEMALE | HISPANIC | GIA | 21  
  
  
  
Write a Python algorithm that gets a gender (all CAPs, ""MALE"" or ""FEMALE"") and
a number, `X`, from the user, and prints out the X least popular names for
that gender, starting with the most popular and working down.

For example, if the user types `MALE` and `2`, and you determine that the two
least popular names are Bill and Ted, your program should output:

    
    
    Bill  
    Ted  
      
    



**HINTS (really really important):**

  * Remember that you can use the `sort()` function to sort a list in ascending order. For example, if your list is named `my_list`, you can sort it by typing:  
`my_list.sort()`

  * `sort()` will work on 2D lists. It will sort by the first column, and then look at the 2nd column in the event of a tie. Think about this when you are building your 2D list.


","from cs110 import autograder
import random, math

expected_output_male = [""ALDO"", ""ALIJAH"", ""ALLAN"", ""ANGEL"", ""ARTURO"", ""AUGUSTUS"", ""BENNETT"", ""BERISH"", ""CADEN"", ""CHRIS"", ""CODY"", ""COREY"", ""DERRICK"", ""DEVON"", ""DONOVAN"", ""EASON"", ""EDWARD"", ""ELLIS"", ""GIOVANI"", ""HASSAN"",]
expected_output_female = [""ABBY"", ""AIZA"", ""ALISHA"", ""ANGELICA"", ""ANGIE"", ""ARIANNY"", ""ARIELA"", ""ATARA"", ""AUBREY"", ""AUTUMN"", ""AYLA"", ""BIANCA"", ""BONNIE"", ""BRIANNY"", ""CASSANDRA"", ""CELIA"", ""CHAVY"", ""CHEYENNE"", ""CORA"", ""CRISTINA""]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    if (random.random() > 0.5):
        gender = ""MALE""
        expected_output = expected_output_male
    else:
        gender = ""FEMALE""
        expected_output = expected_output_female
        
    num_to_print = random.randint(5, 20)
    output, error = autograder.run_script(""lsn20_unpopularnames.py"", [gender, num_to_print])
    lines = output.strip().split('\n')
    num_matches = autograder.compare_strings(lines, expected_output[:num_to_print])
    
    print()
    
    if len(lines) == 0:
        return 0
    elif len(lines) > len(expected_output[:num_to_print]):
        print(""Your program printed more lines than we expected"")
        return round(100 * num_matches / len(lines), 1)
    else:
        return round(100.0/len(expected_output[:num_to_print]) * num_matches, 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,1,1,1,1,1,1,0,0,1,0,1,0,1,1,0,0,1,0,0,0,,"
import csv

def get_least_popular_names(gender, X):
    names = []
    
    with open('names.csv', 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            if row[0] == gender:
                names.append(row[2])
    
    sorted_names = sorted(names, key=lambda x: x[1].lower())
    least_popular_names = sorted_names[:X]
    
    for name in least_popular_names:
        print(name)

gender = input(""Enter gender (MALE or FEMALE): "")
X = int(input(""Enter number of least popular names: ""))

get_least_popular_names(gender, X)
",completed,0.0,"
Unit Test Returned: 0.0
"
72,78,lsn20_skill1,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a CSV file that contains the amount of medals
won by countries at the most recent Olympic games.   Here is a snippet of the
file:

    
    
    USA,46,37,38  
    Britain,27,23,17



Here is how you can interpret each ""column"" in the file:

**Country** | **# Gold Medals** | **# Silver Medals** | **# Bronze Medals**  
---|---|---|---  
USA | 46 | 37 | 38  
Britain | 27 | 23 | 17  
  


You have also been provided with a code template that automatically reads this
file and extracts each line from it.

  * In the provided code template, perform the following tasks: 
    * **Line 30:** Write a line of code that extracts the columns from each line. Use the split() function
    * **Line 33:** Create a new row (i.e., a list) that contains the number of **silver** medals, followed by the name of the country
    * **Line 36:** Append the new row to **my_table**


","from cs110 import autograder
import random, math
from lsn20_skill1 import *

answer= [[37, 'USA'],
        [23, 'Britain'],
        [18, 'China'],
        [17, 'Russia'],
        [10, 'Germany'],
        [8, 'Japan'],
        [18, 'France'],
        [3, 'South Korea'],
        [12, 'Italy'],
        [11, 'Australia']]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_matches = 0
    
    for i in range(len(my_table)):
        print(""Row "" + str(i+1) + "": "", end='')
        if i < len(answer):
            if my_table[i] == answer[i]:
                print(""CORRECT"")
                num_matches += 1
            else:
                print(""INCORRECT (Expected: "" + str(answer[i]) + "" instead of "" + str(my_table[i]) + "")"")
        else:
            print(""INCORRECT (Unexpected Row: '"" + str(my_table[i]) + ""')"")
    
    print()
    print(num_matches, ""out of"", len(answer), ""rows match"")
    
    if len(answer) < num_matches:
        return 100 * num_matches / len(answer)
    else:
        return num_matches * (100 / len(answer))
    
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,,"
import csv

# Read the CSV file
with open('medals.csv', 'r') as file:
    reader = csv.reader(file)
    next(reader)  # Skip the header line

    my_table = []

    # Iterate through each line in the file
    for line in reader:
        # Extract the columns from each line
        columns = line[0].split(',')

        # Create a new row that contains the number of silver medals, followed by the name of the country
        new_row = [columns[2], columns[0]]

        # Append the new row to my_table
        my_table.append(new_row)

# Print the resulting table
for row in my_table:
    print(row)
",failed: [Errno 2] No such file or directory: 'medals.csv',0.0,
73,80,lsn20_popularnames,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

This program makes use of the names.csv dataset, which provides a list of over
1200+ names that were given to children in 2011. Here is a typical line from
the file:



`FEMALE, HISPANIC, GIA, 21`



  
Each position in the line (separated by a comma) represents a different ""data
element"". Here is a key for your reference:

Gender | Ethnicity | Name | Count  
(i.e., Number of Children Assigned this Name)  
---|---|---|---  
FEMALE | HISPANIC | GIA | 21  
  
  
  
Write a Python algorithm that gets a number, `X`, from the user, and prints
out the X most popular names, starting with the most popular and working down.

For example, if the user types `5`, and you determine that the five most
popular names are Adrian, David, Bob, Jane, Ulysses, your program should
output:  
Adrian  
David  
Bob  
Jane  
Ulysses  
  

**HINTS (really really important):**

  * Remember that you can use the `sort()` function to sort a list in ascending order. For example, if your list is named `my_list`, you can sort it by typing:  
`my_list.sort()`

  * For this lab, you need to sort the list in descending order, so that the most popular items appear first. To do this, you need to tell the function to sort in reverse. You can do this by typing the following (assuming your list is named `my_list`):  
`my_list.sort(reverse=True)`

  * `sort()` will work on 2D lists. It will sort by the first column, and then look at the 2nd column in the event of a tie. Think about this when you are building your 2D list.


","from cs110 import autograder
import random, math

expected_output = [
""ISABELLA"",
""MIA"",
""MOSHE"",
""ESTHER"",
""SOPHIA"",
""EMMA"",
""CAMILA"",
""CHAYA"",
""ETHAN"",
""JAYDEN"",
""SOFIA"",
""AVA"",
""JEREMIAH"",
""CHAIM"",
""JOSE"",
""CHANA"",
""LUIS"",
""ELLA"",
""CHARLOTTE"",
""HAILEY"",
""LEAH"",
""MADISON""]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    num_to_print = random.randint(5, 15)
    output, error = autograder.run_script(""lsn20_popularnames.py"", [num_to_print])
    lines = output.strip().split('\n')
    num_matches = autograder.compare_strings(lines, expected_output[:num_to_print])
    
    print()
    
    if len(lines) == 0:
        return 0
    elif len(lines) > len(expected_output[:num_to_print]):
        print(""Your program printed more lines than we expected"")
        return round(100 * num_matches / len(lines), 1)
    else:
        return round(100.0/len(expected_output[:num_to_print]) * num_matches, 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,1,1,1,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,,"
import csv

def get_popular_names(X):
    with open('names.csv', 'r') as file:
        reader = csv.reader(file)
        names = []
        for row in reader:
            names.append(row[2])
        
        names.sort(reverse=True, key=lambda x: int(x[3]))
        
        for i in range(X):
            print(names[i])
        

X = int(input(""Enter the number of popular names to print: ""))
get_popular_names(X)
",completed,0.0,"
Unit Test Returned: 0.0
"
74,81,lsn20_lowvolume,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

This program makes use of the traffic.csv dataset. Here is a typical line from
the file:



`691,6067 North,Kimball Ave,8/15/06,15600,North Bound:7500/South Bound:8100`



  
As you will recall from class, each position in the line (separated by a
comma) represents a different ""data element"". Here is a key for your
reference:

ID | Address | Street | Sample Date | Total # of Passing Vehicles | # of
Vehicles by Direction  
---|---|---|---|---|---  
691 | 6067 North | Kimball Ave | 8/15/06 | 15600 | North Bound:7500/South
Bound:8100  
  
  
  
Write a Python algorithm that opens the file and outputs the lowest traffic
count. Then, output the name of all streets whose traffic count is within 2500
(inclusive) of the min. Output one street name per line.



For example, if the min value is 500, and the roads within 2500 of this value
are ""Road A"", ""Road B"", ""Road C"", then your program should output:

    
    
    500  
    Road A  
    Road B  
    Road C


","from cs110 import autograder
import random, math

expected_output = [
""700"",
""Harbor Ave"",
""Woodlawn Ave"",
""Root St"",
""Calumet Ave"",
""Financial PL"",
""16th St"",
""Racine Ave"",
""60th St"",
""Wentworth Ave"",
""Parnell Ave"",
""Ashland Ave"",
""Federal St"",
""Hamlin Ave"",
""Pitney Ct"",
""109th St"",
""Loomis St"",
""Harrison St"",
""24th St"",
""La Salle St"",
""83rd Pl"",
""Homan Ave""]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""lsn20_lowvolume.py"", [])
    lines = set(output.split('\n'))
    matches = (len(lines.intersection(expected_output)))
    return (round((matches/22)*100,1))

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,1,0,0,0,,"
import csv

def find_lowest_traffic(filename):
    min_traffic = float('inf')
    streets_within_range = []
    
    with open(filename, 'r') as file:
        reader = csv.reader(file)
        next(reader)  # Skip header
        
        for row in reader:
            traffic_count = int(row[4])
            
            if traffic_count < min_traffic:
                min_traffic = traffic_count
                
            streets = row[2].split('/')
            
            for street in streets:
                if min_traffic - 2500 <= traffic_count <= min_traffic + 2500:
                    streets_within_range.append(street)
    
    streets_within_range.insert(0, min_traffic)
    
    return streets_within_range

filename = 'traffic.csv'
result = find_lowest_traffic(filename)

for entry in result:
    print(entry)
",completed,0.0,"Unit Test Returned: 0.0
"
75,82,lsn20_averagetraffic,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 




**PROBLEM STATEMENT:  
**

This program makes use of the traffic.csv dataset. Here is a typical line from
the file:



`691,6067 North,Kimball Ave,8/15/06,15600,North Bound:7500/South Bound:8100`



  
As you will recall from class, each position in the line (separated by a
comma) represents a different ""data element"". Here is a key for your
reference:

ID | Address | Street | Sample Date | Total # of Passing Vehicles | # of
Vehicles by Direction  
---|---|---|---|---|---  
691 | 6067 North | Kimball Ave | 8/15/06 | 15600 | North Bound:7500/South
Bound:8100  
  
  
  
Write a Python algorithm that opens the file and outputs the # of roads whose
traffic count is greater than (or equal to) the average. For example, if you
determine that the answer is 20, your program should output:

    
    
    20


","from cs110 import autograder
import random, math

expected_output = [""525""]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(""lsn20_averagetraffic.py"", [])
    lines = output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_output)
       
    return round(num_matches * (100.0 / len(expected_output)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













",100,0,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,,"
def count_roads(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()

        total_count = 0
        num_roads = 0
        for line in lines:
            data = line.strip().split(',')
            count = int(data[4])
            
            total_count += count
            num_roads += 1

        average_count = total_count / num_roads

        above_average_count = 0
        for line in lines:
            data = line.strip().split(',')
            count = int(data[4])

            if count >= average_count:
                above_average_count += 1
                
    return above_average_count

filename = ""traffic.csv""
result = count_roads(filename)
print(result)
```
",completed,0.0,"Unit Test Returned: 0.0
"
76,83,lsn19_skill2,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You are being provided with an empty table that contains information about
USAF Academy Squadrons. The columns of the table are organized as follows:

**Squadron Name** | **Squadron Number**  
---|---  
Name Goes Here (string) | # Goes Here (integer)  
  


Add the following two rows to the table:

Dogs of War | 3  
---|---  
Wolverines | 19  
  
  
  


","from cs110 import autograder
import random, math
from lsn19_skill2 import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    if len(squadron_table) >= 2:
        print(""Squadron Table has at least 2 things in them.  Let's see what's inside!"")
        score += 20
        
        if (squadron_table[0][0] == ""Dogs of War"" and squadron_table[0][1] == 3):
            print(""First Row Added Correctly"")
            score += 40
        else:
            print(""Something is wrong with the first row.  Make sure you are appending a list!"")
        
        if (squadron_table[1][0] == ""Wolverines"" and squadron_table[1][1] == 19):
            print(""Second Row Added Correctly"")
            score += 40
        else:
            print(""Something is wrong with the second row.  Make sure you are appending a list!"")
    else:
        print(""Squadron Table does not appear to have (at least) 2 rows"")
        
    return score
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,,"
import pandas as pd

data = {'Squadron Name': ['Name Goes Here', 'Dogs of War', 'Wolverines'],
        'Squadron Number': ['# Goes Here', 3, 19]}

df = pd.DataFrame(data)
print(df)
",failed: name 'squadron_table' is not defined,0.0,
77,84,lsn19_skill1,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You are being provided with a table  that describes various starship
classes from the Star Trek universe (I'm a nerd . . . go with it), as well as
two input statements that get a row and column from the user.  

Print out the corresponding row/column value from the table.




","from cs110 import autograder
import random, math

starship_table = [['Constitution', 288.6,  127.1,  72.6],
                  ['Galaxy',       642.5,  463.73, 135.26],
                  ['Intrepid',     343.0,  133.0,  66],
                  ['Sovereign',   685.3,  250.6,  88.2]]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    row_to_print = random.randint(0, len(starship_table) - 1)
    col_to_print = random.randint(0, len(starship_table[0]) - 1)
    value_from_table = str(starship_table[row_to_print][col_to_print])
    value_from_table_flipped = str(starship_table[col_to_print][row_to_print])
    output, error = autograder.run_script(""lsn19_skill1.py"", [row_to_print, col_to_print])
    
    if output.strip() == value_from_table:
        print(""CORRECT"")
        return 100.0
    elif output.strip() == value_from_table_flipped:
        print(""INCORRECT. Expected"", value_from_table)
        print(""It looks like you flipped columns and rows.  Remember that the format is list_name[row][col]"")
        return 25.0
    else:
        print(""INCORRECT. Expected"", value_from_table)
        print(""Try again.  Remember that the format is list_name[row][col]"")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,,"
table = [[""Starship Class"", ""Federation Designation"", ""Length (m)"", ""Crew""], 
         [""Federation"", ""Constitution"", ""288.6"", ""430""], 
         [""Cardassian"", ""Galor"", ""371"", ""600""],
         [""Romulan"", ""D'deridex"", ""1041"", ""2000""],
         [""Klingon"", ""Negh'Var"", ""682.5"", ""2300""]]

row = int(input(""Enter the row number: ""))
column = int(input(""Enter the column number: ""))

print(table[row][column])
```
Note: This solution assumes 0-based indexing for the rows and columns.",completed,0.0,"INCORRECT. Expected 463.73
Try again.  Remember that the format is list_name[row][col]
Unit Test Returned: 0.0
"
78,85,lsn19_population,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:**

You are being provided with a simple 2D list that contains the names and
populations of the 10 largest cities in the world. This list (which is called
`cities_table`) can be logicially visualized as the following:



**City** | **Population**  
---|---  
Tokyo | 37,435,191  
Delhi | 29,399,141  
Shanghai | 29,399,141  
Sao Paulo | 21,846,507  
Mexico City | 21,671,908  
Cairo | 20,484,965  
Dhaka | 20,283,552  
Mumbai | 20,185,064  
Beijing | 20,035,455  
Osaka | 19,222,665  
  
  
Write a Python program that gets a population from the user, and prints the
names of all the cities whose populations are at least that big (starting with
the most populated city). Print each city's name on a separate line.



**EXAMPLES:**

  | Example 1 | Example 2  
---|---|---  
Input | 28000000 | 30000000  
Output | Tokyo  
Delhi  
Shanghai | Tokyo


","from cs110 import autograder
import random

def solution(population):
    result = ''
    
    cities_table = [
        ['Tokyo', 37435191],
        ['Delhi', 29399141],
        ['Shanghai', 25647805],
        ['Sao Paulo', 21846507],
        ['Mexico City', 21671908],
        ['Cairo', 20484965],
        ['Dhaka', 20283552],
        ['Mumbai', 20185064],
        ['Beijing', 20035455],
        ['Osaka', 19222665]]
    
    for row in cities_table:
        if row[1] >= population:
            result += row[0] + '\n'
    
    return result.strip()


def test_passed():
    
    random_population_size = random.randint(19, 30) * 1000000
    
    output, error = autograder.run_script(""lsn19_population.py"", [random_population_size])
    answer = solution(random_population_size)
    
    lines = output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, answer.strip().split('\n'))
    
    if num_matches == len(lines):
        print(""\nCORRECT"")
        return 100.0
    else:
        print(""\nOne or more outputs were incorrect."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,,"
cities_table = [
    ['Tokyo', '37,435,191'],
    ['Delhi', '29,399,141'],
    ['Shanghai', '29,399,141'],
    ['Sao Paulo', '21,846,507'],
    ['Mexico City', '21,671,908'],
    ['Cairo', '20,484,965'],
    ['Dhaka', '20,283,552'],
    ['Mumbai', '20,185,064'],
    ['Beijing', '20,035,455'],
    ['Osaka', '19,222,665']
]

population = int(input())

for city in cities_table:
    if int(city[1].replace(',', '')) >= population:
        print(city[0])
",completed,100.0,"
CORRECT
Unit Test Returned: 100.0
"
79,86,lsn19_movies,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 




**PROBLEM STATEMENT:**

Write a Python function called `get_movies` that takes three parameters:

  * A two-dimensional list containing movie titles and other stats (see table below for an example)
  * A rating (e.g., ""PG"", ""R"")
  * A run time (in minutes)



Title | Release Year | Rating | Run Time (minutes)  
---|---|---|---  
Star Wars: A New Hope | 1977 | PG | 121  
Star Trek: The Motion Picture | 1979 | G | 132  
Indiana Jones: Raiders of the Lost Ark | 1989 | PG | 115  
  
  
Your function should return the number of movies that have the specified
rating, and run for at least the number of minutes specified.



**EXAMPLE:**  
If the above table were contained within a list called `movie_table`, then
`get_movies(movie_table, ""PG"", 100)` should return 2


","from cs110 import autograder
import random
import lsn19_movies

def solution(movies_table, rating, runtime):
    count = 0
    
    for row in movies_table:
        if row[2] == rating and row[3] >= runtime:
            count += 1
    
    return count

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    ratings = ['PG', 'PG-13', 'R']
    num_passed = 0
    
    for rating in ratings:
        movies_table = [
            [""Star Wars: A New Hope"", 1977, ""PG"", 121],
            [""Star Trek: The Motion Picture"", 1979, ""G"", 132],
            [""Raiders of the Lost Ark"", 1989, ""PG"", 115],
            [""Indiana Jones and the Temple of Doom"", 1984, ""PG"", 118],
            [""Indiana Jones and the Last Crusade"", 1989, ""PG-13"", 127],
            [""Serenity"", 2005, ""PG-13"", 119],
            [""Joker"", 2019, ""R"", 122],
            [""The Terminator"", 1984, ""R"", 107]
            ]
        test_table = []
        runtime = random.randint(90, 120)
        
        for j in range(random.randint(2, 5)):
            index = random.randint(0, len(movies_table)-1)
            test_table.append(movies_table[index])
            movies_table.remove(movies_table[index])
        
        print(""Testing (Rating = "" + rating + ""):\n"" + ""  Movie Table: "" + str(test_table) + ""\n"" + ""  Runtime: "" + str(runtime))
        print(""  Expecting: "" + str(solution(test_table, rating, runtime)) + ""\n  Your Function's Output: "" + str(lsn19_movies.get_movies(test_table, rating, runtime)))
        
        if solution(test_table, rating, runtime) == lsn19_movies.get_movies(test_table, rating, runtime):
            print(""PASSED!\n"")
            num_passed += 1
        else:
            print(""INCORRECT\n"")
            
    
    return (num_passed / len(ratings)) * 100.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,,"
def get_movies(movie_table, rating, run_time):
    count = 0
    for movie in movie_table:
        if movie[2] == rating and movie[3] >= run_time:
            count += 1
    return count
",completed,100.0,"Testing (Rating = PG):
  Movie Table: [['Star Trek: The Motion Picture', 1979, 'G', 132], ['Raiders of the Lost Ark', 1989, 'PG', 115], ['Star Wars: A New Hope', 1977, 'PG', 121], ['Indiana Jones and the Temple of Doom', 1984, 'PG', 118]]
  Runtime: 90
  Expecting: 3
  Your Function's Output: 3
PASSED!

Testing (Rating = PG-13):
  Movie Table: [['Serenity', 2005, 'PG-13', 119], ['Indiana Jones and the Temple of Doom', 1984, 'PG', 118]]
  Runtime: 98
  Expecting: 1
  Your Function's Output: 1
PASSED!

Testing (Rating = R):
  Movie Table: [['Indiana Jones and the Last Crusade', 1989, 'PG-13', 127], ['Star Wars: A New Hope', 1977, 'PG', 121]]
  Runtime: 93
  Expecting: 0
  Your Function's Output: 0
PASSED!

Unit Test Returned: 100.0
"
80,87,lsn19_golf,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** In, Python, write an algorithm that first asks the user how many football
players they wish to enter statistics for and then gets that many yearly
passing totals for each player. Output how many of those players that had more
than 5000 passing yards in a year. Also your algorithm will output the average
yardage per year as well as the minimum yardage entered, in that order. You
can assume there is at least one player's yardage to input.



**EXAMPLES:**

  | Example 1 | Example 2 | Example 3  
---|---|---|---  
**Inputs** | 6  
4924  
4442  
5117  
2700  
1990  
4399 | 5  
2305  
4209  
5100  
5109  
3800 | 4  
4200  
2709  
3757  
2976  
**Outputs** | 1  
3928.6666666666665  
1990 | 2  
4104.6  
2305 | 0  
3410.5  
2709


","from cs110 import autograder
import random, statistics

random_names = ['Mcllroy', 'Koepka', 'Rahm', 'Woods', 'Thomas', 'Johnson', 'Cantlay', 'Simpson']

def get_random_name():
    global random_names
    name = random_names[random.randint(0, len(random_names)-1)]
    random_names.remove(name)
    return name


def solution(data):
    min_value = 99999
    min_name = """"
    count = 0
    
    for row in data:
        if row[1] < min_value:
            min_value = row[1]
            min_name = row[0]
    
    for row in data:
        if row[1] <= min_value + 5:
            count += 1

    return min_name, (count / len(data) * 100.0)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_inputs = random.randint(2, 5)
    input_list = []
    data = []
        
    for i in range(num_inputs):
        new_row = [get_random_name(), random.randint(70, 90)]
        input_list.append(new_row[0])
        input_list.append(new_row[1])
        data.append(new_row)
    input_list.append(""END"")
    
    lowest_name, percent = solution(data)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn19_golf.py"", input_list)
    lines = output.strip().split('\n')

    # Checks Min
    if len(lines) < 2:
        print(""Number of output lines does not match"")
        return 0
    else:
        if not lowest_name == lines[0]:
            print(""Incorrect Name.  Expected "" + str(lowest_name))
            return 0
        if not autograder.equals(percent, lines[1]):
            print(""Incorrect Percent.  Expected "" + str(percent))
            return 50
        
    print(""PASSED!"")
    return 100
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,1,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,,"
num_players = int(input(""How many football players do you wish to enter statistics for? ""))
passing_totals = []

for _ in range(num_players):
    yearly_passing = int(input(""Enter the yearly passing total for a player: ""))
    passing_totals.append(yearly_passing)

num_players_over_5000 = sum(yardage > 5000 for yardage in passing_totals)
average_yardage = sum(passing_totals) / num_players
minimum_yardage = min(passing_totals)

print(num_players_over_5000)
print(average_yardage)
print(minimum_yardage)
```
",completed,0.0,"Number of output lines does not match
Unit Test Returned: 0
"
81,88,lsn19_credit,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 




**PROBLEM STATEMENT:**

The Air Academy Federal Credit Union wants to identify its best customers and
comes to you for help. To help with the accounting, create a Python program
which inputs repeated pairs of member last-names followed by account balances
until the word "" **DONE** "" (all capital letters) is entered at the member
last-name prompt.

Your program should output:

  * The last name of the member the highest account value, if there are two members with the same highest account value it should output the name of the first person entered.
  * It will then output the percentage members who are within $10,000 (inclusive) of the highest account value.

There is no bound on the number of members that may be entered, but you may
assume that there will be at least one member and balance entered.



**EXAMPLE:**

  | Example 1 | Example 2 | Example 3  
---|---|---|---  
Inputs | Rockefeller  
120000  
Chase  
115000  
Morgan  
110000  
Gates  
90000  
Jobs  
65000  
DONE | Jobs  
150000  
Chase  
150000  
Kennedy  
40000  
DONE | Morgan  
145000  
Chase  
135000  
Kennedy  
142000  
Gates  
145000  
DONE  
Output | Rockefeller  
60.0 | Jobs  
66.66666666666666 | Morgan  
100.0  
  



","from cs110 import autograder
import random, statistics

random_names = ['Gates', 'Bezos', 'Zuckerberg', 'Ellison', 'Page', 'Brin', 'Huateng', 'Dell', 'Musk', 'Allen']

def get_random_name():
    global random_names
    name = random_names[random.randint(0, len(random_names)-1)]
    random_names.remove(name)
    return name


def solution(data):
    highest_value = -99999
    highest_name = """"
    count = 0
    
    for row in data:
        if row[1] > highest_value:
            highest_value = row[1]
            highest_name = row[0]
    
    for row in data:
        if row[1] >= highest_value - 10000:
            count += 1

    return highest_name, (count / len(data) * 100.0)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_inputs = random.randint(5, 7)
    input_list = []
    data = []
        
    for i in range(num_inputs):
        new_row = [get_random_name(), random.randint(5000, 35000)]
        input_list.append(new_row[0])
        input_list.append(new_row[1])
        data.append(new_row)
    input_list.append(""DONE"")
    
    highest_balance, percent = solution(data)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn19_credit.py"", input_list)
    lines = output.strip().split('\n')

    # Checks Min
    if len(lines) < 2:
        print(""Number of output lines does not match"")
        return 0
    else:
        if not highest_balance == lines[0]:
            print(""Incorrect Highest Balance.  Expected "" + str(highest_balance))
            return 0
        if not autograder.equals(percent, lines[1]):
            print(""Incorrect Percent.  Expected "" + str(percent))
            return 50
        
    print(""PASSED!"")
    return 100
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,1,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,,,completed,0.0,"Number of output lines does not match
Unit Test Returned: 0
"
82,89,lsn19_100m,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:**

You have been asked by your unit to record 100m dash times for an upcoming
USAFA track meet. Create a Python algorithm that first asks for the number of
cadets, and then asks for that many cadet last names, squadrons, and 100m dash
times (in that order).

Your program should output:

  * The cadet squadron containing the cadet with the fastest 100m dash time followed by their 100m dash time. If there is a tie for fastest 100m dash times, you should output the squadron number and time for the LAST cadet entered who had that fastest time.
  * The number of cadets whose 100m dash time was faster than the average.

There is no bound on the number of cadet that may be entered, but you may
assume that there will be at least one cadet and track time entered.



**EXAMPLES:**

  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Inputs** | 4  
Thorpe  
13  
10.2  
Owens  
22  
9.93  
Mathias  
19  
9.99  
Rudolph  
39  
10.23 | 3  
Johnson  
7  
10.3  
Tyus  
14  
10.02  
Lewis  
40  
9.67 | 2  
Joyner  
1  
10.08  
Kersee  
29  
9.97  
**Output** | 22  
9.93  
2 | 40  
9.67  
1 | 29  
9.97  
1  
  



","from cs110 import autograder
import random, statistics

random_names = ['Alice', 'Bob', 'Courtney', 'Devon', 'Frank', 'Genie']

def get_random_name():
    global random_names
    name = random_names[random.randint(0, len(random_names)-1)]
    random_names.remove(name)
    return name

def solution(data):
    fastest_time = 99999
    fastest_squadron = 0
    total = 0
    count = 0
    
    for row in data:
        total += row[2]
        if row[2] <= fastest_time:
            fastest_time = row[2]
            fastest_squadron = row[1]
            
    average = total / len(data)
    
    for row in data:
        if row[2] <= average:
            count += 1
    
    return fastest_squadron, fastest_time, count


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_inputs = random.randint(2, 5)
    input_list = [num_inputs]
    data = []
        
    for i in range(num_inputs):
        new_row = [get_random_name(), random.randint(1, 40), round(random.uniform(12, 18), 1)]
        input_list.append(new_row[0])
        input_list.append(new_row[1])
        input_list.append(new_row[2])
        data.append(new_row)
    
    fastest_squadron, fastest_time, count = solution(data)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn19_100m.py"", input_list)
    lines = output.strip().split('\n')

    # Checks Min
    if len(lines) != 3:
        print(""Number of output lines does not match"")
        return 0
    else:
        if not autograder.equals(fastest_squadron, lines[0]):
            print(""Incorrect Squadron.  Expected "" + str(fastest_squadron))
            return 0
        if not autograder.equals(fastest_time, lines[1]):
            print(""Incorrect Time.  Expected "" + str(fastest_time))
            return 33
        if not autograder.equals(count, lines[2]):
            print(""Incorrect Count.  Expected "" + str(count))
            return 67
        
    print(""PASSED!"")
    return 100
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,,completed,0.0,"Number of output lines does not match
Unit Test Returned: 0
"
83,90,lsn18_swimstats,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:**

Write a Python algorithm that keeps asking the user for swim times (in
seconds) until the user types -1. Your program will print the following values
(in order, one per line):

  * Average time
  * Range (i.e., the difference between the min and max time)
  * Standard Deviation (hint: like many things in Python you can find how to accomplish this with a quick web search, stdev() should show up on top)



  | Example 1 | Example 2  
---|---|---  
Inputs | 62  
71  
83  
-1 | 45  
47  
51  
46  
44  
-1  
Outputs | 72.0  
21  
8.602 | 46.6  
7  
2.417  
  
** **


","from cs110 import autograder
import random, statistics

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    list_of_swim_times = []
    for i in range(6):
        list_of_swim_times.append(random.randint(40, 60))
    min_time = min(list_of_swim_times)
    max_time = max(list_of_swim_times)
    range_time = max_time - min_time
    average = sum(list_of_swim_times) / len(list_of_swim_times)
    
    # There are multiple standard deviations; this unit test accepts either one
    stdev = statistics.stdev(list_of_swim_times)
    pstdev = statistics.pstdev(list_of_swim_times)
    
    list_of_swim_times.append(-1)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn18_swimstats.py"", list_of_swim_times)
    lines = output.split('\n')

    # Checks Min
    if len(lines) != 4:
        print(""Number of output lines does not match"")
        return 0
    else:
        if not autograder.equals(average, lines[0]):
            print(""Invalid Average.  Expected "" + str(average))
            return 0
        if not autograder.equals(range_time, lines[1]):
            print(""Invalid Range.  Expected "" + str(range_time))
            return 33
        if not (autograder.equals(stdev, lines[2]) or equals(pstdev, lines[2])):
            print(""Invalid Std Dev.  Expected "" + str(stdev))
            return 67
        
    print(""PASSED!"")
    return 100


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,,,completed,0.0,"Number of output lines does not match
Unit Test Returned: 0
"
84,91,lsn18_skill2,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM NAME:  
** lsn18_skill2



**PROBLEM STATEMENT:  
** You are being provided with a list containing 5 random numbers. Create a
variable called **my_value** , and assign it the value of the 3rd item in the
list.



**NOTES:**

  * You do not need to print my_value OR the list


","from cs110 import autograder
import random, math
from lsn18_skill2 import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    if 'my_value' in globals():
        print(""Looking for my_value . . . FOUND!"")
        if my_value == my_list[2]:
            print(""Looking inside my_value . . . VALUE MATCHES THE 3rd VALUE IN THE LIST"")
            return 100
        elif my_value == my_list[3]:
            print(""Looking inside my_value . . . VALUE MATCHES THE 4th VALUE INSTEAD OF THE THIRD!"")
            print(""** HINT:  The index starts at 0 **"")
            return 50
        else:
            print(""Looking inside my_value . . . VALUE DOES NOT MATCH.  EXPECTED"", my_list[2])
            return 50
    else:
        print(""Looking for my_value . . . NOT FOUND!"")
        return 0
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,"```
numbers = [4, 8, 2, 6, 1]
my_value = numbers[2]","failed: invalid syntax (lsn18_skill2.py, line 1)",0.0,
85,92,lsn18_skill1,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Create a list called my_list. Put 3 items inside the list (they can be
anything you want)



**HINTS:  
** Look at the quick reference guide! ****




","from cs110 import autograder
import random
from lsn18_skill1 import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    if 'my_list' in globals():
        print(""Looking for my_list . . . FOUND!"")
        if len(my_list) == 3:
            print(""Looking inside my_list . . . FOUND 3 ITEMS!"")
            return 100
        else:
            print(""Looking inside my_list . . . FOUND"", len(my_list), ""INSTEAD OF 3 ITEMS"")
            return 50
    else:
        print(""Looking for my_list . . . NOT FOUND!"")
        return0
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,,failed: name 'return0' is not defined,0.0,
86,93,lsn18_namesreverse,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 




**PROBLEM STATEMENT:**

Allow the user to enter names one at a time until they type the word 'END'
(without quotes). This keyword is called a  **sentinel value,**  and it marks
the end of the input. The user entered names (not counting 'END') are to be
stored in a Python list. The user will enter the names one at a time. After
entering all the names, your algorithm will print the names in the reverse
order that they were entered.



  | Example 1 | Example 2 | Example 3  
---|---|---|---  
Inputs | Adrian  
Liam  
Michelle  
END | Rick  
Morty  
END | Spock  
Data  
Dax  
Burnham  
END  
Outputs | Michelle  
Liam  
Adrian | Morty  
Rick | Burnham  
Dax  
Data  
Spock  
  
You may assume that the user types at least one name.



**HINTS:**

  * Remember that the range() function can have up to 3 parameters. The first is the starting value, the second is the ending value, and the third is the increment amount.
  * Don't forget that the index of a list starts at 0, and goes to the length of the list - 1. For example, a list with 5 elements has indices 0, 1, 2, 3, and 4.
  * To get the length of a list, use the `len()` function


","from cs110 import autograder
import random

def solution(name_list):
    result = ''
    
    for i in range(len(name_list) - 1, -1, -1):
        result += name_list[i] + ""\n""

    return result.strip()


def test_passed():
    
    name_list = [""Alice"", ""Bob"", ""Catrina"", ""Dennis"", ""Felix"", ""Garfield"", ""Henry"", ""Ignis"", ""Jack"", ""Kelly""]
    num_names = random.randint(3, len(name_list))
    input_list = []
    random_names = []
    
    for i in range(num_names):
        random_name = name_list[random.randint(0, len(name_list)-1)]
        input_list.append(random_name)
        random_names.append(random_name)
        name_list.remove(random_name)
    
    input_list.append(""END"")
    
    output, error = autograder.run_script(""lsn18_namesreverse.py"", input_list)
    expected_output = solution(random_names)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT.  Expected:"")
        print(expected_output)
    
    return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,1,0,1,0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,,"
names = []
name = input(""Enter a name: "")
while name != ""END"":
    names.append(name)
    name = input(""Enter a name: "")
    
for i in range(len(names)-1, -1, -1):
    print(names[i])
",completed,100.0,"CORRECT
Unit Test Returned: 100.0
"
87,94,lsn18_names,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:**

Write a Python algorithm that asks the user for the number of names to
process, and then gets that many values. Print out the names in alphabetical
order, with each name starting on a line.

  | Example 1 | Example 2 | Example 3  
---|---|---|---  
Inputs | 3  
Alice  
Jane  
Bob | 3  
Bailey  
Paul  
Adrian | 5  
David  
Dave  
Steve  
Barry  
Troy  
Outputs | Alice  
Bob  
Jane | Adrian  
Bailey  
Paul | Barry  
Dave  
David  
Steve  
Troy  
  


You may assume that the user will enter at least one name.



**NOTES:**

  * Python has a built-in function called `sort()` that can be used to sort a list. Here is an example to show you how to use it:  
`# Declare a list and put some stuff in it`  
`my_list = ['b', 'c', 'a', 'd']`  
  
`# Sort the list alphabetically (a-z)`  
`my_list.sort()`

** **


","from cs110 import autograder
import random

def solution(name_list):
    result = ''
    
    name_list.sort()
    
    for name in name_list:
        result += name + ""\n""
    
    return result.strip()


def test_passed():
    
    name_list = [""Alice"", ""Bob"", ""Catrina"", ""Dennis"", ""Felix"", ""Garfield"", ""Henry"", ""Ignis"", ""Jack"", ""Kelly""]
    num_names = random.randint(3, len(name_list))
    input_list = [num_names]
    random_names = []
    
    for i in range(num_names):
        random_name = name_list[random.randint(0, len(name_list)-1)]
        input_list.append(random_name)
        random_names.append(random_name)
        name_list.remove(random_name)
    
    output, error = autograder.run_script(""lsn18_names.py"", input_list)
    expected_output = solution(random_names)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT.  Expected:"")
        print(expected_output)
    
    return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,1,1,1,0,0,1,0,0,1,0,1,0,0,0,0,1,0,0,0,0,,,completed,0.0,"INCORRECT.  Expected:
Felix
Henry
Ignis
Jack
Kelly
Unit Test Returned: 0.0
"
88,95,lsn18_grades,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 




**PROBLEM STATEMENT:**

Create a Python program that asks how many students are in a class, then
prompts the user for each student's grade. Then output the grades that are
**at least 10 points above the average.**



**EXAMPLES:**

  | Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 3  
10  
100  
70 | 3  
30  
40  
60 | 4  
10  
20  
60  
90  
Output | 100 | 70 | 60  
90


","from cs110 import autograder
import random

def solution(grade_list):
    result = ''
    
    average = sum(grade_list) / len(grade_list)
    
    for grade in grade_list:
        if (grade >= (average + 10)):
            result += str(grade) + ""\n""
    
    return result.strip()


def test_passed():
    
    num_grades = random.randint(3, 7)
    input_list = [num_grades]
    random_grades = []
    
    for i in range(num_grades):
        random_grade = random.randint(0, 100)
        input_list.append(random_grade)
        random_grades.append(random_grade)
    
    output, error = autograder.run_script(""lsn18_grades.py"", input_list)
    expected_output = solution(random_grades)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT.  Expected:"")
        print(expected_output)
    
    return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,"
def above_average_grades():
    num_students = int(input(""Enter the number of students: ""))
    grades = []
    total = 0

    for i in range(num_students):
        grade = int(input(""Enter the grade for student {}: "".format(i+1)))
        grades.append(grade)
        total += grade

    average = total / num_students

    above_average = [grade for grade in grades if grade >= average + 10]

    for grade in above_average:
        print(grade)


above_average_grades()
",completed,100.0,"CORRECT
Unit Test Returned: 100.0
"
89,96,lsn18_combinations,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:**

Write a Python function called `get_combinations` that takes a list of
distinct characters as a parameter, and returns a list containing all of the
2-letter combinations of said characters.

For example, given the following list:  
`my_list = ['a', 'b']`

`get_combinations(my_list)` should return a list containing the following
elements:  
['aa', 'ab', 'ba', 'bb']

Notes:

  * The ordering of the elements in the list does not matter, so long as all of the 2-letter combinations are contained within the list


","from cs110 import autograder
import random, lsn18_combinations

STUDENT_SCRIPT = ""lsn18_combinations.py""


def solution(list_of_characters):
    result = []
    
    for character1 in list_of_characters:
        for character2 in list_of_characters:
            result.append(character2 + character1)
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    possible_characters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
    list_size = random.randint(2, len(possible_characters))
    test_input = []
    
    for i in range(list_size):
        random_index = int(random.random() * len(possible_characters))
        random_character = possible_characters[random_index]
        test_input.append(random_character)
        possible_characters.remove(random_character)

    # Runs the Script
    answer = solution(test_input)
    student_answer = lsn18_combinations.get_combinations(test_input)
    
    print(""Letters Provided:\n"", test_input, ""\n"")
    print(""Expected:\n"" + str(answer) + ""\n"")
    print(""Your List:\n"" + str(student_answer) + ""\n"")

    if len(answer) == len(student_answer):
        for combo in answer:
            if student_answer.count(combo) != 1:
                print(""Missing Combo Value: "" + combo)
                return 0
    else:
        print(""Lists are not the same size"")
        return 0
    
    print(""CORRECT"")
    return 100
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,,"
def get_combinations(chars):
    combinations = []
    for char1 in chars:
        for char2 in chars:
            combinations.append(char1 + char2)
    return combinations
",completed,100.0,"Letters Provided:
 ['b', 'e', 'a', 'g'] 

Expected:
['bb', 'eb', 'ab', 'gb', 'be', 'ee', 'ae', 'ge', 'ba', 'ea', 'aa', 'ga', 'bg', 'eg', 'ag', 'gg']

Your List:
['bb', 'be', 'ba', 'bg', 'eb', 'ee', 'ea', 'eg', 'ab', 'ae', 'aa', 'ag', 'gb', 'ge', 'ga', 'gg']

CORRECT
Unit Test Returned: 100
"
90,97,lsn16_practice4,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with a dataset called `fuelprices.csv` that contains
monthly gasoline prices from 2006 - 2012. Here is a typical line from the
dataset (each line ends with the newline ""\n"" character):

`1/1/2006 0:00,Regular,2.314`



Each position in the line (separated by a comma) represents a different ""data
element,"" or ""column."" The following table shows how the above line can be
interpreted:

  | Day | Gas Type | Price (in Dollars)  
---|---|---|---  
Value | 1/1/2006 0:00 | Regular | 2.314  
  


Write a Python program that asks the user for:

  * A Gas Type (e.g., ""Regular"")



Your program should then read the file and output:

  * The average price of gas for that gas type






","from cs110 import autograder
import random, math


def test_passed():

    num_tests_passed = 0
    test_cases = [(""Regular"", 37, 2.938), (""Midgrade"", 37, 3.098), (""Premium"", 37, 3.208), (""Diesel"", 32, 3.242)]

    for test_case in test_cases:
        print(""# -----------------------------------"")
        print(""# Testing"", test_case[0])
        print(""# -----------------------------------"")
        output, error = autograder.run_script(""lsn16_practice4.py"", [test_case[0]])
    
        lines = output.strip().split('\n')
        
        if len(lines) > 0:
            if autograder.equals(lines[0], test_case[2]):
                print(""CORRECT"")
                num_tests_passed += 1
            elif len(lines) > 1 and autograder.equals(lines[0], test_case[1]) and autograder.equals(lines[1], test_case[2]):
                print(""CORRECT"")
                num_tests_passed += 1
            else:
                print(""INCORRECT"")
            print()
                    
    return round(100 / len(test_cases), 1) * num_tests_passed
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,,"
import csv

def average_gas_price(gas_type):
    total_price = 0
    count = 0

    with open('fuelprices.csv', 'r') as file:
        csv_reader = csv.reader(file)
        
        for row in csv_reader:
            if row[1] == gas_type:
                total_price += float(row[2])
                count += 1

    if count > 0:
        average_price = total_price / count
        return average_price
    else:
        return ""Gas type not found in dataset""

gas_type = input(""Enter a Gas Type: "")
average_price = average_gas_price(gas_type)
print(f""The average price of {gas_type} gas is: {average_price}"")
```
",completed,0.0,"# -----------------------------------
# Testing Regular
# -----------------------------------
INCORRECT

# -----------------------------------
# Testing Midgrade
# -----------------------------------
INCORRECT

# -----------------------------------
# Testing Premium
# -----------------------------------
INCORRECT

# -----------------------------------
# Testing Diesel
# -----------------------------------
INCORRECT

Unit Test Returned: 0.0
"
91,98,lsn16_practice3,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You are writing a program to analyze the BMI of cadets. Write a program
that asks for the number of cadets, and then gets that many weights and
heights (alternating, a weight then the corresponding height, in that order).
Your program should then output the number of thin, healthy, overweight, and
obese cadets (based on their BMI), using the following formula and table as a
guide:



**BMI = 703 * (weight / height 2)**



**Rating** | **BMI**  
---|---  
Thin | less than 18.5  
Healthy | at least 18.5 but less than 25  
Overweight | at least 25 but less than 30  
Obese | 30 or more  
  





","from cs110 import autograder
import random, math

def solution(weights, heights):
    num_thin = 0
    num_healthy = 0
    num_overweight = 0
    num_obese = 0
    
    for i in range(len(weights)):
        bmi = 703 * (weights[i] / heights[i]**2)

        if bmi <= 18.5:
            num_thin += 1
        elif bmi <= 25:
            num_healthy += 1
        elif bmi <= 30:
            num_overweight += 1
        else:
            num_obese += 1
    
    return (num_thin, num_healthy, num_overweight, num_obese)


def test_passed():

    score = 0

    # Generates the Test Set
    num_students = random.randint(5, 10)
    inputs = [num_students]
    weights = []
    heights = []
    
    for i in range(num_students):
        random_weight = random.randint(120, 200)
        random_height = random.randint(55, 76)
        
        weights.append(random_weight)
        heights.append(random_height)
        
        inputs.append(random_weight)
        inputs.append(random_height)
    
    output, error = autograder.run_script(""lsn16_practice3.py"", inputs)
    expected_output = solution(weights, heights)
    
    lines = output.strip().split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Thin is Correct"")
        score += 25
    else:
        print(""Thin is Incorrect.  Expected"", expected_output[0])

    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Healthy is Correct"")
        score += 25
    else:
        print(""Healthy is Incorrect.  Expected"", expected_output[1])
    
    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):
        print(""Overweight is Correct"")
        score += 25
    else:
        print(""Overweight is Incorrect.  Expected"", expected_output[2])
    
    if len(lines) > 3 and autograder.equals(lines[3], expected_output[3]):
        print(""Obese is Correct"")
        score += 25
    else:
        print(""Obese is Incorrect.  Expected"", expected_output[0])
        
    return score


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,"
def calculate_bmi(weight, height):
    bmi = 703 * (weight / (height ** 2))
    return bmi

def classify_cadets(cadets):
    thin_count = 0
    healthy_count = 0
    overweight_count = 0
    obese_count = 0

    for i in range(len(cadets)):
        if i % 2 == 0:
            weight = cadets[i]
            height = cadets[i + 1]
            bmi = calculate_bmi(weight, height)

            if bmi < 18.5:
                thin_count += 1
            elif bmi >= 18.5 and bmi < 25:
                healthy_count += 1
            elif bmi >= 25 and bmi < 30:
                overweight_count += 1
            elif bmi >= 30:
                obese_count += 1

    return thin_count, healthy_count, overweight_count, obese_count

def main():
    num_cadets = int(input(""Enter the number of cadets: ""))
    cadets = []

    for _ in range(num_cadets):
        weight = float(input(""Enter weight (in pounds): ""))
        height = float(input(""Enter height (in inches): ""))
        cadets.append(weight)
        cadets.append(height)

    thin_count, healthy_count, overweight_count, obese_count = classify_cadets(cadets)

    print(""Number of Thin cadets:"", thin_count)
    print(""Number of Healthy cadets:"", healthy_count)
    print(""Number of Overweight cadets:"", overweight_count)
    print(""Number of Obese cadets:"", obese_count)

if __name__ == ""__main__"":
    main()
",completed,0.0,"Thin is Incorrect.  Expected 0
Healthy is Incorrect.  Expected 1
Overweight is Incorrect.  Expected 4
Obese is Incorrect.  Expected 0
Unit Test Returned: 0
"
92,99,lsn16_practice2,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a function that returns the nth value in a
sequence (i.e., pattern). Get a number from the user (x), and print the xth to
the x+5th value in that sequence (6 numbers total).



**HINTS:**

  * To get the 8th value in a sequence, you would call `get_value(8)`




","from cs110 import autograder
import random, math


def get_value(n):
    return (2 * n) + 1


def solution(x):
    result = ''
    
    for i in range(x, x+6):
        result += str(get_value(i)) + ""\n""
    
    return result


def test_passed():
    random_value = random.randint(5, 15)
    output, error = autograder.run_script(""lsn16_practice2.py"", [random_value])
    expected_output = solution(random_value)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT.  Expected:"")
        print(expected_output)
    
    return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
def get_value(n):
    # Function to get nth value in sequence
    # Placeholder implementation, replace with your logic
    
    return n ** 2

x = int(input(""Enter a number: ""))

for i in range(x, x+6):
    print(get_value(i))
",completed,0.0,"INCORRECT.  Expected:
31
33
35
37
39
41

Unit Test Returned: 0.0
"
93,100,lsn16_practice1,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** Define a function called add_values. The function should take 3 parameters
(x, y, z), and return the sum of these values.



**NOTES:**

  * You do not need to call the function. Simple define it.




","from cs110 import autograder
import lsn16_practice1

def add_values(x, y, z):
    return x + y + z

def test_passed():
    
    if 'add_values' in dir(lsn16_practice1) and add_values(1, 2, 3) == lsn16_practice1.add_values(1, 2, 3):
        print(""PASSED"")
        return 100.0
    elif 'add_values' not in dir(lsn16_practice1):
        print(""FAILED.  Could not find function 'add_values'"")
    elif result != solution:
        print(""FAILED.  Function 'add_values' did not return the correct value"")
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
def add_values(x, y, z):
    return x + y + z
",completed,100.0,"PASSED
Unit Test Returned: 100.0
"
94,104,lsn15_skill2,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a python program that creates a file called ""output.txt"" and prints a
message of your choosing.

**HINTS:  
** Look at the quick reference guide!


","from cs110 import autograder
import random, math, os

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0.0
    
    # Deletes Result.txt if it already exists
    if (os.path.exists(""output.txt"")):
        os.remove(""output.txt"")
    
    output, error_message = autograder.run_script(""lsn15_skill2.py"", [])
    
    if (os.path.exists(""output.txt"")):
        print(""File Found!"")
        score += 50
        file = open(""output.txt"", ""r"")
        file_contents = file.read()
        if (len(file_contents) > 0):
            print(""File has Something in it!"")
            score += 50
        else:
            print(""output.txt appears to be empty.  Did you forget to close the file or write to it?"")
    else:
        print(""File output.txt does not appear to exist"")
    
    return score
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,,"
with open(""output.txt"", ""w"") as file:
    file.write(""Hello world!"")
",completed,100.0,"File Found!
File has Something in it!
Unit Test Returned: 100.0
"
95,105,lsn15_skill1,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a file called sample.txt. Write a python
program that opens this file and prints all of its contents as a single
string.



**HINTS:  
** Look at the quick reference guide!




","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    expected_output = ""Lorem ipsum dolor sit amet, qui at luptatum efficiantur, ne autem offendit expetendis mel. Nec augue assentior ea, ne debet virtute mel. Integre vivendo id usu, ne primis repudiandae ullamcorper cum. Harum prompta appellantur vix ut. Ius voluptatibus definitiones te, eius scribentur referrentur mei at. Suas tota velit in usu, ex has complectitur signiferumque, sale lorem dolore ei ius. Perpetua scriptorem mei ex, ex est illum summo consul.""
    
    output, error_message = autograder.run_script(""lsn15_skill1.py"", [])
        
    lines = output.strip().split('\n')
    expected_lines = expected_output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_lines)
    
    if num_matches == len(lines):
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT"")
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,,"
file = open(""sample.txt"", ""r"")
contents = file.read()
print(contents)
file.close()
",completed,0.0,"INCORRECT
Unit Test Returned: 0.0
"
96,107,lsn15_echo,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

Write a program that asks the user to type the name of a file (e.g.,
""file.txt""), and a letter. Your program should then open the file, and print
out all of the lines where the first character starts with the letter

For example, if the user types the following filename:

    
    
    input1.txt
    a
    

and the contents of input1.txt are:

    
    
    aspiration
    classified
    federation
    

the output should be:

    
    
    aspiration
    



Notes:

  * Each line ends with the '\n' character. Use `split()` to get each line.
  * Refer to the String Functions slide to see how you can get the first character from a string


","from cs110 import autograder
import random, math

def solution(filename, letter):
    result = ''
    
    file = open(filename, ""r"")
    contents = file.read()
    lines = contents.split(""\n"")

    for line in lines:
        if line[0] == letter:
            result += line + ""\n""

    file.close()

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_letter = chr(random.randint(97, 122))
    
    output, error_message = autograder.run_script(""lsn15_echo.py"", [""file.txt"", random_letter])
    expected_output = solution(""file.txt"", random_letter)
    
    lines = output.strip().split('\n')
    expected_lines = expected_output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_lines)
    
    if num_matches == len(lines):
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT"")
        return 0.0
        

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)











",100,1,0,1,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,,"
filename = input(""Enter the name of the file: "")
letter = input(""Enter a letter: "")

with open(filename, 'r') as file:
    lines = file.readlines()
    
for line in lines:
    if line[0] == letter:
        print(line.strip())
",failed: [Errno 2] No such file or directory: 'file.txt',0.0,
97,108,lsn14_timestable,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 




**PROBLEM STATEMENT:  
** Write an algorithm that asks the user for a positive number and then
outputs the multiplication table of that number 1-10.



**EXAMPLES:**

  | Example 1 | Example 2  
---|---|---  
Inputs | 3 | 9  
Outputs |

3  
6  
9  
12  
15  
18  
21  
24  
27  
30

| 9  
18  
27  
36  
45  
54  
63  
72  
81  
90  
  



","from cs110 import autograder
import random, math

def solution(multiple):
    result = ''
    i = 1
    
    while i <= 10:
        result += str(i * multiple) + ""\n""
        i += 1
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_multiple = random.randint(1, 20)

    output, error_message = autograder.run_script(""lsn14_timestable.py"", [random_multiple])
    expected_output = solution(random_multiple)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)








",100,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
number = int(input(""Enter a positive number: ""))

for i in range(1, 11):
    print(number * i)
```

Example output for input 3:
3
6
9
12
15
18
21
24
27
30

Example output for input 9:
9
18
27
36
45
54
63
72
81
90",completed,0.0,"INCORRECT.  Expected the following:
11
22
33
44
55
66
77
88
99
110

Unit Test Returned: 0
"
98,109,lsn14_skill2,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You are trying to use a for loop to print all of the powers of 2 from 1024
(210) to 1 (20). Unfortunately, for some reason, the loop does not work.
Review the code and make the necessary corrections.


","from cs110 import autograder
import random, math

def solution():
    result = ''
    i = 10
    
    while i >= 0:
        result += str(2 ** i) + ""\n""
        i -= 1
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error_message = autograder.run_script(""lsn14_skill2.py"", [])
    expected_output = solution()
    
    lines = output.strip().split('\n')

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)









",100,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
# Initialize the counter to 10 (2^10 = 1024)
i = 10

# Loop from i down to 0
while i >= 0:
    # Calculate the power of 2 using the counter
    power_of_2 = 2 ** i
    
    # Print the power of 2
    print(power_of_2)
    
    # Decrease the counter by 1
    i -= 1
",completed,100.0,"CORRECT
Unit Test Returned: 100
"
99,110,lsn14_skill1,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a variable that asks the user for the number of
times to loop. Construct a FOR loop that loops this many times printing out a
message each time (the message can be whatever you want)


","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_multiple = random.randint(1, 10)

    output, error_message = autograder.run_script(""lsn14_skill1.py"", [random_multiple])
    
    lines = output.strip().split('\n')

    if len(lines) == random_multiple:
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Make sure your loop is repeating num_times_to_loop times"")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)








",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
# Taking input from user for number of times to loop
num_loops = int(input(""Enter the number of times to loop: ""))

# Looping num_loops times and printing a message each time
for _ in range(num_loops):
    print(""This is a message from the loop"")
```
",completed,0.0,"INCORRECT.  Make sure your loop is repeating num_times_to_loop times
Unit Test Returned: 0
"
100,111,lsn14_printchars,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** Write a Python algorithm that asks the users for two ASCII characters
(e.g., 'a', 'z'), and prints all of the characters between them (inclusive).

  * If the first character has a lower ASCII value than the second (e.g., 'a' - 'z'), print out the letters in ascending order.
  * Alternatively, if the second letter has a lower ASCII value, print out the letters in descending order.



**HINTS:**

  * Use the `ord()` function to convert a character into an integer:  
`ord('a')` returns 141  
  

  * Use the `chr()` function to convert an integer back into a character:  
`chr(142)` returns 'b'



**EXAMPLES:**

  | Example 1 | Example 2  
---|---|---  
Inputs | a  
c | f  
a  
Outputs |

a  
b  
c

| f  
e  
d  
c  
b  
a


","from cs110 import autograder
import random, math

def solution(start_char, end_char):
    result = ''
    
    start_char = ord(start_char)
    end_char = ord(end_char)
    
    if start_char < end_char:
        for i in range(start_char, end_char+1, 1):
            result += chr(i) + '\n'
    else:
        for i in range(start_char, end_char-1, -1):
            result += chr(i) + '\n'

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    print(""# ------------------------------------------"")
    print(""# Test 1:  First letter lower than second"")
    print(""# ------------------------------------------"")
    start_char = chr(random.randint(65, 85))
    end_char   = chr(random.randint(ord(start_char), 90))

    output, error_message = autograder.run_script(""lsn14_printchars.py"", [start_char, end_char])
    expected_output = solution(start_char, end_char)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT\n"")
        score += 50
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
        
    
    print(""# ------------------------------------------"")
    print(""# Test 2:  First letter higher than second"")
    print(""# ------------------------------------------"")
    start_char = chr(random.randint(85, 90))
    end_char   = chr(random.randint(65, 84))

    output, error_message = autograder.run_script(""lsn14_printchars.py"", [start_char, end_char])
    expected_output = solution(start_char, end_char)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT\n"")
        score += 50
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)









",100,1,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
first_char = input(""Enter the first character: "")
second_char = input(""Enter the second character: "")

if ord(first_char) < ord(second_char):
    for i in range(ord(first_char), ord(second_char)+1):
        print(chr(i))
else:
    for i in range(ord(first_char), ord(second_char)-1, -1):
        print(chr(i))
",completed,100.0,"# ------------------------------------------
# Test 1:  First letter lower than second
# ------------------------------------------
CORRECT

# ------------------------------------------
# Test 2:  First letter higher than second
# ------------------------------------------
CORRECT

Unit Test Returned: 100
"
101,112,lsn14_football,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** In, Python, write an algorithm that first asks the user how many football
players they wish to enter statistics for and then gets that many yearly
passing totals for each player. Output how many of those players that had more
than 5000 passing yards in a year. Also your algorithm will output the average
yardage per year as well as the minimum yardage entered, in that order. You
can assume there is at least one player's yardage to input.



**EXAMPLES:**

  | Example 1 | Example 2 | Example 3  
---|---|---|---  
**Inputs** | 6  
4924  
4442  
5117  
2700  
1990  
4399 | 5  
2305  
4209  
5100  
5109  
3800 | 4  
4200  
2709  
3757  
2976  
**Outputs** | 1  
3928.6666666666665  
1990 | 2  
4104.6  
2305 | 0  
3410.5  
2709


","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    num_entries = random.randint(1, 6)
    num_above_5000 = random.randint(0, num_entries)
    list_of_values = [num_entries]
    
    for i in range(num_entries):
        if i < num_above_5000:
            list_of_values.append(random.randint(5001, 8000))
        elif i == num_above_5000:
            list_of_values.append(5000)
        else:
            list_of_values.append(random.randint(1, 5000))
    
    average = sum(list_of_values[1:])/num_entries
    min_value = min(list_of_values[1:])
    
    output, error_message = autograder.run_script(""lsn14_football.py"", list_of_values)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if len(lines) >= 1 and autograder.equals(lines[0], num_above_5000):
        print(""Number Above 5000 Looks Good"")
        score += 33
    else:
        print(""Number Above 5000 is Incorrect (or Missing)"")
    
    if len(lines) >= 2 and autograder.equals(lines[1], average):
        print(""Average Looks Good"")
        score += 33
    else:
        print(""Average is Incorrect (or Missing)"")
    
    if len(lines) >= 3 and autograder.equals(lines[2], min_value):
        print(""Min Value Looks Good"")
        score += 34
    else:
        print(""Min Value is Incorrect (or Missing)"")
        
    return score
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,"
num_players = int(input(""How many football players do you wish to enter statistics for? ""))
passing_totals = []

for i in range(num_players):
    passing_total = int(input(""Enter yearly passing total for player {}:"".format(i+1)))
    passing_totals.append(passing_total)

count_more_than_5000 = 0
total_yardage = 0
min_yardage = passing_totals[0]

for yardage in passing_totals:
    total_yardage += yardage
    if yardage > 5000:
        count_more_than_5000 += 1
    if yardage < min_yardage:
        min_yardage = yardage

average_yardage = total_yardage / num_players

print(count_more_than_5000)
print(average_yardage)
print(min_yardage)
```
",completed,0.0,"Number Above 5000 is Incorrect (or Missing)
Average is Incorrect (or Missing)
Min Value is Incorrect (or Missing)
Unit Test Returned: 0
"
102,113,lsn14_counting,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 




**PROBLEM STATEMENT:  
** Write a Python algorithm that gets three numbers from the user, X, Y, and
Z. Then have the algorithm output all the numbers from X to Y (inclusive),
counting by Z. You may assume that Z is non-zero.



**EXAMPLES:**

  | Example 1 | Example 2 | Example 3  
---|---|---|---  
**Inputs** | 1  
5  
1 | -5  
-10  
-3 | 15  
15  
100  
**Outputs** | 1  
2  
3  
4  
5 | -5  
-8 | 15


","from cs110 import autograder
import random, math

def solution(random_start, random_end, random_increment):
    result = ''

    for i in range(random_start, random_end+1, random_increment):
        result += str(i) + ""\n""

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_start = random.randint(0, 10)
    random_end = random.randint(50, 100)
    random_increment = random.randint(2, 9)

    output, error_message = autograder.run_script(""lsn14_counting.py"", [random_start, random_end, random_increment])
    expected_output = solution(random_start, random_end, random_increment)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"INCORRECT.  Expected the following:
3
8
13
18
23
28
33
38
43
48
53
58
63
68
73
78
83
88

Unit Test Returned: 0
"
103,114,lsn14_coordinates,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a Python algorithm that prints all the coordinates in a coordinate
plane, given two corners. Your program should get four inputs from the user:

  * the starting x-coordinate,
  * the ending x-coordinate,
  * the starting y-coordinate, and
  * the ending y-coordinate.

Your program will then print out all of the coordinates in x y order
(separating coordinates with a space), listing all of the coordinates in the
x-axis before incrementing y. You may assume that the ending coordinate is
never less than the starting coordinate.  

For example, your algorithm would print out:  
1 2  
2 2  
3 2  
4 2  
5 2  
6 2  
1 3  
2 3  
3 3  
4 3  
5 3  
6 3  
. . . and so on



**HINTS:**

  * Write a loop that first prints all of the x coordinates from start to end
  * Use a nested loop to print all of the y coordinates from start to end



**EXAMPLES:**

  | **Example 1** | **Example 2**  
---|---|---  
**Inputs** | 0  
1  
0  
1 | 0  
2  
0  
1  
**Outputs** | 0 0  
1 0  
0 1  
1 1 | 0 0  
1 0  
2 0  
0 1  
1 1  
2 1  
  



","from cs110 import autograder
import random, math

def solution(start_x, end_x, start_y, end_y):
    result = ''

    for y in range(start_y, end_y+1):
        for x in range(start_x, end_x+1):
            result += str(x) + "" "" + str(y) + ""\n""

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    start_x = random.randint(-2, -1)
    end_x = random.randint(1, 2)
    start_y = random.randint(-3, -1)
    end_y = random.randint(1, 3)

    output, error_message = autograder.run_script(""lsn14_coordinates.py"", [start_x, end_x, start_y, end_y])
    expected_output = solution(start_x, end_x, start_y, end_y)
    
    lines = output.strip().split('\n')
    num_matches = autograder.compare_strings(lines, expected_output.strip().split('\n'))

    return 100 * (num_matches / len(lines))

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)










",100,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,,"
start_x = int(input(""Enter the starting x-coordinate: ""))
end_x = int(input(""Enter the ending x-coordinate: ""))
start_y = int(input(""Enter the starting y-coordinate: ""))
end_y = int(input(""Enter the ending y-coordinate: ""))

for x in range(start_x, end_x+1):
    for y in range(start_y, end_y+1):
        print(x, y)
",completed,20.0,"Unit Test Returned: 20.0
"
104,115,lsn14_class2017,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** In Python, write an algorithm that first asks the user how many cadets to
input and then gets that many cadet class years from the user. Output how many
of those cadets were in the class of 2017. You can assume there is at least
one cadet to enter.

**EXAMPLES:**

Example 1 | Example 2 | Example 3  
---|---|---  
Inputs | 4  
2014  
2016  
2017  
2017 | 5  
2015  
2017  
2014  
2014  
2017 | 4  
2014  
2016  
2014  
2014  
Outputs | 2 | 3 | 0


","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    num_entries = random.randint(1, 6)
    num_in_2017 = random.randint(0, num_entries)
    list_of_values = [num_entries]
    
    for i in range(num_entries):
        if i < num_in_2017:
            list_of_values.append(2017)
        else:
            list_of_values.append(random.randint(2018, 2024))
        
    output, error_message = autograder.run_script(""lsn14_class2017.py"", list_of_values)
    
    lines = output.strip().split('\n')

    if len(lines) >= 1 and autograder.equals(lines[0], num_in_2017):
        print(""CORRECT"")
        score += 100
    else:
        print(""Expected"", num_in_2017)
        
    return score
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,,completed,0.0,"Expected 3
Unit Test Returned: 0
"
105,116,lsn13_waittimes,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write an algorithm that lets the user input the wait times for various
rides at an amusement park (in minutes) until he/she types the value -999.
Output the shortest waiting time, followed by the number of waiting times that
are over 30 minutes.

**EXAMPLE:**

Example 1 | Example 2 | Example 3  
---|---|---  
Inputs |

90  
30  
31  
-999

|

35  
15  
90  
120  
15  
-999

|

15  
15  
10  
5  
-999  
  
Outputs | 30  
2 | 15  
3 | 5  
0


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0.0
    
    possible_tests = [[30, 45, 15, 5, 5, -999], [15, 30, 31, 29, 120, 90, -999]]
    possible_output = [[5, 1], [15, 3]]
    
    # Generates a Random Test
    random_index = random.randint(0, len(possible_tests)-1)
    random_test = possible_tests[random_index]
    expected_output = possible_output[random_index]
            
    output, error = autograder.run_script(""lsn13_waittimes.py"", random_test)
    
    lines = output.split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Min Wait Time is Correct"")
        score += 50
    else:
        print(""Min Wait Time is Incorrect.  Expected"", expected_output[0])
        
    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Number of Lines With Over 30 Minute Wait Times is Correct"")
        score += 50
    else:
        print(""Number of Lines With Over 30 Minute Wait Times is Incorrect.  Expected"", expected_output[1])
    
    return score


# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,,"
wait_times = []
over_30_count = 0
while True:
    time = int(input())
    if time == -999:
        break
    wait_times.append(time)
    if time > 30:
        over_30_count += 1

shortest_time = min(wait_times)

print(shortest_time)
print(over_30_count)
","failed: must be real number, not str",0.0,
106,117,lsn13_squadrons,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write an algorithm that asks the user for the number of squadrons to input,
and then gets each squadron's number. Output the number  
of squadrons from 1st, 2nd, 3rd, and 4th groups (one per line)

**EXAMPLE:**

Example 1 | Example 2 | Example 3  
---|---|---  
Inputs |

3  
3  
19  
24

|

4  
19  
25  
37  
40

|

2  
1  
34  
  
Outputs | 1  
1  
1  
0 | 0  
1  
1  
2 | 1  
0  
0  
1


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0.0
    
    possible_tests = [[5, 10, 20, 30, 40, 19], [8, 3, 1, 23, 37, 40, 7, 6, 25]]
    possible_output = [[1, 2, 1, 1], [4, 0, 2, 2]]
    
    # Generates a Random Test
    random_index = random.randint(0, len(possible_tests)-1)
    random_test = possible_tests[random_index]
    expected_output = possible_output[random_index]
            
    output, error = autograder.run_script(""lsn13_squadrons.py"", random_test)
    
    lines = output.split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Num in Group One is Correct"")
        score += 25
    else:
        print(""Num in Group One is Incorrect.  Expected"", expected_output[0])
        
    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Num in Group Two is Correct"")
        score += 25
    else:
        print(""Num in Group Two is Incorrect.  Expected"", expected_output[1])
    
    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):
        print(""Num in Group Three is Correct"")
        score += 25
    else:
        print(""Num in Group Three is Incorrect.  Expected"", expected_output[2])
    
    if len(lines) > 3 and autograder.equals(lines[3], expected_output[3]):
        print(""Num in Group Four is Correct"")
        score += 25
    else:
        print(""Num in Group Four is Incorrect.  Expected"", expected_output[3])
    
    return score


# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,"
def count_squadrons():
    group_1 = 0
    group_2 = 0
    group_3 = 0
    group_4 = 0
    
    num_squadrons = int(input(""Enter the number of squadrons: ""))
    for i in range(num_squadrons):
        squadron_num = int(input(f""Enter the number for squadron {i+1}: ""))
        if squadron_num % 10 == 1:
            group_1 += 1
        elif squadron_num % 10 == 2:
            group_2 += 1
        elif squadron_num % 10 == 3:
            group_3 += 1
        elif squadron_num % 10 == 4:
            group_4 += 1
    
    print(f""{group_1}\n{group_2}\n{group_3}\n{group_4}"")

count_squadrons()
","failed: must be real number, not str",0.0,
107,118,lsn13_skill2,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a WHILE loop that prints values from 0 to 10.
Modify the code so that it counts from 10 to 0.


","from cs110 import autograder
import random, math

def solution(value_to_count_to, increment):
    result = ''
    i = 10
    
    while i >= value_to_count_to:
        result += str(i) + ""\n""
        i += increment
    
    return result

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_ending_number = 0
    random_increment = -1

    output, error_message = autograder.run_script(""lsn13_skill2.py"", [])
    expected_output = solution(random_ending_number, random_increment)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)










",100,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"INCORRECT.  Expected the following:
10
9
8
7
6
5
4
3
2
1
0

Unit Test Returned: 0
"
108,119,lsn13_skill1,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You are trying to use a for loop to print all of the powers of 2 from 1024
(210) to 1 (20). Unfortunately, for some reason, the loop does not work.
Review the code and make the necessary corrections.


","from cs110 import autograder
import random, math

def solution(value_to_count_to, increment):
    result = ''
    i = 0
    
    while i <= value_to_count_to:
        result += str(i) + ""\n""
        i += increment
    
    return result

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_ending_number = 10
    random_increment = 2

    output, error_message = autograder.run_script(""lsn13_skill1.py"", [])
    expected_output = solution(random_ending_number, random_increment)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)










",100,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
# correct implementation
power = 10
for i in range(power, -1, -1):
    print(2 ** i)
",completed,0.0,"INCORRECT.  Expected the following:
0
2
4
6
8
10

Unit Test Returned: 0
"
109,120,lsn13_dvc,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** The CS110Z course director, unfortunately, was tricked into purchasing a
Disney Vacation Club timeshare. The good news about DVC is that it lets you
reserve a room at any Disney Resort for one week! The downside, however, is
that members have to pay an annual ""maintenance fee"" so that the mouse can
keep the property looking good (EVEN when Disney World was closed due to
COVID-19 . . . yay).

This year, the maintenance was $623.00. If that isn't bad enough, your course
director discovered that maintenance fees aren't fixed! On the contrary, it
accues each year at a rate of approximately 1.5%.

Write a Python function called `get_years_until` that takes a  **target
value**  as a parameter, and returns the number of years (assuming a fixed
interest rate) before the maintenance fee exceeds this value.

**Example 1**  
`get_years_until(624)` should return 1. This is because:

  * The maintenance fee will increase by $9.35 (i.e., 1.5% of 623) in a year
  * The new maintenance fee will be $623.00 + $9.35 = $632.35, which is obviously more than $624.00

**  
Example 2**  
`get_years_until(1000)` should return 32. This is because:

  * 623 * 1.015 * 1.015 * 1.015 . . . (32 times total) = $1003.23, which is obviously more than $1000.00

  
**Don't Know Where to Start?!?**  
Use a While loop to keep calculating the new maintenance fee until the value
is . . . (we'll let you figure out the rest).


","from lsn13_dvc import get_years_until
from cs110 import autograder
import random, math

NUM_SUBTESTS = 5

def soln(target_value):
    maintenance_fee = 623.00
    interest_rate = 0.015
    count = 0

    while maintenance_fee < target_value:
        count += 1
        maintenance_fee = maintenance_fee * (1 + interest_rate)
    
    return count

def test_passed():
    passed = 0
    for i in range(NUM_SUBTESTS):
        print('Running test %d of %d:' % (i+1 , NUM_SUBTESTS), end='')
        target_amount = random.randint(650, 1100)
        if autograder.equals(get_years_until(target_amount), soln(target_amount)):
            print(""  It will take "" + str(get_years_until(target_amount)) + "" years until the maintenance fee exceeds $"" + str(target_amount))
            passed += 1
        else:
            print('  get_years_until(%d) incorrectly returned %d instead of %d\n' % (target_amount, get_years_until(target_amount), soln(target_amount)))
    
    return round((100 / NUM_SUBTESTS), 1) * passed


# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


",100,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,,"
def get_years_until(target_value):
    maintenance_fee = 623.00
    years = 0
    
    while maintenance_fee <= target_value:
        years += 1
        maintenance_fee *= 1.015
    
    return years
",completed,100.0,"Running test 1 of 5:  It will take 16 years until the maintenance fee exceeds $786
Running test 2 of 5:  It will take 33 years until the maintenance fee exceeds $1008
Running test 3 of 5:  It will take 21 years until the maintenance fee exceeds $848
Running test 4 of 5:  It will take 35 years until the maintenance fee exceeds $1044
Running test 5 of 5:  It will take 31 years until the maintenance fee exceeds $984
Unit Test Returned: 100.0
"
110,121,lsn13_countby10s,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write a program whose input is two integers. Output the first integer and
subsequent increments of 10 as long as the value is less than or equal to the
second integer.

Case #1: If the input is:

    
    
    -15
    30
    

the output is:

    
    
    -15
    -5
    5
    15
    25
    

Case 2: If the second integer is less than the first as in:

    
    
    20
    5
    

the output is:

    
    
    Second integer can't be less than the first.
    

For coding simplicity, output a space after every integer, including the last.


","from cs110 import autograder
import random, math

def solution(starting_value, value_to_count_to):
    result = ''
    
    if value_to_count_to < starting_value:
        return ""Second integer can't be less than the first.""
    else:
        i = starting_value
        
        while i <= value_to_count_to:
            result += str(i) + ""\n""
            i += 10
        
        return result

def run_test(random_starting_number, random_ending_number):
    print(""#--------------------------------------------"")
    print(""# Testing"", random_starting_number, ""to"", random_ending_number)
    print(""#--------------------------------------------"")
    
    output, error_message = autograder.run_script(""lsn13_countby10s.py"", [random_starting_number, random_ending_number])
    expected_output = solution(random_starting_number, random_ending_number)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT\n"")
        return True
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
        print()
    
    return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    
    if run_test(10 * random.randint(1, 5), 60 + 10 * random.randint(1, 20)):
        score += 40
        
    if run_test(random.randint(0, 30), random.randint(31, 200)):
        score += 40
    
    if run_test(random.randint(50, 100), random.randint(0, 10)):
        score += 20
    
    
    return score

        
# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)










",100,0,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,,"
def integer_increments(first_integer, second_integer):
    if second_integer < first_integer:
        return ""Second integer can't be less than the first.""
    else:
        output = str(first_integer)
        while first_integer + 10 <= second_integer:
            first_integer += 10
            output += ' ' + str(first_integer)
        return output

first_integer = int(input())
second_integer = int(input())

print(integer_increments(first_integer, second_integer))
",completed,20.0,"#--------------------------------------------
# Testing 50 to 220
#--------------------------------------------
INCORRECT.  Expected the following:
50
60
70
80
90
100
110
120
130
140
150
160
170
180
190
200
210
220


#--------------------------------------------
# Testing 1 to 163
#--------------------------------------------
INCORRECT.  Expected the following:
1
11
21
31
41
51
61
71
81
91
101
111
121
131
141
151
161


#--------------------------------------------
# Testing 50 to 10
#--------------------------------------------
CORRECT

Unit Test Returned: 20
"
111,122,lsn13_count,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a Python program that gets 2 inputs from the user

  * a number,  **x**
  * an increment amount,  **y**

Your program will then print out all the numbers from 0 to the user-defined
value (x), counting by the increment amount (y).

**EXAMPLES:**

| Example 1 | Example 2  
---|---|---  
Inputs | 10  
2 | 14  
3  
Outputs | 0  
2  
4  
6  
8  
10 | 0  
3  
6  
9  
12


","from cs110 import autograder
import random, math

def solution(value_to_count_to, increment):
    result = ''
    i = 0
    
    while i <= value_to_count_to:
        result += str(i) + ""\n""
        i += increment
    
    return result

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_ending_number = 10 + 2 * random.randint(1, 10)
    random_increment = 2

    output, error_message = autograder.run_script(""lsn13_count.py"", [random_ending_number, random_increment])
    expected_output = solution(random_ending_number, random_increment)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':   
    result = test_passed()
    print(""Unit Test Returned:"", result)








",100,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
# Get inputs from the user
x = int(input(""Enter a number: ""))
y = int(input(""Enter an increment amount: ""))

# Print out the numbers from 0 to x, counting by y
for i in range(0, x+1, y):
    print(i)
",completed,100.0,"CORRECT
Unit Test Returned: 100
"
112,123,lsn13_cargocapacity,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write an algorithm that lets the user input the cargo capacity (in lbs) of
various transport aircraft until the user enters -1. Your program should
output the min and max cargo capacity, as well as the number of aircraft that
can carry at least 10000 lbs.

**EXAMPLE:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Inputs |

4500  
11000  
9000  
-1

|

9999  
15000  
3500  
17500  
-1

| 10000  
-1  
Outputs | 4500  
11000  
1 | 3500  
17500  
2 | 10000  
10000  
1


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0.0
    
    possible_tests = [[8000, 12000, 25000, 10000, 7500, -1], [5000, 9000, 22000, 10000, 8700, -1], [9999, 5000, 3000, -1]]
    possible_output = [[7500, 25000, 3], [5000, 22000, 2], [3000, 9999, 0]]
    
    # Generates a Random Test
    random_index = random.randint(0, len(possible_tests)-1)
    random_test = possible_tests[random_index]
    expected_output = possible_output[random_index]
            
    output, error = autograder.run_script(""lsn13_cargocapacity.py"", random_test)
    
    lines = output.split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Min Value is Correct"")
        score += 30
    else:
        print(""Min Value is Incorrect.  Expected"", expected_output[0])
    
    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Max Value is Correct"")
        score += 30
    else:
        print(""Max Value is Incorrect.  Expected"", expected_output[1])
        
    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):
        print(""Number of Aircraft with At Least 10000 lbs is Correct"")
        score += 40
    else:
        print(""Number of Aircraft with At Least 10000 lbs is Incorrect.  Expected"", expected_output[2])
    
    return score


# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,,,completed,0.0,"Min Value is Incorrect.  Expected 5000
Max Value is Incorrect.  Expected 22000
Number of Aircraft with At Least 10000 lbs is Incorrect.  Expected 2
Unit Test Returned: 0.0
"
113,124,lsn13_averagerun,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** In, Python, write an algorithm that first asks the user how many PFT run
times to input and then gets that many values from the user. Output the
average of all the run times. You can assume there is at least one run time to
input.

**EXAMPLE:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Inputs | 6  
98  
75  
88  
82  
94  
100 | 5  
99  
83  
79  
86  
87 | 4  
88  
82  
80  
90  
Outputs | 89.5 | 86.8 | 85


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 5
    num_tests_passed = 0

    for i in range(NUM_TESTS):
        print(""Running Test "" + str(i) + "":"")
        
        num_inputs = random.randint(2, 11)
        inputs = [num_inputs]
        sum = 0
        
        for j in range(num_inputs):
            value = random.randint(70, 130)
            sum += value
            inputs.append(value)
               
        avg = sum / (len(inputs) - 1)   
               
        # Runs the Script
        output, error_message = autograder.run_script(""lsn13_averagerun.py"", inputs)
        
        # Extracts the Output
        lines = output.split(""\n"")
        
        if (len(lines) > 0):            
            if (autograder.equals(lines[0], avg)):
                print(""CORRECT\n"")
                num_tests_passed += 1
            else:
                print(""INCORRECT.  Expected: "" + str(avg) + ""\n"")

    # Result
    return (100 / NUM_TESTS) * num_tests_passed
            

# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,,completed,0.0,"Running Test 0:
INCORRECT.  Expected: 99.0

Running Test 1:
INCORRECT.  Expected: 103.83333333333333

Running Test 2:
INCORRECT.  Expected: 97.57142857142857

Running Test 3:
INCORRECT.  Expected: 99.6

Running Test 4:
INCORRECT.  Expected: 98.5

Unit Test Returned: 0.0
"
114,125,lsn12_skill2,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a function called `fahrenheit_to_kelvin()`. Your function should take
a temperature (in Fahrenheit) as a parameter, and RETURN (NOT PRINT) the
equivalent temperature in Kelvin.

**NOTE:  
** The formula for converting between Fahrenheit and Kelvin is

**K = ((F - 32) / 1.8) + 273.15**


","from cs110 import autograder
import random, math
from lsn12_skill2 import *

def solution(temp_in_f):
    temp_in_k = ((temp_in_f - 32) / 1.8) + 273.15
    return temp_in_k

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    print(""Feedback:"")
    print(""Looking for a function called fahrenheit_to_kelvin . . ."", end="""")
    
    if ""fahrenheit_to_kelvin"" in globals():
        print(""FOUND!"")
        score += 50
    else:
        print(""NOT FOUND"")
    
    random_temp = round(random.uniform(0, 100), 1)
    
    print(""Testing function when temperature ="", random_temp, ""F . . . "", end="""")
    if ""fahrenheit_to_kelvin"" in globals() and fahrenheit_to_kelvin(random_temp) == solution(random_temp):
        print(""CORRECT!"")
        score += 50
    elif ""fahrenheit_to_kelvin"" in globals() and fahrenheit_to_kelvin(random_temp) != solution(random_temp):
        print(""INCORRECT.  Expected"", solution(random_temp), ""instead of"", fahrenheit_to_kelvin(random_temp))
    else:
        print(""Could not evaluate the function's returned value because the function does not exist"")
        
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)








",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
def fahrenheit_to_kelvin(temperature):
    k = ((temperature - 32) / 1.8) + 273.15
    return k
",completed,100.0,"Feedback:
Looking for a function called fahrenheit_to_kelvin . . .FOUND!
Testing function when temperature = 35.3 F . . . CORRECT!
Unit Test Returned: 100
"
115,126,lsn12_skill1,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with a function called get_fuel_consumption() that
takes a distance in kilometers as a parameter, and calculates the fuel
consumed (in gallons) by a 747 aircraft to travel this distance.

Call this function to determine how much fuel is consumed by a 747 when
traveling 1500 kilometers. Store the returned result in a variable called
fuel_consumed

Remember, ""Calling a function"" simply means typing in the name of the function
(and providing it with any parameters that it needs--in this case, there are
no parameters since there is nothing in the parenthesis).


","from cs110 import autograder
import random, math
from lsn12_skill1 import *

def get_fuel_consumption(distance_in_kilometers):
    distance_in_miles = distance_in_kilometers * 0.621
    return 5 * distance_in_miles

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    file = open(""lsn12_skill1.py"", ""r"")
    file_contents = file.read()
    num_calls_function1 = file_contents.count(""get_fuel_consumption(1500"")
    num_calls_function2 = file_contents.count(""get_fuel_consumption( 1500"")
    num_calls_function3 = file_contents.count(""get_fuel_consumption (1500"")
    num_calls_function4 = file_contents.count(""get_fuel_consumption ( 1500"")
    num_calls = num_calls_function1 + num_calls_function2 + num_calls_function3 + num_calls_function4

    output, error_message = autograder.run_script(""lsn12_skill1.py"", [])
    
    if num_calls >= 1:
        print(""get_fuel_consumption called successfully"")
        score += 33
    else:
        print(""get_fuel_consumption was not called successfully"")
    
    if ""fuel_consumed"" in globals():
        print(""fuel_consumed variable successfully created"")
        score += 33
    else:
        print(""Did not find a variable called fuel_consumed"")
        
    if ""fuel_consumed"" in globals() and fuel_consumed == get_fuel_consumption(1500):
        print(""fuel_consumed contains the correct value"")
        score += 34
    elif ""fuel_consumed"" in globals() and fuel_consumed != get_fuel_consumption(1500):
        print(""fuel_consumed contains"", fuel_consumed, ""instead of"", get_fuel_consumption(1500))
    else:
        print(""Cannot check the value of fuel_consumed because it does not exist"")
        
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)








",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def get_fuel_consumption(distance):
    # fuel consumption calculation
    return distance * 0.2

fuel_consumed = get_fuel_consumption(1500)
print(fuel_consumed)
",completed,66.0,"300.0
get_fuel_consumption called successfully
fuel_consumed variable successfully created
fuel_consumed contains 300.0 instead of 4657.5
Unit Test Returned: 66
"
116,127,lsn12_in_circle,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a function that determines if a point is within a circle. You will
name your function `in_circle()`. It has five parameters:

  1. The coordinates of the point that is to be tested (x, y)
  2. The center of a circle (cir_x, cir_y)
  3. The radius of the circle (radius)

 The `in_circle()` function will return **True** if the point is on or inside
the circle, and **False** otherwise.

**IMPORTANT:  
** You are encouraged to write code to test your function. However, when you
test against the server, only include the code for the function itself (you
can comment out your test code).


","import lsn12_in_circle
from cs110 import autograder
import random, math

NUM_SUBTESTS = 5
   
def soln(x, y, cir_x, cir_y, radius):
    distance = math.sqrt((cir_x - x)**2 + (cir_y - y)**2)
    return distance <= radius

def test_passed():
    
    passed = 0
    for i in range(NUM_SUBTESTS):
        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')
        if i == 0:
            x = 6.04
            y = 2.43
            cir_x = 43.4
            cir_y = 52.2
            radius = 74.1
        else:
            x = random.random() * 10.0
            y = random.random() * 10.0
            cir_x = random.random() * 100.0
            cir_y = random.random() * 100.0
            radius = random.random() * 100.0
        #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))
        if lsn12_in_circle.in_circle(x, y, cir_x, cir_y, radius) == soln(x, y, cir_x, cir_y, radius):
            print(""CORRECT!"")
            passed += 1
        else:
            print('INCORRECT:  in_circle(%f, %f, %f, %f, %f) incorrectly returned %s' % (x, y, cir_x, cir_y, radius, lsn12_in_circle.in_circle(x, y, cir_x, cir_y, radius)))
    
    return (100 / NUM_SUBTESTS) * passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
def in_circle(x, y, cir_x, cir_y, radius):
    distance_squared = (x - cir_x)**2 + (y - cir_y)**2
    if distance_squared <= radius**2:
        return True
    else:
        return False

# test cases
print(in_circle(0, 0, 0, 0, 5))  # True
print(in_circle(3, 4, 0, 0, 5))  # True
print(in_circle(6, 6, 0, 0, 5))  # False
```
","failed: invalid syntax (lsn12_in_circle.py, line 13)",0.0,
117,128,lsn12_distance,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a function that computes the distance between two points. You will
name your function `dist_points`. It has four parameters, the cordinates of
the two points as `x1, y1, x2, y2`. The `dist_points()` function will return
the distance between the two points as a floating point number.

**IMPORTANT:  
** You are encouraged to write code to test your function. However, when you
test against the server, only include the code for the function itself (you
can comment out your test code).


","from lsn12_distance import dist_points
from cs110 import autograder
import random, math

NUM_SUBTESTS = 5

def soln(x1, y1, x2, y2):
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)

def test_passed():
    
    passed = 0
    
    print(""Feedback:"")
    
    for i in range(NUM_SUBTESTS):
        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')
        x1 = round(random.uniform(-10, 10), 1)
        y1 = round(random.uniform(-10, 10), 1)
        x2 = round(random.uniform(-10, 10), 1)
        y2 = round(random.uniform(-10, 10), 1)
        if autograder.equals(dist_points(x1, y1, x2, y2), soln(x1, y1, x2, y2)):
            print(""PASSED!"")
            passed += 1
        else:
            print('FAILED: dist_point(%1.1f, %1.1f, %1.1f, %1.1f) incorrectly returned' % (x1, y1, x2, y2), dist_points(x1, y1, x2, y2))
    
    return round(100 / NUM_SUBTESTS, 1) * passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

def dist_points(x1, y1, x2, y2):
    distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
    return distance
",completed,100.0,"Feedback:
Running sub test 1 of 5: PASSED!
Running sub test 2 of 5: PASSED!
Running sub test 3 of 5: PASSED!
Running sub test 4 of 5: PASSED!
Running sub test 5 of 5: PASSED!
Unit Test Returned: 100.0
"
118,129,lsn12_circle,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a function that computes the area of a circle. You will name your
function `area_circle`. It has one parameter, the radius of the circle,
`radius`. The `area_circle()` function will return the area of the circle.

**IMPORTANT:  
** You are encouraged to write code to test your function. However, when you
test against the server, only include the code for the function itself (you
can comment out your test code).


","import lsn12_circle
from cs110 import autograder
import random, math

NUM_SUBTESTS = 5

# Helper method to see if a numeric value is within a specified delta
def soln(radius):
    return math.pi * radius * radius

def test_passed():
    
    passed = 0
    
    print(""Feedback:"")
    
    for i in range(NUM_SUBTESTS):
        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')
        radius = random.random() * 100.0
        if autograder.equals(lsn12_circle.area_circle(radius), soln(radius)):
            print(""CORRECT!"")
            passed += 1
        else:
            print('area_circle(%d) incorrectly returned' % (radius), lsn12_circle.area_circle(radius))
        
    return round(100 / NUM_SUBTESTS, 1) * passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

def area_circle(radius):
    return math.pi * (radius ** 2)
",completed,100.0,"Feedback:
Running sub test 1 of 5: CORRECT!
Running sub test 2 of 5: CORRECT!
Running sub test 3 of 5: CORRECT!
Running sub test 4 of 5: CORRECT!
Running sub test 5 of 5: CORRECT!
Unit Test Returned: 100.0
"
119,130,lsn12_asteroids,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

""Asteroids"" was an arcade game created in 1979 by Atari, Inc. In the game, the
player is given control of a spaceship that has the ability to shoot bullets.
The player is then placed in a field of floating rocks, and is tasked with
destroying them without running into them.

In this lab, you will write a ""collision detection"" function that will be used
by the game to determine if the player's ship has hit a rock. To make this
simple, assume that an imaginary circle extends from the center of the
asteroid and the player's ship (see below image). If the two circles ever
overlap one another, then a collision has occurred. (NOTE: There are more
accurate ways to detect a collision. [Click here if you want to learn more
(Links to an external site.)](https://bell0bytes.eu/basic-collision-
detection/)).

![](https://bell0bytes.eu/content/images/2019/03/spaceShipAsteroid.png)

Your function, which you will name `detect_collision()` should have six
parameters: the (x, y) coordinates of the center of player's ship, the ship's
radius, the (x, y) coordinates of the center of an asteroid, and the
asteroid's radius. Your function will return `True` if the player's ship has
hit the asteroid, and `False` otherwise.

**HINT: _  
_** _You may want to copy and paste the_  `dist_points`  _function you created
earlier. It's almost as if we are trying to demonstrate the importance of
reusable functions . . ._

**IMPORTANT:  
** You are encouraged to write code to test your function. However, when you
test against the server, only include the code for the function itself (you
can comment out your test code).


","from cs110 import autograder
import random, math
import lsn12_asteroids 

def soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):
    distance = math.sqrt((ship_x - asteroid_x)**2 + (ship_y - asteroid_y)**2)
    return distance < asteroid_r + ship_r

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 4
    num_tests_passed = 0
    
    print(""Feedback:"")
    score = 0
        
    if ""dist_points"" in dir(lsn12_asteroids):
        score += 20
        print(""dist_points function found"")
    else:
        print(""dist_points function not being utilized.  Don't reinvent the wheel!"")
        #score += 20
        
    for i in range(NUM_TESTS):
        print('Running test %d of %d: ' % (i+1 , NUM_TESTS), end='')
        
        if i == 0:
            ship_x = 2.3
            ship_y = 0.2
            ship_r = 3
            asteroid_x = -4
            asteroid_y = 3.4
            asteroid_r = 6
        else:
            ship_x = round(random.uniform(-50, 50), 1)
            ship_y = round(random.uniform(-50, 50), 1)
            ship_r = 3
            asteroid_x = round(random.uniform(-50, 50), 1)
            asteroid_y = round(random.uniform(-50, 50), 1)
            asteroid_r = 6
        
        #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))
        if lsn12_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r) == soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):
            print(""CORRECT"")
            score += 20
        else:
            print('detect_collision(%f, %f, %f, %f, %f, %f) incorrectly returned %s' % (ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r, lsn12_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r)))
    
    return score
            
            
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

def detect_collision(ship_x, ship_y, ship_radius, asteroid_x, asteroid_y, asteroid_radius):
    distance = math.sqrt((ship_x - asteroid_x) ** 2 + (ship_y - asteroid_y) ** 2)
    if distance <= (ship_radius + asteroid_radius):
        return True
    else:
        return False
",completed,80.0,"Feedback:
dist_points function not being utilized.  Don't reinvent the wheel!
Running test 1 of 4: CORRECT
Running test 2 of 4: CORRECT
Running test 3 of 4: CORRECT
Running test 4 of 4: CORRECT
Unit Test Returned: 80
"
120,131,lsn11_triangle,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a function that computes the area of a triangle. You will name your
function `area_triangle()`. It has two parameters, the height of the triangle,
`height`, and the length of the base, `base`. The `area_triangle()` function
will print the area of the triangle.

**IMPORTANT:  
** You are encouraged to write code to test your function. However, when you
submit to the server for grading, only the function will be tested.


","from cs110 import autograder
import random, math
import lsn11_triangle

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    base = round(random.uniform(1.0, 10.0), 1)
    height = round(random.uniform(1.0, 10.0), 1)
    output, error_message = autograder.run_script(""lsn11_triangle.py"", [base, height])
    
    area = (base * height) / 2.0
    score = 0
    
    if ""area_triangle"" in dir(lsn11_triangle):
        print(""Function Correctly Defined"")
        score += 50
    else:
        print(""Function does not exist.  Check to make sure the name matches the prompt"")
    
    if autograder.equals(output, area):
        print(""Function produces correct output"")
        score += 50
    else:
        print(""Function produces incorrect output. Expected:"", area)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def area_triangle(height, base):
    area = (height * base) / 2
    print(area)

area_triangle(5, 10)
","failed: must be real number, not str",0.0,
121,132,lsn11_skill3,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Define a function called `print_hello()`. Your function should, when
called, simply print out a message of your choosing that would be a greeting
to someone.

**IMPORTANT NOTE:**  
Functions only run when a program calls them. For the purposes of this
exercise, you do not need to call the function. If you don't, however, nothing
will appear on the screen when you run it in Thonny.


","from cs110 import autograder
import random, math
import lsn11_skill3

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""lsn11_skill3.py"", [])
    score = 0
    
    if ""print_hello"" in dir(lsn11_skill3):
        print(""Function found!"")
        score += 50
        
        if len(output) > 0:
            print(""Output Found!"")
            score += 50
        else:
            print(""Function does not appear to be printing out anything"")
    else:
        print(""Function does not appear to be defined.  Check the name and make sure it matches the prompt"")
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def print_hello():
    print(""Hello there!"")

print_hello()
",completed,100.0,"Hello there!
Function found!
Output Found!
Unit Test Returned: 100
"
122,133,lsn11_skill2,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a function called `draw_multiple_trees()` that
outputs a tree using ASCII art. Unlike the previous problem, this function
accepts a parameter that tells it how many trees to draw.

Write a program that:

  1. Gets an integer from the user and stores it in a variable. You can name this variable whatever you want.
  2. Call the function, and passes the variable to it. 

Remember that ""passing a value"" to a function simply means putting the number
inside the parenthesis when you call it.


","from cs110 import autograder
import random, math

# The Actual Solution
def draw_tree(num_times):
    result = """"
    for i in range(num_times):
        result += ""  *  \n""
        result += "" *** \n""
        result += ""*****\n""
        result += ""  |  \n""
    return result;


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    num_passed = 0
    num_tests = 3
    
    for i in range(num_tests):
        print(""-------------------------------------------"")
        print(""Test"", i+1)
        print(""-------------------------------------------"")
        num_trees = random.randint(0, 5)
        output, error_message = autograder.run_script(""lsn11_skill2.py"", [num_trees])
        expected_output = draw_tree(num_trees)
        
        if output == expected_output:
            print(""Good Job!\n"")
            num_passed += 1
        else:
            print(""Incorrect Output. Expected the following:"")
            print(expected_output, ""\n"")
    
    return round((100 / num_tests) * num_passed, 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def draw_multiple_trees(num_trees):
    for i in range(num_trees):
        print(""   /\\"")
        print(""  /  \\"")
        print("" /    \\"")
        print(""/______\\"")
        print(""   ||"")
        print()
        
num_trees = int(input(""Enter the number of trees to draw: ""))
draw_multiple_trees(num_trees)
",completed,0.0,"-------------------------------------------
Test 1
-------------------------------------------
Incorrect Output. Expected the following:
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
 

-------------------------------------------
Test 2
-------------------------------------------
Incorrect Output. Expected the following:
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
 

-------------------------------------------
Test 3
-------------------------------------------
Incorrect Output. Expected the following:
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
 

Unit Test Returned: 0.0
"
123,134,lsn11_skill1,2,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a function called `draw_tree()` that prints a
tree using ASCII art:

    
    
     *  
     ***  
    *****  
     |

Call this function


","from cs110 import autograder
import random, math

# The Actual Solution
def draw_tree():
    result =  ""  *  \n""
    result += "" *** \n""
    result += ""*****\n""
    result += ""  |  \n""
    return result;


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error_message = autograder.run_script(""lsn11_skill1.py"", [])
    
    expected_output = draw_tree() + draw_tree () + draw_tree()
    
    if output == expected_output:
        print(""Good Job!"")
        return 100
    else:
        print(""Incorrect Output. Expected the following:"")
        print(expected_output)
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def draw_tree():
    print(""    *"")
    print(""   ***"")
    print(""  *****"")
    print(""    |"")

draw_tree()
",completed,0.0,"Incorrect Output. Expected the following:
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  

Unit Test Returned: 0
"
124,135,lsn11_imagesize,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
PROBLEM STATEMENT:  
Write a function that computes the size of an uncompressed image. You will
name your function calculate_size_of_image(), and it will have three
parameters: the width of the image, the height of the image, and the bit depth
(i.e., # of bits per pixel).

The function should print the size of the image in kilobytes.


","from cs110 import autograder
import lsn11_imagesize, random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    base = random.randint(1024, 1980)
    height = random.randint(1024, 1980)
    bd = 2**random.randint(3, 7)
    output, error_message = autograder.run_script(""lsn11_imagesize.py"", [base, height, bd])
    
    filesize = (base * height * bd) / 8 / 1024
    score = 0
    
    if ""calculate_size_of_image"" in dir(lsn11_imagesize):
        print(""Function Correctly Defined"")
        score += 50
    else:
        print(""Function does not exist.  Check to make sure the name matches the prompt"")
    
    if autograder.equals(output, filesize):
        print(""Function produces correct output"")
        score += 50
    else:
        print(""Function produces incorrect output. Expected:"", filesize)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def calculate_size_of_image(width, height, bit_depth):
    size = (width * height * bit_depth) / 8
    print(f""The size of the image is {size} kilobytes."")

# Example usage
calculate_size_of_image(1920, 1080, 24)
",completed,50.0,"The size of the image is 6220800.0 kilobytes.
Function Correctly Defined
Function produces incorrect output. Expected: 8471.91015625
Unit Test Returned: 50
"
125,136,lsn11_callme,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with three functions. Open the template file, and
perform the following tasks: **  
**

  * **Task 1:** Ask the user to enter a width and height. Do **NOT** assume they are whole numbers. Call area_rectangle and give it the user values
  * **Task 2:** Ask the user to enter a string. Call print_backwards and give it the user value
  * **Task 3:** You have been provided with a variable called my_number. Call positive_or_negative and give it the variable


","from cs110 import autograder
import random, math

# This function takes a string and prints it backwards
def get_reverse(s):
    result = ''
    for i in range(len(s)-1, -1, -1):
        result += s[i]
    return result

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    base = round(random.uniform(1.0, 100.0), 1)
    height = round(random.uniform(1.0, 100.0), 1)

    string_list = ['abcde', 'defgh', 'xzy', 'abba']
    test_string = string_list[random.randint(0, len(string_list)-1)]

    file = open(""lsn11_callme.py"", ""r"")
    file_contents = file.read()
    num_calls_area_rectangle = file_contents.count(""area_rectangle"")
    num_calls_print_backwards = file_contents.count(""print_backwards"")
    num_calls_positive = file_contents.count(""positive_or_negative"")

    output, error_message = autograder.run_script(""lsn11_callme.py"", [base, height, test_string])
    
    area = (base * height)
    score = 0
    
    lines = output.split(""\n"")
    
    if autograder.equals(lines[0], area) and num_calls_area_rectangle > 1:
        print(""area_rectangle called successfully"")
        score += 33
    else:
        print(""area_rectangle was not called successfully"")
    
    if len(lines) > 1 and lines[1].strip() == get_reverse(test_string) and num_calls_print_backwards > 1:
        print(""print_backwards called successfully"")
        score += 33
    else:
        print(""print_backwards was not called successfully"")
    
    if len(lines) > 2 and lines[2].strip() == ""Positive"" and num_calls_positive > 1:
        print(""positive_or_negative called successfully"")
        score += 34
    else:
        print(""positive_or_negative was not called successfully"")
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def area_rectangle(width, height):
    return width * height

def print_backwards(string):
    return string[::-1]

def positive_or_negative(number):
    if number > 0:
        return ""The number is positive""
    elif number < 0:
        return ""The number is negative""
    else:
        return ""The number is zero""

# Task 1
width = float(input(""Enter the width: ""))
height = float(input(""Enter the height: ""))
rectangle_area = area_rectangle(width, height)
print(""The area of the rectangle is:"", rectangle_area)

# Task 2
string = input(""Enter a string: "")
backward_string = print_backwards(string)
print(""The string backwards is:"", backward_string)

# Task 3
my_number = -5
number_type = positive_or_negative(my_number)
print(number_type)
```
",completed,0.0,"area_rectangle was not called successfully
print_backwards was not called successfully
positive_or_negative was not called successfully
Unit Test Returned: 0
"
126,137,lsn1_helloworld,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
  1. Download the template file below and save it somewhere you will remember.  Do not rename the file!  
  

  2. Open the file in Thonny.  You should be able to double click on it.  
  

  3. Press the play button.  It looks like a Green button  
  
  

  4. You will see the following prompt in the Console.  Type 'y' (without the quotes) and press ENTER.  
  
  

  5. The test program will automatically run and print a result.  If you see the following, you are good to go.  Otherwise, contact your instructor:  


","import sys, subprocess, random
from cs110 import autograder

# ---------------------------------------------------------------------
# Hello World Unit Test
# ---------------------------------------------------------------------

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn1_helloworld.py"", [])
    
    # Checks to See if the Program Passed the Test
    if output.strip() == ""Hello World"":
        print(""SUCCESS!"")
        return 100.0
    else:
        print(""Try Again.  Just have it print the words 'Hello World'!"")
        return 0.0
    
    
# Testbench (to be run in an IDE)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"I'm sorry, but without the template file or the problem statement, I am unable to provide a code solution. Please provide the necessary information or file and I will be happy to help you with your query.",completed,0.0,"Try Again.  Just have it print the words 'Hello World'!
Unit Test Returned: 0.0
"
127,140,a4_7_fit_u,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 




**PROBLEM STATEMENT:  
**

You have been provided with a dataset called `afpft_v2.csv` that describes how
various Air Force personnel performed on their most recent fitness test. Do
NOT ask the user for the file name--just open and read this specific file.
Here is a typical line from the dataset (each line ends with the newline ""\n""
character):



`38, 52, 29, 568`



Each position in the line (separated by a comma) represents a different ""data
element,"" or ""column."" The following table shows how the above line can be
interpreted:  
  

  | Sit Ups  
(Reps) | Push Ups  
(Reps) | Waist  
(inches) | 1.5 Mile Run Time  
(seconds)  
---|---|---|---|---  
Value | 45 | 65 | 32 | 630  
  


**Write a Python program that analyzes this file and prints the # of
_unsatisfactory_ (less than 75) scores. **



To assist you, we have provided you with a module called `fitness_calculator`
that contains four functions:

  * calculate_waist_score
  * calculate_pushup_score
  * calculate_situp_score
  * calculate_run_score



Each function takes a single number as a parameter, and **returns** the score
for that category. For example, to get the score for an Airman who did 45
pushups, you could import the module and call it, as follows:

    
    
    pushup_score = fitness_calculator.calculate_pushup_score(45)



To get a single Airman's total score, simply calculate the score for each
category and add them up.

    
    
    score = waist_score + pushup_score + situp_score + run_score



**EXAMPLES:**

If, for example, the number of unsatisfactory scores is 10, your program
should print:

    
    
    **10**

*** Your answer will be different.**


","from cs110 import autograder
import random, math

filename = ""a4_7_fit_u.py""
expected_output = [""39""]

# Function checks for known shortcuts
def shortcut_detected():
    file = open(filename, ""r"")
    contents = file.read()
    file.close()

    # Looks for a short
    if ""print('39')"" in contents or 'print(""39"")' in contents or 'print(39)' in contents:
        print(""WARNING:  You cannot just print out the answer."")
        return True
    
    return False

# Unit Test Function
def test_passed():    
    output, error = autograder.run_script(filename, [])
    lines = output.strip().split('\n')
    
    if shortcut_detected() == True:
        print(""Invalid Code Detected.  Contact your instructor."")
    elif len(lines) == 1:
        if autograder.equals(lines[0], expected_output[0]):
            print(""Count of Unsatisfactory scores is Correct"")
            return 100.0
        else:
            print(""Count of Unsatisfactory scores is Incorrect"")
    else:
        print(""Missing Output (or too many lines)"")

    return 0.0

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,,"
import csv
import fitness_calculator

def count_unsatisfactory_scores(filename):
    unsatisfactory_count = 0
    
    with open(filename, 'r') as file:
        reader = csv.reader(file)
        
        for row in reader:
            situps = int(row[0])
            pushups = int(row[1])
            waist = int(row[2])
            run_time = int(row[3])
            
            situp_score = fitness_calculator.calculate_situp_score(situps)
            pushup_score = fitness_calculator.calculate_pushup_score(pushups)
            waist_score = fitness_calculator.calculate_waist_score(waist)
            run_score = fitness_calculator.calculate_run_score(run_time)
            
            total_score = situp_score + pushup_score + waist_score + run_score
            
            if total_score < 75:
                unsatisfactory_count += 1
    
    return unsatisfactory_count

filename = 'afpft_v2.csv'
unsatisfactory_scores = count_unsatisfactory_scores(filename)
print(unsatisfactory_scores)
",completed,0.0,"Count of Unsatisfactory scores is Incorrect
Unit Test Returned: 0.0
"
128,141,a4_7_fit_e,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with a dataset called `afpft_v1.csv` that describes how
various Air Force personnel performed on their most recent fitness test. Do
NOT ask the user for the file name--just open and read this specific file.
Here is a typical line from the dataset (each line ends with the newline ""\n""
character):



`38, 52, 29, 568`



Each position in the line (separated by a comma) represents a different ""data
element,"" or ""column."" The following table shows how the above line can be
interpreted:  
  

  | Waist  
(inches) | Push Ups  
(Reps) | Sit Ups  
(Reps) | 1.5 Mile Run Time  
(seconds)  
---|---|---|---|---  
Value | 38 | 52 | 29 | 568  
  


**Write a Python program that analyzes this file and prints the # of excellent
(90 or higher) scores.**



To assist you, we have provided you with a module called `fitness_calculator`
that contains four functions:

  * calculate_waist_score
  * calculate_pushup_score
  * calculate_situp_score
  * calculate_run_score



Each function takes a single number as a parameter, and **returns** the score
for that category. For example, to get the score for an Airman who did 45
pushups, you could import the module and call it, as follows:

    
    
    pushup_score = fitness_calculator.calculate_pushup_score(45)



To get a single Airman's total score, simply calculate the score for each
category and add them up.

    
    
    score = waist_score + pushup_score + situp_score + run_score



**EXAMPLES:**

If, for example, the number of excellent scores is 4, your program should
print:

    
    
    **4  
    **

*** Your answers will be different.**


","from cs110 import autograder
import random, math

filename = ""a4_7_fit_e.py""
expected_output = [""9""]

# Function checks for known shortcuts
def shortcut_detected():
    file = open(filename, ""r"")
    contents = file.read()
    file.close()

    # Looks for a short
    if ""print('9')"" in contents or 'print(""9"")' in contents or 'print(9)' in contents:
        print(""WARNING:  You cannot just print out the answer."")
        return True
    
    return False

# Unit Test Function
def test_passed():    
    output, error = autograder.run_script(filename, [])
    lines = output.strip().split('\n')
    
    if shortcut_detected() == True:
        print(""Invalid Code Detected.  Contact your instructor."")
    elif len(lines) == 1:
        if autograder.equals(lines[0], expected_output[0]):
            print(""# of Excellents is Correct"")
            return 100.0
        else:
            print(""# of Excellents is Incorrect"")
    else:
        print(""Missing Output (or too many lines)"")
    
    return 0.0
    
# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,,"
import csv
from fitness_calculator import calculate_waist_score, calculate_pushup_score, calculate_situp_score, calculate_run_score

# Open and read the dataset file
with open('afpft_v1.csv', 'r') as file:
    reader = csv.reader(file)
    
    # Initialize counter for excellent scores
    excellent_count = 0
    
    # Iterate over each line in the dataset
    for line in reader:
        # Extract the data elements for waist, push ups, sit ups, and 1.5 mile run time
        waist = int(line[0].strip())
        pushups = int(line[1].strip())
        situps = int(line[2].strip())
        run_time = int(line[3].strip())
        
        # Calculate the score for each category
        waist_score = calculate_waist_score(waist)
        pushup_score = calculate_pushup_score(pushups)
        situp_score = calculate_situp_score(situps)
        run_score = calculate_run_score(run_time)
        
        # Calculate the total score
        total_score = waist_score + pushup_score + situp_score + run_score
        
        # Check if the total score is excellent (90 or higher)
        if total_score >= 90:
            excellent_count += 1
    
    # Print the number of excellent scores
    print(excellent_count)
```
",completed,0.0,"# of Excellents is Incorrect
Unit Test Returned: 0.0
"
129,142,a4_6_scores,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:**

You have been asked to write a program to assess student's performance on a
recent test. Write a Python program that asks the user to repeatedly type in
the name of a cadet, followed by their test score (between 0 and 100) until
the user types the word ""DONE"". Your program then analyze the values and
print:

  * The highest overall test score (just score, not the name)
  * The names of all cadets who scored within 10 points of the highest score. 
    * Comparison to the target score should be exclusive.
    * The names should be output in the same order of input.



**EXAMPLES:**

  | **Example 1**  
---|---  
**Input(s)** | Paul  
95  
Andrew  
86  
Joel  
57  
DONE  
**Output(s)** | 95  
Paul  
Andrew


","from cs110 import autograder
import random, math
from itertools import combinations

random_names = [""Marvel"", ""Bucky"", ""Mouse"",
                ""Goose"", ""Jimmy"", ""Dice"",
                ""Upshot"", ""Twain"", ""Ballpark"",
                ""Hammer"", ""Pixel"", ""Billy"",
                ""Lance"",""Bong"",""Eddie"",
                ""Patton"",""Tooey"",""Gus"",
                ""Karl"",""Hub"",""Luke"",
                ""Olds"",""Hap"",""Zeamer""]

num_names = random.randint(3,6)



def same_case():
    print(""Test Case 1"")
    table = []
    input_list = []
    random_score = int(random.uniform(25, 100))
    for name in random.choice(list(combinations(random_names,num_names))):
        input_list.append(name)
        input_list.append(random_score)
        table.append([random_score, name])
    
    input_list.append(""DONE"")
    
    output, error = autograder.run_script(""a4_6_scores.py"", input_list)
    
    max_time = max(table)[0] 
    expected_output = [str(max_time)]
    
    for row in table:
        if row[0] > max_time-10:
            expected_output.append(row[1])

    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    if len(expected_output) != len(output.strip().split(""\n"")):
        print(""Too many or too few outputs"")
        return 0.0
    elif num_matches == len(expected_output):
        print(""Test Case 1 Correct\n"")
        return 100.0
    else:
        print(""One or more lines in your output is incorrect"")
        return 0.0

def random_case():
    print(""Test Case 2"")
    table = []
    input_list = []
    
    for name in random.choice(list(combinations(random_names,num_names))):
        random_score = int(random.uniform(25, 100))
        input_list.append(name)
        input_list.append(random_score)
        table.append([random_score, name])
    
    input_list.append(""DONE"")
    
    output, error = autograder.run_script(""a4_6_scores.py"", input_list)
    
    max_time = max(table)[0] 
    expected_output = [str(max_time)]
    
    for row in table:
        if row[0] > max_time-10:
            expected_output.append(row[1])

    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    if len(expected_output) != len(output.strip().split(""\n"")):
        print(""Too many or too few outputs"")
        return 0.0
    elif num_matches == len(expected_output):
        print(""Test Case 2 Correct\n"")
        return 100.0
    else:
        print(""One or more lines in your output is incorrect"")
        return 0.0

def test_passed():
    return same_case()*.1+random_case()*.9


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,1,1,1,1,0,0,0,1,1,0,1,0,0,0,1,0,0,0,,"
def test_scores():
    names = []
    scores = []
    
    while True:
        name = input(""Enter cadet's name: "")
        if name == ""DONE"":
            break
        score = int(input(""Enter test score: ""))
        
        names.append(name)
        scores.append(score)
    
    highest_score = max(scores)
    print(highest_score)
    
    for i in range(len(scores)):
        if scores[i] >= highest_score - 10 and scores[i] < highest_score:
            print(names[i])

test_scores()
",completed,0.0,"Test Case 1
Too many or too few outputs
Test Case 2
Too many or too few outputs
Unit Test Returned: 0.0
"
130,143,a4_6_flighthours,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:**

You have been asked to write a program to get flying hours from a squadron of
pilots for the month. Write a Python program that asks the user to repeatedly
type in the name of a pilot, followed by their flying hours until the user
types the word ""DONE"". Your program then analyze the values and print:

  * The average number of flying hours (as a whole number)
  * The names of all pilots who flew less than the average number of flight hours. 
    * Comparison to the average should be exclusive.
    * Names should be output in the same order as input



**EXAMPLES:**

  | **Example 1**  
---|---  
**Input(s)** | Polo  
95  
Renegade  
78  
Headphones  
70  
DONE  
**Output(s)** |

81  
Renegade  
Headphones


","from cs110 import autograder
import random, math
from itertools import combinations


random_names = [""Marvel"", ""Bucky"", ""Mouse"",
                ""Goose"", ""Jimmy"", ""Dice"",
                ""Upshot"", ""Twain"", ""Ballpark"",
                ""Hammer"", ""Pixel"", ""Billy"",
                ""Lance"",""Bong"",""Eddie"",
                ""Patton"",""Tooey"",""Gus"",
                ""Karl"",""Hub"",""Luke"",
                ""Olds"",""Hap"",""Zeamer""]
num_names = random.randint(3,6)

def same_case():
    print(""Test Case 1"")
    table = []
    input_list = []
    random_score = int(random.uniform(60, 100))
    for name in random.choice(list(combinations(random_names,num_names))):
        
        input_list.append(name)
        input_list.append(random_score)
        table.append([random_score, name])
    
    input_list.append(""DONE"")
    
    output, error = autograder.run_script(""a4_6_flighthours.py"", input_list)
    
    avg_hours = int(sum([x[0] for x in table])/len(table))
    expected_output = [str(avg_hours)]
    
    for row in table:
        if row[0] < avg_hours:
            expected_output.append(row[1])

    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    if len(expected_output) != len(output.strip().split(""\n"")):
        print(""Too many or too few outputs"")
        return 0.0
    elif num_matches == len(expected_output):
        print(""Test Case 1 Correct\n"")
        return 100.0
    else:
        print(""One or more lines in your output is incorrect"")
        return 0.0

def random_case():
    print(""Test Case 2"")
    table = []
    input_list = []
    
    for name in random.choice(list(combinations(random_names,num_names))):
        random_score = int(random.uniform(60, 100))
        input_list.append(name)
        input_list.append(random_score)
        table.append([random_score, name])
    
    input_list.append(""DONE"")
    
    output, error = autograder.run_script(""a4_6_flighthours.py"", input_list)
    
    avg_hours = int(sum([x[0] for x in table])/len(table))
    expected_output = [str(avg_hours)]
    
    for row in table:
        if row[0] < avg_hours:
            expected_output.append(row[1])

    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    if len(expected_output) != len(output.strip().split(""\n"")):
        print(""Too many or too few outputs"")
        return 0.0
    elif num_matches == len(expected_output):
        print(""Test Case 2 Correct\n"")
        return 100.0
    else:
        print(""One or more lines in your output is incorrect"")
        return 0.0

def test_passed():
    return same_case()*.1+random_case()*.9
    
    
        

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,1,1,1,1,0,0,0,1,1,0,1,0,0,0,1,0,0,0,,"
flying_hours = []
pilot_names = []

while True:
    name = input(""Enter pilot name: "")
    if name == ""DONE"":
        break
    hours = int(input(""Enter flying hours: ""))
    
    pilot_names.append(name)
    flying_hours.append(hours)

average_hours = sum(flying_hours) // len(flying_hours)
print(average_hours)

below_average = [name for name, hours in zip(pilot_names, flying_hours) if hours < average_hours]
for name in below_average:
    print(name)
",completed,100.0,"Test Case 1
Test Case 1 Correct

Test Case 2
Test Case 2 Correct

Unit Test Returned: 100.0
"
131,144,a4_6_aft,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:**

You have been asked to write a program to assess student's performance on the
AFT. Write a Python program that asks the user to repeatedly type in the name
of a cadet, followed by their run time (in whole seconds) until the user types
the word ""DONE"". Your program then analyze the values and print:

  * The fastest (lowest) AFT time.
  * The names of all cadets who were within 30 seconds of the fastest time. 
    * Comparison to the target time should be exclusive.
    * Names should be output in the same order as input



**EXAMPLES:**

  | **Example 1**  
---|---  
**Input(s)** | Paul  
545  
Andrew  
661  
Joel  
575  
DONE  
**Output(s)** | 545  
Paul  
Joel


","from cs110 import autograder
import random, math
from itertools import combinations

random_names = [""Marvel"", ""Bucky"", ""Mouse"",
                ""Goose"", ""Jimmy"", ""Dice"",
                ""Upshot"", ""Twain"", ""Ballpark"",
                ""Hammer"", ""Pixel"", ""Billy"",
                ""Lance"",""Bong"",""Eddie"",
                ""Patton"",""Tooey"",""Gus"",
                ""Karl"",""Hub"",""Luke"",
                ""Olds"",""Hap"",""Zeamer""]

num_names = random.randint(3,6)

def same_case():
    print(""Test Case 1"")
    table = []
    input_list = []
    random_score = int(random.uniform(540.0, 720.0))
    for name in random.choice(list(combinations(random_names,num_names))):
        input_list.append(name)
        input_list.append(random_score)
        table.append([random_score, name])
    
    input_list.append(""DONE"")
    
    output, error = autograder.run_script(""a4_6_aft.py"", input_list)
    
    min_time = min(table)[0] 
    expected_output = [str(min_time)]
    
    for row in table:
        if row[0] < min_time+30:
            expected_output.append(row[1])

    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    if len(expected_output) != len(output.strip().split(""\n"")):
        print(""Too many or too few outputs"")
        return 0.0
    elif num_matches == len(expected_output):
        print(""Test Case 1 Correct\n"")
        return 100.0
    else:
        print(""One or more lines in your output is incorrect"")
        return 0.0

def random_case():
    print(""Test Case 2"")
    table = []
    input_list = []
    
    for name in random.choice(list(combinations(random_names,num_names))):
        random_score = int(random.uniform(540.0, 720.0))
        input_list.append(name)
        input_list.append(random_score)
        table.append([random_score, name])
    
    input_list.append(""DONE"")
    
    output, error = autograder.run_script(""a4_6_aft.py"", input_list)
    
    min_time = min(table)[0] 
    expected_output = [str(min_time)]
    
    for row in table:
        if row[0] < min_time+30:
            expected_output.append(row[1])

    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    if len(expected_output) != len(output.strip().split(""\n"")):
        print(""Too many or too few outputs"")
        return 0.0
    elif num_matches == len(expected_output):
        print(""Test Case 2 Correct\n"")
        return 100.0
    else:
        print(""One or more lines in your output is incorrect"")
        return 0.0

def test_passed():
    return same_case()*.1+random_case()*.9


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,1,1,1,1,0,0,0,1,1,0,1,0,0,0,1,0,0,0,,"Here is the solution in Python:

",completed,0.0,"Test Case 1
Too many or too few outputs
Test Case 2
Too many or too few outputs
Unit Test Returned: 0.0
"
132,145,a4_5_translate,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:**

Write a function called get_english_word that **returns** the English
translation for a Spanish word. Your function will take the following two
parameters:

  1. The spanish word (e.g., ""Hola"").
  2. A dictionary containing a list of Spanish / English pairs. 

Here is an example of what the dictionary might look like:



**Key** | **Value**  
---|---  
Hola | Hello  
Adios | Goodbye  
Aeronave | Aircraft  
  


Your function should **return** the English translation of the Spanish word
contained within the dictionary.



**HINT:**

Using parameters and return with functions is in the Lessons 11/12 block on
your Python Quick Reference guide.


","from cs110 import autograder
import random, math, ast
from a4_5_translate import get_english_word

bad_key = """"

def create_dictionary(size):
    global bad_key
    
    values = [(""Militar"", ""Military""), (""cadete"", ""Cadet""), (""Universidad"", ""University""),
              (""Halcon"", ""Falcon""), (""montana"", ""Mountain""), (""computadora"", ""computer""), (""piton"", ""python""),
              (""graduado"", ""graduated"")]
    spanish_dictionary = {}
    
    print(""Test Dictionary Contains the Following Words:"")
    
    for i in range(size):
        random_value = values[random.randint(0, len(values)-1)]
        values.remove(random_value)
        spanish_dictionary[random_value[0]] = random_value[1]
        print(random_value[0], ""(Translation"", str(random_value[1]) + "")"")
    
    bad_key = values[0][0]
    
    return spanish_dictionary


def test_passed():
    tests = 5
    
    num_passed = 0
    
    spanish_dictionary = create_dictionary(tests)
    
    print()
    
    # Checking All of the Keys in our Dictionary
    for key in spanish_dictionary.keys():
        print(""Using Function to get Translation for:"", key, "". . . "", end="""")
        returned_value = get_english_word(key, spanish_dictionary)
        print(""Your Function Returned"", returned_value, "". . . "", end="""")
        if returned_value == spanish_dictionary[key]:
            print(""Correct!"")
            num_passed += 1
        else:
            print(""Incorrect.  Returned"", returned_value, ""instead of"", spanish_dictionary[key])
    
#     print(""Using Function to get Translation for a Word Not in the Dictionary:"", bad_key, "". . . "", end="""")
#     
#     try:
#         returned_value = get_english_word(bad_key, spanish_dictionary)
#         if returned_value == ""Unknown"":
#             print(""Correctly Handled"")
#             num_passed += 1
#         else:
#             print(""Incorrect.  Returned"", returned_value, ""instead of 'Unknown'"")
#     except:
#         print(""Program crashed trying to access a key that does not exist in the dictionary"")
        
    return (100/tests) * num_passed;

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,,"
def get_english_word(spanish_word, dictionary):
    return dictionary.get(spanish_word, ""Word not found in dictionary"")
",completed,100.0,"Test Dictionary Contains the Following Words:
montana (Translation Mountain)
graduado (Translation graduated)
cadete (Translation Cadet)
computadora (Translation computer)
piton (Translation python)

Using Function to get Translation for: montana . . . Your Function Returned Mountain . . . Correct!
Using Function to get Translation for: graduado . . . Your Function Returned graduated . . . Correct!
Using Function to get Translation for: cadete . . . Your Function Returned Cadet . . . Correct!
Using Function to get Translation for: computadora . . . Your Function Returned computer . . . Correct!
Using Function to get Translation for: piton . . . Your Function Returned python . . . Correct!
Unit Test Returned: 100.0
"
133,146,a4_5_password,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:**

Write a function called get_password that **returns** the password for a
specified website. Your function will take the following two parameters in
this order:

  1. The website (e.g., ""Amazon"").
  2. A dictionary containing a list of website/password pairs. 

Here is an example of what the dictionary might look like:



**Key** | **Value**  
---|---  
Amazon | password1234  
Facebook | aardvark  
Twitter | AirPower!  
  


Your function should return the password of the website contained within the
dictionary.



**HINT:**

Using parameters and **return** with functions is in the Lessons 11/12 block
on your Python Quick Reference guide.


","from cs110 import autograder
import random, math, ast
from a4_5_password import get_password

bad_key = """"

def create_dictionary(size):
    global bad_key
    
    values = [(""CarMax"", ""B-1IsBest""), (""YouTube"", ""MyCatisthecoolest""), (""Gmail"", ""thisIsMyPassword""),
              (""Outlook"", ""MSDOSwasBAD!""), (""Blackboard"", ""SkoolRulez""), (""Canvas"", ""beststudentEvA""), (""REI"", ""MountainClimber""),
              (""UnitedAirlines"", ""gimmeDemMiles"")]
    dictionary = {}
    
    print(""Test Dictionary Contains the Following Words:"")
    
    for i in range(size):
        random_value = values[random.randint(0, len(values)-1)]
        values.remove(random_value)
        dictionary[random_value[0]] = random_value[1]
        print(random_value[0], ""(Password"", str(random_value[1]) + "")"")
    
    bad_key = values[0][0]
    
    return dictionary


def test_passed():
    tests = 5
    num_passed = 0
    
    dictionary = create_dictionary(tests)
    
    print()
    
    # Checking All of the Keys in our Dictionary
    for key in dictionary.keys():
        print(""Using Function to get Password for:"", key, "". . . "", end="""")
        returned_value = get_password(key, dictionary)
        print(""Your Function Returned"", returned_value, "". . . "", end="""")
        if returned_value == dictionary[key]:
            print(""Correct!"")
            num_passed += 1
        else:
            print(""Incorrect.  Returned"", returned_value, ""instead of"", dictionary[key])
    
#     print(""Using Function to get Password for a Website Not in the Dictionary:"", bad_key, "". . . "", end="""")
#     
#     try:
#         returned_value = get_password(bad_key, dictionary)
#         if returned_value == ""Unknown"":
#             print(""Correctly Handled"")
#             num_passed += 1
#         else:
#             print(""Incorrect.  Returned"", returned_value, ""instead of 'Unknown'"")
#     except:
#         print(""Program crashed trying to access a key that does not exist in the dictionary"")
        
    return (100/tests) * num_passed;

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,,"
def get_password(website, password_dict):
    return password_dict.get(website)

password_dict = {
    ""Amazon"": ""password1234"",
    ""Facebook"": ""aardvark"",
    ""Twitter"": ""AirPower!""
}

website = input(""Enter the name of the website: "")
password = get_password(website, password_dict)
print(""The password for"", website, ""is"", password)
",failed: EOF when reading a line,0.0,
134,147,a4_5_areacode,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:**

Write a function called get_area_code that **returns** the area code for a
specific state. Your function will take the following two parameters in this
order:

  1. The name of the state (e.g., ""California"").
  2. A dictionary containing a list of State / Area Code Pairs. 

Here is an example of what the dictionary might look like:



**Key** | **Value**  
---|---  
California | 209  
Michigan | 234  
Colorado | 719  
  


Your function should **return** the area code for the specified state
contained within the dictionary.



**HINT:**

Using parameters and return with functions is in the Lessons 11/12 block on
your Python Quick Reference guide.


","from cs110 import autograder
import random, math, ast
from a4_5_areacode import get_area_code

bad_key = """"

def create_dictionary(size):
    global bad_key
    
    values = [(""California"", 209), (""Texas"", 214), (""Michigan"", 248), (""Iowa"", 319), (""Utah"", 358), (""Colorado"", 719), (""Alabama"", 334), (""Alaska"", 907)]
    area_code_dictionary = {}
    
    print(""Test Dictionary Contains Area Codes for the Following States:"")
    
    for i in range(size):
        random_value = values[random.randint(0, len(values)-1)]
        values.remove(random_value)
        area_code_dictionary[random_value[0]] = random_value[1]
        print(random_value[0], ""(Area Code:"", str(random_value[1]) + "")"")
    
    bad_key = values[0][0]
    
    return area_code_dictionary


def test_passed():
    tests = 5

    num_passed = 0
    area_code_dictionary = create_dictionary(tests)
    
    print()
    output, error = autograder.run_script(""a4_5_areacode.py"", [])
    output_lines = output.strip().split('\n')

    # Checking All of the Keys in our Dictionary
    for key in area_code_dictionary.keys():
        print(""Using Function to get Area Code for:"", key, "". . . "", end="""")
        returned_value = get_area_code(key, area_code_dictionary)
        print(""Your Function Returned"", returned_value, "". . . "", end="""")
        if returned_value == area_code_dictionary[key]:
            print(""Correct!"")
            num_passed += 1
        else:
            print(""Incorrect.  Returned"", returned_value, ""instead of"", area_code_dictionary[key])
    
#     print(""Using Function to get Area Code for a State Not in the Dictionary:"", bad_key, "". . . "", end="""")
#     
#     try:
#         returned_value = get_area_code(bad_key, area_code_dictionary)
#         if returned_value == ""Unknown"":
#             print(""Correctly Handled"")
#             num_passed += 1
#         else:
#             print(""Incorrect.  Returned"", returned_value, ""instead of 'Unknown'"")
#     except:
#         print(""Program crashed trying to access a key that does not exist in the dictionary"")
        
    return (100/tests) * num_passed;

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,,"
def get_area_code(state, state_codes):
    return state_codes[state]
",completed,100.0,"Test Dictionary Contains Area Codes for the Following States:
Michigan (Area Code: 248)
Alaska (Area Code: 907)
Texas (Area Code: 214)
Alabama (Area Code: 334)
Iowa (Area Code: 319)

Using Function to get Area Code for: Michigan . . . Your Function Returned 248 . . . Correct!
Using Function to get Area Code for: Alaska . . . Your Function Returned 907 . . . Correct!
Using Function to get Area Code for: Texas . . . Your Function Returned 214 . . . Correct!
Using Function to get Area Code for: Alabama . . . Your Function Returned 334 . . . Correct!
Using Function to get Area Code for: Iowa . . . Your Function Returned 319 . . . Correct!
Unit Test Returned: 100.0
"
135,151,a4_3_parks,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a table called `amusement_parks` that contains
information about various amusement parks in the United States. Logically, the
table can be represented as follows:



**Price Per Day** | **Name of Park** | **State**  
---|---|---  
$154.00 | Disneyland | California  
$169.34 | Disney World | Florida  
$79.99 | Great America | California  
$73.00 | Cedar Point | Ohio  
  


Write code that gets 1) the name of the park, 2) the state where the park is
located, and 3) the price of a single day of admission from the user. Your
program should then add a new row to the table containing these values.



HINT:

  * When you are creating your row, make sure you are adding the columns in the correct order!




","from cs110 import autograder
import random, math, ast

def script_name():
    return ""a4_3_parks.py""


'''
item = [a,b,c] (what should be in this entry)
entry = [d,e,f] (what is in this entry)

For each value in item, if it is in entry:
   Of the right type in the right place: 100
   Of the wrong type in the right place: 80
   Of the right type but in the wrong place: 80
   Of the wrong type in the wrong place: 64
If entry and item are not the same length, 20% penalty

Note that this has issues if there are duplicate values in the correct item.
'''
def score_value_against_value(v1, v2):
    score = 0
    if v1 == v2:
        return 100
    try:
        if float(v1) == float(v2):
            score = 80
    except:
        pass
    return score

def score_list_against_list(correct, scored):
    score = 0
    for i in range(len(correct)):
        col_score = []
        for j in range(len(scored)):
            t_score = score_value_against_value(correct[i], scored[j])
            if i != j:
                t_score *= 0.80
            col_score.append(t_score)
        score += max(col_score)
    score /= len(correct)

    if len(correct) != len(scored):
        score *= 0.80
    return score

def score_list_against_table(item_list, table):
    score_list = []
    for entry in table:
        score = 0
        if item_list == entry:
            score = 100
        else:
            score = score_list_against_list(item_list, entry)
        score_list.append(score)
    return score_list

def score_correct_against_scored(correct_table, scored_table, weights):
    # normalize weights
    norm_wt = []
    sum_of_weights = sum(weights)
    for weight in weights:
        norm_wt.append(weight / sum_of_weights)
        
    # score each item separately against table
    cum_score = 0
    for i in range(len(correct_table)):
        # Check if this item is in the table correctly and in the correct position
        if (i < len(scored_table)) and (correct_table[i] == scored_table[i]):
            score = 100
        # Score this item against each item in the table
        else:
            score_list = score_list_against_table(correct_table[i], scored_table)
            if len(score_list) > 0:
                score = 0.50 * max(score_list)
            else:
                score = 0
            if i < len(score_list):
                score = max([score, score_list[i]])
        cum_score += score * norm_wt[i]
    
    # penalty for wrong number of items in table.
    if len(correct_table) != len(scored_table):
        cum_score = max([cum_score - 20, 0])
    return cum_score
    
def item_in_table(item, table):
    if item in table:
        print(""Item Found"")
        return 100
    print(item, ""not found in"", table)
    return 50

def given_table():
    if script_name() == ""a4_3_aircraft.py"":
        return [[218, ""C-17 Globemaster"", ""Boeing""],
                [14.6, ""F-16 Falcon"", ""General Dynamics""],
                [16.9, ""MQ-9 Reaper"", ""General Atomics""],
                [737, ""B-2 Spirit"", ""Northrop Grumman""]]
    if script_name() == ""a4_3_new_cars.py"":
        return [[26660, ""Bronco"", ""Ford""],
                [36340, ""4Runner"", ""Toyota""],
                [68200, ""Q8"", ""Audi""],
                [48475, ""Silverado"", ""Cheverolet""]]
    if script_name() == ""a4_3_parks.py"":
        return [[154.0, ""Disneyland"", ""California""],
                [169.34, ""Disney World"", ""Florida""],
                [79.99, ""Six Flags Great America"", ""California""],
                [73.00, ""Cedar Point"", ""Ohio""]]
    return []

def user_inputs():
    if script_name() == ""a4_3_aircraft.py"":
        return [ ['B-52 Stratofortress', 'Boeing', 14.4], ['T-6 Texan', 'North American Aviation', 4] ]
    if script_name() == ""a4_3_new_cars.py"":
        return [ ['Model 3', 'Tesla', 34999.99], ['Cayenne', 'Porche', 67500] ]
    if script_name() == ""a4_3_parks.py"":
        return [ ['Elitch Gardens', 'Colorado', 69.99], ['Euro Disney', 'France', 189] ]
    return []

def get_correct_output(inputs):
    table = given_table()
    weights = []
    for i in range(len(table)):
        weights.append(0.1)
    table.append([inputs[2], inputs[0], inputs[1]])
    for i in range(len(table)-len(weights)):
        weights.append(1)
    return (table, weights)

def test_passed():    
    
    # Template-only check
    print(""-------------------------------------------------"")
    print(""Test #"" + str(0))
    print(""-------------------------------------------------"")
    output, error = autograder.run_script(script_name(), [])
    if len(error) == 0:
        print(""Be sure that you are not running just the template file."")
        return 0.2
    else:
        print(""Ignore the errors for this run."")
        
    # Run Data Sets
    run_data = user_inputs()
    
    # Set the weights for the individual runs
    relative_weights = []
    for i in range(len(run_data)):         
        relative_weights.append(1)
    relative_weights = [1,19] #(override evenly weighted)
    sum_of_relative_weights = sum(relative_weights)
    run_weight = []
    for weight in relative_weights:
        run_weight.append(weight / sum_of_relative_weights)
    
    # Runs the Script for each data set
    cum_score = 0
    for run in range(len(run_data)):
        print(""-------------------------------------------------"")
        print(""Test #"" + str(run + 1))
        print(""-------------------------------------------------"")

        inputs_for_this_run = run_data[run]

        input_list = []
        (correct, weights) = get_correct_output(inputs_for_this_run)
        
        output, error = autograder.run_script(script_name(), inputs_for_this_run)
        
        score = 0
        # Deal with the case of errors occuring during run
        if (run == 1): # Cost is a float
            if len(error) > 0:
                print(""Error when handling a float cost"")
                score = 0
                
        if (run == 2): # Cost is an integer
            if len(error) > 0:
                print(""Error when handling an integer cost"")
                score = 0

        # Deal with case of no errors occurring during run
        if len(error) == 0:
            lines = output.strip().split('\n')

            if len(lines) >= 1 and len(lines[0]) > 0:                    
                output_table = ast.literal_eval(lines[0])
            
                score = score_correct_against_scored(correct, output_table, weights)

            else:
                score = 0
                

        print(""This test score:"", round(score,1), ""% (weight ="", round(100*run_weight[run],1), ""%)"")
        cum_score += score * run_weight[run]
        print()
        
    return max([round(cum_score, 1), 0.1])
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,,"
import sqlite3

# Connect to the database
conn = sqlite3.connect('amusement_parks.db')
c = conn.cursor()

# Get input from the user
name = input(""Enter the name of the park: "")
state = input(""Enter the state where the park is located: "")
price = float(input(""Enter the price of a single day of admission: ""))

# Insert the new row into the table
c.execute(""INSERT INTO amusement_parks (Price_Per_Day, Name_of_Park, State) VALUES (?, ?, ?)"",
          (price, name, state))

# Commit the changes and close the connection
conn.commit()
conn.close()
",completed,0.2,"-------------------------------------------------
Test #0
-------------------------------------------------
Be sure that you are not running just the template file.
Unit Test Returned: 0.2
"
136,152,a4_3_new_cars,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a table called `new_cars` that contains
information about various automobiles for sale in the United States.
Logically, the table can be represented as follows:



**Unit Price  ** | **Model Name** | **Make**  
---|---|---  
$26,660 | Bronco | Ford  
$36,340 | 4Runner | Toyota  
$68,199.99 | Q8 | Audi  
$48,475 | Silverado | Chevrolet  
  


Write code that gets 1) Model Name of the car, 2) Make, and 3) the unit price.
Your program should then add a new row to the table containing these values.



HINT:

  * When you are creating your row, make sure you are adding the columns in the correct order!


","from cs110 import autograder
import random, math, ast

def script_name():
    return ""a4_3_new_cars.py""


'''
item = [a,b,c] (what should be in this entry)
entry = [d,e,f] (what is in this entry)

For each value in item, if it is in entry:
   Of the right type in the right place: 100
   Of the wrong type in the right place: 80
   Of the right type but in the wrong place: 80
   Of the wrong type in the wrong place: 64
If entry and item are not the same length, 20% penalty

Note that this has issues if there are duplicate values in the correct item.
'''
def score_value_against_value(v1, v2):
    score = 0
    if v1 == v2:
        return 100
    try:
        if float(v1) == float(v2):
            score = 80
    except:
        pass
    return score

def score_list_against_list(correct, scored):
    score = 0
    for i in range(len(correct)):
        col_score = []
        for j in range(len(scored)):
            t_score = score_value_against_value(correct[i], scored[j])
            if i != j:
                t_score *= 0.80
            col_score.append(t_score)
        score += max(col_score)
    score /= len(correct)

    if len(correct) != len(scored):
        score *= 0.80
    return score

def score_list_against_table(item_list, table):
    score_list = []
    for entry in table:
        score = 0
        if item_list == entry:
            score = 100
        else:
            score = score_list_against_list(item_list, entry)
        score_list.append(score)
    return score_list

def score_correct_against_scored(correct_table, scored_table, weights):
    # normalize weights
    norm_wt = []
    sum_of_weights = sum(weights)
    for weight in weights:
        norm_wt.append(weight / sum_of_weights)
        
    # score each item separately against table
    cum_score = 0
    for i in range(len(correct_table)):
        # Check if this item is in the table correctly and in the correct position
        if (i < len(scored_table)) and (correct_table[i] == scored_table[i]):
            score = 100
        # Score this item against each item in the table
        else:
            score_list = score_list_against_table(correct_table[i], scored_table)
            if len(score_list) > 0:
                score = 0.50 * max(score_list)
            else:
                score = 0
            if i < len(score_list):
                score = max([score, score_list[i]])
        cum_score += score * norm_wt[i]
    
    # penalty for wrong number of items in table.
    if len(correct_table) != len(scored_table):
        cum_score = max([cum_score - 20, 0])
    return cum_score
    
def item_in_table(item, table):
    if item in table:
        print(""Item Found"")
        return 100
    print(item, ""not found in"", table)
    return 50

def given_table():
    if script_name() == ""a4_3_aircraft.py"":
        return [[218, ""C-17 Globemaster"", ""Boeing""],
                [14.6, ""F-16 Falcon"", ""General Dynamics""],
                [16.9, ""MQ-9 Reaper"", ""General Atomics""],
                [737, ""B-2 Spirit"", ""Northrop Grumman""]]
    if script_name() == ""a4_3_new_cars.py"":
        return [[26660, ""Bronco"", ""Ford""],
                [36340, ""4Runner"", ""Toyota""],
                [68200, ""Q8"", ""Audi""],
                [48475, ""Silverado"", ""Cheverolet""]]
    if script_name() == ""a4_3_parks.py"":
        return [[154.0, ""Disneyland"", ""California""],
                [169.34, ""Disney World"", ""Florida""],
                [79.99, ""Six Flags Great America"", ""California""],
                [73.00, ""Cedar Point"", ""Ohio""]]
    return []

def user_inputs():
    if script_name() == ""a4_3_aircraft.py"":
        return [ ['B-52 Stratofortress', 'Boeing', 14.4], ['T-6 Texan', 'North American Aviation', 4] ]
    if script_name() == ""a4_3_new_cars.py"":
        return [ ['Model 3', 'Tesla', 34999.99], ['Cayenne', 'Porche', 67500] ]
    if script_name() == ""a4_3_parks.py"":
        return [ ['Elitch Gardens', 'Colorado', 69.99], ['Euro Disney', 'France', 189] ]
    return []

def get_correct_output(inputs):
    table = given_table()
    weights = []
    for i in range(len(table)):
        weights.append(0.1)
    table.append([inputs[2], inputs[0], inputs[1]])
    for i in range(len(table)-len(weights)):
        weights.append(1)
    return (table, weights)

def test_passed():    
    
    # Template-only check
    print(""-------------------------------------------------"")
    print(""Test #"" + str(0))
    print(""-------------------------------------------------"")
    output, error = autograder.run_script(script_name(), [])
    if len(error) == 0:
        print(""Be sure that you are not running just the template file."")
        return 0.2
    else:
        print(""Ignore the errors for this run."")
        
    # Run Data Sets
    run_data = user_inputs()
    
    # Set the weights for the individual runs
    relative_weights = []
    for i in range(len(run_data)):         
        relative_weights.append(1)
    relative_weights = [1,19] #(override evenly weighted)
    sum_of_relative_weights = sum(relative_weights)
    run_weight = []
    for weight in relative_weights:
        run_weight.append(weight / sum_of_relative_weights)
    
    # Runs the Script for each data set
    cum_score = 0
    for run in range(len(run_data)):
        print(""-------------------------------------------------"")
        print(""Test #"" + str(run + 1))
        print(""-------------------------------------------------"")

        inputs_for_this_run = run_data[run]

        input_list = []
        (correct, weights) = get_correct_output(inputs_for_this_run)
        
        output, error = autograder.run_script(script_name(), inputs_for_this_run)
        
        score = 0
        # Deal with the case of errors occuring during run
        if (run == 1): # Cost is a float
            if len(error) > 0:
                print(""Error when handling a float cost"")
                score = 0
                
        if (run == 2): # Cost is an integer
            if len(error) > 0:
                print(""Error when handling an integer cost"")
                score = 0

        # Deal with case of no errors occurring during run
        if len(error) == 0:
            lines = output.strip().split('\n')

            if len(lines) >= 1 and len(lines[0]) > 0:                    
                output_table = ast.literal_eval(lines[0])
            
                score = score_correct_against_scored(correct, output_table, weights)

            else:
                score = 0
                

        print(""This test score:"", round(score,1), ""% (weight ="", round(100*run_weight[run],1), ""%)"")
        cum_score += score * run_weight[run]
        print()
        
    return max([round(cum_score, 1), 0.1])
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,,,completed,0.2,"-------------------------------------------------
Test #0
-------------------------------------------------
Be sure that you are not running just the template file.
Unit Test Returned: 0.2
"
137,153,a4_3_aircraft,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a table called `usaf_aircraft` that contains
information about various aircraft in the United States Air Force inventory.
Logically, the table can be represented as follows:



**Unit Price in Millions** | **Aircraft Name** | **Manufacturer**  
---|---|---  
$218 | C-17 Globemaster | Boeing  
$14.6 | F-16 Falcon | General Dynamics  
$16.9 | MQ-9 Reaper | General Atomics  
$737 | B-2 Spirit | Northrop Grumman  
  


Write code that gets 1) Name of the Aircraft, 2) Manufacturer, and 3) the unit
price in millions. Your program should then add a new row to the table
containing these values.



HINT:

  * When you are creating your row, make sure you are adding the columns in the correct order!


","from cs110 import autograder
import random, math, ast

def script_name():
    return ""a4_3_aircraft.py""


'''
item = [a,b,c] (what should be in this entry)
entry = [d,e,f] (what is in this entry)

For each value in item, if it is in entry:
   Of the right type in the right place: 100
   Of the wrong type in the right place: 80
   Of the right type but in the wrong place: 80
   Of the wrong type in the wrong place: 64
If entry and item are not the same length, 20% penalty

Note that this has issues if there are duplicate values in the correct item.
'''
def score_value_against_value(v1, v2):
    score = 0
    if v1 == v2:
        return 100
    try:
        if float(v1) == float(v2):
            score = 80
    except:
        pass
    return score

def score_list_against_list(correct, scored):
    score = 0
    for i in range(len(correct)):
        col_score = []
        for j in range(len(scored)):
            t_score = score_value_against_value(correct[i], scored[j])
            if i != j:
                t_score *= 0.80
            col_score.append(t_score)
        score += max(col_score)
    score /= len(correct)

    if len(correct) != len(scored):
        score *= 0.80
    return score

def score_list_against_table(item_list, table):
    score_list = []
    for entry in table:
        score = 0
        if item_list == entry:
            score = 100
        else:
            score = score_list_against_list(item_list, entry)
        score_list.append(score)
    return score_list

def score_correct_against_scored(correct_table, scored_table, weights):
    # normalize weights
    norm_wt = []
    sum_of_weights = sum(weights)
    for weight in weights:
        norm_wt.append(weight / sum_of_weights)
        
    # score each item separately against table
    cum_score = 0
    for i in range(len(correct_table)):
        # Check if this item is in the table correctly and in the correct position
        if (i < len(scored_table)) and (correct_table[i] == scored_table[i]):
            score = 100
        # Score this item against each item in the table
        else:
            score_list = score_list_against_table(correct_table[i], scored_table)
            if len(score_list) > 0:
                score = 0.50 * max(score_list)
            else:
                score = 0
            if i < len(score_list):
                score = max([score, score_list[i]])
        cum_score += score * norm_wt[i]
    
    # penalty for wrong number of items in table.
    if len(correct_table) != len(scored_table):
        cum_score = max([cum_score - 20, 0])
    return cum_score
    
def item_in_table(item, table):
    if item in table:
        print(""Item Found"")
        return 100
    print(item, ""not found in"", table)
    return 50

def given_table():
    if script_name() == ""a4_3_aircraft.py"":
        return [[218, ""C-17 Globemaster"", ""Boeing""],
                [14.6, ""F-16 Falcon"", ""General Dynamics""],
                [16.9, ""MQ-9 Reaper"", ""General Atomics""],
                [737, ""B-2 Spirit"", ""Northrop Grumman""]]
    if script_name() == ""a4_3_new_cars.py"":
        return [[26660, ""Bronco"", ""Ford""],
                [36340, ""4Runner"", ""Toyota""],
                [68200, ""Q8"", ""Audi""],
                [48475, ""Silverado"", ""Cheverolet""]]
    if script_name() == ""a4_3_parks.py"":
        return [[154.0, ""Disneyland"", ""California""],
                [169.34, ""Disney World"", ""Florida""],
                [79.99, ""Six Flags Great America"", ""California""],
                [73.00, ""Cedar Point"", ""Ohio""]]
    return []

def user_inputs():
    if script_name() == ""a4_3_aircraft.py"":
        return [ ['B-52 Stratofortress', 'Boeing', 14.4], ['T-6 Texan', 'North American Aviation', 4] ]
    if script_name() == ""a4_3_new_cars.py"":
        return [ ['Model 3', 'Tesla', 34999.99], ['Cayenne', 'Porche', 67500] ]
    if script_name() == ""a4_3_parks.py"":
        return [ ['Elitch Gardens', 'Colorado', 69.99], ['Euro Disney', 'France', 189] ]
    return []

def get_correct_output(inputs):
    table = given_table()
    weights = []
    for i in range(len(table)):
        weights.append(0.1)
    table.append([inputs[2], inputs[0], inputs[1]])
    for i in range(len(table)-len(weights)):
        weights.append(1)
    return (table, weights)

def test_passed():    
    
    # Template-only check
    print(""-------------------------------------------------"")
    print(""Test #"" + str(0))
    print(""-------------------------------------------------"")
    output, error = autograder.run_script(script_name(), [])
    if len(error) == 0:
        print(""Be sure that you are not running just the template file."")
        return 0.2
    else:
        print(""Ignore the errors for this run."")
        
    # Run Data Sets
    run_data = user_inputs()
    
    # Set the weights for the individual runs
    relative_weights = []
    for i in range(len(run_data)):         
        relative_weights.append(1)
    relative_weights = [1,19] #(override evenly weighted)
    sum_of_relative_weights = sum(relative_weights)
    run_weight = []
    for weight in relative_weights:
        run_weight.append(weight / sum_of_relative_weights)
    
    # Runs the Script for each data set
    cum_score = 0
    for run in range(len(run_data)):
        print(""-------------------------------------------------"")
        print(""Test #"" + str(run + 1))
        print(""-------------------------------------------------"")

        inputs_for_this_run = run_data[run]

        input_list = []
        (correct, weights) = get_correct_output(inputs_for_this_run)
        
        output, error = autograder.run_script(script_name(), inputs_for_this_run)
        
        score = 0
        # Deal with the case of errors occuring during run
        if (run == 1): # Cost is a float
            if len(error) > 0:
                print(""Error when handling a float cost"")
                score = 0
                
        if (run == 2): # Cost is an integer
            if len(error) > 0:
                print(""Error when handling an integer cost"")
                score = 0

        # Deal with case of no errors occurring during run
        if len(error) == 0:
            lines = output.strip().split('\n')

            if len(lines) >= 1 and len(lines[0]) > 0:                    
                output_table = ast.literal_eval(lines[0])
            
                score = score_correct_against_scored(correct, output_table, weights)

            else:
                score = 0
                

        print(""This test score:"", round(score,1), ""% (weight ="", round(100*run_weight[run],1), ""%)"")
        cum_score += score * run_weight[run]
        print()
        
    return max([round(cum_score, 1), 0.1])
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,,"
import psycopg2

def add_aircraft(name: str, manufacturer: str, price: float):
    conn = psycopg2.connect(host=""localhost"", port=5432, dbname=""your_db"", user=""your_user"", password=""your_password"")
    cursor = conn.cursor()

    cursor.execute(""INSERT INTO usaf_aircraft (aircraft_name, manufacturer, unit_price) ""
                   ""VALUES (%s, %s, %s)"",
                   (name, manufacturer, price))

    conn.commit()
    cursor.close()
    conn.close()
    
# Example usage
add_aircraft(""F-35 Lightning II"", ""Lockheed Martin"", 89.2)
",completed,0.1,"-------------------------------------------------
Test #0
-------------------------------------------------
Ignore the errors for this run.
-------------------------------------------------
Test #1
-------------------------------------------------
This test score: 0 % (weight = 5.0 %)

-------------------------------------------------
Test #2
-------------------------------------------------
Error when handling a float cost
This test score: 0 % (weight = 95.0 %)

Unit Test Returned: 0.1
"
138,154,a4_2_sickness,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a template that gets the following values from
the user:

  * Body temperature (in Fahrenheit)
  * Body aches (a string, which will be either ""yes"" or ""no"")
  * Loss of smell (a string, which will be either ""yes"" or ""no"")



Using the following rules as a guide, have your program determine a person's
risk of having an infectious disease:

  1. If the person's temperature is above 100.4 degrees, print ""High Risk""
  2. If the person is experiencing both body aches and loss of smell, print ""High Risk""
  3. For all other situations, print ""Low Risk""



**EXAMPLE:  
**

  | **Example 1** | **Example 2**  
---|---|---  
Input |

99.0  
yes  
yes  
  

| 100.4  
no  
yes  
Output | High Risk | Low Risk  
  



","from cs110 import autograder
import random, math

def run_test(temperature, body_aches, loss_of_smell, expected_output):
    output, error = autograder.run_script(""a4_2_sickness.py"", [temperature, body_aches, loss_of_smell])
    lines = output.split('\n')
    
    if len(lines) >= 4:
        if lines[3] == expected_output:
            print(""Correct Output\n"")
            return True
        else:
            print(""Incorrect Output.  Expected"", expected_output, '\n')
            return False
    else:
        print(""No Output Found\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    num_tests_passed = 0
    
    testcase_library = [(round(random.uniform(98.0, 99.9), 1), ""yes"", ""no"", ""Low Risk""),
                        (round(random.uniform(100.5, 102.0), 1), ""yes"", ""yes"", ""High Risk""),
                        (round(random.uniform(98.0, 99.9), 1), ""yes"", ""yes"", ""High Risk""),
                        (round(random.uniform(100.5, 102.0), 1), ""no"", ""no"", ""High Risk"")]
    
    for i in range(len(testcase_library)):
        print(""-------------------"")
        print(""Test"", i+1, ""of"", len(testcase_library))
        print(""-------------------"")
        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):
            num_tests_passed += 1
    
    return round(100 / len(testcase_library) * num_tests_passed, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
temperature = float(input(""Enter body temperature (in Fahrenheit): ""))
body_aches = input(""Are you experiencing body aches? (yes/no): "")
loss_of_smell = input(""Are you experiencing loss of smell? (yes/no): "")

if temperature > 100.4:
    print(""High Risk"")
elif body_aches == ""yes"" and loss_of_smell == ""yes"":
    print(""High Risk"")
else:
    print(""Low Risk"")
",completed,0.0,"-------------------
Test 1 of 4
-------------------
No Output Found

-------------------
Test 2 of 4
-------------------
No Output Found

-------------------
Test 3 of 4
-------------------
No Output Found

-------------------
Test 4 of 4
-------------------
No Output Found

Unit Test Returned: 0.0
"
139,155,a4_2_pt,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a template that gets the following values from
the user:

  * Outside Temperature (in Fahrenheit)
  * Lightning within 5?(a string, which will be either ""yes"" or ""no"")
  * Winds over 20 knots? (a string, which will be either ""yes"" or ""no"")



Using the following rules as a guide, have your program determine if PT is
cancelled or a go:

  1. If the outside temperature is above 90 degrees, print ""PT Cancelled""
  2. If there is lightning within 5 or winds over 20 knots print ""PT Cancelled""
  3. For all other situations, print ""PT is a Go""



**EXAMPLE:  
**

  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
Input |

99.0  
no  
no  
  

| 85  
no  
yes |

85

no

no  
  
Output | PT Cancelled | PT Cancelled | PT is a Go  
  



","from cs110 import autograder
import random, math

def run_test(temperature, lightning, winds, expected_output):
    output, error = autograder.run_script(""a4_2_pt.py"", [temperature, lightning, winds])
    lines = output.split('\n')
    
    if len(lines) >= 4:
        if lines[3] == expected_output:
            print(""Correct Output\n"")
            return True
        else:
            print(""Incorrect Output.  Expected"", expected_output, '\n')
            return False
    else:
        print(""No Output Found\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    num_tests_passed = 0
    
    testcase_library = [(round(random.uniform(72.0, 90), 1), ""no"", ""no"", ""PT is a Go""),
                        (round(random.uniform(100.5, 102.0), 1), ""yes"", ""yes"", ""PT Cancelled""),
                        (round(random.uniform(72.0, 90), 1), ""yes"", ""no"", ""PT Cancelled""),
                        (round(random.uniform(100.5, 102.0), 1), ""no"", ""no"", ""PT Cancelled"")]
    
    for i in range(len(testcase_library)):
        print(""-------------------"")
        print(""Test"", i+1, ""of"", len(testcase_library))
        print(""-------------------"")
        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):
            num_tests_passed += 1
    
    return round(100 / len(testcase_library) * num_tests_passed, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
# Get user input
temperature = float(input(""Outside Temperature (in Fahrenheit): ""))
lightning = input(""Lightning within 5? (yes/no): "")
winds = input(""Winds over 20 knots? (yes/no): "")

# Check conditions and print result
if temperature > 90:
    print(""PT Cancelled"")
elif lightning == ""yes"" or winds == ""yes"":
    print(""PT Cancelled"")
else:
    print(""PT is a Go"")
",completed,0.0,"-------------------
Test 1 of 4
-------------------
No Output Found

-------------------
Test 2 of 4
-------------------
No Output Found

-------------------
Test 3 of 4
-------------------
No Output Found

-------------------
Test 4 of 4
-------------------
No Output Found

Unit Test Returned: 0.0
"
140,156,a4_2_dog,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a template that gets the following values from
the user:

  * Outside Temperature (in Fahrenheit)
  * Is it raining? (a string that will be either ""yes"" or ""no"")
  * Is it daytime? (a string that will be either ""yes"" or ""no"")



Using the following rules as a guide, have your program determine if the dog
is outside:

  1. If the outside temperature is above 85 degrees, print ""Dog Inside""
  2. If it is raining outside print ""Dog Inside""
  3. If it is NOT daytime, print ""Dog Inside""
  4. For all other situations, print ""Dog Outside""



**EXAMPLE:  
**

  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
Input |

99.0  
no  
yes  
  

| 80  
yes  
yes |

75

no

yes  
  
Output | Dog Inside | Dog Inside | Dog Outside  
  



","from cs110 import autograder
import random, math

def run_test(temperature, raining, daytime, expected_output):
    output, error = autograder.run_script(""a4_2_dog.py"", [temperature, raining, daytime])
    lines = output.split('\n')
    
    if len(lines) >= 4:
        if lines[3] == expected_output:
            print(""Correct Output\n"")
            return True
        else:
            print(""Incorrect Output.  Expected"", expected_output, '\n')
            return False
    else:
        print(""No Output Found\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    num_tests_passed = 0
    
    testcase_library = [(round(random.uniform(83.0, 84.9), 1), ""no"", ""yes"", ""Dog Outside""),
                        (round(random.uniform(83.0, 84.9), 1), ""yes"", ""yes"", ""Dog Inside""),
                        (round(random.uniform(83.0, 84.9), 1), ""no"", ""no"", ""Dog Inside""),
                        (round(random.uniform(100.5, 102.0), 1), ""no"", ""yes"", ""Dog Inside"")]
    
    for i in range(len(testcase_library)):
        print(""-------------------"")
        print(""Test"", i+1, ""of"", len(testcase_library))
        print(""-------------------"")
        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):
            num_tests_passed += 1
    
    return round(100 / len(testcase_library) * num_tests_passed, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
# Get input from user
temperature = float(input(""Outside Temperature (in Fahrenheit): ""))
is_raining = input(""Is it raining? (yes/no): "")
is_daytime = input(""Is it daytime? (yes/no): "")

# Check conditions and print output
if temperature > 85:
    print(""Dog Inside"")
elif is_raining == ""yes"":
    print(""Dog Inside"")
elif is_daytime == ""no"":
    print(""Dog Inside"")
else:
    print(""Dog Outside"")
",completed,0.0,"-------------------
Test 1 of 4
-------------------
No Output Found

-------------------
Test 2 of 4
-------------------
No Output Found

-------------------
Test 3 of 4
-------------------
No Output Found

-------------------
Test 4 of 4
-------------------
No Output Found

Unit Test Returned: 0.0
"
141,157,a4_1_lift,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

Write a Python function that calculates the lift for an aircraft. You will
name your function `calculate_lift`, and it will have the following parameters
(in this order):

  * Lift coefficient
  * Density
  * Velocity
  * Area

Your function will **return** the lift, which can be computed using the
following equation:



![Principles of Flying](https://www.thaitechnics.com/fly/tg4/lift_equa.gif)



NOTE: You do NOT need to call the function.


","from cs110 import autograder
import random, math
import a4_1_lift

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    
    if ""calculate_lift"" in dir(a4_1_lift):
        print(""Function Defined"")
        score += 20
        
        lift_coefficient = round(random.uniform(3, 5), 1)
        density = round(random.uniform(2, 3), 1)
        velocity = round(random.uniform(50, 200), 1)
        area = round(random.uniform(400, 1000), 1)
        lift = lift_coefficient * area * 0.5 * density * velocity ** 2.0
        
        if autograder.equals(lift, a4_1_lift.calculate_lift(lift_coefficient, density, velocity, area)):
            print(""Function Returned the Correct Value"")
            score += 80
        else:
            print(""calculate_lift(%1.1f, %1.1f, %1.1f, %1.1f) return %f instead of %f"" %
                  (lift_coefficient, density, velocity, area, a4_1_lift.calculate_lift(lift_coefficient, density, velocity, area), lift))
        
    else:
        print(""Function Not Defined"")
    
    return score
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
def calculate_lift(lift_coefficient, density, velocity, area):
    lift = 0.5 * lift_coefficient * density * velocity**2 * area
    return lift
",completed,100.0,"Function Defined
Function Returned the Correct Value
Unit Test Returned: 100
"
142,158,a4_1_buoyancy,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

Write a Python function that calculates the buoyancy force for an object. You
will name your function `calculate_buoyancy`, and it will have the following
parameters (in this order):

  * Submerged Volume
  * Density
  * Gravity

Our function will  **return**  the buoyancy force, which can be computed using
the following equation:

**Fb = Vs × D × g **where Fb is the buoyancy force, Vs is the submerged
volume, D is the density of the fluid the object is submerged in, and g is the
force of gravity.

NOTE: You do NOT need to call the function.


","from cs110 import autograder
import random, math
import a4_1_buoyancy

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    
    if ""calculate_buoyancy"" in dir(a4_1_buoyancy):
        print(""Function Defined"")
        score += 20
        
        volume = round(random.uniform(3, 5), 1)
        density = round(random.uniform(2, 3), 1)
        gravity = round(random.uniform(50, 200), 1)
        buoyancy = volume * density * gravity
        
        if autograder.equals(buoyancy, a4_1_buoyancy.calculate_buoyancy(volume, density, gravity)):
            print(""Function Returned the Correct Value"")
            score += 80
        else:
            print(""calculate_buoyancy(%1.1f, %1.1f, %1.1f) returned %f instead of %f"" %
                  (volume, density, gravity, a4_1_buoyancy.calculate_buoyancy(volume, density, gravity), buoyancy))
        
    else:
        print(""Function Not Defined"")
    
    return score
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
def calculate_buoyancy(submerged_volume, density, gravity):
    return submerged_volume * density * gravity
",completed,100.0,"Function Defined
Function Returned the Correct Value
Unit Test Returned: 100
"
143,159,a4_1_area,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

Write a Python function that calculates the area of a trapazoid. You will name
your function `calculate_area`, and it will have the following parameters (in
this order):

  * Side_A
  * Side_B
  * Height

Our function will  **return**  the area, which can be computed using the
following equation:

A = (a + b) h

NOTE: You do NOT need to call the function.






","from cs110 import autograder
import random, math
import a4_1_area

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    
    if ""calculate_area"" in dir(a4_1_area):
        print(""Function Defined"")
        score += 20
        
        Side_A = round(random.uniform(3, 5), 1)
        Side_B = round(random.uniform(2, 3), 1)
        Height = round(random.uniform(50, 200), 1)
        area = ((Side_A + Side_B) / 2) * Height
        
        if autograder.equals(area, a4_1_area.calculate_area(Side_A,Side_B,Height)):
            print(""Function Returned the Correct Value"")
            score += 80
        else:
            print(""calculate_area(%1.1f, %1.1f, %1.1f) return %f instead of %f"" %
                  (Side_A, Side_B, Height, a4_1_area.calculate_area(Side_A,Side_B,Height), area))
        
    else:
        print(""Function Not Defined"")
    
    return score
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
def calculate_area(Side_A, Side_B, Height):
    return ((Side_A + Side_B) * Height) / 2
",completed,100.0,"Function Defined
Function Returned the Correct Value
Unit Test Returned: 100
"
144,165,a3_6_tests,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been asked to write a program that analyzes scores of a recent
test given to a class. Write a program that gets from the user the number of
tests scored, and gets that many test scores (which you may assume are whole
numbers) from the user. Your program must print out:

  * The average score of all tests.
  * The count of tests that scored lower than the average.



**EXAMPLES:**

  | **Example 1** | **Example 2**  
---|---|---  
**Input** | 3  
75  
90  
88  
  
  
| 5  
86  
79  
90  
90  
100  
**Output** | 84.3  
1 | 89.0  
2  
  



","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_tests.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,,,completed,5.0,"Number of output lines is not quite correct.
Average not found.  Expected:  52.0
Count not found.  Expected:  0
Number of output lines is not quite correct.
Average not found.  Expected:  70.0
Count not found.  Expected:  0
Number of output lines is not quite correct.
Average not found.  Expected:  66.0
Count not found.  Expected:  3
Number of output lines is not quite correct.
Average not found.  Expected:  70.2
Count not found.  Expected:  8
Number of output lines is not quite correct.
Average not found.  Expected:  57.5
Count not found.  Expected:  10
Number of output lines is not quite correct.
Average not found.  Expected:  65.9
Count not found.  Expected:  4
Unit Test Returned: 5.0
"
145,166,a3_6_sami,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been asked to write a program that analyzes the cadet wing's
performance on a recent SAMI. Write a program that gets from the user the
number of squadrons scored, and gets that many squadron SAMI scores (which you
may assume are whole numbers) from the user. Your program must print out:

  * The average score of all squadrons.
  * The count of squadrons that scored higher than the average.



**EXAMPLES:**

  | **Example 1** | **Example 2**  
---|---|---  
**Input** | 3  
75  
90  
88  
  
  
| 5  
86  
79  
90  
90  
100  
**Output** | 84.3  
2 | 89.0  
3  
  





","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_sami.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,,"```
# Get the number of squadrons scored from the user
num_squadrons = int(input(""Enter the number of squadrons scored: ""))

# Initialize variables
total_score = 0
squadron_scores = []

# Get the scores for each squadron and calculate the total score
for i in range(num_squadrons):
    score = int(input(""Enter the score for squadron {}: "".format(i+1)))
    total_score += score
    squadron_scores.append(score)

# Calculate the average score
average_score = total_score / num_squadrons

# Count the number of squadrons that scored higher than the average
count_higher = 0
for score in squadron_scores:
    if score > average_score:
        count_higher += 1

# Print the average score and the count of squadrons that scored higher than the average
print(""The average score of all squadrons: {:.1f}"".format(average_score))
print(""The count of squadrons that scored higher than the average: {}"".format(count_higher))
```
",completed,5.0,"Number of output lines is not quite correct.
Average not found.  Expected:  45.0
Count not found.  Expected:  0
Number of output lines is not quite correct.
Average not found.  Expected:  52.0
Count not found.  Expected:  0
Number of output lines is not quite correct.
Average not found.  Expected:  67.0
Count not found.  Expected:  3
Number of output lines is not quite correct.
Average not found.  Expected:  70.2
Count not found.  Expected:  9
Number of output lines is not quite correct.
Average not found.  Expected:  72.1
Count not found.  Expected:  8
Number of output lines is not quite correct.
Average not found.  Expected:  66.4
Count not found.  Expected:  4
Unit Test Returned: 5.0
"
146,167,a3_6_pushups,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been asked to write a program that analyzes number of pushups done
by a group of cadets. Write a program that gets from the user the number of
people tested, and gets that many pushup scores (which you may assume are
whole numbers) from the user. Your program must print out:

  * The average number of pushups for the group.
  * The count of cadets that scored higher than the average.



**EXAMPLES:**

  | **Example 1** | **Example 2**  
---|---|---  
**Input** | 3  
75  
90  
88  
  
  
| 5  
86  
79  
90  
90  
100  
**Output** | 84.3  
2 | 89.0  
3  
  



","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_pushups.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,,,completed,5.0,"Number of output lines is not quite correct.
Average not found.  Expected:  67.0
Count not found.  Expected:  0
Number of output lines is not quite correct.
Average not found.  Expected:  65.0
Count not found.  Expected:  0
Number of output lines is not quite correct.
Average not found.  Expected:  61.0
Count not found.  Expected:  4
Number of output lines is not quite correct.
Average not found.  Expected:  70.2
Count not found.  Expected:  9
Number of output lines is not quite correct.
Average not found.  Expected:  67.5
Count not found.  Expected:  10
Number of output lines is not quite correct.
Average not found.  Expected:  52.0
Count not found.  Expected:  2
Unit Test Returned: 5.0
"
147,168,a3_6_missiletest,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been asked to write a program that analyzes the results acquired
from several missile tests executed last week. Write a program that gets from
the user the number missile tests preformed, and gets the result from each
test (which you may assume are whole numbers) from the user. Your program must
print out:

  * The average result for the missile tests.
  * The count of missile tests that scored above the average.



**EXAMPLES:**

  | **Example 1** | **Example 2**  
---|---|---  
**Input** | 3  
350  
410  
256  
  
  
| 5  
178  
98  
200  
200  
154  
**Output** | 338.7  
2 | 166.0  
3


","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_missiletest.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
        if base_script == ""flighttest"" and score < average:
            count += 1
        if base_script == ""missiletest"" and score > average:
            count += 1
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,,,completed,5.0,"Number of output lines is not quite correct.
Average not found.  Expected:  43.0
Count not found.  Expected:  0
Number of output lines is not quite correct.
Average not found.  Expected:  76.0
Count not found.  Expected:  0
Number of output lines is not quite correct.
Average not found.  Expected:  60.0
Count not found.  Expected:  3
Number of output lines is not quite correct.
Average not found.  Expected:  70.2
Count not found.  Expected:  9
Number of output lines is not quite correct.
Average not found.  Expected:  72.6
Count not found.  Expected:  5
Number of output lines is not quite correct.
Average not found.  Expected:  72.0
Count not found.  Expected:  3
Unit Test Returned: 5.0
"
148,169,a3_6_flighttest,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been asked to write a program that analyzes the results acquired
from several flight tests executed last week. Write a program that gets from
the user the number flight tests preformed, and gets the result from each
flight (which you may assume are whole numbers) from the user. Your program
must print out:

  * The average result for the flight tests.
  * The count of flight tests that scored below the average.



**EXAMPLES:**

  | **Example 1** | **Example 2**  
---|---|---  
**Input** | 3  
350  
410  
256  
  
  
| 5  
178  
98  
200  
200  
154  
**Output** | 338.7  
1 | 166.0  
2


","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_flighttest.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
        if base_script == ""flighttest"" and score < average:
            count += 1
        
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,,"
num_tests = int(input(""Enter the number of flight tests: ""))

scores = []
for i in range(num_tests):
    score = int(input(""Enter the result from flight test {}: "".format(i+1)))
    scores.append(score)

average = sum(scores) / num_tests
below_average_count = len([score for score in scores if score < average])

print(""Average result for the flight tests:"", average)
print(""Count of flight tests that scored below the average:"", below_average_count)
",completed,10.0,"Number of output lines is correct.
Average not found.  Expected:  39.0
Count not found.  Expected:  0
Number of output lines is correct.
Average not found.  Expected:  62.0
Count not found.  Expected:  0
Number of output lines is correct.
Average not found.  Expected:  66.0
Count not found.  Expected:  2
Number of output lines is correct.
Average not found.  Expected:  70.2
Count not found.  Expected:  8
Number of output lines is correct.
Average not found.  Expected:  75.7
Count not found.  Expected:  2
Number of output lines is correct.
Average not found.  Expected:  63.6
Count not found.  Expected:  2
Unit Test Returned: 10.0
"
149,170,a3_5_star_map,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a table that describes a simple night sky. In
this code, a list (`simple_map`) is populated with characters representing the
location of various astronomical entities (stars, planets, etc).



    
    
    S = Star; St = Satellite; M = Moon; P = Planet; C = Comet; _ = No Major Feature



Write a program that gets two values from the user in the following order:

1) a row, a 1 indicates the Top row and 8 the Bottom row

2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column



Finally, **Print** out the contents of the table at that particular cell.



**HINT:**

  * Your output should be one of the following letters: ""S"", ""St"", ""M"", ""P"", ""C"", or ""_""


# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
star_map = [['M', 'C', '_', '_', '_', '_', 'M', 'P'],
              ['S', 'M', '_', '_', 'P', 'M', 'St', 'St'],
              ['C', '_', '_', 'P', 'M', 'M', 'S', 'M'],
              ['C', 'C', '_', 'C', '_', 'S', '_', 'P'],
              ['M', 'St', '_', 'St', '_', '_', 'P', 'S'],
              ['_', '_', '_', '_', '_', '_', '_', '_'],
              ['_', 'M', '_', '_', 'M', '_', '_', 'S'],
              ['_', '_', '_', '_', 'St', 'St', 'P', 'P']]

#Your code goes here.","import random
from cs110 import autograder

simple_map = [['M', 'C', '_', '_', '_', '_', 'M', 'P'],
              ['S', 'M', '_', '_', 'P', 'M', 'St', 'St'],
              ['C', '_', '_', 'P', 'M', 'M', 'S', 'M'],
              ['C', 'C', '_', 'C', '_', 'S', '_', 'P'],
              ['M', 'St', '_', 'St', '_', '_', 'P', 'S'],
              ['_', '_', '_', '_', '_', '_', '_', '_'],
              ['_', 'M', '_', '_', 'M', '_', '_', 'S'],
              ['_', '_', '_', '_', 'St', 'St', 'P', 'P']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row+1, col+1))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_star_map.py"", [row+1, col+1])

    if simple_map[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", simple_map[row][col], ""\n"")
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0

    if (check_location(0,
                       1)):
        score += 20

    if (check_location(1,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(7,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    return score


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
star_map = [['M', 'C', '_', '_', '_', '_', 'M', 'P'],
              ['S', 'M', '_', '_', 'P', 'M', 'St', 'St'],
              ['C', '_', '_', 'P', 'M', 'M', 'S', 'M'],
              ['C', 'C', '_', 'C', '_', 'S', '_', 'P'],
              ['M', 'St', '_', 'St', '_', '_', 'P', 'S'],
              ['_', '_', '_', '_', '_', '_', '_', '_'],
              ['_', 'M', '_', '_', 'M', '_', '_', 'S'],
              ['_', '_', '_', '_', 'St', 'St', 'P', 'P']]

#Your code goes here.","
# Get the row and column values from the user
row = int(input(""Enter the row (1-8): ""))
column = int(input(""Enter the column (1-8): ""))

# Get the content of the table at the specified cell
content = star_map[row-1][column-1]

# Print out the content
print(content)
```
",completed,0.0,"-----------------------------
Checking row:1 col:2
-----------------------------
Incorrect.  Expected: C 

-----------------------------
Checking row:2 col:4
-----------------------------
Incorrect.  Expected: _ 

-----------------------------
Checking row:8 col:4
-----------------------------
Incorrect.  Expected: _ 

-----------------------------
Checking row:6 col:5
-----------------------------
Incorrect.  Expected: _ 

-----------------------------
Checking row:5 col:8
-----------------------------
Incorrect.  Expected: S 

Unit Test Returned: 0
"
150,171,a3_5_map,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a table that describes a simple landscape. In
this code, a list (`simple_map`) is populated with characters representing the
location of various landmarks (Road, Water, Trees, Stones, Mud).



    
    
    R = Road; W = Water; T = Trees; S = Stones; M = Mud; _ = Grass



Write a program that gets two values from the user in the following order:

1) a row, a 1 indicates the Top row and 8 the Bottom row

2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column



Finally,  **Print  **out the contents of the table at that particular cell.



**HINT:**

  * Your output should be one of the following letters: ""R"", ""W"", ""T"", ""S"", ""M"", or ""_""


# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
simple_map = [['_', 'T', '_', '_', '_', 'R', '_', '_'],
                    ['_', '_', 'T', 'S', 'B', 'R', '_', '_'],
                    ['W', '_', '_', '_', '_', '_', 'R', '_'],
                    ['W', 'W', 'S', '_', '_', 'B', '_', '_'],
                    ['W', '_', '_', 'S', '_', '_', 'B', 'R'],
                    ['_', '_', '_', '_', '_', 'T', '_', '_'],
                    ['_', '_', '_', '_', '_', '_', 'T', '_'],
                    ['R', 'R', 'R', 'R', 'R', '_', '_', '_']]

#Your code goes here.","import random
from cs110 import autograder

simple_map = [['_', 'T', '_', '_', '_', 'R', '_', '_'],
              ['_', '_', 'T', 'S', 'B', 'R', '_', '_'],
              ['W', '_', '_', '_', '_', '_', 'R', '_'],
              ['W', 'W', 'S', '_', '_', 'B', '_', '_'],
              ['W', '_', '_', 'S', '_', '_', 'B', 'R'],
              ['_', '_', '_', '_', '_', 'T', '_', '_'],
              ['_', '_', '_', '_', '_', '_', 'T', '_'],
              ['R', 'R', 'R', 'R', 'R', '_', '_', '_']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row+1, col+1))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_map.py"", [row+1, col+1])

    if simple_map[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", simple_map[row][col], ""\n"")
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0

    if (check_location(0,
                       1)):
        score += 20

    if (check_location(1,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(7,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    return score
# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
simple_map = [['_', 'T', '_', '_', '_', 'R', '_', '_'],
                    ['_', '_', 'T', 'S', 'B', 'R', '_', '_'],
                    ['W', '_', '_', '_', '_', '_', 'R', '_'],
                    ['W', 'W', 'S', '_', '_', 'B', '_', '_'],
                    ['W', '_', '_', 'S', '_', '_', 'B', 'R'],
                    ['_', '_', '_', '_', '_', 'T', '_', '_'],
                    ['_', '_', '_', '_', '_', '_', 'T', '_'],
                    ['R', 'R', 'R', 'R', 'R', '_', '_', '_']]

#Your code goes here.","
# Get row and column from user
row = int(input(""Enter a row number (1-8): ""))
column = int(input(""Enter a column number (1-8): ""))

# Get the value from the table at the specified row and column
cell_content = simple_map[row-1][column-1]

# Print the contents of the cell
print(cell_content)
",completed,0.0,"-----------------------------
Checking row:1 col:2
-----------------------------
Incorrect.  Expected: T 

-----------------------------
Checking row:2 col:5
-----------------------------
Incorrect.  Expected: B 

-----------------------------
Checking row:8 col:1
-----------------------------
Incorrect.  Expected: R 

-----------------------------
Checking row:7 col:1
-----------------------------
Incorrect.  Expected: _ 

-----------------------------
Checking row:5 col:2
-----------------------------
Incorrect.  Expected: _ 

Unit Test Returned: 0
"
151,172,a3_5_chess,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a table that describes a chess board. In this
code, a list (`chess_board`) is populated with characters representing the
location of each of the pieces(Rook, Knight, Bishop,King,Queen,Pawn).



    
    
    R = Rook; N = Knight; B = Bishop; K = King; Q = Queen; P = pawn; _ = Empty



Write a program that gets two values from the user in the following order:

1) a row, a 1 indicates the Top row and 8 the Bottom row

2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column



Finally,  **Print  **out the contents of the table at that particular cell.



**HINT:**

  * Your output should be one of the following letters: ""R"", ""N"", ""B"", ""K"", ""Q"", ""P"", or ""_""


# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
chess_board =      [['R', 'N', '_', 'K', '_', 'B', 'N', 'R'],
                    ['p', 'p', 'p', '_', 'p', 'p', 'p', 'p'],
                    ['_', '_', 'Q', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', 'p', '_', 'B', '_', '_'],
                    ['_', '_', '_', 'p', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', 'p', '_', '_', '_'],
                    ['p', 'p', 'p', '_', '_', 'p', 'p', 'p'],
                    ['R', 'N', 'B', 'K', 'Q', 'B', 'N', 'R']]

#Your code goes here.","import random
from cs110 import autograder

chess_board = [['R', 'N', '_', 'K', '_', 'B', 'N', 'R'],
               ['p', 'p', 'p', '_', 'p', 'p', 'p', 'p'],
               ['_', '_', 'Q', '_', '_', '_', '_', '_'],
               ['_', '_', '_', 'p', '_', 'B', '_', '_'],
               ['_', '_', '_', 'p', '_', '_', '_', '_'],
               ['_', '_', '_', '_', 'p', '_', '_', '_'],
               ['p', 'p', 'p', '_', '_', 'p', 'p', 'p'],
               ['R', 'N', 'B', 'K', 'Q', 'B', 'N', 'R']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row+1, col+1))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_chess.py"", [row+1, col+1])

    if chess_board[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", chess_board[row][col], ""\n"")
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0

    if (check_location(0,
                       2)):
        score += 20

    if (check_location(1,
                       random.randint(0, len(chess_board[0])-1))):
        score += 20

    if (check_location(7,
                       random.randint(0, len(chess_board[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(chess_board)-1),
                       random.randint(0, len(chess_board[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(chess_board)-1),
                       random.randint(0, len(chess_board[0])-1))):
        score += 20

    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
chess_board =      [['R', 'N', '_', 'K', '_', 'B', 'N', 'R'],
                    ['p', 'p', 'p', '_', 'p', 'p', 'p', 'p'],
                    ['_', '_', 'Q', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', 'p', '_', 'B', '_', '_'],
                    ['_', '_', '_', 'p', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', 'p', '_', '_', '_'],
                    ['p', 'p', 'p', '_', '_', 'p', 'p', 'p'],
                    ['R', 'N', 'B', 'K', 'Q', 'B', 'N', 'R']]

#Your code goes here.","
#Get row and column from user
row = int(input(""Enter the row (1-8): ""))
column = int(input(""Enter the column (1-8): ""))

#Get the value from the chess board table
value = chess_board[row-1][column-1]

#Print the value
print(value)
",completed,0.0,"-----------------------------
Checking row:1 col:3
-----------------------------
Incorrect.  Expected: _ 

-----------------------------
Checking row:2 col:4
-----------------------------
Incorrect.  Expected: _ 

-----------------------------
Checking row:8 col:6
-----------------------------
Incorrect.  Expected: B 

-----------------------------
Checking row:5 col:1
-----------------------------
Incorrect.  Expected: _ 

-----------------------------
Checking row:6 col:2
-----------------------------
Incorrect.  Expected: _ 

Unit Test Returned: 0
"
152,173,a3_5_carnival,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a table that describes a simple carnival ring
toss. In this code, a list (`simple_map`) is populated with characters
representing the colors of the bottles.



    
    
    G = Green; B = Blue; P = Purple; R = Red; O = Orange; _ = Clear



Write a program that gets two values from the user in the following order:

1) a row, a 1 indicates the Top row and 8 the Bottom row

2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column



Finally,  **Print  **out the contents of the table at that particular cell.



**HINT:**

  * Your output should be one of the following letters: ""G"", ""B"", ""P"", ""R"", ""O"", or ""_""


# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
simple_map = [['O', '_', '_', 'P', '_', 'R', '_', 'G'],
              ['R', 'O', '_', '_', '_', 'P', '_', '_'],
              ['_', '_', 'O', '_', '_', 'O', 'P', '_'],
              ['R', '_', 'G', '_', '_', '_', '_', 'P'],
              ['B', '_', '_', '_', '_', '_', '_', 'P'],
              ['G', 'R', 'P', 'O', 'O', '_', '_', 'G'],
              ['P', '_', '_', '_', '_', 'G', 'B', '_'],
              ['B', 'R', 'G', 'B', '_', 'G', 'B', 'G']]

#Your code goes here.","import random
from cs110 import autograder

simple_map = [['O', '_', '_', 'P', '_', 'R', '_', 'G'],
              ['R', 'O', '_', '_', '_', 'P', '_', '_'],
              ['_', '_', 'O', '_', '_', 'O', 'P', '_'],
              ['R', '_', 'G', '_', '_', '_', '_', 'P'],
              ['B', '_', '_', '_', '_', '_', '_', 'P'],
              ['G', 'R', 'P', 'O', 'O', '_', '_', 'G'],
              ['P', '_', '_', '_', '_', 'G', 'B', '_'],
              ['B', 'R', 'G', 'B', '_', 'G', 'B', 'G']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row+1, col+1))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_carnival.py"", [row+1, col+1])

    if simple_map[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", simple_map[row][col], ""\n"")
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0

    if (check_location(0,
                       3)):
        score += 20

    if (check_location(1,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(7,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
simple_map = [['O', '_', '_', 'P', '_', 'R', '_', 'G'],
              ['R', 'O', '_', '_', '_', 'P', '_', '_'],
              ['_', '_', 'O', '_', '_', 'O', 'P', '_'],
              ['R', '_', 'G', '_', '_', '_', '_', 'P'],
              ['B', '_', '_', '_', '_', '_', '_', 'P'],
              ['G', 'R', 'P', 'O', 'O', '_', '_', 'G'],
              ['P', '_', '_', '_', '_', 'G', 'B', '_'],
              ['B', 'R', 'G', 'B', '_', 'G', 'B', 'G']]

#Your code goes here.","
row = int(input(""Enter the row number: "")) - 1
col = int(input(""Enter the column number: "")) - 1

print(simple_map[row][col])",completed,0.0,"-----------------------------
Checking row:1 col:4
-----------------------------
Incorrect.  Expected: P 

-----------------------------
Checking row:2 col:7
-----------------------------
Incorrect.  Expected: _ 

-----------------------------
Checking row:8 col:4
-----------------------------
Incorrect.  Expected: B 

-----------------------------
Checking row:4 col:6
-----------------------------
Incorrect.  Expected: _ 

-----------------------------
Checking row:2 col:7
-----------------------------
Incorrect.  Expected: _ 

Unit Test Returned: 0
"
153,174,a3_5_battleship,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a table that describes the board game,
Battleship. In this code, a list (`battleship_board`) is populated with
characters representing the location of each of the game's ship types
(Carrier, Battleship, Submarine, Cruiser, and Destroyer).



    
    
    C = Carrier; B = Battleship; S = Submarine; R = Cruiser; D = Destroyer; _ = Blank



Write a program that gets two values from the user in the following order:

1) a row, a 1 indicates the Top row and 8 the Bottom row

2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column



Finally,  **Print  **out the contents of the table at that particular cell.



**HINT:**

  * Your output should be one of the following letters: ""C"", ""B"", ""S"", ""R"", ""D"", or ""_""


# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
battleship_board = [['_', '_', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', 'C', 'S', 'S', 'S', '_', '_'],
                    ['D', 'D', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', '_', 'R', 'R', 'R'],
                    ['_', '_', '_', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', '_', '_', '_', '_'],
                    ['_', 'B', 'B', 'B', 'B', '_', '_', '_']]

#Your code goes here.","import random
from cs110 import autograder

battleship_board = [['_', '_', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', 'C', 'S', 'S', 'S', '_', '_'],
                    ['D', 'D', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', '_', 'R', 'R', 'R'],
                    ['_', '_', '_', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', '_', '_', '_', '_'],
                    ['_', 'B', 'B', 'B', 'B', '_', '_', '_']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row+1, col+1))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_battleship.py"", [row+1, col+1])

    if battleship_board[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", battleship_board[row][col], ""\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    if check_location(0, 2):
        score += 20
    if check_location(1, random.randint(0, len(battleship_board[0])-1)):
        score += 20
    if check_location(7, random.randint(0, len(battleship_board[0])-1)):
        score += 20
    if check_location(random.randint(0, len(battleship_board)-1),
                      random.randint(0, len(battleship_board[0])-1)):
        score += 20
    if check_location(random.randint(0, len(battleship_board)-1),
                      random.randint(0, len(battleship_board[0])-1)):
        score += 20
    return score


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
battleship_board = [['_', '_', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', 'C', 'S', 'S', 'S', '_', '_'],
                    ['D', 'D', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', '_', 'R', 'R', 'R'],
                    ['_', '_', '_', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', '_', '_', '_', '_'],
                    ['_', 'B', 'B', 'B', 'B', '_', '_', '_']]

#Your code goes here.","
row = int(input(""Enter the row (1-8): ""))
column = int(input(""Enter the column (1-8): ""))

cell_value = battleship_board[row-1][column-1]

print(cell_value)
",completed,0.0,"-----------------------------
Checking row:1 col:3
-----------------------------
Incorrect.  Expected: C 

-----------------------------
Checking row:2 col:8
-----------------------------
Incorrect.  Expected: _ 

-----------------------------
Checking row:8 col:6
-----------------------------
Incorrect.  Expected: _ 

-----------------------------
Checking row:6 col:1
-----------------------------
Incorrect.  Expected: _ 

-----------------------------
Checking row:1 col:2
-----------------------------
Incorrect.  Expected: _ 

Unit Test Returned: 0
"
154,175,a3_4_weights,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a list called list_of_weights. Write a program
that prints out the range ( _i.e.,  _the difference between the max and min
weight)



**EXAMPLE:  
** If, for example, the list contained the values: 103, 110, 115

Your program should print:

    
    
    12




","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_weights.py""


list_of_weights = [100, 369, 115, 284, 267, 122, 367, 361,
                   215, 358, 339, 324, 105, 185, 175, 120,
                   267, 184, 108, 309, 366, 218, 179, 338,
                   313, 370, 245, 390, 102, 126]

max_value = max(list_of_weights) 
min_value = min(list_of_weights)

def verify_code():
    print(""Test 1:  Scanning your solution . . . "", end='')
    
    file = open(STUDENT_FILE, ""r"")
    contents = file.read()
        
    if ""for"" not in contents and ""while"" not in contents and ""max"" not in contents and ""min"" not in contents and ""sort"" not in contents:
        print(""Could not find code that gets the heaviest and lightest weights . . ."")
        return False
    
    print(""Good. You are actually computing the answer."")
    return True



# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if verify_code():
        print(""Test 2:  Checking Output . . . "", end='')
        score += 60
        
        if len(lines) >= 1:           
            if autograder.equals(lines[0], max_value - min_value):
                print(""Range Look Good!"")
                score += 40
            else:
                print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
                
        else:
            print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
list_of_weights = [103, 110, 115]

range_of_weights = max(list_of_weights) - min(list_of_weights)
print(range_of_weights)
","failed: must be real number, not str",0.0,
155,176,a3_4_run,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a list called list_of_run_times. Write a
program that prints out the range ( _i.e.,  _the difference between the max
and min run time)



**EXAMPLE:  
** If, for example, the list contained the values: 3, 10, 15

Your program should print:

    
    
    12




","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_run.py""

list_of_run_times = [42.5, 44.2, 42.5, 45.8, 40.8, 42.4, 44.6, 36.5, 44.4,
                     35.1, 40.4, 47.1, 48.0, 37.0, 46.0, 44.5, 37.3, 42.4,
                     43.5, 41.6, 41.8, 47.6, 40.4, 35.0, 38.7, 39.5, 42.0,
                     39.6, 41.1, 37.6]

max_value = max(list_of_run_times) 
min_value = min(list_of_run_times)

def verify_code():
    print(""Test 1:  Scanning your solution . . . "", end='')
    
    file = open(STUDENT_FILE, ""r"")
    contents = file.read()
        
    if ""for"" not in contents and ""while"" not in contents and ""max"" not in contents and ""min"" not in contents and ""sort"" not in contents:
        print(""Could not find code that gets the fastest and slowest run times . . ."")
        return False
    
    print(""Good. You are actually computing the answer."")
    return True



# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if verify_code():
        print(""Test 2:  Checking Output . . . "", end='')
        score += 60
        
        if len(lines) >= 1:           
            if autograder.equals(lines[0], max_value - min_value):
                print(""Range Look Good!"")
                score += 40
            else:
                print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
                
        else:
            print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
list_of_run_times = [3, 10, 15]
print(max(list_of_run_times) - min(list_of_run_times))
","failed: must be real number, not str",0.0,
156,177,a3_4_ptscores,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a list called list_of_pt_scores. Write a
program that prints out the range ( _i.e.,  _the difference between the max
and min pt scores)



**EXAMPLE:  
** If, for example, the list contained the values: 3, 10, 15

Your program should print:

    
    
    12




","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_ptscores.py""

list_of_pt_scores = [98.6,78.5,100,67.7,88,72.6,45,82.5,86.5,79.9,100,98.6,99,55.4,94.5,91.2,90,79.5]

max_value = max(list_of_pt_scores) 
min_value = min(list_of_pt_scores)

def verify_code():
    print(""Test 1:  Scanning your solution . . . "", end='')
    
    file = open(STUDENT_FILE, ""r"")
    contents = file.read()
        
    if ""for"" not in contents and ""while"" not in contents and ""max"" not in contents and ""min"" not in contents and ""sort"" not in contents:
        print(""Could not find code that gets the highest and lowest pt scores . . ."")
        return False
    
    print(""Good. You are actually computing the answer."")
    return True



# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if verify_code():
        print(""Test 2:  Checking Output . . . "", end='')
        score += 60
        
        if len(lines) >= 1:           
            if autograder.equals(lines[0], max_value - min_value):
                print(""Range Look Good!"")
                score += 40
            else:
                print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
                
        else:
            print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
list_of_pt_scores = [3, 10, 15]
print(max(list_of_pt_scores) - min(list_of_pt_scores))
","failed: must be real number, not str",0.0,
157,178,a3_4_ages,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a list called list_of_ages. Write a program
that prints out the range ( _i.e.,  _the difference between the max and min
ages)



**EXAMPLE:  
** If, for example, the list contained the values: 50, 64, 72

Your program should print:

    
    
    22




","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_ages.py""

list_of_ages = [58, 79, 69, 87, 93, 70, 49, 82, 53, 67, 80, 61, 61,
                     83, 72, 80, 88, 89, 59, 77, 66, 82, 56, 59, 86, 74,
                     61, 45, 70, 67]

max_value = max(list_of_ages) 
min_value = min(list_of_ages)

def verify_code():
    print(""Test 1:  Scanning your solution . . . "", end='')
    
    file = open(STUDENT_FILE, ""r"")
    contents = file.read()
        
    if ""for"" not in contents and ""while"" not in contents and ""max"" not in contents and ""min"" not in contents and ""sort"" not in contents:
        print(""Could not find code that gets the youngest and oldest ages . . ."")
        return False
    
    print(""Good. You are actually computing the answer."")
    return True



# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if verify_code():
        print(""Test 2:  Checking Output . . . "", end='')
        score += 60
        
        if len(lines) >= 1:           
            if autograder.equals(lines[0], max_value - min_value):
                print(""Range Look Good!"")
                score += 40
            else:
                print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
                
        else:
            print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,"
list_of_ages = [50, 64, 72]

age_range = max(list_of_ages) - min(list_of_ages)
print(age_range)
","failed: must be real number, not str",0.0,
158,179,a3_3_ships,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a list called `list_of_ship_classes`. Write a
program that prints out each of the items in this list (one item per line).



**EXAMPLE:  
** If, for example, the list contained the items: ""A"", ""B"", ""C""

Your program should print:

    
    
    A  
    B  
    C



**NOTE:**

  * You must use a loop to complete this task. 




# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_ship_classes = ['Ford', 'Ticonderoga', 'Arleigh Burke', 'Virginia', 'Zumwalt', 'REDACTED_NAME', 'Legend']

#Your code goes here.","from cs110 import autograder
import random, math

list_of_ship_classes = ['Ford', 'Ticonderoga', 'Arleigh Burke', 'Virginia', 'Zumwalt', 'Hamilton', 'Legend']

def solution():
    result = []
    
    for item in list_of_ship_classes:
        result.append(item)
    
    return result
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""a3_3_ships.py"", [])
    expected_output = solution()
    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    return round(100 / len(expected_output) * num_matches, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_ship_classes = ['Ford', 'Ticonderoga', 'Arleigh Burke', 'Virginia', 'Zumwalt', 'REDACTED_NAME', 'Legend']

#Your code goes here.","
for ship_class in list_of_ship_classes:
    print(ship_class)
",completed,0.0,"Unit Test Returned: 0.0
"
159,180,a3_3_pizza,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a list called `list_of_pizza_toppings`. Write a
program that prints out each of the items in this list (one item per line).



**EXAMPLE:  
** If, for example, the list contained the items: ""A"", ""B"", ""C""

Your program should print:

    
    
    A  
    B  
    C



**NOTE:**

  * You must use a loop to complete this task. 


# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_pizza_toppings = ['Pepporoni', 'Sausage', 'Onion', 'Mushroom', 'Peppers', 'Chicken', 'Hamburger']

#Your code goes here.","from cs110 import autograder
import random, math

list_of_pizza_toppings = ['Pepporoni', 'Sausage', 'Onion', 'Mushroom', 'Peppers', 'Chicken', 'Hamburger']

def solution():
    result = []
    
    for item in list_of_pizza_toppings:
        result.append(item)
    
    return result
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""a3_3_pizza.py"", [])
    expected_output = solution()
    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    return round(100 / len(expected_output) * num_matches, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_pizza_toppings = ['Pepporoni', 'Sausage', 'Onion', 'Mushroom', 'Peppers', 'Chicken', 'Hamburger']

#Your code goes here.",,completed,0.0,"Unit Test Returned: 0.0
"
160,181,a3_3_aircraft,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** You have been provided with a list called `list_of_aircraft_classes`. Write
a program that prints out each of the items in this list (one item per line).



**EXAMPLE:  
** If, for example, the list contained the items: ""A"", ""B"", ""C""

Your program should print:

    
    
    A  
    B  
    C



**NOTE:**

  * You must use a loop to complete this task. 


# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_aircraft_classes = ['Attack','Cargo','Drone', 'Fighter', 'Unmanned','Trainer','Tanker']

#Your code goes here.","from cs110 import autograder
import random, math

list_of_aircraft_classes = ['Attack','Cargo','Drone', 'Fighter', 'Unmanned','Trainer','Tanker']

def solution():
    result = []
    
    for item in list_of_aircraft_classes:
        result.append(item)
    
    return result
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""a3_3_aircraft.py"", [])
    expected_output = solution()
    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    return round(100 / len(expected_output) * num_matches, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_aircraft_classes = ['Attack','Cargo','Drone', 'Fighter', 'Unmanned','Trainer','Tanker']

#Your code goes here.","
for aircraft_class in list_of_aircraft_classes:
    print(aircraft_class)
",completed,0.0,"Unit Test Returned: 0.0
"
161,182,a3_2_jets,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with a list called `list_of_aircraft`. Write a program
that gets two aircraft designator names from the user. Then append the
aircraft (in the same order they were provided) to the list.



**NOTE:**

  * Do not touch the code we provide you. Otherwise, the test cases will not work.




","from cs110 import autograder
import random, math

list_of_aircraft = ['F-16', 'F-15', 'F-22', 'F-35', 'B-1', 'B-2']
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(list_of_aircraft)-2), len(list_of_aircraft)]
    score = 0

    new_aircraft = ['C-5', 'C-130', 'AC-130', 'U-2', 'KC-135', ""F-105"", ""C-21""]
    
    random_ac1 = new_aircraft[random.randint(0, len(new_aircraft)-1)]
    new_aircraft.remove(random_ac1)
    random_ac2 = new_aircraft[random.randint(0, len(new_aircraft)-1)]
    
    list_of_aircraft.append(random_ac1)
    list_of_aircraft.append(random_ac2)

    output, error = autograder.run_script(""a3_2_jets.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')
    
    if lines[len(lines)-2].strip() == list_of_aircraft[len(list_of_aircraft)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())
    
    if lines[len(lines)-1].strip() == list_of_aircraft[len(list_of_aircraft)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,"
list_of_aircraft = []

aircraft1 = input(""Enter first aircraft designator name: "")
aircraft2 = input(""Enter second aircraft designator name: "")

list_of_aircraft.append(aircraft1)
list_of_aircraft.append(aircraft2)

print(list_of_aircraft)
",completed,100.0,"Second to Last Element in List is Correct!
Last Element in List is Correct!
Unit Test Returned: 100
"
162,183,a3_2_grammys,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with a list called `grammy_list`. Write a program that
gets two new Grammy awards categories from the user. Then append the
categories (in the same order they were provided) to the list.



**NOTE:**

  * Do not touch the code we provide you. Otherwise, the test cases will not work.


","from cs110 import autograder
import random, math

grammy_list = ['Pop', 'Global', 'Rock', 'Rap', 'Jazz', 'R&B', 'Comedy']

             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(grammy_list)-2), len(grammy_list)]
    score = 0

    new_categories = [""Dance"", ""Country"", ""Classical"", ""Gospel"", ""Alternative"", ""Soundtrack"", ""Instrumental"", ""Latin"", ""Reggae""]
    
    random_ac1 = new_categories[random.randint(0, len(new_categories)-1)]
    new_categories.remove(random_ac1)
    random_ac2 = new_categories[random.randint(0, len(new_categories)-1)]
    
    grammy_list.append(random_ac1)
    grammy_list.append(random_ac2)

    output, error = autograder.run_script(""a3_2_grammys.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')
    
    if lines[len(lines)-2].strip() == grammy_list[len(grammy_list)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())
    
    if lines[len(lines)-1].strip() == grammy_list[len(grammy_list)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,,completed,0.0,"Incorrect Second to Last Element in List.  Expected: Soundtrack instead of 
Incorrect Last Element in List.  Expected: Alternative instead of 
Unit Test Returned: 0
"
163,184,a3_2_departments,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with a list called `department_list`. Write a program
that gets two new departments from the user. Then append the departments (in
the same order they were provided) to the list.



**NOTE:**

  * Do not touch the code we provide you. Otherwise, the test cases will not work.


","from cs110 import autograder
import random, math

department_list = ['Science','Engineering','Humanities','Social Science']

             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(department_list)-2), len(department_list)]
    score = 0

    new_departments = ['Education', 'E-Sports', '8-Bit Gaming', 'Midi Music', 'General Studies', ""Deep Space"", ""Department of Motor Vehicles""]
    
    random_ac1 = new_departments[random.randint(0, len(new_departments)-1)]
    new_departments.remove(random_ac1)
    random_ac2 = new_departments[random.randint(0, len(new_departments)-1)]
    
    department_list.append(random_ac1)
    department_list.append(random_ac2)

    output, error = autograder.run_script(""a3_2_departments.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')
    
    if lines[len(lines)-2].strip() == department_list[len(department_list)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())
    
    if lines[len(lines)-1].strip() == department_list[len(department_list)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,"
department_list = ['Marketing', 'Engineering', 'Finance']

# Get the two new departments from the user
new_department1 = input(""Enter the first new department: "")
new_department2 = input(""Enter the second new department: "")

# Append the new departments to the department_list
department_list.append(new_department1)
department_list.append(new_department2)

department_list
",completed,0.0,"Incorrect Second to Last Element in List.  Expected: Education instead of 
Incorrect Last Element in List.  Expected: 8-Bit Gaming instead of 
Unit Test Returned: 0
"
164,185,a3_2_cities,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with a list called `list_of_cities`. Write a program
that gets two new cities from the user. Then append the cities (in the same
order they were provided) to the list.



**NOTE:**

  * Do not touch the code we provide you. Otherwise, the test cases will not work.


","from cs110 import autograder
import random, math

list_of_cities = ['Tokyo', 'Delhi', 'Shanghai', 'Cairo', 'Mumbai', 'Bejing', 'Dhaka']

             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(list_of_cities)-2), len(list_of_cities)]
    score = 0

    new_cities = [""Osaka"", ""Karachi"", ""Istanbul"", ""Kolkata"", ""Manila"", ""Lagos"", ""Moscow"", ""Lahore"", ""Paris""]
    
    random_ac1 = new_cities[random.randint(0, len(new_cities)-1)]
    new_cities.remove(random_ac1)
    random_ac2 = new_cities[random.randint(0, len(new_cities)-1)]
    
    list_of_cities.append(random_ac1)
    list_of_cities.append(random_ac2)

    output, error = autograder.run_script(""a3_2_cities.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')
    
    if lines[len(lines)-2].strip() == list_of_cities[len(list_of_cities)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())
    
    if lines[len(lines)-1].strip() == list_of_cities[len(list_of_cities)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,"
list_of_cities = ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Philadelphia']

city1 = input(""Enter the first city: "")
city2 = input(""Enter the second city: "")

list_of_cities.append(city1)
list_of_cities.append(city2)

print(list_of_cities)
",completed,100.0,"Second to Last Element in List is Correct!
Last Element in List is Correct!
Unit Test Returned: 100
"
165,186,a3_2_cars,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with a list called `list_of_cars`. Write a program that
gets two new cars from the user. Then append the cars (in the same order they
were provided) to the list.



**NOTE:**

  * Do not touch the code we provide you. Otherwise, the test cases will not work.


","from cs110 import autograder
import random, math

list_of_cars = ['Viper', 'Highlander', 'Audi A8', 'Tundra', 'Porsche', 'Mazada', 'Fiesta']

             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(list_of_cars)-2), len(list_of_cars)]
    score = 0

    new_cars = [""Ford"", ""Maserati"", ""BMW"", ""Cheetah"", ""Scion"", ""Lambo"", ""Pilot"", ""Civic"", ""Corolla""]
    
    random_ac1 = new_cars[random.randint(0, len(new_cars)-1)]
    new_cars.remove(random_ac1)
    random_ac2 = new_cars[random.randint(0, len(new_cars)-1)]
    
    list_of_cars.append(random_ac1)
    list_of_cars.append(random_ac2)

    output, error = autograder.run_script(""a3_2_cars.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')
    
    if lines[len(lines)-2].strip() == list_of_cars[len(list_of_cars)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())
    
    if lines[len(lines)-1].strip() == list_of_cars[len(list_of_cars)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,"
list_of_cars = ['Toyota', 'Honda', 'Ford']

car1 = input(""Enter the first car: "")
car2 = input(""Enter the second car: "")

list_of_cars.append(car1)
list_of_cars.append(car2)

print(list_of_cars)
",completed,100.0,"Second to Last Element in List is Correct!
Last Element in List is Correct!
Unit Test Returned: 100
"
166,187,a3_1_medals,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with a list called `list_of_medals` that contains the
current Air Force and Space Force approved decorations. Write a program that
prints a single, specified decoration from the list. Your program shall take a
number via user input used to identify which decoration to print. For example,
if the user types a 3, you should print out the third item.



**NOTE:**

  * You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)




","from cs110 import autograder
import random, math

soln_list = [
                    'Congressional Medal of Honor', 'Air Force Cross',	'Air Force Distinguished Service Medal',
                    ""Airman's Medal"",	""Aerial Achievement Medal"",	""Air Force Commendation Medal"",
                    ""Air Force Achievement Medal"", 'Air Force Combat Action Medal',	'Combat Readiness Medal',
                    'Air and Space Campaign Medal',	'Nuclear Deterrence Operations Service Medal',
                    'Remote Combat Effects Campaign Medal'
            ] 
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_medals.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == soln_list[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(soln_list[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,"
list_of_medals = [
    ""Air Force Cross"",
    ""Airman's Medal"",
    ""Air Force Achievement Medal"",
    ""Air Force Combat Action Medal"",
    ""Distinguished Flying Cross"",
    ""Legion of Merit"",
    ""Medal of Honor"",
    ""Silver Star"",
    ""Bronze Star Medal"",
    ""Purple Heart""
]

user_input = int(input(""Enter a number to select a decoration: "")) - 1
print(list_of_medals[user_input])
",completed,0.0,"----------------------------------------------------------
Testing item #1: 
----------------------------------------------------------
Unexpected Output (Expected Congressional Medal of Honor)

----------------------------------------------------------
Testing item #6: 
----------------------------------------------------------
Unexpected Output (Expected Air Force Commendation Medal)

----------------------------------------------------------
Testing item #12: 
----------------------------------------------------------

Unit Test Returned: 0.0
"
167,188,a3_1_countries,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with a list called `list_of_coalition_countries`. Write
a program that prints a single, specified country from the list. Your program
shall take a number via user input used to identify which country to print.
For example, if the user types a 3, you should print out the third item.



**NOTE:**

  * You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)




","from cs110 import autograder
import random, math

soln_list = ['United States', 'United Kingdom', 'Australia', 'South Korea', 'Czech Republic', 'Romania', 'El Salvador', 'Estonia', 
             'Bulgaria', 'Moldova', 'Albania', 'Ukraine', 'Denmark', 'Tonga', 'Azerbaijan', 'Singapore', 'Bosnia', 'Macedonia',
             'Latvia', 'Poland', 'Kazakhstan']
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_countries.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == soln_list[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(soln_list[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,"
list_of_coalition_countries = [""United States"", ""United Kingdom"", ""Canada"", ""Germany"", 
                              ""France"", ""Australia"", ""Italy"", ""Japan""]

index = int(input(""Enter the index of the country to print: ""))
print(list_of_coalition_countries[index-1])
",completed,33.333333333333336,"----------------------------------------------------------
Testing item #1: 
----------------------------------------------------------
Looks Good!

----------------------------------------------------------
Testing item #4: 
----------------------------------------------------------
Unexpected Output (Expected South Korea)

----------------------------------------------------------
Testing item #21: 
----------------------------------------------------------

Unit Test Returned: 33.333333333333336
"
168,189,a3_1_commands,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with a list called `list_of_usaf_commands`. Write a
program that prints a single, specified command organization from the list.
Your program shall take a number via user input used to identify which command
organization to print. For example, if the user types a 3, you should print
out the third item.



**NOTE:**

  * You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)


","from cs110 import autograder
import random, math

list_of_usaf_commands = ['ACC','AETC','AFGSC','AFMC',
                         'AFRC','AFSOC','AMC','PACAF',
                         'USAFE']
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(list_of_usaf_commands)-2), len(list_of_usaf_commands)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_commands.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == list_of_usaf_commands[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != list_of_usaf_commands[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(list_of_usaf_commands[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,"
list_of_usaf_commands = ['Command 1', 'Command 2', 'Command 3', 'Command 4', 'Command 5']

command_number = int(input(""Enter the command number: ""))

print(list_of_usaf_commands[command_number - 1])
",completed,0.0,"----------------------------------------------------------
Testing item #1: 
----------------------------------------------------------
Unexpected Output (Expected ACC)

----------------------------------------------------------
Testing item #5: 
----------------------------------------------------------
Unexpected Output (Expected AFRC)

----------------------------------------------------------
Testing item #9: 
----------------------------------------------------------

Unit Test Returned: 0.0
"
169,190,a3_1_afbs,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with a list called `list_of_bases`. Write a program
that prints a single, specified base from the list. Your program shall take a
number via user input used to identify which base to print. For example, if
the user types a 3, you should print out the third item.



**NOTE:**

  * You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)


","from cs110 import autograder
import random, math

soln_list = ['Travis', 'Eglin', 'Offutt', 'Minot', 'Luke', 'Malmstrom', 'Ellsworth', 'Patrick', 'Moody', 'Barksdale',
             'Maxwell', 'Mountain Home', 'Keesler', 'Lackland', 'Kelly', 'Andrews', 'Tinker', 'Peterson', 'Buckley',
             'Hill', 'Dyess', 'Wright-Patterson', 'Nellis']
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_afbs.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == soln_list[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(soln_list[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,"
list_of_bases = [""A"", ""C"", ""G"", ""T""]
base_number = int(input(""Enter the base number: ""))
print(list_of_bases[base_number - 1])
",completed,0.0,"----------------------------------------------------------
Testing item #1: 
----------------------------------------------------------
Unexpected Output (Expected Travis)

----------------------------------------------------------
Testing item #4: 
----------------------------------------------------------
Unexpected Output (Expected Minot)

----------------------------------------------------------
Testing item #23: 
----------------------------------------------------------

Unit Test Returned: 0.0
"
170,196,a2_6_virus,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You are writing a program that will help you decide if there are too many
people at a restaurant for you to dine safely. Your program will ask for the
number of people in the restaurant. It will then ask for the distance between
yourself and each of the people (in feet, which do not have to be whole
numbers). Your program will keep track of how many people are within 6 feet of
you (inclusive). Your program will then print one of the following statements:

**# of People within 6 Feet** | **0** | **1-2** | **> 2**  
---|---|---|---  
**Output** | All Clear | Warning | Find Another Place  
  


**EXAMPLES:**

  | **Example 1** | **Example 2**  
---|---|---  
**INPUT** | 3  
5.7  
10.2  
12.4 | 2  
7.0  
15.1  
**OUTPUT** | Warning | All Clear


","from cs110 import autograder
import random, math

def run_test(num_violating, num_people):    
    inputs = [num_people]
    
    for i in range(num_people):
        if i < num_violating:
            if (i + 1 == num_violating):
                inputs.append(6)
            else:
                inputs.append(round(random.uniform(0, 6), 1))
        else:
            inputs.append(round(random.uniform(7, 20), 1))

    # Generates Expected Answer
    if num_violating == 0:
        answer = ""All Clear""
    elif num_violating <= 2:
        answer = ""Warning""
    else:
        answer = ""Find Another Place""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_6_virus.py"", inputs)
    
    print(""Testing when"", num_violating, ""out of"", num_people, ""are violating . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(2, random.randint(2, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
num_people = int(input(""Enter the number of people in the restaurant: ""))

within_6_feet = 0

for _ in range(num_people):
    distance = float(input(""Enter the distance between yourself and the person (in feet): ""))
    if distance <= 6:
        within_6_feet += 1

if within_6_feet == 0:
    print(""All Clear"")
elif within_6_feet <= 2:
    print(""Warning"")
else:
    print(""Find Another Place"")
",completed,100.0,"Testing when 0 out of 1 are violating . . . 
  Inputs: [1, 19.8]
  Result: CORRECT!

Testing when 1 out of 2 are violating . . . 
  Inputs: [2, 6, 10.1]
  Result: CORRECT!

Testing when 2 out of 4 are violating . . . 
  Inputs: [4, 2.3, 6, 10.1, 19.7]
  Result: CORRECT!

Testing when 3 out of 4 are violating . . . 
  Inputs: [4, 1.1, 5.6, 6, 7.9]
  Result: CORRECT!

Unit Test Returned: 100.0
"
171,197,a2_6_traffic_lights,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

The City Manager is having a traffic problem and asked you are to write a
program that will determine whether or not to activate a newly installed
alternate traffic light schedule to help alleviate traffic throughout the city
during peak traffic hours. Your program will ask for the number of traffic
""time periods"" to analyze. It will then ask for the traffic throughput (in
average number of cars per minute, which does not have to be a whole number)
for each ""time period"". Your program will keep track of how many ""time
periods"" are considered heavy traffic, as defined as 15 cars per minutes or
more (inclusive). Your program will then print one of the following
statements:

**# of ""time periods"" of heavy traffic** | **0** | **1-2** | **> 2**  
---|---|---|---  
**Output** | Regular Schedule | Prepare Activation | Activate New Schedule  
  
**EXAMPLES:**

  | **Example 1** | **Example 2**  
---|---|---  
**INPUT** |

3

12.8

15.0

6.7

|

3

17.3

15.1

19.2  
  
**OUTPUT** | Prepare Activation | Activate New Schedule


","from cs110 import autograder
import random, math

def run_test(num_over, traffic):    
    inputs = [traffic]
    
    for i in range(traffic):
        if i < num_over:
            if (i + 1 == num_over):
                inputs.append(15)
            else:
                inputs.append(round(random.uniform(15, 30), 1))
        else:
            inputs.append(round(random.uniform(1, 15), 1))

    # Generates Expected Answer
    if num_over == 0:
        answer = ""Regular Schedule""
    elif num_over <= 2:
        answer = ""Prepare Activation""
    else:
        answer = ""Activate New Schedule""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_6_traffic_lights.py"", inputs)
    
    print(""Testing when"", num_over, ""out of"", traffic, ""\""time periods\"" are experiencing heavy traffic . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(2, random.randint(2, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,"
num_periods = int(input())
heavy_traffic_count = 0

for _ in range(num_periods):
    throughput = float(input())
    if throughput >= 15.0:
        heavy_traffic_count += 1

if heavy_traffic_count > 2:
    print(""Activate New Schedule"")
elif heavy_traffic_count >= 1:
    print(""Prepare Activation"")
else:
    print(""Regular Schedule"")
",completed,75.0,"Testing when 0 out of 5 ""time periods"" are experiencing heavy traffic . . . 
  Inputs: [5, 7.9, 8.8, 11.3, 4.9, 2.5]
  Result: CORRECT!

Testing when 1 out of 2 ""time periods"" are experiencing heavy traffic . . . 
  Inputs: [2, 15, 3.1]
  Result: CORRECT!

Testing when 2 out of 5 ""time periods"" are experiencing heavy traffic . . . 
  Inputs: [5, 20.9, 15, 13.7, 1.8, 15.0]
  Result: INCORRECT. Expected: 'Prepare Activation' instead of 'Activate New Schedule
'

Testing when 3 out of 5 ""time periods"" are experiencing heavy traffic . . . 
  Inputs: [5, 22.3, 15.1, 15, 12.3, 13.7]
  Result: CORRECT!

Unit Test Returned: 75.0
"
172,198,a2_6_network_traffic,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

The 10th Communications Squadron (10 CS) recently detected a higher volume of
network traffic on the base network. The 10 CS Director of Operations asked
you are to write a program that will determine whether or not to activate an
additional Network Load Balancer (NLB) to improve the network performance
during these peak loads. Your program will ask for the number of network
traffic ""snapshots"" to analyze. It will then ask for the network load (in
Gigabits per second (Gbps), which does not have to be a whole number) for each
""snapshot"". Your program will keep track of how many ""snapshots"" are
designated as high volume network traffic, defined as loads greater than 512
Gbps. Your program will then print one of the following statements:

**# of ""snapshots"" with high network traffic volume** | **0** | **1-2** | **>
2**  
---|---|---|---  
**Output** | Ops Normal | Initialize NLB | Activate NLB  
  
**EXAMPLES:**

  | **Example 1** | **Example 2**  
---|---|---  
**INPUT** |

3

512.0

738.5

199.6

|

3

498.6

372.9

512.0  
  
**OUTPUT** | Initialize NLB | Ops Normal


","from cs110 import autograder
import random, math

def run_test(num_over, traffic):    
    inputs = [traffic]
    
    for i in range(traffic):
        if i < num_over:
            if (i + 1 == num_over):
                inputs.append(512.1)
            else:
                inputs.append(round(random.uniform(512, 1024), 1))
        else:
            inputs.append(round(random.uniform(256, 512), 1))

    # Generates Expected Answer
    if num_over == 0:
        answer = ""Ops Normal""
    elif num_over <= 2:
        answer = ""Initialize NLB""
    else:
        answer = ""Activate NLB""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_6_network_traffic.py"", inputs)
    
    print(""Testing when"", num_over, ""out of"", traffic, ""\""snaphots\"" have high volume of network traffic . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(2, random.randint(2, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,"
# number of snapshots
n = int(input())

# initialize count variable
count = 0

# loop through the snapshots
for i in range(n):
    # network load for each snapshot
    load = float(input())
    
    # check if the load is greater than 512 Gbps
    if load > 512:
        count += 1

# print the appropriate output based on the count
if count == 0:
    print(""Ops Normal"")
elif count <= 2:
    print(""Initialize NLB"")
else:
    print(""Activate NLB"")
",completed,100.0,"Testing when 0 out of 5 ""snaphots"" have high volume of network traffic . . . 
  Inputs: [5, 466.4, 477.9, 463.5, 483.7, 442.9]
  Result: CORRECT!

Testing when 1 out of 5 ""snaphots"" have high volume of network traffic . . . 
  Inputs: [5, 512.1, 492.4, 469.8, 457.1, 312.1]
  Result: CORRECT!

Testing when 2 out of 5 ""snaphots"" have high volume of network traffic . . . 
  Inputs: [5, 653.3, 512.1, 318.3, 465.9, 323.8]
  Result: CORRECT!

Testing when 3 out of 3 ""snaphots"" have high volume of network traffic . . . 
  Inputs: [3, 659.6, 577.7, 512.1]
  Result: CORRECT!

Unit Test Returned: 100.0
"
173,199,a2_6_grades,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You are writing a program that will help your instructors analyze student
performance on an exam. Your program will ask for the number of students in
the class. It will then ask for the grade of each student (this grade does not
have to be a whole number). Your program will keep track of how many students
received less than 70 on an assignment. Your program will then print one of
the following statements.



**# of scores below 70** | **0** | **1-2** | **> 2**  
---|---|---|---  
**Output** | Excellent | Satisfactory | Unsatisfactory  
  


**EXAMPLES:**

  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**INPUT** |

4  
75.6  
80.2  
95.5  
71.0

|

3  
68.2  
72.9  
95.4

|

3  
67.0  
65.5  
68.3  
  
**OUTPUT** | Excellent | Satisfactory | Unsatisfactory  
  



","from cs110 import autograder
import random, math

def run_test(num_failures, num_papers):    
    inputs = [num_papers]
    
    for i in range(num_papers):
        if i < num_failures:
            inputs.append(round(random.uniform(0, 70), 1))
        else:
            if (i == num_failures):
                inputs.append(70)
            else:
                inputs.append(round(random.uniform(70, 100), 1))

    # Generates Expected Answer
    if num_failures == 0:
        answer = ""Excellent""
    elif num_failures >= 1 and num_failures <= 2:
        answer = ""Satisfactory""
    else:
        answer = ""Unsatisfactory""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_6_grades.py"", inputs)
    
    print(""Testing when"", num_failures, ""out of"", num_papers, ""failed . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(2, random.randint(2, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,"
def analyze_grades():
    num_students = int(input(""Enter the number of students: ""))
    grades = []
    count_below_70 = 0
    
    for i in range(num_students):
        grade = float(input(""Enter the grade of student {}: "".format(i+1)))
        grades.append(grade)
        
        if grade < 70:
            count_below_70 += 1
            
    if count_below_70 == 0:
        print(""Excellent"")
    elif count_below_70 <= 2:
        print(""Satisfactory"")
    else:
        print(""Unsatisfactory"")
        
analyze_grades()
",completed,100.0,"Testing when 0 out of 4 failed . . . 
  Inputs: [4, 70, 96.3, 92.2, 82.7]
  Result: CORRECT!

Testing when 1 out of 2 failed . . . 
  Inputs: [2, 25.3, 70]
  Result: CORRECT!

Testing when 2 out of 4 failed . . . 
  Inputs: [4, 30.2, 13.1, 70, 80.3]
  Result: CORRECT!

Testing when 3 out of 4 failed . . . 
  Inputs: [4, 50.8, 56.0, 50.7, 70]
  Result: CORRECT!

Unit Test Returned: 100.0
"
174,200,a2_6_gameday,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

The Academy Athletic Director asked you are to write a program that will
determine whether or not a football game in progress should be delayed based
on current weather conditions. Your program will ask for the number of
lightning strikes occurred in the immediate area in the past thirty minutes.
It will then ask for the distance from Falcon Stadium to each lightning strike
(in miles, which do not have to be whole numbers). Your program will keep
track of how many lightning strikes are within 15 miles of the stadium
(inclusive). Your program will then print one of the following statements:

**# of lightning strikes in immediate area** | **0** | **1-3** | **> 3**  
---|---|---|---  
**Output** | All Clear | Weather Warning | Game Delay  
  
**EXAMPLES:**

  | **Example 1** | **Example 2**  
---|---|---  
**INPUT** |

4

15.0

13.2

6.5

9.8

|

3

17.8

15.1

19.0

  
  
**OUTPUT** | Game Delay | All Clear  
  



","from cs110 import autograder
import random, math

def run_test(num_close, num_strikes):    
    inputs = [num_strikes]
    
    for i in range(num_strikes):
        if i < num_close:
            if (i + 1 == num_close):
                inputs.append(15)
            else:
                inputs.append(round(random.uniform(0, 15), 1))
        else:
            inputs.append(round(random.uniform(15, 50), 1))

    # Generates Expected Answer
    if num_close == 0:
        answer = ""All Clear""
    elif num_close <= 3:
        answer = ""Weather Warning""
    else:
        answer = ""Game Delay""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_6_gameday.py"", inputs)
    
    print(""Testing when"", num_close, ""out of"", num_strikes, ""\""strikes\"" are are close . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(2, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(2, 5))):
        num_passed += 1
    
    if (run_test(2, random.randint(3, 5))):
        num_passed += 1
    
    if (run_test(4, random.randint(4, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,,completed,0.0,"Testing when 0 out of 3 ""strikes"" are are close . . . 
  Inputs: [3, 29.9, 33.9, 15.4]
  Result: INCORRECT. Expected: 'All Clear' instead of ''

Testing when 1 out of 2 ""strikes"" are are close . . . 
  Inputs: [2, 15, 19.1]
  Result: INCORRECT. Expected: 'Weather Warning' instead of ''

Testing when 2 out of 3 ""strikes"" are are close . . . 
  Inputs: [3, 4.0, 15, 41.7]
  Result: INCORRECT. Expected: 'Weather Warning' instead of ''

Testing when 4 out of 5 ""strikes"" are are close . . . 
  Inputs: [5, 14.1, 2.5, 9.3, 15, 39.2]
  Result: INCORRECT. Expected: 'Game Delay' instead of ''

Unit Test Returned: 0.0
"
175,201,a2_6_combat,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You are writing a program that will determine whether or not a fighter pilot
will need to make an evasive action when enemy aircraft are near. Your program
will ask for the number of enemy planes in the area. It will then ask for the
distance between the pilot and each of the enemy planes (in miles, which do
not have to be whole numbers). Your program will keep track of how many enemy
planes are within 20 miles of the pilot (inclusive). Your program will then
print one of the following statements:

**# of Enemy Planes in Area** | **0** | **1-2** | **> 2**  
---|---|---|---  
**Output** | All Clear | Warning | Evasive Action  
  


**EXAMPLES:**

  | **Example 1** | **Example 2**  
---|---|---  
**INPUT** |

3

10.5

17.2

23.7

|

3

21.4

34.0

27.9  
  
**OUTPUT** | Warning | All Clear


","from cs110 import autograder
import random, math

def run_test(num_close, num_planes):    
    inputs = [num_planes]
    
    for i in range(num_planes):
        if i < num_close:
            if (i + 1 == num_close):
                inputs.append(20)
            else:
                inputs.append(round(random.uniform(0, 20), 1))
        else:
            inputs.append(round(random.uniform(20, 50), 1))

    # Generates Expected Answer
    if num_close == 0:
        answer = ""All Clear""
    elif num_close <= 2:
        answer = ""Warning""
    else:
        answer = ""Evasive Action""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_6_combat.py"", inputs)
    
    print(""Testing when"", num_close, ""out of"", num_planes, ""are close . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(2, random.randint(2, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,,completed,0.0,"Testing when 0 out of 2 are close . . . 
  Inputs: [2, 27.6, 25.8]
  Result: INCORRECT. Expected: 'All Clear' instead of ''

Testing when 1 out of 1 are close . . . 
  Inputs: [1, 20]
  Result: INCORRECT. Expected: 'Warning' instead of ''

Testing when 2 out of 5 are close . . . 
  Inputs: [5, 15.9, 20, 38.5, 34.9, 26.2]
  Result: INCORRECT. Expected: 'Warning' instead of ''

Testing when 3 out of 3 are close . . . 
  Inputs: [3, 8.2, 9.6, 20]
  Result: INCORRECT. Expected: 'Evasive Action' instead of ''

Unit Test Returned: 0.0
"
176,202,a2_4_slash,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with program that gets the following values from the
user:

  * **slash_separated_string** : A slash separated string  
Example: johnson81/4081/30no86/cj4081/Craig/Johnson/Depot/London  
  

  * **column_to_print** : A number representing the value to print from the slash separated string  
NOTE: 0 represents the first value in the slash separated string, 1 represents
the second, etc



Write a Python program that:

  1. Splits the **slash separated string**
  2. Prints the column_to_printth value.



**EXAMPLE:**

If the user types:

    
    
    johnson81/4081/30no86/cj4081/Craig/Johnson/Depot/London  
    2

Your program should then output:

    
    
    30no86




","from cs110 import autograder
import random, math

def solution(string, column_num):
    
    columns = string.split('/')
    return columns[column_num]
    

def test_passed():

    score = 0

    # Generates the Test Set
    random_strings = [""booker12/9012/12se74/rb9012/Rachel/Booker/Sales,Manchester"",
                      ""grey07/2070/04ap67/lg2070/Laura/Grey/Depot/London"",
                      ""johnson81/4081/30no86/cj4081/Craig/Johnson/Depot/London"",
                      ""jenkins46/9346/14ju73/mj9346/Mary/Jenkins/Engineering/Manchester"",
                      ""smith79/5079/09ja61/js5079/Jamie/Smith/Engineering/Manchester""]
    
    random_column   = random.randint(0, 6)
    random_string   = random_strings[random.randint(0, len(random_strings)-1)]
    output, error   = autograder.run_script(""a2_4_slash.py"", [ random_string, random_column ])
    expected_output = solution(random_string, random_column)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT.  Expected:"", expected_output)
        return 0.0

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,"
# Get input values from user
slash_separated_string = input(""Enter the slash separated string: "")
column_to_print = int(input(""Enter the column number to print: ""))

# Split the slash separated string
split_values = slash_separated_string.split('/')

# Print the column_to_printth value
print(split_values[column_to_print])
",completed,100.0,"CORRECT
Unit Test Returned: 100.0
"
177,203,a2_4_semic,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with program that gets the following values from the
user:

  * **semicolon_separated_string** : A semicolon separated string  
Example: booker12;9012;12se74;rb9012;Rachel;Booker;Sales;Manchester  
  

  * **column_to_print** : A number representing the value to print from the semicolon separated string  
NOTE: 0 represents the first value in the semicolon separated string, 1
represents the second, etc



Write a Python program that:

  1. Splits the **semicolon separated string**
  2. Prints the column_to_printth value.



**EXAMPLE:**

If the user types:

    
    
    booker12;9012;12se74;rb9012;Rachel;Booker;Sales;Manchester  
    2

Your program should then output:

    
    
    12se74




","from cs110 import autograder
import random, math

def solution(string, column_num):
    
    columns = string.split(';')
    return columns[column_num]
    

def test_passed():

    score = 0

    # Generates the Test Set
    random_strings = [""booker12;9012;12se74;rb9012;Rachel;Booker;Sales;Manchester"",
                      ""grey07;2070;04ap67;lg2070;Laura;Grey;Depot;London"",
                      ""johnson81;4081;30no86;cj4081;Craig;Johnson;Depot;London"",
                      ""jenkins46;9346;14ju73;mj9346;Mary;Jenkins;Engineering;Manchester"",
                      ""smith79;5079;09ja61;js5079;Jamie;Smith;Engineering;Manchester""]
    
    random_column   = random.randint(0, 6)
    random_string   = random_strings[random.randint(0, len(random_strings)-1)]
    output, error   = autograder.run_script(""a2_4_semic.py"", [ random_string, random_column ])
    expected_output = solution(random_string, random_column)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT.  Expected:"", expected_output)
        return 0.0

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,,completed,0.0,"INCORRECT.  Expected: Engineering
Unit Test Returned: 0.0
"
178,204,a2_4_dash,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with program that gets the following values from the
user:

  * **dash_separated_string** : A dash separated string  
Example: johnson81-4081-30no86-cj4081-Craig-Johnson-Depot-London  
  

  * **column_to_print** : A number representing the value to print from the dash separated string  
NOTE: 0 represents the first value in the dash separated string, 1 represents
the second, etc



Write a Python program that:

  1. Splits the **dash separated string**
  2. Prints the column_to_printth value.



**EXAMPLE:**

If the user types:

    
    
    johnson81-4081-30no86-cj4081-Craig-Johnson-Depot-London  
    2

Your program should then output:

    
    
    30no86




","from cs110 import autograder
import random, math

def solution(string, column_num):
    
    columns = string.split('-')
    return columns[column_num]
    

def test_passed():

    score = 0

    # Generates the Test Set
    random_strings = [""booker12-9012-12se74-rb9012-Rachel-Booker-Sales-Manchester"",
                      ""grey07-2070-04ap67-lg2070-Laura-Grey-Depot-London"",
                      ""johnson81-4081-30no86-cj4081-Craig-Johnson-Depot-London"",
                      ""jenkins46-9346-14ju73-mj9346-Mary-Jenkins-Engineering-Manchester"",
                      ""smith79-5079-09ja61-js5079-Jamie-Smith-Engineering-Manchester""]
    
    random_column   = random.randint(0, 6)
    random_string   = random_strings[random.randint(0, len(random_strings)-1)]
    output, error   = autograder.run_script(""a2_4_dash.py"", [ random_string, random_column ])
    expected_output = solution(random_string, random_column)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT.  Expected:"", expected_output)
        return 0.0

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,"
dash_separated_string = input(""Enter a dash separated string: "")
column_to_print = int(input(""Enter the column number to print: ""))

split_string = dash_separated_string.split(""-"")
output = split_string[column_to_print]

print(output)
",completed,100.0,"CORRECT
Unit Test Returned: 100.0
"
179,205,a2_4_comma,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with program that gets the following values from the
user:

  * **comma_separated_string** : A comma separated string  
Example: booker12,9012,12se74,rb9012,Rachel,Booker,Sales,Manchester  
  

  * **column_to_print** : A number representing the value to print from the comma separated string  
NOTE: 0 represents the first value in the comma separated string, 1 represents
the second, etc



Write a Python program that:

  1. Splits the **comma separated** **string**
  2. Prints the column_to_printth value



**EXAMPLE:**

If the user types:

    
    
    booker12,9012,12se74,rb9012,Rachel,Booker,Sales,Manchester  
    2

Your program should then output:

    
    
    12se74




","from cs110 import autograder
import random, math

def solution(string, column_num):
    
    columns = string.split(',')
    return columns[column_num]
    

def test_passed():

    score = 0

    # Generates the Test Set
    random_strings = [""booker12,9012,12se74,rb9012,Rachel,Booker,Sales,Manchester"",
                      ""grey07,2070,04ap67,lg2070,Laura,Grey,Depot,London"",
                      ""johnson81,4081,30no86,cj4081,Craig,Johnson,Depot,London"",
                      ""jenkins46,9346,14ju73,mj9346,Mary,Jenkins,Engineering,Manchester"",
                      ""smith79,5079,09ja61,js5079,Jamie,Smith,Engineering,Manchester""]
    
    random_column   = random.randint(0, 6)
    random_string   = random_strings[random.randint(0, len(random_strings)-1)]
    output, error   = autograder.run_script(""a2_4_comma.py"", [ random_string, random_column ])
    expected_output = solution(random_string, random_column)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT.  Expected:"", expected_output)
        return 0.0

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,"
# Get inputs from the user
comma_separated_string = input(""Enter comma separated string: "")
column_to_print = int(input(""Enter column number to print: ""))

# Split the comma separated string
values = comma_separated_string.split(',')

# Check if the column_to_print is within the range of values
if column_to_print < len(values):
    # Print the column_to_printth value
    print(values[column_to_print])
else:
    print(""Invalid column number"")
",completed,100.0,"CORRECT
Unit Test Returned: 100.0
"
180,206,a2_4_colon,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with program that gets the following values from the
user:

  * **colon_separated_string** : A colon separated string  
Example: jones78:4273:24px47:kj4273:Karyl:Jones:Accounts:Essex  
  

  * **column_to_print** : A number representing the value to print from the colon separated string  
NOTE: 0 represents the first value in the colon separated string, 1 represents
the second, etc



Write a Python program that:

  1. Splits the **colon separated string**
  2. Prints the column_to_printth value.



**EXAMPLE:**

If the user types:

    
    
    jones78:4273:24px47:kj4273:Karyl:Jones:Accounts:Essex  
    2

Your program should then output:

    
    
    24px47




","from cs110 import autograder
import random, math

def solution(string, column_num):
    
    columns = string.split(':')
    return columns[column_num]
    

def test_passed():

    score = 0

    # Generates the Test Set
    random_strings = [""booker12:9012:12se74:rb9012:Rachel:Booker:Sales:Manchester"",
                      ""grey07:2070:04ap67:lg2070:Laura:Grey:Depot:London"",
                      ""johnson81:4081:30no86:cj4081:Craig:Johnson:Depot:London"",
                      ""jenkins46:9346:14ju73:mj9346:Mary:Jenkins:Engineering:Manchester"",
                      ""smith79:5079:09ja61:js5079:Jamie:Smith:Engineering:Manchester""]
    
    random_column   = random.randint(0, 6)
    random_string   = random_strings[random.randint(0, len(random_strings)-1)]
    output, error   = autograder.run_script(""a2_4_colon.py"", [ random_string, random_column ])
    expected_output = solution(random_string, random_column)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT.  Expected:"", expected_output)
        return 0.0

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,"
# Get the colon separated string from the user
colon_separated_string = input(""Enter the colon separated string: "")

# Get the column to print from the user
column_to_print = int(input(""Enter the column to print: ""))

# Split the colon separated string into a list of values
values = colon_separated_string.split("":"")

# Print the specified column value
print(values[column_to_print])
",completed,100.0,"CORRECT
Unit Test Returned: 100.0
"
181,207,a2_3_twenty_one,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with program that gets a number from the user and
stores it in a variable called  **starting_number**.

Write a program that prints all of the numbers between  **starting_number**
and  **0**  (inclusive), counting down by **21** each time.



For example, if the user types **85** , your program should print:

    
    
    85  
    64  
    43  
    22  
    1

Similarly, if the user types  **51** , your program should print:

    
    
    51  
    30  
    9  
      
    

You may assume that the user will only enter positive numbers.



**HINT:**

  * This problem can be solved using either a  **for**  or  **while**  loop.


","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 21
    
    return result


def test_passed():    
    score = 0
    random_number = 85 + 21 * random.randint(1, 20)
    
    output, error = autograder.run_script(""a2_3_twenty_one.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    else:
        print(""INCORRECT.  Expected:"")
        print(expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
starting_number = int(input(""Enter a number: ""))

while starting_number >= 0:
    print(starting_number)
    starting_number -= 21
",completed,100.0,"CORRECT
Unit Test Returned: 100
"
182,208,a2_3_seventeen,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with program that gets a number from the user and
stores it in a variable called **starting_number**.  

Write a program that prints all of the numbers between **starting_number** and
**0** (inclusive), counting down by **17** each time.



For example, if the user types **45** , your program should print:

    
    
    45  
    28  
    11

Similarly, if the user types **51** , your program should print:

    
    
    51  
    34  
    17  
    0

You may assume that the user will only enter positive numbers.



**HINT:**

  * This problem can be solved using either a **for** or **while** loop.


","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 17
    
    return result


def test_passed():    
    score = 0
    random_number = 85 + 17 * random.randint(1, 20)
    
    output, error = autograder.run_script(""a2_3_seventeen.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    else:
        print(""INCORRECT.  Expected:"")
        print(expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"INCORRECT.  Expected:
119
102
85
68
51
34
17
0

Unit Test Returned: 0
"
183,209,a2_3_fourty_two,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with program that gets a number from the user and
stores it in a variable called  **starting_number**.

Write a program that prints all of the numbers between  **starting_number**
and  **0**  (inclusive), counting down by **42** each time.



For example, if the user types  **228** , your program should print:

    
    
    228  
    186  
    144  
    102  
    60  
    18

Similarly, if the user types **106** , your program should print:

    
    
    106  
    64  
    22

You may assume that the user will only enter positive numbers.



**HINT:**

  * This problem can be solved using either a  **for**  or  **while**  loop.


","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 42
    
    return result


def test_passed():    
    score = 0
    random_number = 85 + 42 * random.randint(1, 20)
    
    output, error = autograder.run_script(""a2_3_fourty_two.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    else:
        print(""INCORRECT.  Expected:"")
        print(expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
starting_number = int(input(""Enter a number: ""))

while starting_number >= 0:
    print(starting_number)
    starting_number -= 42
",completed,100.0,"CORRECT
Unit Test Returned: 100
"
184,210,a2_3_countdown,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with program that gets a number from the user and
stores it in a variable called  **starting_number**.

Write a program that prints all of the numbers between  **starting_number**
and **0** (inclusive), counting down by **13** each time.



For example, if the user types **45** , your program should print:

    
    
    45  
    32  
    19  
    6

Similarly, if the user types **39** , your program should print:

    
    
    39  
    26  
    13  
    0

You may assume that the user will only enter positive numbers.



**HINT:**

  * This problem can be solved using either a  **for**  or  **while**  loop.


","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 13
    
    return result


def test_passed():    
    score = 0
    random_number = 85 + 13 * random.randint(1, 20)
    
    output, error = autograder.run_script(""a2_3_countdown.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    else:
        print(""INCORRECT.  Expected:"")
        print(expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
starting_number = int(input(""Enter a number: ""))

while starting_number >= 0:
    print(starting_number)
    starting_number -= 13
",completed,100.0,"CORRECT
Unit Test Returned: 100
"
185,211,a2_3_19,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with program that gets a number from the user and
stores it in a variable called  **starting_number**.

Write a program that prints all of the numbers between  **starting_number**
and **0** (inclusive), counting down by **19** each time.



For example, if the user types **45** , your program should print:

    
    
    45  
    26  
    7

Similarly, if the user types **57** , your program should print:

    
    
    57  
    38  
    19  
    0  
      
    

You may assume that the user will only enter positive numbers.



**HINT:**

  * This problem can be solved using either a  **for**  or  **while**  loop.


","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 19
    
    return result


def test_passed():    
    score = 0
    random_number = 85 + 19 * random.randint(1, 20)
    
    output, error = autograder.run_script(""a2_3_19.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    else:
        print(""INCORRECT.  Expected:"")
        print(expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
starting_number = int(input(""Enter a number: ""))

for num in range(starting_number, -1, -19):
    print(num)
",completed,100.0,"CORRECT
Unit Test Returned: 100
"
186,212,a2_2_unladen,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

The airspeed velocity of an unladen swallow can be estimated using the
following formula:  
  

`SPEED = 3 * F * A`



In this formula:

  * **F** is the number of wing flaps per minute (integer)
  * **A** is the distance the wing travels (up and down) per wing flap (floating point number in meters)



Write a function called **speed_of_unladen_swallow** that takes **F** and
**A** as parameters (in that order), and **returns** the speed in meters per
minute.



**NOTES:**

  * You do NOT need to call this function. Simply define it.




","from cs110 import autograder
import a2_2_unladen

def solution(S, A):
    return 3 * S * A


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'speed_of_unladen_swallow' in dir(a2_2_unladen):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'speed_of_unladen_swallow' in dir(a2_2_unladen) and \
        abs(a2_2_unladen.speed_of_unladen_swallow(15, 0.22) - solution(15, 0.22)) < 0.001:
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
def speed_of_unladen_swallow(F, A):
    return 3 * F * A
",completed,100.0,"Feedback:
Function Defined
Function Returns Correct Value
Unit Test Returned: 100
"
187,213,a2_2_stride,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You can calculate a person's speed using the following formula:

`Speed = Stride * SPM * .011`



In this formula:

  * **Stride** in inches (float)
  * **SPM** is strides per minute (integer)



Write a function called **person_speed** that takes **Stride**  and **SPM**
as parameters (in that order), and **returns** the speed.



**NOTES:**

  * You do NOT need to call this function. Simply define it


","from cs110 import autograder
import a2_2_stride

def solution(S, SPM):
    return S * SPM * .011


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'person_speed' in dir(a2_2_stride):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'person_speed' in dir(a2_2_stride) and a2_2_stride.person_speed(32, 60) == solution(32, 60):
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
def person_speed(Stride, SPM):
    return Stride * SPM * .011
",completed,100.0,"Feedback:
Function Defined
Function Returns Correct Value
Unit Test Returned: 100
"
188,214,a2_2_speed,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You can calculate how fast a vehicle is moving in feet per minute using the
following formula:  
  

`SPEED = RPM * Cir / 12`



In this formula:

  * **RPM** is the rotations per minute of the wheel (integer)
  * **Cir** is the Circumference of the wheel (floating point number in inches)



Write a function called **speed_fpm** that takes **RPM** and **Cir** as
parameters (in that order), and **returns** the speed in feet per minute.



**NOTES:**

  * You do NOT need to call this function. Simply define it.


","from cs110 import autograder
import a2_2_speed

def solution(RPM, Cir):
    return RPM * Cir / 12


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'speed_fpm' in dir(a2_2_speed):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'speed_fpm' in dir(a2_2_speed) and a2_2_speed.speed_fpm(10, 6.6) == solution(10, 6.6):
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
def speed_fpm(RPM, Cir):
    SPEED = RPM * Cir / 12
    return SPEED
",completed,100.0,"Feedback:
Function Defined
Function Returns Correct Value
Unit Test Returned: 100
"
189,215,a2_2_hp,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM** **STATEMENT:  
**

You can calculate a car's horsepower by using the following formula:

`Horsepower = RPM * Torque / 5252`



In this formula:

  * **RPM** is rotations per minute (integer)
  * **Torque**  in foot pounds (floating point number)



Write a function called  **horsepower**  that takes  **RPM**  and  **Torque**
as parameters (in that order), and  **returns** the calculated horsepower.



**NOTES:**

  * You do NOT need to call this function. Simply define it


","from cs110 import autograder
import a2_2_hp

def solution(RPM, Torque):
    return RPM*Torque/5252


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'horsepower' in dir(a2_2_hp):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'horsepower' in dir(a2_2_hp) and a2_2_hp.horsepower(4000, 600) == solution(4000, 600):
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
def horsepower(RPM, Torque):
    return RPM * Torque / 5252
",completed,100.0,"Feedback:
Function Defined
Function Returns Correct Value
Unit Test Returned: 100
"
190,216,a2_2_bmi,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You can calculate a person's body mass index using the following formula:  
  

`BMI = Weight / Height2 * 703`



In this formula:

  * **height** in inches (integer)
  * **weight** in pounds (floating point number)



Write a function called **body_mass_index** that takes **height** and
**weight** as parameters (in that order), and **returns**  the body mass
index.



**NOTES:**

  * You do NOT need to call this function. Simply define it


","from cs110 import autograder
import a2_2_bmi

def solution(H, W):
    return W/(H**2) * 703


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'body_mass_index' in dir(a2_2_bmi):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'body_mass_index' in dir(a2_2_bmi) and a2_2_bmi.body_mass_index(15, 0.22) == solution(15, 0.22):
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
def body_mass_index(height, weight):
    return weight / (height ** 2) * 703
",completed,100.0,"Feedback:
Function Defined
Function Returns Correct Value
Unit Test Returned: 100
"
191,217,a2_1_surface,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with a function called calculate_surface, which takes
two parameters:

  * **radius**
  * **Pi**

Call this function and pass it **5**  for **radius** , and
**3.141592653589793** for **Pi**. Store the result in a variable called
**result**. Do not print. Simply call the function and store the returned
value in the variable **result**.


","from cs110 import autograder
from a2_1_surface import *  

def calculate_surface(radius, Pi):
    return 4*Pi*radius**2


def test_passed():
    solution = calculate_surface(5,  3.141592653589793 )
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
        return 50
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
    



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def calculate_surface(radius, Pi):
    return Pi * radius**2

result = calculate_surface(5, 3.141592653589793)
",completed,50.0,"Feedback:
FAILED.  Variable 'result' has the wrong value 78.53981633974483
Unit Test Returned: 50
"
192,218,a2_1_future_value,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with a function called calculate_future_value, which
takes two parameters:

  * **present_value**
  * **years**

Call this function and pass it **50000**  for **present_value** , and  **25
**for  **years**. Store the result in a variable called  **result**. Do not
print. Simply call the function and store the returned value in the variable
**result**.


","from cs110 import autograder
from a2_1_future_value import *  

def calculate_future_value(present_value, years):
    return present_value * (1 + 0.05/12) ** (years * 12)


def test_passed():
    solution = calculate_future_value(50000, 25)
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
        return 50
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    test_case_result = test_passed()
    print(""Unit Test Returned:"", test_case_result)",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def calculate_future_value(present_value, years):
    future_value = present_value * (1 + 0.08) ** years
    return future_value

result = calculate_future_value(50000, 25)
",completed,50.0,"Feedback:
FAILED.  Variable 'result' has the wrong value 342423.7598109664
Unit Test Returned: 50
"
193,219,a2_1_equation,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with a function called calculate_equation, which takes
two parameters:

  * **value**
  * **C**

Call this function and pass it **355000** for **value** , and **2.99 * 10**
**8**  for **C**. Store the result in a variable called **result.** Do not
print. Simply call the function, and store the returned value in the variable
**result**.


","from cs110 import autograder
from a2_1_equation import *  

def calculate_equation(value):
    C = (2.99*10**8)
    return value * (1.0 / (1 - (value**2)/(C**2))**0.5)


def test_passed():
    solution = calculate_equation(355000)
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
        return 50
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    test_case_result = test_passed()
    print(""Unit Test Returned:"", test_case_result)",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"Here's the Python code solution to the problem:

```python
def calculate_equation(value, C):
    return value * C

value = 355000
C = 2.99 * 10**8
result = calculate_equation(value, C)
```

Note: The given problem statement doesn't provide the implementation details of the calculate_equation function. The solution assumes that there is already a function defined with the provided name and parameters.","failed: unterminated string literal (detected at line 1) (a2_1_equation.py, line 1)",0.0,
194,220,a2_1_calculate,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with a function called calculate_equation, which takes
two parameters:

  * **value**
  * **C**

Call this function and pass it  **278**  for  **value** , and  **6.4 * 2 10**
for  **C**. Store the result in a variable called  **result**. Do not print.
Simply call the function, and store the returned value in the variable
**result**.


","from cs110 import autograder
from a2_1_calculate import *  

def calculate_equation(value):
    C =  6.4*2**10
    return value * (1.0 / (1 - (value**2)/(C**2))**0.5)


def test_passed():
    solution = calculate_equation(278)
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
        return 50
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    ans = test_passed()
    print(""Unit Test Returned:"", ans)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def calculate_equation(value, C):
    return value * C

result = calculate_equation(278, 6.4e10)
",completed,50.0,"Feedback:
FAILED.  Variable 'result' has the wrong value 17792000000000.0
Unit Test Returned: 50
"
195,221,a2_1_calculate_volume,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You have been provided with a function called calculate_volume, which takes
two parameters:

  * **radius**
  * **Pi**

Call this function and pass it **15**  for  **radius** , and
**3.141592653589793  **for  **Pi**. Store the result in a variable called
**result**. Do not print. Simply call the function and store the returned
value in the variable  **result**.


","from cs110 import autograder
from a2_1_calculate_volume import *  

def calculate_volume(radius, pi):
    return pi * 4/3 * radius **3


def test_passed():
    solution = calculate_volume(15, 3.141592653589793)
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
        return 50
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    test_case_result = test_passed()
    print(""Unit Test Returned:"", test_case_result)",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def calculate_volume(radius, Pi):
    return (4/3) * Pi * (radius ** 3)

result = calculate_volume(15, 3.141592653589793)
",completed,100.0,"Feedback:
PASSED
Unit Test Returned: 100
"
196,222,a1_7_pilot_quals,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

C-130 Pilot qualifications usually depend on a pilot's flight experience in
terms of flight hours.

**C-130 Pilot Qualification** | **Flight Hours**  
---|---  
Upgrade Pilot | 600  
Aircraft Commander | 800  
Formation Lead | 1000  
Instructor Pilot | 1250  
Evaluator Pilot | 1500  
  
  
Write a Python program that asks the user to enter the number of flight hours
they currently have (does not need to be a whole number). Then, referencing
the table above, print out all qualifications they should have achieved in the
aircraft (one per line). If the their experience in the C-130 is more than 600
flight hours, output ""Co-Pilot"".



**EXAMPLES:**

  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input** | 1996 | 1156.7 | 535.4  
**Output** |

Upgrade Pilot  
Aircraft Commander  
Formation Lead  
Instructor Pilot  
Evaluator Pilot

|

Upgrade Pilot  
Aircraft Commander  
Formation Lead

| Co-Pilot  
  
NOTE: The qualifications can be listed in any order, so long as only the ones
in range are printed.


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(hours):
    result = """"

    if hours < 600:
        result += ""Co-Pilot\n""

    if hours >= 600:
        result += ""Upgrade Pilot\n""

    if hours >= 800:
        result += ""Aircraft Commander\n""
        
    if hours >= 1000:
        result += ""Formation Lead\n""

    if hours >=1250:
        result += ""Instructor Pilot\n""

    if hours >= 1500:
        result += ""Evaluator Pilot\n""

    
    return result.strip().split('\n')


def run_test(hours):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", hours, ""hours"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_7_pilot_quals.py"", [hours], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(hours)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 600), 1))
    run_test(600)
    run_test(round(random.uniform(600, 799), 1))
    run_test(800)
    run_test(round(random.uniform(800, 999), 1))
    run_test(1000)
    run_test(round(random.uniform(1000, 1249), 1))
    run_test(1250)
    run_test(round(random.uniform(1250, 1499), 1))
    run_test(1500)
    run_test(2750)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
flight_hours = float(input(""Enter the number of flight hours: ""))

if flight_hours >= 600:
  print(""Upgrade Pilot"")
if flight_hours >= 800:
  print(""Aircraft Commander"")
if flight_hours >= 1000:
  print(""Formation Lead"")
if flight_hours >= 1250:
  print(""Instructor Pilot"")
if flight_hours >= 1500:
  print(""Evaluator Pilot"")
if flight_hours > 600:
  print(""Co-Pilot"")
",completed,9.1,"------------------------------
Test 1 - 71.9 hours
------------------------------
Expecting Co-Pilot  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 2 - 600 hours
------------------------------
Expecting Upgrade Pilot  . . . FOUND!
SUCCESS!

------------------------------
Test 3 - 690.9 hours
------------------------------
Expecting Upgrade Pilot  . . . FOUND!
Problems Detected - Your output has more lines than expected.

------------------------------
Test 4 - 800 hours
------------------------------
Expecting Upgrade Pilot  . . . FOUND!
Expecting Aircraft Commander  . . . FOUND!
Problems Detected - Your output has more lines than expected.

------------------------------
Test 5 - 917.4 hours
------------------------------
Expecting Upgrade Pilot  . . . FOUND!
Expecting Aircraft Commander  . . . FOUND!
Problems Detected - Your output has more lines than expected.

------------------------------
Test 6 - 1000 hours
------------------------------
Expecting Upgrade Pilot  . . . FOUND!
Expecting Aircraft Commander  . . . FOUND!
Expecting Formation Lead  . . . FOUND!
Problems Detected - Your output has more lines than expected.

------------------------------
Test 7 - 1023.6 hours
------------------------------
Expecting Upgrade Pilot  . . . FOUND!
Expecting Aircraft Commander  . . . FOUND!
Expecting Formation Lead  . . . FOUND!
Problems Detected - Your output has more lines than expected.

------------------------------
Test 8 - 1250 hours
------------------------------
Expecting Upgrade Pilot  . . . FOUND!
Expecting Aircraft Commander  . . . FOUND!
Expecting Formation Lead  . . . FOUND!
Expecting Instructor Pilot  . . . FOUND!
Problems Detected - Your output has more lines than expected.

------------------------------
Test 9 - 1285.4 hours
------------------------------
Expecting Upgrade Pilot  . . . FOUND!
Expecting Aircraft Commander  . . . FOUND!
Expecting Formation Lead  . . . FOUND!
Expecting Instructor Pilot  . . . FOUND!
Problems Detected - Your output has more lines than expected.

------------------------------
Test 10 - 1500 hours
------------------------------
Expecting Upgrade Pilot  . . . FOUND!
Expecting Aircraft Commander  . . . FOUND!
Expecting Formation Lead  . . . FOUND!
Expecting Instructor Pilot  . . . FOUND!
Expecting Evaluator Pilot  . . . FOUND!
Problems Detected - Your output has more lines than expected.

------------------------------
Test 11 - 2750 hours
------------------------------
Expecting Upgrade Pilot  . . . FOUND!
Expecting Aircraft Commander  . . . FOUND!
Expecting Formation Lead  . . . FOUND!
Expecting Instructor Pilot  . . . FOUND!
Expecting Evaluator Pilot  . . . FOUND!
Problems Detected - Your output has more lines than expected.

Unit Test Returned: 9.1
"
197,223,a1_7_payload,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:**

The USAF is known for its massive cargo transport capabilities. Below are the
names of 5 aircraft, as well as their maximum payload capacity



**Cargo Aircraft**

|

**Maximum Load (inclusive, in Lbs. )**  
  
---|---  
  
C-5 Galaxy

|

285000  
  
C-17 Globemaster

|

170900  
  
KC-10 Extender

|

169000  
  
C-130 Hercules

|

42000  
  
V-22 Osprey

|

6000  
  
  
Write a Python program that asks the user to enter the payload weight (in
Lbs.) that needs to be moved. Then, referencing the table, print out all of
the Aircraft that could potentially carry that payload (one per line). If no
aircraft can carry the payload, output ""Too Heavy for Airlift"".



**EXAMPLES:**

  |

**Example 1**

|

**Example 2**

|

**Example 3**  
  
---|---|---|---  
  
**Input**

|

150000

|

250000

|

300000  
  
**Output**

|

C-5 Galaxy

C-17 Globemaster

KC-10 Extender

|

C-5 Galaxy

|

Too Heavy for Airlift  
  
NOTE: The aircraft can be listed in any order, so long as only the ones
capable of the lift are printed.


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(payload_weight):
    result = """"
    
    if payload_weight <= 6000:
        result += ""V-22 Osprey\n""

    if payload_weight <= 42000:
        result += ""C-130 Hercules\n""
        
    if payload_weight <= 169000:
        result += ""KC-10 Extender\n""

    if payload_weight <= 170900:
        result += ""C-17 Globemaster\n""

    if payload_weight <= 285000:
        result += ""C-5 Galaxy\n""

    if payload_weight > 285000:
        result += ""Too Heavy for Airlift\n""
    
    return result.strip().split('\n')


def run_test(payload_weight):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", payload_weight, ""lbs"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_7_payload.py"", [payload_weight], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(payload_weight)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 5999), 1))
    run_test(6000)
    run_test(round(random.uniform(6001, 41999), 1))
    run_test(42000)
    run_test(round(random.uniform(42001, 168999), 1))
    run_test(169000)
    run_test(round(random.uniform(169001, 170899), 1))
    run_test(170900)
    run_test(round(random.uniform(170901, 284999), 1))
    run_test(285000)
    run_test(300000)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
payload = int(input(""Enter the payload weight (in Lbs.): ""))

if payload <= 6000:
    print(""V-22 Osprey"")
if payload <= 42000:
    print(""C-130 Hercules"")
if payload <= 169000:
    print(""KC-10 Extender"")
if payload <= 170900:
    print(""C-17 Globemaster"")
if payload <= 285000:
    print(""C-5 Galaxy"")

if payload > 285000:
    print(""Too Heavy for Airlift"")
",completed,100.0,"------------------------------
Test 1 - 2489.1 lbs
------------------------------
Expecting V-22 Osprey  . . . FOUND!
Expecting C-130 Hercules  . . . FOUND!
Expecting KC-10 Extender  . . . FOUND!
Expecting C-17 Globemaster  . . . FOUND!
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 2 - 6000 lbs
------------------------------
Expecting V-22 Osprey  . . . FOUND!
Expecting C-130 Hercules  . . . FOUND!
Expecting KC-10 Extender  . . . FOUND!
Expecting C-17 Globemaster  . . . FOUND!
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 3 - 24458.5 lbs
------------------------------
Expecting C-130 Hercules  . . . FOUND!
Expecting KC-10 Extender  . . . FOUND!
Expecting C-17 Globemaster  . . . FOUND!
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 4 - 42000 lbs
------------------------------
Expecting C-130 Hercules  . . . FOUND!
Expecting KC-10 Extender  . . . FOUND!
Expecting C-17 Globemaster  . . . FOUND!
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 5 - 145388.7 lbs
------------------------------
Expecting KC-10 Extender  . . . FOUND!
Expecting C-17 Globemaster  . . . FOUND!
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 6 - 169000 lbs
------------------------------
Expecting KC-10 Extender  . . . FOUND!
Expecting C-17 Globemaster  . . . FOUND!
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 7 - 170765.9 lbs
------------------------------
Expecting C-17 Globemaster  . . . FOUND!
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 8 - 170900 lbs
------------------------------
Expecting C-17 Globemaster  . . . FOUND!
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 9 - 203501.2 lbs
------------------------------
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 10 - 285000 lbs
------------------------------
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 11 - 300000 lbs
------------------------------
Expecting Too Heavy for Airlift  . . . FOUND!
SUCCESS!

Unit Test Returned: 100.0
"
198,224,a1_7_missilethreat,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

According to intelligence reports, the North Korean military uses at least 5
different classes of Ballistic Missiles. The names of these missiles, as well
as their maximum theoretical range, are provided below:

**Missile Class** | **Maximum Range (inclusive, in Kilometers)**  
---|---  
Hwasong-6 | 500  
KN-11 | 1200  
Musudan BM-25 | 4000  
Hwasong-14 | 8000  
Taepodong-2 | 12000  
  
  
Write a Python program that asks the user to enter the distance to a potential
target (in Kilometers). Then, referencing the table, print out all of the
Missile Classes that could potentially reach the target (one per line). If no
missiles are in range, output ""Not in range"".



**EXAMPLES:**

  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input** | 1800 | 8000 | 18000  
**Output** | Musudan BM-25  
Hwason-14  
Taepodong-2 |

Hwasong-14  
Taepodong-2

| Not in range  
  
NOTE: The missiles can be listed in any order, so long as only the ones in
range are printed.


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(target_range):
    result = """"
    
    if target_range <= 500:
        result += ""Hwasong-6\n""

    if target_range <= 1200:
        result += ""KN-11\n""
        
    if target_range <= 4000:
        result += ""Musudan BM-25\n""

    if target_range <= 8000:
        result += ""Hwasong-14\n""

    if target_range <= 12000:
        result += ""Taepodong-2\n""

    if target_range > 12000:
        result += ""Not in range\n""
    
    return result.strip().split('\n')


def run_test(target_range):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", target_range, ""kilometers"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_7_missilethreat.py"", [target_range], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(target_range)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 499), 1))
    run_test(500)
    run_test(round(random.uniform(501, 1199), 1))
    run_test(1200)
    run_test(round(random.uniform(1201, 3999), 1))
    run_test(4000)
    run_test(round(random.uniform(4001, 7999), 1))
    run_test(8000)
    run_test(round(random.uniform(8001, 11999), 1))
    run_test(12000)
    run_test(12001)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
# Get the target distance from the user
target_distance = int(input(""Enter the distance to the target (in Kilometers): ""))

# List of missiles and their maximum range
missiles = {
    ""Hwasong-6"": 500,
    ""KN-11"": 1200,
    ""Musudan BM-25"": 4000,
    ""Hwasong-14"": 8000,
    ""Taepodong-2"": 12000
}

# Find the missiles that can reach the target
in_range_missiles = []
for missile, range in missiles.items():
    if range >= target_distance:
        in_range_missiles.append(missile)

# Print the missiles that can reach the target
if len(in_range_missiles) > 0:
    for missile in in_range_missiles:
        print(missile)
else:
    print(""Not in range"")
",completed,100.0,"------------------------------
Test 1 - 8.4 kilometers
------------------------------
Expecting Hwasong-6  . . . FOUND!
Expecting KN-11  . . . FOUND!
Expecting Musudan BM-25  . . . FOUND!
Expecting Hwasong-14  . . . FOUND!
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 2 - 500 kilometers
------------------------------
Expecting Hwasong-6  . . . FOUND!
Expecting KN-11  . . . FOUND!
Expecting Musudan BM-25  . . . FOUND!
Expecting Hwasong-14  . . . FOUND!
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 3 - 909.6 kilometers
------------------------------
Expecting KN-11  . . . FOUND!
Expecting Musudan BM-25  . . . FOUND!
Expecting Hwasong-14  . . . FOUND!
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 4 - 1200 kilometers
------------------------------
Expecting KN-11  . . . FOUND!
Expecting Musudan BM-25  . . . FOUND!
Expecting Hwasong-14  . . . FOUND!
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 5 - 2645.6 kilometers
------------------------------
Expecting Musudan BM-25  . . . FOUND!
Expecting Hwasong-14  . . . FOUND!
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 6 - 4000 kilometers
------------------------------
Expecting Musudan BM-25  . . . FOUND!
Expecting Hwasong-14  . . . FOUND!
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 7 - 7349.3 kilometers
------------------------------
Expecting Hwasong-14  . . . FOUND!
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 8 - 8000 kilometers
------------------------------
Expecting Hwasong-14  . . . FOUND!
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 9 - 9934.9 kilometers
------------------------------
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 10 - 12000 kilometers
------------------------------
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 11 - 12001 kilometers
------------------------------
Expecting Not in range  . . . FOUND!
SUCCESS!

Unit Test Returned: 100.0
"
199,225,a1_7_evacuation,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
PROBLEM STATEMENT:  

Terrorist groups in the past have created improvised explosive devices in
various shapes and sizes. According to the National Counterterrorism Center,
the following evacuation distances are appropriate for certain explosive
devices.

Explosive Container

|

Evacuation Distance (inclusive, in Feet)  
  
---|---  
  
Pipe Bomb

|

850  
  
Suitcase Bomb

|

1850  
  
Sedan

|

2000  
  
Cargo Van

|

2750  
  
Semi-Trailer

|

7000  
  
  
Write a Python program that asks the user to enter a distance to a device (in
feet). Then, referencing the table, print out all of the explosive devices
that could potentially reach a target at the specified distance (one per
line). If no explosives can reach the specified distance, output ""Not in
range"".

EXAMPLES:

|

Example 1

|

Example 2

|

Example 3  
  
---|---|---|---  
  
Input

|

1900

|

2500

|

8000  
  
Output

|

Sedan  
Cargo Van  
Semi-Trailer

|

Cargo Van  
Semi-Trailer

|

Not in range  
  
NOTE: The devices can be listed in any order, so long as only the ones in
range are printed.


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(target_range):
    result = """"
    
    if target_range <= 850:
        result += ""Pipe Bomb\n""

    if target_range <= 1850:
        result += ""Suitcase Bomb\n""
        
    if target_range <= 2000:
        result += ""Sedan\n""

    if target_range <= 2750:
        result += ""Cargo Van\n""

    if target_range <= 7000:
        result += ""Semi-Trailer\n""

    if target_range > 7000:
        result += ""Not in range\n""
    
    return result.strip().split('\n')


def run_test(target_range):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", target_range, ""feet"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_7_evacuation.py"", [target_range], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(target_range)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 899), 1))
    run_test(850)
    run_test(round(random.uniform(851, 1849), 1))
    run_test(1850)
    run_test(round(random.uniform(1851, 1999), 1))
    run_test(2000)
    run_test(round(random.uniform(2001, 2749), 1))
    run_test(2750)
    run_test(round(random.uniform(2751, 7999), 1))
    run_test(7000)
    run_test(7001)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
distance = int(input(""Enter distance to device (in feet): ""))
explosive_devices = {
    ""Pipe Bomb"": 850,
    ""Suitcase Bomb"": 1850,
    ""Sedan"": 2000,
    ""Cargo Van"": 2750,
    ""Semi-Trailer"": 7000
}

in_range_devices = []

for device, evacuation_distance in explosive_devices.items():
    if distance <= evacuation_distance:
        in_range_devices.append(device)

if in_range_devices:
    for device in in_range_devices:
        print(device)
else:
    print(""Not in range"")
",completed,100.0,"------------------------------
Test 1 - 688.8 feet
------------------------------
Expecting Pipe Bomb  . . . FOUND!
Expecting Suitcase Bomb  . . . FOUND!
Expecting Sedan  . . . FOUND!
Expecting Cargo Van  . . . FOUND!
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 2 - 850 feet
------------------------------
Expecting Pipe Bomb  . . . FOUND!
Expecting Suitcase Bomb  . . . FOUND!
Expecting Sedan  . . . FOUND!
Expecting Cargo Van  . . . FOUND!
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 3 - 1039.3 feet
------------------------------
Expecting Suitcase Bomb  . . . FOUND!
Expecting Sedan  . . . FOUND!
Expecting Cargo Van  . . . FOUND!
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 4 - 1850 feet
------------------------------
Expecting Suitcase Bomb  . . . FOUND!
Expecting Sedan  . . . FOUND!
Expecting Cargo Van  . . . FOUND!
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 5 - 1918.4 feet
------------------------------
Expecting Sedan  . . . FOUND!
Expecting Cargo Van  . . . FOUND!
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 6 - 2000 feet
------------------------------
Expecting Sedan  . . . FOUND!
Expecting Cargo Van  . . . FOUND!
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 7 - 2284.3 feet
------------------------------
Expecting Cargo Van  . . . FOUND!
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 8 - 2750 feet
------------------------------
Expecting Cargo Van  . . . FOUND!
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 9 - 5362.1 feet
------------------------------
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 10 - 7000 feet
------------------------------
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 11 - 7001 feet
------------------------------
Expecting Not in range  . . . FOUND!
SUCCESS!

Unit Test Returned: 100.0
"
200,226,a1_7_digitalstorage,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

Assume someone takes hundreds of photos on their smartphone every week. They
are seeking the best and least expensive alternatives to store/share their
images because their phone's storage capacity is limited. Using the table
below, determine which storage options they should consider, assuming each
image has an average file size of 6 MB.



**Storage Option** | **Short Name** | **Number of Images (inclusive)**  
---|---|---  
CD-ROM (700 MB) | CD | 116  
DVD-ROM (4.7 GB) | DVD | 780  
USB Thumb Drive (16 GB) | USB Small | 2660  
USB Thumb Drive (64 GB) | USB Large | 10600  
Portable Hard Drive (256 GB) | Portable HDD | 42600  
  
  
Write a Python program that asks the user to enter the number of images that
need to be shared/stored (non-negative, whole number). Then, referencing the
table above, print out all the storage options (by Short Name) capable of
holding that many images (one per line). If no storage options are capable of
storing that many images, output ""Consider Cloud Storage"".



**EXAMPLES:**

  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input** | 2000 | 4000 | 45000  
**Output** | USB Small  
USB Large  
Portable HDD |

USB Large  
Portable HDD

| Consider Cloud Storage  
  
NOTE: The devices can be listed in any order, so long as only the ones in
range are printed.


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(num_images):
    result = """"
    
    if num_images <= 116:
        result += ""CD\n""

    if num_images <= 780:
        result += ""DVD\n""
        
    if num_images <= 2660:
        result += ""USB Small\n""

    if num_images <= 10600:
        result += ""USB Large\n""

    if num_images <= 42600:
        result += ""Portable HDD\n""

    if num_images > 42600:
        result += ""Consider Cloud Storage\n""
    
    return result.strip().split('\n')


def run_test(num_images):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", num_images, ""images"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_7_digitalstorage.py"", [num_images], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(num_images)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(int(random.uniform(0, 115)))
    run_test(116)
    run_test(int(random.uniform(117, 779)))
    run_test(780)
    run_test(int(random.uniform(781, 2659)))
    run_test(2660)
    run_test(int(random.uniform(2661, 10599)))
    run_test(10600)
    run_test(int(random.uniform(10601, 42599)))
    run_test(42600)
    run_test(45000)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
num_images = int(input(""Enter the number of images: ""))

if num_images <= 116:
    print(""CD"")
if num_images <= 780:
    print(""DVD"")
if num_images <= 2660:
    print(""USB Small"")
if num_images <= 10600:
    print(""USB Large"")
if num_images <= 42600:
    print(""Portable HDD"")

if num_images > 42600:
    print(""Consider Cloud Storage"")
",completed,100.0,"------------------------------
Test 1 - 94 images
------------------------------
Expecting CD  . . . FOUND!
Expecting DVD  . . . FOUND!
Expecting USB Small  . . . FOUND!
Expecting USB Large  . . . FOUND!
Expecting Portable HDD  . . . FOUND!
SUCCESS!

------------------------------
Test 2 - 116 images
------------------------------
Expecting CD  . . . FOUND!
Expecting DVD  . . . FOUND!
Expecting USB Small  . . . FOUND!
Expecting USB Large  . . . FOUND!
Expecting Portable HDD  . . . FOUND!
SUCCESS!

------------------------------
Test 3 - 304 images
------------------------------
Expecting DVD  . . . FOUND!
Expecting USB Small  . . . FOUND!
Expecting USB Large  . . . FOUND!
Expecting Portable HDD  . . . FOUND!
SUCCESS!

------------------------------
Test 4 - 780 images
------------------------------
Expecting DVD  . . . FOUND!
Expecting USB Small  . . . FOUND!
Expecting USB Large  . . . FOUND!
Expecting Portable HDD  . . . FOUND!
SUCCESS!

------------------------------
Test 5 - 1848 images
------------------------------
Expecting USB Small  . . . FOUND!
Expecting USB Large  . . . FOUND!
Expecting Portable HDD  . . . FOUND!
SUCCESS!

------------------------------
Test 6 - 2660 images
------------------------------
Expecting USB Small  . . . FOUND!
Expecting USB Large  . . . FOUND!
Expecting Portable HDD  . . . FOUND!
SUCCESS!

------------------------------
Test 7 - 4662 images
------------------------------
Expecting USB Large  . . . FOUND!
Expecting Portable HDD  . . . FOUND!
SUCCESS!

------------------------------
Test 8 - 10600 images
------------------------------
Expecting USB Large  . . . FOUND!
Expecting Portable HDD  . . . FOUND!
SUCCESS!

------------------------------
Test 9 - 11744 images
------------------------------
Expecting Portable HDD  . . . FOUND!
SUCCESS!

------------------------------
Test 10 - 42600 images
------------------------------
Expecting Portable HDD  . . . FOUND!
SUCCESS!

------------------------------
Test 11 - 45000 images
------------------------------
Expecting Consider Cloud Storage  . . . FOUND!
SUCCESS!

Unit Test Returned: 100.0
"
201,227,a1_7_broadband,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

Choosing the right broadband speed for your internet connection depends on
which online activities you plan on engaging while online. Using the table
below, determine which activities are possible with a given broadband speed,
given in Kilobits per second (Kbps).



**Activity** | **Short Name** | **Minimum Broadband Speed  
(inclusive, in Kbps)**  
---|---|---  
Social Media | Social Media | 1000  
Multiplayer Gaming | Gaming | 4000  
HD Video Conferencing | Video Conferencing | 6000  
File Downloading | File Downloads | 10000  
Stream Ultra HD 4K Video | HD 4K Video | 25000  
  
  
Write a Python program that asks the user to enter the broadband speed in
Kbps. Then, referencing the table above, print out all the activities (by
Short Name) that can be achieved using that speed (one per line). If the
broadband speed is less than 1000 Kbps, output ""Upgrade to Broadband"".



**EXAMPLES:**

  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input** | 8500 | 5000 | 750  
**Output** |

Social Media  
Gaming  
Video Conferencing

|

Social Media  
Gaming

| Upgrade to Broadband  
  
NOTE: The activities can be listed in any order, so long as only the ones in
range are printed.


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(speed):
    result = """"
    
    if speed >= 1000:
        result += ""Social Media\n""

    if speed >= 4000:
        result += ""Gaming\n""
        
    if speed >= 6000:
        result += ""Video Conferencing\n""

    if speed >= 10000:
        result += ""File Downloads\n""

    if speed >= 25000:
        result += ""HD 4K Video\n""

    if speed < 1000:
        result += ""Upgrade to Broadband\n""
    
    return result.strip().split('\n')


def run_test(speed):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", speed, ""Kbps"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_7_broadband.py"", [speed], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(speed)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 999), 1))
    run_test(1000)
    run_test(round(random.uniform(1001, 4999), 1))
    run_test(4000)
    run_test(round(random.uniform(4001, 5999), 1))
    run_test(6000)
    run_test(round(random.uniform(6001, 9999), 1))
    run_test(10000)
    run_test(round(random.uniform(10001, 24999), 1))
    run_test(25000)
    run_test(30000)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
broadband_speed = int(input(""Enter the broadband speed in Kbps: ""))

if broadband_speed < 1000:
  print(""Upgrade to Broadband"")
else:
  if broadband_speed >= 1000:
    print(""Social Media"")
  if broadband_speed >= 4000:
    print(""Gaming"")
  if broadband_speed >= 6000:
    print(""Video Conferencing"")
  if broadband_speed >= 10000:
    print(""File Downloads"")
  if broadband_speed >= 25000:
    print(""HD 4K Video"") 
",completed,100.0,"------------------------------
Test 1 - 164.9 Kbps
------------------------------
Expecting Upgrade to Broadband  . . . FOUND!
SUCCESS!

------------------------------
Test 2 - 1000 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
SUCCESS!

------------------------------
Test 3 - 3219.5 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
SUCCESS!

------------------------------
Test 4 - 4000 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
Expecting Gaming  . . . FOUND!
SUCCESS!

------------------------------
Test 5 - 4146.4 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
Expecting Gaming  . . . FOUND!
SUCCESS!

------------------------------
Test 6 - 6000 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
Expecting Gaming  . . . FOUND!
Expecting Video Conferencing  . . . FOUND!
SUCCESS!

------------------------------
Test 7 - 6957.4 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
Expecting Gaming  . . . FOUND!
Expecting Video Conferencing  . . . FOUND!
SUCCESS!

------------------------------
Test 8 - 10000 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
Expecting Gaming  . . . FOUND!
Expecting Video Conferencing  . . . FOUND!
Expecting File Downloads  . . . FOUND!
SUCCESS!

------------------------------
Test 9 - 10274.5 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
Expecting Gaming  . . . FOUND!
Expecting Video Conferencing  . . . FOUND!
Expecting File Downloads  . . . FOUND!
SUCCESS!

------------------------------
Test 10 - 25000 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
Expecting Gaming  . . . FOUND!
Expecting Video Conferencing  . . . FOUND!
Expecting File Downloads  . . . FOUND!
Expecting HD 4K Video  . . . FOUND!
SUCCESS!

------------------------------
Test 11 - 30000 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
Expecting Gaming  . . . FOUND!
Expecting Video Conferencing  . . . FOUND!
Expecting File Downloads  . . . FOUND!
Expecting HD 4K Video  . . . FOUND!
SUCCESS!

Unit Test Returned: 100.0
"
202,228,a1_6_woodshop,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have a personal woodshop and want to easily calculate whether you can
afford the board materials for a project. It is unlikely you can obtain the
exact amount of board materials that you may need for the project because wood
planks are provided in fixed lengths.

Write an algorithm that asks for:

  *     * The total length of board materials required for the project
    * The budget (in dollars--do not worry about the dollar sign)



Your program should then output:

  *     * The number of boards needed for the project (Hint: use math.ceil(VALUE) to round up to the next full board).
    * The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)
    * Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of boards is greater than or not greater than the budget, respectfully.



Assume your local lumberyard sells each board in **5.33** feet pieces at
**$45.25** per board. You may assume that all inputs are non-negative numbers.



**EXAMPLES:**



  | **Example 1** | **Example 2**  
---|---|---  
Input | 26  
250 |

46  
300  
  
Output | 5  
226.25  
Within Budget | 9  
407.25  
Over Budget  
  



","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(total_bf, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    total_boards = math.ceil(total_bf/5.33)
    total_cost = 45.25*total_boards
    
    
    if total_cost > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_6_woodshop.py"", [total_bf, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], total_boards):
        print(""Number of Boards Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount. Expected:"", total_boards)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], total_cost):
        print(""Cost of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", total_cost)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    for x in range(4):
        run_test(round(random.uniform(10, 50), 1), random.randint(100, 500))
    run_test(round(random.uniform(10, 100), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

# Input
total_length = int(input())
budget = int(input())

# Constants
board_length = 5.33
board_cost = 45.25

# Calculations
num_boards = math.ceil(total_length / board_length)
estimated_cost = num_boards * board_cost

# Output
print(num_boards)
print(estimated_cost)
if estimated_cost > budget:
    print(""Over Budget"")
else:
    print(""Within Budget"")
","failed: must be real number, not str",0.0,
203,229,a1_6_scuba,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Recreational SCUBA divers have to plan out how many air tanks they will need
in order to safely dive. The amount varies per diver because each person
consumes air at a different rate. This rate is commonly called Surface Air
Consumption. You want to figure whether you can afford the air requirements
for the trips that you are planning.

Write an algorithm that asks for:

  *     * The total dive time for the trip in minutes 
    * The air budget (in dollars--do not worry about the dollar sign)



Your program should then output:

  *     * The number of liters needed for the project.
    * The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)
    * Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of compressed air is greater than or not greater than the budget, respectfully.



Assume that your Surface Air Consumption is **14.5** liters/minute, and that
air costs **2 cents** per liter. You may assume that all inputs are non-
negative numbers.



**EXAMPLES:**



  | **Example 1** | **Example 2**  
---|---|---  
**Input** | 180  
70 |

120  
30  
  
**Output** | 2610.0  
52.2  
Within Budget | 1740.0  
34.800000000000004  
Over Budget  
  



","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(target_minutes, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    
    total_liters = target_minutes*14.5
    total_cost = total_liters*.02
        
    if total_cost > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_6_scuba.py"", [target_minutes, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], total_liters):
        print(""Amount of Air Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount. Expected:"", total_liters)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], total_cost):
        print(""Cost of Air Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", total_cost)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    for x in range(4):
        run_test(round(random.uniform(10,100), 1), random.randint(10, 50))
    run_test(round(random.uniform(10,100), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def calculate_air_requirements(total_dive_time, air_budget):
    liters_needed = 14.5 * total_dive_time
    cost = 0.02 * liters_needed
    
    if cost > air_budget:
        return liters_needed, cost, ""Over Budget""
    else:
        return liters_needed, cost, ""Within Budget""

total_dive_time = int(input(""Enter the total dive time for the trip in minutes: ""))
air_budget = float(input(""Enter the air budget in dollars: ""))

liters_needed, cost, budget_status = calculate_air_requirements(total_dive_time, air_budget)

print(liters_needed)
print(cost)
print(budget_status)
","failed: must be real number, not str",0.0,
204,230,a1_6_runway,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

The CSAF has authorized new runways for any base that can accomplish the
project under their current budget. The new runways will be solid concrete
with their lengths measured in meters.

Write an algorithm that asks for:

  *     * The length of runway to be built (in meters)
    * The base's budget (in dollars--do not worry about the dollar sign, do not round to the nearest)



Your program should then output:

  *     * The amount of concrete (in tons) needed for the base's runway
    * The estimated cost (in dollars--do not output a dollar sign)
    * Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of materials is greater than or not greater than the base's budget, respectfully.

Assume that each meter of runway requires **  2.5** tons of concrete to build,
and that concrete costs  **$75.50**  per ton. You may assume that all inputs
are non-negative numbers.



**EXAMPLES:**

  |

Example 1

|

Example 2  
  
---|---|---  
  
Input

|

2000  
400000

|

1500  
250000  
  
Output

|

5000.0  
377500.0  
Within Budget

|

3750.0  
283125.0  
Over Budget  
  



","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(runway_length, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    tons_of_concrete = 2.5 * runway_length
    cost_of_materials = 75.50 * tons_of_concrete
    if cost_of_materials > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_6_runway.py"", [runway_length, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], tons_of_concrete):
        print(""Amount of Concrete Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount. Expected:"", tons_of_concrete)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):
        print(""Cost of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", cost_of_materials)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(500, 3000), 1), random.randint(100000, 500000))
    run_test(round(random.uniform(500, 3000), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)









",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"----------------------------------
Test #1
----------------------------------
Incorrect Amount. Expected: 7198.25
Incorrect Cost. Expected: 543467.875
Incorrect Budget Analysis. Expected: Over Budget 

----------------------------------
Test #2
----------------------------------
Incorrect Amount. Expected: 3640.25
Incorrect Cost. Expected: 274838.875
Incorrect Budget Analysis. Expected: Over Budget 

Unit Test Returned: 0.0
"
205,231,a1_6_printer,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

A 3D printer converts computer generated models into physical objects by
heating and extruding a filament known as Polylactic Acid (PLA). PLA, normally
sold in spools, is directly fed to the printer head like a thread. You want to
determine if you can afford to 3D print a project given its volume of
material.

Write an algorithm that asks for:

  *     * The volume of the 3D model to be printed (in cm3)
    * The user's budget (in dollars--do not worry about the dollar sign, do not round to the nearest)



Your program should then output:

  *     * The length of material (in meters) needed to produce the object
    * The estimated cost (in dollars--do not output a dollar sign)
    * Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of materials is greater than or not greater than the user's budget, respectfully.

Assume that each cm3 requires **  0.312** meters of PLA to print, and that PLA
filament costs  **$0.063**  per meter. You may assume that all inputs are non-
negative numbers.



**EXAMPLES:**

  | Example 1 | Example 2  
---|---|---  
Input | 15.0  
2.5 | 500.0  
5.0  
Output | 4.68  
0.29484  
Within Budget | 156.0  
9.828  
Over Budget  
  



","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(volume, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    length_of_materials = 0.312 * volume
    cost_of_materials = 0.063 * length_of_materials
    if cost_of_materials > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_6_printer.py"", [volume, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], length_of_materials):
        print(""Length of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Length. Expected:"", length_of_materials)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):
        print(""Cost of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", cost_of_materials)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 100), 1), random.randint(10, 50))
    run_test(round(random.uniform(0, 100), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
# Prompt user for input
volume = float(input(""Enter the volume of the 3D model to be printed (in cm3): ""))
budget = float(input(""Enter your budget (in dollars): ""))

# Calculate the length of material needed
length = volume * 0.312

# Calculate the estimated cost
cost = length * 0.063

# Check if the cost is within budget
if cost <= budget:
    result = ""Within Budget""
else:
    result = ""Over Budget""

# Output the length of material, estimated cost, and result
print(""Length of material needed: {:.2f} meters"".format(length))
print(""Estimated cost: {:.5f} dollars"".format(cost))
print(result)
",completed,34.0,"----------------------------------
Test #1
----------------------------------
Incorrect Length. Expected: 8.8608
Incorrect Cost. Expected: 0.5582304
Correct Budget Analysis

----------------------------------
Test #2
----------------------------------
Incorrect Length. Expected: 22.807199999999998
Incorrect Cost. Expected: 1.4368535999999998
Correct Budget Analysis

Unit Test Returned: 34.0
"
206,232,a1_6_fueldepot,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Fuel in the military is essential to conducting operations. Balancing mission
requirements against budgetary constraints is a constant concern.

Write an algorithm that asks for:

  *     * The distance to a target in miles
    * The budget (in dollars--do not worry about the dollar sign)



Your program should then output:

  *     * The amount of fuel (in gallons) needed to reach the target
    * The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)
    * Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of fuel is greater than or not greater than the budget, respectfully.

Assume that the convoy can get **  12.5** miles to the gallon, and that the
current price of fuel is  **$3.73**  per gallon. You may assume that all
inputs are non-negative numbers.



**EXAMPLES:**

  | Example 1 | Example 2  
---|---|---  
Input | 130.7  
50.50 |

750  
100  
  
Output | 10.456  
39.0009  
Within Budget | 60.0  
223.80  
Over Budget  
  



","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(target_distance, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    fuel_required = target_distance / 12.5
    cost_of_materials = 3.73 * fuel_required
    
    if cost_of_materials > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_6_fueldepot.py"", [target_distance, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], fuel_required):
        print(""Amount of Fuel Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount. Expected:"", fuel_required)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):
        print(""Cost of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", cost_of_materials)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(500, 3000), 1), random.randint(100000, 500000))
    run_test(round(random.uniform(500, 3000), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"----------------------------------
Test #1
----------------------------------
Incorrect Amount. Expected: 126.12799999999999
Incorrect Cost. Expected: 470.45743999999996
Incorrect Budget Analysis. Expected: Within Budget 

----------------------------------
Test #2
----------------------------------
Incorrect Amount. Expected: 225.90400000000002
Incorrect Cost. Expected: 842.62192
Incorrect Budget Analysis. Expected: Over Budget 

Unit Test Returned: 0.0
"
207,233,a1_4_speed,2,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with a partially complete Python program that contains
2 variables.

  1. aircraft_speed (input by the user in mph)
  2. speed_of_sound (already initialized in mph)



Add code to the end of this program that will output:

  *     *         Faster than Mach 1 

If the aircraft speed is higher than the speed of sound  
  

    *         Mach 1 

If the aircraft speed is equal to the speed of sound  
  

    *         Slower than Mach 1 

If the aircraft speed is lower than the speed of sound  
  



**EXAMPLES:**

  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input** | 800 | 767.269 | 450.8  
**Output** | Faster than Mach 1 | Mach 1 | Slower than Mach 1


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(speed):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing speed ="", speed, ""MPH"")
    print(""----------------------------------"")
    
    if speed > 767.269:
        solution = ""Faster than Mach 1""
    elif speed == 767.269:
        solution = ""Mach 1""
    else:
        solution = ""Slower than Mach 1""
    
    output, error_message = autograder.run_script(""a1_4_speed.py"", [speed])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(768.0, 1000.0), 1))
    run_test(767.269)
    run_test(round(random.uniform(0.0, 767.0), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
# Partially complete program 

# input by the user
aircraft_speed = float(input(""Enter the aircraft speed in mph: ""))

# already initialized variable
speed_of_sound = 767.269


# Add code here to output the appropriate message based on aircraft speed

if aircraft_speed > speed_of_sound:
    print(""Faster than Mach 1"")
elif aircraft_speed == speed_of_sound:
    print(""Mach 1"")
else:
    print(""Slower than Mach 1"")
",completed,100.0,"----------------------------------
Testing speed = 995.7 MPH
----------------------------------
CORRECT!

----------------------------------
Testing speed = 767.269 MPH
----------------------------------
CORRECT!

----------------------------------
Testing speed = 201.0 MPH
----------------------------------
CORRECT!

Unit Test Returned: 100.0
"
208,235,a1_4_goldilocks,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with a partially complete Python program that contains
2 variables.

  1. porridge_temp (input by the user in °F)
  2. correct_temp (already initialized in °F)



Add code to the end of this program that will output:

  *     *         Too Hot 

When the porridge temp is above the correct temperature.  
  

    *         Just Right 

When the porridge temp is equal to the correct temperature  
  

    *         Too Cold 

When the porridge temp is below the correct temperature.  
  



**EXAMPLES:**

  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input** | 110 | 105 | 98  
**Output** | Too Hot | Just Right | Too Cold


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(temp):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing temperature ="", temp, ""degrees"")
    print(""----------------------------------"")
    
    if temp > 105:
        solution = ""Too Hot""
    elif temp == 105:
        solution = ""Just Right""
    else:
        solution = ""Too Cold""
    
    output, error_message = autograder.run_script(""a1_4_goldilocks.py"", [temp])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(106, 130), 1))
    run_test(105)
    run_test(round(random.uniform(80, 104), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
# Get input from the user for the porridge temperature
porridge_temp = int(input(""Enter the porridge temperature (in °F): ""))

# Initialize the correct temperature
correct_temp = 100

# Compare the porridge temperature with the correct temperature and print appropriate message
if porridge_temp > correct_temp:
    print(""Too Hot"")
elif porridge_temp == correct_temp:
    print(""Just Right"")
else:
    print(""Too Cold"")
",completed,66.7,"----------------------------------
Testing temperature = 127.1 degrees
----------------------------------
CORRECT!

----------------------------------
Testing temperature = 105 degrees
----------------------------------
INCORRECT. Expected: Just Right


----------------------------------
Testing temperature = 86.7 degrees
----------------------------------
CORRECT!

Unit Test Returned: 66.7
"
209,236,a1_4_cards,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with a partially complete Python program that contains
2 variables.

  1. number_of_cards (input by the user)
  2. cards_needed (already initialized)



Add code to the end of this program that will output whether you have enough
cards to make a full deck of 52 cards (already initialized):

  *     *         Too many cards 

If the number of cards is more than the cards needed  
  

    *         Full deck

If the number of cards is equal to the cards needed  
  

    *         Not enough cards 

If the number of cards is fewer than the cards needed  
  



**EXAMPLES:**



  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input** | 57 | 52 | 38  
**Output** | Too many cards | Full deck | Not enough cards


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(num_cards):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing number of cards ="", num_cards, ""cards"")
    print(""----------------------------------"")
    
    if num_cards > 52:
        solution = ""Too many cards""
    elif num_cards == 52:
        solution = ""Full deck""
    else:
        solution = ""Not enough cards""
    
    output, error_message = autograder.run_script(""a1_4_cards.py"", [num_cards])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(53, 60)))
    run_test(52)
    run_test(round(random.uniform(0, 51)))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
number_of_cards = int(input(""Enter the number of cards: ""))
cards_needed = 52

if number_of_cards > cards_needed:
    print(""Too many cards"")
elif number_of_cards == cards_needed:
    print(""Full deck"")
else:
    print(""Not enough cards"")
",completed,100.0,"----------------------------------
Testing number of cards = 59 cards
----------------------------------
CORRECT!

----------------------------------
Testing number of cards = 52 cards
----------------------------------
CORRECT!

----------------------------------
Testing number of cards = 38 cards
----------------------------------
CORRECT!

Unit Test Returned: 100.0
"
210,237,a1_4_arrow,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with a partially complete Python program that contains
2 variables.

  1. arrow_height (input by the user in feet)
  2. apple_height (already initialized in feet)



Add code to the end of this program that will output:

  *     *         Arrow too high 

If the arrow height is higher than the apple  
  

    *         Direct hit

If the arrow height is equal to the apple  
  

    *         Arrow too low 

If the arrow is lower than the apple  
  



**EXAMPLES:**



  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input** | 7.1 | 6.2 | 5.9  
**Output** | Arrow too high | Direct hit | Arrow too low


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(height):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing height ="", height, ""feet"")
    print(""----------------------------------"")
    
    if height > 6.2:
        solution = ""Arrow too high""
    elif height == 6.2:
        solution = ""Direct hit""
    else:
        solution = ""Arrow too low""
    
    output, error_message = autograder.run_script(""a1_4_arrow.py"", [height])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(6.2, 20), 1))
    run_test(6.2)
    run_test(round(random.uniform(0.0, 6.1), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
arrow_height = float(input('Enter arrow height: '))
apple_height = 6.2

if arrow_height > apple_height:
    print('Arrow too high')
elif arrow_height == apple_height:
    print('Direct hit')
else:
    print('Arrow too low')
",completed,100.0,"----------------------------------
Testing height = 9.0 feet
----------------------------------
CORRECT!

----------------------------------
Testing height = 6.2 feet
----------------------------------
CORRECT!

----------------------------------
Testing height = 2.5 feet
----------------------------------
CORRECT!

Unit Test Returned: 100.0
"
211,238,a1_3_spheres,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You are trying to write a program that calculates the volume of a multiple
spheres. The template provided to you defines 2 variables:

  * **radius**  \- radius of the sphere
  * **total**  \- The total amount of spheres



Calculate the volume, using the following formula:

V=4/3 π r3 t

Where . . .

  *     * **π**  is the mathematical constant (approximately equal to 3.14... -- see the HINT for more details)
    * **r**  is the radius of the cylinder
    * **t**  is the total amount of spheres



Store the answer in a variable called **  volume**. You do not need to print
the variable.



**HINT:**

The math module contains the mathematical constant, π. To use it, simply type
**math.pi**


","from cs110 import autograder
import random, math

from a1_3_spheres import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (4/3) * (radius**3)*total
    file = open(""a1_3_spheres.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see if variable 'volume' exists . . . "", end='')
    if 'volume' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'volume' . . . "", end='')
        if 'volume' in globals() and autograder.equals(volume, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

radius = 2
total = 5

volume = (4/3) * math.pi * radius**3 * total

volume",completed,100.0,"Checking to see if variable 'volume' exists . . . FOUND!
Checking mathematical formula . . . CORRECT!
Checking the value of 'volume' . . . CORRECT!
Unit Test Returned: 100
"
212,239,a1_3_radius,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You are trying to write a program that calculates the volume of multiple
identical cylinders. The template provided to you defines 3 variables:

  * **radius**  \- radius of the cylinders
  * **height** \- height of the cylinders
  * **total**  \- The total amount of cylinders



Calculate the volume, using the following formula:

V = π r2 h t

Where . . .

  *     * **π**  is the mathematical constant (approximately equal to 3.14... -- see the HINT for more details)
    * **r**  is the radius of the cylinder
    * **h  **is the height of the cylinder
    * **t**  is the total amount of cylinders



Store the answer in a variable called **volume**. You do not need to print the
variable.



**HINT:**

The math module contains the mathematical constant, π. To use it, simply type
**math.pi**


","from cs110 import autograder
import random, math

from a1_3_radius import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (radius**2) * height * total
    file = open(""a1_3_radius.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see areif variable 'volume' exists . . . "", end='')
    if 'volume' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'volume' . . . "", end='')
        if 'volume' in globals() and autograder.equals(volume, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

# input variables
radius = 5
height = 10
total = 4

# calculate volume
volume = math.pi * (radius ** 2) * height * total

# print the result
print(volume)
",completed,100.0,"3141.5926535897934
Checking to see areif variable 'volume' exists . . . FOUND!
Checking mathematical formula . . . CORRECT!
Checking the value of 'volume' . . . CORRECT!
Unit Test Returned: 100
"
213,240,a1_3_interest,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You are trying to write a program that calculates the amount of money a person
will earn from an investment. The template provided to you defines 3
variables:

  * **principal_amount**  \- The principal (i.e., starting) amount of money that a person has
  * **interest_rate**  \- The interest rate
  * **time**  \- The length of the investment (in months)



Calculate the amount of money earned, using the following formula:

    
    
    amount = pert

Where . . .

  *     * **p**  is the principal amount
    * **e**  is the mathematical constant (approximately equal to 2.718... -- see the HINT for more details)
    * **r**  is the interest rate
    * **t**  is the time



Store the answer in a variable called  **amount.** You do not need to print
the variable.



**HINT:**

The math module contains the mathematical constant, e. To use it, simply type
**math.e**


","from cs110 import autograder
import random, math

from a1_3_interest import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = principal_amount * math.e**(interest_rate * time)
    file = open(""a1_3_interest.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see if variable 'amount' exists . . . "", end='')
    if 'amount' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.e' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'amount' . . . "", end='')
        if 'amount' in globals() and autograder.equals(amount, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

principal_amount = 1000
interest_rate = 0.05
time = 12

amount = principal_amount * math.e ** (interest_rate * time)
amount
",completed,100.0,"Checking to see if variable 'amount' exists . . . FOUND!
Checking mathematical formula . . . CORRECT!
Checking the value of 'amount' . . . CORRECT!
Unit Test Returned: 100
"
214,241,a1_3_cones,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You are trying to write a program that calculates the volume of multiple
identical cones. The template provided to you defines 3 variables:

  * **radius**  \- radius of the cones
  * **height** \- height of the cones
  * **total**  \- The total amount of cones



Calculate the volume, using the following formula:

V = π r2(h/3)t

Where . . .

  *     * **π**  is the mathematical constant (approximately equal to 3.14... -- see the HINT for more details)
    * **r**  is the radius of the cones
    * **h  **is the height of the cones
    * **t**  is the total amount of cones



Store the answer in a variable called **volume**. You do not need to print the
variable.



**HINT:**

The math module contains the mathematical constant, e. To use it, simply type
**math.pi**


","from cs110 import autograder
import random, math

from a1_3_cones import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (radius**2) * (height/3) * total
    file = open(""a1_3_cones.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see if variable 'volume' exists . . . "", end='')
    if 'volume' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'volume' . . . "", end='')
        if 'volume' in globals() and autograder.equals(volume, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

radius = 5
height = 10
total = 3

volume = math.pi * (radius ** 2) * (height / 3) * total
",completed,100.0,"Checking to see if variable 'volume' exists . . . FOUND!
Checking mathematical formula . . . CORRECT!
Checking the value of 'volume' . . . CORRECT!
Unit Test Returned: 100
"
215,242,a1_3_circles,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You are trying to write a program that calculates the area of multiple
circles. The template provided to you defines 2 variables:

  * **radius**  \- radius of the circle
  * **total**  \- The total amount of circles



Calculate the volume, using the following formula:

V=π r2t

Where . . .

  *     * **π**  is the mathematical constant (approximately equal to 3.14... -- see the HINT for more details)
    * **r** is the radius of the circle
    * **t** is the total amount of circles



Store the answer in a variable called **area**. You do not need to print the
variable.



**HINT:**

The math module contains the mathematical constant, π. To use it, simply type
**math.pi**


","from cs110 import autograder
import random, math

from a1_3_circles import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (radius**2)*total
    file = open(""a1_3_circles.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see if variable 'area' exists . . . "", end='')
    if 'area' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'area' . . . "", end='')
        if 'area' in globals() and autograder.equals(area, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

radius = 5
total = 3

area = math.pi * radius ** 2 * total
area
",completed,100.0,"Checking to see if variable 'area' exists . . . FOUND!
Checking mathematical formula . . . CORRECT!
Checking the value of 'area' . . . CORRECT!
Unit Test Returned: 100
"
216,243,a1_1_squad,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
PROBLEM STATEMENT:  

Write the Python code needed to get three values from the user:

  1. A string representing the name of a cadet squadron (e.g., Grim Reapers). Store this value in a variable called sqd_name
  2. A floating point value representing average age for all cadets in the squadron. Store this value in a variable called sqd_avg_age
  3. An integer representing the weight of the ICBM in kilograms. Store this value in a variable called sqd_number

IMPORTANT: Your template file contains a print statement that combines these
values to produce an output (see Example). Do not modify this line. Simply add
your input statements in the space provided.

EXAMPLE:

If the user types ""Grim Reapers"", 20.5, and 31, your program should print:

    
    
    Cadet Squadron 31, aka ""Grim Reapers"",
    
    
     has an average cadet age of 20.5.

  


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    squad_list = [(""Warhawks"", 21.2, 40), (""Barnstormers"", 19.2, 23), (""Black Panthers"", 20.7, 29), (""Dogs of War"", 21.1, 3)]
    squad = squad_list[random.randint(0, len(squad_list) - 1)]
    solution = ""Cadet Squadron %s,  aka \""%s,\"" has an average age of %1.1f."" % (squad[2], squad[0], squad[1])
    
    output, error_message = autograder.run_script(""a1_1_squad.py"", [squad[0], squad[1], squad[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"INCORRECT. Expected: Cadet Squadron 23,  aka ""Barnstormers,"" has an average age of 19.2.


Unit Test Returned: 0.0
"
217,244,a1_1_icbm,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

Write the Python code needed to get three values from the user:

  1. A string representing the name of an Intercontinental Ballistic Missile (ICBM) (e.g., Minuteman). Store this value in a variable called **  icbm** **_name**
  2. A floating point value representing the length of this missile in meters. Store this value in a variable called  **icbm_length**
  3. An integer representing the weight of the ICBM in kilograms. Store this value in a variable called  **icbm_weight**

**IMPORTANT:** Your template file contains a print statement that combines
these values to produce an output (see Example). **Do not modify this line.**
Simply add your input statements in the space provided.



**EXAMPLE:**

If the user types ""Minuteman"", 16.3, and 290000, your program should print:

    
    
    The Minuteman has a total length of 16.3 meters and it weighs 290000 kilograms.


","#import cs110,
import random, math
from cs110 import autograder
num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    icbm_list = [(""Peacekeeper"", 21.8, 88450), (""Minuteman"", 16.36, 29000), (""Titan"", 31.394, 155000)]
    icbm = icbm_list[random.randint(0, len(icbm_list) - 1)]
    solution = ""The %s has a total length of %1.1f meters and it weighs %d kilograms."" % (icbm[0], icbm[1], icbm[2])
    
    output, error_message = autograder.run_script(""a1_1_icbm.py"", [icbm[0], icbm[1], icbm[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"INCORRECT. Expected: The Minuteman has a total length of 16.4 meters and it weighs 29000 kilograms.


Unit Test Returned: 0.0
"
218,245,a1_1_dorms,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

Write the Python code needed to get three values from the user:

  1. A string representing the name of an USAFA dormitory (e.g., Vandenburg). Store this value in a variable called **dorm** **_name**
  2. A floating point value representing the total area, in square feet, that the dormitory contains. Store this value in a variable called **dorm_area**
  3. An integer representing the number cadets living in this dormitory. Store this value in a variable called **dorm_population**

**IMPORTANT:** Your template file contains a print statement that combines
these values to produce an output (see Example). **Do not modify this line.**
Simply add your input statements in the space provided.



**EXAMPLE:**

If the user types ""Vandenberg"", 63383.5, and 1720, your program should print:

    
    
    The Vandenburg dormitory has an area of 63383.5 square feet and has 1720 cadets living in it.




","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    dorm_list = [(""Vandenburg"", 111874.79, 2212), (""Sijan"", 124488.97, 2112)]
    dorm = dorm_list[random.randint(0, len(dorm_list) - 1)]
    solution = ""The %s dormitory has an area of %1.1f square feet and has %d cadets living in it."" % (dorm[0], dorm[1], dorm[2])
    
    output, error_message = autograder.run_script(""a1_1_dorms.py"", [dorm[0], dorm[1], dorm[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
dorm_name = input(""Enter the name of the dormitory: "")
dorm_area = float(input(""Enter the total area of the dormitory in square feet: ""))
dorm_population = int(input(""Enter the number of cadets living in the dormitory: ""))

print(""The"", dorm_name, ""dormitory has an area of"", dorm_area, ""square feet and has"", dorm_population, ""cadets living in it."")
",completed,0.0,"INCORRECT. Expected: The Sijan dormitory has an area of 124489.0 square feet and has 2112 cadets living in it.


Unit Test Returned: 0.0
"
219,246,a1_1_bases,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

Write the Python code needed to get three values from the user:

  1. A string representing the name of an Air Force Base (e.g., Travis). Store this value in a variable called **  base** **_name**
  2. A floating point value representing the area of this base in acres. Store this value in a variable called  **base_acres**
  3. An integer representing the number of buildings on this base. Store this value in a variable called  **building_** **quantity**

**IMPORTANT:** Your template file contains a print statement that combines
these values to produce an output (see Example). **Do not modify this line.**
Simply add your input statements in the space provided.



**EXAMPLE:**

If the user types ""Travis"", 6383.5, and 1720, your program should print:

    
    
    Travis Air Force Base sits on 6383.5 acres and has 1720 buildings on it.


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    base_list = [(""Travis"", 1874.79, 1288), (""Barksdale"", 1488.97, 1680), (""Eglin"", 1611.08, 1388)]
    base = base_list[random.randint(0, len(base_list) - 1)]
    solution = ""%s Air Force Base sits on %1.1f acres and has %d buildings on it."" % (base[0], base[1], base[2])
    
    output, error_message = autograder.run_script(""a1_1_bases.py"", [base[0], base[1], base[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"INCORRECT. Expected: Travis Air Force Base sits on 1874.8 acres and has 1288 buildings on it.


Unit Test Returned: 0.0
"
220,247,a1_1_aircraft,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


Write the Python code needed to get three values from the user:

  1. A string representing the name of an aircraft (e.g., F-16). Store this value in a variable called  **aircraft_name**
  2. A floating point value representing the maximum speed of the aircraft. Store this value in a variable called  **aircraft_speed**
  3. An integer representing the number of airplanes of this type owned by the USAF. Store this value in a variable called  **quantity**

**IMPORTANT:** Your template file contains a print statement that combines
these values to produce an output (see Example). **Do not modify this line.**
Simply add your input statements in the space provided.



**EXAMPLE:**

If the user types ""F-16"", 1500.1, and 600, your program should print:

    
    
    The F-16 has a top speed of 1500.1 MPH. The USAF has 600 in its inventory. 


","#import cs110,
import random, math
from cs110 import autograder
num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    aircraft_list = [(""F-15"", 1874.79, 288), (""F-16"", 1488.97, 680), (""F-22"", 1611.08, 88)]
    aircraft = aircraft_list[random.randint(0, len(aircraft_list) - 1)]
    solution = ""The %s has a top speed of %1.1f MPH.  The USAF has %d in its inventory."" % (aircraft[0], aircraft[1], aircraft[2])
    
    output, error_message = autograder.run_script(""a1_1_aircraft.py"", [aircraft[0], aircraft[1], aircraft[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
aircraft_name = input(""Enter the name of the aircraft: "")
aircraft_speed = float(input(""Enter the maximum speed of the aircraft: ""))
quantity = int(input(""Enter the number of airplanes owned by the USAF: ""))

print(""The {} has a top speed of {} MPH. The USAF has {} in its inventory."".format(aircraft_name, aircraft_speed, quantity))
",completed,0.0,"INCORRECT. Expected: The F-16 has a top speed of 1489.0 MPH.  The USAF has 680 in its inventory.


Unit Test Returned: 0.0
"
221,250,lsn21_bouncingtriangle,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Using the Bouncing Ball from the previous lab as a starting point, generate
an animation of a bouncing triangle. The triangle's vertices should start at
random locations, and bounce whenever the triangle hits a wall.





**HINTS** :

  * Try drawing 3 bouncing balls on the screen.
  * Once the balls are moving correctly, draw 3 lines to connect them!


","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn21_bouncingtriangle.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,,"
import pygame
import random

# Initialize the game
pygame.init()

# Set up the screen
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption(""Bouncing Triangle"")

# Set up the triangle
triangle_vertices = [(random.randint(0, screen_width), random.randint(0, screen_height)),
                     (random.randint(0, screen_width), random.randint(0, screen_height)),
                     (random.randint(0, screen_width), random.randint(0, screen_height))]
triangle_velocity = [random.randint(1, 5), random.randint(1, 5), random.randint(1, 5)]
triangle_color = (255, 255, 255)
triangle_thickness = 1

# Game loop
running = True
while running:
    # Clear the screen
    screen.fill((0, 0, 0))

    # Update triangle position
    for i in range(len(triangle_vertices)):
        triangle_vertices[i] = (triangle_vertices[i][0] + triangle_velocity[i][0],
                                triangle_vertices[i][1] + triangle_velocity[i][1])

        # Check for collision with walls
        if triangle_vertices[i][0] <= 0 or triangle_vertices[i][0] >= screen_width:
            triangle_velocity[i] = (-triangle_velocity[i][0], triangle_velocity[i][1])
        if triangle_vertices[i][1] <= 0 or triangle_vertices[i][1] >= screen_height:
            triangle_velocity[i] = (triangle_velocity[i][0], -triangle_velocity[i][1])

    # Draw the triangle
    pygame.draw.line(screen, triangle_color, triangle_vertices[0], triangle_vertices[1], triangle_thickness)
    pygame.draw.line(screen, triangle_color, triangle_vertices[1], triangle_vertices[2], triangle_thickness)
    pygame.draw.line(screen, triangle_color, triangle_vertices[2], triangle_vertices[0], triangle_thickness)

    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Update the display
    pygame.display.flip()

# Quit the game
pygame.quit()
",completed,100.0,"Thank you for your submission. Your instructor will let you know if there is a problem.
Unit Test Returned: 100.0
"
222,251,lsn12_fastestcar,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

Write a Python program with the definition of a new function named fastest_car
and takes two lists of car info as parameters. The function will then
**return** the car model name with the higher top speed or ""Same speed"" if the
top speeds are the same.

The two parameters to the function are both a list with the same 3 types of
elements, as follows:

  
| **Car Model** | **Cost** | **Top Speed**  
---|---|---|---  
**Value** | Ford Mustang | 27205.00 | 163  
  


| **Car Model** | **Cost** | **Top Speed**  
---|---|---|---  
**Value** | Chevy Corvette | 66400.00 | 194  
  


**EXAMPLE** :

| **Example**  
---|---  
**Input Parameters to** `fastest_car()` |

`fastest_car([""Ford Mustang"", 27205.00, 163], [""Chevy Corvette"", 66400.00,
194])`  
  
**Outputs** | Chevy Corvette


","from cs110 import autograder
import random, math
import lsn12_fastestcar

def solution(car1, car2):

    if car1[2] > car2[2]:
        return car1[0]
    elif car2[2] > car1[2]:
        return car2[0]
    else:
        return ""Same speed""

def test_passed():
    
    # 5 test strategies
    cars_list = []
    cars_list.append([""Honda Civic"", 18983.20, 127])
    cars_list.append([""Acura NSX"", 157500.39, 191])
    cars_list.append([""VW Golf GTI"", 28595.83, 130])
    cars_list.append([""Ford F-150 Raptor"", 45290.82, 107])
    cars_list.append([""Subaru BRZ"", 28955.38, 140])
    cars_list.append([""Mazda Mazdaspeed3"", 17424.30, 130])
    
    test_vals = []
    
    index_permutations = []
    # build all possible permutations except those with the same vehicle
    for i in range(len(cars_list)):
        for j in range(len(cars_list)):
            if i != j:
                index_permutations.append((i,j))
    
    # randomly choose 4 of the permutations
    for i in range(4):
        car_idx_pair = index_permutations[random.randint(0,len(index_permutations)-1)]
        first_car_idx = car_idx_pair[0]
        second_car_idx = car_idx_pair[1]
        
        index_permutations.remove(car_idx_pair)
        
        test_vals.append([cars_list[first_car_idx], cars_list[second_car_idx]])

    # same speed
    test_vals.append((cars_list[2], cars_list[5]))
  
    i = 0
    total_score = 0.0
    
    for val in test_vals:
        print('-'*10 + ""Test #"" + str(i) + '-'*10)
        
        output = lsn12_fastestcar.fastest_car(val[0], val[1])
        expected_output = solution(val[0], val[1])

        print(""Your Program's Output:"")
        print(output)

        if output == None:
            print(""INCORRECT - Your function did not return anything. Expected:"")
            print(str(expected_output))
        elif output.strip() == expected_output.strip():
            print(""CORRECT"")
            total_score += 100.0 / len(test_vals)
        else:
            print(""INCORRECT - Expected:"")
            print(str(expected_output))
            
        print()
        i += 1
    
    return total_score

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
def fastest_car(car1, car2):
    if car1[2] > car2[2]:
        return car1[0]
    elif car1[2] < car2[2]:
        return car2[0]
    else:
        return ""Same speed""
        
print(fastest_car([""Ford Mustang"", 27205.00, 163], [""Chevy Corvette"", 66400.00, 194]))
",completed,100.0,"Chevy Corvette
----------Test #0----------
Your Program's Output:
Acura NSX
CORRECT

----------Test #1----------
Your Program's Output:
Subaru BRZ
CORRECT

----------Test #2----------
Your Program's Output:
Subaru BRZ
CORRECT

----------Test #3----------
Your Program's Output:
Subaru BRZ
CORRECT

----------Test #4----------
Your Program's Output:
Same speed
CORRECT

Unit Test Returned: 100.0
"
223,252,lsn12_listrange,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

Write a Python program that obtains two whole numbers that represent the start
and stop values for a range of numbers. You may assume the second number is
always greater than the first.

Using these start and stop values, print the two following items in order:

1.  Print a list that starts at the start value and ends at (the list contains) the stop value

**HINT** : Use `range()` to accomplish this. In order to print the result from
range() as a list, surround it with list(), `list(range(#,#))`, like you
surround input() with int() or float(), `int(input())`.

2.  Print the size (how many numbers are contained) of that list



**EXAMPLE:**

| **Example 1** | **Example 2**  
---|---|---  
**Inputs** |

1

10

|

1023

1029  
  
**Outputs** | [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  
10 |

[1023, 1024, 1025, 1026, 1027, 1028, 1029]  
7


","from cs110 import autograder
import random, math


def solution(test_start, test_stop):
    result = []
    
    result.append(list(range(test_start, test_stop+1)))
    result.append(len(range(test_start, test_stop+1)))
        
    return result

def test_passed():
    
    # 5 test strategies
    test_vals = []
    
    for j in range(5):
        test_val_start = random.randint(0,2048)
        test_val_stop = test_val_start + random.randint(9,16)
        test_vals.append((test_val_start, test_val_stop))
  
    i = 0
    total_score = 0.0
    
    for val in test_vals:
        print('-'*10 + ""Test #"" + str(i) + '-'*10)
        
        output, error_message = autograder.run_script(""lsn12_listrange.py"", [val[0], val[1]])
        expected_output = solution(val[0], val[1])
        
        lines = output.strip().split('\n')
        
        if lines[0].strip() == str(expected_output[0]) and autograder.equals(int(lines[1]), expected_output[1]):
            print(""CORRECT"")
            total_score += 100.0 / len(test_vals)
        else:
            print(""INCORRECT"")
            
        print()
        i += 1
    
    return total_score

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
start = int(input())
stop = int(input())

num_list = list(range(start, stop+1))

print(num_list)
print(len(num_list))
",completed,100.0,"----------Test #0----------
CORRECT

----------Test #1----------
CORRECT

----------Test #2----------
CORRECT

----------Test #3----------
CORRECT

----------Test #4----------
CORRECT

Unit Test Returned: 100.0
"
224,253,lsn22_paint,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Using PythonGraph, create a simple paint application. Your program should draw
circles on the window whenever the user presses the left mouse button. Your
program should also watch for keyboard inputs, and allow the user to change
colors and the size of the circle by pressing on different keys of your
choice.

The code template of a paint program has been provided to you as a starting
point in paint. Use this code and make the necessary modifications in the
Animation while loop.

When you are finished, upload your Python code.


","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn22_paint.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,"Here is a possible solution to the problem:

```python
from PythonGraph import *

# Set window size and title
SetWindowSize(800, 600)
SetWindowTitle(""Paint Application"")

# Initialize variables
circle_color = ""black""
circle_size = 10

# Define function to handle mouse events
def handle_mouse(event):
    global circle_color, circle_size
    if event[""type""] == ""mousedown"" and event[""button""] == ""left"":
        DrawCircle(event[""x""], event[""y""], circle_size, circle_color)

# Define function to handle keyboard events
def handle_keyboard(event):
    global circle_color, circle_size
    if event[""type""] == ""keydown"":
        if event[""key""] == ""1"":
            circle_color = ""red""
        elif event[""key""] == ""2"":
            circle_color = ""green""
        elif event[""key""] == ""3"":
            circle_color = ""blue""
        elif event[""key""] == ""up"":
            circle_size += 5
        elif event[""key""] == ""down"":
            if circle_size > 5:
                circle_size -= 5

# Set event handlers
SetMouseDownHandler(handle_mouse)
SetKeyDownHandler(handle_keyboard)

# Create main animation loop
def animate():
    # Clear the window
    ClearScreen()

    # Update the window
    UpdateScreen()

# Start the animation
StartAnimation(animate)
```

Please note that this solution assumes you have the PythonGraph library installed, as mentioned in the problem statement.",completed,0.0,"There appears to be a syntax error in your code.
Unit Test Returned: 0.0
"
225,254,lsn12_pftscores,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

You are provided a list of PFT scores, already in the lab template, in a
variable `pft_scores` arranged in no particular order.

Write a Python program that obtains a new score from the user. If the score is
valid (above zero and no greater than 500), add it to the list and print out
the following two stats in this order:

1\. **average score  ** HINT: use the functions `len()` and `sum()` on your
list to find the average

2\. **range of scores** , the difference between the largest score and
smallest score. HINT: use the functions `min()` and `max()` on your list to
find the range

If the score is invalid (below zero or above 500), instead print:  ""Invalid
score provided"".



**EXAMPLE:**

| **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input** | -5 | 328 | 65  
**Outputs** | Invalid score provided |

291.8

403

|

274.26666666666665

408  
  




  




","from cs110 import autograder
import random, math
#import lsn12_pftscores

pft_scores = [243, 394, 143, 288, 303, 473, 325, 273, 284, 198, 70, 289, 437, 329]


def solution(new_num):
    result = ''
    
    # Append number to num_list ONLY IF IT IS A valid number > 0
    if new_num >= 0 and new_num <= 500:

        temp_scores = pft_scores.copy()
        temp_scores.append(new_num)
        
        average = sum(temp_scores) / len(temp_scores)
        num_range = max(temp_scores) - min(temp_scores)
        
        result += str(average) + '\n'
        result += str(num_range) + '\n'
    else:
        result += ""Invalid score provided""
        
    return result

def test_passed():
    
    # 5 test strategies
    # 1) invalid, out of range low
    # 2) invalid, out of range high
    # 3) rand num that doesn't affect range
    # 4) rand num lower than current lowest, but valid
    # 5) rand num higher than current highest, but valid
    
    min_score = min(pft_scores)
    max_score = max(pft_scores)
    
    test_vals = []
    
    # random_low_invalid
    test_vals.append(random.randint(-1010,-1))
    #random_high_invalid
    test_vals.append(random.randint(501,5000))
    #random_mid_num
    test_vals.append(random.randint(min_score, max_score))
    #random_low
    test_vals.append(random.randint(0, min_score-1))
    #random_high
    test_vals.append(random.randint(max_score + 1, 500))
    
    i = 0
    total_score = 0.0
    
    for val in test_vals:
        print('-'*10 + ""Test #"" + str(i) + '-'*10)
        
        output, error_message = autograder.run_script(""lsn12_pftscores.py"", [val])
        expected_output = solution(val)
        
        lines = output.strip().split('\n')
        
        if expected_output.strip() == ""Invalid score provided"":
            if output.strip() == expected_output.strip():
                print(""CORRECT"")
                total_score += 100 / len(test_vals)
            else:
                print(""INCORRECT. Expected the following:"")
                print(expected_output)
        else:
            expected_lines = expected_output.strip().split('\n')
            
            if autograder.equals(float(expected_lines[0]), float(lines[0]), 0.99) and autograder.equals(float(expected_lines[1]), float(lines[1]), 0.99):
                print(""CORRECT"")
                total_score += 100 / len(test_vals)
            else:
                print(""INCORRECT. Expected the following:"")
                print(expected_output)
            
        print()
        i += 1
    
    return total_score

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,,"
pft_scores = [289, 290, 292, 291, 287, 288, 293]

new_score = int(input(""Enter a new score: ""))

if new_score > 0 and new_score <= 500:
    pft_scores.append(new_score)
    average_score = sum(pft_scores) / len(pft_scores)
    score_range = max(pft_scores) - min(pft_scores)
    print(average_score)
    print(score_range)
else:
    print(""Invalid score provided"")
",completed,40.0,"----------Test #0----------
CORRECT

----------Test #1----------
CORRECT

----------Test #2----------
INCORRECT. Expected the following:
298.93333333333334
403


----------Test #3----------
INCORRECT. Expected the following:
270.1333333333333
470


----------Test #4----------
INCORRECT. Expected the following:
302.4
417


Unit Test Returned: 40.0
"
226,257,lsn22_soundboard,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Using PythonGraph, create a ""soundboard"" application. Your program should
display a list of colored buttons (i.e., rectangles). When the user clicks
inside of a rectangle, the program plays a different
sound.[](https://canvas.instructure.com/courses/1762383/files/86200052/download?download_frd=1)

The provided template file comes with a single button implemented. Your job is
to study this code and create at least 5 other buttons. Note: The buttons do
not have to be laid out in the same arrangement, but they should look
organized.

When you are finished, upload your Python code. Do NOT upload any of the sound
files.




","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn22_soundboard.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import pygame
from pygame.locals import *

class Button:
    def __init__(self, color, x, y, width, height, sound):
        self.color = color
        self.rect = pygame.Rect(x, y, width, height)
        self.sound = sound

    def draw(self, screen):
        pygame.draw.rect(screen, self.color, self.rect)

    def is_clicked(self, pos):
        if self.rect.collidepoint(pos):
            pygame.mixer.Sound(self.sound).play()

pygame.init()

screen = pygame.display.set_mode((500, 500))
pygame.display.set_caption(""Soundboard"")

button1 = Button((255, 0, 0), 50, 50, 100, 50, ""sound1.wav"")
button2 = Button((0, 255, 0), 200, 50, 100, 50, ""sound2.wav"")
button3 = Button((0, 0, 255), 350, 50, 100, 50, ""sound3.wav"")
button4 = Button((255, 255, 0), 50, 150, 100, 50, ""sound4.wav"")
button5 = Button((255, 0, 255), 200, 150, 100, 50, ""sound5.wav"")
button6 = Button((0, 255, 255), 350, 150, 100, 50, ""sound6.wav"")

buttons = [button1, button2, button3, button4, button5, button6]

running = True
while running:
    for event in pygame.event.get():
        if event.type == QUIT:
            running = False
        elif event.type == MOUSEBUTTONDOWN:
            pos = pygame.mouse.get_pos()
            for button in buttons:
                button.is_clicked(pos)

    screen.fill((255, 255, 255))
    for button in buttons:
        button.draw(screen)
    pygame.display.flip()

pygame.quit()
",completed,100.0,"Thank you for your submission. Your instructor will let you know if there is a problem.
Unit Test Returned: 100.0
"
227,258,lsn8_practice4,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a program that asks the user for the area of three plots of land.

  * The first area will be provided to you in ACRES
  * The second area will be provided to you in SQUARE MILES
  * The third area will be provided to you in SQUARE KILOMETERS

Your program will output ""Plot X is the biggest"", replacing X with either a 1,
2, or 3 depending on if the first, second, or third plot of land is the
biggest, respectively.  For this problem, you may assume that the plots are
all different sizes (e.g., no two plots will be the same size)



**NOTES:**

  * **1 acre = 0.0015625 square miles**
  * **1 sq kilometer = 0.386102 square miles**



**EXAMPLES:**

| **EXAMPLE 1** | **EXAMPLE 2**  
---|---|---  
**Inputs** |

35  
0.25  
1

|

150  
1  
2.2  
  
**Expected Output** | Plot 3 is the biggest | Plot 2 is the biggest  
  



","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def solution(area_1, area_2, area_3):
    area_1 = area_1 * 0.0015625
    area_3 = area_3 * 0.386102

    if area_1 > area_2 and area_1 > area_3:
        return ""Plot 1 is the biggest""
    elif area_2 > area_1 and area_2 > area_3:
        return ""Plot 2 is the biggest""
    elif area_3 > area_1 and area_3 > area_2:
        return ""Plot 3 is the biggest""
    
    return ""This should never return""

def run_test(area1, area2, area3):
    global num_tests_run, num_tests_passed
    
    num_tests_run += 1
    expected_output = solution(area1, area2, area3)
        
    print(""--------------------------------------------"")
    print(""Comparing %1.1f acres, %1.1f sq miles, and %1.1f sq km"" % (area1, area2, area3))
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn8_practice4.py"", [area1, area2, area3])
    
    if output.strip() == expected_output:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", expected_output)
        print(""\n"")

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))
    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))
    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)











# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
# Function to compare and find the biggest plot
def find_biggest_plot(acre, sq_mile, sq_km):
    # Convert units to square miles
    acre_to_sq_mile = acre * 0.0015625
    sq_km_to_sq_mile = sq_km * 0.386102
    
    if acre_to_sq_mile > sq_mile and acre_to_sq_mile > sq_km_to_sq_mile:
        return ""Plot 1 is the biggest""
    elif sq_mile > acre_to_sq_mile and sq_mile > sq_km_to_sq_mile:
        return ""Plot 2 is the biggest""
    else:
        return ""Plot 3 is the biggest""

# Get area inputs from the user
acre = float(input(""Enter the area of the first plot in acres: ""))
sq_mile = float(input(""Enter the area of the second plot in square miles: ""))
sq_km = float(input(""Enter the area of the third plot in square kilometers: ""))

# Call the function to find the biggest plot and print the result
result = find_biggest_plot(acre, sq_mile, sq_km)
print(result)
```
",completed,0.0,"--------------------------------------------
Comparing 428.8 acres, 0.1 sq miles, and 2.4 sq km
--------------------------------------------
INCORRECT. Expected: Plot 3 is the biggest


--------------------------------------------
Comparing 493.1 acres, 1.9 sq miles, and 2.4 sq km
--------------------------------------------
INCORRECT. Expected: Plot 2 is the biggest


--------------------------------------------
Comparing 215.9 acres, 0.8 sq miles, and 4.5 sq km
--------------------------------------------
INCORRECT. Expected: Plot 3 is the biggest


Unit Test Returned: 0.0
"
228,259,lsn8_practice3,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a program that asks the user for the price of an item in US dollars /
cents.  Then calculate and print out the equivalent price of the item in:

  *     * British Pounds (1.25 USD per Pound)
    * Korean Won (1 Won == 0.00083 USD)
    * Mexican Pesos (1 Peso == 53.81 Won)

Print each currency on a separate line.


","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    
    dollar_amount = round(random.uniform(1.00, 1000.00), 2)
    pound_amount = dollar_amount / 1.25
    won_amount = dollar_amount / 0.00083
    peso_amount = won_amount / 53.81
    
    output, error_message = autograder.run_script(""lsn8_practice3.py"", [dollar_amount])   
    lines = output.split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], pound_amount):
        print(""Correct Pound Conversion"")
        score += 33
    else:
        print(""Incorrect Pound Conversion.  Expected"", pound_amount)
        
    if len(lines) > 1 and autograder.equals(lines[1], won_amount):
        print(""Correct Won Conversion"")
        score += 33
    else:
        print(""Incorrect Won Conversion.  Expected"", won_amount)
        
    if len(lines) > 2 and autograder.equals(lines[2], peso_amount):
        print(""Correct Peso Conversion"")
        score += 34
    else:
        print(""Incorrect Peso Conversion.  Expected"", peso_amount)
    
    return score
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)










# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"Incorrect Pound Conversion.  Expected 95.44
Incorrect Won Conversion.  Expected 143734.93975903615
Incorrect Peso Conversion.  Expected 2671.156657852372
Unit Test Returned: 0
"
229,260,lsn8_practice2,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a program that gets two (x, y) coordinates from
the user in the following order: x1, y1, x2, y2.  Write a program that
calculates the distance between these two points, and prints them out. The
distance formula is  ( x 1 x 2 ) 2 + ( y 1 y 2 ) 2

HINT:  You will have to use the math module.



**EXAMPLES:**

| **EXAMPLE 1** | **EXAMPLE 2**  
---|---|---  
**Inputs** |

5.0  
10.0

8.0  
16.0

|

8.3  
-5.0

-9.3  
4.6  
  
**Expected Output (within 0.01)** | 6.708 | 20.047


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
    
    x1 = round(random.uniform(-10, 10), 1)
    y1 = round(random.uniform(-10, 10), 1)
    x2 = round(random.uniform(-10, 10), 1)
    y2 = round(random.uniform(-10, 10), 1)
    
    num_tests_run += 1
    solution = math.sqrt(abs(x1-x2)**2 + abs(y1-y2)**2)
    
    print(""--------------------------------------------"")
    print(""Calculating distance between (%1.1f, %1.1f) and (%1.1f, %1.1f)"" % (x1, y1, x2, y2))
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn8_practice2.py"", [x1, y1, x2, y2], False)
    print(""Your Output:"", output.strip())
    
    if autograder.equals(output, solution):
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT"")    
        print(""Expected:"", solution)
        print(""\n"")

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    run_test()

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)










# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

# get the coordinates from the user
x1 = float(input(""Enter the x-coordinate of the first point: ""))
y1 = float(input(""Enter the y-coordinate of the first point: ""))
x2 = float(input(""Enter the x-coordinate of the second point: ""))
y2 = float(input(""Enter the y-coordinate of the second point: ""))

# calculate the distance using the distance formula
distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

# print the distance
print(""The distance between the two points is:"", round(distance, 2))
```
",completed,0.0,"--------------------------------------------
Calculating distance between (0.8, 3.7) and (-3.0, 5.6)
--------------------------------------------
Your Output: 
INCORRECT
Expected: 4.2485291572496005


--------------------------------------------
Calculating distance between (-5.5, -2.6) and (4.7, 4.6)
--------------------------------------------
Your Output: 
INCORRECT
Expected: 12.485191228010887


Unit Test Returned: 0.0
"
230,261,lsn8_practice1,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with an incomplete Python program that prints out a
message with the class year.  Write the appropriate input statement above this
line to make this program work.



**EXAMPLE:** ****

If the user types ""2014"", your program should print:

    
    
    Members of the class of 2014 arrived at USAFA in 2010


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(class_year):
    global num_tests_run, num_tests_passed
    
    num_tests_run += 1
    solution = ""Members of the class of "" + str(class_year) + "" arrived at USAFA in "" + str(class_year - 4)
    
    print(""--------------------------------------------"")
    print(""Testing Class Year ="", class_year)
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn8_practice1.py"", [class_year], False)
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT"")
        print(""Your Output:"", output.strip())
        print(""Expected:"", solution)
        if "".0"" in output.strip():
            print(""*** HINT:  Is year a floating point number? ***"")
        print(""\n"")

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(random.randint(1959, 2024))
    run_test(random.randint(1959, 2024))

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)










# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
year = input(""Enter the class year: "")
print(""Members of the class of"", year, ""arrived at USAFA in"", int(year) - 4)
",completed,100.0,"--------------------------------------------
Testing Class Year = 1991
--------------------------------------------
SUCCESS!

--------------------------------------------
Testing Class Year = 1976
--------------------------------------------
SUCCESS!

Unit Test Returned: 100.0
"
231,267,lsn4_skill2,3,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a program that gets a cadet's age, and stores it in a variable called
**your_age.**

Print the user's age + 4.

For example, if the user types:

    
    
     18

Your program should print:

    
    
    22


","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    # Generates Random Values
    age = random.randint(18, 30)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_skill2.py"", [age])
    
    if autograder.equals(output, age+4):
        print(""PASSED"")
        return 100
    elif autograder.equals(output, age):
        print(""Close!  You forgot to add 4 to the age before printing it out"")
        return 50
    else:
        print(""Incorrect Output, Expected"", age+4)
        return 0


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"Incorrect Output, Expected 22
Unit Test Returned: 0
"
232,268,lsn4_skill1,3,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Create a variable called  **name,  **and set it equal to your name
(represented as a string--don't forget to use the quotation marks!).


","from cs110 import autograder
import random

from lsn4_skill1 import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    points_earned = 0   
    
    print(""Looking for a variable called 'name' . . . "", end='')
    
    if 'name' in globals():
        points_earned += 50
        print(""FOUND!"")
        print(""Now, checking to make sure your name is a string"")
        
        if type(name).__name__ == 'str':
            points_earned += 50
            print(""Good Job"", name + ""!"")
        else:
            print(""Make sure you are surrounding your name with quotation marks"")
    else:
        print(""NOT FOUND :("")
        
    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
name = ""John Doe""
",completed,100.0,"Looking for a variable called 'name' . . . FOUND!
Now, checking to make sure your name is a string
Good Job John Doe!
Unit Test Returned: 100
"
233,269,lsn4_scoreaverage,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write an algorithm that prompts the user for three sports game scores and
outputs the average.

  
**EXAMPLE:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 8  
15  
12 | 89  
103  
63 | 14  
42  
36  
Output | 11.666666666666666 | 85.0 | 30.666666666666668  
  
**Note: Output must match (within a predefined tolerance).**


","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    score1 = random.randint(0, 100)
    score2 = random.randint(0, 100)
    score3 = random.randint(0, 100)
    average = (score1 + score2 + score3) / 3.0
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_scoreaverage.py"", [score1, score2, score3])
    
    if autograder.equals(output, average):
        print(""PASSED!"")
        return 100
    else:
        print(""Value doesn't match.\nExpected: "" + str(average))
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)








# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
score1 = float(input(""Enter score 1: ""))
score2 = float(input(""Enter score 2: ""))
score3 = float(input(""Enter score 3: ""))

average = (score1 + score2 + score3) / 3
print(average)
","failed: must be real number, not str",0.0,
234,270,lsn4_pointspread,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

A ""Point Spread"" is a term used to in sports (and gambling) to describe the
difference between two teams' scores. For example, if one team scores 20
points and another team scores 30 points, the point spread is 10. A point
spread is always a positive number.

Write an algorithm that prompts the user for two sports game scores and
outputs the point spread.  
  
**  
EXAMPLE:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 8  
15 | 89  
103 | 42  
14  
Output | 7 | 14 | 28  
  
**Note: Output must match exactly.**


","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    score1 = random.randint(0, 50)
    score2 = random.randint(score1, 100)
    spread = abs(score1 - score2)

    points_earned = 0

    # Trial #1:  score 1 > score2
    print(""Testing when score 1 is bigger than score 2 . . ."")
    output, error_message = autograder.run_script(""lsn4_pointspread.py"", [score1, score2])
    
    if autograder.equals(output, spread):
        print(""PASSED!\n"")
        points_earned += 50
    else:
        print(""Value doesn't match.\nExpected: "" + str(spread)  + ""\n"")
        
    # Trial #2:  score 2 > score1
    print(""Testing when score 2 is bigger than score 1 . . ."")
    output, error_message = autograder.run_script(""lsn4_pointspread.py"", [score2, score1])
    
    if autograder.equals(output, spread):
        print(""PASSED!"")
        points_earned += 50
    else:
        print(""Value doesn't match.\nExpected: "" + str(spread))
    
    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
score1 = int(input(""Enter the score of team 1: ""))
score2 = int(input(""Enter the score of team 2: ""))

point_spread = abs(score1 - score2)

print(""The point spread is"", point_spread)
",completed,0.0,"Testing when score 1 is bigger than score 2 . . .
Value doesn't match.
Expected: 10

Testing when score 2 is bigger than score 1 . . .
Value doesn't match.
Expected: 10
Unit Test Returned: 0
"
235,271,lsn4_madlib,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Mad Libs are activities that have a person provide various words, which are
then used to complete a short story in unexpected (and hopefully funny) ways.
(EDITOR'S NOTE: Do you kids even do Mad Libs anymore?)

Complete the program to read the needed values from input, that the existing
output statement(s) can use to output a short story.

**EXAMPLE:**

If the input is:

    
    
    Eric
    Chipotle
    12
    burritos
    

Then the output is:

    
    
    Eric went to Chipotle to buy 12 different types of burritos


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    first_names = ['Adrian', 'Troy', 'Dave', 'Paul', 'Kelly', 'Steve', 'Barry']
    generic_locations = ['Best Buy', 'AAFES', 'Target', 'THE Walmart', 'Home Depot']
    nouns = ['Video Games', 'Board Games', 'Nintendo Switches', 'Sony PS4s', 'Microsoft (Ugh) Xbox Ones']
    
    first_name = first_names[random.randint(0, len(first_names) - 1)]
    generic_location = generic_locations[random.randint(0, len(generic_locations) - 1)]
    whole_number = random.randint(0, 100)
    plural_noun = nouns[random.randint(0, len(nouns) - 1)]

    expected_output = first_name + ' went to ' + generic_location + ' to buy ' + str(whole_number) + ' different types of ' + plural_noun + ""\n""

    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_madlib.py"", [first_name, generic_location, whole_number, plural_noun])
    
    if output == expected_output:
        print(""PASSED!"")
        return 100
    else:
        print(""String doesn't match.\nExpected: "" + expected_output)
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
name = input()
place = input()
number = input()
food = input()

print(name, ""went to"", place, ""to buy"", number, ""different types of"", food)
",completed,100.0,"PASSED!
Unit Test Returned: 100
"
236,272,lsn4_girlscouts,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a program that asks the user for the amount of money he/she has on
hand, and outputs the number of girl scout cookies that he/she can purchase.
Use the following prices:

$5 per box for the ""Super Six"" (Thin Mints, Samoas, Tagalongs, Do-Si-Dos,
Trefoils, Savannah Smiles)  
$6 per box for the Specialty Cookies (S'mores, Toffee-tastic)

**For this problem, assume that the user will buy all of one or the other. In
other words, output the number of boxes that he/she would be able to obtain if
he/she bought nothing but the Super Six, and nothing but the Specialty
Cookies.**

**HINT:**  
You can convert a number to an integer by using the int() function. For
example:  
 **int(2.51)** will convert the number to 2

EXAMPLE:  
If the input is:

    
    
    26

Then the output is:

    
    
    5 boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles  
    4 boxes of S'mores and Toffee-tastic


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    dollar_amount = round(random.uniform(10.00, 100.00), 2)
    super_six_amount = (dollar_amount // 5)
    specialty_amount = (dollar_amount // 6)
    score = 0
    
    line_1 = str(int(super_six_amount)) + "" boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles""
    line_2 = str(int(specialty_amount)) + "" boxes of S'mores and Toffee-tastic""
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_girlscouts.py"", [dollar_amount])
    output_lines = output.split('\n')
    
    if line_1 == output_lines[0]:
        print(""First Line is Correct"")
        score += 50
    else:
        print(""First Line is Incorrect.  Expected:"", line_1)
    
    if line_2 == output_lines[1]:
        print(""Second Line is Correct"")
        score += 50
    else:
        print(""Second Line is Incorrect.  Expected:"", line_2)
    
    return score
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,failed: list index out of range,0.0,
237,273,lsn4_arrivaltime,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write an algorithm that prompts the user for a distance to travel (in miles)
and a speed (in mph) and outputs time of arrival in hours.

  
**For Example:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 72  
60 | 1282  
85 | 120.5  
59.2  
Output | 1.2 | 15.0823 | 2.0355  
  
**Note: Output needs to match the examples.**


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    distance = round(random.random() * 1000, 1)
    speed = round(random.random() * 60, 1)
    time = distance / speed
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_arrivaltime.py"", [distance, speed])
    
    if autograder.equals(output, time):
        print(""PASSED!"")
        return 100
    else:
        print(""Value doesn't match.\nExpected: "" + str(time))
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
distance = float(input())
speed = float(input())

time = distance / speed

print(round(time, 4))
","failed: must be real number, not str",0.0,
238,278,lsn23_tokens,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write a Python program that asks the user for the name of a file.

Your program should then read this file and count how many times each token
(i.e., word) appears (NOTE: to keep it simple, and split on the ). Finally,
let the user type a token, and print how many times that token appears (if a
word is not in your dictionary, print 0).



**HINTS:**

  * You have been provided with the file review.txt to test your code.


","from cs110 import autograder
import random, math

def solution(filename, t):
    # Opens the file
    file = open(filename, ""r"")

    # Extracts ALL of the text as one big string
    file_contents = file.read()

    # Splits the entire document into tokens
    list_of_tokens = file_contents.split(' ')

    # Creates a Dictionary to Store All Tokens
    token_dictionary = {}

    for token in list_of_tokens:
        if token not in token_dictionary:
            token_dictionary[token] = 1
        else:
            token_dictionary[token] = token_dictionary[token] + 1
    
    if t in token_dictionary:
        return token_dictionary[t]
    else:
        return 0
    

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_correct = 0
    
    # Test #1:
    print(""------------------------------------------"")
    print(""Test 1"")
    print(""------------------------------------------"")
    answer, error = autograder.run_script(""lsn23_tokens.py"", [""review.txt"", ""Fit""])
    expected_answer = solution(""review.txt"", ""Fit"")
    
    if autograder.equals(answer, expected_answer):
        print(""CORRECT\n"")
        num_correct += 1
    else:
        print(""INCORRECT, Expected:"", expected_answer, ""\n"")
    
    
    # Test #2:
    print(""------------------------------------------"")
    print(""Test 2"")
    print(""------------------------------------------"")
    answer, error = autograder.run_script(""lsn23_tokens.py"", [""article.txt"", ""plastic""])
    expected_answer = solution(""article.txt"", ""plastic"")
    
    if autograder.equals(answer, expected_answer):
        print(""CORRECT\n"")
        num_correct += 1
    else:
        print(""INCORRECT, Expected:"", expected_answer, ""\n"")
        
    # Test #3:
    print(""------------------------------------------"")
    print(""Test 3"")
    print(""------------------------------------------"")
    answer, error = autograder.run_script(""lsn23_tokens.py"", [""article2.txt"", ""environment""])
    expected_answer = solution(""article2.txt"", ""environment"")
    
    if autograder.equals(answer, expected_answer):
        print(""CORRECT"")
        num_correct += 1
    else:
        print(""INCORRECT, Expected:"", expected_answer)
    
    return round(100 / 3 * num_correct, 1)
    
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,,"```
# Program to count the occurrences of each token in a file

def count_tokens():
    # Ask the user for the name of the file
    filename = input(""Enter the name of a file: "")
    
    # Read the file and count the occurrences of each token
    word_count = {}
    with open(filename, 'r') as file:
        for line in file:
            tokens = line.split()
            for token in tokens:
                if token in word_count:
                    word_count[token] += 1
                else:
                    word_count[token] = 1
    
    # Ask the user for a token and print its occurrence count
    token = input(""Enter a token: "")
    count = word_count.get(token, 0)
    print(""Occurrences of the token:"", count)

count_tokens()
```
",failed: [Errno 2] No such file or directory: 'review.txt',0.0,
239,279,lsn23_skill2,3,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You are being provided with a function called `mini_sort` that takes two
numbers as parameters. Modify this function so that it returns a tuple
containing the numbers in ascending order.



**EXAMPLES:**

`mini_sort(1, 2)` should return the tuple:  (1, 2)

`mini_sort(50, 40)` should return the tuple:  (40, 50)




","from cs110 import autograder
import random, math
import lsn23_skill2

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    a = random.randint(0, 5)
    b = random.randint(6, 10)
    c = random.randint(100, 200)
    d = random.randint(0, 99)
    
    score = 0
    
    print(""Test #1.  Calling mini_sort(%d, %d)"" % (a, b))
    output = lsn23_skill2.mini_sort(a, b)
    print(""  Your Function Returned:"", output)
    if output == (a, b):
        print(""  CORRECT\n"")
        score += 50
    else:
        print(""  INCORRECT.  Expected"", (a, b), ""\n"")
        
    print(""Test #2.  Calling mini_sort(%d, %d)"" % (c, d))
    output = lsn23_skill2.mini_sort(c, d)
    print(""  Your Function Returned:"", output)
    if output == (d, c):
        print(""  CORRECT\n"")
        score += 50
    else:
        print(""  INCORRECT.  Expected"", (d, c), ""\n"")
    
    return score

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,,,failed: module 'lsn23_skill2' has no attribute 'mini_sort',0.0,
240,298,lsn18_triangle,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write an algorithm that asks the user for X and Y coordinates of a single
point (the coordinates of the top left point on the triangle), the length of
the base, and the height of a right triangle. Then, open a graphics window and
draw the triangle. The area of the triangle is should be displayed at the
bottom center of the window in black.



**HINTS:**

  * Make sure you get the user input BEFORE you open the window. Otherwise, the program will freeze.
  * The `draw_text` function will draw text on a screen. Don't worry about getting the text EXACTLY in the center (it's hard!).




","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn18_triangle.py"", doraise=True)
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
        
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import graphics

def calculate_area(base, height):
    return (base * height) / 2

def draw_triangle(x, y, base, height, area):
    win = graphics.GraphWin(""Triangle"", 500, 500)
    
    p1 = graphics.Point(x, y)
    p2 = graphics.Point(x, y + height)
    p3 = graphics.Point(x + base, y + height)
    
    triangle = graphics.Polygon(p1, p2, p3)
    triangle.setFill(""white"")
    triangle.draw(win)
    
    text = graphics.Text(graphics.Point(250, 480), ""Area: "" + str(area))
    text.setTextColor(""black"")
    text.setSize(20)
    text.draw(win)
    
    win.getMouse()
    win.close()

if __name__ == ""__main__"":
    x = int(input(""Enter x coordinate: ""))
    y = int(input(""Enter y coordinate: ""))
    base = int(input(""Enter base length: ""))
    height = int(input(""Enter height: ""))
    
    area = calculate_area(base, height)
    draw_triangle(x, y, base, height, area)
```
",completed,0.0,"There appears to be a syntax error in your code.
Unit Test Returned: 0.0
"
241,299,lsn18_stamp,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Create a pythonGraph function called `draw_stamp` that accepts an x and y
coordinate as parameters. Add code so that this function will then draw a
picture (of your choosing) centered on that coordinate.



To test your function, create a pythonGraph window, and call your function
several times (each time, passing it a different set of x and y coordinates).


","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn18_stamp.py"", doraise=True)
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
        
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import pythonGraph

def draw_stamp(x, y):
    pythonGraph.window(-200, 200, -200, 200)
    pythonGraph.moveTo(x, y)
    pythonGraph.penColor(""blue"")
    pythonGraph.penSize(3)
    pythonGraph.drawLine(0, 50)
    pythonGraph.turn(90)
    pythonGraph.forward(50)
    pythonGraph.turn(90)
    pythonGraph.forward(50)
    pythonGraph.turn(90)
    pythonGraph.forward(50)
    pythonGraph.turn(90)
    pythonGraph.forward(50)
    pythonGraph.line(0, -50)
    pythonGraph.penUp()
    pythonGraph.wait(1)

draw_stamp(0, 0)
draw_stamp(-100, 100)
draw_stamp(100, -100)
",completed,100.0,"----------------------------------------------------------------------
*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***
----------------------------------------------------------------------

Thank you for your submission. Your instructor will let you know if there is a problem.
Unit Test Returned: 100.0
"
242,301,lsn18_simpledrawing,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Using pythonGraph (and the documentation for pythonGraph), experiment with
each of the drawing commands listed (drawing commands begin with the keyword
""draw""). Draw something interesting using at least 4 different drawing
commands. One of those drawing commands must be `draw_image`

**NOTE:  
** The best files will be added to our Python ""Hall of Fame"".


","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    drawing_functions = [""draw_arc"", ""draw_image"", ""draw_rectangle"", ""draw_circle"", ""draw_ellipse"", ""draw_line"", ""draw_pixel"", ""draw_text"", ""write_text""]
    drawing_functions_called = []
    
    print(""----------------------------------------------------------------------"")
    print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
    print(""----------------------------------------------------------------------\n"")
    
    file = open(""lsn18_simpledrawing.py"", ""r"")
    file_contents = file.read()
    
    for f in drawing_functions:
        if f in file_contents and f not in drawing_functions_called:
            drawing_functions_called.append(f)
    
    if len(drawing_functions_called) >= 4 and ""draw_image"" in drawing_functions_called:
        print(""Good Job!"")
        return 100.0
    elif len(drawing_functions_called) >= 4 and ""draw_image"" not in drawing_functions_called:
        print(""Missing at least one call of draw_image"")
        return 90.0
    else:
        print(""Not enough different drawing functions.  Need 4 unique (including draw_image) calls."")
        return 25 * len(drawing_functions_called)
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import graph

graph.draw_grid(4, 4)
graph.draw_line(1, 1, 3, 3)
graph.draw_text(""Hello, world!"", 2, 2)
graph.draw_image(""image.jpg"", 0, 0)
",completed,75.0,"----------------------------------------------------------------------
*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***
----------------------------------------------------------------------

Not enough different drawing functions.  Need 4 unique (including draw_image) calls.
Unit Test Returned: 75
"
243,302,lsn18_randomcircles,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Create a pythonGraph that asks the user for the number of circles to draw.
Your program should then open a pythonGraph window and then draw that many
circles somewhere within view.

**Hints**

  * Import the `random` module in order to generate random numbers. There are specifically two functions that are useful:
  * `random.random()` returns a random number between 0.0 and 1.0
  * `random.randint(start, end)` returns a random integer between `start` and `end`




","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:
        py_compile.compile(""lsn18_randomcircles.py"", doraise=True)
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
import random
import pythongraph


def draw_circles(num_circles):
    for _ in range(num_circles):
        x = random.randint(0, 400)
        y = random.randint(0, 400)
        radius = random.randint(10, 50)
        pythongraph.draw_circle(x, y, radius)


num_circles = int(input(""Enter the number of circles to draw: ""))
pythongraph.open_window()
draw_circles(num_circles)
pythongraph.wait_for_close()
",completed,100.0,"----------------------------------------------------------------------
*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***
----------------------------------------------------------------------

Thank you for your submission. Your instructor will let you know if there is a problem.
Unit Test Returned: 100.0
"
244,334,lsn11_in_circle,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a function that determines if a point is within a circle. You will
name your function `in_circle()`. It has five parameters:

  1. The coordinates of the point that is to be tested (x, y)
  2. The center of a circle (cir_x, cir_y)
  3. The radius of the circle (radius)

 The `in_circle()` function will return **True** if the point is on or inside
the circle, and **False** otherwise.

**IMPORTANT:  
** You are encouraged to write code to test your function. However, when you
test against the server, only include the code for the function itself (you
can comment out your test code).


","import lsn11_in_circle
from cs110 import autograder
import random, math

NUM_SUBTESTS = 5
   
def soln(x, y, cir_x, cir_y, radius):
    distance = math.sqrt((cir_x - x)**2 + (cir_y - y)**2)
    return distance <= radius

def test_passed():
    
    passed = 0
    for i in range(NUM_SUBTESTS):
        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')
        if i == 0:
            x = 6.04
            y = 2.43
            cir_x = 43.4
            cir_y = 52.2
            radius = 74.1
        else:
            x = random.random() * 10.0
            y = random.random() * 10.0
            cir_x = random.random() * 100.0
            cir_y = random.random() * 100.0
            radius = random.random() * 100.0
        #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))
        if lsn11_in_circle.in_circle(x, y, cir_x, cir_y, radius) == soln(x, y, cir_x, cir_y, radius):
            print(""CORRECT!"")
            passed += 1
        else:
            print('INCORRECT:  in_circle(%f, %f, %f, %f, %f) incorrectly returned %s' % (x, y, cir_x, cir_y, radius, lsn11_in_circle.in_circle(x, y, cir_x, cir_y, radius)))
    
    return (100 / NUM_SUBTESTS) * passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"Here is the solution to the problem:

```python
import math

def in_circle(x, y, cir_x, cir_y, radius):
    distance = math.sqrt((x - cir_x)**2 + (y - cir_y)**2)
    
    if distance <= radius:
        return True
    else:
        return False
```

To test the `in_circle()` function, you can add the following code:

```python
# Test case 1 - point is inside the circle
print(in_circle(3, 4, 5, 5, 3))  # Output: True

# Test case 2 - point is on the edge of the circle
print(in_circle(5, 8, 5, 5, 3))  # Output: True

# Test case 3 - point is outside the circle
print(in_circle(8, 9, 5, 5, 3))  # Output: False
```

Make sure to remove the test code before submitting your solution.","failed: invalid syntax (lsn11_in_circle.py, line 1)",0.0,
245,335,lsn11_distance,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a function that computes the distance between two points. You will
name your function `dist_points`. It has four parameters, the cordinates of
the two points as `x1, y1, x2, y2`. The `dist_points()` function will return
the distance between the two points as a floating point number.

**IMPORTANT:  
** You are encouraged to write code to test your function. However, when you
test against the server, only include the code for the function itself (you
can comment out your test code).


","from lsn11_distance import dist_points
from cs110 import autograder
import random, math

NUM_SUBTESTS = 5

def soln(x1, y1, x2, y2):
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)

def test_passed():
    
    passed = 0
    
    print(""Feedback:"")
    
    for i in range(NUM_SUBTESTS):
        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')
        x1 = round(random.uniform(-10, 10), 1)
        y1 = round(random.uniform(-10, 10), 1)
        x2 = round(random.uniform(-10, 10), 1)
        y2 = round(random.uniform(-10, 10), 1)
        if autograder.equals(dist_points(x1, y1, x2, y2), soln(x1, y1, x2, y2)):
            print(""PASSED!"")
            passed += 1
        else:
            print('FAILED: dist_point(%1.1f, %1.1f, %1.1f, %1.1f) incorrectly returned' % (x1, y1, x2, y2), dist_points(x1, y1, x2, y2))
    
    return round(100 / NUM_SUBTESTS, 1) * passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

def dist_points(x1, y1, x2, y2):
    distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
    return distance
",completed,100.0,"Feedback:
Running sub test 1 of 5: PASSED!
Running sub test 2 of 5: PASSED!
Running sub test 3 of 5: PASSED!
Running sub test 4 of 5: PASSED!
Running sub test 5 of 5: PASSED!
Unit Test Returned: 100.0
"
246,336,lsn11_circle,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a function that computes the area of a circle. You will name your
function `area_circle`. It has one parameter, the radius of the circle,
`radius`. The `area_circle()` function will return the area of the circle.

**IMPORTANT:  
** You are encouraged to write code to test your function. However, when you
test against the server, only include the code for the function itself (you
can comment out your test code).


","import lsn11_circle
from cs110 import autograder
import random, math

NUM_SUBTESTS = 5

# Helper method to see if a numeric value is within a specified delta
def soln(radius):
    return math.pi * radius * radius

def test_passed():
    
    passed = 0
    
    print(""Feedback:"")
    
    for i in range(NUM_SUBTESTS):
        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')
        radius = random.random() * 100.0
        if autograder.equals(lsn11_circle.area_circle(radius), soln(radius)):
            print(""CORRECT!"")
            passed += 1
        else:
            print('area_circle(%d) incorrectly returned' % (radius), lsn11_circle.area_circle(radius))
        
    return round(100 / NUM_SUBTESTS, 1) * passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math
  
def area_circle(radius):
    area = math.pi * radius**2
    return area
",completed,100.0,"Feedback:
Running sub test 1 of 5: CORRECT!
Running sub test 2 of 5: CORRECT!
Running sub test 3 of 5: CORRECT!
Running sub test 4 of 5: CORRECT!
Running sub test 5 of 5: CORRECT!
Unit Test Returned: 100.0
"
247,337,lsn11_asteroids,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

""Asteroids"" was an arcade game created in 1979 by Atari, Inc. In the game, the
player is given control of a spaceship that has the ability to shoot bullets.
The player is then placed in a field of floating rocks, and is tasked with
destroying them without running into them.

In this lab, you will write a ""collision detection"" function that will be used
by the game to determine if the player's ship has hit a rock. To make this
simple, assume that an imaginary circle extends from the center of the
asteroid and the player's ship (see below image). If the two circles ever
overlap one another, then a collision has occurred. (NOTE: There are more
accurate ways to detect a collision. [Click here if you want to learn more
(Links to an external site.)](https://bell0bytes.eu/basic-collision-
detection/)).

![](https://bell0bytes.eu/content/images/2019/03/spaceShipAsteroid.png)

Your function, which you will name `detect_collision()` should have six
parameters: the (x, y) coordinates of the center of player's ship, the ship's
radius, the (x, y) coordinates of the center of an asteroid, and the
asteroid's radius. Your function will return `True` if the player's ship has
hit the asteroid, and `False` otherwise.

**HINT: _  
_** _You may want to copy and paste the_  `dist_points`  _function you created
earlier. It's almost as if we are trying to demonstrate the importance of
reusable functions . . ._

**IMPORTANT:  
** You are encouraged to write code to test your function. However, when you
test against the server, only include the code for the function itself (you
can comment out your test code).


","from cs110 import autograder
import random, math
import lsn11_asteroids 

def soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):
    distance = math.sqrt((ship_x - asteroid_x)**2 + (ship_y - asteroid_y)**2)
    return distance < asteroid_r + ship_r

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 4
    num_tests_passed = 0
    
    print(""Feedback:"")
    score = 0
        
    if ""dist_points"" in dir(lsn11_asteroids):
        score += 20
        print(""dist_points function found"")
    else:
        print(""dist_points function not being utilized.  Don't reinvent the wheel!"")
        #score += 20
        
    for i in range(NUM_TESTS):
        print('Running test %d of %d: ' % (i+1 , NUM_TESTS), end='')
        
        if i == 0:
            ship_x = 2.3
            ship_y = 0.2
            ship_r = 3
            asteroid_x = -4
            asteroid_y = 3.4
            asteroid_r = 6
        else:
            ship_x = round(random.uniform(-50, 50), 1)
            ship_y = round(random.uniform(-50, 50), 1)
            ship_r = 3
            asteroid_x = round(random.uniform(-50, 50), 1)
            asteroid_y = round(random.uniform(-50, 50), 1)
            asteroid_r = 6
        
        #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))
        if lsn11_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r) == soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):
            print(""CORRECT"")
            score += 20
        else:
            print('detect_collision(%f, %f, %f, %f, %f, %f) incorrectly returned %s' % (ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r, lsn11_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r)))
    
    return score
            
            
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

def detect_collision(ship_x, ship_y, ship_radius, asteroid_x, asteroid_y, asteroid_radius):
    distance = math.sqrt((ship_x - asteroid_x)**2 + (ship_y - asteroid_y)**2)
    if distance <= ship_radius + asteroid_radius:
        return True
    else:
        return False

# Test cases
print(detect_collision(0, 0, 5, 10, 10, 5)) # True
print(detect_collision(0, 0, 5, 20, 20, 5)) # False
print(detect_collision(5, 5, 3, 10, 10, 3)) # True
print(detect_collision(5, 5, 3, 5, 5, 3)) # True
print(detect_collision(5, 5, 3, 7, 7, 1)) # False

",completed,80.0,"False
False
False
True
True
Feedback:
dist_points function not being utilized.  Don't reinvent the wheel!
Running test 1 of 4: CORRECT
Running test 2 of 4: CORRECT
Running test 3 of 4: CORRECT
Running test 4 of 4: CORRECT
Unit Test Returned: 80
"
248,338,lsn10_skill2,3,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a function called `draw_multiple_trees()` that
outputs a tree using ASCII art. Unlike the previous problem, this function
accepts a parameter that tells it how many trees to draw.

Write a program that:

  1. Gets an integer from the user and stores it in a variable. You can name this variable whatever you want.
  2. Calls the function, and passes the variable to it. 

Remember that ""passing a value"" to a function simply means putting the number
inside the parenthesis when you call it.


","from cs110 import autograder
import random, math

# The Actual Solution
def draw_tree(num_times):
    result = """"
    for i in range(num_times):
        result += ""  *  \n""
        result += "" *** \n""
        result += ""*****\n""
        result += ""  |  \n""
    return result;


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    num_passed = 0
    num_tests = 3
    
    for i in range(num_tests):
        print(""-------------------------------------------"")
        print(""Test"", i+1)
        print(""-------------------------------------------"")
        num_trees = random.randint(0, 5)
        output, error_message = autograder.run_script(""lsn10_skill2.py"", [num_trees])
        expected_output = draw_tree(num_trees)
        
        if output == expected_output:
            print(""Good Job!\n"")
            num_passed += 1
        else:
            print(""Incorrect Output. Expected the following:"")
            print(expected_output, ""\n"")
    
    return round((100 / num_tests) * num_passed, 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def draw_multiple_trees(num_trees):
    for i in range(num_trees):
        print(""   /\\"")
        print(""  /  \\"")
        print("" /    \\"")
        print(""  ||||"")
        print()

# Get an integer from the user
num_trees = int(input(""Enter the number of trees to draw: ""))

# Call the function and pass the variable
draw_multiple_trees(num_trees)
",completed,0.0,"-------------------------------------------
Test 1
-------------------------------------------
Incorrect Output. Expected the following:
  *  
 *** 
*****
  |  
 

-------------------------------------------
Test 2
-------------------------------------------
Incorrect Output. Expected the following:
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
 

-------------------------------------------
Test 3
-------------------------------------------
Incorrect Output. Expected the following:
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
 

Unit Test Returned: 0.0
"
249,339,lsn10_skill1,3,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a function called `draw_tree()` that prints a
tree using ASCII art:

    
    
     *  
     ***  
    *****  
     |

Call this function.


","from cs110 import autograder
import random, math

# The Actual Solution
def draw_tree():
    result =  ""  *  \n""
    result += "" *** \n""
    result += ""*****\n""
    result += ""  |  \n""
    return result;


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error_message = autograder.run_script(""lsn10_skill1.py"", [])
    
    expected_output = draw_tree() + draw_tree () + draw_tree()
    
    if output == expected_output:
        print(""Good Job!"")
        return 100
    else:
        print(""Incorrect Output. Expected the following:"")
        print(expected_output)
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def draw_tree():
    print(""     *"")
    print(""    ***"")
    print(""   *****"")
    print(""     |"")

draw_tree()
",completed,0.0,"Incorrect Output. Expected the following:
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  

Unit Test Returned: 0
"
250,347,a3_6_situps,3,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been asked to write a program that analyzes the number of situps
done by a group of cadets.  Write a program that gets from the user the number
of people tested, and gets that many situp scores (which you may assume are
whole numbers) from the user.  Your program must print out:

  * The average number of situps for the group.
  * The count of cadets that scored higher than the average.



**EXAMPLES:**

| **Example 1** | **Example 2**  
---|---|---  
**Input** | 3  
75  
90  
88  
  
  
| 5  
86  
79  
90  
90  
100  
**Output** | 84.3  
2 | 89.0  
3  
  



","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_situps.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""situps"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (10%) -- scores exist that exactly match average
    weight = 10.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,,"
n = int(input(""Enter the number of people tested: ""))

scores = []
total = 0

for i in range(n):
    score = int(input(""Enter the situp score for cadet {}: "".format(i+1)))
    scores.append(score)
    total += score

average = total / n
above_average_count = sum(score > average for score in scores)

print(""Average number of situps for the group:"", average)
print(""Number of cadets that scored higher than the average:"", above_average_count)
",completed,10.0,"Number of output lines is correct.
Average not found.  Expected:  88.0
Count not found.  Expected:  0
Number of output lines is correct.
Average not found.  Expected:  43.0
Count not found.  Expected:  0
Number of output lines is correct.
Average not found.  Expected:  57.0
Count not found.  Expected:  2
Number of output lines is correct.
Average not found.  Expected:  68.5
Count not found.  Expected:  2
Number of output lines is correct.
Average not found.  Expected:  54.0
Count not found.  Expected:  5
Unit Test Returned: 10.0
"
251,354,a3_5_connect,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a table that describes a connect 4 board. In
this code, a list (`connect_4`) is populated with characters representing the
location of each of the pieces (Red, Yellow, or Blank).



    
    
    X = Red; 0 = Yellow; _ = Blank



Write a program that gets two values from the user in the following order:

1) a row index, a 0 indicates the Top row and 5 the Bottom row

2) a column index, a 0 indicates the Leftmost column and 6 the Rightmost
column



Finally,  **Print  **out the contents of the table at that particular cell.



  

**HINT:**

  * Your output should be one of the following letters:  ""X"", ""0"" or ""_""


# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
connect_4   =      [['X', '_', '_', '_', '_', '_', '_'],
                    ['X', '_', 'X', '_', '_', '_', '_'],
                    ['0', '_', 'X', '_', '_', '_', '_'],
                    ['0', '_', '0', 'X', '_', '_', '0'],
                    ['0', '_', '0', '0', 'X', '_', 'X'],
                    ['X', '_', 'X', '0', '0', 'X', 'X']]

#Your code goes here.","from cs110 import autograder
import random, math

connect_4   =      [['X', '_', '_', '_', '_', '_', '_'],
                    ['X', '_', 'X', '_', '_', '_', '_'],
                    ['0', '_', 'X', '_', '_', '_', '_'],
                    ['0', '_', '0', 'X', '_', '_', '0'],
                    ['0', '_', '0', '0', 'X', '_', 'X'],
                    ['X', '_', 'X', '0', '0', 'X', 'X']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking (row:"", row, ""col:"", col, "")"")
    print(""-----------------------------"")
    
    output, error = autograder.run_script(""a3_5_connect.py"", [row, col])
    
    if connect_4[row-1][col-1] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", connect_4[row-1][col-1], ""\n"")
        return False
        

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    
    if (check_location(1, 2)):
        score += 20
    
    if (check_location(1, random.randint(1, len(connect_4[0])))):
        score += 20
        
    if (check_location(6, random.randint(1, len(connect_4[0])))):
        score += 20
    
    if (check_location(random.randint(1, len(connect_4)), random.randint(1, len(connect_4[0])))):
        score += 20
    
    if (check_location(random.randint(1, len(connect_4)), random.randint(1, len(connect_4[0])))):
        score += 20
    
    return score
    

    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
connect_4   =      [['X', '_', '_', '_', '_', '_', '_'],
                    ['X', '_', 'X', '_', '_', '_', '_'],
                    ['0', '_', 'X', '_', '_', '_', '_'],
                    ['0', '_', '0', 'X', '_', '_', '0'],
                    ['0', '_', '0', '0', 'X', '_', 'X'],
                    ['X', '_', 'X', '0', '0', 'X', 'X']]

#Your code goes here.","
row_index = int(input(""Enter the row index: ""))
column_index = int(input(""Enter the column index: ""))

cell_content = connect_4[row_index][column_index]

print(cell_content)
",completed,0.0,"-----------------------------
Checking (row: 1 col: 2 )
-----------------------------
Incorrect.  Expected: _ 

-----------------------------
Checking (row: 1 col: 3 )
-----------------------------
Incorrect.  Expected: _ 

-----------------------------
Checking (row: 6 col: 5 )
-----------------------------
Incorrect.  Expected: 0 

-----------------------------
Checking (row: 5 col: 2 )
-----------------------------
Incorrect.  Expected: _ 

-----------------------------
Checking (row: 6 col: 7 )
-----------------------------
Incorrect.  Expected: X 

Unit Test Returned: 0
"
252,359,a3_4_testscores,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a list called list_of_test_scores. Write a
program that prints out the range ( _i.e.,  _the difference between the max
and min scores)



**EXAMPLE:  
** If, for example, the list contained the values:  50, 64, 72

Your program should print:

    
    
    22




","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_testscores.py""

list_of_test_scores = [98.6,78.5,100,67.7,88,72.6,45,82.5,86.5,79.9,100,98.6,99,55.4,94.5,91.2,90,79.5]

max_value = max(list_of_test_scores) 
min_value = min(list_of_test_scores)

def verify_code():
    print(""Test 1:  Scanning your solution . . . "", end='')
    
    file = open(STUDENT_FILE, ""r"")
    contents = file.read()
        
    if ""for"" not in contents and ""while"" not in contents and ""max"" not in contents and ""min"" not in contents and ""sort"" not in contents:
        print(""Could not find code that gets the highest and lowest pt scores . . ."")
        return False
    
    print(""Good. You are actually computing the answer."")
    return True



# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if verify_code():
        print(""Test 2:  Checking Output . . . "", end='')
        score += 60
        
        if len(lines) >= 1:           
            if autograder.equals(lines[0], max_value - min_value):
                print(""Range Look Good!"")
                score += 40
            else:
                print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
                
        else:
            print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
list_of_test_scores = [50, 64, 72]

range_of_scores = max(list_of_test_scores) - min(list_of_test_scores)
print(range_of_scores)
","failed: must be real number, not str",0.0,
253,367,a3_3_dogs,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a list called `list_of_dogs`. Write a program
that prints out each of the items in this list (one item per line).  



**EXAMPLE:  
** If, for example, the list contained the items:  ""A"", ""B"", ""C""

Your program should print:

    
    
    A  
    B  
    C



**NOTE:**

  * You must use a loop to complete this task.  


# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_dogs = [""Pug"", ""Lab"", ""Yorkie"", ""Pit Bull"", ""Poodle"", ""Great Dane""]

#Your code goes here.","from cs110 import autograder
import random, math

list_of_dogs = [""Pug"", ""Lab"", ""Yorkie"", ""Pit Bull"", ""Poodle"", ""Great Dane""]

def solution():
    result = []
    
    for item in list_of_dogs:
        result.append(item)
    
    return result
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""a3_3_dogs.py"", [])
    expected_output = solution()
    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    return round(100 / len(expected_output) * num_matches, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_dogs = [""Pug"", ""Lab"", ""Yorkie"", ""Pit Bull"", ""Poodle"", ""Great Dane""]

#Your code goes here.","
for dog in list_of_dogs:
    print(dog)
",completed,0.0,"Unit Test Returned: 0.0
"
254,376,a3_1_light_aircraft,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with a list called `list_of_aircraft`. Write a program
that prints a single, specified aircraft from the list. Your program shall
take a number via user input used to identify which aircraft to print. For
example, if the user types a 3, you should print out the third item.



**NOTE:**

  * You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)


","from cs110 import autograder
import random, math

list_of_aircraft = [""F-16"",""F-15"",""F-22"",""F-35"", ""A-10"", ""B-1"",""B-2"", ""B-52"" ]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(list_of_aircraft)-2), len(list_of_aircraft)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_light_aircraft.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == list_of_aircraft[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != list_of_aircraft[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(list_of_aircraft[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,"
# Program to print a specified aircraft from a list

list_of_aircraft = [""Boeing 747"", ""Airbus A380"", ""Cessna 172"", ""Bombardier Challenger"", ""Embraer E175""]

index = int(input(""Enter the index of the aircraft you want to print: ""))
print(list_of_aircraft[index - 1])
",completed,0.0,"----------------------------------------------------------
Testing item #1: 
----------------------------------------------------------
Unexpected Output (Expected F-16)

----------------------------------------------------------
Testing item #6: 
----------------------------------------------------------

----------------------------------------------------------
Testing item #8: 
----------------------------------------------------------

Unit Test Returned: 0.0
"
255,387,a2_5_virus,3,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You are writing a program that will help you decide if there are too many
people at a restaurant for you to dine safely. Your program will ask for the
number of people in the restaurant. It will then ask for the distance between
yourself and each of the people (in feet, which do not have to be whole
numbers). Your program will keep track of how many people are within 6 feet of
you (inclusive). Your program will then print one of the following statements:

**# of People within 6 Feet** | **0** | **1-2** | **> 2**  
---|---|---|---  
**Output** | All Clear | Warning | Find Another Place  
  


**EXAMPLES:**

  | **Example 1** | **Example 2**  
---|---|---  
**INPUT** | 3  
5.7  
10.2  
12.4 | 2  
7.0  
15.1  
**OUTPUT** | Warning | All Clear


","from cs110 import autograder
import random, math

def run_test(num_violating, num_people):    
    inputs = [num_people]
    
    for i in range(num_people):
        if i < num_violating:
            if (i + 1 == num_violating):
                inputs.append(6)
            else:
                inputs.append(round(random.uniform(0, 6), 1))
        else:
            inputs.append(round(random.uniform(7, 20), 1))

    # Generates Expected Answer
    if num_violating == 0:
        answer = ""All Clear""
    elif num_violating <= 2:
        answer = ""Warning""
    else:
        answer = ""Find Another Place""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_5_virus.py"", inputs)
    
    print(""Testing when"", num_violating, ""out of"", num_people, ""are violating . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 2))):
        num_passed += 1
    
    if (run_test(2, random.randint(3, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,"
num_people = int(input(""Enter the number of people in the restaurant: ""))
distances = []
for i in range(num_people):
    distance = float(input(""Enter the distance between yourself and person {}: "".format(i+1)))
    distances.append(distance)

count_within_6_feet = 0
for distance in distances:
    if distance <= 6:
        count_within_6_feet += 1

if count_within_6_feet == 0:
    print(""All Clear"")
elif count_within_6_feet <= 2:
    print(""Warning"")
else:
    print(""Find Another Place"")
",completed,100.0,"Testing when 0 out of 2 are violating . . . 
  Inputs: [2, 11.4, 8.0]
  Result: CORRECT!

Testing when 1 out of 2 are violating . . . 
  Inputs: [2, 6, 8.3]
  Result: CORRECT!

Testing when 2 out of 3 are violating . . . 
  Inputs: [3, 4.1, 6, 18.8]
  Result: CORRECT!

Testing when 3 out of 4 are violating . . . 
  Inputs: [4, 2.4, 0.4, 6, 14.1]
  Result: CORRECT!

Unit Test Returned: 100.0
"
256,388,a2_5_traffic_lights,3,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

The City Manager is having a traffic problem and asked you are to write a
program that will determine whether or not to activate a newly installed
alternate traffic light schedule to help alleviate traffic throughout the city
during peak traffic hours. Your program will ask for the number of traffic
""time periods"" to analyze. It will then ask for the traffic throughput (in
average number of cars per minute, which does not have to be a whole number)
for each ""time period"". Your program will keep track of how many ""time
periods"" are considered heavy traffic, as defined as 15 cars per minutes or
more (inclusive). Your program will then print one of the following
statements:

**# of ""time periods"" of heavy traffic** | **0** | **1-2** | **> 2**  
---|---|---|---  
**Output** | Regular Schedule | Prepare Activation | Activate New Schedule  
  
**EXAMPLES:**

  | **Example 1** | **Example 2**  
---|---|---  
**INPUT** |

3

12.8

15.0

6.7

|

3

17.3

15.1

19.2  
  
**OUTPUT** | Prepare Activation | Activate New Schedule


","from cs110 import autograder
import random, math

def run_test(num_over, traffic):    
    inputs = [traffic]
    
    for i in range(traffic):
        if i < num_over:
            if (i + 1 == num_over):
                inputs.append(15)
            else:
                inputs.append(round(random.uniform(15, 30), 1))
        else:
            inputs.append(round(random.uniform(1, 15), 1))

    # Generates Expected Answer
    if num_over == 0:
        answer = ""Regular Schedule""
    elif num_over <= 2:
        answer = ""Prepare Activation""
    else:
        answer = ""Activate New Schedule""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_5_traffic_lights.py"", inputs)
    
    print(""Testing when"", num_over, ""out of"", traffic, ""\""time periods\"" are experiencing heavy traffic . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 2))):
        num_passed += 1
    
    if (run_test(2, random.randint(3, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,,completed,0.0,"Testing when 0 out of 4 ""time periods"" are experiencing heavy traffic . . . 
  Inputs: [4, 5.0, 9.7, 3.3, 2.8]
  Result: INCORRECT. Expected: 'Regular Schedule' instead of ''

Testing when 1 out of 2 ""time periods"" are experiencing heavy traffic . . . 
  Inputs: [2, 15, 4.9]
  Result: INCORRECT. Expected: 'Prepare Activation' instead of ''

Testing when 2 out of 4 ""time periods"" are experiencing heavy traffic . . . 
  Inputs: [4, 29.3, 15, 6.1, 12.9]
  Result: INCORRECT. Expected: 'Prepare Activation' instead of ''

Testing when 3 out of 5 ""time periods"" are experiencing heavy traffic . . . 
  Inputs: [5, 21.8, 25.9, 15, 4.0, 10.3]
  Result: INCORRECT. Expected: 'Activate New Schedule' instead of ''

Unit Test Returned: 0.0
"
257,389,a2_5_network_traffic,3,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

The 10th Communications Squadron (10 CS) recently detected a higher volume of
network traffic on the base network. The 10 CS Director of Operations asked
you are to write a program that will determine whether or not to activate an
additional Network Load Balancer (NLB) to improve the network performance
during these peak loads. Your program will ask for the number of network
traffic ""snapshots"" to analyze. It will then ask for the network load (in
Gigabits per second (Gbps), which does not have to be a whole number) for each
""snapshot"". Your program will keep track of how many ""snapshots"" are
designated as high volume network traffic, defined as loads greater than 512
Gbps. Your program will then print one of the following statements:

**# of ""snapshots"" with high network traffic volume** | **0** | **1-2** | **>
2**  
---|---|---|---  
**Output** | Ops Normal | Initialize NLB | Activate NLB  
  
**EXAMPLES:**

  | **Example 1** | **Example 2**  
---|---|---  
**INPUT** |

3

512.0

738.5

199.6

|

3

498.6

372.9

512.0  
  
**OUTPUT** | Initialize NLB | Ops Normal


","from cs110 import autograder
import random, math

def run_test(num_over, traffic):    
    inputs = [traffic]
    
    for i in range(traffic):
        if i < num_over:
            if (i + 1 == num_over):
                inputs.append(512.1)
            else:
                inputs.append(round(random.uniform(512, 1024), 1))
        else:
            inputs.append(round(random.uniform(256, 512), 1))

    # Generates Expected Answer
    if num_over == 0:
        answer = ""Ops Normal""
    elif num_over <= 2:
        answer = ""Initialize NLB""
    else:
        answer = ""Activate NLB""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_5_network_traffic.py"", inputs)
    
    print(""Testing when"", num_over, ""out of"", traffic, ""\""snaphots\"" have high volume of network traffic . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 2))):
        num_passed += 1
    
    if (run_test(2, random.randint(3, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,"
# Read the number of snapshots
n = int(input())

# Initialize a counter for high volume snapshots
high_volume_count = 0

# Iterate through the snapshots
for i in range(n):
    # Read the network load for each snapshot
    load = float(input())
    
    # Check if the load is greater than 512 Gbps
    if load > 512:
        # Increment the high volume count
        high_volume_count += 1

# Determine the appropriate output based on the high volume count
if high_volume_count == 0:
    print(""Ops Normal"")
elif high_volume_count <= 2:
    print(""Initialize NLB"")
else:
    print(""Activate NLB"")
",completed,100.0,"Testing when 0 out of 4 ""snaphots"" have high volume of network traffic . . . 
  Inputs: [4, 352.2, 487.7, 339.6, 503.3]
  Result: CORRECT!

Testing when 1 out of 2 ""snaphots"" have high volume of network traffic . . . 
  Inputs: [2, 512.1, 485.2]
  Result: CORRECT!

Testing when 2 out of 3 ""snaphots"" have high volume of network traffic . . . 
  Inputs: [3, 1004.0, 512.1, 402.5]
  Result: CORRECT!

Testing when 3 out of 3 ""snaphots"" have high volume of network traffic . . . 
  Inputs: [3, 634.5, 543.6, 512.1]
  Result: CORRECT!

Unit Test Returned: 100.0
"
258,390,a2_5_grades,3,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You are writing a program that will help your instructors analyze student
performance on an exam. Your program will ask for the number of students in
the class. It will then ask for the grade of each student (this grade does not
have to be a whole number). Your program will keep track of how many students
received less than 70 on an assignment. Your program will then print one of
the following statements.



**# of scores below 70** | **0** | **1-2** | **> 2**  
---|---|---|---  
**Output** | Excellent | Satisfactory | Unsatisfactory  
  


**EXAMPLES:**

  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**INPUT** |

4  
75.6  
80.2  
95.5  
71.0

|

3  
68.2  
72.9  
95.4

|

3  
67.0  
65.5  
68.3  
  
**OUTPUT** | Excellent | Satisfactory | Unsatisfactory  
  



","from cs110 import autograder
import random, math

def run_test(num_failures, num_papers):    
    inputs = [num_papers]
    
    for i in range(num_papers):
        if i < num_failures:
            inputs.append(round(random.uniform(0, 70), 1))
        else:
            if (i == num_failures):
                inputs.append(70)
            else:
                inputs.append(round(random.uniform(70, 100), 1))

    # Generates Expected Answer
    if num_failures == 0:
        answer = ""Excellent""
    elif num_failures >= 1 and num_failures <= 2:
        answer = ""Satisfactory""
    else:
        answer = ""Unsatisfactory""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_5_grades.py"", inputs)
    
    print(""Testing when"", num_failures, ""out of"", num_papers, ""failed . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 2))):
        num_passed += 1
    
    if (run_test(2, random.randint(3, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,"
n = int(input())
count = 0

for i in range(n):
    grade = float(input())
    if grade < 70:
        count += 1

if count == 0:
    print(""Excellent"")
elif count <= 2:
    print(""Satisfactory"")
else:
    print(""Unsatisfactory"")
",completed,100.0,"Testing when 0 out of 5 failed . . . 
  Inputs: [5, 70, 95.2, 76.8, 86.7, 77.3]
  Result: CORRECT!

Testing when 1 out of 2 failed . . . 
  Inputs: [2, 39.9, 70]
  Result: CORRECT!

Testing when 2 out of 4 failed . . . 
  Inputs: [4, 63.8, 55.6, 70, 77.1]
  Result: CORRECT!

Testing when 3 out of 4 failed . . . 
  Inputs: [4, 1.6, 49.5, 28.7, 70]
  Result: CORRECT!

Unit Test Returned: 100.0
"
259,391,a2_5_gameday,3,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

The Academy Athletic Director asked you are to write a program that will
determine whether or not a football game in progress should be delayed based
on current weather conditions. Your program will ask for the number of
lightning strikes occurred in the immediate area in the past thirty minutes.
It will then ask for the distance from Falcon Stadium to each lightning strike
(in miles, which do not have to be whole numbers). Your program will keep
track of how many lightning strikes are within 15 miles of the stadium
(inclusive). Your program will then print one of the following statements:

**# of lightning strikes in immediate area** | **0** | **1-3** | **> 3**  
---|---|---|---  
**Output** | All Clear | Weather Warning | Game Delay  
  
**EXAMPLES:**

  | **Example 1** | **Example 2**  
---|---|---  
**INPUT** |

4

15.0

13.2

6.5

9.8

|

3

17.8

15.1

19.0

  
  
**OUTPUT** | Game Delay | All Clear  
  



","from cs110 import autograder
import random, math

def run_test(num_close, num_strikes):    
    inputs = [num_strikes]
    
    for i in range(num_strikes):
        if i < num_close:
            if (i + 1 == num_close):
                inputs.append(15)
            else:
                inputs.append(round(random.uniform(0, 15), 1))
        else:
            inputs.append(round(random.uniform(15, 50), 1))

    # Generates Expected Answer
    if num_close == 0:
        answer = ""All Clear""
    elif num_close <= 2:
        answer = ""Weather Warning""
    else:
        answer = ""Game Delay""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_5_gameday.py"", inputs)
    
    print(""Testing when"", num_close, ""out of"", num_strikes, ""\""strikes\"" are are close . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(2, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 2))):
        num_passed += 1
    
    if (run_test(2, random.randint(4, 6))):
        num_passed += 1
    
    if (run_test(4, random.randint(4, 6))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,"
num_strikes = int(input())
strikes = []
for _ in range(num_strikes):
    strikes.append(float(input()))

count = 0
for strike in strikes:
    if strike <= 15.0:
        count += 1

if count == 0:
    print(""All Clear"")
elif count <= 3:
    print(""Weather Warning"")
else:
    print(""Game Delay"")
",completed,100.0,"Testing when 0 out of 3 ""strikes"" are are close . . . 
  Inputs: [3, 21.7, 46.4, 37.1]
  Result: CORRECT!

Testing when 1 out of 2 ""strikes"" are are close . . . 
  Inputs: [2, 15, 39.6]
  Result: CORRECT!

Testing when 2 out of 5 ""strikes"" are are close . . . 
  Inputs: [5, 4.1, 15, 28.6, 16.5, 22.2]
  Result: CORRECT!

Testing when 4 out of 5 ""strikes"" are are close . . . 
  Inputs: [5, 8.1, 12.2, 5.7, 15, 37.6]
  Result: CORRECT!

Unit Test Returned: 100.0
"
260,392,a2_5_combat,3,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

You are writing a program that will determine whether or not a fighter pilot
will need to make an evasive action when enemy aircraft are near. Your program
will ask for the number of enemy planes in the area. It will then ask for the
distance between the pilot and each of the enemy planes (in miles, which do
not have to be whole numbers). Your program will keep track of how many enemy
planes are within 20 miles of the pilot (inclusive). Your program will then
print one of the following statements:

**# of Enemy Planes in Area** | **0** | **1-2** | **> 2**  
---|---|---|---  
**Output** | All Clear | Warning | Evasive Action  
  


**EXAMPLES:**

  | **Example 1** | **Example 2**  
---|---|---  
**INPUT** |

3

10.5

17.2

23.7

|

3

21.4

34.0

27.9  
  
**OUTPUT** | Warning | All Clear


","from cs110 import autograder
import random, math

def run_test(num_close, num_planes):    
    inputs = [num_planes]
    
    for i in range(num_planes):
        if i < num_close:
            if (i + 1 == num_close):
                inputs.append(20)
            else:
                inputs.append(round(random.uniform(0, 20), 1))
        else:
            inputs.append(round(random.uniform(20, 50), 1))

    # Generates Expected Answer
    if num_close == 0:
        answer = ""All Clear""
    elif num_close <= 2:
        answer = ""Warning""
    else:
        answer = ""Evasive Action""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_5_combat.py"", inputs)
    
    print(""Testing when"", num_close, ""out of"", num_planes, ""are close . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 2))):
        num_passed += 1
    
    if (run_test(2, random.randint(3, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,"
def evasive_action():
    num_planes = int(input(""Enter the number of enemy planes in the area: ""))
    count = 0
    for _ in range(num_planes):
        distance = float(input(""Enter the distance between the pilot and enemy plane (in miles): ""))
        if distance <= 20:
            count += 1
    if count == 0:
        print(""All Clear"")
    elif count <= 2:
        print(""Warning"")
    else:
        print(""Evasive Action"")

evasive_action()
",completed,100.0,"Testing when 0 out of 2 are close . . . 
  Inputs: [2, 47.3, 23.4]
  Result: CORRECT!

Testing when 1 out of 1 are close . . . 
  Inputs: [1, 20]
  Result: CORRECT!

Testing when 2 out of 3 are close . . . 
  Inputs: [3, 17.5, 20, 35.9]
  Result: CORRECT!

Testing when 3 out of 3 are close . . . 
  Inputs: [3, 10.9, 14.7, 20]
  Result: CORRECT!

Unit Test Returned: 100.0
"
261,395,a2_4_pipe,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with a Python program that already contains code to get
the following two items from the user:

  * **the_string** :  A pipe-separated string.  
Example: johnson81|4081|30no86|cj4081|Craig|Johnson|Depot|London

  * **column_to_print** :  A number indicating which item from the input string to print  
NOTE:  0 indicates the first item in the string, 1 indicates the second, etc.

Add code to this program that:

  1. Splits the the_string into separate items.
  2. Prints the number of items that result from splitting the_string (not the number of characters in the string).
  3. Prints the item indicated by the column_to_print value.

**EXAMPLE:**

If the user types:

    
    
    johnson81|4081|30no86|cj4081|Craig|Johnson|Depot|London  
    2

Your program should output:

    
    
    8  
    30no86



**HINT: A pipe is this: '|'. On most keyboards it is located on the same key
as the backslash ('\').** **If you cannot find it, ask an instructor for
help.**


","from cs110 import autograder
import random

variant = ""pipe""
verbose = False

variants = {
            ""validate"": {""delimiter"": '.'}, 
            ""comma""   : {""delimiter"": ','},
            ""pipe""    : {""delimiter"": '|'}, #
            ""amp""     : {""delimiter"": '&'}, #
            ""caret""   : {""delimiter"": '^'}, #
            ""dollar""  : {""delimiter"": '$'}, #
            ""hash""    : {""delimiter"": '#'}, #
            ""ques""    : {""delimiter"": '?'}, #
            ""semic""   : {""delimiter"": ';'}, #
            ""slash""   : {""delimiter"": '/'}, #
            ""star""    : {""delimiter"": '*'}, #
            ""colon""   : {""delimiter"": ':'}, #
            ""hyphen""  : {""delimiter"": '-'}, #
            ""score""   : {""delimiter"": '_'}, #
           }

delimiter_proper = variants[variant][""delimiter""]

def generate_test_string(delimiter):
    
    random_lists = [
                    [""booker12"",""9012"",""12se74"",""rb9012"",""Rachel"",""Booker"",""Sales"",""Coventry""],
                    [""grey07"",""2070"",""04ap67"",""lg2070"",""Laura"",""Grey"",""Depot"",""London""],
                    [""johnson81"",""4081"",""30no86"",""cj4081"",""Craig"",""Johnson"",""Shipping"",""Westminster""],
                    [""jenkins46"",""9346"",""14ju73"",""mj9346"",""Mary"",""Jenkins"",""Engineering"",""Liverpool""],
                    [""smith79"",""5079"",""09ja61"",""js5079"",""Jamie"",""Smith"",""Testing"",""Manchester""]
                   ]
    
    random_list = random_lists[random.randrange(len(random_lists))]
    random_column = random.randrange(len(random_list))
    test_string = """"
    for field in random_list:
        if test_string != """":
            test_string += delimiter
        test_string += field
    return test_string, random_column

def solution(delimiter, string, column_num):
    
    #print(""SOLUTION:"", string, delimiter, column_num, sep=""\n"")
    columns = string.split(delimiter)
    output = str(len(columns)) + '\n'
    output += columns[column_num] + '\n'
        
    return output

def print_test_results(test_score, actual_output, expected_output):

    if verbose:
        
        if test_score == 100:
            print(""CORRECT: %.1f%%"" % (test_score))
        else:
            print(""INCORRECT: %.1f%%"" % (test_score))
            print(""Expected:"")
            print(expected_output)

    else:

        if test_score == 100:
            print(""CORRECT"")
        else:
            print(""INCORRECT"")
            print(""Expected:"")
            print(expected_output)

def run1test(delimiter):

    # Rubric
    # 1 Runs without errors
    # 1 Prints out the correct item count (regardless of order)
    # 1 Prints out the correct item value (regardless of order)
    # 1 Prints out the items in the correct order (0.5 for each)

    test_score = 0
    test_max = 4
    
    test_string, random_column = generate_test_string(delimiter)
    output, error = autograder.run_script(""a2_4_%s.py"" % (variant), [ test_string, random_column ])
    expected_output = solution(delimiter, test_string, random_column)

    if error == """":
        test_score += 1
    
    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]
    
    expected_lines = expected_output.strip().split('\n')
    expected_count = expected_lines[0]
    expected_item = expected_lines[1]

    if returned_count in expected_lines:
        test_score += 1
    if returned_count == expected_count:
        test_score += 0.5
    
    if returned_item in expected_lines:
        test_score += 1
    if returned_item == expected_item:
        test_score += 0.5

    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)
    
    return test_score

def initial_test():
    global delimiter_used
    
    test_max = 12

    test_score = 1 # For testing against the server

    sensor_string = ""sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end""
    delimiter_column = 1

    detection_failed = False
    output, error   = autograder.run_script(""a2_4_%s.py"" % (variant), [ sensor_string, delimiter_column ])
    
    if error == """":
        test_score += 1
        if verbose: print(""+1 Running without error."")
    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)

    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]

    expected_lines = expected_output.strip().split('\n')
    #expected_count = expected_lines[0]
    #expected_item = expected_lines[1]

    if len(returned_lines) >= 1 and returned_lines[0] != '':
        test_score += 1
        if verbose: print(""+1 At least one line of output."")
    if len(returned_lines) == 2:
        test_score += 1
        if verbose: print(""+1 Exactly two lines of output."")
        
    if returned_count in expected_lines:
        test_score += 1
        if verbose: print(""+1 Count contained in output somewhere."")
    if returned_item in expected_lines:
        test_score += 1
        if verbose: print(""+1 Requested item contained in output somewhere."")

    detection_failed = len(returned_lines) < 2
    
    if verbose:
        print(""Delimiter Detection:"")
        if detection_failed:
            print(""Failed:"", returned_lines)
        else:
            print(""Detected delimiter: "", returned_lines[1])
            print(""Sensor fields: "", returned_lines[0])
    
    if variant in returned_lines:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is correct."")

    delimiter_used = None
    if (not detection_failed) and (returned_lines[1] in variants):
        delimiter_used = variants[returned_lines[1]][""delimiter""]

    if delimiter_used == delimiter_proper:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is proper."")

    if delimiter_used == None:
        delimiter_used = delimiter_proper
        
    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)

    return test_score
    
def test_passed():

    test_weights = [20, 12,4,4]
    test_total = sum(test_weights) - test_weights[0]
    if test_total != test_weights[0]:
        print(""Individual tests do not add to total value.\n"")
        
    score = 0
    test_num = 0
    #------------------------------------------------
    # Test #1: Sense delimiter used
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(test_weights[test_num]/test_total)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = initial_test()
    
    score += (test_score/100) * test_weight
    
    #------------------------------------------------
    # Test #2: Using detected delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    
    test_score = run1test(delimiter_used)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # Test #3: Use correct delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = run1test(delimiter_proper)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # End of Test
    #------------------------------------------------
    
    print(""\nOVERALL SCORE:"")
    return round(score,1)

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':   
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,"
the_string = input()
column_to_print = int(input())

items = the_string.split('|')
print(len(items))
print(items[column_to_print])
",completed,100.0,"
TEST #1 (weight: 60.0%)
CORRECT

TEST #2 (weight: 20.0%)
CORRECT

TEST #3 (weight: 20.0%)
CORRECT

OVERALL SCORE:
Unit Test Returned: 100.0
"
262,396,a2_4_hyphen,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with a Python program that already contains code to get
the following two items from the user:

  * **the_string** :  A hyphen-separated string.  
Example: johnson81-4081-30no86-cj4081-Craig-Johnson-Depot-London

  * **column_to_print** :  A number indicating which item from the string to print.  
NOTE:  0 indicates the first item in the string, 1 indicates the second, etc.

Add code to this program that:

  1. Splits the_string into separate items.
  2. Prints the number of items that result from splitting the_string (not the number of characters in the string).
  3. Prints the item indicated by the column_to_print value.

**EXAMPLE:**

If the user types:

    
    
    johnson81-4081-30no86-cj4081-Craig-Johnson-Depot-London  
    2

Your program should output:

    
    
    8  
    30no86

**HINT: A hyphen (dash) is this: '-'. On most keyboards it is located to the
right of the '0' key.** **If you cannot find it, ask an instructor for help.**


","from cs110 import autograder
import random

variant = ""hyphen""
verbose = False

variants = {
            ""validate"": {""delimiter"": '.'}, 
            ""comma""   : {""delimiter"": ','},
            ""pipe""    : {""delimiter"": '|'}, #
            ""amp""     : {""delimiter"": '&'}, #
            ""caret""   : {""delimiter"": '^'}, #
            ""dollar""  : {""delimiter"": '$'}, #
            ""hash""    : {""delimiter"": '#'}, #
            ""ques""    : {""delimiter"": '?'}, #
            ""semic""   : {""delimiter"": ';'}, #
            ""slash""   : {""delimiter"": '/'}, #
            ""star""    : {""delimiter"": '*'}, #
            ""colon""   : {""delimiter"": ':'}, #
            ""hyphen""  : {""delimiter"": '-'}, #
            ""score""   : {""delimiter"": '_'}, #
           }

delimiter_proper = variants[variant][""delimiter""]

def generate_test_string(delimiter):
    
    random_lists = [
                    [""booker12"",""9012"",""12se74"",""rb9012"",""Rachel"",""Booker"",""Sales"",""Coventry""],
                    [""grey07"",""2070"",""04ap67"",""lg2070"",""Laura"",""Grey"",""Depot"",""London""],
                    [""johnson81"",""4081"",""30no86"",""cj4081"",""Craig"",""Johnson"",""Shipping"",""Westminster""],
                    [""jenkins46"",""9346"",""14ju73"",""mj9346"",""Mary"",""Jenkins"",""Engineering"",""Liverpool""],
                    [""smith79"",""5079"",""09ja61"",""js5079"",""Jamie"",""Smith"",""Testing"",""Manchester""]
                   ]
    
    random_list = random_lists[random.randrange(len(random_lists))]
    random_column = random.randrange(len(random_list))
    test_string = """"
    for field in random_list:
        if test_string != """":
            test_string += delimiter
        test_string += field
    return test_string, random_column

def solution(delimiter, string, column_num):
    
    #print(""SOLUTION:"", string, delimiter, column_num, sep=""\n"")
    columns = string.split(delimiter)
    output = str(len(columns)) + '\n'
    output += columns[column_num] + '\n'
        
    return output

def print_test_results(test_score, actual_output, expected_output):

    if verbose:
        
        if test_score == 100:
            print(""CORRECT: %.1f%%"" % (test_score))
        else:
            print(""INCORRECT: %.1f%%"" % (test_score))
            print(""Expected:"")
            print(expected_output)

    else:

        if test_score == 100:
            print(""CORRECT"")
        else:
            print(""INCORRECT"")
            print(""Expected:"")
            print(expected_output)

def run1test(delimiter):

    # Rubric
    # 1 Runs without errors
    # 1 Prints out the correct item count (regardless of order)
    # 1 Prints out the correct item value (regardless of order)
    # 1 Prints out the items in the correct order (0.5 for each)

    test_score = 0
    test_max = 4
    
    test_string, random_column = generate_test_string(delimiter)
    output, error = autograder.run_script(""a2_4_%s.py"" % (variant), [ test_string, random_column ])
    expected_output = solution(delimiter, test_string, random_column)

    if error == """":
        test_score += 1
    
    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]
    
    expected_lines = expected_output.strip().split('\n')
    expected_count = expected_lines[0]
    expected_item = expected_lines[1]

    if returned_count in expected_lines:
        test_score += 1
    if returned_count == expected_count:
        test_score += 0.5
    
    if returned_item in expected_lines:
        test_score += 1
    if returned_item == expected_item:
        test_score += 0.5

    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)
    
    return test_score

def initial_test():
    global delimiter_used
    
    test_max = 12

    test_score = 1 # For testing against the server

    sensor_string = ""sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end""
    delimiter_column = 1

    detection_failed = False
    output, error   = autograder.run_script(""a2_4_%s.py"" % (variant), [ sensor_string, delimiter_column ])
    
    if error == """":
        test_score += 1
        if verbose: print(""+1 Running without error."")
    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)

    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]

    expected_lines = expected_output.strip().split('\n')
    #expected_count = expected_lines[0]
    #expected_item = expected_lines[1]

    if len(returned_lines) >= 1 and returned_lines[0] != '':
        test_score += 1
        if verbose: print(""+1 At least one line of output."")
    if len(returned_lines) == 2:
        test_score += 1
        if verbose: print(""+1 Exactly two lines of output."")
        
    if returned_count in expected_lines:
        test_score += 1
        if verbose: print(""+1 Count contained in output somewhere."")
    if returned_item in expected_lines:
        test_score += 1
        if verbose: print(""+1 Requested item contained in output somewhere."")

    detection_failed = len(returned_lines) < 2
    
    if verbose:
        print(""Delimiter Detection:"")
        if detection_failed:
            print(""Failed:"", returned_lines)
        else:
            print(""Detected delimiter: "", returned_lines[1])
            print(""Sensor fields: "", returned_lines[0])
    
    if variant in returned_lines:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is correct."")

    delimiter_used = None
    if (not detection_failed) and (returned_lines[1] in variants):
        delimiter_used = variants[returned_lines[1]][""delimiter""]

    if delimiter_used == delimiter_proper:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is proper."")

    if delimiter_used == None:
        delimiter_used = delimiter_proper
        
    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)

    return test_score
    
def test_passed():

    test_weights = [20, 12,4,4]
    test_total = sum(test_weights) - test_weights[0]
    if test_total != test_weights[0]:
        print(""Individual tests do not add to total value.\n"")
        
    score = 0
    test_num = 0
    #------------------------------------------------
    # Test #1: Sense delimiter used
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(test_weights[test_num]/test_total)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = initial_test()
    
    score += (test_score/100) * test_weight
    
    #------------------------------------------------
    # Test #2: Using detected delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    
    test_score = run1test(delimiter_used)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # Test #3: Use correct delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = run1test(delimiter_proper)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # End of Test
    #------------------------------------------------
    
    print(""\nOVERALL SCORE:"")
    return round(score,1)

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':   
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,,completed,20.0,"
TEST #1 (weight: 60.0%)
INCORRECT
Expected:
3
hyphen


TEST #2 (weight: 20.0%)
INCORRECT
Expected:
8
Mary


TEST #3 (weight: 20.0%)
INCORRECT
Expected:
8
Testing


OVERALL SCORE:
Unit Test Returned: 20.0
"
263,397,a2_4_hash,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with a Python program that already contains code to get
the following two items from the user:

  * **the_string** :  A hashtag-separated string.  
Example: johnson81#4081#30no86#cj4081#Craig#Johnson#Depot#London

  * **column_to_print** :  A number indicating which item from the string to print.  
NOTE:  0 indicates the first item in the string, 1 indicates the second, etc.

Add code to this program that:

  1. Splits the_string into separate items.
  2. Prints the number of items that result from splitting the_string (not the number of characters in the string).
  3. Prints the item indicated by the column_to_print value.

**EXAMPLE:**

If the user types:

    
    
    johnson81#4081#30no86#cj4081#Craig#Johnson#Depot#London  
    2

Your program should output:

    
    
    8  
    30no86

**HINT: A hashtag (pound sign) looks like this: '#'. On most keyboards it is
on the same key as the '3'. If you cannot find it, ask an instructor for
help.** ****


","from cs110 import autograder
import random

variant = ""hash""
verbose = False

variants = {
            ""validate"": {""delimiter"": '.'}, 
            ""comma""   : {""delimiter"": ','},
            ""pipe""    : {""delimiter"": '|'}, #
            ""amp""     : {""delimiter"": '&'}, #
            ""caret""   : {""delimiter"": '^'}, #
            ""dollar""  : {""delimiter"": '$'}, #
            ""hash""    : {""delimiter"": '#'}, #
            ""ques""    : {""delimiter"": '?'}, #
            ""semic""   : {""delimiter"": ';'}, #
            ""slash""   : {""delimiter"": '/'}, #
            ""star""    : {""delimiter"": '*'}, #
            ""colon""   : {""delimiter"": ':'}, #
            ""hyphen""  : {""delimiter"": '-'}, #
            ""score""   : {""delimiter"": '_'}, #
           }

delimiter_proper = variants[variant][""delimiter""]

def generate_test_string(delimiter):
    
    random_lists = [
                    [""booker12"",""9012"",""12se74"",""rb9012"",""Rachel"",""Booker"",""Sales"",""Coventry""],
                    [""grey07"",""2070"",""04ap67"",""lg2070"",""Laura"",""Grey"",""Depot"",""London""],
                    [""johnson81"",""4081"",""30no86"",""cj4081"",""Craig"",""Johnson"",""Shipping"",""Westminster""],
                    [""jenkins46"",""9346"",""14ju73"",""mj9346"",""Mary"",""Jenkins"",""Engineering"",""Liverpool""],
                    [""smith79"",""5079"",""09ja61"",""js5079"",""Jamie"",""Smith"",""Testing"",""Manchester""]
                   ]
    
    random_list = random_lists[random.randrange(len(random_lists))]
    random_column = random.randrange(len(random_list))
    test_string = """"
    for field in random_list:
        if test_string != """":
            test_string += delimiter
        test_string += field
    return test_string, random_column

def solution(delimiter, string, column_num):
    
    #print(""SOLUTION:"", string, delimiter, column_num, sep=""\n"")
    columns = string.split(delimiter)
    output = str(len(columns)) + '\n'
    output += columns[column_num] + '\n'
        
    return output

def print_test_results(test_score, actual_output, expected_output):

    if verbose:
        
        if test_score == 100:
            print(""CORRECT: %.1f%%"" % (test_score))
        else:
            print(""INCORRECT: %.1f%%"" % (test_score))
            print(""Expected:"")
            print(expected_output)

    else:

        if test_score == 100:
            print(""CORRECT"")
        else:
            print(""INCORRECT"")
            print(""Expected:"")
            print(expected_output)

def run1test(delimiter):

    # Rubric
    # 1 Runs without errors
    # 1 Prints out the correct item count (regardless of order)
    # 1 Prints out the correct item value (regardless of order)
    # 1 Prints out the items in the correct order (0.5 for each)

    test_score = 0
    test_max = 4
    
    test_string, random_column = generate_test_string(delimiter)
    output, error = autograder.run_script(""a2_4_%s.py"" % (variant), [ test_string, random_column ])
    expected_output = solution(delimiter, test_string, random_column)

    if error == """":
        test_score += 1
    
    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]
    
    expected_lines = expected_output.strip().split('\n')
    expected_count = expected_lines[0]
    expected_item = expected_lines[1]

    if returned_count in expected_lines:
        test_score += 1
    if returned_count == expected_count:
        test_score += 0.5
    
    if returned_item in expected_lines:
        test_score += 1
    if returned_item == expected_item:
        test_score += 0.5

    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)
    
    return test_score

def initial_test():
    global delimiter_used
    
    test_max = 12

    test_score = 1 # For testing against the server

    sensor_string = ""sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end""
    delimiter_column = 1

    detection_failed = False
    output, error   = autograder.run_script(""a2_4_%s.py"" % (variant), [ sensor_string, delimiter_column ])
    
    if error == """":
        test_score += 1
        if verbose: print(""+1 Running without error."")
    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)

    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]

    expected_lines = expected_output.strip().split('\n')
    #expected_count = expected_lines[0]
    #expected_item = expected_lines[1]

    if len(returned_lines) >= 1 and returned_lines[0] != '':
        test_score += 1
        if verbose: print(""+1 At least one line of output."")
    if len(returned_lines) == 2:
        test_score += 1
        if verbose: print(""+1 Exactly two lines of output."")
        
    if returned_count in expected_lines:
        test_score += 1
        if verbose: print(""+1 Count contained in output somewhere."")
    if returned_item in expected_lines:
        test_score += 1
        if verbose: print(""+1 Requested item contained in output somewhere."")

    detection_failed = len(returned_lines) < 2
    
    if verbose:
        print(""Delimiter Detection:"")
        if detection_failed:
            print(""Failed:"", returned_lines)
        else:
            print(""Detected delimiter: "", returned_lines[1])
            print(""Sensor fields: "", returned_lines[0])
    
    if variant in returned_lines:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is correct."")

    delimiter_used = None
    if (not detection_failed) and (returned_lines[1] in variants):
        delimiter_used = variants[returned_lines[1]][""delimiter""]

    if delimiter_used == delimiter_proper:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is proper."")

    if delimiter_used == None:
        delimiter_used = delimiter_proper
        
    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)

    return test_score
    
def test_passed():

    test_weights = [20, 12,4,4]
    test_total = sum(test_weights) - test_weights[0]
    if test_total != test_weights[0]:
        print(""Individual tests do not add to total value.\n"")
        
    score = 0
    test_num = 0
    #------------------------------------------------
    # Test #1: Sense delimiter used
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(test_weights[test_num]/test_total)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = initial_test()
    
    score += (test_score/100) * test_weight
    
    #------------------------------------------------
    # Test #2: Using detected delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    
    test_score = run1test(delimiter_used)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # Test #3: Use correct delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = run1test(delimiter_proper)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # End of Test
    #------------------------------------------------
    
    print(""\nOVERALL SCORE:"")
    return round(score,1)

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':   
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,,"
the_string = input(""Enter a hashtag-separated string: "")
column_to_print = int(input(""Enter the column number to print: ""))

# 1. Split the_string into separate items
items = the_string.split(""#"")

# 2. Print the number of items that result from splitting the_string
print(len(items))

# 3. Print the item indicated by the column_to_print value
print(items[column_to_print])
",completed,100.0,"
TEST #1 (weight: 60.0%)
CORRECT

TEST #2 (weight: 20.0%)
CORRECT

TEST #3 (weight: 20.0%)
CORRECT

OVERALL SCORE:
Unit Test Returned: 100.0
"
264,400,a2_3_thirteen,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with program that gets a number from the user and
stores it in a variable called  **starting_number**.  

Write a program that prints all of the numbers between  **starting_number**
and **0** (including **0** ), counting down by **13** each time.



For example, if the user types **45** , your program should print:

    
    
    45  
    32  
    19  
    6

Similarly, if the user types **39** , your program should print:

    
    
    39  
    26  
    13  
    0

You may assume that the user will only enter positive numbers.

**HINT:**

  * This problem can be solved using either a  **for**  or  **while**  loop.


","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 13
    return result


def test_passed():    
    score = 0
    random_number = 78 + 13 * random.randint(1, 15)
    
    output, error = autograder.run_script(""a2_3_thirteen.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    #Exactly correct
    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    #Mostly correct but added an extra value or included one less value: -2 points
    elif output.strip().split('\n') == expected_lines[:-1] or \
         output.strip().split('\n')[:-1] == expected_lines:
        print(""INCORRECT.  Expected:\n""+expected_string)
        score+=86.67
    else:
        print(""INCORRECT.  Expected:\n""+expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"INCORRECT.  Expected:
143
130
117
104
91
78
65
52
39
26
13
0

Unit Test Returned: 0
"
265,402,a2_3_nineteen,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with program that gets a number from the user and
stores it in a variable called  **starting_number**.  

Write a program that prints all of the numbers between  **starting_number**
and **0** (including **0** ), counting down by **19** each time.



For example, if the user types **45** , your program should print:

    
    
    45  
    26  
    7

Similarly, if the user types **57** , your program should print:

    
    
    57  
    38  
    19  
    0

You may assume that the user will only enter positive numbers.

**HINT:**

  * This problem can be solved using either a  **for**  or  **while**  loop.


","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 19
    return result


def test_passed():    
    score = 0
    random_number = 114 + 19 * random.randint(1, 20)
    
    output, error = autograder.run_script(""a2_3_nineteen.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    #Exactly correct
    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    #Mostly correct but added an extra value or included one less value: -2 points
    elif output.strip().split('\n') == expected_lines[:-1] or \
         output.strip().split('\n')[:-1] == expected_lines:
        print(""INCORRECT.  Expected:\n""+expected_string)
        score+=86.67
    else:
        print(""INCORRECT.  Expected:\n""+expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"INCORRECT.  Expected:
304
285
266
247
228
209
190
171
152
133
114
95
76
57
38
19
0

Unit Test Returned: 0
"
266,403,a2_3_nine,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

You have been provided with program that gets a number from the user and
stores it in a variable called  **starting_number**.  

Write a program that prints all of the numbers between  **starting_number**
and  **0** (including **0** ), counting down by **9**  each time.



For example, if the user types ** 45**, your program should print:

    
    
    45  
    36  
    27  
    18  
    9  
    0

Similarly, if the user types **50** , your program should print:

    
    
    50  
    41  
    32  
    23  
    14  
    5

You may assume that the user will only enter positive numbers.

**HINT:**

  * This problem can be solved using either a  **for** or  **while** loop.


","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 9
    return result


def test_passed():    
    score = 0
    random_number = 81 + 9 * random.randint(1, 30)
    
    output, error = autograder.run_script(""a2_3_nine.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    #Exactly correct
    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    #Mostly correct but added an extra value or included one less value: -2 points
    elif output.strip().split('\n') == expected_lines[:-1] or \
         output.strip().split('\n')[:-1] == expected_lines:
        print(""INCORRECT.  Expected:\n""+expected_string)
        score+=86.67
    else:
        print(""INCORRECT.  Expected:\n""+expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
starting_number = int(input(""Enter a number: ""))

for num in range(starting_number, -1, -9):
    print(num)
",completed,100.0,"CORRECT
Unit Test Returned: 100
"
267,404,a2_3_eighteen,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with program that gets a number from the user and
stores it in a variable called  **starting_number**.  

Write a program that prints all of the numbers between  **starting_number**
and  **0**  (including **0** ), counting down by **18** each time.



For example, if the user types  **108** , your program should print:

    
    
    108  
    90  
    72  
    54  
    36  
    18  
    0

Similarly, if the user types **92** , your program should print:

    
    
    92  
    74  
    56  
    38  
    20  
    2

You may assume that the user will only enter positive numbers.

**HINT:**

  * This problem can be solved using either a  **for**  or  **while**  loop.


","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 18
    return result


def test_passed():    
    score = 0
    random_number = 108 + 18 * random.randint(1, 15)
    
    output, error = autograder.run_script(""a2_3_eighteen.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    #Exactly correct
    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    #Mostly correct but added an extra value or included one less value: -2 points
    elif output.strip().split('\n') == expected_lines[:-1] or \
         output.strip().split('\n')[:-1] == expected_lines:
        print(""INCORRECT.  Expected:\n""+expected_string)
        score+=86.67
    else:
        print(""INCORRECT.  Expected:\n""+expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"INCORRECT.  Expected:
180
162
144
126
108
90
72
54
36
18
0

Unit Test Returned: 0
"
268,408,a2_2_orbit,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

The oribt period of a planet can be calculated using the following formula:



`Period = (D * 3.14)/ V`





In this formula:

  * **D**  is the diameter of the orbit path (a floating point number)
  * **V**  is the velocity of the planet (a floating point number)



Write a function called  **orbit_period**  that takes **D**  and **V**  as
parameters (in that order), and  **returns**  the orbit period.  



**NOTES:**

  * You do NOT need to call this function.  Simply define it.




","from cs110 import autograder
import a2_2_orbit

def solution(D, V):
    return (D*3.14)/V


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'orbit_period' in dir(a2_2_orbit):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'orbit_period' in dir(a2_2_orbit) and a2_2_orbit.orbit_period(15, 0.22) == solution(15, 0.22):
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
def orbit_period(D, V):
    period = (D * 3.14) / V
    return period
",completed,100.0,"Feedback:
Function Defined
Function Returns Correct Value
Unit Test Returned: 100
"
269,411,a2_1_right_triangle,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with a function called calculate_hypotenuse, which
takes two parameters:

  * **side_1**
  * **side_2**

Call this function and pass it  **15**  for  **side_1** , and  **6.786**  for
**side_2**.  Store the result in a variable called  **result**.  Do not print.
Simply call the function, and store the returned value in the variable
**result**.


","from cs110 import autograder
from a2_1_right_triangle import *  

def calculate_hypotenuse(side_1, side_2):
    return (side_1**2+side_2**2)**.5


def test_passed():
    solution = calculate_hypotenuse(15, 6.786)
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    test_case_result = test_passed()
    print(""Unit Test Returned:"", test_case_result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def calculate_hypotenuse(side_1, side_2):
    return (side_1**2 + side_2**2)**0.5

result = calculate_hypotenuse(15, 6.786)
",completed,100.0,"Feedback:
PASSED
Unit Test Returned: 100
"
270,415,a1_6_pilot_quals,3,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

C-130 Pilot qualifications usually depend on a pilot's flight experience in
terms of flight hours.

**C-130 Pilot Qualification** | **Flight Hours**  
---|---  
Upgrade Pilot | 600  
Aircraft Commander | 800  
Formation Lead | 1000  
Instructor Pilot | 1250  
Evaluator Pilot | 1500  
  
  
Write a Python program that asks the user to enter the number of flight hours
they currently have (does not need to be a whole number). Then, referencing
the table above, print out all qualifications they should have achieved in the
aircraft (one per line). If the their experience in the C-130 is more than 600
flight hours, output ""Co-Pilot"".



**EXAMPLES:**

  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input** | 1996 | 1156.7 | 535.4  
**Output** |

Upgrade Pilot  
Aircraft Commander  
Formation Lead  
Instructor Pilot  
Evaluator Pilot

|

Upgrade Pilot  
Aircraft Commander  
Formation Lead

| Co-Pilot  
  
NOTE: The qualifications can be listed in any order, so long as only the ones
in range are printed.


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(hours):
    result = """"

    if hours < 600:
        result += ""Co-Pilot\n""

    if hours >= 600:
        result += ""Upgrade Pilot\n""

    if hours >= 800:
        result += ""Aircraft Commander\n""
        
    if hours >= 1000:
        result += ""Formation Lead\n""

    if hours >=1250:
        result += ""Instructor Pilot\n""

    if hours >= 1500:
        result += ""Evaluator Pilot\n""

    
    return result.strip().split('\n')


def run_test(hours):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", hours, ""hours"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_6_pilot_quals.py"", [hours], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(hours)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 600), 1))
    run_test(600)
    run_test(round(random.uniform(600, 799), 1))
    run_test(800)
    run_test(round(random.uniform(800, 999), 1))
    run_test(1000)
    run_test(round(random.uniform(1000, 1249), 1))
    run_test(1250)
    run_test(round(random.uniform(1250, 1499), 1))
    run_test(1500)
    run_test(2750)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"------------------------------
Test 1 - 527.3 hours
------------------------------
Expecting Co-Pilot  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 2 - 600 hours
------------------------------
Expecting Upgrade Pilot  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 3 - 602.1 hours
------------------------------
Expecting Upgrade Pilot  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 4 - 800 hours
------------------------------
Expecting Upgrade Pilot  . . . MISSING!
Expecting Aircraft Commander  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 5 - 838.1 hours
------------------------------
Expecting Upgrade Pilot  . . . MISSING!
Expecting Aircraft Commander  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 6 - 1000 hours
------------------------------
Expecting Upgrade Pilot  . . . MISSING!
Expecting Aircraft Commander  . . . MISSING!
Expecting Formation Lead  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 7 - 1129.3 hours
------------------------------
Expecting Upgrade Pilot  . . . MISSING!
Expecting Aircraft Commander  . . . MISSING!
Expecting Formation Lead  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 8 - 1250 hours
------------------------------
Expecting Upgrade Pilot  . . . MISSING!
Expecting Aircraft Commander  . . . MISSING!
Expecting Formation Lead  . . . MISSING!
Expecting Instructor Pilot  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 9 - 1273.7 hours
------------------------------
Expecting Upgrade Pilot  . . . MISSING!
Expecting Aircraft Commander  . . . MISSING!
Expecting Formation Lead  . . . MISSING!
Expecting Instructor Pilot  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 10 - 1500 hours
------------------------------
Expecting Upgrade Pilot  . . . MISSING!
Expecting Aircraft Commander  . . . MISSING!
Expecting Formation Lead  . . . MISSING!
Expecting Instructor Pilot  . . . MISSING!
Expecting Evaluator Pilot  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 11 - 2750 hours
------------------------------
Expecting Upgrade Pilot  . . . MISSING!
Expecting Aircraft Commander  . . . MISSING!
Expecting Formation Lead  . . . MISSING!
Expecting Instructor Pilot  . . . MISSING!
Expecting Evaluator Pilot  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

Unit Test Returned: 0.0
"
271,416,a1_6_payload,3,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:**

The USAF is known for its massive cargo transport capabilities. Below are the
names of 5 aircraft, as well as their maximum payload capacity



**Cargo Aircraft**

|

**Maximum Load (inclusive, in Lbs. )**  
  
---|---  
  
C-5 Galaxy

|

285000  
  
C-17 Globemaster

|

170900  
  
KC-10 Extender

|

169000  
  
C-130 Hercules

|

42000  
  
V-22 Osprey

|

6000  
  
  
Write a Python program that asks the user to enter the payload weight (in
Lbs.) that needs to be moved. Then, referencing the table, print out all of
the Aircraft that could potentially carry that payload (one per line). If no
aircraft can carry the payload, output ""Too Heavy for Airlift"".



**EXAMPLES:**

  |

**Example 1**

|

**Example 2**

|

**Example 3**  
  
---|---|---|---  
  
**Input**

|

150000

|

250000

|

300000  
  
**Output**

|

C-5 Galaxy

C-17 Globemaster

KC-10 Extender

|

C-5 Galaxy

|

Too Heavy for Airlift  
  
NOTE: The aircraft can be listed in any order, so long as only the ones
capable of the lift are printed.


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(payload_weight):
    result = """"
    
    if payload_weight <= 6000:
        result += ""V-22 Osprey\n""

    if payload_weight <= 42000:
        result += ""C-130 Hercules\n""
        
    if payload_weight <= 169000:
        result += ""KC-10 Extender\n""

    if payload_weight <= 170900:
        result += ""C-17 Globemaster\n""

    if payload_weight <= 285000:
        result += ""C-5 Galaxy\n""

    if payload_weight > 285000:
        result += ""Too Heavy for Airlift\n""
    
    return result.strip().split('\n')


def run_test(payload_weight):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", payload_weight, ""lbs"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_6_payload.py"", [payload_weight], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(payload_weight)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 5999), 1))
    run_test(6000)
    run_test(round(random.uniform(6001, 41999), 1))
    run_test(42000)
    run_test(round(random.uniform(42001, 168999), 1))
    run_test(169000)
    run_test(round(random.uniform(169001, 170899), 1))
    run_test(170900)
    run_test(round(random.uniform(170901, 284999), 1))
    run_test(285000)
    run_test(300000)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
# Get the payload weight from the user
payload = int(input(""Enter the payload weight (in Lbs.): ""))

# Create a dictionary to store the aircraft and their maximum load
aircraft = {
    ""C-5 Galaxy"": 285000,
    ""C-17 Globemaster"": 170900,
    ""KC-10 Extender"": 169000,
    ""C-130 Hercules"": 42000,
    ""V-22 Osprey"": 6000
}

# Check if any aircraft can carry the payload
can_carry = False
for aircraft_name, max_load in aircraft.items():
    if payload <= max_load:
        print(aircraft_name)
        can_carry = True

# If no aircraft can carry the payload, output ""Too Heavy for Airlift""
if not can_carry:
    print(""Too Heavy for Airlift"")
",completed,100.0,"------------------------------
Test 1 - 2251.7 lbs
------------------------------
Expecting V-22 Osprey  . . . FOUND!
Expecting C-130 Hercules  . . . FOUND!
Expecting KC-10 Extender  . . . FOUND!
Expecting C-17 Globemaster  . . . FOUND!
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 2 - 6000 lbs
------------------------------
Expecting V-22 Osprey  . . . FOUND!
Expecting C-130 Hercules  . . . FOUND!
Expecting KC-10 Extender  . . . FOUND!
Expecting C-17 Globemaster  . . . FOUND!
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 3 - 29275.2 lbs
------------------------------
Expecting C-130 Hercules  . . . FOUND!
Expecting KC-10 Extender  . . . FOUND!
Expecting C-17 Globemaster  . . . FOUND!
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 4 - 42000 lbs
------------------------------
Expecting C-130 Hercules  . . . FOUND!
Expecting KC-10 Extender  . . . FOUND!
Expecting C-17 Globemaster  . . . FOUND!
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 5 - 114400.1 lbs
------------------------------
Expecting KC-10 Extender  . . . FOUND!
Expecting C-17 Globemaster  . . . FOUND!
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 6 - 169000 lbs
------------------------------
Expecting KC-10 Extender  . . . FOUND!
Expecting C-17 Globemaster  . . . FOUND!
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 7 - 169905.9 lbs
------------------------------
Expecting C-17 Globemaster  . . . FOUND!
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 8 - 170900 lbs
------------------------------
Expecting C-17 Globemaster  . . . FOUND!
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 9 - 181702.8 lbs
------------------------------
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 10 - 285000 lbs
------------------------------
Expecting C-5 Galaxy  . . . FOUND!
SUCCESS!

------------------------------
Test 11 - 300000 lbs
------------------------------
Expecting Too Heavy for Airlift  . . . FOUND!
SUCCESS!

Unit Test Returned: 100.0
"
272,417,a1_6_missilethreat,3,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

According to intelligence reports, the North Korean military uses at least 5
different classes of Ballistic Missiles. The names of these missiles, as well
as their maximum theoretical range, are provided below:

**Missile Class** | **Maximum Range (inclusive, in Kilometers)**  
---|---  
Hwasong-6 | 500  
KN-11 | 1200  
Musudan BM-25 | 4000  
Hwasong-14 | 8000  
Taepodong-2 | 12000  
  
  
Write a Python program that asks the user to enter the distance to a potential
target (in Kilometers). Then, referencing the table, print out all of the
Missile Classes that could potentially reach the target (one per line). If no
missiles are in range, output ""Not in range"".



**EXAMPLES:**

  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input** | 1800 | 8000 | 18000  
**Output** | Musudan BM-25  
Hwason-14  
Taepodong-2 |

Hwasong-14  
Taepodong-2

| Not in range  
  
NOTE: The missiles can be listed in any order, so long as only the ones in
range are printed.


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(target_range):
    result = """"
    
    if target_range <= 500:
        result += ""Hwasong-6\n""

    if target_range <= 1200:
        result += ""KN-11\n""
        
    if target_range <= 4000:
        result += ""Musudan BM-25\n""

    if target_range <= 8000:
        result += ""Hwasong-14\n""

    if target_range <= 12000:
        result += ""Taepodong-2\n""

    if target_range > 12000:
        result += ""Not in range\n""
    
    return result.strip().split('\n')


def run_test(target_range):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", target_range, ""kilometers"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_6_missilethreat.py"", [target_range], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(target_range)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 499), 1))
    run_test(500)
    run_test(round(random.uniform(501, 1199), 1))
    run_test(1200)
    run_test(round(random.uniform(1201, 3999), 1))
    run_test(4000)
    run_test(round(random.uniform(4001, 7999), 1))
    run_test(8000)
    run_test(round(random.uniform(8001, 11999), 1))
    run_test(12000)
    run_test(12001)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"

target_distance = int(input(""Enter the distance to the potential target (in Kilometers): ""))

missiles = {
    ""Hwasong-6"": 500,
    ""KN-11"": 1200,
    ""Musudan BM-25"": 4000,
    ""Hwasong-14"": 8000,
    ""Taepodong-2"": 12000
}

in_range_missiles = []

for missile, max_range in missiles.items():
    if target_distance <= max_range:
        in_range_missiles.append(missile)

if in_range_missiles:
    for missile in in_range_missiles:
        print(missile)
else:
    print(""Not in range"")
",completed,100.0,"------------------------------
Test 1 - 350.4 kilometers
------------------------------
Expecting Hwasong-6  . . . FOUND!
Expecting KN-11  . . . FOUND!
Expecting Musudan BM-25  . . . FOUND!
Expecting Hwasong-14  . . . FOUND!
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 2 - 500 kilometers
------------------------------
Expecting Hwasong-6  . . . FOUND!
Expecting KN-11  . . . FOUND!
Expecting Musudan BM-25  . . . FOUND!
Expecting Hwasong-14  . . . FOUND!
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 3 - 665.3 kilometers
------------------------------
Expecting KN-11  . . . FOUND!
Expecting Musudan BM-25  . . . FOUND!
Expecting Hwasong-14  . . . FOUND!
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 4 - 1200 kilometers
------------------------------
Expecting KN-11  . . . FOUND!
Expecting Musudan BM-25  . . . FOUND!
Expecting Hwasong-14  . . . FOUND!
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 5 - 1688.9 kilometers
------------------------------
Expecting Musudan BM-25  . . . FOUND!
Expecting Hwasong-14  . . . FOUND!
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 6 - 4000 kilometers
------------------------------
Expecting Musudan BM-25  . . . FOUND!
Expecting Hwasong-14  . . . FOUND!
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 7 - 7678.5 kilometers
------------------------------
Expecting Hwasong-14  . . . FOUND!
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 8 - 8000 kilometers
------------------------------
Expecting Hwasong-14  . . . FOUND!
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 9 - 8153.6 kilometers
------------------------------
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 10 - 12000 kilometers
------------------------------
Expecting Taepodong-2  . . . FOUND!
SUCCESS!

------------------------------
Test 11 - 12001 kilometers
------------------------------
Expecting Not in range  . . . FOUND!
SUCCESS!

Unit Test Returned: 100.0
"
273,418,a1_6_evacuation,3,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
PROBLEM STATEMENT:  

Terrorist groups in the past have created improvised explosive devices in
various shapes and sizes. According to the National Counterterrorism Center,
the following evacuation distances are appropriate for certain explosive
devices.

Explosive Container

|

Evacuation Distance (inclusive, in Feet)  
  
---|---  
  
Pipe Bomb

|

850  
  
Suitcase Bomb

|

1850  
  
Sedan

|

2000  
  
Cargo Van

|

2750  
  
Semi-Trailer

|

7000  
  
  
Write a Python program that asks the user to enter a distance to a device (in
feet). Then, referencing the table, print out all of the explosive devices
that could potentially reach a target at the specified distance (one per
line). If no explosives can reach the specified distance, output ""Not in
range"".

EXAMPLES:

|

Example 1

|

Example 2

|

Example 3  
  
---|---|---|---  
  
Input

|

1900

|

2500

|

8000  
  
Output

|

Sedan  
Cargo Van  
Semi-Trailer

|

Cargo Van  
Semi-Trailer

|

Not in range  
  
NOTE: The devices can be listed in any order, so long as only the ones in
range are printed.


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(target_range):
    result = """"
    
    if target_range <= 850:
        result += ""Pipe Bomb\n""

    if target_range <= 1850:
        result += ""Suitcase Bomb\n""
        
    if target_range <= 2000:
        result += ""Sedan\n""

    if target_range <= 2750:
        result += ""Cargo Van\n""

    if target_range <= 7000:
        result += ""Semi-Trailer\n""

    if target_range > 7000:
        result += ""Not in range\n""
    
    return result.strip().split('\n')


def run_test(target_range):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", target_range, ""feet"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_6_evacuation.py"", [target_range], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(target_range)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 899), 1))
    run_test(850)
    run_test(round(random.uniform(851, 1849), 1))
    run_test(1850)
    run_test(round(random.uniform(1851, 1999), 1))
    run_test(2000)
    run_test(round(random.uniform(2001, 2749), 1))
    run_test(2750)
    run_test(round(random.uniform(2751, 7999), 1))
    run_test(7000)
    run_test(7001)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
distance = int(input(""Enter a distance (in feet): ""))

if distance <= 850:
    print(""Pipe Bomb"")
if distance <= 1850:
    print(""Suitcase Bomb"")
if distance <= 2000:
    print(""Sedan"")
if distance <= 2750:
    print(""Cargo Van"")
if distance <= 7000:
    print(""Semi-Trailer"")

if distance > 7000:
    print(""Not in range"")
",completed,100.0,"------------------------------
Test 1 - 168.2 feet
------------------------------
Expecting Pipe Bomb  . . . FOUND!
Expecting Suitcase Bomb  . . . FOUND!
Expecting Sedan  . . . FOUND!
Expecting Cargo Van  . . . FOUND!
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 2 - 850 feet
------------------------------
Expecting Pipe Bomb  . . . FOUND!
Expecting Suitcase Bomb  . . . FOUND!
Expecting Sedan  . . . FOUND!
Expecting Cargo Van  . . . FOUND!
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 3 - 1461.1 feet
------------------------------
Expecting Suitcase Bomb  . . . FOUND!
Expecting Sedan  . . . FOUND!
Expecting Cargo Van  . . . FOUND!
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 4 - 1850 feet
------------------------------
Expecting Suitcase Bomb  . . . FOUND!
Expecting Sedan  . . . FOUND!
Expecting Cargo Van  . . . FOUND!
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 5 - 1974.3 feet
------------------------------
Expecting Sedan  . . . FOUND!
Expecting Cargo Van  . . . FOUND!
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 6 - 2000 feet
------------------------------
Expecting Sedan  . . . FOUND!
Expecting Cargo Van  . . . FOUND!
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 7 - 2157.7 feet
------------------------------
Expecting Cargo Van  . . . FOUND!
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 8 - 2750 feet
------------------------------
Expecting Cargo Van  . . . FOUND!
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 9 - 6107.9 feet
------------------------------
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 10 - 7000 feet
------------------------------
Expecting Semi-Trailer  . . . FOUND!
SUCCESS!

------------------------------
Test 11 - 7001 feet
------------------------------
Expecting Not in range  . . . FOUND!
SUCCESS!

Unit Test Returned: 100.0
"
274,419,a1_6_digitalstorage,3,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

Assume someone takes hundreds of photos on their smartphone every week. They
are seeking the best and least expensive alternatives to store/share their
images because their phone's storage capacity is limited. Using the table
below, determine which storage options they should consider, assuming each
image has an average file size of 6 MB.



**Storage Option** | **Short Name** | **Number of Images (inclusive)**  
---|---|---  
CD-ROM (700 MB) | CD | 116  
DVD-ROM (4.7 GB) | DVD | 780  
USB Thumb Drive (16 GB) | USB Small | 2660  
USB Thumb Drive (64 GB) | USB Large | 10600  
Portable Hard Drive (256 GB) | Portable HDD | 42600  
  
  
Write a Python program that asks the user to enter the number of images that
need to be shared/stored (non-negative, whole number). Then, referencing the
table above, print out all the storage options (by Short Name) capable of
holding that many images (one per line). If no storage options are capable of
storing that many images, output ""Consider Cloud Storage"".



**EXAMPLES:**

  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input** | 2000 | 4000 | 45000  
**Output** | USB Small  
USB Large  
Portable HDD |

USB Large  
Portable HDD

| Consider Cloud Storage  
  
NOTE: The devices can be listed in any order, so long as only the ones in
range are printed.


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(num_images):
    result = """"
    
    if num_images <= 116:
        result += ""CD\n""

    if num_images <= 780:
        result += ""DVD\n""
        
    if num_images <= 2660:
        result += ""USB Small\n""

    if num_images <= 10600:
        result += ""USB Large\n""

    if num_images <= 42600:
        result += ""Portable HDD\n""

    if num_images > 42600:
        result += ""Consider Cloud Storage\n""
    
    return result.strip().split('\n')


def run_test(num_images):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", num_images, ""images"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_6_digitalstorage.py"", [num_images], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(num_images)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(int(random.uniform(0, 115)))
    run_test(116)
    run_test(int(random.uniform(117, 779)))
    run_test(780)
    run_test(int(random.uniform(781, 2659)))
    run_test(2660)
    run_test(int(random.uniform(2661, 10599)))
    run_test(10600)
    run_test(int(random.uniform(10601, 42599)))
    run_test(42600)
    run_test(45000)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def determine_storage_options(num_images):
    storage_options = [
        {""name"": ""CD-ROM (700 MB)"", ""short_name"": ""CD"", ""num_images"": 116},
        {""name"": ""DVD-ROM (4.7 GB)"", ""short_name"": ""DVD"", ""num_images"": 780},
        {""name"": ""USB Thumb Drive (16 GB)"", ""short_name"": ""USB Small"", ""num_images"": 2660},
        {""name"": ""USB Thumb Drive (64 GB)"", ""short_name"": ""USB Large"", ""num_images"": 10600},
        {""name"": ""Portable Hard Drive (256 GB)"", ""short_name"": ""Portable HDD"", ""num_images"": 42600}
    ]
    
    compatible_options = []
    
    for option in storage_options:
        if num_images <= option[""num_images""]:
            compatible_options.append(option[""short_name""])
    
    if not compatible_options:
        return ""Consider Cloud Storage""
    else:
        return ""\n"".join(compatible_options)

num_images = int(input(""Enter the number of images: ""))
result = determine_storage_options(num_images)
print(result)
```
",completed,0.0,"------------------------------
Test 1 - 105 images
------------------------------
Expecting CD  . . . MISSING!
Expecting DVD  . . . MISSING!
Expecting USB Small  . . . MISSING!
Expecting USB Large  . . . MISSING!
Expecting Portable HDD  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 2 - 116 images
------------------------------
Expecting CD  . . . MISSING!
Expecting DVD  . . . MISSING!
Expecting USB Small  . . . MISSING!
Expecting USB Large  . . . MISSING!
Expecting Portable HDD  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 3 - 301 images
------------------------------
Expecting DVD  . . . MISSING!
Expecting USB Small  . . . MISSING!
Expecting USB Large  . . . MISSING!
Expecting Portable HDD  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 4 - 780 images
------------------------------
Expecting DVD  . . . MISSING!
Expecting USB Small  . . . MISSING!
Expecting USB Large  . . . MISSING!
Expecting Portable HDD  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 5 - 1708 images
------------------------------
Expecting USB Small  . . . MISSING!
Expecting USB Large  . . . MISSING!
Expecting Portable HDD  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 6 - 2660 images
------------------------------
Expecting USB Small  . . . MISSING!
Expecting USB Large  . . . MISSING!
Expecting Portable HDD  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 7 - 4634 images
------------------------------
Expecting USB Large  . . . MISSING!
Expecting Portable HDD  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 8 - 10600 images
------------------------------
Expecting USB Large  . . . MISSING!
Expecting Portable HDD  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 9 - 25321 images
------------------------------
Expecting Portable HDD  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 10 - 42600 images
------------------------------
Expecting Portable HDD  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

------------------------------
Test 11 - 45000 images
------------------------------
Expecting Consider Cloud Storage  . . . MISSING!
Problems Detected - Your output is missing one or more expected outputs.

Unit Test Returned: 0.0
"
275,420,a1_6_broadband,3,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

Choosing the right broadband speed for your internet connection depends on
which online activities you plan on engaging while online. Using the table
below, determine which activities are possible with a given broadband speed,
given in Kilobits per second (Kbps).



**Activity** | **Short Name** | **Minimum Broadband Speed  
(inclusive, in Kbps)**  
---|---|---  
Social Media | Social Media | 1000  
Multiplayer Gaming | Gaming | 4000  
HD Video Conferencing | Video Conferencing | 6000  
File Downloading | File Downloads | 10000  
Stream Ultra HD 4K Video | HD 4K Video | 25000  
  
  
Write a Python program that asks the user to enter the broadband speed in
Kbps. Then, referencing the table above, print out all the activities (by
Short Name) that can be achieved using that speed (one per line). If the
broadband speed is less than 1000 Kbps, output ""Upgrade to Broadband"".



**EXAMPLES:**

  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input** | 8500 | 5000 | 750  
**Output** |

Social Media  
Gaming  
Video Conferencing

|

Social Media  
Gaming

| Upgrade to Broadband  
  
NOTE: The activities can be listed in any order, so long as only the ones in
range are printed.


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(speed):
    result = """"
    
    if speed >= 1000:
        result += ""Social Media\n""

    if speed >= 4000:
        result += ""Gaming\n""
        
    if speed >= 6000:
        result += ""Video Conferencing\n""

    if speed >= 10000:
        result += ""File Downloads\n""

    if speed >= 25000:
        result += ""HD 4K Video\n""

    if speed < 1000:
        result += ""Upgrade to Broadband\n""
    
    return result.strip().split('\n')


def run_test(speed):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", speed, ""Kbps"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_6_broadband.py"", [speed], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(speed)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 999), 1))
    run_test(1000)
    run_test(round(random.uniform(1001, 4999), 1))
    run_test(4000)
    run_test(round(random.uniform(4001, 5999), 1))
    run_test(6000)
    run_test(round(random.uniform(6001, 9999), 1))
    run_test(10000)
    run_test(round(random.uniform(10001, 24999), 1))
    run_test(25000)
    run_test(30000)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
broadband_speed = int(input())

if broadband_speed >= 1000:
    print(""Social Media"")
if broadband_speed >= 4000:
    print(""Gaming"")
if broadband_speed >= 6000:
    print(""Video Conferencing"")
if broadband_speed >= 10000:
    print(""File Downloads"")
if broadband_speed >= 25000:
    print(""HD 4K Video"")
    
if broadband_speed < 1000:
    print(""Upgrade to Broadband"")
",completed,100.0,"------------------------------
Test 1 - 372.7 Kbps
------------------------------
Expecting Upgrade to Broadband  . . . FOUND!
SUCCESS!

------------------------------
Test 2 - 1000 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
SUCCESS!

------------------------------
Test 3 - 4208.8 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
Expecting Gaming  . . . FOUND!
SUCCESS!

------------------------------
Test 4 - 4000 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
Expecting Gaming  . . . FOUND!
SUCCESS!

------------------------------
Test 5 - 4090.1 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
Expecting Gaming  . . . FOUND!
SUCCESS!

------------------------------
Test 6 - 6000 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
Expecting Gaming  . . . FOUND!
Expecting Video Conferencing  . . . FOUND!
SUCCESS!

------------------------------
Test 7 - 6762.0 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
Expecting Gaming  . . . FOUND!
Expecting Video Conferencing  . . . FOUND!
SUCCESS!

------------------------------
Test 8 - 10000 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
Expecting Gaming  . . . FOUND!
Expecting Video Conferencing  . . . FOUND!
Expecting File Downloads  . . . FOUND!
SUCCESS!

------------------------------
Test 9 - 16999.3 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
Expecting Gaming  . . . FOUND!
Expecting Video Conferencing  . . . FOUND!
Expecting File Downloads  . . . FOUND!
SUCCESS!

------------------------------
Test 10 - 25000 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
Expecting Gaming  . . . FOUND!
Expecting Video Conferencing  . . . FOUND!
Expecting File Downloads  . . . FOUND!
Expecting HD 4K Video  . . . FOUND!
SUCCESS!

------------------------------
Test 11 - 30000 Kbps
------------------------------
Expecting Social Media  . . . FOUND!
Expecting Gaming  . . . FOUND!
Expecting Video Conferencing  . . . FOUND!
Expecting File Downloads  . . . FOUND!
Expecting HD 4K Video  . . . FOUND!
SUCCESS!

Unit Test Returned: 100.0
"
276,421,a1_5_scuba,3,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Recreational SCUBA divers have to plan out how many air tanks they will need
in order to safely dive. The amount varies per diver because each person
consumes air at a different rate. This rate is commonly called Surface Air
Consumption. You want to figure whether you can afford the air requirements
for the trips that you are planning.

Write an algorithm that asks for:

  *     * The total dive time for the trip in minutes 
    * The air budget (in dollars--do not worry about the dollar sign)



Your program should then output:

  *     * The number of liters needed for the project.
    * The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)
    * Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of compressed air is greater than or not greater than the budget, respectfully.



Assume that your Surface Air Consumption is **14.5** liters/minute, and that
air costs **2 cents** per liter. You may assume that all inputs are non-
negative numbers.



**EXAMPLES:**



  | **Example 1** | **Example 2**  
---|---|---  
**Input** | 180  
70 |

120  
30  
  
**Output** | 2610.0  
52.2  
Within Budget | 1740.0  
34.800000000000004  
Over Budget  
  



","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(target_minutes, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    
    total_liters = target_minutes*14.5
    total_cost = total_liters*.02
        
    if total_cost > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_5_scuba.py"", [target_minutes, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], total_liters):
        print(""Amount of Air Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount. Expected:"", total_liters)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], total_cost):
        print(""Cost of Air Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", total_cost)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    for x in range(4):
        run_test(round(random.uniform(10,100), 1), random.randint(10, 50))
    run_test(round(random.uniform(10,100), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"----------------------------------
Test #1
----------------------------------
Incorrect Amount. Expected: 168.2
Incorrect Cost. Expected: 3.364
Incorrect Budget Analysis. Expected: Within Budget 

----------------------------------
Test #2
----------------------------------
Incorrect Amount. Expected: 1109.25
Incorrect Cost. Expected: 22.185
Incorrect Budget Analysis. Expected: Over Budget 

----------------------------------
Test #3
----------------------------------
Incorrect Amount. Expected: 314.65
Incorrect Cost. Expected: 6.292999999999999
Incorrect Budget Analysis. Expected: Within Budget 

----------------------------------
Test #4
----------------------------------
Incorrect Amount. Expected: 172.55
Incorrect Cost. Expected: 3.4510000000000005
Incorrect Budget Analysis. Expected: Within Budget 

----------------------------------
Test #5
----------------------------------
Incorrect Amount. Expected: 951.1999999999999
Incorrect Cost. Expected: 19.023999999999997
Incorrect Budget Analysis. Expected: Over Budget 

Unit Test Returned: 0.0
"
277,422,a1_5_runway,3,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

The CSAF has authorized new runways for any base that can accomplish the
project under their current budget. The new runways will be solid concrete
with their lengths measured in meters.

Write an algorithm that asks for:

  *     * The length of runway to be built (in meters)
    * The base's budget (in dollars--do not worry about the dollar sign, do not round to the nearest)



Your program should then output:

  *     * The amount of concrete (in tons) needed for the base's runway
    * The estimated cost (in dollars--do not output a dollar sign)
    * Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of materials is greater than or not greater than the base's budget, respectfully.

Assume that each meter of runway requires **  2.5** tons of concrete to build,
and that concrete costs  **$75.50**  per ton. You may assume that all inputs
are non-negative numbers.



**EXAMPLES:**

  |

Example 1

|

Example 2  
  
---|---|---  
  
Input

|

2000  
400000

|

1500  
250000  
  
Output

|

5000.0  
377500.0  
Within Budget

|

3750.0  
283125.0  
Over Budget  
  



","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(runway_length, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    tons_of_concrete = 2.5 * runway_length
    cost_of_materials = 75.50 * tons_of_concrete
    if cost_of_materials > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_5_runway.py"", [runway_length, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], tons_of_concrete):
        print(""Amount of Concrete Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount. Expected:"", tons_of_concrete)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):
        print(""Cost of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", cost_of_materials)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(500, 3000), 1), random.randint(100000, 500000))
    run_test(round(random.uniform(500, 3000), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def calculate_runway_cost(length, budget):
    concrete_needed = length * 2.5
    cost = concrete_needed * 75.50
    
    if cost <= budget:
        return concrete_needed, cost, ""Within Budget""
    else:
        return concrete_needed, cost, ""Over Budget""
        
length = int(input(""Enter the length of runway to be built (in meters): ""))
budget = int(input(""Enter the base's budget (in dollars): ""))

concrete, cost, budget_status = calculate_runway_cost(length, budget)

print(""The amount of concrete needed: {}"".format(concrete))
print(""The estimated cost: {}"".format(cost))
print(budget_status)
",completed,34.0,"----------------------------------
Test #1
----------------------------------
Incorrect Amount. Expected: 3279.0
Incorrect Cost. Expected: 247564.5
Correct Budget Analysis

----------------------------------
Test #2
----------------------------------
Incorrect Amount. Expected: 4192.25
Incorrect Cost. Expected: 316514.875
Correct Budget Analysis

Unit Test Returned: 34.0
"
278,423,a1_5_printer,3,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

A 3D printer converts computer generated models into physical objects by
heating and extruding a filament known as Polylactic Acid (PLA). PLA, normally
sold in spools, is directly fed to the printer head like a thread. You want to
determine if you can afford to 3D print a project given its volume of
material.

Write an algorithm that asks for:

  *     * The volume of the 3D model to be printed (in cm3)
    * The user's budget (in dollars--do not worry about the dollar sign, do not round to the nearest)



Your program should then output:

  *     * The length of material (in meters) needed to produce the object
    * The estimated cost (in dollars--do not output a dollar sign)
    * Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of materials is greater than or not greater than the user's budget, respectfully.

Assume that each cm3 requires **  0.312** meters of PLA to print, and that PLA
filament costs  **$0.063**  per meter. You may assume that all inputs are non-
negative numbers.



**EXAMPLES:**

  | Example 1 | Example 2  
---|---|---  
Input | 15.0  
2.5 | 500.0  
5.0  
Output | 4.68  
0.29484  
Within Budget | 156.0  
9.828  
Over Budget  
  



","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(volume, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    length_of_materials = 0.312 * volume
    cost_of_materials = 0.063 * length_of_materials
    if cost_of_materials > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_5_printer.py"", [volume, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], length_of_materials):
        print(""Length of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Length. Expected:"", length_of_materials)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):
        print(""Cost of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", cost_of_materials)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 100), 1), random.randint(10, 50))
    run_test(round(random.uniform(0, 100), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"----------------------------------
Test #1
----------------------------------
Incorrect Length. Expected: 27.3624
Incorrect Cost. Expected: 1.7238312
Incorrect Budget Analysis. Expected: Within Budget 

----------------------------------
Test #2
----------------------------------
Incorrect Length. Expected: 4.6488000000000005
Incorrect Cost. Expected: 0.29287440000000003
Incorrect Budget Analysis. Expected: Over Budget 

Unit Test Returned: 0.0
"
279,424,a1_5_paint,3,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You are tasked to paint a large wall and need to see if your unit can afford
the paint for the project

Write an algorithm that asks for:

  *     * The size of the wall in square feet
    * The budget (in dollars--do not worry about the dollar sign)



Your program should then output:

  *     * The amount of paint required to cover the wall
    * The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)
    * Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of paint is greater than or not greater than the budget, respectfully.

Assume that a gallon of paint covers **15** square feet, and that the current
price of paint is  **$12.23**  per gallon. You may assume that all inputs are
non-negative numbers. You should also assume that you can purchase portions of
gallons of paint so do NOT round up to the nearest full gallon.



**EXAMPLES:**

  | Example 1 | Example 2  
---|---|---  
Input | 120.0  
900.0 |

750.0  
100.0  
  
Output | 8.0  
97.84  
Within Budget | 50.0  
611.5  
Over Budget  
  



","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(target_distance, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    fuel_required = target_distance / 15
    cost_of_materials = 12.23 * fuel_required
    
    if cost_of_materials > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_5_paint.py"", [target_distance, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], fuel_required):
        print(""Amount of Paint Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount of Paint. Expected:"", fuel_required)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):
        print(""Cost of Paint Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost of Paint. Expected:"", cost_of_materials)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(500, 3000), 1), random.randint(100000, 500000))
    run_test(round(random.uniform(500, 3000), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"----------------------------------
Test #1
----------------------------------
Incorrect Amount of Paint. Expected: 86.4
Incorrect Cost of Paint. Expected: 1056.672
Incorrect Budget Analysis. Expected: Within Budget 

----------------------------------
Test #2
----------------------------------
Incorrect Amount of Paint. Expected: 96.33333333333333
Incorrect Cost of Paint. Expected: 1178.1566666666668
Incorrect Budget Analysis. Expected: Over Budget 

Unit Test Returned: 0.0
"
280,425,a1_5_fueldepot,3,lab,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Fuel in the military is essential to conducting operations. Balancing mission
requirements against budgetary constraints is a constant concern.

Write an algorithm that asks for:

  *     * The distance to a target in miles
    * The budget (in dollars--do not worry about the dollar sign)



Your program should then output:

  *     * The amount of fuel (in gallons) needed to reach the target
    * The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)
    * Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of fuel is greater than or not greater than the budget, respectfully.

Assume that the convoy can get **  12.5** miles to the gallon, and that the
current price of fuel is  **$3.73**  per gallon. You may assume that all
inputs are non-negative numbers.



**EXAMPLES:**

  | Example 1 | Example 2  
---|---|---  
Input | 130.7  
50.50 |

750  
100  
  
Output | 10.456  
39.0009  
Within Budget | 60.0  
223.80  
Over Budget  
  



","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(target_distance, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    fuel_required = target_distance / 12.5
    cost_of_materials = 3.73 * fuel_required
    
    if cost_of_materials > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_5_fueldepot.py"", [target_distance, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], fuel_required):
        print(""Amount of Fuel Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount. Expected:"", fuel_required)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):
        print(""Cost of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", cost_of_materials)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(500, 3000), 1), random.randint(100000, 500000))
    run_test(round(random.uniform(500, 3000), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def calculate_fuel(distance, budget):
    fuel_needed = distance / 12.5
    cost = fuel_needed * 3.73

    if cost <= budget:
        return fuel_needed, cost, ""Within Budget""
    else:
        return fuel_needed, cost, ""Over Budget""


distance = float(input(""Enter the distance to the target in miles: ""))
budget = float(input(""Enter the budget in dollars: ""))

fuel_needed, cost, budget_status = calculate_fuel(distance, budget)

print(""Fuel needed (in gallons):"", fuel_needed)
print(""Estimated cost (in dollars):"", cost)
print(budget_status)
```
",completed,0.0,"----------------------------------
Test #1
----------------------------------
Incorrect Amount. Expected: 73.056
Incorrect Cost. Expected: 272.49888
Incorrect Budget Analysis. Expected: Within Budget 

----------------------------------
Test #2
----------------------------------
Incorrect Amount. Expected: 101.32
Incorrect Cost. Expected: 377.92359999999996
Incorrect Budget Analysis. Expected: Over Budget 

Unit Test Returned: 0.0
"
281,426,a1_4_sickness,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a template that gets the following values from
the user:

  * Body temperature (in Fahrenheit)
  * Body aches ( **a string** , which will be either ""yes"" or ""no"")
  * Loss of smell ( **a string** , which will be either ""yes"" or ""no"")



Using the following rules as a guide, have your program determine a person's
risk of having an infectious disease:

  1. If the person's temperature is above 100.4 degrees, print ""High Risk""
  2. If the person is experiencing both body aches and loss of smell, print ""High Risk""
  3. For all other situations, print ""Low Risk""



**EXAMPLE:  
**

| **Example 1** | **Example 2**  
---|---|---  
Input |

99.0  
yes  
yes

| 100.4  
no  
yes  
Output | High Risk | Low Risk  
  



","from cs110 import autograder
import random, math

def run_test(temperature, body_aches, loss_of_smell, expected_output):
    output, error = autograder.run_script(""a1_4_sickness.py"", [temperature, body_aches, loss_of_smell])
    lines = output.split('\n')
    
    if len(lines) >= 4:
        if lines[3] == expected_output:
            print(""Correct Output\n"")
            return True
        else:
            print(""Incorrect Output.  Expected"", expected_output, '\n')
            return False
    else:
        print(""No Output Found\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    num_tests_passed = 0
    
    testcase_library = [(round(random.uniform(98.0, 99.9), 1), ""yes"", ""no"", ""Low Risk""),
                        (round(random.uniform(100.5, 102.0), 1), ""yes"", ""yes"", ""High Risk""),
                        (round(random.uniform(98.0, 99.9), 1), ""yes"", ""yes"", ""High Risk""),
                        (round(random.uniform(100.5, 102.0), 1), ""no"", ""no"", ""High Risk"")]
    
    for i in range(len(testcase_library)):
        print(""-------------------"")
        print(""Test"", i+1, ""of"", len(testcase_library))
        print(""-------------------"")
        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):
            num_tests_passed += 1
    
    return round(100 / len(testcase_library) * num_tests_passed, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"-------------------
Test 1 of 4
-------------------
No Output Found

-------------------
Test 2 of 4
-------------------
No Output Found

-------------------
Test 3 of 4
-------------------
No Output Found

-------------------
Test 4 of 4
-------------------
No Output Found

Unit Test Returned: 0.0
"
282,427,a1_4_run,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a template that gets the following values from
the user:

  * Outside Temperature (in Fahrenheit)
  * Is it daytime? **(a string** that will be either ""yes"" or ""no"")
  * Is it raining? ( **a string** that will be either ""yes"" or ""no"")



Using the following rules as a guide, have your program determine if you go on
a run:

  1. If the outside temperature is above 95 degrees, print ""Do Not Run""
  2. If it is daytime and it is NOT raining, print ""Go Run""
  3. For all other situations, print ""Do Not Run""



**EXAMPLE:  
**

| **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
Input |

99.0  
yes  
no

| 80  
yes  
no | 75  
no  
yes  
Output | Do Not Run | Go Run | Do Not Run  
  



","from cs110 import autograder
import random, math

def run_test(temperature, daytime, raining, expected_output):
    output, error = autograder.run_script(""a1_4_run.py"", [temperature, daytime, raining])
    lines = output.split('\n')
    
    if len(lines) >= 4:
        if lines[3] == expected_output:
            print(""Correct Output\n"")
            return True
        else:
            print(""Incorrect Output.  Expected"", expected_output, '\n')
            return False
    else:
        print(""No Output Found\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    num_tests_passed = 0
    
    testcase_library = [(round(random.uniform(93.0, 94.9), 1), ""yes"", ""no"", ""Go Run""),
                        (round(random.uniform(93.0, 94.9), 1), ""no"", ""yes"", ""Do Not Run""),
                        (round(random.uniform(93.0, 94.9), 1), ""no"", ""no"", ""Do Not Run""),
                        (round(random.uniform(100.5, 102.0), 1), ""no"", ""yes"", ""Do Not Run""),
                        (round(random.uniform(100.5, 102.0), 1), ""yes"", ""yes"", ""Do Not Run""),
                        (95.0, ""yes"", ""no"", ""Go Run"")]
    
    for i in range(len(testcase_library)):
        print(""-------------------"")
        print(""Test"", i+1, ""of"", len(testcase_library))
        print(""-------------------"")
        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):
            num_tests_passed += 1
    
    return round(100 / len(testcase_library) * num_tests_passed, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
temperature = float(input(""Outside Temperature (in Fahrenheit): ""))
daytime = input(""Is it daytime? (yes or no): "")
raining = input(""Is it raining? (yes or no): "")

if temperature > 95:
    print(""Do Not Run"")
elif daytime == ""yes"" and raining == ""no"":
    print(""Go Run"")
else:
    print(""Do Not Run"")
",completed,0.0,"-------------------
Test 1 of 6
-------------------
No Output Found

-------------------
Test 2 of 6
-------------------
No Output Found

-------------------
Test 3 of 6
-------------------
No Output Found

-------------------
Test 4 of 6
-------------------
No Output Found

-------------------
Test 5 of 6
-------------------
No Output Found

-------------------
Test 6 of 6
-------------------
No Output Found

Unit Test Returned: 0.0
"
283,428,a1_4_pt,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a template that gets the following values from
the user:

  * Outside Temperature (in Fahrenheit)
  * Is it raining? ( **a string** , which will be either ""yes"" or ""no"")
  * Winds over 20 knots? ( **a string** , which will be either ""yes"" or ""no"")



Using the following rules as a guide, have your program determine if PT is
cancelled or a go:

  1. If the outside temperature is above 90 degrees, print ""PT Cancelled""
  2. If it is raining and there are winds over 20 knots print ""PT Cancelled""
  3. For all other situations, print ""PT is a Go""



**EXAMPLE:  
**

| **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
Input |

99.0  
no  
no

| 85  
yes  
yes | 85  
no  
yes  
Output | PT Cancelled | PT Cancelled | PT is a Go  
  



","from cs110 import autograder
import random, math

def run_test(temperature, raining, winds, expected_output):
    output, error = autograder.run_script(""a1_4_pt.py"", [temperature, raining, winds])
    lines = output.split('\n')
    
    if len(lines) >= 4:
        if lines[3] == expected_output:
            print(""Correct Output\n"")
            return True
        else:
            print(""Incorrect Output.  Expected"", expected_output, '\n')
            return False
    else:
        print(""No Output Found\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    num_tests_passed = 0
    
    testcase_library = [(round(random.uniform(72.0, 90), 1), ""no"", ""no"", ""PT is a Go""),
                        (round(random.uniform(100.5, 102.0), 1), ""yes"", ""yes"", ""PT Cancelled""),
                        (round(random.uniform(72.0, 90), 1), ""yes"", ""no"", ""PT is a Go""),
                        (round(random.uniform(100.5, 102.0), 1), ""no"", ""no"", ""PT Cancelled""),
                        (round(random.uniform(72.0, 90), 1), ""yes"", ""yes"", ""PT Cancelled"")]
    
    for i in range(len(testcase_library)):
        print(""-------------------"")
        print(""Test"", i+1, ""of"", len(testcase_library))
        print(""-------------------"")
        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):
            num_tests_passed += 1
    
    return round(100 / len(testcase_library) * num_tests_passed, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
temperature = float(input(""Outside Temperature (in Fahrenheit): ""))
is_raining = input(""Is it raining? (yes/no): "")
winds_over_20_knots = input(""Winds over 20 knots? (yes/no): "")

if temperature > 90:
    print(""PT Cancelled"")
elif is_raining == ""yes"" and winds_over_20_knots == ""yes"":
    print(""PT Cancelled"")
else:
    print(""PT is a Go"")
",completed,0.0,"-------------------
Test 1 of 5
-------------------
No Output Found

-------------------
Test 2 of 5
-------------------
No Output Found

-------------------
Test 3 of 5
-------------------
No Output Found

-------------------
Test 4 of 5
-------------------
No Output Found

-------------------
Test 5 of 5
-------------------
No Output Found

Unit Test Returned: 0.0
"
284,429,a1_4_dog,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a template that gets the following values from
the user:

  * Outside Temperature (in Fahrenheit)
  * Is it raining? ( **a string** that will be either ""yes"" or ""no"")
  * Is it daytime? ( **a string** that will be either ""yes"" or ""no"")



Using the following rules as a guide, have your program determine if the dog
is outside:

  1. If the outside temperature is above 85 degrees, print ""Dog Inside""
  2. If it is raining outside and it is NOT daytime, print ""Dog Inside""
  3. For all other situations, print ""Dog Outside""



**EXAMPLE:  
**

| **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
Input |

99.0  
no  
yes

| 80  
yes  
no | 75  
no  
yes  
Output | Dog Inside | Dog Inside | Dog Outside  
  



","from cs110 import autograder
import random, math

def run_test(temperature, raining, daytime, expected_output):
    output, error = autograder.run_script(""a1_4_dog.py"", [temperature, raining, daytime])
    lines = output.split('\n')
    
    if len(lines) >= 4:
        if lines[3] == expected_output:
            print(""Correct Output\n"")
            return True
        else:
            print(""Incorrect Output.  Expected"", expected_output, '\n')
            return False
    else:
        print(""No Output Found\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    num_tests_passed = 0
    
    testcase_library = [(round(random.uniform(83.0, 84.9), 1), ""no"", ""yes"", ""Dog Outside""),
                        (round(random.uniform(83.0, 84.9), 1), ""yes"", ""no"", ""Dog Inside""),
                        (round(random.uniform(83.0, 84.9), 1), ""no"", ""no"", ""Dog Outside""),
                        (round(random.uniform(100.5, 102.0), 1), ""no"", ""yes"", ""Dog Inside""),
                        (round(random.uniform(100.5, 102.0), 1), ""yes"", ""yes"", ""Dog Inside""),
                        (85.0, ""yes"", ""yes"", ""Dog Outside"")]
    
    for i in range(len(testcase_library)):
        print(""-------------------"")
        print(""Test"", i+1, ""of"", len(testcase_library))
        print(""-------------------"")
        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):
            num_tests_passed += 1
    
    return round(100 / len(testcase_library) * num_tests_passed, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
temp = float(input(""Outside Temperature (in Fahrenheit): ""))
rain = input(""Is it raining? (yes or no): "")
daytime = input(""Is it daytime? (yes or no): "")

if temp > 85:
    print(""Dog Inside"")
elif rain == ""yes"" and daytime == ""no"":
    print(""Dog Inside"")
else:
    print(""Dog Outside"")
",completed,0.0,"-------------------
Test 1 of 6
-------------------
No Output Found

-------------------
Test 2 of 6
-------------------
No Output Found

-------------------
Test 3 of 6
-------------------
No Output Found

-------------------
Test 4 of 6
-------------------
No Output Found

-------------------
Test 5 of 6
-------------------
No Output Found

-------------------
Test 6 of 6
-------------------
No Output Found

Unit Test Returned: 0.0
"
285,430,a1_3_vspeed,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

You have been provided with a partially complete Python program that contains
2 variables.

  1. speed_of_vehicle(input by the user in mph)
  2. speed_limit (already initialized in mph)



Add code to the end of this program that will output:

  *     *         Too fast, slow down!

If the vehicle speed is higher than the speed limit  
  

    *         Maintain Speed

If the vehicle speed is equal to the speed limit  
  

    *         Too slow, speed up!

If the vehicle speed is lower than the speed limit  
  



**EXAMPLES:** ****

| **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input** | 80 | 65 | 40  
**Output** | Too fast, slow down! | Maintain Speed | Too slow, speed up!


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(speed):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing speed ="", speed, ""MPH"")
    print(""----------------------------------"")
    
    if speed > 65:
        solution = ""Too fast, slow down!""
    elif speed == 65:
        solution = ""Maintain Speed""
    else:
        solution = ""Too slow, speed up!""
    
    output, error_message = autograder.run_script(""a1_3_vspeed.py"", [speed])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(66, 150), 1))
    run_test(65)
    run_test(round(random.uniform(0.0, 64), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
speed_of_vehicle = int(input(""Enter the speed of the vehicle (in mph): ""))
speed_limit = 60

if speed_of_vehicle > speed_limit:
    print(""Too fast, slow down!"")
elif speed_of_vehicle == speed_limit:
    print(""Maintain Speed"")
else:
    print(""Too slow, speed up!"")
",completed,66.7,"----------------------------------
Testing speed = 80.9 MPH
----------------------------------
CORRECT!

----------------------------------
Testing speed = 65 MPH
----------------------------------
INCORRECT. Expected: Maintain Speed


----------------------------------
Testing speed = 25.3 MPH
----------------------------------
CORRECT!

Unit Test Returned: 66.7
"
286,431,a1_3_speed,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with a partially complete Python program that contains
2 variables.

  1. aircraft_speed (input by the user in mph)
  2. speed_of_sound (already initialized in mph)



Add code to the end of this program that will output:

  *     *         Faster than Mach 1 

If the aircraft speed is higher than the speed of sound  
  

    *         Mach 1 

If the aircraft speed is equal to the speed of sound  
  

    *         Slower than Mach 1 

If the aircraft speed is lower than the speed of sound  
  



**EXAMPLES:**

  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input** | 800 | 767.269 | 450.8  
**Output** | Faster than Mach 1 | Mach 1 | Slower than Mach 1


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(speed):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing speed ="", speed, ""MPH"")
    print(""----------------------------------"")
    
    if speed > 767.269:
        solution = ""Faster than Mach 1""
    elif speed == 767.269:
        solution = ""Mach 1""
    else:
        solution = ""Slower than Mach 1""
    
    output, error_message = autograder.run_script(""a1_3_speed.py"", [speed])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(768.0, 1000.0), 1))
    run_test(767.269)
    run_test(round(random.uniform(0.0, 767.0), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"----------------------------------
Testing speed = 944.7 MPH
----------------------------------
INCORRECT. Expected: Faster than Mach 1


----------------------------------
Testing speed = 767.269 MPH
----------------------------------
INCORRECT. Expected: Mach 1


----------------------------------
Testing speed = 135.6 MPH
----------------------------------
INCORRECT. Expected: Slower than Mach 1


Unit Test Returned: 0.0
"
287,432,a1_3_satellite,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

You have been provided with a partially complete Python program that contains
2 variables.

  1. satellite_speed (input by the user in km/s)
  2. orbit_speed (already initialize in km/s)



Add code to the end of this program that will output:

    *       *             Crashed to Earth

If the speed of the satellite is below the orbital speed.

      *             In Orbit

If the speed of the satellite is equal to the orbital speed.

      *             Lost to Space

If the speed of the satellite is above the orbital speed.



** **

**EXAMPLES:**

|

**Example 1**

|

**Example 2**

|

**Example 3**  
  
---|---|---|---  
  
**Input**

|

3

|

7.8

|

9  
  
**Output**

|

Crashed to Earth

|

In Orbit

|

Lost to Space  
  



","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(speed):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing speed ="", speed, ""km/s"")
    print(""----------------------------------"")
    
    if speed > 7.8:
        solution = ""Lost to Space""
    elif speed == 7.8:
        solution = ""In Orbit""
    else:
        solution = ""Crashed to Earth""
    
    output, error_message = autograder.run_script(""a1_3_satellite.py"", [speed])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(7.8, 20), 1))
    run_test(7.8)
    run_test(round(random.uniform(0.0, 7.7), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
satellite_speed = float(input(""Enter satellite speed (km/s): ""))
orbit_speed = 7.8

if satellite_speed < orbit_speed:
    print(""Crashed to Earth"")
elif satellite_speed == orbit_speed:
    print(""In Orbit"")
else:
    print(""Lost to Space"")
",completed,100.0,"----------------------------------
Testing speed = 11.1 km/s
----------------------------------
CORRECT!

----------------------------------
Testing speed = 7.8 km/s
----------------------------------
CORRECT!

----------------------------------
Testing speed = 4.1 km/s
----------------------------------
CORRECT!

Unit Test Returned: 100.0
"
288,433,a1_3_goldilocks,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with a partially complete Python program that contains
2 variables.

  1. porridge_temp (input by the user in °F)
  2. correct_temp (already initialized in °F)



Add code to the end of this program that will output:

  *     *         Too Hot 

When the porridge temp is above the correct temperature.  
  

    *         Just Right 

When the porridge temp is equal to the correct temperature  
  

    *         Too Cold 

When the porridge temp is below the correct temperature.  
  



**EXAMPLES:**

  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input** | 110 | 105 | 98  
**Output** | Too Hot | Just Right | Too Cold


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(temp):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing temperature ="", temp, ""degrees"")
    print(""----------------------------------"")
    
    if temp > 105:
        solution = ""Too Hot""
    elif temp == 105:
        solution = ""Just Right""
    else:
        solution = ""Too Cold""
    
    output, error_message = autograder.run_script(""a1_3_goldilocks.py"", [temp])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(106, 130), 1))
    run_test(105)
    run_test(round(random.uniform(80, 104), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
porridge_temp = int(input(""Enter the porridge temperature: ""))
correct_temp = 100

if porridge_temp > correct_temp:
    print(""Too Hot"")
elif porridge_temp < correct_temp:
    print(""Too Cold"")
else:
    print(""Just Right"")
",completed,66.7,"----------------------------------
Testing temperature = 114.1 degrees
----------------------------------
CORRECT!

----------------------------------
Testing temperature = 105 degrees
----------------------------------
INCORRECT. Expected: Just Right


----------------------------------
Testing temperature = 84.4 degrees
----------------------------------
CORRECT!

Unit Test Returned: 66.7
"
289,434,a1_3_cards,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with a partially complete Python program that contains
2 variables.

  1. number_of_cards (input by the user)
  2. cards_needed (already initialized)



Add code to the end of this program that will output whether you have enough
cards to make a full deck of 52 cards (already initialized):

  *     *         Too many cards 

If the number of cards is more than the cards needed  
  

    *         Full deck

If the number of cards is equal to the cards needed  
  

    *         Not enough cards 

If the number of cards is fewer than the cards needed  
  



**EXAMPLES:**



  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input** | 57 | 52 | 38  
**Output** | Too many cards | Full deck | Not enough cards


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(num_cards):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing number of cards ="", num_cards, ""cards"")
    print(""----------------------------------"")
    
    if num_cards > 52:
        solution = ""Too many cards""
    elif num_cards == 52:
        solution = ""Full deck""
    else:
        solution = ""Not enough cards""
    
    output, error_message = autograder.run_script(""a1_3_cards.py"", [num_cards])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(53, 60)))
    run_test(52)
    run_test(round(random.uniform(0, 51)))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
number_of_cards = int(input(""Enter the number of cards: ""))
cards_needed = 52

if number_of_cards > cards_needed:
    print(""Too many cards"")
elif number_of_cards == cards_needed:
    print(""Full deck"")
else:
    print(""Not enough cards"")
",completed,100.0,"----------------------------------
Testing number of cards = 53 cards
----------------------------------
CORRECT!

----------------------------------
Testing number of cards = 52 cards
----------------------------------
CORRECT!

----------------------------------
Testing number of cards = 6 cards
----------------------------------
CORRECT!

Unit Test Returned: 100.0
"
290,435,a1_3_arrow,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with a partially complete Python program that contains
2 variables.

  1. arrow_height (input by the user in feet)
  2. apple_height (already initialized in feet)



Add code to the end of this program that will output:

  *     *         Arrow too high 

If the arrow height is higher than the apple  
  

    *         Direct hit

If the arrow height is equal to the apple  
  

    *         Arrow too low 

If the arrow is lower than the apple  
  



**EXAMPLES:**



  | **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input** | 7.1 | 6.2 | 5.9  
**Output** | Arrow too high | Direct hit | Arrow too low


","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(height):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing height ="", height, ""feet"")
    print(""----------------------------------"")
    
    if height > 6.2:
        solution = ""Arrow too high""
    elif height == 6.2:
        solution = ""Direct hit""
    else:
        solution = ""Arrow too low""
    
    output, error_message = autograder.run_script(""a1_3_arrow.py"", [height])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(6.2, 20), 1))
    run_test(6.2)
    run_test(round(random.uniform(0.0, 6.1), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
# Take input from the user for arrow_height
arrow_height = float(input(""Enter the height of the arrow in feet: ""))

# Provide the value for apple_height
apple_height = 6.2

# Compare arrow_height with apple_height and print the appropriate message
if arrow_height > apple_height:
    print(""Arrow too high"")
elif arrow_height == apple_height:
    print(""Direct hit"")
else:
    print(""Arrow too low"")
",completed,100.0,"----------------------------------
Testing height = 19.8 feet
----------------------------------
CORRECT!

----------------------------------
Testing height = 6.2 feet
----------------------------------
CORRECT!

----------------------------------
Testing height = 0.4 feet
----------------------------------
CORRECT!

Unit Test Returned: 100.0
"
291,436,a1_2_spheres,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write a program that calculates the volume of a multiple spheres.  The
template provided to you defines 2 variables:

  * **radius**  \- radius of the sphere
  * **total**  \- The number of spheres



Calculate the volume, using the following formula:

    
    
    V=(4/3)r3t

Where . . .

  *     * ****  is the mathematical constant (see the HINT for more details)
    * **r**  is the radius of the cylinder
    * **t** is the number of spheres



Store the answer in a variable called **  volume**.  You do not need to print
the variable.



**HINT:** ****

The math module contains the mathematical constant, .  To use it, simply type
**math.pi**


","from cs110 import autograder
import random, math

from a1_2_spheres import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (4/3) * (radius**3)*total
    file = open(""a1_2_spheres.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see if variable 'volume' exists . . . "", end='')
    if 'volume' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'volume' . . . "", end='')
        if 'volume' in globals() and autograder.equals(volume, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

radius = 2
total = 5

volume = (4/3) * math.pi * (radius**3) * total

print(volume)
",completed,100.0,"167.5516081914556
Checking to see if variable 'volume' exists . . . FOUND!
Checking mathematical formula . . . CORRECT!
Checking the value of 'volume' . . . CORRECT!
Unit Test Returned: 100
"
292,437,a1_2_radius,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write a program that calculates the area of multiple circles.  The template
provided to you defines 2 variables:

  * **radius**  \- radius of the circle
  * **total**  \- The number of circles



Calculate the area, using the following formula:

    
    
    A=r2t

Where . . .

  *     * ****  is the mathematical constant (see the HINT for more details)
    * **r** is the radius of the circle
    * **t** is the number of circles



Store the answer in a variable called **area**.  You do not need to print the
variable.



**HINT:** ****

The math module contains the mathematical constant, .  To use it, simply type
**math.pi**

Variables

Variable | Min | Max | Decimal Places  
---|---|---|---  
  
Formulas

0

0

Possible Solutions

Show Answers for


","from cs110 import autograder
import random, math

from a1_2_radius import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (radius**2) * height * total
    file = open(""a1_2_radius.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see areif variable 'volume' exists . . . "", end='')
    if 'volume' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'volume' . . . "", end='')
        if 'volume' in globals() and autograder.equals(volume, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

radius = 5
total = 3

area = math.pi * (radius**2) * total

area
",failed: name 'height' is not defined,0.0,
293,438,a1_2_interest,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You are trying to write a program that calculates the amount of money a person
will earn from an investment.  The template provided to you defines 3
variables:

  * **principal_amount**  \- The principal (i.e., starting) amount of money that a person has
  * **interest_rate**  \- The interest rate
  * **time**  \- The length of the investment (in months)



Calculate the amount of money earned, using the following formula:

    
    
    amount = pert

Where . . .

  *     * **p**  is the principal amount
    * **e**  is the mathematical constant (approximately equal to 2.718... -- see the HINT for more details)
    * **r**  is the interest rate
    * **t**  is the time



Store the answer in a variable called  **amount.   **You do not need to print
the variable.



**HINT:** ****

The math module contains the mathematical constant, e.  To use it, simply type
**math.e**


","from cs110 import autograder
import random, math

from a1_2_interest import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = principal_amount * math.e**(interest_rate * time)
    file = open(""a1_2_interest.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see if variable 'amount' exists . . . "", end='')
    if 'amount' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.e' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'amount' . . . "", end='')
        if 'amount' in globals() and autograder.equals(amount, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

# Variables
principal_amount = 1000
interest_rate = 0.05
time = 12

# Calculation
amount = principal_amount * math.exp(interest_rate * time)
amount
",completed,40.0,"Checking to see if variable 'amount' exists . . . FOUND!
Checking mathematical formula . . . NOT FOUND. Make sure you are using the formula.
Checking the value of 'amount' . . . CORRECT!
Unit Test Returned: 40
"
294,439,a1_2_cones,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write a program that calculates the volume of multiple identical cones.  The
template provided to you defines 3 variables:

  * **radius**  \- radius of the cones
  * **height** \- height of the cones
  * **total**  \- The number of cones



Calculate the volume, using the following formula:

    
    
    V =  r2(h/3)t

Where . . .

  *     * ****  is the mathematical constant (see the HINT for more details)
    * **r**  is the radius of the cones
    * **h  **is the height of the cones
    * **t**  is the total amount of cones



Store the answer in a variable called **volume**.  You do not need to print
the variable.



**HINT:** ****

The math module contains the mathematical constant, .  To use it, simply type
**math.pi**


","from cs110 import autograder
import random, math

from a1_2_cones import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (radius**2) * (height/3) * total
    file = open(""a1_2_cones.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see if variable 'volume' exists . . . "", end='')
    if 'volume' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'volume' . . . "", end='')
        if 'volume' in globals() and autograder.equals(volume, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

# Input variables
radius = 5
height = 10
total = 3

# Calculate volume
volume = math.pi * (radius**2) * (height/3) * total

# Print the result
print(volume)
",completed,100.0,"785.3981633974483
Checking to see if variable 'volume' exists . . . FOUND!
Checking mathematical formula . . . CORRECT!
Checking the value of 'volume' . . . CORRECT!
Unit Test Returned: 100
"
295,440,a1_2_circles,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write a program that calculates the area of multiple circles.  The template
provided to you defines 2 variables:

  * **radius**  \- radius of the circle
  * **total**  \- The number of circles



Calculate the area, using the following formula:

    
    
    A=r2t

Where . . .

  *     * ****  is the mathematical constant (see the HINT for more details)
    * **r** is the radius of the circle
    * **t** is the number of circles



Store the answer in a variable called **area**.  You do not need to print the
variable.



**HINT:** ****

The math module contains the mathematical constant, .  To use it, simply type
**math.pi**

Variables

Variable | Min | Max | Decimal Places  
---|---|---|---  
  
Formulas

0

0

Possible Solutions

Show Answers for


","from cs110 import autograder
import random, math

from a1_2_circles import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (radius**2)*total
    file = open(""a1_2_circles.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see if variable 'area' exists . . . "", end='')
    if 'area' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'area' . . . "", end='')
        if 'area' in globals() and autograder.equals(area, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

radius = 5
total = 3

area = math.pi * (radius ** 2) * total
```
OR
","failed: invalid syntax (a1_2_circles.py, line 8)",0.0,
296,444,a1_1_cadet,3,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write the Python code needed to get three values from the user:

  1. A string representing the users name.  Store this value in a variable called **cadet** **_name**
  2. A floating point value representing their height in meters.  Store this value in a variable called **cadet_height**
  3. An integer representing their weight.  Store this value in a variable called **cadet_weight**

**IMPORTANT:**   Your template file contains a print statement that combines
these values to produce an output (see Example).   **Do not modify this
line.**   Simply add your input statements in the space provided.



**EXAMPLE:** ****

If the user types ""Snuffy"", 2.1, and 185, your program should print:

    
    
    Cadet Snuffy is 2.1 meters tall and weighs 180 lbs.


","#import cs110,
import random, math
from cs110 import autograder
num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    cadet_list = [(""Snuffy"", 2.1, 185), (""Smith"", 1.9, 205), (""Green"", 2.0, 155)]
    cadet = cadet_list[random.randint(0, len(cadet_list) - 1)]
    solution = ""Cadet %s is %1.1f meters tall and weighs %d lbs."" % (cadet[0], cadet[1], cadet[2])
        
    output, error_message = autograder.run_script(""a1_1_cadet.py"", [cadet[0], cadet[1], cadet[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
# Get input from the user
cadet_name = input(""Enter your name: "")
cadet_height = float(input(""Enter your height in meters: ""))
cadet_weight = int(input(""Enter your weight in lbs: ""))

# Print the output
print(""Cadet"", cadet_name, ""is"", cadet_height, ""meters tall and weighs"", cadet_weight, ""lbs."")
",completed,100.0,"SUCCESS!

Unit Test Returned: 100.0
"
297,456,PA2_practice4,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You have been provided with a dataset called `fuelprices.csv` that contains
monthly gasoline prices from 2006 - 2012. Here is a typical line from the
dataset (each line ends with the newline \n character):

`1/1/2006 0:00,Regular,2.314`



Each position in the line (separated by a comma) represents a different data
element, or column. The following table shows how the above line can be
interpreted:

| Day | Gas Type | Price (in Dollars)  
---|---|---|---  
Value | 1/1/2006 0:00 | Regular | 2.314  
  


Write a Python program that asks the user for:

  * A Gas Type (e.g., Regular)



Your program should then read the file and output:

  * The average price of gas for that gas type




","from cs110 import autograder
import random, math


def test_passed():

    num_tests_passed = 0
    test_cases = [(""Regular"", 37, 2.938), (""Midgrade"", 37, 3.098), (""Premium"", 37, 3.208), (""Diesel"", 32, 3.242)]

    for test_case in test_cases:
        print(""# -----------------------------------"")
        print(""# Testing"", test_case[0])
        print(""# -----------------------------------"")
        output, error = autograder.run_script(""PA2_practice4.py"", [test_case[0]])
    
        lines = output.strip().split('\n')
        
        if len(lines) > 0:
            if autograder.equals(lines[0], test_case[2]):
                print(""CORRECT"")
                num_tests_passed += 1
            elif len(lines) > 1 and autograder.equals(lines[0], test_case[1]) and autograder.equals(lines[1], test_case[2]):
                print(""CORRECT"")
                num_tests_passed += 1
            else:
                print(""INCORRECT"")
            print()
                    
    return round(100 / len(test_cases), 1) * num_tests_passed
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,,"
import csv

def calculate_average_gas_price(gas_type):
    total_price = 0
    count = 0

    with open('fuelprices.csv', 'r') as file:
        csv_reader = csv.reader(file)
        next(csv_reader)  # Skip the header row

        for row in csv_reader:
            if row[1] == gas_type:
                total_price += float(row[2])
                count += 1

    average_price = total_price / count if count != 0 else 0
    return average_price

gas_type = input(""Enter a gas type: "")
average_price = calculate_average_gas_price(gas_type)
print(""Average price of gas for"", gas_type, ""is"", average_price)
```
",completed,0.0,"# -----------------------------------
# Testing Regular
# -----------------------------------
INCORRECT

# -----------------------------------
# Testing Midgrade
# -----------------------------------
INCORRECT

# -----------------------------------
# Testing Premium
# -----------------------------------
INCORRECT

# -----------------------------------
# Testing Diesel
# -----------------------------------
INCORRECT

Unit Test Returned: 0.0
"
298,457,PA2_practice3,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You are writing a program to analyze the BMI of cadets.  Write a program
that asks for the number of cadets, and then gets that many weights and
heights (alternating, a weight then the corresponding height, in that order).
Your program should then output the number of thin, healthy, overweight, and
obese cadets (based on their BMI), using the following formula and table as a
guide:



**BMI = 703 * (weight / height 2)**



**Rating** | **BMI**  
---|---  
Thin | less than 18.5  
Healthy | at least 18.5 but less than 25  
Overweight | at least 25 but less than 30  
Obese | 30 or more  
  
**EXAMPLES:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Inputs |

3

180  
60  
149  
68  
168  
72

|

4

139  
71  
141  
75  
191  
62  
176  
58

|

7

194  
70  
159  
66  
167  
63  
173  
75  
161  
66  
186  
72  
131  
60  
  
Outputs | 0  
2  
0  
1 | 1  
1  
0  
2 | 0  
1  
6  
0


","from cs110 import autograder
import random, math

def solution(weights, heights):
    num_thin = 0
    num_healthy = 0
    num_overweight = 0
    num_obese = 0
    
    for i in range(len(weights)):
        bmi = 703 * (weights[i] / heights[i]**2)

        if bmi <= 18.5:
            num_thin += 1
        elif bmi <= 25:
            num_healthy += 1
        elif bmi <= 30:
            num_overweight += 1
        else:
            num_obese += 1
    
    return (num_thin, num_healthy, num_overweight, num_obese)


def test_passed():

    score = 0

    # Generates the Test Set
    num_students = random.randint(5, 10)
    inputs = [num_students]
    weights = []
    heights = []
    
    for i in range(num_students):
        random_weight = random.randint(120, 200)
        random_height = random.randint(55, 76)
        
        weights.append(random_weight)
        heights.append(random_height)
        
        inputs.append(random_weight)
        inputs.append(random_height)
    
    output, error = autograder.run_script(""PA2_practice3.py"", inputs)
    expected_output = solution(weights, heights)
    
    lines = output.strip().split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Thin is Correct"")
        score += 25
    else:
        print(""Thin is Incorrect.  Expected"", expected_output[0])

    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Healthy is Correct"")
        score += 25
    else:
        print(""Healthy is Incorrect.  Expected"", expected_output[1])
    
    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):
        print(""Overweight is Correct"")
        score += 25
    else:
        print(""Overweight is Incorrect.  Expected"", expected_output[2])
    
    if len(lines) > 3 and autograder.equals(lines[3], expected_output[3]):
        print(""Obese is Correct"")
        score += 25
    else:
        print(""Obese is Incorrect.  Expected"", expected_output[0])
        
    return score


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,"
def calculate_bmi(weight, height):
   bmi = 703 * (weight / (height ** 2))
   return bmi

num_cadets = int(input(""Enter the number of cadets: ""))

thin_count = 0
healthy_count = 0
overweight_count = 0
obese_count = 0

for i in range(num_cadets):
   weight = float(input(""Enter the weight of cadet {}: "".format(i+1)))
   height = float(input(""Enter the height of cadet {}: "".format(i+1)))

   bmi = calculate_bmi(weight, height)

   if bmi < 18.5:
       thin_count += 1
   elif bmi < 25:
       healthy_count += 1
   elif bmi < 30:
       overweight_count += 1
   else:
       obese_count += 1

print(""Thin cadets: "", thin_count)
print(""Healthy cadets: "", healthy_count)
print(""Overweight cadets: "", overweight_count)
print(""Obese cadets: "", obese_count)
",completed,0.0,"Thin is Incorrect.  Expected 1
Healthy is Incorrect.  Expected 3
Overweight is Incorrect.  Expected 3
Obese is Incorrect.  Expected 1
Unit Test Returned: 0
"
299,458,PA2_practice2,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a function: get_value(n). Your task is to call
this function 6 times.

Get a number from the user (`x`), and print the `x` , `x + 1`, `x + 2`, ... `x
+ 5` values that result from calling get_value() with x to x+5  (i.e., you
should print 6 numbers total).



**HINTS:**

  * You should call this function from inside a loop passing a variable that increases by 1 each loop
  * If the user enters a 2, you should call `get_value(2)`, `get_value(3)`, up to `get_value(7)` and print the results of each call (5, 7, 9, 11, 13, 15) 



**EXAMPLES:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Inputs | 2 | 4 | 11  
Outputs | 5  
7  
9  
11  
13  
15 | 9  
11  
13  
15  
17  
19 | 23  
25  
27  
29  
31  
33


","from cs110 import autograder
import random, math, traceback

solution_filename = ""PA2_practice2.py""

def test_passed():
    test_cases_prev = dict()
    test_cases_prev[1] = (3,5,7,9,11,13)
    test_cases_prev[100] = (201,203,205,207,209,211)
    test_cases_prev[1000] = (2001,2003,2005,2007,2009,2011)
    test_cases_prev[42] = (85,87,89,91,93,95)    
    test_cases_prev[87] = (175,177,179,181,183,185)

    # test_cases[input] = (expected_result_1, ""expected_result_2"")
    
    test_cases = dict()
    test_cases[1] = (1,2,3,4,5,6)
    test_cases[100] = (100,101,102,103,104,105)
    test_cases[1000] = (1000,1001,1002,1003,1004,1005)
    test_cases[42] = (42,43,44,45,46,47)
    test_cases[87] = (87,88,89,90,91,92)

    
    # shuffle the possible inputs    
    test_case_input = list(test_cases.keys())
    case_order = list(range(len(test_case_input)))
    random.shuffle(case_order)
    
    # choose 5 of the randomly sorted 
    case_indices_used = case_order[:5]
    
    score = 0
    
    test_run_num = 1
    for idx in case_indices_used:
        print('\n' + '='*30)
        print("" ""*10+""Test Case #"" + str(test_run_num))
        print('='*30)
        
        try:
            output, error = autograder.run_script(solution_filename, [test_case_input[idx]])
            
            expected_output = """"
            for num in test_cases[test_case_input[idx]]:
                expected_output += str(num) + ""\n""
            
            expected_output_prev = """"
            for num in test_cases_prev[test_case_input[idx]]:
                expected_output_prev += str(num) + ""\n""
            
            lines = output.strip().split('\n')
            
            if output.strip() == expected_output.strip():
                print(""CORRECT"")
                score += 100.0 / len(case_indices_used)
            elif output.strip() == expected_output_prev.strip():
                print(""CORRECT"")
                score += 100.0 / len(case_indices_used)
            else:
                print(""INCORRECT. Expected:"")
                expected_lines = expected_output.split(""\n"")
                expected_prev_lines = expected_output_prev.split(""\n"")
                for line_idx in range(len(expected_lines)):
                    if line_idx == 2:
                        center_col = ""     OR     ""
                    else:
                        center_col = ""            ""
                    
                    print(expected_prev_lines[line_idx].strip()) # + center_col + expected_prev_lines[line_idx].strip())

        except Exception as e:
            print(""ERROR occured when running your solution!"")
            print(e)
            print(traceback.format_exc())
            
        test_run_num += 1        
    
#     random_value = random.randint(5, 15)
#     output, error = autograder.run_script(""PA2_practice2.py"", [random_value])
#     expected_output = solution(random_value)
#     
#     if output.strip() == expected_output.strip():
#         print(""CORRECT"")
#         return 100.0
#     else:
#         print(""INCORRECT.  Expected:"")
#         print(expected_output)
    
    return score
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
def get_value(n):
    return n + 3

x = int(input(""Enter a number: ""))

for i in range(x, x+6):
    print(get_value(i))
",completed,0.0,"
==============================
          Test Case #1
==============================
INCORRECT. Expected:
85
87
89
91
93
95


==============================
          Test Case #2
==============================
INCORRECT. Expected:
2001
2003
2005
2007
2009
2011


==============================
          Test Case #3
==============================
INCORRECT. Expected:
3
5
7
9
11
13


==============================
          Test Case #4
==============================
INCORRECT. Expected:
201
203
205
207
209
211


==============================
          Test Case #5
==============================
INCORRECT. Expected:
175
177
179
181
183
185

Unit Test Returned: 0
"
300,459,PA2_practice1,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Define a function called `add_values`. The function should take 3
parameters (x, y, z), and return the sum of these values.



**NOTES:**

  * You do not need to call the function.  Simply define it.




","from cs110 import autograder
import PA2_practice1

def add_values(x, y, z):
    return x + y + z

def test_passed():
    
    if 'add_values' in dir(PA2_practice1) and add_values(1, 2, 3) == PA2_practice1.add_values(1, 2, 3):
        print(""PASSED"")
        return 100.0
    elif 'add_values' not in dir(PA2_practice1):
        print(""FAILED.  Could not find function 'add_values'"")
    elif result != solution:
        print(""FAILED.  Function 'add_values' did not return the correct value"")
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
def add_values(x, y, z):
    return x + y + z
",completed,100.0,"PASSED
Unit Test Returned: 100.0
"
301,460,lsn9_triangle,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a function that computes the area of a triangle. You will name your
function `area_triangle()`. It has two parameters, the height of the triangle,
`height`, and the length of the base, `base`. The `area_triangle()` function
will print the area of the triangle.

**IMPORTANT:  
** You are encouraged to write code to test your function. However, when you
submit to the server for grading, only the function will be tested.


","from cs110 import autograder
import random, math
import lsn9_triangle

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    base = round(random.uniform(1.0, 10.0), 1)
    height = round(random.uniform(1.0, 10.0), 1)
    output, error_message = autograder.run_script(""lsn9_triangle.py"", [base, height])
    
    area = (base * height) / 2.0
    score = 0
    
    if ""area_triangle"" in dir(lsn9_triangle):
        print(""Function Correctly Defined"")
        score += 50
    else:
        print(""Function does not exist.  Check to make sure the name matches the prompt"")
    
    if autograder.equals(output, area):
        print(""Function produces correct output"")
        score += 50
    else:
        print(""Function produces incorrect output. Expected:"", area)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def area_triangle(height, base):
    area = 0.5 * height * base
    print(""The area of the triangle is:"", area)

# Test case
area_triangle(4, 6)
",completed,50.0,"The area of the triangle is: 12.0
Function Correctly Defined
Function produces incorrect output. Expected: 11.340000000000002
Unit Test Returned: 50
"
302,461,lsn9_skill3,4,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Define a function called `print_hello()`. Your function should, when
called, simply print out a message of your choosing that would be a greeting
to someone.

**IMPORTANT NOTE:**  
Functions only run when a program calls them. For the purposes of this
exercise, you do not need to call the function. If you don't, however, nothing
will appear on the screen when you run it in Thonny.


","from cs110 import autograder
import random, math
import lsn9_skill3

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""lsn9_skill3.py"", [])
    score = 0
    
    if ""print_hello"" in dir(lsn9_skill3):
        print(""Function found!"")
        score += 50
        
        if len(output) > 0:
            print(""Output Found!"")
            score += 50
        else:
            print(""Function does not appear to be printing out anything"")
    else:
        print(""Function does not appear to be defined.  Check the name and make sure it matches the prompt"")
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def print_hello():
    print(""Hello, how are you today?"")
",completed,50.0,"Function found!
Function does not appear to be printing out anything
Unit Test Returned: 50
"
303,462,lsn9_skill2,4,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a function called `draw_multiple_trees()` that
outputs a tree using ASCII art. Unlike the previous problem, this function
accepts a parameter that tells it how many trees to draw.

Write a program that:

  1. Gets an integer from the user and stores it in a variable. You can name this variable whatever you want.
  2. Calls the function, and passes the variable to it. 

Remember that ""passing a value"" to a function simply means putting the number
inside the parenthesis when you call it.


","from cs110 import autograder
import random, math

# The Actual Solution
def draw_tree(num_times):
    result = """"
    for i in range(num_times):
        result += ""  *  \n""
        result += "" *** \n""
        result += ""*****\n""
        result += ""  |  \n""
    return result;


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    num_passed = 0
    num_tests = 3
    
    for i in range(num_tests):
        print(""-------------------------------------------"")
        print(""Test"", i+1)
        print(""-------------------------------------------"")
        num_trees = random.randint(0, 5)
        output, error_message = autograder.run_script(""lsn9_skill2.py"", [num_trees])
        expected_output = draw_tree(num_trees)
        
        if output == expected_output:
            print(""Good Job!\n"")
            num_passed += 1
        else:
            print(""Incorrect Output. Expected the following:"")
            print(expected_output, ""\n"")
    
    return round((100 / num_tests) * num_passed, 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"-------------------------------------------
Test 1
-------------------------------------------
Incorrect Output. Expected the following:
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
 

-------------------------------------------
Test 2
-------------------------------------------
Incorrect Output. Expected the following:
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
 

-------------------------------------------
Test 3
-------------------------------------------
Incorrect Output. Expected the following:
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
 

Unit Test Returned: 0.0
"
304,463,lsn9_skill1,4,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a function called `draw_tree()` that prints a
tree using ASCII art:

    
    
     *  
     ***  
    *****  
     |

Call this function 3 times.


","from cs110 import autograder
import random, math

# The Actual Solution
def draw_tree():
    result =  ""  *  \n""
    result += "" *** \n""
    result += ""*****\n""
    result += ""  |  \n""
    return result;


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error_message = autograder.run_script(""lsn9_skill1.py"", [])
    
    expected_output = draw_tree() + draw_tree () + draw_tree()
    
    if output == expected_output:
        print(""Good Job!"")
        return 100
    else:
        print(""Incorrect Output. Expected the following:"")
        print(expected_output)
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def draw_tree():
    print(""   *   "")
    print(""  ***  "")
    print("" ***** "")
    print(""   |   "")

draw_tree()
draw_tree()
draw_tree()
",completed,0.0,"Incorrect Output. Expected the following:
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  
  *  
 *** 
*****
  |  

Unit Test Returned: 0
"
305,464,lsn9_imagesize,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
PROBLEM STATEMENT:  
Write a function that computes the size of an uncompressed image. You will
name your function calculate_size_of_image(), and it will have three
parameters: the width of the image, the height of the image, and the bit depth
(i.e., # of bits per pixel).

The function should print the size of the image in kilobytes.


","from cs110 import autograder
import lsn9_imagesize, random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    base = random.randint(1024, 1980)
    height = random.randint(1024, 1980)
    bd = 2**random.randint(3, 7)
    output, error_message = autograder.run_script(""lsn9_imagesize.py"", [base, height, bd])
    
    filesize = (base * height * bd) / 8 / 1024
    score = 0
    
    if ""calculate_size_of_image"" in dir(lsn9_imagesize):
        print(""Function Correctly Defined"")
        score += 50
    else:
        print(""Function does not exist.  Check to make sure the name matches the prompt"")
    
    if autograder.equals(output, filesize):
        print(""Function produces correct output"")
        score += 50
    else:
        print(""Function produces incorrect output. Expected:"", filesize)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def calculate_size_of_image(width, height, bit_depth):
    size = (width * height * bit_depth) / 8
    print(f""The size of the image is {size} kilobytes."")

calculate_size_of_image(1280, 720, 24)
",completed,50.0,"The size of the image is 2764800.0 kilobytes.
Function Correctly Defined
Function produces incorrect output. Expected: 21903.75
Unit Test Returned: 50
"
306,465,lsn9_callme,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with three functions. Open the template file, and
perform the following tasks: **  
**

  * **Task 1:** Ask the user to enter a width and height. Do **NOT** assume they are whole numbers. Call area_rectangle and give it the user values
  * **Task 2:** Ask the user to enter a string. Call print_backwards and give it the user value
  * **Task 3:** You have been provided with a variable called my_number. Call positive_or_negative and give it the variable


","from cs110 import autograder
import random, math

# This function takes a string and prints it backwards
def get_reverse(s):
    result = ''
    for i in range(len(s)-1, -1, -1):
        result += s[i]
    return result

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    base = round(random.uniform(1.0, 100.0), 1)
    height = round(random.uniform(1.0, 100.0), 1)

    string_list = ['abcde', 'defgh', 'xzy', 'abba']
    test_string = string_list[random.randint(0, len(string_list)-1)]

    file = open(""lsn9_callme.py"", ""r"")
    file_contents = file.read()
    num_calls_area_rectangle = file_contents.count(""area_rectangle"")
    num_calls_print_backwards = file_contents.count(""print_backwards"")
    num_calls_positive = file_contents.count(""positive_or_negative"")

    output, error_message = autograder.run_script(""lsn9_callme.py"", [base, height, test_string])
    
    area = (base * height)
    score = 0
    
    lines = output.split(""\n"")
    
    if autograder.equals(lines[0], area) and num_calls_area_rectangle > 1:
        print(""area_rectangle called successfully"")
        score += 33
    else:
        print(""area_rectangle was not called successfully"")
    
    if len(lines) > 1 and lines[1].strip() == get_reverse(test_string) and num_calls_print_backwards > 1:
        print(""print_backwards called successfully"")
        score += 33
    else:
        print(""print_backwards was not called successfully"")
    
    if len(lines) > 2 and lines[2].strip() == ""Positive"" and num_calls_positive > 1:
        print(""positive_or_negative called successfully"")
        score += 34
    else:
        print(""positive_or_negative was not called successfully"")
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def area_rectangle(width, height):
    area = width * height
    return area

def print_backwards(string):
    reverse_string = string[::-1]
    return reverse_string

def positive_or_negative(number):
    if number > 0:
        return ""Positive""
    elif number < 0:
        return ""Negative""
    else:
        return ""Zero""

# Task 1
width = float(input(""Enter the width: ""))
height = float(input(""Enter the height: ""))
area = area_rectangle(width, height)
print(""The area of the rectangle is:"", area)

# Task 2
user_string = input(""Enter a string: "")
reversed_string = print_backwards(user_string)
print(""The string backwards is:"", reversed_string)

# Task 3
my_number = -7
result = positive_or_negative(my_number)
print(""The number is:"", result)
",completed,0.0,"area_rectangle was not called successfully
print_backwards was not called successfully
positive_or_negative was not called successfully
Unit Test Returned: 0
"
307,470,lsn7_triangle,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 




**PROBLEM STATEMENT:  
**

Write an algorithm that asks the user for X and Y coordinates of a single
point (the coordinates of the top left point on the triangle), the length of
the base, and the height of a right triangle. Then, open a graphics window and
draw the triangle. The area of the triangle is should be displayed at the
bottom center of the window in black.



**HINTS:**

  * Make sure you get the user input BEFORE you open the window. Otherwise, the program will freeze.
  * The `draw_text` function will draw text on a screen. Don't worry about getting the text EXACTLY in the center (it's hard!).




","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn7_triangle.py"", doraise=True)
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
        
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import graphics as g

def main():
    x = float(input(""Enter the x-coordinate of the top left point: ""))
    y = float(input(""Enter the y-coordinate of the top left point: ""))
    base = float(input(""Enter the length of the base: ""))
    height = float(input(""Enter the height of the triangle: ""))

    win = g.GraphWin(""Triangle"", 400, 400)
    
    p1 = g.Point(x, y)
    p2 = g.Point(x + base, y)
    p3 = g.Point(x + base/2, y + height)
    
    triangle = g.Polygon(p1, p2, p3)
    triangle.setFill(""white"")
    triangle.draw(win)
    
    area = 0.5 * base * height
    
    text = g.Text(g.Point(200, 380), ""Area: "" + str(area))
    text.setTextColor(""black"")
    text.draw(win)
    
    win.getMouse()
    win.close()

if __name__ == ""__main__"":
    main()
",completed,100.0,"----------------------------------------------------------------------
*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***
----------------------------------------------------------------------

Thank you for your submission. Your instructor will let you know if there is a problem.
Unit Test Returned: 100.0
"
308,471,lsn7_stamp,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** Create a pythonGraph function called `draw_stamp` that accepts an x and y
coordinate as parameters. Add code so that this function will then draw a
picture (of your choosing) centered on that coordinate.



To test your function, create a pythonGraph window, and call your function
several times (each time, passing it a different set of x and y coordinates).


","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn7_stamp.py"", doraise=True)
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
        
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import pythonGraph

def draw_stamp(x, y):
    picture = """"""  *  
 * *
*****
  |  """"""
   
    pythonGraph.draw_picture(picture, x-1, y-1)

window = pythonGraph.create_window(500, 500)

draw_stamp(100, 100)
draw_stamp(250, 250)
draw_stamp(400, 400)

window.update()",completed,100.0,"----------------------------------------------------------------------
*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***
----------------------------------------------------------------------

Thank you for your submission. Your instructor will let you know if there is a problem.
Unit Test Returned: 100.0
"
309,473,lsn7_simpledrawing,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

Using pythonGraph (and the documentation for pythonGraph), experiment with
each of the drawing commands listed (drawing commands begin with the keyword
""draw""). Draw something interesting using at least 4 different drawing
commands. One of those drawing commands must be `draw_image`

**NOTE:  
** The best files will be added to our Python ""Hall of Fame"".


","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    drawing_functions = [""draw_arc"", ""draw_image"", ""draw_rectangle"", ""draw_circle"", ""draw_ellipse"", ""draw_line"", ""draw_pixel"", ""draw_text"", ""write_text""]
    drawing_functions_called = []
    
    print(""----------------------------------------------------------------------"")
    print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
    print(""----------------------------------------------------------------------\n"")
    
    file = open(""lsn7_simpledrawing.py"", ""r"")
    file_contents = file.read()
    
    for f in drawing_functions:
        if f in file_contents and f not in drawing_functions_called:
            drawing_functions_called.append(f)
    
    if len(drawing_functions_called) >= 4 and ""draw_image"" in drawing_functions_called:
        print(""Good Job!"")
        return 100.0
    elif len(drawing_functions_called) >= 4 and ""draw_image"" not in drawing_functions_called:
        print(""Missing at least one call of draw_image"")
        return 90.0
    else:
        print(""Not enough different drawing functions.  Need 4 unique (including draw_image) calls."")
        return 25 * len(drawing_functions_called)
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"Below is the code solution to the problem statement:

```
from graph import *

def main():
    window_size(500, 500)
    canvas_coords(0, 0, 500, 500)
    
    # Draw a rectangle
    draw_rectangle(100, 100, 400, 400, fill='blue')

    # Draw an oval
    draw_oval(150, 150, 350, 350, fill='green')

    # Draw a line
    draw_line(100, 100, 150, 150, width=5)

    # Draw a text
    draw_text(200, 200, 'Hello World!', size=20, bold=True)

    # Draw an image
    draw_image(250, 250, 'image.png')

    update()

if __name__ == ""__main__"":
    main()
```

Note: Make sure to replace `'image.png'` with the path to the actual image file you want to draw.",completed,100.0,"----------------------------------------------------------------------
*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***
----------------------------------------------------------------------

Good Job!
Unit Test Returned: 100.0
"
310,474,lsn7_randomcircles,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** Create a pythonGraph that asks the user for the number of circles to draw.
Your program should then open a pythonGraph window and then draw that many
circles somewhere within view.

**Hints**

  * Import the `random` module in order to generate random numbers. There are specifically two functions that are useful:
  * `random.random()` returns a random number between 0.0 and 1.0
  * `random.randint(start, end)` returns a random integer between `start` and `end`




","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:
        py_compile.compile(""lsn7_randomcircles.py"", doraise=True)
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
        
        file = open(""lsn7_randomcircles.py"", ""r"")
        file_contents = file.read()
        lines = file_contents.split(""\n"")
        
        pg_draw_used = False
        random_used = False
        
        for line in lines:
            if len(line.strip()) > 0 and line.strip()[0] != '#':      
                if ""random.rand"" in line:
                    random_used = True
                    
                if ""draw_circle("" in line:
                    pg_draw_used = True
        
        if pg_draw_used and random_used:
            print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
            return 100.0
        elif pg_draw_used and not random_used:
            print(""Looks like you drew a circle but didn't use random values for size or location."")
            return 50.0
        elif not pg_draw_used and random_used:
            print(""Looks like you created random variables but didn't actually draw any circles."")
            return 50.0
        else:
            print(""Doesn't look like you created random variables or drew any circles."")
            return 0.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
import random
from graphics import *


def draw_circles(num_circles):
    win = GraphWin(""PythonGraph Window"", 500, 500)
    
    for _ in range(num_circles):
        radius = random.randint(10, 100)
        x = random.randint(radius, 500 - radius)
        y = random.randint(radius, 500 - radius)
        
        circle = Circle(Point(x, y), radius)
        circle.setFill(""blue"")
        circle.draw(win)

    win.mainloop()


number_of_circles = int(input(""Enter the number of circles to draw: ""))
draw_circles(number_of_circles)
```
",completed,0.0,"There appears to be a syntax error in your code.
Unit Test Returned: 0.0
"
311,475,lsn6_uod,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

You've been asked to develop a tool to help identify the uniform of the day,
based on temperature and wind speed.

The command center has provided the following table for guidance:

| Temperature  
---|---  
Wind Speed |  | <40 | 40 | >40 and <60 | 60 | >60  
<15 | Parkas | A-Jackets | A-Jackets | A-Jackets | Blues  
15 | ABUs | ABUs | Parkas | Parkas | Blues  
>15 | ABUs | ABUs | Parkas | Parkas | A-Jackets  
  
Create a Python program that first gets the temperature (in degrees
Fahrenheit) and then the wind speed (in knots) from the user. You may assume
that all inputs are non-negative numbers.

It should then output the correct response, as described above.


","from cs110 import autograder
import random, math

num_tests_passed = 0

# The Actual Solution
def solution(temp, wind):
    if temp < 40:
        if wind < 15:
            return ""Parkas""
        else:
            return ""OCPs""
    elif temp == 40:
        if wind < 15:
            return 'A-Jackets'
        else:
            return 'OCPs'
    elif temp > 40 and temp <= 60:
        if wind < 15:
            return 'A-Jackets'
        else:
            return 'Parkas'
    else:
        if wind <= 15:
            return 'Blues'
        else:
            return 'A-Jackets'


def run_test(temp, wind):
    global num_tests_passed
    
    print(""Testing Temp ="", temp, 'and Wind =', wind)
    output, error_message = autograder.run_script(""lsn6_uod.py"", [temp, wind])
    
    print(""Output:"", output.strip())
    
    if output.strip() == solution(temp, wind):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT.  Expected:"", solution(temp, wind), ""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(39, 14)
    run_test(39, 15)
    run_test(39, 16)
    run_test(40, 14)
    run_test(40, 15)
    run_test(40, 16)
    run_test(50, 14)
    run_test(50, 15)
    run_test(50, 16)
    run_test(60, 14)
    run_test(60, 15)
    run_test(60, 16)
    run_test(61, 14)
    run_test(61, 15)
    run_test(61, 16)
    
    return round(num_tests_passed * (100 / 15), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"Testing Temp = 39 and Wind = 14
Output: 
INCORRECT.  Expected: Parkas 

Testing Temp = 39 and Wind = 15
Output: 
INCORRECT.  Expected: OCPs 

Testing Temp = 39 and Wind = 16
Output: 
INCORRECT.  Expected: OCPs 

Testing Temp = 40 and Wind = 14
Output: 
INCORRECT.  Expected: A-Jackets 

Testing Temp = 40 and Wind = 15
Output: 
INCORRECT.  Expected: OCPs 

Testing Temp = 40 and Wind = 16
Output: 
INCORRECT.  Expected: OCPs 

Testing Temp = 50 and Wind = 14
Output: 
INCORRECT.  Expected: A-Jackets 

Testing Temp = 50 and Wind = 15
Output: 
INCORRECT.  Expected: Parkas 

Testing Temp = 50 and Wind = 16
Output: 
INCORRECT.  Expected: Parkas 

Testing Temp = 60 and Wind = 14
Output: 
INCORRECT.  Expected: A-Jackets 

Testing Temp = 60 and Wind = 15
Output: 
INCORRECT.  Expected: Parkas 

Testing Temp = 60 and Wind = 16
Output: 
INCORRECT.  Expected: Parkas 

Testing Temp = 61 and Wind = 14
Output: 
INCORRECT.  Expected: Blues 

Testing Temp = 61 and Wind = 15
Output: 
INCORRECT.  Expected: Blues 

Testing Temp = 61 and Wind = 16
Output: 
INCORRECT.  Expected: A-Jackets 

Unit Test Returned: 0.0
"
312,476,lsn6_speeding,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a program that gets a speed (in miles per hour). You may assume that
all inputs are non-negative numbers.

It should output the kind of ticket a police officer should give the driver
(according to the table below).

Speed (mph) | <= 65 | >65 and <= 70 | >70 and <= 75 | > 75 and <= 80 | > 80  
---|---|---|---|---|---  
Ticket | No Ticket | Warning | Speeding | Reckless Driving | Reckless
Endangerment  
  
**EXAMPLES:**

| Example 1 | Example 2 | Example 3 | Example 4 | Example 5  
---|---|---|---|---|---  
Input | 48 | 68 | 72 | 78 | 136  
Expected Output  | No Ticket | Warning | Speeding | Reckless Driving |
Reckless Endangerment


","from cs110 import autograder
import random, math

# The Actual Solution
def solution(speed):
    # Determines what to return based on the table
    if (speed <= 65):
        return ""No Ticket""
    elif (speed >65 and speed <= 70):
        return ""Warning""
    elif (speed > 70 and speed <= 75):
        return ""Speeding""  
    elif (speed >75 and speed <= 80):
        return ""Reckless Driving""
    elif (speed > 80):
        return ""Reckless Endangerment""

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    num_tests_passed = 0
    
    SPEEDS_TO_TEST = [random.randint(0, 65),
                      65,
                      random.randint(66, 70),
                      70,
                      random.randint(71, 75),
                      75,
                      random.randint(76, 80),
                      80,
                      random.randint(81, 100)]
    
    for i in range(0, len(SPEEDS_TO_TEST)):
        print(""-------------------------------"")
        print(""Test"", i+1)
        print(""-------------------------------"")
        speed = SPEEDS_TO_TEST[i]
        output, error_message = autograder.run_script(""lsn6_speeding.py"", [speed])
        
        if output.strip() == solution(speed):
            print(""SUCCESS!\n"")
            num_tests_passed += 1
        else:
            print(""INCORRECT.  Expected:"", solution(speed), ""\n"")
    
    return round(num_tests_passed * (100 / len(SPEEDS_TO_TEST)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def get_ticket(speed):
  if speed <= 65:
    return ""No Ticket""
  elif speed <= 70:
    return ""Warning""
  elif speed <= 75:
    return ""Speeding""
  elif speed <= 80:
    return ""Reckless Driving""
  else:
    return ""Reckless Endangerment""

# Example usage
print(get_ticket(48))  # No Ticket
print(get_ticket(68))  # Warning
print(get_ticket(72))  # Speeding
print(get_ticket(78))  # Reckless Driving
print(get_ticket(136))  # Reckless Endangerment
",completed,0.0,"-------------------------------
Test 1
-------------------------------
INCORRECT.  Expected: No Ticket 

-------------------------------
Test 2
-------------------------------
INCORRECT.  Expected: No Ticket 

-------------------------------
Test 3
-------------------------------
INCORRECT.  Expected: Warning 

-------------------------------
Test 4
-------------------------------
INCORRECT.  Expected: Warning 

-------------------------------
Test 5
-------------------------------
INCORRECT.  Expected: Speeding 

-------------------------------
Test 6
-------------------------------
INCORRECT.  Expected: Speeding 

-------------------------------
Test 7
-------------------------------
INCORRECT.  Expected: Reckless Driving 

-------------------------------
Test 8
-------------------------------
INCORRECT.  Expected: Reckless Driving 

-------------------------------
Test 9
-------------------------------
INCORRECT.  Expected: Reckless Endangerment 

Unit Test Returned: 0.0
"
313,479,lsn6_roundtrip,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write a Python program that gets three values from the user:

  * The distance to a destination (in miles)
  * The amount of fuel in the user's car (in gallons)
  * The # of miles the user's car can travel per gallon of gas (i.e., Miles Per Gallon)

You may assume that all inputs are non-negative numbers.

Calculate the amount of fuel needed to reach the destination. Then output
whether or not the user needs to refuel during a round trip, using the below
table as a guide:

Fuel Consumed (One-Way) | =< 50% | > 50% and <= 100% | > 100%  
---|---|---|---  
Output | No Refueling Needed | Refuel on Way Back | Refuel En Route  
  
**EXAMPLES:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 100  
10  
30 | 100  
5  
20 | 100  
7  
10  
Output | No Refueling Needed | Refuel on Way Back | Refuel En Route  
  
**NOTE: Your Output Must Match Exactly**


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
            
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 1"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn6_roundtrip.py"", [100,10,30])
    
    if output.strip() == ""No Refueling Needed"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect.  Expected: No Refueling Needed\n"")
        
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 2"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn6_roundtrip.py"", [100,5,20])
    
    if output.strip() == ""Refuel on Way Back"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect.  Expected: Refuel on Way Back\n"")
    
        # Runs the Script
    print(""-------------------------------"")
    print(""Test 3"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn6_roundtrip.py"", [100,7,10])
    
    if output.strip() == ""Refuel En Route"":
        print(""CORRECT\n"")
        points_earned += 34
    else:
        print(""Incorrect.  Expected: Refuel En Route\n"")

    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def fuel_needed():
    distance = float(input(""Enter the distance to the destination (in miles): ""))
    fuel_amount = float(input(""Enter the amount of fuel in your car (in gallons): ""))
    mpg = float(input(""Enter the miles per gallon of your car: ""))

    fuel_needed = distance / mpg
    round_trip_fuel_needed = fuel_needed * 2

    if fuel_amount >= round_trip_fuel_needed:
        print(""No Refueling Needed"")
    elif fuel_amount >= fuel_needed:
        print(""Refuel on Way Back"")
    else:
        print(""Refuel En Route"")

fuel_needed()
",completed,100.0,"-------------------------------
Test 1
-------------------------------
CORRECT

-------------------------------
Test 2
-------------------------------
CORRECT

-------------------------------
Test 3
-------------------------------
CORRECT

Unit Test Returned: 100
"
314,480,lsn6_lists,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write an algorithm that gets a decimal GPA, APA, and MPA from the user (in
that order). You may assume that all inputs are non-negative whole numbers.

It then reports which meritorious list the cadet is on. If the GPA is equal to
or above 3.0, the cadet is on the ""Dean's List"", and if the APA is equal to or
above 3.0, the cadet is on the ""Athletic Director's List"", and if the MPA is
equal to or above 3.0, the cadet is on the ""Commandant's List"". Finally, if
the cadet qualifies for all three individual lists, then the cadet is on the
""Superintendent's List"". The algorithm should report all the lists the cadet
is on (in the order defined above), unless the cadet is on the Superintendents
List, in which case, it should report only, ""Superintendent's List"".

| No List | Dean's List | Athletic Director's List | Commandant's List |
Superintendent's List  
---|---|---|---|---|---  
GPA | < 3.0 | >= 3.0 | n/a | n/a | >= 3.0  
APA | < 3.0 | n/a | >= 3.0 | n/a | >= 3.0  
MPA | < 3.0 | n/a | n/a | >= 3.0 | >= 3.0  
  
**EXAMPLES:**

| Example 1 | Example 2 | Example 3 | Example 4 | Example 5  
---|---|---|---|---|---  
Input | 2.8  
2.6  
2.5 | 3.5  
3.2  
2.8 | 3.3  
2.8  
3.4 | 3.6  
3.8  
3.2 | 2.8  
3.5  
3.8  
Output | No List | Dean's List  
Athletic Director's List | Dean's List  
Commandant's List | Superintendent's List | Athletic Director's List  
Commandant's List


","from cs110 import autograder
import random, math

num_tests_passed = 0

# The Actual Solution
def solution(gpa, apa, mpa):
    answer = """"
    
    # Determines what output to present (note how we are using the "" character because of the 's)
    if (gpa < 3.0 and apa < 3.0 and mpa < 3.0):
        answer += ""No List\n""
    elif (gpa >= 3.0 and apa >= 3.0 and mpa >= 3.0):
        answer += ""Superintendent's List\n""
    else:
        # Note that these are 3 separate if statements; we do this because we don't know what list(s) the cadet is on
        if (gpa >= 3.0):
            answer += ""Dean's List\n""
        
        if (apa >= 3.0):
            answer += ""Athletic Director's List\n""
        
        if (mpa >= 3.0):
            answer += ""Commandant's List\n""

    return answer.strip()


def run_test(gpa, apa, mpa):
    global num_tests_passed
    
    print(""--------------------------------------------"")
    print(""Testing GPA ="", str(gpa) + "";"", ""APA ="", str(apa) + "";"", ""MPA ="", mpa)
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn6_lists.py"", [gpa, apa, mpa])
        
    if output.strip() == solution(gpa, apa, mpa):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT.  Expected:"", solution(gpa, apa, mpa), ""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(2.8, 2.6, 2.5)
    run_test(3.5, 3.2, 2.8)
    run_test(3.3, 2.8, 3.4)
    run_test(3.6, 3.8, 3.2)
    run_test(2.8, 3.5, 3.8)
    
    return round(num_tests_passed * (100 / 5), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"--------------------------------------------
Testing GPA = 2.8; APA = 2.6; MPA = 2.5
--------------------------------------------
INCORRECT.  Expected: No List 

--------------------------------------------
Testing GPA = 3.5; APA = 3.2; MPA = 2.8
--------------------------------------------
INCORRECT.  Expected: Dean's List
Athletic Director's List 

--------------------------------------------
Testing GPA = 3.3; APA = 2.8; MPA = 3.4
--------------------------------------------
INCORRECT.  Expected: Dean's List
Commandant's List 

--------------------------------------------
Testing GPA = 3.6; APA = 3.8; MPA = 3.2
--------------------------------------------
INCORRECT.  Expected: Superintendent's List 

--------------------------------------------
Testing GPA = 2.8; APA = 3.5; MPA = 3.8
--------------------------------------------
INCORRECT.  Expected: Athletic Director's List
Commandant's List 

Unit Test Returned: 0.0
"
315,481,lsn6_fuel,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

Write an algorithm that gets a fuel load (in lbs) and then a distance to base
(in nautical miles). You may assume all inputs are non-negative numbers.

It then outputs what kind of action the pilot should take. If the fuel load is
less than 50 lbs and the distance to base is less than 70 nm, report ""Return
to base"", otherwise, report ""Resume flight"".

**EXAMPLES:**

| Example 1 | Example 2 | Example 3 | Example 4  
---|---|---|---|---  
Input | 30  
60 | 60  
60 | 40  
80 | 60  
80  
Output | Return to base | Resume flight | Resume flight | Resume flight  
  
**Note: Output must match exactly.**


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
            
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 1"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn6_fuel.py"", [30,60])
    
    if output.strip() == ""Return to base"":
        print(""CORRECT\n"")
        points_earned += 25
    else:
        print(""Incorrect.  Expected: Return to base\n"")
        
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 2"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn6_fuel.py"", [60,60])
    
    if output.strip() == ""Resume flight"":
        print(""CORRECT\n"")
        points_earned += 25
    else:
        print(""Incorrect.  Expected: Resume flight\n"")
    
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 3"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn6_fuel.py"", [40,80])
    
    if output.strip() == ""Resume flight"":
        print(""CORRECT\n"")
        points_earned += 25
    else:
        print(""Incorrect.  Expected: Resume flight\n"")

    # Runs the Script
    print(""-------------------------------"")
    print(""Test 4"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn6_fuel.py"", [60,80])
    
    if output.strip() == ""Resume flight"":
        print(""CORRECT\n"")
        points_earned += 25
    else:
        print(""Incorrect.  Expected: Resume flight\n"")

    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def pilot_action(fuel_load, distance_to_base):
    if fuel_load < 50 and distance_to_base < 70:
        return ""Return to base""
    else:
        return ""Resume flight""

# Example inputs
print(pilot_action(30, 60))
print(pilot_action(60, 60))
print(pilot_action(60, 40))
print(pilot_action(80, 60))
",completed,0.0,"-------------------------------
Test 1
-------------------------------
Incorrect.  Expected: Return to base

-------------------------------
Test 2
-------------------------------
Incorrect.  Expected: Resume flight

-------------------------------
Test 3
-------------------------------
Incorrect.  Expected: Resume flight

-------------------------------
Test 4
-------------------------------
Incorrect.  Expected: Resume flight

Unit Test Returned: 0
"
316,484,lsn5_positive,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write a Python  **program**  that gets a floating point number from the user:

  * If the number is positive, print the word `POSITIVE`
  * Otherwise, print the word `NOT POSITIVE`

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 10 | -5 | 0  
Output | POSITIVE | NOT POSITIVE | NOT POSITIVE


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
    
    # Generates Random Values
    negative_value = random.randint(-100, -1)
    positive_value = random.randint(1, 100)
        
    # Runs the Script
    print(""-------------------------------"")
    print(""# Test 1 - Positive Number"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn5_positive.py"", [positive_value])
    
    if output.strip() == ""POSITIVE"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect Output:"", output)
        print(""Expected POSITIVE\n"")
        
    
    # Runs the Script
    print(""-------------------------------"")
    print(""# Test 2 - Negative Number"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn5_positive.py"", [negative_value])
    
    if output.strip() == ""NOT POSITIVE"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect Output:"", output)
        print(""Expected NOT POSITIVE\n"")
        
    
    # Runs the Script
    print(""-------------------------------"")
    print(""# Test 3 - Zero"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn5_positive.py"", [0])
    
    if output.strip() == ""NOT POSITIVE"":
        print(""CORRECT"")
        points_earned += 34
    else:
        print(""Incorrect Output:"", output)
        print(""Expected NOT POSITIVE\n"")

    return points_earned

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"-------------------------------
# Test 1 - Positive Number
-------------------------------
Incorrect Output: 
Expected POSITIVE

-------------------------------
# Test 2 - Negative Number
-------------------------------
Incorrect Output: 
Expected NOT POSITIVE

-------------------------------
# Test 3 - Zero
-------------------------------
Incorrect Output: 
Expected NOT POSITIVE

Unit Test Returned: 0
"
317,485,lsn5_largest,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write a program that takes three integers as parameters, and prints the
largest (i.e., highest) number.

Ex: If the input is:

    
    
    7
    15
    3
    

Your function should return:

    
    
    15
    

  
In the event that all 3 numbers are the same, output that number.

Ex: If the input is:

    
    
    5
    5
    5
    

Your function should return:

    
    
    5


","from cs110 import autograder
import random, math


def run_test(num1, num2, num3):
    print(""-------------------------------"")
    print(""# Testing: "" + str(num1) + "" "" + str(num2) + "" "" + str(num3))
    print(""-------------------------------"")
    
    output, error_message = autograder.run_script(""lsn5_largest.py"", [num1, num2, num3])
    
    if autograder.equals(output, max(num1, num2, num3)):
        print(""CORRECT\n"")
        return True
    else:
        print(""Incorrect.  Expected"", max(num1, num2, num3))
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    tests_passed = 0
    
    # Generate 3 Random Numbers
    num1 = 0
    num2 = 0
    num3 = 0
    
    # Ensures that the 3 Numbers are Different
    while num1 == num2 or num1 == num3 or num2 == num3:
        num1 = random.randint(0, 100)
        num2 = random.randint(0, 100)
        num3 = random.randint(0, 100)
    
    # Sorts the numbers
    # This is needed so that we can test relationships between numbers
    numbers = [num1, num2, num3]
    numbers.sort()
    num1 = numbers[0]
    num2 = numbers[1]
    num3 = numbers[2]
    
    # Test 1:  num1, num2, num3
    if run_test(num1, num2, num3):
        tests_passed += 1

    # Test 2:  num1, num3, num2
    if run_test(num1, num3, num2):
        tests_passed += 1
        
    # Test 3:  num2, num3, num1
    if run_test(num2, num3, num1):
        tests_passed += 1
    
    # Test 4:  num3, num1, num2
    if run_test(num3, num1, num2):
        tests_passed += 1

    # Test 5:  num2, num1, num3
    if run_test(num2, num1, num3):
        tests_passed += 1
    
    # Test 6:  3 Equal Numbers
    if run_test(num1, num1, num1):
        tests_passed += 1
            
    print(""Passed "" + str(tests_passed) + "" out of 6 tests"")
    return round(tests_passed * (100 / 6), 1)
    
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def print_largest(a, b, c):
    if a == b == c:
        print(a)
    elif a >= b and a >= c:
        print(a)
    elif b >= a and b >= c:
        print(b)
    else:
        print(c)


a = int(input())
b = int(input())
c = int(input())

print_largest(a, b, c)
","failed: must be real number, not str",0.0,
318,486,lsn5_classyear,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Using the below table as a guide, write a Python program that takes the user's
class year as input, and outputs their cadet class. If the class year is
before 2021, output ""Graduate"". Alternatively, if the class year is larger
than 2024, output ""Not a Cadet"".

You may assume that all inputs provided to your application are years
(represented as Integers)

| Example 1 | Example 2 | Example 3 | Example 4 | Example 5 | Example 6  
---|---|---|---|---|---|---  
Input | 2021 | 2022 | 2023 | 2024 | 2020 | 2025  
Output | Firstie | Two Degree | Three Degree | Four Degree | Graduate | Not a
Cadet


","from cs110 import autograder
import random, math


def solution(class_year):
    if class_year < 2022:
        return ""Graduate""
    elif class_year == 2022:
        return ""Firstie""
    elif class_year == 2023:
        return ""Two Degree""
    elif class_year == 2024:
        return ""Three Degree""
    elif class_year == 2025:
        return ""Four Degree""
    else:
        return ""Not a Cadet""

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    START_YEAR = 2021
    END_YEAR = 2026
    number_correct = 0
    
    for year in range(START_YEAR, END_YEAR + 1):
        print(""------------------------------"")
        print(""Testing: "" + str(year))
        print(""------------------------------"")
        
        # Runs the Script
        output, error_message = autograder.run_script(""lsn5_classyear.py"", [year])
                
        lines = output.split(""\n"")
               
        if lines[0] == solution(year):
            print(""PASS\n"")
            number_correct += 1
        else:
            print(""FAIL\n"")
    
    print(""Passed "" + str(number_correct) + "" out of "" + str(END_YEAR - START_YEAR + 1) + "" tests"")
    return round(number_correct * (100 / (END_YEAR - START_YEAR + 1)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
year = int(input(""Enter your class year: ""))

if year < 2021:
    print(""Graduate"")
elif year > 2024:
    print(""Not a Cadet"")
elif year == 2021:
    print(""Firstie"")
elif year == 2022:
    print(""Two Degree"")
elif year == 2023:
    print(""Three Degree"")
elif year == 2024:
    print(""Four Degree"")
",completed,16.7,"------------------------------
Testing: 2021
------------------------------
FAIL

------------------------------
Testing: 2022
------------------------------
FAIL

------------------------------
Testing: 2023
------------------------------
FAIL

------------------------------
Testing: 2024
------------------------------
FAIL

------------------------------
Testing: 2025
------------------------------
FAIL

------------------------------
Testing: 2026
------------------------------
PASS

Passed 1 out of 6 tests
Unit Test Returned: 16.7
"
319,487,lsn5_atmosphere,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** The Earth's atmosphere is divided into a series of layers. Write an
algorithm that asks the user for the altitude in kilometers. Then output the
corresponding layer according to the following table:

Altitude | ≤10km | >10km&≤50km | >50km&≤85km | >85km&≤1000km |
>1000km&≤100,000km | >100,000km  
---|---|---|---|---|---|---  
**Layer** | Troposphere | Stratosphere | Mesosphere | Thermosphere | Exosphere
| Space


","from cs110 import autograder
import random, math

def solution(altitude):
    if altitude >= 0:
        if altitude <= 10:
            return ""Troposphere""
    if altitude >= 11:
        if altitude <= 50:
            return ""Stratosphere""
    if altitude >= 51:
        if altitude <= 85:
            return ""Mesosphere""
    if altitude >= 86:
        if altitude <= 1000:
            return ""Thermosphere""
    if altitude >= 1001:
        if altitude <= 100000:
            return ""Exosphere""
        else:
            return ""Space""
        
# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    TEST_VALUES = [0, 1, 10, 11, 50, 51, 85, 86, 1000, 1001, 100000, 100001]
    tests_passed = 0
    
    for altitude in TEST_VALUES:
        print(""--------------------------"")
        print(""Testing "" + str(altitude) + "" km"")
        print(""--------------------------"")
        
        # Runs the Script
        output, error_message = autograder.run_script(""lsn5_atmosphere.py"", [altitude])
                               
        # Your Test Goes Here (Return True if Pass, False Otherwise)   
        if output.strip() == solution(altitude):
            print(""Passed\n"")
            tests_passed += 1
        else:
            print(""Failed (Expected: "" + solution(altitude) + "")\n"")
    
    print(""Passed"", tests_passed, ""out of"", len(TEST_VALUES), ""tests."")
    return round(tests_passed * (100 / len(TEST_VALUES)), 2)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
altitude = float(input(""Enter the altitude in kilometers: ""))

if altitude <= 10:
    layer = ""Troposphere""
elif altitude <= 50:
    layer = ""Stratosphere""
elif altitude <= 85:
    layer = ""Mesosphere""
elif altitude <= 1000:
    layer = ""Thermosphere""
elif altitude <= 100000:
    layer = ""Exosphere""
else:
    layer = ""Space""

print(f""The corresponding layer is: {layer}"")
",completed,0.0,"--------------------------
Testing 0 km
--------------------------
Failed (Expected: Troposphere)

--------------------------
Testing 1 km
--------------------------
Failed (Expected: Troposphere)

--------------------------
Testing 10 km
--------------------------
Failed (Expected: Troposphere)

--------------------------
Testing 11 km
--------------------------
Failed (Expected: Stratosphere)

--------------------------
Testing 50 km
--------------------------
Failed (Expected: Stratosphere)

--------------------------
Testing 51 km
--------------------------
Failed (Expected: Mesosphere)

--------------------------
Testing 85 km
--------------------------
Failed (Expected: Mesosphere)

--------------------------
Testing 86 km
--------------------------
Failed (Expected: Thermosphere)

--------------------------
Testing 1000 km
--------------------------
Failed (Expected: Thermosphere)

--------------------------
Testing 1001 km
--------------------------
Failed (Expected: Exosphere)

--------------------------
Testing 100000 km
--------------------------
Failed (Expected: Exosphere)

--------------------------
Testing 100001 km
--------------------------
Failed (Expected: Space)

Passed 0 out of 12 tests.
Unit Test Returned: 0.0
"
320,488,lsn4_temperature,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

Write an algorithm that prompts the user for a temperature in °F and then
outputs K and °C in that order.

**EXAMPLE:**

| Example 1 | Example 2  
---|---|---  
Input | 32 | 0  
Output | 273.15  
0 | 255.372  
-17.778  
  
**Note: Output must match within a predefined tolerance.**


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    degrees_farenheit = random.random() * 451.0
    degrees_celsius = (degrees_farenheit - 32.0) * 5/9
    degrees_kelvin = degrees_celsius + 273.15
        
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_temperature.py"", [degrees_farenheit])
    
    lines = output.split('\n')
    
    if autograder.equals(lines[0], degrees_kelvin):
        print(""Conversion to Kelvin looks good."")
        if autograder.equals(lines[1], degrees_celsius):
            print(""Conversion to Celsius looks good."")
            return 100.0
        else:
            print(""Conversion to Celsius incorrect.\nYour result: "" + str(lines[1]) + ""\nExpected: "" + str(degrees_celsius))
            return 50.0
    else:
        if autograder.equals(lines[0], degrees_celsius):
            print(""Looks like you swapped the order of your output. Look at the Problem Statement and try again."")
        else:
            print(""Conversion to Kelvin incorrect.\nYour result: "" + str(lines[0]) + ""\nExpected: "" + str(degrees_kelvin))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
temperature_f = float(input(""Enter temperature in °F: ""))

temperature_c = (temperature_f - 32) * (5/9)
temperature_k = temperature_c + 273.15

print(temperature_k)
print(temperature_c)
","failed: must be real number, not str",0.0,
321,491,lsn4_projectile,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

Write a python program that can calculate the range of a projectile when fired
from an artillery on level ground. Your program will ask the user to input the
initial velocity (`v`) and angle in degrees (`theta`). Your program should
then calculate and print the range using the following formula:

`range = (v^2 * sin(2 * theta)) / 9.8`  
 **WARNING: The above formula is not valid Python.**  
  

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 800  
45 | 600  
30 | 535.2  
81.7  
Output | 65306.122 | 31813.178 | 8350.235  
  
**Hints**

  * You need to use the `math` module's trig functions to solve this problem. Type `import math` at the top of your code to add it to your program.
  * The `sin()` and `cos()` functions assume that the angle is in  **radians**


","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 5
    num_correct = 0
    
    for i in range(NUM_TESTS):
        # Generates Random Values
        velocity = random.randint(400, 900)
        theta = random.random() * 90.0
        answer = (velocity**2 * math.sin(2 * theta * math.pi/180.0)) / 9.8
        incorrect_degrees_answer = (velocity**2 * math.sin(2 * theta)) / 9.8
            
        print(""----------------------------------------"")
        print(""TEST CASE"", i+1)
        print(""----------------------------------------"")
        
        # Runs the Script
        output, error_message = autograder.run_script(""lsn4_projectile.py"", [velocity, theta])

        # Optional:  Displays the Error Message (if one is provided)
        if error_message != '':
            print(""Error Occurred: "" + error_message)    
        
        lines = output.split('\n')
        
        if autograder.equals(lines[0], answer, 10.0):
            print(""CORRECT.\n\n"")
            num_correct += 1
        elif autograder.equals(lines[0], incorrect_degrees_answer, 10.0):
            print(""INCORRECT BUT CLOSE: Using Degrees Instead of Radians for math.sin()"")
        else:
            print(""INCORRECT (Expected: "" + str(answer) + "")\n\n"")
    
    return (100 / NUM_TESTS) * num_correct
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

# Get user input for initial velocity and angle
v = float(input(""Enter the initial velocity (m/s): ""))
theta = float(input(""Enter the angle in degrees: ""))

# Convert angle from degrees to radians
theta_radians = math.radians(theta)

# Calculate the range using the given formula
range = (v ** 2 * math.sin(2 * theta_radians)) / 9.8

# Print the range
print(""The range is:"", range)
",completed,0.0,"----------------------------------------
TEST CASE 1
----------------------------------------
INCORRECT (Expected: 72190.54758591231)


----------------------------------------
TEST CASE 2
----------------------------------------
INCORRECT (Expected: 28708.67306922963)


----------------------------------------
TEST CASE 3
----------------------------------------
INCORRECT (Expected: 22944.483978575565)


----------------------------------------
TEST CASE 4
----------------------------------------
INCORRECT (Expected: 15865.546101813396)


----------------------------------------
TEST CASE 5
----------------------------------------
INCORRECT (Expected: 30939.23574977885)


Unit Test Returned: 0.0
"
322,492,lsn4_math,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

Given three floating-point numbers x, y, and z, output the square root of x,
the absolute value of (y minus z) , and the factorial of (the ceiling of z).
Each input should be on a new line, and rounded to a maximum of 2 decimal
places.

(Hint: use the [`round` (Links to an external
site.)](https://docs.python.org/3/library/functions.html#round) function to
round your outputs!):

`round(# to round, # of digits to round to)`

**EXAMPLE:**

    
    
    5.0
    6.5
    3.2
    

Then the output is:

    
    
    2.24
    3.30
    24.00
    

NOTE: Decimal places may be slightly off depending on the exact numbers used.


","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num1 = random.random() * 100.0
    num2 = random.random() * 100.0
    num3 = random.random() * 10.0
    
    part1 = round(math.sqrt(num1), 2)
    part2 = round(math.fabs(num2 - num3), 2)
    part3 = round(math.factorial(math.ceil(num3)), 2)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_math.py"", [num1, num2, num3])
    
    lines = output.split('\n')
    
    correct = [0,0,0]
    
    if autograder.equals(lines[0], part1, 0.001):
        correct[0]=1
        print(""Calculation 1 Correct!"")
    else:
        print(""Calculation 1 Incorrect. Expected: "" + str(part1) + ""<-- Did you forget to use round()?"")
    if autograder.equals(lines[1], part2, 0.001):
        correct[1]=1
        print(""Calculation 2 Correct!"")
    else:
        print(""Calculation 2 Incorrect. Expected: "" + str(part2) + ""<-- Did you forget to use round()?"")
    if autograder.equals(lines[2], part3, 0.001):
        correct[2]=1
        print(""Calculation 3 Correct!"")
    else:
        print(""Calculation 3 Incorrect. Expected: "" + str(part3) + ""<-- Did you forget to use round()?"")
    
    amt_correct = len([elem for elem in correct if elem==1])
    
    return round(amt_correct/3*100,2)
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

x = float(input())
y = float(input())
z = float(input())

sqrt_x = round(math.sqrt(x), 2)
abs_diff = round(abs(y - z), 2)
factorial_ceil_z = round(math.factorial(math.ceil(z)), 2)

print(sqrt_x)
print(abs_diff)
print(factorial_ceil_z)
","failed: must be real number, not str",0.0,
323,493,lsn4_calories,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

The following equations estimate the calories burned when exercising ([source
(Links to an external
site.)](https://web.archive.org/web/20121021230025/http://fitnowtraining.com/2012/01/formula-
for-calories-burned/)):

Men: Calories = ( (Age x 0.2017) + (Weight x 0.09036) + (Heart Rate x 0.6309)
-- 55.0969 ) x Time / 4.184

Women: Calories = ( (Age x 0.074) -- (Weight x 0.05741) + (Heart Rate x
0.4472) -- 20.4022 ) x Time / 4.184

Write a program using inputs age (years), weight (pounds), heart rate (beats
per minute), and time (minutes), respectively. Output calories burned for men
and women.

Output each floating-point value (your program will be marked correct so long
as it outputs a value within a predefined range)

**EXAMPLE:**

If the input is:

    
    
    49
    155
    148
    60
    

Then the output is:

    
    
    891.47
    580.94


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    age_years = random.randint(10, 99)
    weight_pounds = random.randint(80, 400)
    heart_bpm = random.randint(50, 140)
    time_minutes = random.randint(15, 90)
    
    calories_man   = ( (age_years * 0.2017) + (weight_pounds * 0.09036) + (heart_bpm * 0.6309) - 55.0969 )  * time_minutes / 4.184
    calories_woman = ( (age_years * 0.074)  + (weight_pounds * 0.05741) + (heart_bpm * 0.4472) - 20.4022 ) * time_minutes / 4.184
        
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_calories.py"", [age_years, weight_pounds, heart_bpm, time_minutes])
      
    lines = output.split('\n')
      
    if autograder.equals(lines[0], calories_man):
        print(""Male Calorie Calculations Look Good."")
        if autograder.equals(lines[1], calories_woman):
            print(""Female Calorie Calculations Look Good."")
            return 100.0
        else:
            print(""Female Calorie Calculation is Incorrect.\nExpected: "" + str(calories_woman))
            return 50.0
    else:
        print(""Male Calorie Calculation is Incorrect.\nExpected: "" + str(calories_man))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"Male Calorie Calculation is Incorrect.
Expected: 97.8867973231358
Unit Test Returned: 0.0
"
324,494,lsn4_bits_to_kmg,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

One byte is comprised of 8 bits. A typical computer program has a requirement
for much more memory. Therefore, many bytes can be grouped together to make
larger memory amounts. Our convention is for computer memory is scaled in
logical increments of 210 = 1024.

For example:

  * 1024 bytes = 1 kilobyte (KB)
  * 1024 KB = 1 megabyte (MB)
  * 1024 MB = 1 gigabyte (GB)

Write an algorithm that prompts the user for a number of bits and then outputs
the equivalent number of kilobytes, megabytes, and gigabytes.

**EXAMPLE:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 1000000 | 6879000 | 92445694  
Output | 122.07  
0.12  
0.00012 | 839.72  
0.82  
.0008 | 11,284.87  
11.02  
0.01  
  
**Note: Output must match within a predefined tolerance.**


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_bits = random.randint(1, 1000000)
    num_bytes = num_bits / 8
    num_kb = num_bytes / 1024
    num_mb = num_kb / 1024
    num_gb = num_mb / 1024
        
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_bits_to_kmg.py"", [num_bits])
      
    lines = output.split('\n')
      
    if autograder.equals(lines[0], num_kb):
        print(""Kilobyte Conversion Looks Good."")
        if autograder.equals(lines[1], num_mb):
            print(""Megabyte Conversion Looks Good."")
            if autograder.equals(lines[2], num_gb):
                print(""Gigabyte Conversion Looks Good."")
                return 100.0
            else:
                print(""Num GB is Incorrect.\n  Expected: "" + str(num_gb))
                return 67.0
        else:
            print(""Num MB is Incorrect.\n  Expected: "" + str(num_mb))
            return 33.0
    else:
        print(""Num KB is Incorrect.\n  Expected: "" + str(num_kb))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
bits = int(input(""Enter the number of bits: ""))

kilobytes = bits / (8 * 1024)
megabytes = bits / (8 * 1024 * 1024)
gigabytes = bits / (8 * 1024 * 1024 * 1024)

print(round(kilobytes, 2))
print(round(megabytes, 2))
print(round(gigabytes, 5))
","failed: must be real number, not str",0.0,
325,495,lsn4_bits_to_bytes,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

The basic unit of computer memory is a bit. A bit can represent two values (on
or off, 0 or 1). To represent more information, bits are grouped together in
larger quantities. Beyond a bit, the next logical grouping is a byte, where 1
byte has 8 bits. Write an algorithm that prompts the user for a number of bits
and then outputs the equivalent number of bytes.

**EXAMPLE:**

Example 1 | Example 2 | Example 3  
---|---|---  
Input | 8 | 800 | 7234  
Output | 1.0 | 100.0 | 904.25  
  
**Note: Output must match exactly.**


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_bits = random.randint(1, 1000000)
    num_bytes = num_bits / 8

    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_bits_to_bytes.py"", [num_bits])
      
    if autograder.equals(output, num_bytes):
        print(""Num Bytes Looks Good."")
        return 100.0
    else:
        print(""Num Bytes is Incorrect.\nExpected: "" + str(num_bytes))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"```
# Prompt for number of bits
bits = int(input(""Enter the number of bits: ""))

# Calculate equivalent number of bytes
bytes = bits / 8

# Output the result
print(bytes)
```
",completed,0.0,"Num Bytes is Incorrect.
Expected: 37975.625
Unit Test Returned: 0.0
"
326,496,lsn4_bit_representation,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

One way bits can hold information is computer images. Computer images are
composed of a grid of small, independent colored cells known as pixels. The
number of colors each pixel can hold is related to the number bits allocated
to each pixel. A simple black and white image, for example, would have a
single bit per pixel, where the value of the bit would represent black or
white for that pixel. Allocating 2 bits per pixel would allow each pixel to
have one of four colors.

Generally speaking, the number of color options available to a particular
pixel can be described as:

    
    
    numberofcolors = 2number of bits

In Python, write an algorithm that prompts the user for a number of bits and
then outputs the number of different colors that could be represented by a
single pixel.

**EXAMPLE:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 3 | 8 | 24  
Output | 8 | 256 | 16777216  
  
**Note: Output must match exactly.**


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_bits = random.randint(1, 32)
    num_colors = 2 ** num_bits

    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_bit_representation.py"", [num_bits])
      
    if autograder.equals(output, num_colors):
        print(""Num Colors Looks Good."")
        return 100.0
    else:
        print(""Num Colors is Incorrect.\nExpected: "" + str(num_colors))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
bits = int(input(""Enter the number of bits: ""))
colors = 2**bits
print(""Number of different colors that could be represented by a single pixel:"", colors)
",completed,0.0,"Num Colors is Incorrect.
Expected: 4294967296
Unit Test Returned: 0.0
"
327,497,lsn3_skill2,4,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a program that gets a cadet's age, and stores it in a variable called
**your_age.**

Print the user's age + 4.

For example, if the user types:

    
    
     18

Your program should print:

    
    
    22


","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    # Generates Random Values
    age = random.randint(18, 30)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn3_skill2.py"", [age])
    
    if autograder.equals(output, age+4):
        print(""PASSED"")
        return 100
    elif autograder.equals(output, age):
        print(""Close!  You forgot to add 4 to the age before printing it out"")
        return 50
    else:
        print(""Incorrect Output, Expected"", age+4)
        return 0


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"Incorrect Output, Expected 30
Unit Test Returned: 0
"
328,498,lsn3_skill1,4,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Create a variable called  **name,  **and set it equal to your name
(represented as a string--don't forget to use the quotation marks!).


","from cs110 import autograder
import random

from lsn3_skill1 import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    points_earned = 0   
    
    print(""Looking for a variable called 'name' . . . "", end='')
    
    if 'name' in globals():
        points_earned += 50
        print(""FOUND!"")
        print(""Now, checking to make sure your name is a string"")
        
        if type(name).__name__ == 'str':
            points_earned += 50
            print(""Good Job"", name + ""!"")
        else:
            print(""Make sure you are surrounding your name with quotation marks"")
    else:
        print(""NOT FOUND :("")
        
    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"Looking for a variable called 'name' . . . NOT FOUND :(
Unit Test Returned: 0
"
329,499,lsn3_scoreaverage,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write an algorithm that prompts the user for three sports game scores and
outputs the average.

  
**EXAMPLE:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 8  
15  
12 | 89  
103  
63 | 14  
42  
36  
Output | 11.666666666666666 | 85.0 | 30.666666666666668  
  
**Note: Output must match (within a predefined tolerance).**


","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    score1 = random.randint(0, 100)
    score2 = random.randint(0, 100)
    score3 = random.randint(0, 100)
    average = (score1 + score2 + score3) / 3.0
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn3_scoreaverage.py"", [score1, score2, score3])
    
    if autograder.equals(output, average):
        print(""PASSED!"")
        return 100
    else:
        print(""Value doesn't match.\nExpected: "" + str(average))
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
score_1 = int(input(""Enter score 1: ""))
score_2 = int(input(""Enter score 2: ""))
score_3 = int(input(""Enter score 3: ""))

average = (score_1 + score_2 + score_3) / 3
print(average)
","failed: must be real number, not str",0.0,
330,500,lsn3_pointspread,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

A ""Point Spread"" is a term used to in sports (and gambling) to describe the
difference between two teams' scores. For example, if one team scores 20
points and another team scores 30 points, the point spread is 10. A point
spread is always a positive number.

Write an algorithm that prompts the user for two sports game scores and
outputs the point spread.  
  
**  
EXAMPLE:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 8  
15 | 89  
103 | 42  
14  
Output | 7 | 14 | 28  
  
**Note: Output must match exactly.**


","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    score1 = random.randint(0, 50)
    score2 = random.randint(score1, 100)
    spread = abs(score1 - score2)

    points_earned = 0

    # Trial #1:  score 1 > score2
    print(""Testing when score 1 is bigger than score 2 . . ."")
    output, error_message = autograder.run_script(""lsn3_pointspread.py"", [score1, score2])
    
    if autograder.equals(output, spread):
        print(""PASSED!\n"")
        points_earned += 50
    else:
        print(""Value doesn't match.\nExpected: "" + str(spread)  + ""\n"")
        
    # Trial #2:  score 2 > score1
    print(""Testing when score 2 is bigger than score 1 . . ."")
    output, error_message = autograder.run_script(""lsn3_pointspread.py"", [score2, score1])
    
    if autograder.equals(output, spread):
        print(""PASSED!"")
        points_earned += 50
    else:
        print(""Value doesn't match.\nExpected: "" + str(spread))
    
    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
# Prompt user for the scores
team1_score = int(input())
team2_score = int(input())

# Calculate the point spread
point_spread = abs(team1_score - team2_score)

# Print the point spread
print(point_spread)
","failed: must be real number, not str",0.0,
331,501,lsn3_madlib,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Mad Libs are activities that have a person provide various words, which are
then used to complete a short story in unexpected (and hopefully funny) ways.
(EDITOR'S NOTE: Do you kids even do Mad Libs anymore?)

Complete the program to read the needed values from input, that the existing
output statement(s) can use to output a short story.

**EXAMPLE:**

If the input is:

    
    
    Eric
    Chipotle
    12
    burritos
    

Then the output is:

    
    
    Eric went to Chipotle to buy 12 different types of burritos


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    first_names = ['Adrian', 'Troy', 'Dave', 'Paul', 'Kelly', 'Steve', 'Barry']
    generic_locations = ['Best Buy', 'AAFES', 'Target', 'THE Walmart', 'Home Depot']
    nouns = ['Video Games', 'Board Games', 'Nintendo Switches', 'Sony PS4s', 'Microsoft (Ugh) Xbox Ones']
    
    first_name = first_names[random.randint(0, len(first_names) - 1)]
    generic_location = generic_locations[random.randint(0, len(generic_locations) - 1)]
    whole_number = random.randint(0, 100)
    plural_noun = nouns[random.randint(0, len(nouns) - 1)]

    expected_output = first_name + ' went to ' + generic_location + ' to buy ' + str(whole_number) + ' different types of ' + plural_noun + ""\n""

    # Runs the Script
    output, error_message = autograder.run_script(""lsn3_madlib.py"", [first_name, generic_location, whole_number, plural_noun])
    
    if output == expected_output:
        print(""PASSED!"")
        return 100
    else:
        print(""String doesn't match.\nExpected: "" + expected_output)
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
name = input()
restaurant = input()
num = input()
food = input()

output = name + "" went to "" + restaurant + "" to buy "" + num + "" different types of "" + food
print(output)
",completed,0.0,"String doesn't match.
Expected: Adrian went to Best Buy to buy 74 different types of Video Games

Unit Test Returned: 0
"
332,502,lsn3_girlscouts,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a program that asks the user for the amount of money he/she has on
hand, and outputs the number of girl scout cookies that he/she can purchase.
Use the following prices:

$5 per box for the ""Super Six"" (Thin Mints, Samoas, Tagalongs, Do-Si-Dos,
Trefoils, Savannah Smiles)  
$6 per box for the Specialty Cookies (S'mores, Toffee-tastic)

**For this problem, assume that the user will buy all of one or the other. In
other words, output the number of boxes that he/she would be able to obtain if
he/she bought nothing but the Super Six, and nothing but the Specialty
Cookies.**

**HINT:**  
You can convert a number to an integer by using the int() function. For
example:  
 **int(2.51)** will convert the number to 2

EXAMPLE:  
If the input is:

    
    
    26

Then the output is:

    
    
    5 boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles  
    4 boxes of S'mores and Toffee-tastic


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    dollar_amount = round(random.uniform(10.00, 100.00), 2)
    super_six_amount = (dollar_amount // 5)
    specialty_amount = (dollar_amount // 6)
    score = 0
    
    line_1 = str(int(super_six_amount)) + "" boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles""
    line_2 = str(int(specialty_amount)) + "" boxes of S'mores and Toffee-tastic""
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn3_girlscouts.py"", [dollar_amount])
    output_lines = output.split('\n')
    
    if line_1 == output_lines[0]:
        print(""First Line is Correct"")
        score += 50
    else:
        print(""First Line is Incorrect.  Expected:"", line_1)
    
    if line_2 == output_lines[1]:
        print(""Second Line is Correct"")
        score += 50
    else:
        print(""Second Line is Incorrect.  Expected:"", line_2)
    
    return score
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
money = int(input())
super_six_price = 5
specialty_cookie_price = 6

super_six_cookies = money // super_six_price
specialty_cookies = money // specialty_cookie_price

print(super_six_cookies, ""boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles"")
print(specialty_cookies, ""boxes of S'mores and Toffee-tastic"")
",completed,100.0,"First Line is Correct
Second Line is Correct
Unit Test Returned: 100
"
333,503,lsn3_arrivaltime,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write an algorithm that prompts the user for a distance to travel (in miles)
and a speed (in mph) and outputs time of arrival in hours.

  
**For Example:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Input | 72  
60 | 1282  
85 | 120.5  
59.2  
Output | 1.2 | 15.0823 | 2.0355  
  
**Note: Output needs to match the examples.**


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    distance = round(random.random() * 1000, 1)
    speed = round(random.random() * 60, 1)
    time = distance / speed
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn3_arrivaltime.py"", [distance, speed])
    
    if autograder.equals(output, time):
        print(""PASSED!"")
        return 100
    else:
        print(""Value doesn't match.\nExpected: "" + str(time))
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
distance = float(input(""Enter the distance to travel in miles: ""))
speed = float(input(""Enter the speed in mph: ""))

time_of_arrival = distance / speed

print(""Time of arrival in hours:"", time_of_arrival)
",completed,0.0,"Value doesn't match.
Expected: 45.302083333333336
Unit Test Returned: 0
"
334,504,lsn24_starmap,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a table that describes a simple night sky as a
2D list in your code template.  This list is an exact mapping to the picture
below.  The 2D list (`star_map`) is populated with characters representing the
locations of various astronomical entities (stars, planets, etc).  For
example, you can see in the template that the very first item is 'M', since
there is a Moon in the top left corner.



Write a program that gets two values from the user in the following order:

  1. The horizontal index of the cell in the star map to search (e.g. 0 for the top row)
  2. The vertical index of the cell in the star map to search (e.g. 0 for the leftmost column)



Finally, **print  ** ****out the word associated with the code in the table at
that particular cell.

`S = Star; St = Satellite; M = Moon; P = Planet; _ = Nothing`



**EXAMPLES:**



| Example 1 | Example 2 | Example 3  
---|---|---|---  
**Input** |

0

0

|

0

1

|

4

1  
  
**Output** | Moon | Nothing | Satellite  
  
* * *




# AUTOGRADER IMPORT REMOVED

# ---------------------------------------------------------------------
# Lab: Star Map
# Course: CS110, Spring 2022
# ---------------------------------------------------------------------

# ---------------------------------------------------------------------
# Problem Statement: Write a Python program that prints what is found 
#  at a specific location of the star map represented below.
#  NOTE: See the Canvas Problem Statement for additional details.
# ---------------------------------------------------------------------

#DO NOT TOUCH THIS LIST!
star_map =   [['M', '_', '_', '_', 'S'],
              ['S', 'M', '_', '_', 'P'],
              ['S', '_', '_', 'P', 'M'],
              ['P', 'P', 'S', '_', '_'],
              ['M', 'St', '_', 'St', '_']]
#  S = Star; St = Satellite; M = Moon; P = Planet; _ = Nothing

#Your code goes here.","from cs110 import autograder
import random, math, traceback

STUDENT_SOLUTION_FILENAME = ""lsn24_starmap.py""

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    test_cases = dict()
    test_cases[(0,0)] = ""Moon"" 
    test_cases[(0,1)] = ""Nothing""   
    test_cases[(4,1)] = ""Satellite""
    test_cases[(1,4)] = ""Planet""
    test_cases[(3,1)] = ""Planet""
    test_cases[(2,4)] = ""Moon""
    test_cases[(2,2)] = ""Nothing""
    test_cases[(4,3)] = ""Satellite""
    test_cases[(0,4)] = ""Star""
    test_cases[(3,2)] = ""Star""
    
    
    test_case_input = list(test_cases.keys())
    case_order = list(range(len(test_case_input)))
    #random.shuffle(case_order)
    
    score = 0
    i = 1
    
    for idx in case_order:
        print('\n' + '='*30)
        print(""Test Case:"", i)
        print('='*30)
        
        try: 
            output, error = autograder.run_script(STUDENT_SOLUTION_FILENAME, test_case_input[case_order[idx]])        
            expected_output = test_cases[test_case_input[case_order[idx]]]
                        
            test_case_score = 0
            
            output = output.strip()
            
            if len(output.split('\n')) == 0:
                print(""No Output Detected. Expected:"")
                print(expected_output)
            elif len(output.split('\n')) > 1:
                print(""Your program printed too many lines. Expected:"")
                print(expected_output)
            elif output.strip() == expected_output.strip():
                print(""CORRECT!"")
                test_case_score = 100.0 / len(test_cases)
            else:
                print(""INCORRECT. Expected:"")
                print(expected_output)
            
            score += test_case_score
            i += 1
        except Exception as e:
            score += 0
            i += 1
            
            print(""An ERROR Occured:"", e)
            print(traceback.print_exc())    


    return score
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':
    try:
        result = test_passed()
    except Exception as e:
        result = 0
        print(""An ERROR Occured:"", e)
    print(""Unit Test Returned:"", result)",100,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# ---------------------------------------------------------------------
# Lab: Star Map
# Course: CS110, Spring 2022
# ---------------------------------------------------------------------

# ---------------------------------------------------------------------
# Problem Statement: Write a Python program that prints what is found 
#  at a specific location of the star map represented below.
#  NOTE: See the Canvas Problem Statement for additional details.
# ---------------------------------------------------------------------

#DO NOT TOUCH THIS LIST!
star_map =   [['M', '_', '_', '_', 'S'],
              ['S', 'M', '_', '_', 'P'],
              ['S', '_', '_', 'P', 'M'],
              ['P', 'P', 'S', '_', '_'],
              ['M', 'St', '_', 'St', '_']]
#  S = Star; St = Satellite; M = Moon; P = Planet; _ = Nothing

#Your code goes here.","
# Get the user input for the horizontal and vertical indices
horizontal_index = int(input(""Enter the horizontal index: ""))
vertical_index = int(input(""Enter the vertical index: ""))

# Retrieve the element at the specified indices in the star map
element = star_map[vertical_index][horizontal_index]

# Print the corresponding word for the element
if element == 'S':
    print(""Star"")
elif element == 'St':
    print(""Satellite"")
elif element == 'M':
    print(""Moon"")
elif element == 'P':
    print(""Planet"")
else:
    print(""Nothing"")
","failed: expected an indented block after 'try' statement on line 69 (<string>, line 71)",0.0,
335,510,lsn2_printpractice,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

The template file contains various words/phrases that you need to print out
(exactly as written) using Python's `print()` function. For example:

  1. Print the phrase ""Welcome to Computer Science 110!""

  2. Print the result to the following math expression: (640 * 480 * 24) / 8

  3. etc (see the template for details)

Each print statement should be written directly below the corresponding
comment. While you can technically ""cheat"" on this problem, we encourage you
to practice all the various ways that you can use the `print` function. You
will thank us later!


","from cs110 import autograder

def test_passed():
    # Runs the Script
    output, error_message = autograder.run_script(""lsn2_printpractice.py"", [])

    student_output = output.strip().split('\n')
    expected_output = ['Welcome to Computer Science 110!', '921600.0', 'Liam is 8 years old', 'F-15  Eagle', 'F-16  Fighting Falcon', 'B-2   Spirit', 'C-141 Starlifter']
    num_matches = autograder.compare_strings(student_output, expected_output)
    
    return round(num_matches * (100 / len(expected_output)), 1)


# Testbench (to be run in an IDE)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
# Print the phrase ""Welcome to Computer Science 110!""
print(""Welcome to Computer Science 110!"")

# Print the result to the following math expression: (640 * 480 * 24) / 8
print((640 * 480 * 24) / 8)

# Print the phrase ""Python is awesome!""
print(""Python is awesome!"")

# Print the number of seconds in a day
print(24 * 60 * 60)

# Print the phrase ""I love coding in Python!""
print(""I love coding in Python!"")

# Print the number of days in a year
print(365)

# Print the result of subtracting 524 from 1024
print(1024 - 524)

# Print the phrase ""Hello, World!""
print(""Hello, World!"")

# Print the value of pi (3.14159)
print(3.14159)

# Print the sum of 5 and 3
print(5 + 3)

# Print the result of dividing 7 by 2 (float)
print(7 / 2)

# Print the phrase ""I am a programmer""
print(""I am a programmer"")

# Print the remainder of dividing 20 by 6
print(20 % 6)

# Print the result of multiplying 4 by 6
print(4 * 6)
",completed,28.6,"Unit Test Returned: 28.6
"
336,511,lsn2_parking,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

Write a program that prints a formatted ""No parking"" sign as shown below. Note
the first line has two leading spaces. For ALL labs, end with newline (unless
otherwise stated).

    
    
     NO PARKING  
    1:00 - 5:00 a.m.  
      
    


","from cs110 import autograder

def test_passed():
    # Runs the Script
    output, error_message = autograder.run_script(""lsn2_parking.py"", [])
        
    if output.startswith(""  NO PARKING\n""):
        if output == ""  NO PARKING\n1:00 - 5:00 a.m.\n"" or ""  NO PARKING\n1:00 - 5:00 a.m."":
            print(""Passed!"")
            return 100
        else:
            print(""Something is wrong with the second line."")
            return 50
    else:
        print(""Something is wrong with the first line."")
        return 0

# Testbench (to be run in an IDE)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"Something is wrong with the first line.
Unit Test Returned: 0
"
337,512,lsn2_ascii,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a Python program that prints out a cat:

    
    
    /\ /\
     o o
     = =
     ---  
      
    

_Hint: A backslash  `\` in a string acts as an escape character, such as with
a newline_ `\n`.  _So, to print an actual backslash, escape that backslash by
prepending another backslash. Ex: The following prints a single backslash:_
`print('\\')`


","from cs110 import autograder

def test_passed():
    # Runs the Script
    output, error_message = autograder.run_script(""lsn2_ascii.py"", [])
    
    lines = output.split('\n')
    
    # Checks for the Cat
    if lines[0].rstrip() == '/\\   /\\':
        #test_feedback.write('1')
        if lines[1].rstrip() == '  o o':
            #test_feedback.write('2')
            if lines[2].rstrip() == ' =   =':
                #test_feedback.write('3')
                if lines[3].rstrip() == '  ---':
                    #test_feedback.write('4')
                    print('Cat Looks Good!\n')
                    return 100
                else:
                    print('Problem in the fourth line of the cat') 
            else:
                print('Problem in the third line of the cat')  
        else:
            print('Problem in the second line of the cat')  
    else:
        print('Problem in the first line of the cat')
    
    return 0

# Testbench (to be run in an IDE)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
print("" /\\ /\\"")
print("" o o"")
print("" = ="")
print("" ---"")
",completed,0.0,"Problem in the first line of the cat
Unit Test Returned: 0
"
338,516,lsn17_skill1,4,skill,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with the template code for an animation.  Study the
code for a minute, then perform the following tasks:

  * In the `draw()` function, add one line of code that draws a circle.  
For the center, use the `ball_x` and `ball_y` variables defined in the
template.  
  

  * In the `update() function`, add code that modifies the value of `ball_x` and `ball_y`.  
For example, add 1 to the `ball_x` and subtract 1 from `ball_y` every time
`update()` is called. What do you expect to happen? Does what actually happens
match your expectations?




","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0.0
    
    if autograder.code_compiles(""lsn17_skill1.py""):
        file = open(""lsn17_skill1.py"", ""r"")
        file_contents = file.read()
        
        if ""draw_circle("" in file_contents:
            print(""draw_circle called"")
            score += 50
        else:
            print(""draw_circle does not appear to be called.  You need to call it in the draw() function"")
            
        if file_contents.count(""ball_x"") + file_contents.count(""ball_y"") > 5:
            print(""Looks like you are using ball_x and/or ball_y"")
            score += 50
        else:
            print(""Make sure you are changing the value of ball_x and ball_y in update()."")
            
    else:
        print(""There appears to be an error in your python Script that is preventing it from running"")
    
    print(""\nThank you for your submission.  Your instructor will let you know if there is an issue."")
    return score        
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import turtle

# Set up the screen
wn = turtle.Screen()
wn.title(""Animation"")
wn.bgcolor(""white"")

# Create the ball
ball = turtle.Turtle()
ball.shape(""circle"")
ball.color(""black"")
ball.penup()

# Initialize the ball's position
ball_x = 0
ball_y = 0

# Define the draw function
def draw():
    ball.setpos(ball_x, ball_y)

# Define the update function
def update():
    global ball_x, ball_y
    ball_x += 1
    ball_y -= 1

    draw()

# Main animation loop
while True:
    wn.update()
    update()
```
",completed,0.0,"There appears to be an error in your python Script that is preventing it from running

Thank you for your submission.  Your instructor will let you know if there is an issue.
Unit Test Returned: 0.0
"
339,527,lsn10_in_circle,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a function that determines if a point is within a circle. You will
name your function `in_circle()`. It has five parameters:

  1. The coordinates of the point that is to be tested (x, y)
  2. The center of a circle (cir_x, cir_y)
  3. The radius of the circle (radius)

 The `in_circle()` function will return **True** if the point is on or inside
the circle, and **False** otherwise.

**IMPORTANT:  
** You are encouraged to write code to test your function. However, when you
test against the server, only include the code for the function itself (you
can comment out your test code).


","import lsn10_in_circle
from cs110 import autograder
import random, math, traceback

NUM_SUBTESTS = 5
   
def soln(x, y, cir_x, cir_y, radius):
    distance = math.sqrt((cir_x - x)**2 + (cir_y - y)**2)
    return distance <= radius

def test_passed():
    
    passed = 0
    for i in range(NUM_SUBTESTS):
        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')
        if i == 0:
            x = 6.04
            y = 2.43
            cir_x = 43.4
            cir_y = 52.2
            radius = 74.1
        else:
            x = random.random() * 10.0
            y = random.random() * 10.0
            cir_x = random.random() * 100.0
            cir_y = random.random() * 100.0
            radius = random.random() * 100.0
        #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))
        try:
            if lsn10_in_circle.in_circle(x, y, cir_x, cir_y, radius) == soln(x, y, cir_x, cir_y, radius):
                print(""CORRECT!"")
                passed += 1
            else:
                print('INCORRECT:  in_circle(%f, %f, %f, %f, %f) incorrectly returned %s' % (x, y, cir_x, cir_y, radius, lsn10_in_circle.in_circle(x, y, cir_x, cir_y, radius)))
        except Exception as e:
            print()
            print(""Your program encountered an ERROR:"", e)
            print(traceback.print_exc())        
    
    return (100 / NUM_SUBTESTS) * passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
def in_circle(x, y, cir_x, cir_y, radius):
    return (x - cir_x) ** 2 + (y - cir_y) ** 2 <= radius ** 2
",completed,100.0,"Running sub test 1 of 5: CORRECT!
Running sub test 2 of 5: CORRECT!
Running sub test 3 of 5: CORRECT!
Running sub test 4 of 5: CORRECT!
Running sub test 5 of 5: CORRECT!
Unit Test Returned: 100.0
"
340,528,lsn10_distance,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a function that computes the distance between two points. You will
name your function `dist_points`. It has four parameters, the cordinates of
the two points as `x1, y1, x2, y2`. The `dist_points()` function will return
the distance between the two points as a floating point number.

**IMPORTANT:  
** You are encouraged to write code to test your function. However, when you
test against the server, only include the code for the function itself (you
can comment out your test code).


","import random, math, traceback

try:
    from lsn10_distance import dist_points
except ImportError:
    print(""ERROR: The dist_points() function is missing or incorrect."")
    print(""Check your spelling of the function."")
from cs110 import autograder



NUM_SUBTESTS = 5

def soln(x1, y1, x2, y2):
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)

def test_passed():
    
    passed = 0
    
    print(""Feedback:"")
    
    for i in range(NUM_SUBTESTS):
        x1 = round(random.uniform(-10, 10), 1)
        y1 = round(random.uniform(-10, 10), 1)
        x2 = round(random.uniform(-10, 10), 1)
        y2 = round(random.uniform(-10, 10), 1)
        
        print('\n' + '-'*50)
        print('Test %d of %d, dist_points(%1.1f, %1.1f, %1.1f, %1.1f): ' % (i+1 , NUM_SUBTESTS, x1, y1, x2, y2))
        print('-'*50)

        try:
            expected_solution = soln(x1, y1, x2, y2)
            
            if autograder.equals(dist_points(x1, y1, x2, y2), expected_solution):
                print(""PASSED!"")
                passed += 1
            else:
                print('FAILED: incorrectly returned %1.5f' % (dist_points(x1, y1, x2, y2)))
                print('Expected value to return:  %1.5f' % expected_solution)
        except Exception as e:
            print(""Your program encountered an ERROR:"", e)
            print(traceback.print_exc())
    
        
    return round(100 / NUM_SUBTESTS, 1) * passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
import math

def dist_points(x1, y1, x2, y2):
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
",completed,100.0,"Feedback:

--------------------------------------------------
Test 1 of 5, dist_points(-8.0, -0.6, -2.3, -2.4): 
--------------------------------------------------
PASSED!

--------------------------------------------------
Test 2 of 5, dist_points(5.4, -2.3, 2.8, 0.3): 
--------------------------------------------------
PASSED!

--------------------------------------------------
Test 3 of 5, dist_points(-3.5, -2.9, -0.2, -6.2): 
--------------------------------------------------
PASSED!

--------------------------------------------------
Test 4 of 5, dist_points(-8.1, -8.7, 7.7, 1.0): 
--------------------------------------------------
PASSED!

--------------------------------------------------
Test 5 of 5, dist_points(-2.9, 7.7, -5.4, 1.2): 
--------------------------------------------------
PASSED!
Unit Test Returned: 100.0
"
341,529,lsn10_circle,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a function that computes the area of a circle. You will name your
function `area_circle`. It has one parameter, the radius of the circle,
`radius`. The `area_circle()` function will return the area of the circle.

**IMPORTANT:  
** You are encouraged to write code to test your function. However, when you
test against the server, only include the code for the function itself (you
can comment out your test code).


","import lsn10_circle
from cs110 import autograder
import random, math, traceback

NUM_SUBTESTS = 5

# Helper method to see if a numeric value is within a specified delta
def soln(radius):
    return math.pi * radius * radius

def test_passed():
    
    passed = 0
    
    print(""Feedback:"")
    
    for i in range(NUM_SUBTESTS):
        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')
        radius = random.random() * 100.0
        try:
            if autograder.equals(lsn10_circle.area_circle(radius), soln(radius)):
                print(""CORRECT!"")
                passed += 1
            else:
                print('area_circle(%d) incorrectly returned' % (radius), lsn10_circle.area_circle(radius))
        except Exception as e:
            print()
            print(""Your program encountered an ERROR:"", e)
            print(traceback.print_exc())        
        
    return round(100 / NUM_SUBTESTS, 1) * passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
def area_circle(radius):
    area = 3.14159 * radius ** 2
    return area
",completed,0.0,"Feedback:
Running sub test 1 of 5: area_circle(97) incorrectly returned 29747.470153083545
Running sub test 2 of 5: area_circle(58) incorrectly returned 10852.627489035867
Running sub test 3 of 5: area_circle(70) incorrectly returned 15470.89709764527
Running sub test 4 of 5: area_circle(30) incorrectly returned 2912.4961386448595
Running sub test 5 of 5: area_circle(65) incorrectly returned 13551.230978310025
Unit Test Returned: 0.0
"
342,530,lsn10_asteroids,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

""Asteroids"" was an arcade game created in 1979 by Atari, Inc. In the game, the
player is given control of a spaceship that has the ability to shoot bullets.
The player is then placed in a field of floating rocks, and is tasked with
destroying them without running into them.

In this lab, you will write a ""collision detection"" function that will be used
by the game to determine if the player's ship has hit a rock. To make this
simple, assume that an imaginary circle extends from the center of the
asteroid and the player's ship (see below image). If the two circles ever
overlap one another, then a collision has occurred. (NOTE: There are more
accurate ways to detect a collision. [Click here if you want to learn more
(Links to an external site.)](https://bell0bytes.eu/basic-collision-
detection/)).

![](https://bell0bytes.eu/content/images/2019/03/spaceShipAsteroid.png)

Your function, which you will name `detect_collision()` should have six
parameters: the (x, y) coordinates of the center of player's ship, the ship's
radius, the (x, y) coordinates of the center of an asteroid, and the
asteroid's radius. Your function will return `True` if the player's ship has
hit the asteroid, and `False` otherwise.

**HINT: _  
_** _You may want to copy and paste the_  `dist_points`  _function you created
earlier. It's almost as if we are trying to demonstrate the importance of
reusable functions . . ._

**IMPORTANT:  
** You are encouraged to write code to test your function. However, when you
test against the server, only include the code for the function itself (you
can comment out your test code).


","from cs110 import autograder
import random, math, traceback
import lsn10_asteroids


def soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):
    distance = math.sqrt((ship_x - asteroid_x)**2 + (ship_y - asteroid_y)**2)
    return distance < asteroid_r + ship_r

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 4
    num_tests_passed = 0
    
    print(""Feedback:"")
    score = 0
        
    if ""dist_points"" in dir(lsn10_asteroids):
        score += 20
        print(""dist_points function found."")
    else:
        print(""dist_points function not found.  Use your previous dist_points work!"")
        score += 20
        
    for i in range(NUM_TESTS):       
        if i == 0:
            ship_x = 2.3
            ship_y = 0.2
            ship_r = 3
            asteroid_x = -4
            asteroid_y = 3.4
            asteroid_r = 6
        else:
            ship_x = round(random.uniform(-50, 50), 1)
            ship_y = round(random.uniform(-50, 50), 1)
            ship_r = 3
            asteroid_x = round(random.uniform(-50, 50), 1)
            asteroid_y = round(random.uniform(-50, 50), 1)
            asteroid_r = 6
        
        print('-'*60)
        print('Test %d/%d: detect_collision(%2.1f, %2.1f, %2.1f, %2.1f, %2.1f, %2.1f)' % (i+1 , NUM_TESTS, ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r))
        print('-'*60)

        try:
            #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))
            if lsn10_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r) == soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):
                print(""CORRECT"")
                score += 20
            else:
                print('detect_collision(%f, %f, %f, %f, %f, %f) incorrectly returned %s' % (ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r, lsn10_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r)))
        except Exception as e:
            print(""Your program encountered an ERROR:"", e)
            print(traceback.print_exc())
    
    return score
            
            
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"

def detect_collision(ship_x, ship_y, ship_radius, asteroid_x, asteroid_y, asteroid_radius):
    distance = ((ship_x - asteroid_x)**2 + (ship_y - asteroid_y)**2)**0.5
    if distance <= (ship_radius + asteroid_radius):
        return True
    else:
        return False

# Testing the function
print(detect_collision(0, 0, 5, 10, 10, 8))  # False
print(detect_collision(0, 0, 5, 3, 4, 6))  # True
print(detect_collision(-5, -5, 2, 0, 0, 10))  # True

",completed,100.0,"False
True
True
Feedback:
dist_points function not found.  Use your previous dist_points work!
------------------------------------------------------------
Test 1/4: detect_collision(2.3, 0.2, 3.0, -4.0, 3.4, 6.0)
------------------------------------------------------------
CORRECT
------------------------------------------------------------
Test 2/4: detect_collision(-19.6, -14.6, 3.0, -30.9, 9.2, 6.0)
------------------------------------------------------------
CORRECT
------------------------------------------------------------
Test 3/4: detect_collision(22.3, 6.2, 3.0, -7.3, 25.9, 6.0)
------------------------------------------------------------
CORRECT
------------------------------------------------------------
Test 4/4: detect_collision(-26.4, -31.7, 3.0, 4.4, 11.4, 6.0)
------------------------------------------------------------
CORRECT
Unit Test Returned: 100
"
343,532,Lists3_unpopularnames,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

This lab makes use of the names.csv dataset, which provides a list of over
1200+ names that were given to children in 2011. Here is a typical line from
the file:



`FEMALE, HISPANIC, GIA, 21`



  
Each position in the line (separated by a comma) represents a different ""data
element"". Here is a key for your reference:

Gender | Ethnicity  | Name |  Count  
(i.e., Number of Children Assigned this Name)  
---|---|---|---  
FEMALE | HISPANIC  | GIA | 21  
  
  
  
Write a Python algorithm that gets a gender (all CAPs, ""MALE"" or ""FEMALE"") and
a number, `X`, from the user, and prints out the X least popular names for
that gender, starting with the least popular and working up.

For example, if the user types `MALE` and `2`, and you determine that the two
least popular names are Bill and Ted, your program should output:

    
    
    Bill  
    Ted  
      
    



**HINTS (really really important):**

  * Remember that you can use the `sort()` function to sort a list in ascending order. For example, if your list is named `my_list`, you can sort it by typing:  
`my_list.sort()`

  * `sort()` will work on 2D lists. It will sort by the first column, and then look at the 2nd column in the event of a tie. Think about this when you are building your 2D list.




","from cs110 import autograder
import random, math

expected_output_male = [""ALDO"", ""ALIJAH"", ""ALLAN"", ""ANGEL"", ""ARTURO"", ""AUGUSTUS"", ""BENNETT"", ""BERISH"", ""CADEN"", ""CHRIS"", ""CODY"", ""COREY"", ""DERRICK"", ""DEVON"", ""DONOVAN"", ""EASON"", ""EDWARD"", ""ELLIS"", ""GIOVANI"", ""HASSAN"",]
expected_output_female = [""ABBY"", ""AIZA"", ""ALISHA"", ""ANGELICA"", ""ANGIE"", ""ARIANNY"", ""ARIELA"", ""ATARA"", ""AUBREY"", ""AUTUMN"", ""AYLA"", ""BIANCA"", ""BONNIE"", ""BRIANNY"", ""CASSANDRA"", ""CELIA"", ""CHAVY"", ""CHEYENNE"", ""CORA"", ""CRISTINA""]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    if (random.random() > 0.5):
        gender = ""MALE""
        expected_output = expected_output_male
    else:
        gender = ""FEMALE""
        expected_output = expected_output_female
        
    num_to_print = random.randint(5, 20)
    output, error = autograder.run_script(""Lists3_unpopularnames.py"", [gender, num_to_print])
    lines = output.strip().split('\n')
    num_matches = autograder.compare_strings(lines, expected_output[:num_to_print])
    
    print()
    
    if len(lines) == 0:
        return 0
    elif len(lines) > len(expected_output[:num_to_print]):
        print(""Your program printed more lines than we expected"")
        return round(100 * num_matches / len(lines), 1)
    else:
        return round(100.0/len(expected_output[:num_to_print]) * num_matches, 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,1,1,1,0,0,1,0,1,0,1,1,0,0,1,0,0,0,,"
import csv

def get_least_popular_names(gender, x):
    names = []
    with open('names.csv', 'r') as file:
        reader = csv.reader(file)
        next(reader)  # skip header
        for row in reader:
            if row[0] == gender:
                names.append(row[2])
        names.sort(key=lambda n: int(row[3]))
        return names[:x]

gender = input(""Enter the gender (MALE or FEMALE): "")
x = int(input(""Enter the number of least popular names: ""))

least_popular_names = get_least_popular_names(gender, x)
for name in least_popular_names:
    print(name)
",completed,0.0,"
Unit Test Returned: 0.0
"
344,534,Lists3_popularnames,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write a Python program that takes two inputs and produces two outputs. NOTE:
This problem does not require creating an additional list to solve.

The inputs from the user are:

  1. A gender, a string which will be MALE or FEMALE
  2. A threshold number for the number of times that a name was used.

Your program will compare the information from the user to the names.csv
dataset, and output two statistics as output:

  1. The count of the number of names that were used above the threshold given for the provided gender
  2. The total count of children with the high usage names and the specified gender. In other words, the sum of the number of children given names above the threshold value from input 2.



This problem makes use of the names.csv dataset, which provides a list of over
1200+ names that were given to children in 2011. Here is a typical line from
the file:

`FEMALE, HISPANIC, GIA, 21`

Each position in the line (separated by a comma) represents a different ""data
element"". Here is a key for your reference:

Gender | Ethnicity | Name | Count  
(i.e., Number of Children Assigned this Name)  
---|---|---|---  
FEMALE | HISPANIC | GIA | 21  
  


**EXAMPLES:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Inputs |

MALE

190

|

FEMALE

120

|

MALE

80  
  
Output |

1

224

|

15

2670

|

23

2740  
  



","from cs110 import autograder
import random, math, traceback


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    test_cases = dict()
    test_cases[(""FEMALE"", 120)] = ""15\n2670""
    test_cases[(""FEMALE"", 98)] = ""25\n3742""   
    test_cases[(""MALE"", 190)] = ""1\n224""
    test_cases[(""MALE"", 130)] = ""7\n1149""

    
    test_case_input = list(test_cases.keys())
    case_order = list(range(len(test_case_input)))
    
    score = 0
    i = 1
    
    for idx in case_order:
        print('\n' + '='*30)
        print(""Test Case:"", i)
        print('='*30)
        
        try: 
            output, error = autograder.run_script(""Lists3_popularnames.py"", test_case_input[case_order[idx]])        
            expected_output = test_cases[test_case_input[case_order[idx]]]
            
            lines = output.strip().split('\n')
            expected_line_1 = expected_output.strip().split('\n')[0]
            expected_line_2 = expected_output.strip().split('\n')[1]
            
            test_case_score = 0
            if len(lines) == 0:
                print(""No Output Detected. Expected:"")
                print(expected_output)
            elif len(lines) > len(expected_output.split('\n')):
                print(""Your program printed too many lines. Expected:"")
                print(expected_output)
            elif len(lines) == 2 and expected_line_1 == lines[0] and expected_line_2 == lines[1]:
                print(""CORRECT!"")
                test_case_score = 100.0 / len(test_cases)
            elif expected_line_1 in lines:
                print(""PARTIALLY CORRECT! Count of names above threshold right. Expected:"")
                test_case_score = 100.0 / len(test_cases) / 2
                print(expected_output)
            elif expected_line_2 in lines:
                print(""PARTIALLY CORRECT! Total number of children named found. Expected:"")
                test_case_score = 100.0 / len(test_cases) / 2
                print(expected_output)
            else:
                print(""INCORRECT. Expected:"")
                print(expected_output)
            
            score += test_case_score
            i += 1
        except Exception as e:
            score += 0
            i += 1
            
            print(""An ERROR Occured:"", e)
            print(traceback.print_exc())    


    return score
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':
    try:
        result = test_passed()
    except Exception as e:
        result = 0
        print(""An ERROR Occured:"", e)
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,1,1,1,0,0,0,0,1,0,1,1,0,1,1,0,0,0,,,"failed: expected an indented block after 'try' statement on line 70 (<string>, line 72)",0.0,
345,535,Lists3_lowvolume,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write a Python algorithm that opens the file and outputs the lowest (minimum)
traffic count.  Then, output the name of all streets whose traffic count is
within 2500 (inclusive) of the minimum.



This program makes use of the traffic.csv dataset. Here is a typical line from
the file:



`691,6067 North,Kimball Ave,8/15/06,15600,North Bound:7500/South Bound:8100`



As you will recall from class, each position in the line (separated by a
comma) represents a different ""data element"". Here is a key for your
reference:

ID | Address | Street | Sample Date | Total # of Passing Vehicles | # of
Vehicles by Direction  
---|---|---|---|---|---  
691 | 6067 North | Kimball Ave | 8/15/06 | 15600 | North Bound:7500/South
Bound:8100  
  
  
  
Output one street name per line.



For example, if the min traffic count is 500, and the roads within 2500 of
this value are ""Road A"", ""Road B"", ""Road C"", then your program should output:

    
    
    500  
    Road A  
    Road B  
    Road C




","from cs110 import autograder
import random, math

expected_output = [
""700"",
""Harbor Ave"",
""Woodlawn Ave"",
""Root St"",
""Calumet Ave"",
""Financial PL"",
""16th St"",
""Racine Ave"",
""60th St"",
""Wentworth Ave"",
""Parnell Ave"",
""Ashland Ave"",
""Federal St"",
""Hamlin Ave"",
""Pitney Ct"",
""109th St"",
""Loomis St"",
""Harrison St"",
""24th St"",
""La Salle St"",
""83rd Pl"",
""Homan Ave""]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    
    output, error = autograder.run_script(""Lists3_lowvolume.py"", [])    
    lines = output.split('\n')
    
    if ""700"" in lines[0]:
        score += 50.0
    
        lines = set(lines[1:])
        matches = (len(lines.intersection(expected_output)))
        score += round((matches/21)*50.0,1)
    else:
        lines = set(lines)
        matches = (len(lines.intersection(expected_output)))
        score += round((matches/22)*50.0,1)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,1,0,0,0,,"Here is a Python program that solves the problem:

```python
import csv

def get_min_traffic_count(file_name):
    with open(file_name, 'r') as file:
        reader = csv.reader(file)
        next(reader)  # skip header
        min_traffic_count = float('inf')
        streets_within_range = []
        
        for row in reader:
            traffic_count = int(row[4])
            
            if traffic_count < min_traffic_count:
                min_traffic_count = traffic_count
                
        file.seek(0)  # reset file pointer
        next(reader)  # skip header
        
        for row in reader:
            traffic_count = int(row[4])
            street_name = row[2]
            
            if traffic_count - min_traffic_count <= 2500:
                streets_within_range.append(street_name)
                
    return min_traffic_count, streets_within_range

file_name = 'traffic.csv'
min_traffic_count, streets_within_range = get_min_traffic_count(file_name)

print(min_traffic_count)

for street in streets_within_range:
    print(street)
```

The program reads the data from the ""traffic.csv"" file and first finds the minimum traffic count. Then, it goes through the data again to identify the streets whose traffic count is within 2500 of the minimum. Finally, it prints the minimum traffic count and the names of the qualifying streets.",completed,0.0,"Unit Test Returned: 0.0
"
346,536,Lists3_averagetraffic,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

This program makes use of the traffic.csv dataset. Here is a typical line from
the file:



`691,6067 North,Kimball Ave,8/15/06,15600,North Bound:7500/South Bound:8100`



  
As you will recall from class, each position in the line (separated by a
comma) represents a different ""data element"". Here is a key for your
reference:

ID | Address | Street | Sample Date | Total # of Passing Vehicles  | # of
Vehicles by Direction  
---|---|---|---|---|---  
691 | 6067 North | Kimball Ave | 8/15/06 | 15600 | North Bound:7500/South
Bound:8100  
  
  
  
Write a Python algorithm that opens the file and outputs the # of roads whose
traffic count is greater than (or equal to) the average.  For example, if you
determine that the answer is 20, your program should output:

    
    
    20




","from cs110 import autograder
import random, math

expected_output = [""525""]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(""Lists3_averagetraffic.py"", [])
    lines = output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_output)
       
    return round(num_matches * (100.0 / len(expected_output)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,,"
# Open the file for reading
with open('traffic.csv', 'r') as file:
    # Read all lines from the file
    lines = file.readlines()
    
    # Initialize variables
    total_traffic = 0
    road_count = 0
    
    # Iterate over each line
    for line in lines:
        # Split the line by comma
        data = line.split(',')
        
        # Get the total number of passing vehicles
        total_vehicles = int(data[4])
        
        # Add the total vehicles to the total traffic count
        total_traffic += total_vehicles
        
        # Get the number of vehicles by direction
        vehicles_by_direction = data[5].split('/')
        
        # Get the number of vehicles for North Bound
        north_bound = int(vehicles_by_direction[0].split(':')[1])
        
        # Get the number of vehicles for South Bound
        south_bound = int(vehicles_by_direction[1].split(':')[1])
        
        # Calculate the average number of vehicles per road
        average_vehicles = (north_bound + south_bound) / 2
        
        # Check if the total number of passing vehicles is greater than or equal to the average
        if total_vehicles >= average_vehicles:
            # Increment the road count
            road_count += 1
    
    # Output the number of roads whose traffic count is greater than or equal to the average
    print(road_count)
",completed,0.0,"Unit Test Returned: 0.0
"
347,538,Lists2_movies,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

Write a Python function called `get_movies` that takes three parameters:

  * A two-dimensional list containing movie titles and other stats (see table below for an example)
  * A rating (e.g., ""PG"", ""R"")
  * A run time (in minutes)



Title | Release Year | Rating | Run Time (minutes)  
---|---|---|---  
Star Wars: A New Hope | 1977 | PG | 121  
Star Trek: The Motion Picture | 1979 | G | 132  
Indiana Jones: Raiders of the Lost Ark | 1989 | PG | 115  
  
  
Your function should return the number of movies that have the specified
rating, and run for at least the number of minutes specified.



**EXAMPLE:**  
If the above table were contained within a list called `movie_table`, then
`get_movies(movie_table, ""PG"", 100)` should return 2.




","from cs110 import autograder
import random
try:
    import Lists2_movies
except:
    import lists2_movies as Lists2_movies

def solution(movies_table, rating, runtime):
    count = 0
    
    for row in movies_table:
        if row[2] == rating and row[3] >= runtime:
            count += 1
    
    return count

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    ratings = ['PG', 'PG-13', 'R']
    num_passed = 0
    
    for rating in ratings:
        movies_table = [
            [""Star Wars: A New Hope"", 1977, ""PG"", 121],
            [""Star Trek: The Motion Picture"", 1979, ""G"", 132],
            [""Raiders of the Lost Ark"", 1989, ""PG"", 115],
            [""Indiana Jones and the Temple of Doom"", 1984, ""PG"", 118],
            [""Indiana Jones and the Last Crusade"", 1989, ""PG-13"", 127],
            [""Serenity"", 2005, ""PG-13"", 119],
            [""Joker"", 2019, ""R"", 122],
            [""The Terminator"", 1984, ""R"", 107]
            ]
        test_table = []
        runtime = random.randint(90, 120)
        
        for j in range(random.randint(2, 5)):
            index = random.randint(0, len(movies_table)-1)
            test_table.append(movies_table[index])
            movies_table.remove(movies_table[index])
        
        print(""Testing (Rating = "" + rating + ""):\n"" + ""  Movie Table: "" + str(test_table) + ""\n"" + ""  Runtime: "" + str(runtime))
        print(""  Expecting: "" + str(solution(test_table, rating, runtime)) + ""\n  Your Function's Output: "" + str(Lists2_movies.get_movies(test_table, rating, runtime)))
        
        if solution(test_table, rating, runtime) == Lists2_movies.get_movies(test_table, rating, runtime):
            print(""PASSED!\n"")
            num_passed += 1
        else:
            print(""INCORRECT\n"")
            
    
    return (num_passed / len(ratings)) * 100.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,,"
def get_movies(movie_table, rating, run_time):
    count = 0
    for movie in movie_table:
        if movie[2] == rating and movie[3] >= run_time:
            count += 1
    return count

movie_table = [[""Star Wars: A New Hope"", 1977, ""PG"", 121], [""Star Trek: The Motion Picture"", 1979, ""G"", 132], [""Indiana Jones: Raiders of the Lost Ark"", 1989, ""PG"", 115]]

print(get_movies(movie_table, ""PG"", 100))
",completed,100.0,"2
Testing (Rating = PG):
  Movie Table: [['The Terminator', 1984, 'R', 107], ['Raiders of the Lost Ark', 1989, 'PG', 115], ['Indiana Jones and the Temple of Doom', 1984, 'PG', 118]]
  Runtime: 91
  Expecting: 2
  Your Function's Output: 2
PASSED!

Testing (Rating = PG-13):
  Movie Table: [['The Terminator', 1984, 'R', 107], ['Raiders of the Lost Ark', 1989, 'PG', 115]]
  Runtime: 118
  Expecting: 0
  Your Function's Output: 0
PASSED!

Testing (Rating = R):
  Movie Table: [['Indiana Jones and the Temple of Doom', 1984, 'PG', 118], ['Raiders of the Lost Ark', 1989, 'PG', 115], ['Indiana Jones and the Last Crusade', 1989, 'PG-13', 127], ['The Terminator', 1984, 'R', 107], ['Serenity', 2005, 'PG-13', 119]]
  Runtime: 101
  Expecting: 1
  Your Function's Output: 1
PASSED!

Unit Test Returned: 100.0
"
348,539,Lists2_golf,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

The cadet intercollegiate golf team needs some help tracking individual
performance. Create a Python algorithm that inputs repeated pairs of cadet
last-names followed by the golfers score until the word **END** (all capital
letters) is entered at the member last-name prompt.

Your algorithm should output:

  * The last name of the member with the lowest (best) score, if there are two members with the same lowest score, it should output the last name of the first person entered.
  * The percentage of members who are within 5 strokes (inclusive) of the lowest score.

There is no bound on the number of golfers that may be entered, but you may
assume that there will be at least one golfer and score entered.



**EXAMPLES:**

| **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Inputs** |  Woods  
48  
Nicklaus  
51  
Hogan  
49  
Jones  
46  
Palmer  
52  
END |  Snead  
52  
Mickelson  
48  
Nelson  
48  
END |  Player  
51  
Watson  
51  
Singh  
48  
Floyd  
49  
Normal  
54  
END  
**Output** | Jones  
80.0 | Mickelson  
100.0 | Singh  
60.0  
  



","from cs110 import autograder
import random, statistics

solution_name = ""Lists2_golf.py""

# random_names = ['Mcllroy', 'Koepka', 'Rahm', 'Woods', 'Thomas', 'Johnson', 'Cantlay', 'Simpson']
# 
# def get_random_name():
#     global random_names
#     name = random_names[random.randint(0, len(random_names)-1)]
#     random_names.remove(name)
#     return name
# 
# 
# def solution(data):
#     min_value = 99999
#     min_name = """"
#     count = 0
#     
#     for row in data:
#         if row[1] < min_value:
#             min_value = row[1]
#             min_name = row[0]
#     
#     for row in data:
#         if row[1] <= min_value + 5:
#             count += 1
# 
#     return min_name, (count / len(data) * 100.0)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    test_cases = dict()
    test_cases[(""Simpson"", 70, ""Rahm"", 83, ""END"")] = ""Simpson\n50.0\n""
    test_cases[(""Cantlay"", 80, ""Mcllroy"", 65, ""Rahm"", 66, ""END"")] = ""Mcllroy\n66.7\n""
    test_cases[(""Koepka"", 74, ""Johnson"", 85, ""Thomas"", 84, ""Simpson"", 86, ""END"")] = ""Koepka\n25.0\n""
    test_cases[(""Mcllroy"", 90, ""Koepka"", 80, ""Woods"", 84, ""Cantlay"", 72, ""Simpson"", 83, ""END"")] = ""Cantlay\n20.0\n""
    
    test_case_input = list(test_cases.keys())
    case_order = list(range(len(test_case_input)))
    random.shuffle(case_order)
    
    score = 0

    test_case_num = 1
    for idx in case_order:
        print('\n' + '='*30)
        print(""Test Case:"", test_case_num)
        print('='*30)
        output, error_message = autograder.run_script(solution_name, test_case_input[case_order[idx]])
        expected_output = test_cases[test_case_input[case_order[idx]]]  # solution(test_case_input[case_order[0]][0], test_case_input[case_order[0]][1], test_case_input[case_order[0]][2])
        
        lines = output.strip().split('\n')
        expected_lines = expected_output.strip().split('\n')

        if len(lines) == 1:
            try:
                student_output = float(lines[0])
                if abs(student_output - float(expected_lines[1])) < 1.0:
                    print(""PARTIALLY CORRECT. Only Percentage Correct, Expected:"")
                    score += 100.0 / len(test_cases) / 2
            except:          
                if lines[0] == expected_lines[0]:
                    print(""PARTIALLY CORRECT. Only Name Correct, Expected:"")
                    score += 100.0 / len(test_cases) / 2               
                else:
                    print(""INCORRECT: Expected the following:"")
            print(expected_output)         
        elif len(lines) == 2:
            name_check_passed = lines[0] == expected_lines[0]
            try:
                percent_check_passed = abs(float(lines[1]) - float(expected_lines[1])) < 1.0
            except:
                percent_check_passed = False
                print(""Second Output NOT A VALID NUMBER"")
            
            if name_check_passed and percent_check_passed:
                print(""CORRECT Name and Percentage!"")
                score += 100.0 / len(test_cases)
            else:
                if name_check_passed:
                    print(""PARTIALLY CORRECT. Only Name Correct, Expected:"")
                    score += 100.0 / len(test_cases) / 2
                elif percent_check_passed:
                    print(""PARTIALLY CORRECT. Only Percentage Correct, Expected:"")
                    score += 100.0 / len(test_cases) / 2
                else:
                    print(""INCORRECT: Expected the following:"")
                print(expected_output)
        else:
            if len(lines) < 2:
                print(""Not Enough Lines. Expected:"")
            else:
                print(""INCORRECT.  Expected the following:"")
            print(expected_output)
        
        test_case_num += 1
    
    return score
    
    # Generates Random Values
#     num_inputs = random.randint(2, 5)
#     input_list = []
#     data = []
#         
#     for i in range(num_inputs):
#         new_row = [get_random_name(), random.randint(70, 90)]
#         input_list.append(new_row[0])
#         input_list.append(new_row[1])
#         data.append(new_row)
#     input_list.append(""END"")
#     
#     lowest_name, percent = solution(data)
#     
#     # Runs the Script
#     output, error_message = autograder.run_script(""Lists2_golf.py"", input_list)
#     lines = output.strip().split('\n')
# 
#     # Checks Min
#     if len(lines) < 2:
#         print(""Number of output lines does not match"")
#         return 0
#     else:
#         if not lowest_name == lines[0]:
#             print(""Incorrect Name.  Expected "" + str(lowest_name))
#             return 0
#         if not autograder.equals(percent, lines[1]):
#             print(""Incorrect Percent.  Expected "" + str(percent))
#             return 50
#         
#     print(""PASSED!"")
#     return 100
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,,"

# Initialize an empty dictionary to store the golfers' scores
scores = {}

# Prompt the user for input
name = input(""Enter the golfer's last name (or 'END' to finish entering): "")

# Loop until the user enters 'END'
while name != 'END':
    score = int(input(""Enter the golfer's score: ""))
    
    # Add the golfer's score to the dictionary
    if name in scores:
        scores[name].append(score)
    else:
        scores[name] = [score]
    
    name = input(""Enter the golfer's last name (or 'END' to finish entering): "")

# Find the golfer with the lowest score
lowest_score = min([min(scores[name]) for name in scores])

# Find the number of golfers within 5 strokes of the lowest score
within_5 = sum([any(abs(score - lowest_score) <= 5 for score in scores[name]) for name in scores])

# Find the last name of the first golfer with the lowest score
lowest_score_golfer = [name for name in scores if min(scores[name]) == lowest_score][0]

# Print the result
print(lowest_score_golfer)
print(within_5 / len(scores) * 100)

```
",completed,0.0,"
==============================
Test Case: 1
==============================
INCORRECT: Expected the following:
Koepka
25.0


==============================
Test Case: 2
==============================
INCORRECT: Expected the following:
Cantlay
20.0


==============================
Test Case: 3
==============================
INCORRECT: Expected the following:
Simpson
50.0


==============================
Test Case: 4
==============================
INCORRECT: Expected the following:
Mcllroy
66.7

Unit Test Returned: 0
"
349,540,Lists2_credit,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

The Air Academy Federal Credit Union wants to identify its best customers and
comes to you for help. To help with the accounting, create a Python program
which inputs repeated pairs of member last-names followed by account balances
until the word **DONE** (all capital letters) is entered at the member last-
name prompt.

Your program should output:

  * The last name of the member with the highest account value, if there are two members with the same highest account value it should output the name of the first person entered.
  * It will then output the percentage members who are within $10,000 (inclusive) of the highest account value.

There is no bound on the number of members that may be entered, but you may
assume that there will be at least one member and balance entered.



**EXAMPLE:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Inputs |  Rockefeller  
120000  
Chase  
115000  
Morgan  
110000  
Gates  
90000  
Jobs  
65000  
DONE  |  Jobs  
150000  
Chase  
150000  
Kennedy  
40000  
DONE |  Morgan  
145000  
Chase  
135000  
Kennedy  
142000  
Gates  
145000  
DONE  
Output | Rockefeller  
60.0 | Jobs  
66.66666666666666 | Morgan  
100.0  
  



","from cs110 import autograder
import random, statistics

random_names = ['Gates', 'Bezos', 'Zuckerberg', 'Ellison', 'Page', 'Brin', 'Huateng', 'Dell', 'Musk', 'Allen']

def get_random_name():
    global random_names
    name = random_names[random.randint(0, len(random_names)-1)]
    random_names.remove(name)
    return name


def solution(data):
    highest_value = -99999
    highest_name = """"
    count = 0
    
    for row in data:
        if row[1] > highest_value:
            highest_value = row[1]
            highest_name = row[0]
    
    for row in data:
        if row[1] >= highest_value - 10000:
            count += 1

    return highest_name, (count / len(data) * 100.0)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_inputs = random.randint(5, 7)
    input_list = []
    data = []
        
    for i in range(num_inputs):
        new_row = [get_random_name(), random.randint(5000, 35000)]
        input_list.append(new_row[0])
        input_list.append(new_row[1])
        data.append(new_row)
    input_list.append(""DONE"")
    
    highest_balance, percent = solution(data)
    
    # Runs the Script
    output, error_message = autograder.run_script(""Lists2_credit.py"", input_list)
    lines = output.strip().split('\n')

    # Checks Min
    if len(lines) < 2:
        print(""Number of output lines does not match"")
        return 0
    else:
        if not highest_balance == lines[0]:
            print(""Incorrect Highest Balance.  Expected "" + str(highest_balance))
            return 0
        if not autograder.equals(percent, lines[1]):
            print(""Incorrect Percent.  Expected "" + str(percent))
            return 50
        
    print(""PASSED!"")
    return 100
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)








# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,,"
done = False
members = {}
balance_limit = 10000

while not done:
    name = input(""Enter member last name: "")
    if name == ""DONE"":
        done = True
    else:
        balance = int(input(""Enter account balance: ""))
        members[name] = balance

highest_balance_member = max(members, key=members.get)
highest_balance = members[highest_balance_member]
within_limit_count = sum(balance >= highest_balance - balance_limit and balance <= highest_balance for balance in members.values())
within_limit_percentage = (within_limit_count / len(members)) * 100

print(highest_balance_member)
print(within_limit_percentage)
```
Note: The solution assumes that the inputs will always be in the correct format and that there will be at least one member and balance entered.",completed,0.0,"Number of output lines does not match
Unit Test Returned: 0
"
350,541,Lists2_100m,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

You have been asked by your unit to record 100m dash times for an upcoming
USAFA track meet. Create a Python algorithm that first asks for the number of
cadets, and then asks for that many cadet last names, squadrons, and 100m dash
times (in that order).

Your program should output:

  * The cadet squadron containing the cadet with the fastest 100m dash time followed by their 100m dash time. If there is a tie for fastest 100m dash times, you should output the squadron number and time for the LAST cadet entered who had that fastest time.
  * The number of cadets whose 100m dash time was faster than the average.

There is no bound on the number of cadets that may be entered, but you may
assume that there will be at least one cadet and track time entered.



**EXAMPLES:**

| **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Inputs** |  4  
Thorpe  
13  
10.2  
Owens  
22  
9.93  
Mathias  
19  
9.99  
Rudolph  
39  
10.23  |  3  
Johnson  
7  
10.3  
Tyus  
14  
10.02  
Lewis  
40  
9.67 |  2  
Joyner  
1  
10.08  
Kersee  
29  
9.97  
**Output** | 22  
9.93  
2 | 40  
9.67  
1 | 29  
9.97  
1


","from cs110 import autograder
import random, statistics

random_names = ['Alice', 'Bob', 'Courtney', 'Devon', 'Frank', 'Genie']

def get_random_name():
    global random_names
    name = random_names[random.randint(0, len(random_names)-1)]
    random_names.remove(name)
    return name

def solution(data):
    fastest_time = 99999
    fastest_squadron = 0
    total = 0
    count = 0
    
    for row in data:
        total += row[2]
        if row[2] <= fastest_time:
            fastest_time = row[2]
            fastest_squadron = row[1]
            
    average = total / len(data)
    
    for row in data:
        if row[2] <= average:
            count += 1
    
    return fastest_squadron, fastest_time, count


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_inputs = random.randint(2, 5)
    input_list = [num_inputs]
    data = []
        
    for i in range(num_inputs):
        new_row = [get_random_name(), random.randint(1, 40), round(random.uniform(12, 18), 1)]
        input_list.append(new_row[0])
        input_list.append(new_row[1])
        input_list.append(new_row[2])
        data.append(new_row)
    
    fastest_squadron, fastest_time, count = solution(data)
    
    # Runs the Script
    output, error_message = autograder.run_script(""Lists2_100m.py"", input_list)
    lines = output.strip().split('\n')

    # Checks Min
    if len(lines) != 3:
        print(""Number of output lines does not match"")
        return 0
    else:
        if not autograder.equals(fastest_squadron, lines[0]):
            print(""Incorrect Squadron.  Expected "" + str(fastest_squadron))
            return 0
        if not autograder.equals(fastest_time, lines[1]):
            print(""Incorrect Time.  Expected "" + str(fastest_time))
            return 33
        if not autograder.equals(count, lines[2]):
            print(""Incorrect Count.  Expected "" + str(count))
            return 67
        
    print(""PASSED!"")
    return 100
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)








# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,"
def record_track_times():
    num_cadets = int(input(""Enter the number of cadets: ""))
    
    cadets = []
    for i in range(num_cadets):
        last_name = input(""Enter last name: "")
        squadron = int(input(""Enter squadron: ""))
        track_time = float(input(""Enter 100m dash time: ""))
        
        cadets.append((last_name, squadron, track_time))
    
    fastest_time = None
    fastest_squadron = None
    num_faster_than_average = 0
    
    for cadet in cadets:
        if fastest_time is None or cadet[2] <= fastest_time:
            fastest_time = cadet[2]
            fastest_squadron = cadet[1]
        
        avg_time = sum([c[2] for c in cadets]) / len(cadets)
        
        if cadet[2] < avg_time:
            num_faster_than_average += 1
    
    print(fastest_squadron)
    print(fastest_time)
    print(num_faster_than_average)

record_track_times()
","failed: must be real number, not str",0.0,
351,542,Lists1_pftscores,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

You are provided a list of PFT scores, already in the lab template, in a
variable `pft_scores` arranged in no particular order.

Write a Python program that obtains a new score from the user. If the score is
valid (above zero and no greater than 500), add it to the list and print out
the following two stats in this order:

1\. **average score  ** HINT: use the functions `len()` and `sum()` on your
list to find the average

2\. **range of scores** , the difference between the largest score and
smallest score. HINT: use the functions `min()` and `max()` on your list to
find the range

If the score is invalid (below zero or above 500), instead print:  ""Invalid
score provided"".



**EXAMPLE:**

| **Example 1** | **Example 2** | **Example 3**  
---|---|---|---  
**Input** | -5 | 328 | 65  
**Outputs** | Invalid score provided |

291.8

403

|

274.26666666666665

408  
  




  




","from cs110 import autograder
import random, math
#import Lists1_pftscores

pft_scores = [243, 394, 143, 288, 303, 473, 325, 273, 284, 198, 70, 289, 437, 329]


def solution(new_num):
    result = ''
    
    # Append number to num_list ONLY IF IT IS A valid number > 0
    if new_num >= 0 and new_num <= 500:

        temp_scores = pft_scores.copy()
        temp_scores.append(new_num)
        
        average = sum(temp_scores) / len(temp_scores)
        num_range = max(temp_scores) - min(temp_scores)
        
        result += str(average) + '\n'
        result += str(num_range) + '\n'
    else:
        result += ""Invalid score provided""
        
    return result

def test_passed():
    
    # 5 test strategies
    # 1) invalid, out of range low
    # 2) invalid, out of range high
    # 3) rand num that doesn't affect range
    # 4) rand num lower than current lowest, but valid
    # 5) rand num higher than current highest, but valid
    
    min_score = min(pft_scores)
    max_score = max(pft_scores)
    
    test_vals = []
    
    # random_low_invalid
    test_vals.append(random.randint(-1010,-1))
    #random_high_invalid
    test_vals.append(random.randint(501,5000))
    #random_mid_num
    test_vals.append(random.randint(min_score, max_score))
    #random_low
    test_vals.append(random.randint(0, min_score-1))
    #random_high
    test_vals.append(random.randint(max_score + 1, 500))
    
    i = 0
    total_score = 0.0
    
    for val in test_vals:
        print('-'*10 + ""Test #"" + str(i) + '-'*10)
        
        output, error_message = autograder.run_script(""Lists1_pftscores.py"", [val])
        expected_output = solution(val)
        
        lines = output.strip().split('\n')
        
        if expected_output.strip() == ""Invalid score provided"":
            if output.strip() == expected_output.strip():
                print(""CORRECT"")
                total_score += 100 / len(test_vals)
            else:
                print(""INCORRECT. Expected the following:"")
                print(expected_output)
        else:
            expected_lines = expected_output.strip().split('\n')
            
            if autograder.equals(float(expected_lines[0]), float(lines[0]), 0.99) and autograder.equals(float(expected_lines[1]), float(lines[1]), 0.99):
                print(""CORRECT"")
                total_score += 100 / len(test_vals)
            else:
                print(""INCORRECT. Expected the following:"")
                print(expected_output)
            
        print()
        i += 1
    
    return total_score

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,,"
pft_scores = [289, 305, 250, 225, 270]

score = int(input(""Enter a new score: ""))

if score > 0 and score <= 500:
    pft_scores.append(score)
    average_score = sum(pft_scores) / len(pft_scores)
    range_of_scores = max(pft_scores) - min(pft_scores)
    print(average_score)
    print(range_of_scores)
else:
    print(""Invalid score provided"")
",completed,40.0,"----------Test #0----------
CORRECT

----------Test #1----------
CORRECT

----------Test #2----------
INCORRECT. Expected the following:
282.0
403


----------Test #3----------
INCORRECT. Expected the following:
273.1333333333333
425


----------Test #4----------
INCORRECT. Expected the following:
302.06666666666666
412


Unit Test Returned: 40.0
"
352,543,Lists1_listrange,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

Write a Python program that obtains two whole numbers that represent the start
and stop values for a range of numbers. You may assume the second number is
always greater than the first.

Using these start and stop values, print the two following items in order:

1.  Print a list that starts at the start value and ends at (the list contains) the stop value

**HINT** : Use `range()` to accomplish this. In order to print the result from
range() as a list, surround it with list(), `list(range(#,#))`, like you
surround input() with int() or float(), `int(input())`.

2.  Print the size (how many numbers are contained) of that list



**EXAMPLE:**

| **Example 1** | **Example 2**  
---|---|---  
**Inputs** |

1

10

|

1023

1029  
  
**Outputs** | [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  
10 |

[1023, 1024, 1025, 1026, 1027, 1028, 1029]  
7


","from cs110 import autograder
import random, math


def solution(test_start, test_stop):
    result = []
    
    result.append(list(range(test_start, test_stop+1)))
    result.append(len(range(test_start, test_stop+1)))
        
    return result

def test_passed():
    
    # 5 test strategies
    test_vals = []
    
    for j in range(5):
        test_val_start = random.randint(0,2048)
        test_val_stop = test_val_start + random.randint(9,16)
        test_vals.append((test_val_start, test_val_stop))
  
    i = 0
    total_score = 0.0
    
    for val in test_vals:
        print('-'*10 + ""Test #"" + str(i) + '-'*10)
        
        output, error_message = autograder.run_script(""Lists1_listrange.py"", [val[0], val[1]])
        expected_output = solution(val[0], val[1])
        
        lines = output.strip().split('\n')
        
        idx = 0
        count_correct_lines = 0
        if len(lines) != 2:
            print(""Missing/Extra Output - Expecting a list and then its length on next line"")
            
        for line in lines:
            if line.strip() == str(expected_output[idx]): # and autograder.equals(int(lines[1]), expected_output[1]):
                total_score += 50.0 / len(test_vals)
                count_correct_lines += 1
            else:
                print(""INCORRECT Value:"", line)
                print(""Expecting Value:"", expected_output[idx])
            
            idx += 1
            
        if count_correct_lines == 2:
            print(""CORRECT"")
        print()
        i += 1
    
    return total_score

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
start = int(input())
stop = int(input())

lst = list(range(start, stop+1))
print(lst)
print(len(lst))
",completed,100.0,"----------Test #0----------
CORRECT

----------Test #1----------
CORRECT

----------Test #2----------
CORRECT

----------Test #3----------
CORRECT

----------Test #4----------
CORRECT

Unit Test Returned: 100.0
"
353,544,Lists1_fastestcar,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

Write a Python program with the definition of a new function named fastest_car
and takes two lists of car info as parameters. The function will then
**return** the car model name with the higher top speed or ""Same speed"" if the
top speeds are the same.

The two parameters to the function are both a list with the same 3 types of
elements, as follows:

  
| **Car Model** | **Cost** | **Top Speed**  
---|---|---|---  
**Value** | Ford Mustang | 27205.00 | 163  
  


| **Car Model** | **Cost** | **Top Speed**  
---|---|---|---  
**Value** | Chevy Corvette | 66400.00 | 194  
  


**EXAMPLE** :

| **Example**  
---|---  
**Input Parameters to** `fastest_car()` |

`fastest_car([""Ford Mustang"", 27205.00, 163], [""Chevy Corvette"", 66400.00,
194])`  
  
**Outputs** | Chevy Corvette


","from cs110 import autograder
import random, math
try:
    import Lists1_fastestcar as student_module
except:
    try:
        import lists1_fastestcar as student_module
    except Exception as e:
        print(""Import ERROR:"", e)

def solution(car1, car2):

    if car1[2] > car2[2]:
        return car1[0]
    elif car2[2] > car1[2]:
        return car2[0]
    else:
        return ""Same speed""

def test_passed():
    
    # 5 test strategies
    cars_list = []
    cars_list.append([""Honda Civic"", 18983.20, 127])
    cars_list.append([""Acura NSX"", 157500.39, 191])
    cars_list.append([""VW Golf GTI"", 28595.83, 130])
    cars_list.append([""Ford F-150 Raptor"", 45290.82, 107])
    cars_list.append([""Subaru BRZ"", 28955.38, 140])
    cars_list.append([""Mazda Mazdaspeed3"", 17424.30, 130])
    
    test_vals = []
    
    index_permutations = []
    # build all possible permutations except those with the same vehicle
    for i in range(len(cars_list)):
        for j in range(len(cars_list)):
            if i != j:
                index_permutations.append((i,j))
    
    # randomly choose 4 of the permutations
    for i in range(4):
        car_idx_pair = index_permutations[random.randint(0,len(index_permutations)-1)]
        first_car_idx = car_idx_pair[0]
        second_car_idx = car_idx_pair[1]
        
        index_permutations.remove(car_idx_pair)
        
        test_vals.append([cars_list[first_car_idx], cars_list[second_car_idx]])

    # same speed
    test_vals.append((cars_list[2], cars_list[5]))
  
    i = 0
    total_score = 0.0
    
    for val in test_vals:
        print('-'*10 + ""Test #"" + str(i) + '-'*10)
        
        try:
            output = student_module.fastest_car(val[0], val[1])
            expected_output = solution(val[0], val[1])

            print(""Your Program's Output:"")
            print(output)

            if output == None:
                print(""INCORRECT - Your function did not return anything. \nExpected:"")
                print(str(expected_output))
            elif output.strip() == expected_output.strip():
                print(""CORRECT"")
                total_score += 100.0 / len(test_vals)
            else:
                print(""INCORRECT - Expected:"")
                print(str(expected_output))
        except Exception as e:
            print(""There was an error when testing your solution."")
            print(e)
            
        print()
        i += 1
    
    return total_score

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,,"
def fastest_car(car1, car2):
    if car1[2] > car2[2]:
        return car1[0]
    elif car1[2] < car2[2]:
        return car2[0]
    else:
        return ""Same speed""

result = fastest_car([""Ford Mustang"", 27205.00, 163], [""Chevy Corvette"", 66400.00, 194])
print(result)
",completed,100.0,"Chevy Corvette
----------Test #0----------
Your Program's Output:
Acura NSX
CORRECT

----------Test #1----------
Your Program's Output:
Subaru BRZ
CORRECT

----------Test #2----------
Your Program's Output:
VW Golf GTI
CORRECT

----------Test #3----------
Your Program's Output:
Subaru BRZ
CORRECT

----------Test #4----------
Your Program's Output:
Same speed
CORRECT

Unit Test Returned: 100.0
"
354,545,IterLogic2_timestable,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 




**PROBLEM STATEMENT:  
** Write an algorithm that asks the user for a positive number and then
outputs the multiplication table of that number 1-10.



**EXAMPLES:**

  | Example 1 | Example 2  
---|---|---  
Inputs | 3 | 9  
Outputs |

3  
6  
9  
12  
15  
18  
21  
24  
27  
30

| 9  
18  
27  
36  
45  
54  
63  
72  
81  
90  
  



","from cs110 import autograder
import random, math

def solution(multiple):
    result = ''
    i = 1
    
    while i <= 10:
        result += str(i * multiple) + ""\n""
        i += 1
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_multiple = random.randint(1, 20)

    output, error_message = autograder.run_script(""IterLogic2_timestable.py"", [random_multiple])
    expected_output = solution(random_multiple)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)











# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"INCORRECT.  Expected the following:
3
6
9
12
15
18
21
24
27
30

Unit Test Returned: 0
"
355,546,IterLogic2_printchars,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** Write a Python algorithm that asks the users for two ASCII characters
(e.g., 'a', 'z'), and prints all of the characters between them (inclusive).

  * If the first character has a lower ASCII value than the second (e.g., 'a' - 'z'), print out the letters in ascending order.
  * Alternatively, if the second letter has a lower ASCII value, print out the letters in descending order.



**HINTS:**

  * Use the `ord()` function to convert a character into an integer:  
`ord('a')` returns 141  
  

  * Use the `chr()` function to convert an integer back into a character:  
`chr(142)` returns 'b'



**EXAMPLES:**

  | Example 1 | Example 2  
---|---|---  
Inputs | a  
c | f  
a  
Outputs |

a  
b  
c

| f  
e  
d  
c  
b  
a


","from cs110 import autograder
import random, math

def solution(start_char, end_char):
    result = ''
    
    start_char = ord(start_char)
    end_char = ord(end_char)
    
    if start_char < end_char:
        for i in range(start_char, end_char+1, 1):
            result += chr(i) + '\n'
    else:
        for i in range(start_char, end_char-1, -1):
            result += chr(i) + '\n'

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    print(""# ------------------------------------------"")
    print(""# Test 1:  First letter lower than second"")
    print(""# ------------------------------------------"")
    start_char = chr(random.randint(65, 85))
    end_char   = chr(random.randint(ord(start_char), 90))

    output, error_message = autograder.run_script(""IterLogic2_printchars.py"", [start_char, end_char])
    expected_output = solution(start_char, end_char)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT\n"")
        score += 50
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
        
    
    print(""# ------------------------------------------"")
    print(""# Test 2:  First letter higher than second"")
    print(""# ------------------------------------------"")
    start_char = chr(random.randint(85, 90))
    end_char   = chr(random.randint(65, 84))

    output, error_message = autograder.run_script(""IterLogic2_printchars.py"", [start_char, end_char])
    expected_output = solution(start_char, end_char)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT\n"")
        score += 50
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
first_char = input(""Enter the first character: "")
second_char = input(""Enter the second character: "")

if ord(first_char) < ord(second_char):
    for i in range(ord(first_char), ord(second_char)+1):
        print(chr(i))
else:
    for i in range(ord(first_char), ord(second_char)-1, -1):
        print(chr(i))
",completed,100.0,"# ------------------------------------------
# Test 1:  First letter lower than second
# ------------------------------------------
CORRECT

# ------------------------------------------
# Test 2:  First letter higher than second
# ------------------------------------------
CORRECT

Unit Test Returned: 100
"
356,547,IterLogic2_football,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** In, Python, write an algorithm that first asks the user how many football
players they wish to enter statistics for and then gets that many yearly
passing totals for each player. Output how many of those players that had more
than 5000 passing yards in a year. Also your algorithm will output the average
yardage per year as well as the minimum yardage entered, in that order. You
can assume there is at least one player's yardage to input.



**EXAMPLES:**

  | Example 1 | Example 2 | Example 3  
---|---|---|---  
**Inputs** | 6  
4924  
4442  
5117  
2700  
1990  
4399 | 5  
2305  
4209  
5100  
5109  
3800 | 4  
4200  
2709  
3757  
2976  
**Outputs** | 1  
3928.6666666666665  
1990 | 2  
4104.6  
2305 | 0  
3410.5  
2709


","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    num_entries = random.randint(1, 6)
    num_above_5000 = random.randint(0, num_entries)
    list_of_values = [num_entries]
    
    for i in range(num_entries):
        if i < num_above_5000:
            list_of_values.append(random.randint(5001, 8000))
        elif i == num_above_5000:
            list_of_values.append(5000)
        else:
            list_of_values.append(random.randint(1, 5000))
    
    average = sum(list_of_values[1:])/num_entries
    min_value = min(list_of_values[1:])
    
    output, error_message = autograder.run_script(""IterLogic2_football.py"", list_of_values)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if len(lines) >= 1 and autograder.equals(lines[0], num_above_5000):
        print(""Number Above 5000 Looks Good"")
        score += 33
    else:
        print(""Number Above 5000 is Incorrect (or Missing)"")
    
    if len(lines) >= 2 and autograder.equals(lines[1], average):
        print(""Average Looks Good"")
        score += 33
    else:
        print(""Average is Incorrect (or Missing)"")
    
    if len(lines) >= 3 and autograder.equals(lines[2], min_value):
        print(""Min Value Looks Good"")
        score += 34
    else:
        print(""Min Value is Incorrect (or Missing)"")
        
    return score
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,"
# Get the number of players from the user
num_players = int(input(""How many football players do you wish to enter statistics for? ""))

passing_yards = []  # List to store the passing yardage for each player

# Get the passing yards for each player
for i in range(num_players):
    yards = int(input(""Enter the passing yardage for player {}: "".format(i+1)))
    passing_yards.append(yards)

# Count the number of players with more than 5000 passing yards
num_players_above_5000 = sum(yard > 5000 for yard in passing_yards)

# Calculate the average yardage per year
average_yardage = sum(passing_yards) / num_players

# Find the minimum yardage entered
min_yardage = min(passing_yards)

# Output the results
print(""Number of players with more than 5000 passing yards: "", num_players_above_5000)
print(""Average yardage per year: "", average_yardage)
print(""Minimum yardage entered: "", min_yardage)
```
",completed,0.0,"Number Above 5000 is Incorrect (or Missing)
Average is Incorrect (or Missing)
Min Value is Incorrect (or Missing)
Unit Test Returned: 0
"
357,548,IterLogic2_counting,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 




**PROBLEM STATEMENT:  
** Write a Python algorithm that gets three numbers from the user, X, Y, and
Z. Then have the algorithm output all the numbers from X to Y (inclusive),
counting by Z. You may assume that Z is non-zero.



**EXAMPLES:**

  | Example 1 | Example 2 | Example 3  
---|---|---|---  
**Inputs** | 1  
5  
1 | -5  
-10  
-3 | 15  
15  
100  
**Outputs** | 1  
2  
3  
4  
5 | -5  
-8 | 15


","from cs110 import autograder
import random, math

# def solution(random_start, random_end, random_increment):
#     result = ''
# 
#     for i in range(random_start, random_end+1, random_increment):
#         result += str(i) + ""\n""
#         print(""Result adding:"", i)
# 
#     return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_start = random.randint(0, 10)
    random_end = random.randint(50, 100)
    random_increment = random.randint(2, 9)
    
    test_cases = dict()
    test_cases[(42, 47, 1)] = ""42\n43\n44\n45\n46\n47\n""
    test_cases[(8, 92, 7)] = ""8\n15\n22\n29\n36\n43\n50\n57\n64\n71\n78\n85\n92\n""
    test_cases[(5, 62, 8)] = ""5\n13\n21\n29\n37\n45\n53\n61\n""
    test_cases[(10, 64, 9)] = ""10\n19\n28\n37\n46\n55\n64\n""
    test_cases[(5, -7, -2)] = ""5\n3\n1\n-1\n-3\n-5\n-7\n""
    
    test_case_input = list(test_cases.keys())
    case_order = list(range(len(test_case_input)))
    random.shuffle(case_order)
    
    score = 0

    i = 1
    for idx in case_order:
        print('\n' + '='*30)
        print(""Test Case:"", i)
        print('='*30)
        output, error_message = autograder.run_script(""IterLogic2_counting.py"", test_case_input[case_order[idx]])
        expected_output = test_cases[test_case_input[case_order[idx]]]  # solution(test_case_input[case_order[0]][0], test_case_input[case_order[0]][1], test_case_input[case_order[0]][2])
        
        lines = output.strip().split('\n')
        last_line = lines[len(lines)-1]

        if output.strip() == expected_output.strip():
            print(""CORRECT"")
            score += 20
        else:
            print(""INCORRECT.  Expected the following:"")
            print(expected_output)
        
        i += 1
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
X = int(input(""Enter X: ""))
Y = int(input(""Enter Y: ""))
Z = int(input(""Enter Z: ""))

for i in range(X, Y+1, Z):
    print(i)
",completed,80.0,"
==============================
Test Case: 1
==============================
CORRECT

==============================
Test Case: 2
==============================
CORRECT

==============================
Test Case: 3
==============================
CORRECT

==============================
Test Case: 4
==============================
INCORRECT.  Expected the following:
5
3
1
-1
-3
-5
-7


==============================
Test Case: 5
==============================
CORRECT
Unit Test Returned: 80
"
358,549,IterLogic2_coordinates,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** Write a Python algorithm that prints all the coordinates in a coordinate
plane, given two corners. Your program should get four inputs from the user:

  * the starting x-coordinate,
  * the ending x-coordinate,
  * the starting y-coordinate, and
  * the ending y-coordinate.

Your program will then print out all of the coordinates in x y order
(separating coordinates with a space), listing all of the coordinates in the
x-axis before incrementing y. You may assume that the ending coordinate is
never less than the starting coordinate.  

For example, your algorithm would print out:  
1 2  
2 2  
3 2  
4 2  
5 2  
6 2  
1 3  
2 3  
3 3  
4 3  
5 3  
6 3  
. . . and so on



**HINTS:**

  * Write a loop that first prints all of the x coordinates from start to end
  * Use a nested loop to print all of the y coordinates from start to end



**EXAMPLES:**

  | **Example 1** | **Example 2**  
---|---|---  
**Inputs** | 0  
1  
0  
1 | 0  
2  
0  
1  
**Outputs** | 0 0  
1 0  
0 1  
1 1 | 0 0  
1 0  
2 0  
0 1  
1 1  
2 1  
  



","from cs110 import autograder
import random, math

def solution(start_x, end_x, start_y, end_y):
    result = ''

    for y in range(start_y, end_y+1):
        for x in range(start_x, end_x+1):
            result += str(x) + "" "" + str(y) + ""\n""

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    start_x = random.randint(-2, -1)
    end_x = random.randint(1, 2)
    start_y = random.randint(-3, -1)
    end_y = random.randint(1, 3)

    output, error_message = autograder.run_script(""IterLogic2_coordinates.py"", [start_x, end_x, start_y, end_y])
    expected_output = solution(start_x, end_x, start_y, end_y)
    
    lines = output.strip().split('\n')
    num_matches = autograder.compare_strings(lines, expected_output.strip().split('\n'))

    return 100 * (num_matches / len(lines))

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,,"
start_x = int(input(""Enter the starting x-coordinate: ""))
end_x = int(input(""Enter the ending x-coordinate: ""))
start_y = int(input(""Enter the starting y-coordinate: ""))
end_y = int(input(""Enter the ending y-coordinate: ""))

for x in range(start_x, end_x+1):
  for y in range(start_y, end_y+1):
    print(x, y)
",completed,20.0,"Unit Test Returned: 20.0
"
359,550,IterLogic2_class2017,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** In Python, write an algorithm that first asks the user how many cadets to
input and then gets that many cadet class years from the user. Output how many
of those cadets were in the class of 2017. You can assume there is at least
one cadet to enter.

**EXAMPLES:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Inputs | 4  
2014  
2016  
2017  
2017 | 5  
2015  
2017  
2014  
2014  
2017 | 4  
2014  
2016  
2014  
2014  
Outputs | 2 | 3 | 0


","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    num_entries = random.randint(1, 6)
    num_in_2017 = random.randint(0, num_entries)
    list_of_values = [num_entries]
    
    for i in range(num_entries):
        if i < num_in_2017:
            list_of_values.append(2017)
        else:
            list_of_values.append(random.randint(2018, 2024))
        
    output, error_message = autograder.run_script(""IterLogic2_class2017.py"", list_of_values)
    
    lines = output.strip().split('\n')

    if len(lines) >= 1 and autograder.equals(lines[0], num_in_2017):
        print(""CORRECT"")
        score += 100
    else:
        print(""Expected"", num_in_2017)
        
    return score
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,"
num_cadets = int(input(""How many cadets to input? ""))
cadet_years = []

for _ in range(num_cadets):
    year = int(input(""Enter cadet class year: ""))
    cadet_years.append(year)

count = cadet_years.count(2017)
print(count)
","failed: must be real number, not str",0.0,
360,551,IterLogic1_waittimes,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write an algorithm that lets the user input the wait times for various
rides at an amusement park (in minutes) until he/she types the value -999.
Output the shortest waiting time, followed by the number of waiting times that
are over 30 minutes.

**EXAMPLE:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Inputs |

90  
30  
31  
-999

|

35  
15  
90  
120  
15  
-999

|

15  
15  
10  
5  
-999  
  
Outputs | 30  
2 | 15  
3 | 5  
0


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0.0
    
    possible_tests = [[30, 45, 15, 5, 5, -999], [15, 30, 31, 29, 120, 90, -999]]
    possible_output = [[5, 1], [15, 3]]
    
    # Generates a Random Test
    random_index = random.randint(0, len(possible_tests)-1)
    random_test = possible_tests[random_index]
    expected_output = possible_output[random_index]
            
    output, error = autograder.run_script(""IterLogic1_waittimes.py"", random_test)
    
    lines = output.split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Min Wait Time is Correct"")
        score += 50
    else:
        print(""Min Wait Time is Incorrect.  Expected"", expected_output[0])
        
    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Number of Lines With Over 30 Minute Wait Times is Correct"")
        score += 50
    else:
        print(""Number of Lines With Over 30 Minute Wait Times is Incorrect.  Expected"", expected_output[1])
    
    return score


# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,,"
input_list = []
while True:
    wait_time = int(input())
    if wait_time == -999:
        break
    input_list.append(wait_time)

shortest_wait = min(input_list)
over_30_count = sum(1 for wait_time in input_list if wait_time > 30)

print(shortest_wait)
print(over_30_count)
","failed: must be real number, not str",0.0,
361,553,IterLogic1_dvc,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM NAME:  
** IterLogic1_dvc



**PROBLEM STATEMENT:  
** The CS110Z course director, unfortunately, was tricked into purchasing a
Disney Vacation Club timeshare. The good news about DVC is that it lets you
reserve a room at any Disney Resort for one week! The downside, however, is
that members have to pay an annual ""maintenance fee"" so that the mouse can
keep the property looking good (EVEN when Disney World was closed due to
COVID-19 . . . yay).

This year, the maintenance was $623.00. If that isn't bad enough, your course
director discovered that maintenance fees aren't fixed! On the contrary, it
accues each year at a rate of approximately 1.5%.

Write a Python function called `get_years_until` that takes a  **target
value**  as a parameter, and returns the number of years (assuming a fixed
interest rate) before the maintenance fee exceeds this value.



**Example 1**  
`get_years_until(624)` should return 1. This is because:

  * The maintenance fee will increase by $9.35 (i.e., 1.5% of 623) in a year
  * The new maintenance fee will be $623.00 + $9.35 = $632.35, which is obviously more than $624.00

**  
Example 2**  
`get_years_until(1000)` should return 32. This is because:

  * 623 * 1.015 * 1.015 * 1.015 . . . (32 times total) = $1003.23, which is obviously more than $1000.00

  
**Don't Know Where to Start?!?**  
Use a While loop to keep calculating the new maintenance fee until the value
is . . . (we'll let you figure out the rest).


","from IterLogic1_dvc import get_years_until
from cs110 import autograder
import random, math

NUM_SUBTESTS = 5

def soln(target_value):
    maintenance_fee = 623.00
    interest_rate = 0.015
    count = 0

    while maintenance_fee < target_value:
        count += 1
        maintenance_fee = maintenance_fee * (1 + interest_rate)
    
    return count

def test_passed():
    passed = 0
    for i in range(NUM_SUBTESTS):
        print('Running test %d of %d:' % (i+1 , NUM_SUBTESTS), end='')
        target_amount = random.randint(650, 1100)
        if autograder.equals(get_years_until(target_amount), soln(target_amount)):
            print(""  It will take "" + str(get_years_until(target_amount)) + "" years until the maintenance fee exceeds $"" + str(target_amount))
            passed += 1
        else:
            print('  get_years_until(%d) incorrectly returned %d instead of %d\n' % (target_amount, get_years_until(target_amount), soln(target_amount)))
    
    return round((100 / NUM_SUBTESTS), 1) * passed


# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,,"
def get_years_until(target):
    maintenance_fee = 623.00
    years = 0

    while maintenance_fee < target:
        maintenance_fee *= 1.015
        years += 1

    return years
",completed,100.0,"Running test 1 of 5:  It will take 4 years until the maintenance fee exceeds $660
Running test 2 of 5:  It will take 3 years until the maintenance fee exceeds $651
Running test 3 of 5:  It will take 24 years until the maintenance fee exceeds $880
Running test 4 of 5:  It will take 21 years until the maintenance fee exceeds $846
Running test 5 of 5:  It will take 32 years until the maintenance fee exceeds $998
Unit Test Returned: 100.0
"
362,554,IterLogic1_countby10s,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Write a program whose input is two integers. Output the first integer and
subsequent increments of 10 as long as the value is less than or equal to the
second integer.

Case #1: If the input is:

    
    
    -15
    30
    

the output is:

    
    
    -15
    -5
    5
    15
    25
    

Case 2: If the second integer is less than the first as in:

    
    
    20
    5
    

the output is:

    
    
    Second integer can't be less than the first.
    

For coding simplicity, output a space after every integer, including the last.


","from cs110 import autograder
import random, math

def solution(starting_value, value_to_count_to):
    result = ''
    
    if value_to_count_to < starting_value:
        return ""Second integer can't be less than the first.""
    else:
        i = starting_value
        
        while i <= value_to_count_to:
            result += str(i) + ""\n""
            i += 10
        
        return result

def run_test(random_starting_number, random_ending_number):
    print(""#--------------------------------------------"")
    print(""# Testing"", random_starting_number, ""to"", random_ending_number)
    print(""#--------------------------------------------"")
    
    output, error_message = autograder.run_script(""IterLogic1_countby10s.py"", [random_starting_number, random_ending_number])
    expected_output = solution(random_starting_number, random_ending_number)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT\n"")
        return True
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
        print()
    
    return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    
    if run_test(10 * random.randint(1, 5), 60 + 10 * random.randint(1, 20)):
        score += 40
        
    if run_test(random.randint(0, 30), random.randint(31, 200)):
        score += 40
    
    if run_test(random.randint(50, 100), random.randint(0, 10)):
        score += 20
    
    
    return score

        
# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,,"
def increment_sequence(first, second):
    if second < first:
        return ""Second integer can't be less than the first.""
    
    result = """"
    while first <= second:
        result += str(first) + "" ""
        first += 10
    
    return result.strip()

# test cases
print(increment_sequence(-15, 30))
print(increment_sequence(20, 5))
",completed,0.0,"#--------------------------------------------
# Testing 30 to 190
#--------------------------------------------
INCORRECT.  Expected the following:
30
40
50
60
70
80
90
100
110
120
130
140
150
160
170
180
190


#--------------------------------------------
# Testing 22 to 140
#--------------------------------------------
INCORRECT.  Expected the following:
22
32
42
52
62
72
82
92
102
112
122
132


#--------------------------------------------
# Testing 86 to 9
#--------------------------------------------
INCORRECT.  Expected the following:
Second integer can't be less than the first.

Unit Test Returned: 0
"
363,555,IterLogic1_count,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write a Python program that gets 2 inputs from the user

  * a number,  **x**
  * an increment amount,  **y**

Your program will then print out all the numbers from 0 to the user-defined
value (x), counting by the increment amount (y).

**EXAMPLES:**

| Example 1 | Example 2  
---|---|---  
Inputs | 10  
2 | 14  
3  
Outputs | 0  
2  
4  
6  
8  
10 | 0  
3  
6  
9  
12


","from cs110 import autograder
import random, math

def solution(value_to_count_to, increment):
    result = ''
    i = 0
    
    while i <= value_to_count_to:
        result += str(i) + ""\n""
        i += increment
    
    return result

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_ending_number = 10 + 2 * random.randint(1, 10)
    random_increment = 2

    output, error_message = autograder.run_script(""IterLogic1_count.py"", [random_ending_number, random_increment])
    expected_output = solution(random_ending_number, random_increment)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':   
    result = test_passed()
    print(""Unit Test Returned:"", result)











# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,,"
x = int(input(""Enter a number: ""))
y = int(input(""Enter an increment amount: ""))

for i in range(0, x+1, y):
    print(i)
",completed,100.0,"CORRECT
Unit Test Returned: 100
"
364,556,IterLogic1_cargocapacity,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write an algorithm that lets the user input the cargo capacity (in lbs) of
various transport aircraft until the user enters -1. Your program should
output the min and max cargo capacity, as well as the number of aircraft that
can carry at least 10000 lbs.

**EXAMPLE:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Inputs |

4500  
11000  
9000  
-1

|

9999  
15000  
3500  
17500  
-1

| 10000  
-1  
Outputs | 4500  
11000  
1 | 3500  
17500  
2 | 10000  
10000  
1


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0.0
    
    possible_tests = [[8000, 12000, 25000, 10000, 7500, -1], [5000, 9000, 22000, 10000, 8700, -1], [9999, 5000, 3000, -1]]
    possible_output = [[7500, 25000, 3], [5000, 22000, 2], [3000, 9999, 0]]
    
    # Generates a Random Test
    random_index = random.randint(0, len(possible_tests)-1)
    random_test = possible_tests[random_index]
    expected_output = possible_output[random_index]
            
    output, error = autograder.run_script(""IterLogic1_cargocapacity.py"", random_test)
    
    lines = output.split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Min Value is Correct"")
        score += 30
    else:
        print(""Min Value is Incorrect.  Expected"", expected_output[0])
    
    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Max Value is Correct"")
        score += 30
    else:
        print(""Max Value is Incorrect.  Expected"", expected_output[1])
        
    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):
        print(""Number of Aircraft with At Least 10000 lbs is Correct"")
        score += 40
    else:
        print(""Number of Aircraft with At Least 10000 lbs is Incorrect.  Expected"", expected_output[2])
    
    return score


# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,,"
max_capacity = float('-inf')
min_capacity = float('inf')
count = 0

while True:
    capacity = float(input(""Enter cargo capacity (in lbs): ""))

    if capacity == -1:
        break

    max_capacity = max(max_capacity, capacity)
    min_capacity = min(min_capacity, capacity)

    if capacity >= 10000:
        count += 1

print(""Min cargo capacity:"", min_capacity)
print(""Max cargo capacity:"", max_capacity)
print(""Number of aircraft that can carry at least 10000 lbs:"", count)
",completed,0.0,"Min Value is Incorrect.  Expected 5000
Max Value is Incorrect.  Expected 22000
Number of Aircraft with At Least 10000 lbs is Incorrect.  Expected 2
Unit Test Returned: 0.0
"
365,557,IterLogic1_averagerun,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** In, Python, write an algorithm that first asks the user how many PFT run
times to input and then gets that many values from the user. Output the
average of all the run times. You can assume there is at least one run time to
input.

**EXAMPLE:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Inputs | 6  
98  
75  
88  
82  
94  
100 | 5  
99  
83  
79  
86  
87 | 4  
88  
82  
80  
90  
Outputs | 89.5 | 86.8 | 85


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 5
    num_tests_passed = 0

    for i in range(NUM_TESTS):
        print(""Running Test "" + str(i) + "":"")
        
        num_inputs = random.randint(2, 11)
        inputs = [num_inputs]
        sum = 0
        
        for j in range(num_inputs):
            value = random.randint(70, 130)
            sum += value
            inputs.append(value)
               
        avg = sum / (len(inputs) - 1)   
               
        # Runs the Script
        output, error_message = autograder.run_script(""IterLogic1_averagerun.py"", inputs)
        
        # Extracts the Output
        lines = output.split(""\n"")
        
        if (len(lines) > 0):            
            if (autograder.equals(lines[0], avg)):
                print(""CORRECT\n"")
                num_tests_passed += 1
            else:
                print(""INCORRECT.  Expected: "" + str(avg) + ""\n"")

    # Result
    return (100 / NUM_TESTS) * num_tests_passed
            

# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,"
num_times = int(input(""How many PFT run times do you want to input? ""))
run_times = []

# Get the run times from the user
for _ in range(num_times):
    run_time = float(input(""Enter a run time: ""))
    run_times.append(run_time)

# Calculate the average of the run times
average = sum(run_times) / num_times

# Output the average
print(""The average run time is:"", average)
",completed,0.0,"Running Test 0:
INCORRECT.  Expected: 112.55555555555556

Running Test 1:
INCORRECT.  Expected: 112.5

Running Test 2:
INCORRECT.  Expected: 100.0

Running Test 3:
INCORRECT.  Expected: 104.7

Running Test 4:
INCORRECT.  Expected: 98.28571428571429

Unit Test Returned: 0.0
"
366,558,Graphics3_soundboard,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Using PythonGraph, create a ""soundboard"" application. Your program should
display a list of colored buttons (i.e., rectangles). When the user clicks
inside of a rectangle, the program plays a different
sound.[](https://canvas.instructure.com/courses/1762383/files/86200052/download?download_frd=1)

The provided template file comes with a single button implemented. Your job is
to study this code and create at least 5 other buttons. Note: The buttons do
not have to be laid out in the same arrangement, but they should look
organized.

When you are finished, upload your Python code. Do NOT upload any of the sound
files.




","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""Graphics3_soundboard.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
import pygame
from pygame.locals import *
from sys import exit
from python_graph import *

# Initialize the pygame library
pygame.init()

# Set the width and height of the window
width, height = 640, 480

# Set up the display with the specified dimensions
screen = pygame.display.set_mode((width, height))

# Set the title of the window
pygame.display.set_caption(""Soundboard"")

# Create a list to store the buttons
buttons = []

# Create a list of colors for the buttons
colors = [Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW, Color.ORANGE, Color.PURPLE]

# Create a list of sound files
sounds = [""button1.wav"", ""button2.wav"", ""button3.wav"", ""button4.wav"", ""button5.wav"", ""button6.wav""]

# Create a function to handle button click events
def play_sound(button):
    sound_index = buttons.index(button)
    sound_file = sounds[sound_index]
    pygame.mixer.music.load(sound_file)
    pygame.mixer.music.play(0)

# Create the buttons
for i in range(6):
    button_width = 100
    button_height = 50
    button_x = (width - button_width) // 2
    button_y = 50 + (button_height + 20) * i
    button = Button((button_x, button_y), button_width, button_height, colors[i], play_sound)
    buttons.append(button)

# Run the game loop
while True:
    # Clear the screen
    screen.fill(Color.WHITE)

    # Check for events
    for event in pygame.event.get():
        # Check if the event is the quit event
        if event.type == QUIT:
            # Exit the game
            exit()

        # Check if the event is a mouse button down event
        if event.type == MOUSEBUTTONDOWN:
            # Get the mouse position
            mouse_x, mouse_y = pygame.mouse.get_pos()

            # Check if any button was clicked
            for button in buttons:
                if button.is_clicked(mouse_x, mouse_y):
                    button.click()

    # Draw the buttons
    for button in buttons:
        button.draw(screen)

    # Update the display
    pygame.display.update()
",completed,100.0,"Thank you for your submission. Your instructor will let you know if there is a problem.
Unit Test Returned: 100.0
"
367,559,Graphics3_paint,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
**

Using PythonGraph, create a simple paint application. Your program should draw
circles on the window whenever the user presses the left mouse button. Your
program should also watch for keyboard inputs, and allow the user to change
colors and the size of the circle by pressing on different keys of your
choice.

The code template of a paint program has been provided to you as a starting
point in paint. Use this code and make the necessary modifications in the
Animation while loop.

When you are finished, upload your Python code.


","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""Graphics3_paint.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
from PythonGraph import GraphWin, Point, Circle
from time import sleep

def main():
    win = GraphWin(""Paint"", 800, 600)
    
    while True:
        key = win.checkKey()
        if key == 'q':
            break

        mouse = win.checkMouse()
        if mouse is not None:
            # Get mouse coordinates
            x, y = mouse.getX(), mouse.getY()
            
            # Create a circle at mouse coordinates
            circle = Circle(Point(x, y), 50)
            
            # Set circle color based on keyboard input
            if key == 'r':
                circle.setFill('red')
            elif key == 'g':
                circle.setFill('green')
            elif key == 'b':
                circle.setFill('blue')
            else:
                circle.setFill('black')
            
            # Draw the circle on the window
            circle.draw(win)    

    win.close()

if __name__ == ""__main__"":
    main()
",completed,100.0,"Thank you for your submission. Your instructor will let you know if there is a problem.
Unit Test Returned: 100.0
"
368,560,Graphics2_bouncingtriangle,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Using the Bouncing Ball from the previous lab as a starting point, generate
an animation of a bouncing triangle. The triangle's vertices should start at
random locations, and bounce whenever the triangle hits a wall.





**HINTS** :

  * Try drawing 3 bouncing balls on the screen.
  * Once the balls are moving correctly, draw 3 lines to connect them!


","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""Graphics2_bouncingtriangle.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,,"
import pygame
import random

# Initialize Pygame
pygame.init()

# Set screen dimensions
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600

# Set triangle properties
TRIANGLE_RADIUS = 50
TRIANGLE_SPEED = 5

# Set colors
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)

# Set initial triangle positions
x1 = random.randint(TRIANGLE_RADIUS, SCREEN_WIDTH - TRIANGLE_RADIUS)
y1 = random.randint(TRIANGLE_RADIUS, SCREEN_HEIGHT - TRIANGLE_RADIUS)
x2 = random.randint(TRIANGLE_RADIUS, SCREEN_WIDTH - TRIANGLE_RADIUS)
y2 = random.randint(TRIANGLE_RADIUS, SCREEN_HEIGHT - TRIANGLE_RADIUS)
x3 = random.randint(TRIANGLE_RADIUS, SCREEN_WIDTH - TRIANGLE_RADIUS)
y3 = random.randint(TRIANGLE_RADIUS, SCREEN_HEIGHT - TRIANGLE_RADIUS)

# Set initial triangle velocities
vx1 = random.choice([-1, 1]) * TRIANGLE_SPEED
vy1 = random.choice([-1, 1]) * TRIANGLE_SPEED
vx2 = random.choice([-1, 1]) * TRIANGLE_SPEED
vy2 = random.choice([-1, 1]) * TRIANGLE_SPEED
vx3 = random.choice([-1, 1]) * TRIANGLE_SPEED
vy3 = random.choice([-1, 1]) * TRIANGLE_SPEED

# Create game window
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption('Bouncing Triangle')

# Game loop
running = True
while running:
    # Fill the screen with black color
    screen.fill(BLACK)

    # Update triangle positions
    x1 += vx1
    y1 += vy1
    x2 += vx2
    y2 += vy2
    x3 += vx3
    y3 += vy3

    # Check triangle collision with walls
    if x1 <= TRIANGLE_RADIUS or x1 >= SCREEN_WIDTH - TRIANGLE_RADIUS:
        vx1 *= -1
    if y1 <= TRIANGLE_RADIUS or y1 >= SCREEN_HEIGHT - TRIANGLE_RADIUS:
        vy1 *= -1
    if x2 <= TRIANGLE_RADIUS or x2 >= SCREEN_WIDTH - TRIANGLE_RADIUS:
        vx2 *= -1
    if y2 <= TRIANGLE_RADIUS or y2 >= SCREEN_HEIGHT - TRIANGLE_RADIUS:
        vy2 *= -1
    if x3 <= TRIANGLE_RADIUS or x3 >= SCREEN_WIDTH - TRIANGLE_RADIUS:
        vx3 *= -1
    if y3 <= TRIANGLE_RADIUS or y3 >= SCREEN_HEIGHT - TRIANGLE_RADIUS:
        vy3 *= -1

    # Draw triangle
    pygame.draw.circle(screen, WHITE, (x1, y1), TRIANGLE_RADIUS)
    pygame.draw.circle(screen, WHITE, (x2, y2), TRIANGLE_RADIUS)
    pygame.draw.circle(screen, WHITE, (x3, y3), TRIANGLE_RADIUS)
    pygame.draw.line(screen, WHITE, (x1, y1), (x2, y2), 2)
    pygame.draw.line(screen, WHITE, (x2, y2), (x3, y3), 2)
    pygame.draw.line(screen, WHITE, (x3, y3), (x1, y1), 2)

    # Update the screen
    pygame.display.flip()

    # Handle events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

# Quit the program
pygame.quit()
```
",completed,0.0,"There appears to be a syntax error in your code.
Unit Test Returned: 0.0
"
369,561,Graphics2_bouncingball,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** Using the pythonGraph animation template, create an animation of a bouncing
ball. Your ball should start at a random location, and change direction each
time it hits a side, top, or bottom of the window.  
  



**CHALLENGE:**

  1. Try to make the ball change color every time it hits a wall.




","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""Graphics2_bouncingball.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,,"
import random
import tkinter as tk

class Ball:
    def __init__(self, canvas, color):
        self.canvas = canvas
        self.id = canvas.create_oval(10, 10, 25, 25, fill=color)
        self.canvas_width = self.canvas.winfo_width()
        self.canvas_height = self.canvas.winfo_height()
        self.x = random.randint(1, 10)
        self.y = random.randint(1, 10)
    
    def draw(self):
        self.canvas.move(self.id, self.x, self.y)
        pos = self.canvas.coords(self.id)
        if pos[1] <= 0 or pos[3] >= self.canvas_height:
            self.y = -self.y
            self.canvas.itemconfig(self.id, fill=random_color())
        if pos[0] <= 0 or pos[2] >= self.canvas_width:
            self.x = -self.x
            self.canvas.itemconfig(self.id, fill=random_color())

    def random_color(self):
        r = random.randint(0, 255)
        g = random.randint(0, 255)
        b = random.randint(0, 255)
        return ""#%02x%02x%02x"" % (r, g, b)
    
class Animation:
    def __init__(self):
        self.window = tk.Tk()
        self.canvas = tk.Canvas(self.window, width=500, height=500)
        self.canvas.pack()
        self.ball = Ball(self.canvas, ""red"")
        self.animate()
    
    def animate(self):
        self.ball.draw()
        self.window.after(10, self.animate)
        
if __name__ == ""__main__"":
    animation = Animation()
    animation.window.mainloop()
",completed,100.0,"Thank you for your submission. Your instructor will let you know if there is a problem.
Unit Test Returned: 100.0
"
370,566,FileIO_echo,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
**

Write a program that asks the user to type the name of a file (e.g.,
""file.txt""), and a letter. Your program should then open the file, and print
out all of the lines where the first character starts with the letter

For example, if the user types the following filename:

    
    
    input1.txt
    a
    

and the contents of input1.txt are:

    
    
    aspiration
    classified
    federation
    

the output should be:

    
    
    aspiration
    



Notes:

  * Each line ends with the '\n' character. Use `split()` to get each line.
  * Refer to the String Functions slide to see how you can get the first character from a string


","from cs110 import autograder
import random, math

def solution(filename, letter):
    result = ''
    
    file = open(filename, ""r"")
    contents = file.read()
    lines = contents.split(""\n"")

    for line in lines:
        if line[0] == letter:
            result += line + ""\n""

    file.close()

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_letter = chr(random.randint(97, 122))
    
    output, error_message = autograder.run_script(""FileIO_echo.py"", [""file.txt"", random_letter])
    expected_output = solution(""file.txt"", random_letter)
    
    lines = output.strip().split('\n')
    expected_lines = expected_output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_lines)
    
    if num_matches == len(lines):
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT"")
        return 0.0
        

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)














# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,,"
file_name = input(""Enter the name of the file: "")
letter = input(""Enter a letter: "")

with open(file_name, 'r') as file:
    lines = file.readlines()
    
    for line in lines:
        if line[0] == letter:
            print(line.strip())
",failed: [Errno 2] No such file or directory: 'file.txt',0.0,
371,589,a3_3_chars3,4,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a list called `list_of_characters`. Write a
program that prints out each of the items in this list (one item per line).  



**EXAMPLE:  
** If, for example, the list was:  [""ab"", ""cd"", ""ef""]

Your program should print:

    
    
    ab  
    cd  
    ef



**NOTE:**

  * You must use a loop to complete this task.  


# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_characters = [""sp"",""jm"",""bt"",""cv"",""ti"",""nn"",""ig"",""au"",""hi"",""vc"",""om"",""pf"",""tk"",""ve"",""xd"",""sj"",""bg"",""pk"",""rk"",""vy"",""uz"",""uv"",""jp"",""wg"",""zi"",""eg"",""ov"",""zt"",""sb"",""ki"",""ua"",""ft"",""hq"",""ik"",""xq"",""hz"",""dh"",""gx"",""gg"",""jg"",""dm"",""pb"",""oq"",""tm"",""mx"",""nh"",""kv"",""qk"",""ml"",""li"",""di"",""iy"",""sr"",""ps"",""rz"",""jl"",""mr"",""na"",""ax"",""qb"",""xt"",""fe"",""ay"",""iv"",""kn"",""ky"",""uh"",""dq"",""ib"",""jz"",""vb"",""fq"",""je"",""cy"",""wy"",""xo"",""ex"",""tg"",""jw"",""ii"",""cd"",""do"",""nw"",""zh"",""el"",""tu"",""it"",""kb"",""wp"",""js"",""ei"",""fz"",""ea"",""ie"",""ts"",""md"",""px"",""sq"",""nm"",""gi""]

#Your code goes here.","from cs110 import autograder
import random, math, traceback

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    try:        
        output, error = autograder.run_script(""a3_3_chars3.py"", [])
        expected_output = ""sp\njm\nbt\ncv\nti\nnn\nig\nau\nhi\nvc\nom\npf\ntk\nve\nxd\nsj\nbg\npk\nrk\nvy\nuz\nuv\njp\nwg\nzi\neg\nov\nzt\nsb\nki\nua\nft\nhq\nik\nxq\nhz\ndh\ngx\ngg\njg\ndm\npb\noq\ntm\nmx\nnh\nkv\nqk\nml\nli\ndi\niy\nsr\nps\nrz\njl\nmr\nna\nax\nqb\nxt\nfe\nay\niv\nkn\nky\nuh\ndq\nib\njz\nvb\nfq\nje\ncy\nwy\nxo\nex\ntg\njw\nii\ncd\ndo\nnw\nzh\nel\ntu\nit\nkb\nwp\njs\nei\nfz\nea\nie\nts\nmd\npx\nsq\nnm\ngi\n""
        
        if error == """":
            student_lines = output.strip().split('\n')
            expected_lines = expected_output.strip().split('\n')
                
            for idx in range(len(student_lines)):
                if idx < len(student_lines) and idx < len(expected_lines):
                    if student_lines[idx] == expected_lines[idx]:
                        score += 100 / len(expected_lines)
            
            if score < 100.0:
                print(""**** Start of Expected Output ****"")
                print(expected_output)
                print(""INCORRECT: Missing Entries, Expected the above ^^"")
            else:
                print(""CORRECT!"")
            
            return round(score, 1)
        else:
            print(""INCORRECT: There was an error while running your code.\n"")
            print(error)
            
            return 0
    
    except Exception as e:
        print(""There was an error while running your code."")
        print(traceback.print_exc())
        if score == 100:
            return 90
        else:
            return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_characters = [""sp"",""jm"",""bt"",""cv"",""ti"",""nn"",""ig"",""au"",""hi"",""vc"",""om"",""pf"",""tk"",""ve"",""xd"",""sj"",""bg"",""pk"",""rk"",""vy"",""uz"",""uv"",""jp"",""wg"",""zi"",""eg"",""ov"",""zt"",""sb"",""ki"",""ua"",""ft"",""hq"",""ik"",""xq"",""hz"",""dh"",""gx"",""gg"",""jg"",""dm"",""pb"",""oq"",""tm"",""mx"",""nh"",""kv"",""qk"",""ml"",""li"",""di"",""iy"",""sr"",""ps"",""rz"",""jl"",""mr"",""na"",""ax"",""qb"",""xt"",""fe"",""ay"",""iv"",""kn"",""ky"",""uh"",""dq"",""ib"",""jz"",""vb"",""fq"",""je"",""cy"",""wy"",""xo"",""ex"",""tg"",""jw"",""ii"",""cd"",""do"",""nw"",""zh"",""el"",""tu"",""it"",""kb"",""wp"",""js"",""ei"",""fz"",""ea"",""ie"",""ts"",""md"",""px"",""sq"",""nm"",""gi""]

#Your code goes here.","
for character in list_of_characters:
  print(character)
",completed,0.0,"INCORRECT: There was an error while running your code.

name 'list_of_characters' is not defined
Unit Test Returned: 0
"
372,590,a3_3_chars2,4,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a list called `list_of_characters`. Write a
program that prints out each of the items in this list (one item per line).  



**EXAMPLE:  
** If, for example, the list was:  [""ab"", ""cd"", ""ef""]

Your program should print:

    
    
    ab  
    cd  
    ef



**NOTE:**

  * You must use a loop to complete this task.  


# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_characters = [""ao"",""rh"",""vs"",""rf"",""et"",""sm"",""eg"",""wf"",""pp"",""mr"",""iq"",""ti"",""pn"",""pm"",""lx"",""ie"",""qh"",""ls"",""gy"",""zv"",""op"",""tc"",""lt"",""vb"",""wh"",""xk"",""qx"",""ud"",""rv"",""oa"",""dr"",""gk"",""qk"",""er"",""mw"",""ea"",""dg"",""by"",""xa"",""gn"",""br"",""ve"",""pr"",""oy"",""xw"",""wy"",""xi"",""bs"",""ae"",""lz"",""nb"",""iy"",""sz"",""yf"",""gs"",""jc"",""zy"",""xv"",""nn"",""vm"",""xt"",""up"",""rn"",""it"",""yc"",""wn"",""hp"",""zp"",""ey"",""fy"",""ld"",""gd"",""is"",""yk"",""fi"",""vi"",""qq"",""yo"",""tj"",""en"",""zm"",""rc"",""os"",""qz"",""yu"",""mv"",""ke"",""my"",""qe"",""az"",""un"",""ox"",""vy"",""ou"",""ia"",""yh"",""ne"",""wd"",""bb"",""dt""]

#Your code goes here.","from cs110 import autograder
import random, math, traceback

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    try:        
        output, error = autograder.run_script(""a3_3_chars2.py"", [])
        expected_output = ""ao\nrh\nvs\nrf\net\nsm\neg\nwf\npp\nmr\niq\nti\npn\npm\nlx\nie\nqh\nls\ngy\nzv\nop\ntc\nlt\nvb\nwh\nxk\nqx\nud\nrv\noa\ndr\ngk\nqk\ner\nmw\nea\ndg\nby\nxa\ngn\nbr\nve\npr\noy\nxw\nwy\nxi\nbs\nae\nlz\nnb\niy\nsz\nyf\ngs\njc\nzy\nxv\nnn\nvm\nxt\nup\nrn\nit\nyc\nwn\nhp\nzp\ney\nfy\nld\ngd\nis\nyk\nfi\nvi\nqq\nyo\ntj\nen\nzm\nrc\nos\nqz\nyu\nmv\nke\nmy\nqe\naz\nun\nox\nvy\nou\nia\nyh\nne\nwd\nbb\ndt\n""

        if error == """":
            student_lines = output.strip().split('\n')
            expected_lines = expected_output.strip().split('\n')
            
            for idx in range(len(student_lines)):
                if idx < len(student_lines) and idx < len(expected_lines):
                    if student_lines[idx] == expected_lines[idx]:
                        score += 100 / len(expected_lines)
            
            if score < 100.0:
                print(""**** Start of Expected Output ****"")
                print(expected_output)
                print(""INCORRECT: Missing Entries, Expected the above ^^"")
            else:
                print(""CORRECT!"")
            
            return round(score, 1)
        else:
            print(""INCORRECT: There was an error while running your code.\n"")
            print(error)
            
            return 0
    
    except Exception as e:
        print(""There was an error while running your code."")
        print(traceback.print_exc())
        return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_characters = [""ao"",""rh"",""vs"",""rf"",""et"",""sm"",""eg"",""wf"",""pp"",""mr"",""iq"",""ti"",""pn"",""pm"",""lx"",""ie"",""qh"",""ls"",""gy"",""zv"",""op"",""tc"",""lt"",""vb"",""wh"",""xk"",""qx"",""ud"",""rv"",""oa"",""dr"",""gk"",""qk"",""er"",""mw"",""ea"",""dg"",""by"",""xa"",""gn"",""br"",""ve"",""pr"",""oy"",""xw"",""wy"",""xi"",""bs"",""ae"",""lz"",""nb"",""iy"",""sz"",""yf"",""gs"",""jc"",""zy"",""xv"",""nn"",""vm"",""xt"",""up"",""rn"",""it"",""yc"",""wn"",""hp"",""zp"",""ey"",""fy"",""ld"",""gd"",""is"",""yk"",""fi"",""vi"",""qq"",""yo"",""tj"",""en"",""zm"",""rc"",""os"",""qz"",""yu"",""mv"",""ke"",""my"",""qe"",""az"",""un"",""ox"",""vy"",""ou"",""ia"",""yh"",""ne"",""wd"",""bb"",""dt""]

#Your code goes here.","
for character in list_of_characters:
    print(character)
",completed,0.0,"INCORRECT: There was an error while running your code.

name 'list_of_characters' is not defined
Unit Test Returned: 0
"
373,591,a3_3_chars1,4,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** You have been provided with a list called `list_of_characters`. Write a
program that prints out each of the items in this list (one item per line).  



**EXAMPLE:  
** If, for example, the list was:  [""ab"", ""cd"", ""ef""]

Your program should print:

    
    
    ab  
    cd  
    ef



**NOTE:**

  * You must use a loop to complete this task.  


# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_characters = [""mz"",""nz"",""oe"",""pq"",""zy"",""uu"",""ir"",""gy"",""tl"",""pd"",""lb"",""ks"",""uf"",""vj"",""as"",""kh"",""pr"",""am"",""cd"",""lh"",""ci"",""sg"",""zt"",""wn"",""np"",""vt"",""me"",""gs"",""qs"",""we"",""xt"",""rc"",""kw"",""xw"",""yk"",""in"",""eq"",""kt"",""fr"",""wi"",""ku"",""aj"",""or"",""oz"",""po"",""vo"",""go"",""xo"",""xx"",""ca"",""xj"",""cj"",""wj"",""xp"",""jd"",""fo"",""xq"",""nj"",""bq"",""lr"",""dw"",""my"",""hj"",""ve"",""cq"",""do"",""jq"",""ld"",""kl"",""eu"",""gw"",""jy"",""vd"",""au"",""wq"",""nt"",""gd"",""vx"",""xz"",""ao"",""tu"",""xb"",""yd"",""ki"",""kj"",""ns"",""da"",""pv"",""rq"",""vf"",""xi"",""lo"",""ue"",""aa"",""ct"",""xr"",""xn"",""mr"",""iv"",""mu""]

#Your code goes here.","from cs110 import autograder
import random, math, traceback

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    try:        
        output, error = autograder.run_script(""a3_3_chars1.py"", [])
        expected_output = ""mz\nnz\noe\npq\nzy\nuu\nir\ngy\ntl\npd\nlb\nks\nuf\nvj\nas\nkh\npr\nam\ncd\nlh\nci\nsg\nzt\nwn\nnp\nvt\nme\ngs\nqs\nwe\nxt\nrc\nkw\nxw\nyk\nin\neq\nkt\nfr\nwi\nku\naj\nor\noz\npo\nvo\ngo\nxo\nxx\nca\nxj\ncj\nwj\nxp\njd\nfo\nxq\nnj\nbq\nlr\ndw\nmy\nhj\nve\ncq\ndo\njq\nld\nkl\neu\ngw\njy\nvd\nau\nwq\nnt\ngd\nvx\nxz\nao\ntu\nxb\nyd\nki\nkj\nns\nda\npv\nrq\nvf\nxi\nlo\nue\naa\nct\nxr\nxn\nmr\niv\nmu\n""
        
        if error == """":
            student_lines = output.strip().split('\n')
            expected_lines = expected_output.strip().split('\n')
                
            for idx in range(len(student_lines)):
                if idx < len(student_lines) and idx < len(expected_lines):
                    if student_lines[idx] == expected_lines[idx]:
                        score += 100 / len(expected_lines)
            
            if score < 100.0:
                print(""**** Start of Expected Output ****"")
                print(expected_output)
                print(""INCORRECT: Missing Entries, Expected the above ^^"")
            else:
                print(""CORRECT!"")
            
            return round(score, 1)
        else:
            print(""INCORRECT: There was an error while running your code.\n"")
            print(error)
            
            return 0
    
    except Exception as e:
        print(""There was an error while running your code."")
        print(traceback.print_exc())
        return score
    
# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_characters = [""mz"",""nz"",""oe"",""pq"",""zy"",""uu"",""ir"",""gy"",""tl"",""pd"",""lb"",""ks"",""uf"",""vj"",""as"",""kh"",""pr"",""am"",""cd"",""lh"",""ci"",""sg"",""zt"",""wn"",""np"",""vt"",""me"",""gs"",""qs"",""we"",""xt"",""rc"",""kw"",""xw"",""yk"",""in"",""eq"",""kt"",""fr"",""wi"",""ku"",""aj"",""or"",""oz"",""po"",""vo"",""go"",""xo"",""xx"",""ca"",""xj"",""cj"",""wj"",""xp"",""jd"",""fo"",""xq"",""nj"",""bq"",""lr"",""dw"",""my"",""hj"",""ve"",""cq"",""do"",""jq"",""ld"",""kl"",""eu"",""gw"",""jy"",""vd"",""au"",""wq"",""nt"",""gd"",""vx"",""xz"",""ao"",""tu"",""xb"",""yd"",""ki"",""kj"",""ns"",""da"",""pv"",""rq"",""vf"",""xi"",""lo"",""ue"",""aa"",""ct"",""xr"",""xn"",""mr"",""iv"",""mu""]

#Your code goes here.","
for character in list_of_characters:
    print(character)
",completed,0.0,"INCORRECT: There was an error while running your code.

name 'list_of_characters' is not defined
Unit Test Returned: 0
"
374,16,lsn8_fuel,2,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

Write an algorithm that gets a fuel load (in lbs) and then a distance to base
(in nautical miles). You may assume all inputs are non-negative numbers.

It then outputs what kind of action the pilot should take. If the fuel load is
less than 50 lbs and the distance to base is less than 70 nm, report ""Return
to base"", otherwise, report ""Resume flight"".

**EXAMPLES:**

| Example 1 | Example 2 | Example 3 | Example 4  
---|---|---|---|---  
Input | 30  
60 | 60  
60 | 40  
80 | 60  
80  
Output | Return to base | Resume flight | Resume flight | Resume flight  
  
**Note: Output must match exactly.**


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
            
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 1"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn8_fuel.py"", [30,60])
    
    if output.strip() == ""Return to base"":
        print(""CORRECT\n"")
        points_earned += 25
    else:
        print(""Incorrect.  Expected: Return to base\n"")
        
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 2"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn8_fuel.py"", [60,60])
    
    if output.strip() == ""Resume flight"":
        print(""CORRECT\n"")
        points_earned += 25
    else:
        print(""Incorrect.  Expected: Resume flight\n"")
    
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 3"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn8_fuel.py"", [40,80])
    
    if output.strip() == ""Resume flight"":
        print(""CORRECT\n"")
        points_earned += 25
    else:
        print(""Incorrect.  Expected: Resume flight\n"")

    # Runs the Script
    print(""-------------------------------"")
    print(""Test 4"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn8_fuel.py"", [60,80])
    
    if output.strip() == ""Resume flight"":
        print(""CORRECT\n"")
        points_earned += 25
    else:
        print(""Incorrect.  Expected: Resume flight\n"")

    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,"
def pilot_action(fuel_load, distance_to_base):
    if fuel_load < 50 and distance_to_base < 70:
        return ""Return to base""
    else:
        return ""Resume flight""

print(pilot_action(30, 60))
print(pilot_action(60, 60))
print(pilot_action(60, 40))
print(pilot_action(80, 60))
",completed,0.0,"-------------------------------
Test 1
-------------------------------
Incorrect.  Expected: Return to base

-------------------------------
Test 2
-------------------------------
Incorrect.  Expected: Resume flight

-------------------------------
Test 3
-------------------------------
Incorrect.  Expected: Resume flight

-------------------------------
Test 4
-------------------------------
Incorrect.  Expected: Resume flight

Unit Test Returned: 0
"
375,234,a1_4_satellite,2,skill,1,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

You have been provided with a partially complete Python program that contains
2 variables.

  1. satellite_speed (input by the user in km/s)
  2. orbit_speed (already initialize in km/s)



Add code to the end of this program that will output:

    *       *             Crashed to Earth

If the speed of the satellite is below the orbital speed.

      *             In Orbit

If the speed of the satellite is equal to the orbital speed.

      *             Lost to Space

If the speed of the satellite is above the orbital speed.



** **

**EXAMPLES:**

|

**Example 1**

|

**Example 2**

|

**Example 3**  
  
---|---|---|---  
  
**Input**

|

3

|

7.8

|

9  
  
**Output**

|

Crashed to Earth

|

In Orbit

|

Lost to Space  
  



","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(speed):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing speed ="", speed, ""km/s"")
    print(""----------------------------------"")
    
    if speed > 7.8:
        solution = ""Lost to Space""
    elif speed == 7.8:
        solution = ""In Orbit""
    else:
        solution = ""Crashed to Earth""
    
    output, error_message = autograder.run_script(""a1_4_satellite.py"", [speed])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(7.8, 20), 1))
    run_test(7.8)
    run_test(round(random.uniform(0.0, 7.7), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,,,completed,0.0,"----------------------------------
Testing speed = 9.5 km/s
----------------------------------
INCORRECT. Expected: Lost to Space


----------------------------------
Testing speed = 7.8 km/s
----------------------------------
INCORRECT. Expected: In Orbit


----------------------------------
Testing speed = 4.4 km/s
----------------------------------
INCORRECT. Expected: Crashed to Earth


Unit Test Returned: 0.0
"
376,249,lsn21_bouncingball,3,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 


**PROBLEM STATEMENT:  
** Using the pythonGraph animation template, create an animation of a bouncing
ball. Your ball should start at a random location, and change direction each
time it hits a side, top, or bottom of the window.  
  



**CHALLENGE:**

  1. Try to make the ball change color every time it hits a wall.




","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn21_bouncingball.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,,,completed,100.0,"Thank you for your submission. Your instructor will let you know if there is a problem.
Unit Test Returned: 100.0
"
377,537,Lists2_population,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:**

You are being provided with a simple 2D list that contains the names and
populations of the 10 largest cities in the world. This list (which is called
`cities_table`) can be logicially visualized as the following:



**City** |  **Population**  
---|---  
Tokyo | 37,435,191  
Delhi | 29,399,141  
Shanghai  | 25,647,805  
Sao Paulo  | 21,846,507  
Mexico City  | 21,671,908  
Cairo | 20,484,965  
Dhaka | 20,283,552  
Mumbai | 20,185,064  
Beijing  | 20,035,455  
Osaka | 19,222,665  
  
  
Write a Python program that gets a population from the user, and prints the
names of all the cities whose populations are at least that big (keep the same
order as in the 2D list). Print each city's name on a separate line.



**EXAMPLES:**

| Example 1 | Example 2  
---|---|---  
Input | 25000000 | 30000000  
Output | Tokyo  
Delhi  
Shanghai | Tokyo


","from cs110 import autograder
import random

def solution(population):
    result = ''
    
    cities_table = [
        ['Tokyo', 37435191],
        ['Delhi', 29399141],
        ['Shanghai', 25647805],
        ['Sao Paulo', 21846507],
        ['Mexico City', 21671908],
        ['Cairo', 20484965],
        ['Dhaka', 20283552],
        ['Mumbai', 20185064],
        ['Beijing', 20035455],
        ['Osaka', 19222665]]
    
    for row in cities_table:
        if row[1] >= population:
            result += row[0] + '\n'
    
    return result.strip()


def test_passed():
    
    random_population_size = random.randint(19, 30) * 1000000
    
    output, error = autograder.run_script(""Lists2_population.py"", [random_population_size])
    answer = solution(random_population_size)
    
    lines = output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, answer.strip().split('\n'))
    
    if num_matches == len(lines):
        print(""\nCORRECT"")
        return 100.0
    else:
        print(""\nOne or more outputs were incorrect."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,,"
cities_table = [
    [""Tokyo"", 37435191],
    [""Delhi"", 29399141],
    [""Shanghai"", 25647805],
    [""Sao Paulo"", 21846507],
    [""Mexico City"", 21671908],
    [""Cairo"", 20484965],
    [""Dhaka"", 20283552],
    [""Mumbai"", 20185064],
    [""Beijing"", 20035455],
    [""Osaka"", 19222665]
]

population = int(input(""Enter population: ""))

for city in cities_table:
    if city[1] >= population:
        print(city[0])
",completed,100.0,"
CORRECT
Unit Test Returned: 100.0
"
378,552,IterLogic1_squadrons,4,lab,0,"Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. 
**PROBLEM STATEMENT:  
** Write an algorithm that asks the user for the number of squadrons to input,
and then gets each squadron's number. Output the number  
of squadrons from 1st, 2nd, 3rd, and 4th groups (one per line)

**EXAMPLE:**

| Example 1 | Example 2 | Example 3  
---|---|---|---  
Inputs |

3  
3  
19  
24

|

4  
19  
25  
37  
40

|

2  
1  
34  
  
Outputs | 1  
1  
1  
0 | 0  
1  
1  
2 | 1  
0  
0  
1


","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0.0
    
    possible_tests = [[5, 10, 20, 30, 40, 19], [8, 3, 1, 23, 37, 40, 7, 6, 25]]
    possible_output = [[1, 2, 1, 1], [4, 0, 2, 2]]
    
    # Generates a Random Test
    random_index = random.randint(0, len(possible_tests)-1)
    random_test = possible_tests[random_index]
    expected_output = possible_output[random_index]
            
    output, error = autograder.run_script(""IterLogic1_squadrons.py"", random_test)
    
    lines = output.split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Num in Group One is Correct"")
        score += 25
    else:
        print(""Num in Group One is Incorrect.  Expected"", expected_output[0])
        
    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Num in Group Two is Correct"")
        score += 25
    else:
        print(""Num in Group Two is Incorrect.  Expected"", expected_output[1])
    
    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):
        print(""Num in Group Three is Correct"")
        score += 25
    else:
        print(""Num in Group Three is Incorrect.  Expected"", expected_output[2])
    
    if len(lines) > 3 and autograder.equals(lines[3], expected_output[3]):
        print(""Num in Group Four is Correct"")
        score += 25
    else:
        print(""Num in Group Four is Incorrect.  Expected"", expected_output[3])
    
    return score


# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,,"
num_squadrons = int(input(""Enter the number of squadrons: ""))

group1 = 0
group2 = 0
group3 = 0
group4 = 0

for i in range(num_squadrons):
    squadron = int(input(""Enter squadron number: ""))
    if squadron <= 9:
        group1 += 1
    elif squadron <= 19:
        group2 += 1
    elif squadron <= 29:
        group3 += 1
    else:
        group4 += 1

print(group1)
print(group2)
print(group3)
print(group4)
```
",completed,0.0,"Num in Group One is Incorrect.  Expected 4
Num in Group Two is Incorrect.  Expected 0
Num in Group Three is Incorrect.  Expected 2
Num in Group Four is Incorrect.  Expected 2
Unit Test Returned: 0.0
"
