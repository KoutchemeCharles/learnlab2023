[{"Unnamed: 0": 0, "problem_id": "a3_3_animals", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a list called `list_of_animals`. Write a\nprogram that prints out each of the items in this list (one item per line).\n\n\n\n**EXAMPLE:  \n** If, for example, the list contained the items: \"A\", \"B\", \"C\"\n\nYour program should print:\n\n    \n    \n    A  \n    B  \n    C\n\n\n\n**NOTE:**\n\n  * You must use a loop to complete this task. \n\n\n\n\n# AUTOGRADER IMPORT REMOVED\n\n# --------------------------------------------------------------\n# Assessment #3, Problem 3\n# --------------------------------------------------------------\n\n# This list is being provided to you.  DO NOT TOUCH!\nlist_of_animals = ['Tiger', 'Deer', 'Zebra', 'Elephant', 'Swordfish', 'Giraffe', 'Sloth']\n\n#Your code goes here.", "code": "\nfor animal in list_of_animals:\n    print(animal)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nlist_of_animals = ['Tiger', 'Deer', 'Zebra', 'Elephant', 'Swordfish', 'Giraffe', 'Sloth']\r\n\r\ndef solution():\r\n    result = []\r\n    \r\n    for item in list_of_animals:\r\n        result.append(item)\r\n    \r\n    return result\r\n             \r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    output, error = autograder.run_script(\"a3_3_animals.py\", [])\r\n    expected_output = solution()\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    \r\n    return round(100 / len(expected_output) * num_matches, 1)\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 1, "problem_id": "a3_1_cargo", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a list called `list_of_cargo_planes`. Write a\nprogram that prints a single, specified plane from the list. Your program\nshall take a number via user input used to identify which plane to print. For\nexample, if the user types a 3, you should print out the third item.\n\n\n\n**NOTE:**\n\n  * You may assume that the user will always enter a value that \"should\" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)\n\n\n\n\n", "code": "", "testcase": "from cs110 import autograder\nimport random, math\n\nsoln_list =  [\n                'C-2', 'C-5', 'C-9', 'C-12', 'C-17', 'UV-18', 'C-20', 'C-21', 'C-22', 'C-23', 'C-26', 'C-27',\n                'C-35', 'C-38', 'CT-39', 'C-40', 'C-130', 'C-135', 'C-141', 'ATT', 'CSA', 'NSA', 'GRA', 'CRAF'\n            ] \n             \n\n# Runs the Python script and sees if it passes the test(s)\ndef test_passed():\n    \n    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]\n    tests_passed = 0\n\n    for i in range(len(index_list)):\n        print(\"----------------------------------------------------------\")\n        print(\"Testing item #\" + str(index_list[i]) + \": \")\n        print(\"----------------------------------------------------------\")\n               \n        # Runs the Script\n        output, error_message = autograder.run_script(\"a3_1_cargo.py\", [index_list[i]])\n\n        # Test Goes Here\n        lines = output.split(\"\\n\")\n        \n        if lines[0] == soln_list[index_list[i]-1]:\n            print(\"Looks Good!\")\n            tests_passed += 1\n        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:\n            print(\"Unexpected Output (Expected \" + str(soln_list[index_list[i]-1]) + \")\")\n    \n        print()\n    \n    return (100 / len(index_list)) * tests_passed\n\n\n# ---------------------------------------------------------------------\n# Optional\n# Runs your code in an IDE (for testing purposes)\n# ---------------------------------------------------------------------\nif __name__ == '__main__':    \n    result = test_passed()\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 2, "problem_id": "a3_3_games", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a list called `list_of_games`. Write a program\nthat prints out each of the items in this list (one item per line).\n\n\n\n**EXAMPLE:  \n** If, for example, the list contained the items: \"A\", \"B\", \"C\"\n\nYour program should print:\n\n    \n    \n    A  \n    B  \n    C\n\n\n\n**NOTE:**\n\n  * You must use a loop to complete this task. \n\n\n\n\n# AUTOGRADER IMPORT REMOVED\n\n# --------------------------------------------------------------\n# Assessment #3, Problem 3\n# --------------------------------------------------------------\n\n# This list is being provided to you.  DO NOT TOUCH!\nlist_of_games = ['Monopoly', 'Risk', 'Clue', 'Chess', 'Operation', 'Jenga', 'Jumanji']\n\n#Your code goes here.", "code": "\n# Your code here\nfor game in list_of_games:\n    print(game)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nlist_of_games = ['Monopoly', 'Risk', 'Clue', 'Chess', 'Operation', 'Jenga', 'Jumanji']\r\n\r\ndef solution():\r\n    result = []\r\n    \r\n    for item in list_of_games:\r\n        result.append(item)\r\n    \r\n    return result\r\n             \r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    output, error = autograder.run_script(\"a3_3_games.py\", [])\r\n    expected_output = solution()\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    \r\n    return round(100 / len(expected_output) * num_matches, 1)\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 3, "problem_id": "a3_4_heights", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a list called list_of_heights. Write a program\nthat prints out the range ( _i.e.,  _the difference between the max and min\nheight)\n\n\n\n**EXAMPLE:  \n** If, for example, the list contained the values: 53, 60, 65\n\nYour program should print:\n\n    \n    \n    12\n\n\n\n\n\n\n", "code": "\nlist_of_heights = [53, 60, 65]\n\nprint(max(list_of_heights) - min(list_of_heights))\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nSTUDENT_FILE = \"a3_4_heights.py\"\r\nANSWER = 8942\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    output, error = autograder.run_script(STUDENT_FILE, [])\r\n    lines = output.strip().split('\\n')\r\n    score = 0\r\n    \r\n    if len(lines) >= 1:           \r\n        if autograder.equals(lines[0], ANSWER):\r\n            print(\"CORRECT: Range Looks Good!\")\r\n            score += 100\r\n        else:\r\n            print(\"Incorrect range.  Remember that the range is the difference between the max and the min\")\r\n            \r\n    else:\r\n        print(\"More lines expected in your answer.  Make sure you are printing out the range.\")\r\n    \r\n    return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 4, "problem_id": "lsn9_practice4", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a program that asks the user for the area of three plots of land.\n\n  * The first area will be provided to you in ACRES\n  * The second area will be provided to you in SQUARE MILES (1 Acre = 0.0015625 Sq Miles)\n  * The third area will be provided to you in SQUARE KILOMETERS\n\nYour program will output \"Plot X is the biggest\", replacing X with either a 1,\n2, or 3 depending on if the first, second, or third plot of land is the\nbiggest, respectively. For this problem, you may assume that the plots are all\ndifferent sizes (e.g., no two plots will be the same size)\n\n**NOTES:**\n\n  * **1 acre = 0.0015625 square miles**\n  * **1 sq kilometer = 0.386102 square miles**\n\n**EXAMPLES:**\n\n**EXAMPLE 1** | **EXAMPLE 2**  \n---|---  \n**Inputs** |\n\n35  \n0.25  \n1\n\n|\n\n150  \n1  \n2.2  \n  \n**Expected Output** | Plot 3 is the biggest | Plot 2 is the biggest\n\n\n", "code": "\nimport math\n\ndef plot_with_max_area(plot1, plot2, plot3):\n    plot1_in_miles = plot1 * 0.0015625\n    plot2_in_miles = plot2 * 1\n    plot3_in_miles = plot3 * 0.386102\n    \n    if plot1_in_miles > plot2_in_miles and plot1_in_miles > plot3_in_miles:\n        return \"Plot 1 is the biggest\"\n    elif plot2_in_miles > plot1_in_miles and plot2_in_miles > plot3_in_miles:\n        return \"Plot 2 is the biggest\"\n    else:\n        return \"Plot 3 is the biggest\"\n\n# Test Example 1\nprint(plot_with_max_area(35, 0.25, 1)) # Plot 3 is the biggest\n\n# Test Example 2\nprint(plot_with_max_area(150, 1, 2.2)) # Plot 2 is the biggest\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef solution(area_1, area_2, area_3):\r\n    area_1 = area_1 * 0.0015625\r\n    area_3 = area_3 * 0.386102\r\n\r\n    if area_1 > area_2 and area_1 > area_3:\r\n        return \"Plot 1 is the biggest\"\r\n    elif area_2 > area_1 and area_2 > area_3:\r\n        return \"Plot 2 is the biggest\"\r\n    elif area_3 > area_1 and area_3 > area_2:\r\n        return \"Plot 3 is the biggest\"\r\n    \r\n    return \"This should never return\"\r\n\r\ndef run_test(area1, area2, area3):\r\n    global num_tests_run, num_tests_passed\r\n    \r\n    num_tests_run += 1\r\n    expected_output = solution(area1, area2, area3)\r\n        \r\n    print(\"--------------------------------------------\")\r\n    print(\"Comparing %1.1f acres, %1.1f sq miles, and %1.1f sq km\" % (area1, area2, area3))\r\n    print(\"--------------------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn9_practice4.py\", [area1, area2, area3])\r\n    \r\n    if output.strip() == expected_output:\r\n        print(\"CORRECT!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", expected_output)\r\n        print(\"\\n\")\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))\r\n    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))\r\n    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))\r\n\r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 5, "problem_id": "lsn9_practice3", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a program that asks the user for the price of an item in US dollars /\ncents. Then calculate and print out the equivalent price of the item in:\n\n  *     * British Pounds (1.25 USD per Pound)\n    * Korean Won (1 Won == 0.00083 USD)\n    * Mexican Pesos (1 Peso == 53.81 Won)\n\nPrint each currency on a separate line.\n\n\n", "code": "\nUSD = float(input(\"Enter the price of the item in US dollars/cents: \"))\n\nGBP = USD/1.25\nKRW = USD/0.00083\nMXN = KRW/53.81\n\nprint(\"Price in British Pounds: \", GBP)\nprint(\"Price in Korean Won: \", KRW)\nprint(\"Price in Mexican Pesos: \", MXN)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    \r\n    dollar_amount = round(random.uniform(1.00, 1000.00), 2)\r\n    pound_amount = dollar_amount / 1.25\r\n    won_amount = dollar_amount / 0.00083\r\n    peso_amount = won_amount / 53.81\r\n    \r\n    output, error_message = autograder.run_script(\"lsn9_practice3.py\", [dollar_amount])   \r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) > 0 and autograder.equals(lines[0], pound_amount):\r\n        print(\"Correct Pound Conversion\")\r\n        score += 33\r\n    else:\r\n        print(\"Incorrect Pound Conversion.  Expected\", pound_amount)\r\n        \r\n    if len(lines) > 1 and autograder.equals(lines[1], won_amount):\r\n        print(\"Correct Won Conversion\")\r\n        score += 33\r\n    else:\r\n        print(\"Incorrect Won Conversion.  Expected\", won_amount)\r\n        \r\n    if len(lines) > 2 and autograder.equals(lines[2], peso_amount):\r\n        print(\"Correct Peso Conversion\")\r\n        score += 34\r\n    else:\r\n        print(\"Incorrect Peso Conversion.  Expected\", peso_amount)\r\n    \r\n    return score\r\n        \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 6, "problem_id": "lsn9_practice2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a program that gets two (x, y) coordinates from\nthe user.  Write a program that calculates the distance between these two\npoints, and prints them out.\n\nHINT:  You will have to use the math module.\n\n\n", "code": "\nimport math\n\ndef calculate_distance(x1, y1, x2, y2):\n    distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    return distance\n\nx1 = int(input(\"Enter the x coordinate of the first point: \"))\ny1 = int(input(\"Enter the y coordinate of the first point: \"))\nx2 = int(input(\"Enter the x coordinate of the second point: \"))\ny2 = int(input(\"Enter the y coordinate of the second point: \"))\n\ndistance = calculate_distance(x1, y1, x2, y2)\nprint(\"The distance between the two points is:\", distance)\n```\n", "testcase": "from cs110 import autograder\nimport random, math\n\nnum_tests_passed = 0\nnum_tests_run = 0\n\ndef run_test():\n    global num_tests_run, num_tests_passed\n    \n    x1 = round(random.uniform(-10, 10), 1)\n    y1 = round(random.uniform(-10, 10), 1)\n    x2 = round(random.uniform(-10, 10), 1)\n    y2 = round(random.uniform(-10, 10), 1)\n    \n    num_tests_run += 1\n    solution = math.sqrt(abs(x1-x2)**2 + abs(y1-y2)**2)\n    \n    print(\"--------------------------------------------\")\n    print(\"Calculating distance between (%1.1f, %1.1f) and (%1.1f, %1.1f)\" % (x1, y1, x2, y2))\n    print(\"--------------------------------------------\")\n    output, error_message = autograder.run_script(\"lsn9_practice2.py\", [x1, y1, x2, y2], False)\n    print(\"Your Output:\", output.strip())\n    \n    if autograder.equals(output, solution):\n        print(\"CORRECT!\\n\")\n        num_tests_passed += 1\n    else:\n        print(\"INCORRECT\")    \n        print(\"Expected:\", solution)\n        print(\"\\n\")\n\n# Runs the Python script and sees if it passes the test(s)\ndef test_passed():\n    run_test()\n    run_test()\n\n    return round(num_tests_passed * (100 / num_tests_run), 1)\n\n        \n# Runs your code in an IDE (for testing purposes)\nif __name__ == '__main__':    \n    result = test_passed()\n    print(\"Unit Test Returned:\", result)\n\n\n\n\n\n\n\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 7, "problem_id": "lsn9_practice1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a program that prints out the class year.\nWrite the approrpriate input statement above this line to make this program\nwork.\n\n\n", "code": "\n# Prompt the user to enter the class year\nyear = input(\"Enter the class year: \")\n\n# Print out the class year\nprint(\"Class Year:\", year)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(class_year):\r\n    global num_tests_run, num_tests_passed\r\n    \r\n    num_tests_run += 1\r\n    solution = \"Members of the class of \" + str(class_year) + \" arrived at USAFA in \" + str(class_year - 4)\r\n    \r\n    print(\"--------------------------------------------\")\r\n    print(\"Testing Class Year =\", class_year)\r\n    print(\"--------------------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn9_practice1.py\", [class_year], False)\r\n        \r\n    if output.strip() == solution:\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT\")\r\n        print(\"Your Output:\", output.strip())\r\n        print(\"Expected:\", solution)\r\n        if \".0\" in output.strip():\r\n            print(\"*** HINT:  Is year a floating point number? ***\")\r\n        print(\"\\n\")\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(random.randint(1959, 2024))\r\n    run_test(random.randint(1959, 2024))\r\n\r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 8, "problem_id": "lsn8_uod", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou've been asked to develop a tool to help identify the uniform of the day,\nbased on temperature and wind speed.\n\nThe command center has provided the following table for guidance:\n\n| Temperature  \n---|---  \nWind Speed |  | <40 | 40 | >40 and <60 | 60 | >60  \n<15 | Parkas | A-Jackets | A-Jackets | A-Jackets | Blues  \n15 | ABUs | ABUs | Parkas | Parkas | Blues  \n>15 | ABUs | ABUs | Parkas | Parkas | A-Jackets  \n  \nCreate a Python program that first gets the temperature (in degrees\nFahrenheit) and then the wind speed (in knots) from the user. You may assume\nthat all inputs are non-negative numbers.\n\nIt should then output the correct response, as described above.\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\n\r\n# The Actual Solution\r\ndef solution(temp, wind):\r\n    if temp < 40:\r\n        if wind < 15:\r\n            return \"Parkas\"\r\n        else:\r\n            return \"ABUs\"\r\n    elif temp == 40:\r\n        if wind < 15:\r\n            return 'A-Jackets'\r\n        else:\r\n            return 'ABUs'\r\n    elif temp > 40 and temp <= 60:\r\n        if wind < 15:\r\n            return 'A-Jackets'\r\n        else:\r\n            return 'Parkas'\r\n    else:\r\n        if wind <= 15:\r\n            return 'Blues'\r\n        else:\r\n            return 'A-Jackets'\r\n\r\n\r\ndef run_test(temp, wind):\r\n    global num_tests_passed\r\n    \r\n    print(\"Testing Temp =\", temp, 'and Wind =', wind)\r\n    output, error_message = autograder.run_script(\"lsn8_uod.py\", [temp, wind], False)\r\n    \r\n    print(\"Output:\", output.strip())\r\n    \r\n    if output.strip() == solution(temp, wind):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT.  Expected:\", solution(temp, wind), \"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(39, 14)\r\n    run_test(39, 15)\r\n    run_test(39, 16)\r\n    run_test(40, 14)\r\n    run_test(40, 15)\r\n    run_test(40, 16)\r\n    run_test(50, 14)\r\n    run_test(50, 15)\r\n    run_test(50, 16)\r\n    run_test(60, 14)\r\n    run_test(60, 15)\r\n    run_test(60, 16)\r\n    run_test(61, 14)\r\n    run_test(61, 15)\r\n    run_test(61, 16)\r\n    \r\n    return round(num_tests_passed * (100 / 15), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 9, "problem_id": "lsn8_speeding", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a program that gets a speed (in miles per hour). You may assume that\nall inputs are non-negative numbers.\n\nIt should output the kind of ticket a police officer should give the driver\n(according to the table below).\n\nSpeed (mph) | <= 65 | >65 and <= 70 | >70 and <= 75 | > 75 and <= 80 | > 80  \n---|---|---|---|---|---  \nTicket | No Ticket | Warning | Speeding | Reckless Driving | Reckless\nEndangerment  \n  \n**EXAMPLES:**\n\n| Example 1 | Example 2 | Example 3 | Example 4 | Example 5  \n---|---|---|---|---|---  \nInput | 48 | 68 | 72 | 78 | 136  \nExpected Output  | No Ticket | Warning | Speeding | Reckless Driving |\nReckless Endangerment\n\n\n", "code": "\nspeed = int(input(\"Enter the speed (in miles per hour): \"))\n\nif speed <= 65:\n    ticket = \"No Ticket\"\nelif speed <= 70:\n    ticket = \"Warning\"\nelif speed <= 75:\n    ticket = \"Speeding\"\nelif speed <= 80:\n    ticket = \"Reckless Driving\"\nelse:\n    ticket = \"Reckless Endangerment\"\n\nprint(\"Ticket:\", ticket)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# The Actual Solution\r\ndef solution(speed):\r\n    # Determines what to return based on the table\r\n    if (speed <= 65):\r\n        return \"No Ticket\"\r\n    elif (speed >65 and speed <= 70):\r\n        return \"Warning\"\r\n    elif (speed > 70 and speed <= 75):\r\n        return \"Speeding\"  \r\n    elif (speed >75 and speed <= 80):\r\n        return \"Reckless Driving\"\r\n    elif (speed > 80):\r\n        return \"Reckless Endangerment\"\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    num_tests_passed = 0\r\n    \r\n    SPEEDS_TO_TEST = [random.randint(0, 65),\r\n                      65,\r\n                      random.randint(66, 70),\r\n                      70,\r\n                      random.randint(71, 75),\r\n                      75,\r\n                      random.randint(76, 80),\r\n                      80,\r\n                      random.randint(81, 100)]\r\n    \r\n    for i in range(0, len(SPEEDS_TO_TEST)):\r\n        print(\"-------------------------------\")\r\n        print(\"Test\", i+1)\r\n        print(\"-------------------------------\")\r\n        speed = SPEEDS_TO_TEST[i]\r\n        output, error_message = autograder.run_script(\"lsn8_speeding.py\", [speed])\r\n        \r\n        if output.strip() == solution(speed):\r\n            print(\"SUCCESS!\\n\")\r\n            num_tests_passed += 1\r\n        else:\r\n            print(\"INCORRECT.  Expected:\", solution(speed), \"\\n\")\r\n    \r\n    return round(num_tests_passed * (100 / len(SPEEDS_TO_TEST)), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 10, "problem_id": "lsn8_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a program that gets the user's body\ntemperature. If the body temperature is between 97-99 (inclusive), print\n\"Normal\". Otherwise, print \"Abnormal\"\n\n\n", "code": "\ntemperature = float(input(\"Enter your body temperature: \"))\n\nif temperature >= 97 and temperature <= 99:\n    print(\"Normal\")\nelse:\n    print(\"Abnormal\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\n# The Actual Solution\r\ndef solution(gpa, apa, mpa):\r\n    if gpa < 2.0 or apa < 2.0 or mpa < 2.0:\r\n        return \"Probation\"\r\n    else:\r\n        return \"No Probation\"\r\n\r\n\r\ndef run_test(gpa, apa, mpa):\r\n    global num_tests_run, num_tests_passed\r\n    \r\n    num_tests_run += 1\r\n    \r\n    print(\"--------------------------------------------\")\r\n    print(\"Testing GPA =\", str(gpa) + \";\", \"APA =\", str(apa) + \";\", \"MPA =\", mpa)\r\n    print(\"--------------------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_skill2.py\", [gpa, apa, mpa], False)\r\n        \r\n    print(output.strip())\r\n        \r\n    if output.strip() == solution(gpa, apa, mpa):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT.  Expected:\", solution(gpa, apa, mpa), \"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    #round(random.uniform(0.1, 1.9),1)\r\n    #round(random.uniform(2.1, 4.0),1)\r\n    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1))\r\n    run_test(round(random.uniform(0.1, 1.9),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1))\r\n    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(0.1, 1.9),1), round(random.uniform(2.1, 4.0),1))\r\n    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(0.1, 1.9),1))\r\n\r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 11, "problem_id": "lsn8_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a program that gets the user's body\ntemperature. If the body temperature is between 97-99 (inclusive), print\n\"Normal\". Otherwise, print \"Abnormal\"\n\n\n", "code": "\ntemperature = float(input(\"Enter your body temperature: \"))\n\nif temperature >= 97 and temperature <= 99:\n    print(\"Normal\")\nelse:\n    print(\"Abnormal\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\n# The Actual Solution\r\ndef solution(body_temperature):\r\n    if body_temperature >= 97 and body_temperature <= 99:\r\n        return \"Normal\"\r\n    else:\r\n        return \"Abnormal\"\r\n\r\n\r\ndef run_test(body_temperature):\r\n    global num_tests_run, num_tests_passed\r\n    \r\n    num_tests_run += 1\r\n    \r\n    print(\"--------------------------------------------\")\r\n    print(\"Testing Temperature =\", body_temperature)\r\n    print(\"--------------------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_skill1.py\", [body_temperature], False)\r\n        \r\n    if output.strip() == solution(body_temperature):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT.  Expected:\", solution(body_temperature), \"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(96.9)\r\n    run_test(97)\r\n    run_test(98.5)\r\n    run_test(99)\r\n    run_test(99.1)\r\n\r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 12, "problem_id": "lsn8_roundtrip", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a Python program that gets three values from the user:\n\n  * The distance to a destination (in miles)\n  * The amount of fuel in the user's car (in gallons)\n  * The # of miles the user's car can travel per gallon of gas (i.e., Miles Per Gallon)\n\nYou may assume that all inputs are non-negative numbers.\n\nCalculate the amount of fuel needed to reach the destination. Then output\nwhether or not the user needs to refuel during a round trip, using the below\ntable as a guide:\n\nFuel Consumed (One-Way) | =< 50% | > 50% and <= 100% | > 100%  \n---|---|---|---  \nOutput | No Refueling Needed | Refuel on Way Back | Refuel En Route  \n  \n**EXAMPLES:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 100  \n10  \n30 | 100  \n5  \n20 | 100  \n7  \n10  \nOutput | No Refueling Needed | Refuel on Way Back | Refuel En Route  \n  \n**NOTE: Your Output Must Match Exactly**\n\n\n", "code": "\n# Get input from the user\ndistance = float(input(\"Enter the distance to the destination (in miles): \"))\nfuel = float(input(\"Enter the amount of fuel in your car (in gallons): \"))\nmpg = float(input(\"Enter the number of miles your car can travel per gallon of gas (Miles Per Gallon): \"))\n\n# Calculate the fuel needed to reach the destination\nfuel_needed = distance / mpg\n\n# Determine if refueling is needed\nif fuel_needed <= fuel:\n    print(\"No Refueling Needed\")\nelif fuel_needed <= 2 * fuel:\n    print(\"Refuel on Way Back\")\nelse:\n    print(\"Refuel En Route\")\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    points_earned = 0\r\n            \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 1\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_roundtrip.py\", [100,10,30])\r\n    \r\n    if output.strip() == \"No Refueling Needed\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 33\r\n    else:\r\n        print(\"Incorrect.  Expected: No Refueling Needed\\n\")\r\n        \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 2\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_roundtrip.py\", [100,5,20])\r\n    \r\n    if output.strip() == \"Refuel on Way Back\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 33\r\n    else:\r\n        print(\"Incorrect.  Expected: Refuel on Way Back\\n\")\r\n    \r\n        # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 3\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_roundtrip.py\", [100,7,10])\r\n    \r\n    if output.strip() == \"Refuel En Route\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 34\r\n    else:\r\n        print(\"Incorrect.  Expected: Refuel En Route\\n\")\r\n\r\n    return points_earned\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 13, "problem_id": "lsn8_lists", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite an algorithm that gets a decimal GPA, APA, and MPA from the user (in\nthat order). You may assume that all inputs are non-negative whole numbers.\n\nIt then reports which meritorious list the cadet is on. If the GPA is equal to\nor above 3.0, the cadet is on the \"Dean's List\", and if the APA is equal to or\nabove 3.0, the cadet is on the \"Athletic Director's List\", and if the MPA is\nequal to or above 3.0, the cadet is on the \"Commandant's List\". Finally, if\nthe cadet qualifies for all three individual lists, then the cadet is on the\n\"Superintendent's List\". The algorithm should report all the lists the cadet\nis on (in the order defined above), unless the cadet is on the Superintendents\nList, in which case, it should report only, \"Superintendent's List\".\n\n| No List | Dean's List | Athletic Director's List | Commandant's List |\nSuperintendent's List  \n---|---|---|---|---|---  \nGPA | < 3.0 | >= 3.0 | n/a | n/a | >= 3.0  \nAPA | < 3.0 | n/a | >= 3.0 | n/a | >= 3.0  \nMPA | < 3.0 | n/a | n/a | >= 3.0 | >= 3.0  \n  \n**EXAMPLES:**\n\nExample 1 | Example 2 | Example 3 | Example 4 | Example 5  \n---|---|---|---|---  \nInput | 2.8  \n2.6  \n2.5 | 3.5  \n3.2  \n2.8 | 3.3  \n2.8  \n3.4 | 3.6  \n3.8  \n3.2 | 2.8  \n3.5  \n3.8  \nOutput | No List | Dean's List  \nAthletic Director's List | Dean's List  \nCommandant's List | Superintendent's List | Athletic Director's List  \nCommandant's List\n\n\n", "code": "\ndef meritorious_list(gpa, apa, mpa):\n    lists = []\n    if gpa >= 3.0:\n        lists.append(\"Dean's List\")\n    if apa >= 3.0:\n        lists.append(\"Athletic Director's List\")\n    if mpa >= 3.0:\n        lists.append(\"Commandant's List\")\n    if gpa >= 3.0 and apa >= 3.0 and mpa >= 3.0:\n        lists = [\"Superintendent's List\"]\n    return lists\n\ngpa = float(input(\"Enter GPA: \"))\napa = float(input(\"Enter APA: \"))\nmpa = float(input(\"Enter MPA: \"))\n\nresult = meritorious_list(gpa, apa, mpa)\nfor item in result:\n    print(item)\n```\n\n**Explanation:** \nThe program defines a function `meritorious_list` that takes in three parameters - `gpa`, `apa`, `mpa`. The function checks each parameter against the condition and appends the corresponding meritorious list to the `lists` variable. If all three parameters meet the condition, the `lists` variable is overwritten with only the \"Superintendent's List\". The function then returns the `lists` variable.\n\nIn the main program, it prompts the user to enter the GPA, APA, and MPA values. It then calls the `meritorious_list` function passing in the user input values. The returned list is stored in the `result` variable. Finally, the program iterates over the `result` list and prints each item.", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\n\r\n# The Actual Solution\r\ndef solution(gpa, apa, mpa):\r\n    answer = \"\"\r\n    \r\n    # Determines what output to present (note how we are using the \" character because of the 's)\r\n    if (gpa < 3.0 and apa < 3.0 and mpa < 3.0):\r\n        answer += \"No List\\n\"\r\n    elif (gpa >= 3.0 and apa >= 3.0 and mpa >= 3.0):\r\n        answer += \"Superintendent's List\\n\"\r\n    else:\r\n        # Note that these are 3 separate if statements; we do this because we don't know what list(s) the cadet is on\r\n        if (gpa >= 3.0):\r\n            answer += \"Dean's List\\n\"\r\n        \r\n        if (apa >= 3.0):\r\n            answer += \"Athletic Director's List\\n\"\r\n        \r\n        if (mpa >= 3.0):\r\n            answer += \"Commandant's List\\n\"\r\n\r\n    return answer.strip()\r\n\r\n\r\ndef run_test(gpa, apa, mpa):\r\n    global num_tests_passed\r\n    \r\n    print(\"--------------------------------------------\")\r\n    print(\"Testing GPA =\", str(gpa) + \";\", \"APA =\", str(apa) + \";\", \"MPA =\", mpa)\r\n    print(\"--------------------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_lists.py\", [gpa, apa, mpa])\r\n        \r\n    if output.strip() == solution(gpa, apa, mpa):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT.  Expected:\", solution(gpa, apa, mpa), \"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(2.8, 2.6, 2.5)\r\n    run_test(3.5, 3.2, 2.8)\r\n    run_test(3.3, 2.8, 3.4)\r\n    run_test(3.6, 3.8, 3.2)\r\n    run_test(2.8, 3.5, 3.8)\r\n    \r\n    return round(num_tests_passed * (100 / 5), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 14, "problem_id": "lsn8_fuel", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nWrite an algorithm that gets a fuel load (in lbs) and then a distance to base\n(in nautical miles). You may assume all inputs are non-negative numbers.\n\nIt then outputs what kind of action the pilot should take. If the fuel load is\nless than 50 lbs and the distance to base is less than 70 nm, report \"Return\nto base\", otherwise, report \"Resume flight\".\n\n**EXAMPLES:**\n\n| Example 1 | Example 2 | Example 3 | Example 4  \n---|---|---|---|---  \nInput | 30  \n60 | 60  \n60 | 40  \n80 | 60  \n80  \nOutput | Return to base | Resume flight | Resume flight | Resume flight  \n  \n**Note: Output must match exactly.**\n\n\n", "code": "\nfuel_load = float(input(\"Enter fuel load (in lbs): \"))\ndistance_to_base = float(input(\"Enter distance to base (in nautical miles): \"))\n\nif fuel_load < 50 and distance_to_base < 70:\n    print(\"Return to base\")\nelse:\n    print(\"Resume flight\")\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    points_earned = 0\r\n            \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 1\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_fuel.py\", [30,60])\r\n    \r\n    if output.strip() == \"Return to base\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 25\r\n    else:\r\n        print(\"Incorrect.  Expected: Return to base\\n\")\r\n        \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 2\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_fuel.py\", [60,60])\r\n    \r\n    if output.strip() == \"Resume flight\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 25\r\n    else:\r\n        print(\"Incorrect.  Expected: Resume flight\\n\")\r\n    \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 3\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_fuel.py\", [40,80])\r\n    \r\n    if output.strip() == \"Resume flight\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 25\r\n    else:\r\n        print(\"Incorrect.  Expected: Resume flight\\n\")\r\n\r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 4\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_fuel.py\", [60,80])\r\n    \r\n    if output.strip() == \"Resume flight\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 25\r\n    else:\r\n        print(\"Incorrect.  Expected: Resume flight\\n\")\r\n\r\n    return points_earned\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 15, "problem_id": "lsn7_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a program that gets a temperature from the\nuser. Modify the program to do the following:\n\n  * If the temperature is less than or equal to 32, print \"Water Has Frozen\"\n  * Otherwise (i.e., else), print \"Above Water's Freezing Point\"\n\n\n", "code": "\ntemperature = float(input(\"Enter the temperature: \"))\n\nif temperature <= 32:\n    print(\"Water Has Frozen\")\nelse:\n    print(\"Above Water's Freezing Point\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0.0\r\n    \r\n    if autograder.code_compiles(\"lsn7_skill1.py\"):\r\n        file = open(\"lsn7_skill1.py\", \"r\")\r\n        file_contents = file.read()\r\n    \r\n        print(\"----------------------------------------------------------------------\")\r\n        print(\"*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\")\r\n        print(\"----------------------------------------------------------------------\\n\")\r\n    \r\n        if \"open_window(\" in file_contents:\r\n            print(\"open_window Called\")\r\n            score += 33\r\n        else:\r\n            print(\"open_window does not appear to be called\")\r\n        \r\n        if \"draw_circle(\" in file_contents:\r\n            print(\"draw_circle Called\")\r\n            score += 34\r\n        else:\r\n            print(\"draw_circle does not appear to be called\")\r\n            \r\n        if \"wait_for_close(\" in file_contents:\r\n            print(\"wait_for_close Called\")\r\n            score += 33\r\n        else:\r\n            print(\"wait_for_close does not appear to be called\")\r\n            \r\n    else:\r\n        print(\"There appears to be an error in your python Script that is preventing it from running\")\r\n    \r\n    return score        \r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 16, "problem_id": "lsn7_positive", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a Python  **program**  that gets a floating point number from the user:\n\n  * If the number is positive, print the word `POSITIVE`\n  * Otherwise, print the word `NOT POSITIVE`\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 10 | -5 | 0  \nOutput | POSITIVE | NOT POSITIVE | NOT POSITIVE\n\n\n", "code": "\nnum = float(input(\"Enter a floating point number: \"))\n\nif num > 0:\n    print(\"POSITIVE\")\nelse:\n    print(\"NOT POSITIVE\")\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    points_earned = 0\r\n    \r\n    # Generates Random Values\r\n    negative_value = random.randint(-100, -1)\r\n    positive_value = random.randint(1, 100)\r\n        \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"# Test 1 - Positive Number\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn7_positive.py\", [positive_value])\r\n    \r\n    if output.strip() == \"POSITIVE\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 33\r\n    else:\r\n        print(\"Incorrect Output:\", output)\r\n        print(\"Expected POSITIVE\\n\")\r\n        \r\n    \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"# Test 2 - Negative Number\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn7_positive.py\", [negative_value])\r\n    \r\n    if output.strip() == \"NOT POSITIVE\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 33\r\n    else:\r\n        print(\"Incorrect Output:\", output)\r\n        print(\"Expected NOT POSITIVE\\n\")\r\n        \r\n    \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"# Test 3 - Zero\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn7_positive.py\", [0])\r\n    \r\n    if output.strip() == \"NOT POSITIVE\":\r\n        print(\"CORRECT\")\r\n        points_earned += 34\r\n    else:\r\n        print(\"Incorrect Output:\", output)\r\n        print(\"Expected NOT POSITIVE\\n\")\r\n\r\n    return points_earned\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 17, "problem_id": "lsn7_largest", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a program that takes three integers as parameters, and prints the\nlargest (i.e., highest) number.\n\nEx: If the input is:\n\n    \n    \n    7\n    15\n    3\n    \n\nYour function should return:\n\n    \n    \n    15\n    \n\n  \nIn the event that all 3 numbers are the same, output that number.\n\nEx: If the input is:\n\n    \n    \n    5\n    5\n    5\n    \n\nYour function should return:\n\n    \n    \n    5\n\n\n", "code": "\ndef find_largest(a, b, c):\n    if a == b == c:\n        return a\n    elif a >= b and a >= c:\n        return a\n    elif b >= a and b >= c:\n        return b\n    else:\n        return c\n\na = int(input())\nb = int(input())\nc = int(input())\nlargest = find_largest(a, b, c)\nprint(largest)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef run_test(num1, num2, num3):\r\n    print(\"-------------------------------\")\r\n    print(\"# Testing: \" + str(num1) + \" \" + str(num2) + \" \" + str(num3))\r\n    print(\"-------------------------------\")\r\n    \r\n    output, error_message = autograder.run_script(\"lsn7_largest.py\", [num1, num2, num3])\r\n    \r\n    if autograder.equals(output, max(num1, num2, num3)):\r\n        print(\"CORRECT\\n\")\r\n        return True\r\n    else:\r\n        print(\"Incorrect.  Expected\", max(num1, num2, num3))\r\n        return False\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    tests_passed = 0\r\n    \r\n    # Generate 3 Random Numbers\r\n    num1 = 0\r\n    num2 = 0\r\n    num3 = 0\r\n    \r\n    # Ensures that the 3 Numbers are Different\r\n    while num1 == num2 or num1 == num3 or num2 == num3:\r\n        num1 = random.randint(0, 100)\r\n        num2 = random.randint(0, 100)\r\n        num3 = random.randint(0, 100)\r\n    \r\n    # Sorts the numbers\r\n    # This is needed so that we can test relationships between numbers\r\n    numbers = [num1, num2, num3]\r\n    numbers.sort()\r\n    num1 = numbers[0]\r\n    num2 = numbers[1]\r\n    num3 = numbers[2]\r\n    \r\n    # Test 1:  num1, num2, num3\r\n    if run_test(num1, num2, num3):\r\n        tests_passed += 1\r\n\r\n    # Test 2:  num1, num3, num2\r\n    if run_test(num1, num3, num2):\r\n        tests_passed += 1\r\n        \r\n    # Test 3:  num2, num3, num1\r\n    if run_test(num2, num3, num1):\r\n        tests_passed += 1\r\n    \r\n    # Test 4:  num3, num1, num2\r\n    if run_test(num3, num1, num2):\r\n        tests_passed += 1\r\n\r\n    # Test 5:  num2, num1, num3\r\n    if run_test(num2, num1, num3):\r\n        tests_passed += 1\r\n    \r\n    # Test 6:  3 Equal Numbers\r\n    if run_test(num1, num1, num1):\r\n        tests_passed += 1\r\n            \r\n    print(\"Passed \" + str(tests_passed) + \" out of 6 tests\")\r\n    return round(tests_passed * (100 / 6), 1)\r\n    \r\n    \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 18, "problem_id": "lsn7_classyear", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nUsing the below table as a guide, write a Python program that takes the user's\nclass year as input, and outputs their cadet class. If the class year is\nbefore 2021, output \"Graduate\". Alternatively, if the class year is larger\nthan 2024, output \"Not a Cadet\".\n\nYou may assume that all inputs provided to your application are years\n(represented as Integers)\n\n| Example 1 | Example 2 | Example 3 | Example 4 | Example 5 | Example 6  \n---|---|---|---|---|---|---  \nInput | 2021 | 2022 | 2023 | 2024 | 2020 | 2025  \nOutput | Firstie | Two Degree | Three Degree | Four Degree | Graduate | Not a\nCadet\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef solution(class_year):\r\n    if class_year < 2021:\r\n        return \"Graduate\"\r\n    elif class_year == 2021:\r\n        return \"Firstie\"\r\n    elif class_year == 2022:\r\n        return \"Two Degree\"\r\n    elif class_year == 2023:\r\n        return \"Three Degree\"\r\n    elif class_year == 2024:\r\n        return \"Four Degree\"\r\n    else:\r\n        return \"Not a Cadet\"\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    START_YEAR = 2020\r\n    END_YEAR = 2025\r\n    number_correct = 0\r\n    \r\n    for year in range(START_YEAR, END_YEAR + 1):\r\n        print(\"------------------------------\")\r\n        print(\"Testing: \" + str(year))\r\n        print(\"------------------------------\")\r\n        \r\n        # Runs the Script\r\n        output, error_message = autograder.run_script(\"lsn7_classyear.py\", [year])\r\n                \r\n        lines = output.split(\"\\n\")\r\n               \r\n        if lines[0] == solution(year):\r\n            print(\"PASS\\n\")\r\n            number_correct += 1\r\n        else:\r\n            print(\"FAIL\\n\")\r\n    \r\n    print(\"Passed \" + str(number_correct) + \" out of \" + str(END_YEAR - START_YEAR + 1) + \" tests\")\r\n    return round(number_correct * (100 / (END_YEAR - START_YEAR + 1)), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 19, "problem_id": "lsn7_atmosphere", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** The Earth's atmosphere is divided into a series of layers. Write an\nalgorithm that asks the user for the altitude in kilometers. Then output the\ncorresponding layer according to the following table:\n\nAltitude | \u226410km | >10km&\u226450km | >50km&\u226485km | >85km&\u22641000km |\n>1000km&\u2264100,000km | >100,000km  \n---|---|---|---|---|---|---  \n**Layer** | Troposphere | Stratosphere | Mesosphere | Thermosphere | Exosphere\n| Space\n\n\n", "code": "\naltitude = float(input(\"Enter the altitude in kilometers: \"))\n\nif altitude <= 10:\n    layer = \"Troposphere\"\nelif altitude <= 50:\n    layer = \"Stratosphere\"\nelif altitude <= 85:\n    layer = \"Mesosphere\"\nelif altitude <= 1000:\n    layer = \"Thermosphere\"\nelif altitude <= 100000:\n    layer = \"Exosphere\"\nelse:\n    layer = \"Space\"\n\nprint(\"The corresponding layer is\", layer)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(altitude):\r\n    if altitude >= 0:\r\n        if altitude <= 10:\r\n            return \"Troposphere\"\r\n    if altitude >= 11:\r\n        if altitude <= 50:\r\n            return \"Stratosphere\"\r\n    if altitude >= 51:\r\n        if altitude <= 85:\r\n            return \"Mesosphere\"\r\n    if altitude >= 86:\r\n        if altitude <= 1000:\r\n            return \"Thermosphere\"\r\n    if altitude >= 1001:\r\n        if altitude <= 100000:\r\n            return \"Exosphere\"\r\n        else:\r\n            return \"Space\"\r\n        \r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    TEST_VALUES = [0, 1, 10, 11, 50, 51, 85, 86, 1000, 1001, 100000, 100001]\r\n    tests_passed = 0\r\n    \r\n    for altitude in TEST_VALUES:\r\n        print(\"--------------------------\")\r\n        print(\"Testing \" + str(altitude) + \" km\")\r\n        print(\"--------------------------\")\r\n        \r\n        # Runs the Script\r\n        output, error_message = autograder.run_script(\"lsn7_atmosphere.py\", [altitude])\r\n                               \r\n        # Your Test Goes Here (Return True if Pass, False Otherwise)   \r\n        if output.strip() == solution(altitude):\r\n            print(\"Passed\\n\")\r\n            tests_passed += 1\r\n        else:\r\n            print(\"Failed (Expected: \" + solution(altitude) + \")\\n\")\r\n    \r\n    print(\"Passed\", tests_passed, \"out of\", len(TEST_VALUES), \"tests.\")\r\n    return round(tests_passed * (100 / len(TEST_VALUES)), 2)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 20, "problem_id": "lsn6_temperature", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nWrite an algorithm that prompts the user for a temperature in \u00b0F and then\noutputs K and \u00b0C in that order.\n\n**EXAMPLE:**\n\n| Example 1 | Example 2  \n---|---|---  \nInput | 32 | 0  \nOutput | 273.15  \n0 | 255.372  \n-17.778  \n  \n**Note: Output must match within a predefined tolerance.**\n\n\n", "code": "\ndef convert_temperature():\n    fahrenheit = float(input(\"Enter the temperature in \u00b0F: \"))\n    \n    kelvin = (fahrenheit + 459.67) * (5/9)\n    celsius = (fahrenheit - 32) * (5/9)\n    \n    print(\"K:\", kelvin)\n    print(\"\u00b0C:\", celsius)\n\n\nconvert_temperature()\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    degrees_farenheit = random.random() * 451.0\r\n    degrees_celsius = (degrees_farenheit - 32.0) * 5/9\r\n    degrees_kelvin = degrees_celsius + 273.15\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn6_temperature.py\", [degrees_farenheit])\r\n    \r\n    lines = output.split('\\n')\r\n    \r\n    if autograder.equals(lines[0], degrees_kelvin):\r\n        print(\"Conversion to Kelvin looks good.\")\r\n        if autograder.equals(lines[1], degrees_celsius):\r\n            print(\"Conversion to Celsius looks good.\")\r\n            return 100.0\r\n        else:\r\n            print(\"Conversion to Celsius incorrect.\\nYour result: \" + str(lines[1]) + \"\\nExpected: \" + str(degrees_celsius))\r\n            return 50.0\r\n    else:\r\n        if autograder.equals(lines[0], degrees_celsius):\r\n            print(\"Looks like you swapped the order of your output. Look at the Problem Statement and try again.\")\r\n        else:\r\n            print(\"Conversion to Kelvin incorrect.\\nYour result: \" + str(lines[0]) + \"\\nExpected: \" + str(degrees_kelvin))\r\n        return 0.0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 21, "problem_id": "lsn6_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a template that gets a distance and speed from\nthe user, and calculates the travel time. Unfortunately, the code does not\nwork. Analyze the code (and error message) and fix the problem.\n\n\n", "code": "\ndef calculate_travel_time():\n    distance = float(input(\"Enter the distance in miles: \"))\n    speed = float(input(\"Enter the speed in mph: \"))\n    \n    time = distance / speed\n    \n    return time\n\ntravel_time = calculate_travel_time()\nprint(\"The travel time is\", travel_time, \"hours.\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\n# The Actual Solution\r\ndef solution(gpa, apa, mpa):\r\n    if gpa < 2.0 or apa < 2.0 or mpa < 2.0:\r\n        return \"Probation\"\r\n    else:\r\n        return \"No Probation\"\r\n\r\n\r\ndef run_test(gpa, apa, mpa):\r\n    global num_tests_run, num_tests_passed\r\n    \r\n    num_tests_run += 1\r\n    \r\n    print(\"--------------------------------------------\")\r\n    print(\"Testing GPA =\", str(gpa) + \";\", \"APA =\", str(apa) + \";\", \"MPA =\", mpa)\r\n    print(\"--------------------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn6_skill2.py\", [gpa, apa, mpa])\r\n        \r\n    print(output.strip())\r\n        \r\n    if output.strip() == solution(gpa, apa, mpa):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT.  Expected:\", solution(gpa, apa, mpa), \"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    #round(random.uniform(0.1, 1.9),1)\r\n    #round(random.uniform(2.1, 4.0),1)\r\n    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1))\r\n    run_test(round(random.uniform(0.1, 1.9),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1))\r\n    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(0.1, 1.9),1), round(random.uniform(2.1, 4.0),1))\r\n    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(0.1, 1.9),1))\r\n\r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 22, "problem_id": "lsn6_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Prompt the user for 3 different values. Store the values in variables using\nthe names specified within the template. DO NOT include any prompts when\nasking for a value from the user.\n\n\n", "code": "\n# Prompt the user for 3 different values\nvalue1 = input(\"Enter value 1: \")\nvalue2 = input(\"Enter value 2: \")\nvalue3 = input(\"Enter value 3: \")\n\n# Store the values in variables using the names specified\nvalue_1 = int(value1)\nvalue_2 = float(value2)\nvalue_3 = str(value3)\n\n# Print the values\nprint(value_1)\nprint(value_2)\nprint(value_3)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\n# The Actual Solution\r\ndef solution(body_temperature):\r\n    if body_temperature >= 97 and body_temperature <= 99:\r\n        return \"Normal\"\r\n    else:\r\n        return \"Abnormal\"\r\n\r\n\r\ndef run_test(body_temperature):\r\n    global num_tests_run, num_tests_passed\r\n    \r\n    num_tests_run += 1\r\n    \r\n    print(\"--------------------------------------------\")\r\n    print(\"Testing Temperature =\", body_temperature)\r\n    print(\"--------------------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn6_skill1.py\", [body_temperature])\r\n        \r\n    if output.strip() == solution(body_temperature):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT.  Expected:\", solution(body_temperature), \"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(96.9)\r\n    run_test(97)\r\n    run_test(98.5)\r\n    run_test(99)\r\n    run_test(99.1)\r\n\r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 23, "problem_id": "lsn6_projectile", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nWrite a python program that can calculate the range of a projectile when fired\nfrom an artillery on level ground. Your program will ask the user to input the\ninitial velocity (`v`) and angle in degrees (`theta`). Your program should\nthen calculate and print the range using the following formula:\n\n`range = (v^2 * sin(2 * theta)) / 9.8`  \n **WARNING: The above formula is not valid Python.**  \n  \n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 800  \n45 | 600  \n30 | 535.2  \n81.7  \nOutput | 65306.122 | 31813.178 | 8350.235  \n  \n**Hints**\n\n  * You need to use the `math` module's trig functions to solve this problem. Type `import math` at the top of your code to add it to your program.\n  * The `sin()` and `cos()` functions assume that the angle is in  **radians**\n\n\n", "code": "\nimport math\n\nv = float(input(\"Enter the initial velocity: \"))\ntheta = float(input(\"Enter the angle in degrees: \"))\n\ntheta = math.radians(theta)\n\nrange = (v**2 * math.sin(2 * theta)) / 9.8\n\nprint(\"The range is\", range)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    NUM_TESTS = 5\r\n    num_correct = 0\r\n    \r\n    for i in range(NUM_TESTS):\r\n        # Generates Random Values\r\n        velocity = random.randint(400, 900)\r\n        theta = random.random() * 90.0\r\n        answer = (velocity**2 * math.sin(2 * theta * math.pi/180.0)) / 9.8   \r\n            \r\n        print(\"----------------------------------------\")\r\n        print(\"TEST CASE\", i+1)\r\n        print(\"----------------------------------------\")\r\n        \r\n        # Runs the Script\r\n        output, error_message = autograder.run_script(\"lsn6_projectile.py\", [velocity, theta])\r\n\r\n        # Optional:  Displays the Error Message (if one is provided)\r\n        if error_message != '':\r\n            print(\"Error Occurred: \" + error_message)    \r\n        \r\n        lines = output.split('\\n')\r\n        \r\n        if autograder.equals(lines[0], answer):\r\n            print(\"CORRECT.\\n\\n\")\r\n            num_correct += 1\r\n        else:\r\n            print(\"INCORRECT (Expected: \" + str(answer) + \")\\n\\n\")\r\n    \r\n    return (100 / NUM_TESTS) * num_correct\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 24, "problem_id": "lsn6_math", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nGiven three floating-point numbers x, y, and z, output the square root of x,\nthe absolute value of (y minus z) , and the factorial of (the ceiling of z).\nEach input should be on a new line, and rounded to a maximum of 2 decimal\nplaces.\n\n(Hint: use the [`round` (Links to an external\nsite.)](https://docs.python.org/3/library/functions.html#round) function to\nround your outputs!):\n\n`round(# to round, # of digits to round to)`\n\n**EXAMPLE:**\n\n    \n    \n    5.0\n    6.5\n    3.2\n    \n\nThen the output is:\n\n    \n    \n    2.24\n    3.30\n    24.00\n    \n\nNOTE: Decimal places may be slightly off depending on the exact numbers used.\n\n\n", "code": "\nimport math\n\nx = float(input())\ny = float(input())\nz = float(input())\n\nprint(round(math.sqrt(x), 2))\nprint(round(abs(y - z), 2))\nprint(round(math.factorial(math.ceil(z)), 2))\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num1 = random.random() * 100.0\r\n    num2 = random.random() * 100.0\r\n    num3 = random.random() * 10.0\r\n    \r\n    part1 = round(math.sqrt(num1), 2)\r\n    part2 = round(math.fabs(num2 - num3), 2)\r\n    part3 = round(math.factorial(math.ceil(num3)), 2)\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn6_math.py\", [num1, num2, num3])\r\n    \r\n    lines = output.split('\\n')\r\n    \r\n    if autograder.equals(lines[0], part1, 0.001) and autograder.equals(lines[1], part2, 0.001) and autograder.equals(lines[2], part3, 0.001):\r\n        print(\"Looks Good!\")\r\n        return 100\r\n    else:\r\n        print(\"One or more calculations did not work. Expected:\\n\" + str(part1) + \"\\n\" + str(part2) + \"\\n\" + str(part3))\r\n        return 0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 25, "problem_id": "lsn6_calories", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nThe following equations estimate the calories burned when exercising ([source\n(Links to an external\nsite.)](https://web.archive.org/web/20121021230025/http://fitnowtraining.com/2012/01/formula-\nfor-calories-burned/)):\n\nMen: Calories = ( (Age x 0.2017) + (Weight x 0.09036) + (Heart Rate x 0.6309)\n-- 55.0969 ) x Time / 4.184\n\nWomen: Calories = ( (Age x 0.074) -- (Weight x 0.05741) + (Heart Rate x\n0.4472) -- 20.4022 ) x Time / 4.184\n\nWrite a program using inputs age (years), weight (pounds), heart rate (beats\nper minute), and time (minutes), respectively. Output calories burned for men\nand women.\n\nOutput each floating-point value (your program will be marked correct so long\nas it outputs a value within a predefined range)\n\n**EXAMPLE:**\n\nIf the input is:\n\n    \n    \n    49\n    155\n    148\n    60\n    \n\nThen the output is:\n\n    \n    \n    891.47\n    580.94\n\n\n", "code": "\nage = int(input())\nweight = int(input())\nheart_rate = int(input())\ntime = int(input())\n\ncalories_men = ((age * 0.2017) + (weight * 0.09036) + (heart_rate * 0.6309) - 55.0969) * time / 4.184\ncalories_women = ((age * 0.074) - (weight * 0.05741) + (heart_rate * 0.4472) - 20.4022) * time / 4.184\n\nprint(\"{:.2f}\".format(calories_men))\nprint(\"{:.2f}\".format(calories_women))\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    age_years = random.randint(10, 99)\r\n    weight_pounds = random.randint(80, 400)\r\n    heart_bpm = random.randint(50, 140)\r\n    time_minutes = random.randint(15, 90)\r\n    \r\n    calories_man   = ( (age_years * 0.2017) + (weight_pounds * 0.09036) + (heart_bpm * 0.6309) - 55.0969 )  * time_minutes / 4.184\r\n    calories_woman = ( (age_years * 0.074)  - (weight_pounds * 0.05741) + (heart_bpm * 0.4472) - 20.4022 ) * time_minutes / 4.184\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn6_calories.py\", [age_years, weight_pounds, heart_bpm, time_minutes])\r\n      \r\n    lines = output.split('\\n')\r\n      \r\n    if autograder.equals(lines[0], calories_man):\r\n        print(\"Male Calorie Calculations Look Good.\")\r\n        if autograder.equals(lines[1], calories_woman):\r\n            print(\"Female Calorie Calculations Look Good.\")\r\n            return 100.0\r\n        else:\r\n            print(\"Female Calorie Calculation is Incorrect.\\nExpected: \" + str(calories_woman))\r\n            return 50.0\r\n    else:\r\n        print(\"Male Calorie Calculation is Incorrect.\\nExpected: \" + str(calories_man))\r\n        return 0.0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 26, "problem_id": "lsn6_bits_to_kmg", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nOne byte is comprised of 8 bits. A typical computer program has a requirement\nfor much more memory. Therefore, many bytes can be grouped together to make\nlarger memory amounts. Our convention is for computer memory is scaled in\nlogical increments of 210 = 1024.\n\nFor example:\n\n  * 1024 bytes = 1 kilobyte (KB)\n  * 1024 KB = 1 megabyte (MB)\n  * 1024 MB = 1 gigabyte (GB)\n\nWrite an algorithm that prompts the user for a number of bits and then outputs\nthe equivalent number of kilobytes, megabytes, and gigabytes.\n\n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 1000000 | 6879000 | 92445694  \nOutput | 122.07  \n0.12  \n0.00012 | 839.72  \n0.82  \n.0008 | 11,284.87  \n11.02  \n0.01  \n  \n**Note: Output must match within a predefined tolerance.**\n\n\n", "code": "\ndef conversion(bits):\n    kilobytes = bits / (8 * 1024)\n    megabytes = bits / (8 * 1024 * 1024)\n    gigabytes = bits / (8 * 1024 * 1024 * 1024)\n    \n    return kilobytes, megabytes, gigabytes\n\nbits = int(input(\"Enter the number of bits: \"))\nkilobytes, megabytes, gigabytes = conversion(bits)\nprint(kilobytes)\nprint(megabytes)\nprint(gigabytes)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num_bits = random.randint(1, 1000000)\r\n    num_bytes = num_bits / 8\r\n    num_kb = num_bytes / 1024\r\n    num_mb = num_kb / 1024\r\n    num_gb = num_mb / 1024\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn6_bits_to_kmg.py\", [num_bits])\r\n      \r\n    lines = output.split('\\n')\r\n      \r\n    if autograder.equals(lines[0], num_kb):\r\n        print(\"Kilobyte Conversion Looks Good.\")\r\n        if autograder.equals(lines[1], num_mb):\r\n            print(\"Megabyte Conversion Looks Good.\")\r\n            if autograder.equals(lines[2], num_gb):\r\n                print(\"Gigabyte Conversion Looks Good.\")\r\n                return 100.0\r\n            else:\r\n                print(\"Num GB is Incorrect.\\n  Expected: \" + str(num_gb))\r\n                return 67.0\r\n        else:\r\n            print(\"Num MB is Incorrect.\\n  Expected: \" + str(num_mb))\r\n            return 33.0\r\n    else:\r\n        print(\"Num KB is Incorrect.\\n  Expected: \" + str(num_kb))\r\n        return 0.0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 27, "problem_id": "lsn6_bits_to_bytes", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\n**PROBLEM STATEMENT:  \n**\n\nThe basic unit of computer memory is a bit. A bit can represent two values (on\nor off, 0 or 1). To represent more information, bits are grouped together in\nlarger quantities. Beyond a bit, the next logical grouping is a byte, where 1\nbyte has 8 bits. Write an algorithm that prompts the user for a number of bits\nand then outputs the equivalent number of bytes.\n\n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 8 | 800 | 7234  \nOutput | 1.0 | 100.0 | 904.25  \n  \n**Note: Output must match exactly.**\n\n\n", "code": "\n# get the number of bits from the user\nnum_bits = int(input(\"Enter the number of bits: \"))\n\n# calculate the number of bytes\nnum_bytes = num_bits / 8\n\n# print the result\nprint(num_bytes)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num_bits = random.randint(1, 1000000)\r\n    num_bytes = num_bits / 8\r\n\r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn6_bits_to_bytes.py\", [num_bits])\r\n      \r\n    if autograder.equals(output, num_bytes):\r\n        print(\"Num Bytes Looks Good.\")\r\n        return 100.0\r\n    else:\r\n        print(\"Num Bytes is Incorrect.\\nExpected: \" + str(num_bytes))\r\n        return 0.0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 28, "problem_id": "lsn6_bit_representation", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nOne way bits can hold information is computer images. Computer images are\ncomposed of a grid of small, independent colored cells known as pixels. The\nnumber of colors each pixel can hold is related to the number bits allocated\nto each pixel. A simple black and white image, for example, would have a\nsingle bit per pixel, where the value of the bit would represent black or\nwhite for that pixel. Allocating 2 bits per pixel would allow each pixel to\nhave one of four colors.\n\nGenerally speaking, the number of color options available to a particular\npixel can be described as:\n\n    \n    \n    numberofcolors = 2number of bits\n\nIn Python, write an algorithm that prompts the user for a number of bits and\nthen outputs the number of different colors that could be represented by a\nsingle pixel.\n\n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 3 | 8 | 24  \nOutput | 8 | 256 | 16777216  \n  \n**Note: Output must match exactly.**\n\n\n", "code": "\nbits = int(input(\"Enter the number of bits: \"))\ncolors = 2**bits\nprint(colors)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num_bits = random.randint(1, 32)\r\n    num_colors = 2 ** num_bits\r\n\r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn6_bit_representation.py\", [num_bits])\r\n      \r\n    if autograder.equals(output, num_colors):\r\n        print(\"Num Colors Looks Good.\")\r\n        return 100.0\r\n    else:\r\n        print(\"Num Colors is Incorrect.\\nExpected: \" + str(num_colors))\r\n        return 0.0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 29, "problem_id": "lsn5_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a program that gets a cadet's age, and stores it in a variable called\n**your_age.**\n\nPrint the user's age + 4.\n\nFor example, if the user types:\n\n    \n    \n     18\n\nYour program should print:\n\n    \n    \n    22\n\n\n", "code": "\nyour_age = int(input())\n\nprint(your_age + 4)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    points_earned = 0\r\n            \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 1 - CS110\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn5_skill2.py\", [\"CS110\"])\r\n    \r\n    if output.strip() == \"You get to program!\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 50\r\n    else:\r\n        print(\"Incorrect.  Expected: You get to program!\\n\")\r\n        \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 2 - Another Class\")\r\n    print(\"-------------------------------\")\r\n    classes = ['Math 151', 'English 111', 'Physics 110']\r\n    random_class = classes[random.randint(0, len(classes)-1)]\r\n    output, error_message = autograder.run_script(\"lsn5_skill2.py\", [random_class])\r\n    \r\n    if output.strip() == \"Boo, no programming.\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 50\r\n    else:\r\n        print(\"Incorrect.  Expected: Boo, no programming.\\n\")\r\n\r\n    return points_earned\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 30, "problem_id": "lsn5_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Create a variable called  **name,  **and set it equal to your name\n(represented as a string--don't forget to use the quotation marks!).\n\n\n", "code": "\nname = \"John\"\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    points_earned = 0\r\n    \r\n    # Generates Random Values\r\n    above_freezing = random.uniform(33, 100)\r\n    below_freezing = random.uniform(-100, 31)\r\n    at_freezing    = 32\r\n        \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 1 - Below Freezing\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn5_skill1.py\", [below_freezing])\r\n    \r\n    if output.strip() == \"Water Has Frozen\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 33\r\n    else:\r\n        print(\"Incorrect.  Expected: Water Has Frozen\\n\")\r\n        \r\n    \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 2 - Above Freezing\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn5_skill1.py\", [above_freezing])\r\n    \r\n    if output.strip() == \"Above Water's Freezing Point\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 33\r\n    else:\r\n        print(\"Incorrect.  Expected: Above Water's Freezing Point\\n\")\r\n        \r\n    \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 3 - Exactly 32 Degrees\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn5_skill1.py\", [32])\r\n    \r\n    if output.strip() == \"Water Has Frozen\":\r\n        print(\"CORRECT\")\r\n        points_earned += 34\r\n    else:\r\n        print(\"Incorrect.  Expected: Water Has Frozen\\n\")\r\n\r\n    return points_earned\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 31, "problem_id": "lsn5_scoreaverage", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write an algorithm that prompts the user for three sports game scores and\noutputs the average.\n\n  \n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 8  \n15  \n12 | 89  \n103  \n63 | 14  \n42  \n36  \nOutput | 11.666666666666666 | 85.0 | 30.666666666666668  \n  \n**Note: Output must match (within a predefined tolerance).**\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    score1 = random.randint(0, 100)\r\n    score2 = random.randint(0, 100)\r\n    score3 = random.randint(0, 100)\r\n    average = (score1 + score2 + score3) / 3.0\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn5_scoreaverage.py\", [score1, score2, score3])\r\n    \r\n    if autograder.equals(output, average):\r\n        print(\"PASSED!\")\r\n        return 100\r\n    else:\r\n        print(\"Value doesn't match.\\nExpected: \" + str(average))\r\n        return 0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 32, "problem_id": "lsn5_pointspread", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nA \"Point Spread\" is a term used to in sports (and gambling) to describe the\ndifference between two teams' scores. For example, if one team scores 20\npoints and another team scores 30 points, the point spread is 10. A point\nspread is always a positive number.\n\nWrite an algorithm that prompts the user for two sports game scores and\noutputs the point spread.  \n  \n**  \nEXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 8  \n15 | 89  \n103 | 42  \n14  \nOutput | 7 | 14 | 28  \n  \n**Note: Output must match exactly.**\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    score1 = random.randint(0, 50)\r\n    score2 = random.randint(score1, 100)\r\n    spread = abs(score1 - score2)\r\n\r\n    points_earned = 0\r\n\r\n    # Trial #1:  score 1 > score2\r\n    print(\"Testing when score 1 is bigger than score 2 . . .\")\r\n    output, error_message = autograder.run_script(\"lsn5_pointspread.py\", [score1, score2])\r\n    \r\n    if autograder.equals(output, spread):\r\n        print(\"PASSED!\\n\")\r\n        points_earned += 50\r\n    else:\r\n        print(\"Value doesn't match.\\nExpected: \" + str(spread)  + \"\\n\")\r\n        \r\n    # Trial #2:  score 2 > score1\r\n    print(\"Testing when score 2 is bigger than score 1 . . .\")\r\n    output, error_message = autograder.run_script(\"lsn5_pointspread.py\", [score2, score1])\r\n    \r\n    if autograder.equals(output, spread):\r\n        print(\"PASSED!\")\r\n        points_earned += 50\r\n    else:\r\n        print(\"Value doesn't match.\\nExpected: \" + str(spread))\r\n    \r\n    return points_earned\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 33, "problem_id": "lsn5_madlib", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Mad Libs are activities that have a person provide various words, which are\nthen used to complete a short story in unexpected (and hopefully funny) ways.\n(EDITOR'S NOTE: Do you kids even do Mad Libs anymore?)\n\nComplete the program to read the needed values from input, that the existing\noutput statement(s) can use to output a short story.\n\n**EXAMPLE:**\n\nIf the input is:\n\n    \n    \n    Eric\n    Chipotle\n    12\n    burritos\n    \n\nThen the output is:\n\n    \n    \n    Eric went to Chipotle to buy 12 different types of burritos\n\n\n", "code": "\nname = input()\nrestaurant = input()\nnumber = input()\nfood = input()\n\noutput = f\"{name} went to {restaurant} to buy {number} different types of {food}\"\n\nprint(output)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    first_names = ['Adrian', 'Troy', 'Dave', 'Paul', 'Kelly', 'Steve', 'Barry']\r\n    generic_locations = ['Best Buy', 'AAFES', 'Target', 'THE Walmart', 'Home Depot']\r\n    nouns = ['Video Games', 'Board Games', 'Nintendo Switches', 'Sony PS4s', 'Microsoft (Ugh) Xbox Ones']\r\n    \r\n    first_name = first_names[random.randint(0, len(first_names) - 1)]\r\n    generic_location = generic_locations[random.randint(0, len(generic_locations) - 1)]\r\n    whole_number = random.randint(0, 100)\r\n    plural_noun = nouns[random.randint(0, len(nouns) - 1)]\r\n\r\n    expected_output = first_name + ' went to ' + generic_location + ' to buy ' + str(whole_number) + ' different types of ' + plural_noun + \"\\n\"\r\n\r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn5_madlib.py\", [first_name, generic_location, whole_number, plural_noun])\r\n    \r\n    if output == expected_output:\r\n        print(\"PASSED!\")\r\n        return 100\r\n    else:\r\n        print(\"String doesn't match.\\nExpected: \" + expected_output)\r\n        return 0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 34, "problem_id": "lsn5_girlscouts", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a program that asks the user for the amount of money he/she has on\nhand, and outputs the number of girl scout cookies that he/she can purchase.\nUse the following prices:\n\n$5 per box for the \"Super Six\" (Thin Mints, Samoas, Tagalongs, Do-Si-Dos,\nTrefoils, Savannah Smiles)  \n$6 per box for the Specialty Cookies (S'mores, Toffee-tastic)\n\n**For this problem, assume that the user will buy all of one or the other. In\nother words, output the number of boxes that he/she would be able to obtain if\nhe/she bought nothing but the Super Six, and nothing but the Specialty\nCookies.**\n\n**HINT:**  \nYou can convert a number to an integer by using the int() function. For\nexample:  \n **int(2.51)** will convert the number to 2\n\nEXAMPLE:  \nIf the input is:\n\n    \n    \n    26\n\nThen the output is:\n\n    \n    \n    5 boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles  \n    4 boxes of S'mores and Toffee-tastic\n\n\n", "code": "\ndef calculate_cookies(money):\n    super_six_price = 5\n    specialty_price = 6\n\n    super_six_boxes = int(money / super_six_price)\n    specialty_boxes = int(money / specialty_price)\n\n    return super_six_boxes, specialty_boxes\n\nmoney = int(input(\"Enter the amount of money you have: \"))\n\nsuper_six_boxes, specialty_boxes = calculate_cookies(money)\n\nprint(f\"{super_six_boxes} boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles\")\nprint(f\"{specialty_boxes} boxes of S'mores and Toffee-tastic\")\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    dollar_amount = round(random.uniform(10.00, 100.00), 2)\r\n    super_six_amount = (dollar_amount // 5)\r\n    specialty_amount = (dollar_amount // 6)\r\n    score = 0\r\n    \r\n    line_1 = str(int(super_six_amount)) + \" boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles\"\r\n    line_2 = str(int(specialty_amount)) + \" boxes of S'mores and Toffee-tastic\"\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn5_girlscouts.py\", [dollar_amount])\r\n    output_lines = output.split('\\n')\r\n    \r\n    if line_1 == output_lines[0]:\r\n        print(\"First Line is Correct\")\r\n        score += 50\r\n    else:\r\n        print(\"First Line is Incorrect.  Expected:\", line_1)\r\n    \r\n    if line_2 == output_lines[1]:\r\n        print(\"Second Line is Correct\")\r\n        score += 50\r\n    else:\r\n        print(\"Second Line is Incorrect.  Expected:\", line_2)\r\n    \r\n    return score\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 35, "problem_id": "lsn5_arrivaltime", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite an algorithm that prompts the user for a distance to travel (in miles)\nand a speed (in mph) and outputs time of arrival in hours.\n\n  \n**For Example:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 72  \n60 | 1282  \n85 | 120.5  \n59.2  \nOutput | 1.2 | 15.0823 | 2.0355  \n  \n**Note: Output needs to match the examples.**\n\n\n", "code": "\ndistance = float(input(\"Enter the distance to travel (in miles): \"))\nspeed = float(input(\"Enter the speed (in mph): \"))\n\ntime_of_arrival = distance / speed\n\nprint(\"Time of arrival: {:.4f} hours\".format(time_of_arrival))\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    distance = round(random.random() * 1000, 1)\r\n    speed = round(random.random() * 60, 1)\r\n    time = distance / speed\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn5_arrivaltime.py\", [distance, speed])\r\n    \r\n    if autograder.equals(output, time):\r\n        print(\"PASSED!\")\r\n        return 100\r\n    else:\r\n        print(\"Value doesn't match.\\nExpected: \" + str(time))\r\n        return 0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 36, "problem_id": "lsn4_printpractice", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nThe template file contains various words/phrases that you need to print out\n(exactly as written) using Python's `print()` function. For example:\n\n  1. Print the phrase \"Welcome to Computer Science 110!\"\n\n  2. Print the result to the following math expression: (640 * 480 * 24) / 8\n\n  3. etc (see the template for details)\n\nEach print statement should be written directly below the corresponding\ncomment. While you can technically \"cheat\" on this problem, we encourage you\nto practice all the various ways that you can use the `print` function. You\nwill thank us later!\n\n\n", "code": "\n# Print the phrase \"Welcome to Computer Science 110!\"\nprint(\"Welcome to Computer Science 110!\")\n\n# Print the result of the following math expression: (640 * 480 * 24) / 8\nprint((640 * 480 * 24) / 8)\n", "testcase": "from cs110 import autograder\r\n\r\ndef test_passed():\r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn4_printpractice.py\", [])\r\n\r\n    student_output = output.strip().split('\\n')\r\n    expected_output = ['Welcome to Computer Science 110!', '921600.0', 'Liam is 8 years old', 'F-15  Eagle', 'F-16  Fighting Falcon', 'B-2   Spirit', 'C-141 Starlifter']\r\n    num_matches = autograder.compare_strings(student_output, expected_output)\r\n    \r\n    return round(num_matches * (100 / len(expected_output)), 1)\r\n\r\n\r\n# Testbench (to be run in an IDE)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 37, "problem_id": "lsn4_parking", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nWrite a program that prints a formatted \"No parking\" sign as shown below. Note\nthe first line has two leading spaces. For ALL labs, end with newline (unless\notherwise stated).\n\n    \n    \n     NO PARKING  \n    1:00 - 5:00 a.m.  \n      \n    \n\n\n", "code": "\nprint(\"  NO PARKING\")\nprint(\"1:00 - 5:00 a.m.\")\nprint()\n", "testcase": "from cs110 import autograder\r\n\r\ndef test_passed():\r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn4_parking.py\", [])\r\n        \r\n    if output.startswith(\"  NO PARKING\\n\"):\r\n        if output == \"  NO PARKING\\n1:00 - 5:00 a.m.\\n\":\r\n            print(\"Passed!\")\r\n            return 100\r\n        else:\r\n            print(\"Something is wrong with the second line.\")\r\n            return 50\r\n    else:\r\n        print(\"Something is wrong with the first line.\")\r\n        return 0\r\n\r\n# Testbench (to be run in an IDE)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 38, "problem_id": "lsn4_ascii", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a Python program that prints out a cat:\n\n    \n    \n    /\\ /\\\n     o o\n     = =\n     ---  \n      \n    \n\n_Hint: A backslash  `\\` in a string acts as an escape character, such as with\na newline_ `\\n`.  _So, to print an actual backslash, escape that backslash by\nprepending another backslash. Ex: The following prints a single backslash:_\n`print('\\\\')`\n\n\n", "code": "\nprint(\"  /\\\\ /\\\\\")\nprint(\" o o\")\nprint(\" = =\")\nprint(\" ---\")\n", "testcase": "from cs110 import autograder\r\n\r\ndef test_passed():\r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn4_ascii.py\", [])\r\n    \r\n    lines = output.split('\\n')\r\n    \r\n    # Checks for the Cat\r\n    if lines[0].rstrip() == '/\\\\   /\\\\':\r\n        #test_feedback.write('1')\r\n        if lines[1].rstrip() == '  o o':\r\n            #test_feedback.write('2')\r\n            if lines[2].rstrip() == ' =   =':\r\n                #test_feedback.write('3')\r\n                if lines[3].rstrip() == '  ---':\r\n                    #test_feedback.write('4')\r\n                    print('Cat Looks Good!\\n')\r\n                    return 100\r\n                else:\r\n                    print('Problem in the fourth line of the cat') \r\n            else:\r\n                print('Problem in the third line of the cat')  \r\n        else:\r\n            print('Problem in the second line of the cat')  \r\n    else:\r\n        print('Problem in the first line of the cat')\r\n    \r\n    return 0\r\n\r\n# Testbench (to be run in an IDE)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 39, "problem_id": "lsn33_practice8", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nYou have been provided with a file called oscar_age_male.csv, which contains\ninformation about male oscar award winners from the 1920s to 2015. Here is a\ntypical line from the file:\n\n    \n    \n    1928,44,Emil Jannings,The Last Command\n\nAs always, each data element corresponds to a different piece of information.\nHere is a table that describes how to interpret each column:\n\n**Year** | **Actor Age** | **Name** | **Film**  \n---|---|---|---  \n1928 | 44 | Emil Jannings | The Last Command  \n  \n\n\nWrite a Python program that reads this file, and gets the following inputs\nfrom the user:\n\n  *     * A start year\n    * An end year\n\nYour program should output the age of the youngest actor during that time span\n(including the start and end years), as well as the names of all actors that\nare within 5 years (inclusive) of the youngest age. For simplicity's sake,\ndon't try to calculate the current age of the actors; just go with what is in\nthe file.\n\n\n\nFor example, if the youngest actor is 25, and the names of the actors within 5\nyears of the youngest age are Bob and Tom, your program should output:  \n  \n25  \nBob  \nTom\n\n\n\n\n", "code": "\nimport csv\n\n# Read the CSV file and store the data in a list of dictionaries\ndata = []\nwith open(\"oscar_age_male.csv\", \"r\") as file:\n    reader = csv.DictReader(file)\n    for row in reader:\n        data.append(row)\n\n# Get input from the user\nstart_year = int(input(\"Enter start year: \"))\nend_year = int(input(\"Enter end year: \"))\n\n# Initialize variables\nyoungest_age = float(\"inf\")\nyoungest_actors = []\n\n# Iterate over the data and find the youngest actor within the specified time span\nfor row in data:\n    year = int(row[\"Year\"])\n    age = int(row[\"Actor Age\"])\n    name = row[\"Name\"]\n    \n    if year >= start_year and year <= end_year:\n        if age < youngest_age:\n            youngest_age = age\n            youngest_actors = [name]\n        elif age == youngest_age:\n            youngest_actors.append(name)\n\n# Print the youngest age and the names of the actors within 5 years of the youngest age\nprint(youngest_age)\nfor actor in youngest_actors:\n    print(actor)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ninputs  = [[1994, 2010], [1955, 1979], [1960, 1969]]\r\noutputs = [['29', 'Nicolas Cage', 'Adrien Brody'],\r\n           ['30', 'Marlon Brando', 'Maximilian Schell', 'Richard Dreyfuss'],\r\n           ['31', 'Charlton Heston', 'Maximilian Schell']]\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_index = random.randint(0, len(inputs)-1)\r\n    print(random_index)\r\n    input_list = inputs[random_index]\r\n    expected_output = outputs[random_index]\r\n    \r\n    output, error = autograder.run_script(\"lsn33_practice8.py\", input_list)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_output)\r\n       \r\n    return round(num_matches * (100.0 / len(expected_output)), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 40, "problem_id": "lsn33_practice7", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**SIMPLE PIG LATIN RULES:**\n\n  *  If the word starts with a vowel, add 'way' to the end of the word. \n  *  If the word starts with a consonant, take the first letter, put it on the end of the word and ad 'ay' to the end.\n\n**PROBLEM STATEMENT:**\n\nWrite a function called **pig_latin  **take takes in a string of words and\nreturns the string converted to pig latin.\n\nExample 1 | Example 2  \n---|---  \nInput | \"Lets test this out\" | \"Rick Astley is my hero\"  \nExpected Output | \"etsLay esttay histay outway \" | \"ickRay Astleyway isway\nymay erohay\"\n\n\n", "code": "\ndef pig_latin(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    words = sentence.split()\n    pig_latin_sentence = ''\n    \n    for word in words:\n        if word[0].lower() in vowels:\n            pig_word = word + 'way '\n        else:\n            pig_word = word[1:] + word[0] + 'ay '\n        \n        pig_latin_sentence += pig_word\n    \n    return pig_latin_sentence.strip()\n\n# Test Cases\nprint(pig_latin(\"Lets test this out\"))  # etsLay esttay histay outway\nprint(pig_latin(\"Rick Astley is my hero\"))  # ickRay Astleyway isway ymay erohay\n", "testcase": "import webbrowser\r\n\r\nprint(\"That's it, the video is the joke. Feel free to practice this problem but there's not an actual score.\")\r\n\r\nwebbrowser.open('https://www.youtube.com/watch?v=dQw4w9WgXcQ')\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 41, "problem_id": "lsn33_practice6", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite a python program that gets a temperature from the user, a level of\nprecipitation (rain, snow, none), and a humidity level (high, medium, low).\nUsing the following rules, print the correct output.\n\n  * If the temperature is above 84.9 degrees, and the humidity is 'high' or 'medium', print 'Walk slowly'.\n  * If the precipitation is 'snow' or 'rain', print 'Do not run!'.\n  * For all other situations, print 'Move quickly'.\n\n\n\n  | **Example 1** | **Example 1**  \n---|---|---  \n**Input(s)** |\n\n85  \nrain  \nhigh\n\n|\n\n75  \nsnow  \nlow  \n  \n**Expected Output** | Walk slowly | Do not run!  \n  \n\n\n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(temp, precip, humidity):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"--------------------------------------------------------------\")\r\n    print(\"Testing temperature =\", temp, \"precipitation =\", precip, \"humidity =\", humidity)\r\n    print(\"--------------------------------------------------------------\")\r\n    \r\n    # SOLUTION\r\n    if temp > 84.9 and (humidity == 'high' or humidity == 'medium'):\r\n        solution = 'Walk slowly'\r\n    elif precip == 'snow' or precip == 'rain':\r\n        solution = 'Do not run!'\r\n    else:\r\n        solution = 'Move quickly'\r\n    \r\n    output, error_message = autograder.run_script(\"lsn33_practice6.py\", [temp, precip, humidity])\r\n    \r\n    if output.strip() == solution:\r\n        print(\"CORRECT!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", solution)\r\n        print(\"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    # options for random test cases\r\n    humidity_list = ['high', 'medium', 'low']\r\n    precip_list = ['snow', 'rain', 'none']\r\n    \r\n    # pick random sample for each test case\r\n    for i in range(10):\r\n        humidity = random.choice(humidity_list)\r\n        precip = random.choice(precip_list)\r\n        if precip == 'snow':\r\n            temp_list = [12, 14, 20, 32, 41]\r\n        else:\r\n            temp_list = [77, 84.9, 92]\r\n        temp = random.choice(temp_list)\r\n        \r\n        # run test\r\n        run_test(temp, precip, humidity)\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 42, "problem_id": "lsn33_practice5", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nBoyle's Law states, for an ideal gas, that the pressure (p) multiplied by #\nthe volume of a container (v) is always constant. So, if we have an initial\npressure and volume (p1 * v1 = k) and we decrease the volume (v2) the pressure\n(v2) must increase. The formula for this is\n\n    \n    \n    p1 * v1 = p2 * v2\n\nWrite a python program the gets the first pressure, first volume, and second\nvolume. Calculate the new pressure and print it to the console.\n\n\n\n  | **Example 1**  \n---|---  \n**Input(s)** |\n\n25  \n100  \n150  \n  \n**Expected Output** | 16.667  \n  \n\n\n\n\n\n", "code": "\np1 = float(input())\nv1 = float(input())\nv2 = float(input())\n\np2 = (p1 * v1) / v2\n\nprint(p2)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(p1, v1, v2):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"--------------------------------------------------------------\")\r\n    print(\"Testing pressure 1 =\", p1, \"volume 1 =\", v1, \"volume 2 =\", v2)\r\n    print(\"--------------------------------------------------------------\")\r\n    \r\n    # SOLUTION\r\n    solution = p1 * v1 / v2 \r\n    \r\n    output, error_message = autograder.run_script(\"lsn33_practice5.py\", [p1, v1, v2])\r\n    \r\n    if float(output.strip()) == solution:\r\n        print(\"CORRECT!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", solution)\r\n        print(\"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    for i in range(5):\r\n        run_test(round(random.uniform(0, 100),2), round(random.uniform(0, 100),2), round(random.uniform(0, 100),2))\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 43, "problem_id": "lsn33_practice4", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou are going to be given values for a dictionary. These will be an historic\nlandmark as the key and the location of that landmark as the value. You will\ncontinue to receive input until the user types \"DONE\".\n\nAfter the dictionary is populated, get a landmark key as an input from the\nuser and print the location where the landmark is. If the landmark isn't in\nthe dictionary, print \"Landmark not found\".\n\n\n\n  | **Example 1**  \n---|---  \n**Input(s)** |\n\nPyramids  \nEgypt  \nMt Rushmore  \nSouth Dakota  \nEmpire State Building  \nNew York City  \nDONE  \nMt Rushmore  \n  \n**Expected Output** | South Dakota  \n  \n\n\n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ninput_list = [\"Statue of Liberty\",\r\n              \"New York City\",\r\n              \"Grand Canyon\",\r\n              \"Airzona\",\r\n              \"Tower of Pisa\",\r\n              \"Italy\",\r\n              \"Pikes Peak\",\r\n              \"Colorado\",\r\n              \"Liberty Bell\",\r\n              \"Pennsylvania\",\r\n              \"Sears Tower\",\r\n              \"Chicago\",\r\n              \"DONE\",\r\n              \"Statue of Liberty\"]\r\n\r\nexpected_output = [\"New York City\"]\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    output, error = autograder.run_script(\"lsn33_practice4.py\", input_list)\r\n    lines = output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_output)\r\n       \r\n    return round(num_matches * (100.0 / len(expected_output)), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 44, "problem_id": "lsn33_practice3", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou are being provided with three sets. Each set contains the brands of cars\nthat a car dealer is willing to sell.\n\nWrite a Python Program that gets the name of a brand from the user. Then have\nit print \"Dealer 1\", \"Dealer 2\", and/or \"Dealer 3\" (one per line) depending on\nwhether or not the dealer sells that type of car.\n\nIf all 3 dealers sell the car brand, output \"All Dealers\"\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input(s)** | Toyota | Acura | Ford  \n**Expected Output** | Dealer 2  \nDealer 3 | All Dealers | Dealer 1  \n  \n\n\n\n\n\n", "code": "\ndef check_dealer_brands():\n    dealer_1 = {'Toyota', 'Honda', 'Ford'}\n    dealer_2 = {'Acura', 'Toyota', 'Nissan'}\n    dealer_3 = {'Ford', 'Toyota', 'Chevrolet'}\n\n    brand = input(\"Enter the brand name: \")\n\n    if brand in dealer_1 and brand in dealer_2 and brand in dealer_3:\n        print(\"All Dealers\")\n    elif brand in dealer_1:\n        print(\"Dealer 1\")\n    elif brand in dealer_2:\n        print(\"Dealer 2\")\n    elif brand in dealer_3:\n        print(\"Dealer 3\")\n    else:\n        print(\"No dealers sell that brand\")\n\ncheck_dealer_brands()\n", "testcase": "from cs110 import autograder\r\nimport random, statistics\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    # Hard Coded Test Cases . . . the best\r\n    test_cases = [\r\n                    [['Audi'], [\"Dealer 3\"]],\r\n                    [['Toyota'], [\"Dealer 2\", \"Dealer 3\"]],\r\n                    [['Acura'], [\"All Dealers\"]],\r\n                 ]\r\n    \r\n    for test_case in test_cases:\r\n        print(\"----------------------\")\r\n        print(\"Test Case\", test_cases.index(test_case) + 1)\r\n        print(\"----------------------\")\r\n        \r\n        # Runs the Script\r\n        input_list = test_case[0]\r\n        expected_output = test_case[1]\r\n        output, error_message = autograder.run_script(\"lsn33_practice3.py\", input_list)\r\n        \r\n        output_list = output.split('\\n')\r\n        \r\n        if len(output_list) - 1 != len(expected_output):\r\n            print(\"Your program's output does not have the expected number of lines\")\r\n        else:\r\n            lines_correct = 0\r\n            for i in range(len(expected_output)):\r\n                if str(expected_output[i]) == output_list[i]:\r\n                    print(\"Line\", i+1, \"is correct\")\r\n                    lines_correct += 1\r\n                else:\r\n                    print(\"Line\", i+1, \"is incorrect (Expected:\" + str(expected_output[i]) + \")\")\r\n            \r\n            score += (100 / len(test_cases)) * (lines_correct / len(expected_output))\r\n        \r\n        print()\r\n        \r\n    return round(score, 1)\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 45, "problem_id": "lsn33_practice2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nIn Star Trek, starships travel across interstellar space at many times the\nspeed of light.  Due to the immense speeds involved, velocity in Star Trek is\ndescribed using a fictitious unit of measurement known as a \"Warp Factor\".\nFor reference, Warp Factor 1.0 is equivalent to the speed of light, whereas\nWarp Factor 9.0 is more than 700 times faster!\n\nWrite a program that asks the user for the number of starships to analyze, as\nwell as a target distance in light years.  Your program will then get the name\nof each starship (e.g., \"USS Enterprise) as well as its maximum cruise speed\n(e.g., 9.6), in that order.\n\nYour program will then output the following:\n\n  * The number of days it would take for the fastest starship to travel the target distance\n  * The names of all ships that can travel the same distance within 7 days (inclusive) of the fastest time\n\n\n\n**HINT:   We have provided you with a function called calculate_travel_time,\nwhich takes a warp factor and distance as parameters, and returns the number\nof days it would take to travel that distance.  Call this function to solve\nthe problem.**\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**Input(s)** | 2  \n1.0  \nUSS Horizon  \n2.0  \nUSS Daedalus  \n2.5 | 2  \n250  \nUSS Voyager  \n9.975  \nUSS Enterprise-E  \n9.8  \n**Expected Output** | 17.2  \nUSS Daedalus | 42.7  \nUSS Voyager  \nUSS Enterprise-E\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, statistics\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    # Hard Coded Test Cases . . . the best\r\n    test_cases = [\r\n                    [[3, 1.0, \"USS Enterprise-D\", 9.6, \"USS Voyager\", 9.975, \"USS Rubicon\", 4.0],\r\n                        [0.2, \"USS Enterprise-D\", \"USS Voyager\", \"USS Rubicon\"]],\r\n                    [[5, 100, \"USS Discovery\", 7.5, \"USS Enterprise-A\", 8, \"USS Constellation\", 9.2, \"USS Farragut\", 9.4, \"USS Stargazer\", 6.0],\r\n                        [20.8, \"USS Constellation\", \"USS Farragut\"]],\r\n                 ]\r\n    \r\n    for test_case in test_cases:\r\n        print(\"----------------------\")\r\n        print(\"Test Case\", test_cases.index(test_case) + 1)\r\n        print(\"----------------------\")\r\n        \r\n        # Runs the Script\r\n        input_list = test_case[0]\r\n        expected_output = test_case[1]\r\n        output, error_message = autograder.run_script(\"lsn33_practice2.py\", input_list)\r\n        \r\n        output_list = output.split('\\n')\r\n        \r\n        if len(output_list) - 1 != len(expected_output):\r\n            print(\"Your program's output does not have the expected number of lines\")\r\n        else:\r\n            lines_correct = 0\r\n            for i in range(len(expected_output)):\r\n                if str(expected_output[i]) == output_list[i]:\r\n                    print(\"Line\", i+1, \"is correct\")\r\n                    lines_correct += 1\r\n                else:\r\n                    print(\"Line\", i+1, \"is incorrect (Expected:\" + str(expected_output[i]) + \")\")\r\n            \r\n            score += (100 / len(test_cases)) * (lines_correct / len(expected_output))\r\n        \r\n        print()\r\n        \r\n    return round(score, 1)\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 46, "problem_id": "lsn33_practice1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite a Python program that keeps asking the user for positive integers until\nthe user types -1.\n\nYour program will then output the following:\n\n  * # of even numbers\n  * Average of all the even numbers (if no even numbers were input, print 0)\n  * # of odd numbers\n  * Average of all the odd numbers (if no odd numbers were input, print 0)\n\nYou may assume that the user will type AT LEAST one number. You cannot assume,\nhowever, that the user will enter both an odd and even number.\n\n\n\nHINT:  \nUse the mod function to determine if a number is even or odd  \n  \nprint(5 % 2) will print \"1\" because there is a remainder of 1 when you divide\n5 by 2\n\nprint(4 % 2) will print \"0\" because there is no remainder when you divide 4 by\n2\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**Input(s)** | 2  \n3  \n4  \n5 | 3  \n5  \n7  \n**Expected Output** | 2  \n3  \n2  \n4 | 0  \n0  \n3  \n5\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, statistics\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    # Hard Coded Test Cases . . . the best\r\n    test_cases = [ [[2, 4, 6, 8, 10, -1], [5, 6, 0, 0]],\r\n                   [[1, 3, 5, 7, 9, -1], [0, 0, 5, 5.0]],\r\n                   [[23, 45, 81, 1, 29, 35, 44, 76, 23, -1], [2, 60.0, 7, 33.857142857142854]]]\r\n    \r\n    for test_case in test_cases:\r\n        # Runs the Script\r\n        input_list = test_case[0]\r\n        expected_output = test_case[1]\r\n        output, error_message = autograder.run_script(\"lsn33_practice1.py\", input_list)\r\n        \r\n        output_list = output.split('\\n')\r\n        \r\n        if len(output_list) - 1 != len(expected_output):\r\n            print(\"Your program's output does not have the expected number of lines\")\r\n        else:\r\n            lines_correct = 0\r\n            for i in range(len(expected_output)):\r\n                if autograder.equals(str(expected_output[i]), output_list[i]):\r\n                    print(\"Line\", i+1, \"is correct\")\r\n                    lines_correct += 1\r\n                else:\r\n                    print(\"Line\", i+1, \"is incorrect (Expected:\" + str(expected_output[i]) + \")\")\r\n            \r\n            score += (100 / len(test_cases)) * (lines_correct / len(expected_output))\r\n            \r\n        \r\n    return round(score, 1)\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 47, "problem_id": "lsn26_plots", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n** In this lab, you are being given the freedom to explore `matplotlib`'s\nplotting capabilities.\n\nThe template ZIP file contains several interesting datasets that we have\ncollected from the internet (although you are free to include any other\ndataset if you wish). Examine these datasets, and generate at least 2\n\"interesting\" graphs. Each plot should use a different dataset. Additionally,\neach plot must be a different type (line and pie graph, etc)\n\nUse the `subplot` feature to make sure all of the graphs fit on one screen.\nMost importantly, make sure you label your axes, give your charts a title, use\ncolor, etc.\n\n  \n**HINT**\n\n  * Use numpy's `genfromtxt` function to read the values in the file. If you forget how to use this function, refer to the lecture video.\n\n\n\n\n", "code": "\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Read the first dataset\ndata1 = np.genfromtxt('dataset1.csv', delimiter=',')\n\n# Read the second dataset\ndata2 = np.genfromtxt('dataset2.csv', delimiter=',')\n\n# Create a subplot with 1 row and 2 columns\nfig, ax = plt.subplots(1, 2)\n\n# Plot line graph for dataset1\nax[0].plot(data1[:, 0], data1[:, 1])\nax[0].set_xlabel('X-axis')\nax[0].set_ylabel('Y-axis')\nax[0].set_title('Line Graph for Dataset 1')\n\n# Plot pie graph for dataset2\nax[1].pie(data2, labels=data2[:, 0])\nax[1].set_title('Pie Graph for Dataset 2')\n\n# Adjust the layout and save the figure\nfig.tight_layout()\nplt.savefig('graphs.png')\n\n# Show the plot\nplt.show()\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn26_plots.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 48, "problem_id": "lsn26_percentile", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Write a Python program that asks the user for the number of assessment\nscores to input, and then gets that many values. Analyze the data using\nnumpy's statistics functions, and print out the following information (one per\nline):\n\n  * the average (i.e., mean)\n  * the number of scores in the 90th percentile (i.e., the number of scores that are at least as high as the 90th percentile score)\n  * the number of scores no more than one standard deviation from the mean\n\n\n", "code": "\nimport numpy as np\n\n# Ask user for the number of assessment scores\nnum_scores = int(input(\"Enter the number of assessment scores: \"))\n\n# Get the assessment scores from the user\nscores = []\nfor i in range(num_scores):\n    score = float(input(\"Enter score #\" + str(i+1) + \": \"))\n    scores.append(score)\n\n# Calculate statistics using numpy\nmean = np.mean(scores)\npercentile_90 = np.percentile(scores, 90)\nstd_dev = np.std(scores)\n\n# Count the number of scores that are at least as high as the 90th percentile score\nnum_above_90_percentile = sum(score >= percentile_90 for score in scores)\n\n# Count the number of scores that are no more than one standard deviation from the mean\nnum_within_1_std_dev = sum(abs(score - mean) <= std_dev for score in scores)\n\n# Print the results\nprint(\"The average is:\", mean)\nprint(\"The number of scores in the 90th percentile is:\", num_above_90_percentile)\nprint(\"The number of scores no more than one standard deviation from the mean is:\", num_within_1_std_dev)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport numpy as np\r\n\r\ndef solution(list_of_scores):\r\n    \r\n    result = []\r\n    num_90th_percentile = 0\r\n    within_std = 0\r\n\r\n    scores_array = np.array(list_of_scores)\r\n    percentile_90 = np.percentile(scores_array, 90)\r\n    stdev = np.std(scores_array)\r\n    average = np.average(scores_array)\r\n\r\n    for s in list_of_scores:\r\n        if s >= percentile_90:\r\n            num_90th_percentile += 1\r\n        if s <= average + stdev and s >= average - stdev:\r\n            within_std += 1\r\n\r\n    result.append(str(average) + '\\n')\r\n    result.append(str(num_90th_percentile) + \"\\n\")\r\n    result.append(str(within_std) + \"\\n\")\r\n    \r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n        \r\n    num_values = random.randint(5, 10)\r\n    values = []\r\n    input_list = [ num_values ]\r\n    \r\n    for i in range(num_values):\r\n        value = random.randint(50, 100)\r\n        values.append(value)\r\n        input_list.append(value)\r\n    \r\n    output, error = autograder.run_script(\"lsn26_percentile.py\", input_list)\r\n    lines = output.strip().split('\\n')\r\n    expected_output = solution(values)\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_output)\r\n       \r\n    return round(num_matches * (100.0 / len(expected_output)), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 49, "problem_id": "lsn26_calculus", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nUsing the numpy module, write a Python program that does the following and\nprints (one answer per line):\n\n  1. Create (and print) the following polynomial as a poly1d: `18x^4 + 12x^2 + 3x + 1`\n\n  2. Print the value of the polynomial when `x = 2`\n\n  3. Print the roots of the polynomial\n\n  4. Print the derivative of the polynomial\n\n  5. Print the instantaneous slope of the polynomial at `x = -1` (HINT: Evaluate the derivative at x = -1)\n\n  6. Print the integral of the polynomial\n\n  7. Calculate area under the curve between `x = 5` and `x = 10` (HINT: Evaluate the integral at x=10, and subtract the integral at x=5)\n\n\n\n\n", "code": "\nimport numpy as np\n\n# Create polynomial\npoly = np.poly1d([18, 12, 3, 1])\nprint(poly)\n\n# Evaluate polynomial at x = 2\nprint(poly(2))\n\n# Find roots of polynomial\nprint(np.roots(poly))\n\n# Find derivative of polynomial\nderivative = np.polyder(poly)\nprint(derivative)\n\n# Evaluate derivative at x = -1\nprint(np.polyval(derivative, -1))\n\n# Find integral of polynomial\nintegral = np.polyint(poly)\nprint(integral)\n\n# Calculate area under the curve between x = 5 and x = 10\narea_under_curve = np.polyval(integral, 10) - np.polyval(integral, 5)\nprint(area_under_curve)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nexpected_output = [\r\n\"    4      2\",\r\n\"18 x + 12 x + 3 x + 1\",\r\n\"343\",\r\n\"[ 0.14325174+0.80294311j  0.14325174-0.80294311j -0.14325174+0.25098038j\",\r\n\" -0.14325174-0.25098038j]\",\r\n\"    3\",\r\n\"72 x + 24 x + 3\",\r\n\"-93\",\r\n\"     5     3       2\",\r\n\"3.6 x + 4 x + 1.5 x + 1 x\",\r\n\"352367.5\",\r\n]\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    output, error = autograder.run_script(\"lsn26_calculus.py\", [])\r\n    lines = output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_output)\r\n       \r\n    return round(num_matches * (100.0 / len(expected_output)), 1)\r\n\r\n        \r\n# Testbench (to run on outside of zyBooks)\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 50, "problem_id": "lsn25_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You are being provided with a function called mini_sort that takes two\nnumbers as parameters. Modify this function so that it returns a tuple\ncontaining the numbers in ascending order.\n\n\n\n**EXAMPLES:**\n\nmini_sort(1, 2) should return the tuple:  (1, 2)\n\nmini_sort(50, 40) should return the tuple:  (40, 50)\n\n\n\n\n", "code": "def mini_sort(num1, num2):\n    if num1 < num2:\n        return (num1, num2)\n    else:\n        return (num2, num1)", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport lsn25_skill2\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    a = random.randint(0, 5)\r\n    b = random.randint(6, 10)\r\n    c = random.randint(100, 200)\r\n    d = random.randint(0, 99)\r\n    \r\n    score = 0\r\n    \r\n    print(\"Test #1.  Calling mini_sort(%d, %d)\" % (a, b))\r\n    output = lsn25_skill2.mini_sort(a, b)\r\n    print(\"  Your Function Returned:\", output)\r\n    if output == (a, b):\r\n        print(\"  CORRECT\\n\")\r\n        score += 50\r\n    else:\r\n        print(\"  INCORRECT.  Expected\", (a, b), \"\\n\")\r\n        \r\n    print(\"Test #2.  Calling mini_sort(%d, %d)\" % (c, d))\r\n    output = lsn25_skill2.mini_sort(c, d)\r\n    print(\"  Your Function Returned:\", output)\r\n    if output == (d, c):\r\n        print(\"  CORRECT\\n\")\r\n        score += 50\r\n    else:\r\n        print(\"  INCORRECT.  Expected\", (d, c), \"\\n\")\r\n    \r\n    return score\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 51, "problem_id": "lsn25_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a dictionary that contains the designator for\nan aircraft (e.g., F-16) and its nickname (e.g., Fighting Falcon). Write a\nprogram that gets a new aircraft designator and nickname from the user, and\nadds it to the dictionary\n\n\n", "code": "\naircraft_dict = {\n    \"F-16\": \"Fighting Falcon\",\n    \"F-22\": \"Raptor\",\n    \"B-52\": \"Stratofortress\",\n    \"A-10\": \"Warthog\"\n}\n\ndesignator = input(\"Enter the aircraft designator: \")\nnickname = input(\"Enter the aircraft nickname: \")\n\naircraft_dict[designator] = nickname\n\nprint(\"Aircraft added to dictionary:\")\nprint(aircraft_dict)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    aircraft_dictionary = {\"F-16\":\"Fighting Falcon\", \"F-22\":\"Raptor\", \"B-2\":\"Spirit\", \"F-15\":\"Eagle\"}\r\n    \r\n    aircraft = [(\"C-141\", \"Starlifter\"), (\"C-5\", \"Galaxy\"), (\"MQ-9\", \"Reaper\")]\r\n    random_aircraft = aircraft[random.randint(0, len(aircraft)-1)]\r\n    aircraft_dictionary[random_aircraft[0]] = random_aircraft[1]\r\n    \r\n    output, error = autograder.run_script(\"lsn25_skill1.py\", random_aircraft)\r\n    \r\n    if output.strip() == str(aircraft_dictionary):\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT. Expected:\")\r\n        print(aircraft_dictionary)\r\n        return 0.0\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 52, "problem_id": "lsn25_rectangle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite a function called `get_rectangle_info` that takes 2 values as\nparameters:\n\n  * A tuple containing the (x, y) coordinate of one corner of a box\n  * A tuple containing the (x, y) coordinate of the opposite corner of a box\n\n\n\nYour function should return a  **tuple**  containing the following information\n(in order):\n\n  * the area of the box\n  * the perimeter of the box\n  * the length of the largest side\n  * the length of the shortest side\n\n\n", "code": "\ndef get_rectangle_info(corner1, corner2):\n    x1, y1 = corner1\n    x2, y2 = corner2\n    width = abs(x2 - x1)\n    height = abs(y2 - y1)\n\n    area = width * height\n    perimeter = 2 * (width + height)\n    largest_side = max(width, height)\n    shortest_side = min(width, height)\n\n    return area, perimeter, largest_side, shortest_side\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport lsn25_rectangle\r\n\r\n# Solution\r\ndef solution(corner1, corner2):\r\n    width = abs(corner1[0] - corner2[0])\r\n    height = abs(corner1[1] - corner2[1])\r\n    largest_side = max(width, height)\r\n    shortest_side = min(width, height)\r\n    area = width * height\r\n    perimeter = width * 2 + height * 2\r\n    \r\n    return (area, perimeter, largest_side, shortest_side)\r\n\r\n\r\n# Runs the test\r\ndef run_test(corner1, corner2):\r\n    global tests_passed\r\n    \r\n    result = lsn25_rectangle.get_rectangle_info(corner1, corner2)\r\n    expected_value = solution(corner1, corner2)\r\n    \r\n    if result is None:\r\n        print(\"Failed with inputs\", corner1, corner2, \"-- Your function did not return anything\")\r\n    elif type(result) is not tuple:\r\n        print(\"Failed with inputs\", corner1, corner2, \"-- Your function did not return a tuple\")\r\n    elif len(result) != 4:\r\n        print(\"Failed with inputs\", corner1, corner2, \"-- Your function did not return a tuple with 4 items in it\")\r\n    elif result == expected_value:\r\n        print(\"Passed with inputs\", corner1, corner2, \"-- Your function correctly returned\", result)\r\n        return True\r\n    else:\r\n        print(\"Failed with inputs\", corner1, corner2, \"-- Your function returned\", result, \"instead of\", expected_value)\r\n\r\n    return False\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    NUM_TESTS = 5\r\n    tests_passed = 0\r\n    \r\n    for i in range(NUM_TESTS):\r\n        # Generate 4 Random Numbers\r\n        x1 = random.randint(-100, 100)\r\n        y1 = random.randint(-100, 100)\r\n        x2 = random.randint(-100, 100)\r\n        y2 = random.randint(-100, 100)\r\n        \r\n        # Makes sure that I didn't accidentally generate a line\r\n        while (x1 == x2):\r\n            x1 = random.randint(-100, 100)            \r\n        while (y1 == y2):\r\n            y1 = random.randint(-100, 100)\r\n    \r\n        if run_test((x1, y1), (x2, y2)):\r\n            tests_passed += 1\r\n    \r\n    return 100/NUM_TESTS * tests_passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 53, "problem_id": "lsn25_midpoint", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Write a function called get_midpoint that takes four values as parameters:\n\n  * X coordinate of the first point\n  * Y coordinate of the first point\n  * X coordinate of the second point\n  * Y coordinate of the second point\n\nYour function should return a tuple containing the midpoint.\n\n\n\n\n", "code": "\ndef get_midpoint(x1, y1, x2, y2):\n    return ((x1 + x2) / 2, (y1 + y2) / 2)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport lsn25_midpoint\r\n\r\n# Runs the test\r\ndef run_test(x1, y1, x2, y2):\r\n    global tests_passed\r\n    \r\n    result = lsn25_midpoint.get_midpoint(x1, y1, x2, y2)\r\n    expected_value = ((x1+x2)/2, (y1+y2)/2)\r\n    \r\n    if result is None:\r\n        print(\"Failed with values %d, %d, %d, and %d.  Your function did not return anything.\" % (x1, y1, x2, y2))\r\n    elif type(result) is not tuple:\r\n        print(\"Failed with values %d, %d, %d, and %d.  Your function did not return a tuple.\" % (x1, y1, x2, y2))\r\n    elif len(result) != 2:\r\n        print(\"Failed with values %d, %d, %d, and %d.  Your function did not return a tuple of length 2.\" % (x1, y1, x2, y2))\r\n    elif result == expected_value:\r\n        print(\"Passed Test Using values %d, %d, %d, and %d. Received (%d, %d)\" % (x1, y1, x2, y2, result[0], result[1]))\r\n        return True\r\n    else:\r\n        print(\"Failed Test Using values %d, %d, %d, and %d. Received (%d, %d), but Expected (%d, %d)\" % (x1, y1, x2, y2, result[0], result[1], expected_value[0], expected_value[1]))\r\n\r\n    return False\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    NUM_TESTS = 5\r\n    tests_passed = 0\r\n    \r\n    for i in range(NUM_TESTS):\r\n        # Generate 4 Random Numbers\r\n        x1 = random.randint(-100, 100)\r\n        y1 = random.randint(-100, 100)\r\n        x2 = random.randint(-100, 100)\r\n        y2 = random.randint(-100, 100)\r\n        \r\n        if run_test(x1, y1, x2, y2):\r\n            tests_passed += 1\r\n    \r\n    return (100 / NUM_TESTS) * tests_passed\r\n        \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 54, "problem_id": "lsn25_contactlist", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite a Python program that stores names and phone numbers for your\nclassmates. Your program will keep asking the user to input names and phone\nnumbers until he/she types \"DONE\". Your program will then store the\nnames/numbers in a dictionary, and allow the user to repeatedly type in names\nuntil he/she types \"DONE\".\n\n  * If name is in the contact list, your program will output the corresponding phone number.\n  * If the name is  **not**  in the contact list, your program will output \"NOT FOUND\"\n\n\n\n**EXAMPLES:**\n\n  | Example  \n---|---  \nInputs | Adrian  \n555-5555  \nLiam  \n666-6666  \nMichelle  \n777-7777  \nDONE  \nAdrian  \nJim  \nDONE  \nOutputs | 555-5555  \nNOT FOUND\n\n\n", "code": "\ncontacts = {}\n\nwhile True:\n    name = input(\"Enter a name (or 'DONE' to quit): \")\n    \n    if name == \"DONE\":\n        break\n    \n    phone_number = input(\"Enter a phone number: \")\n    contacts[name] = phone_number\n\nwhile True:\n    name = input(\"Enter a name to search (or 'DONE' to quit): \")\n    \n    if name == \"DONE\":\n        break\n    \n    if name in contacts:\n        print(contacts[name])\n    else:\n        print(\"NOT FOUND\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ninput_list = [\"Kirk\",\r\n\"555-5555\",\r\n\"Spock\",\r\n\"666-6666\",\r\n\"McCoy\",\r\n\"777-7777\",\r\n\"DONE\",\r\n\"Kirk\",\r\n\"Spock\",\r\n\"Mccoy\",\r\n\"DONE\"]\r\n\r\nexpected_output = [\r\n\"555-5555\",\r\n\"666-6666\",\r\n\"NOT FOUND\",\r\n]\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    output, error = autograder.run_script(\"lsn25_contactlist.py\", input_list)\r\n    lines = output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_output)\r\n       \r\n    return round(num_matches * (100.0 / len(expected_output)), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 55, "problem_id": "lsn24_nasa", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a Python program that repeatedly asks the user for names of famous NASA\nspace missions (e.g., Apollo 11) as well as the year in which the mission took\nplace, until the user types the word \"DONE\" for the mission.\n\nYour program should output:\n\n  1. Year of the **latest mission** (most recent) \n  2. Names of all missions that occurred within 3 years prior to the most recent mission (inclusive)\n\n**EXAMPLES:**\n\n\n\n| Example 1 | Example 2  \n---|---|---  \nInput | Gemini 3  \n1965  \nGemini 4  \n1965  \nGemini 12  \n1966  \nDONE |\n\nMercury 5  \n1961  \nApollo 11  \n1969  \nDONE  \n  \nOutput | 1966  \nGemini 3  \nGemini 4  \nGemini 12 | 1969  \nApollo 11\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nmission_info = [\r\n    ['Apollo 1', 1967],\r\n    ['Apollo 7', 1968],\r\n    ['Apollo 8', 1968],\r\n    ['Apollo 9', 1969],\r\n    ['Apollo 10', 1969],\r\n    ['Apollo 11', 1969],\r\n    ['Apollo 12', 1969],\r\n    ['Apollo 13', 1970],\r\n    ['Apollo 14', 1971],\r\n    ['Apollo 15', 1971],\r\n    ['Apollo 16', 1972],\r\n    ['Apollo 17', 1972],\r\n    ]\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    inputs = []\r\n    expected_outputs = []\r\n    \r\n    mission_table = []\r\n    \r\n    for mission in random.sample(mission_info, 5):\r\n        inputs.append(mission[0])\r\n        inputs.append(mission[1])\r\n        mission_table.append([int(mission[1]), mission[0]])\r\n    inputs.append(\"DONE\")\r\n    \r\n    max_row = max(mission_table)\r\n    expected_outputs.append(str(max_row[0]))\r\n    \r\n    for m in mission_table:\r\n        if (int(m[0]) >= int(max_row[0]) - 3):\r\n            expected_outputs.append(m[1])\r\n    \r\n    output, errors = autograder.run_script(\"lsn24_nasa.py\", inputs)\r\n    lines = output.strip().split('\\n')\r\n    \r\n    lines_match = autograder.compare_strings(lines, expected_outputs)\r\n    \r\n    if lines_match == len(expected_outputs):\r\n        return 100.0\r\n    else:\r\n        return 0.0\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 56, "problem_id": "lsn24_mitches", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a Python Program that analyzes the food at Mitchell Hall. Your program\nwill ask for the number of meals to analyze and then get both:\n\n  1. The name of the meal\n  2. The number of calories per serving\n\nYour program should output the average calorie count of all meals, as well as\nthe names of meals that are with 200 calories of the average (inclusive).\n\n\n\n| **Example 1** | **Example 2**  \n---|---|---  \nInput |\n\n3  \nShepherd's Pie  \n300  \nFoot Long Hot Dog  \n350  \nHamburger  \n960  \n  \n\n| 4  \nPizza  \n600  \nCheeseburger  \n450  \nPancakes  \n1100  \nBurrito  \n900  \nExpected Output | 536.6666666666666  \nFoot Long Hot Dog | 762.5  \nPizza  \nBurrito  \n  \n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nmeal_info = [\r\n    ['Hot Dogs', 600],\r\n    ['French Dip', 540],\r\n    ['Chicken Cordon Bleu', 300],\r\n    ['Turkey Sandwich', 350],\r\n    ['Mitch\\'s Mountain', 1100],\r\n    ['Shepherd\\'s Pie', 272],\r\n    ['Teriyaki Chicken', 250],\r\n    ]\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    inputs = []\r\n    expected_outputs = []\r\n    \r\n    meal_table = []\r\n    table_size = random.randint(3, 5)\r\n    total = 0\r\n    inputs.append(table_size)\r\n    \r\n    for meal in random.sample(meal_info, table_size):\r\n        total += meal[1]\r\n        inputs.append(meal[0])\r\n        inputs.append(meal[1])\r\n        meal_table.append([meal[0], meal[1]])\r\n    \r\n    average = total / len(meal_table)\r\n    expected_outputs.append(str(average))\r\n    \r\n    for m in meal_table:\r\n        if m[1] >= average-200 and m[1] <= average+200:\r\n            expected_outputs.append(m[0])\r\n    \r\n    output, errors = autograder.run_script(\"lsn24_mitches.py\", inputs)\r\n    lines = output.strip().split('\\n')\r\n    \r\n    lines_match = autograder.compare_strings(lines, expected_outputs)\r\n    \r\n    if lines_match == len(expected_outputs):\r\n        return 100.0\r\n    else:\r\n        return 0.0\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 57, "problem_id": "lsn24_education", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nNow that you are a Freshman at USAFA, it might be interesting to learn about\nhow many years men and women spend in school in different countries. In the\nproblem, we have provided you with a dataset called `education.csv` that\ncontains information from various countries about years spent in education.\nHere is a typical line from the file:\n\n\n\n`Zimbabwe,2010,M,15,64,8.04,5.92,2.09,0.03,3926`\n\n\n\nEach position in the line represents a different \"data element\". Here is a key\nfor your reference:\n\nCountry | Year | Gender | Start Age | End Age | Total Years in School |\nPrimary School | Secondary School | Tertiary School | Population (thousands)  \n---|---|---|---|---|---|---|---|---|---  \nZimbabwe | 2010 | M | 15 | 64 | 8.04 | 5.92 | 2.09 | 0.03 | 3926  \n  \n\n\n  \nWrite a Python program that asks the user for the name of country (e.g.,\n\"Zimbabwe\"), followed by a Gender (\"M\" or \"F\"). Your program should print the\naverage number of years that gender spends in school followed by the years\nthat are greater than or equal to the average.\n\n  \nFor example, if \"Zimbabwe\" and \"M\" were entered as the country and gender of\ninterest, respectively, then your program should print out:\n\n**`2.5117241379310347`  \n`1960`  \n`1965`  \n`1970`  \n`1975`  \n`1980`  \n`1985`  \n`1990`  \n`1995`  \n`2000`  \n`2005`  \n`2010`**\n\n\n", "code": "\nimport csv\n\ndef calculate_average_years(country, gender):\n    with open('education.csv', 'r') as file:\n        reader = csv.reader(file)\n        next(reader)  # Skip the header row\n        years_list = []\n        for row in reader:\n            if row[0] == country and row[2] == gender:\n                years_list.append(float(row[5]))\n        \n        average = sum(years_list) / len(years_list)\n        \n        greater_than_average = [int(float(row[1])) for row in reader if float(row[5]) >= average]\n        \n        print(average)\n        for year in greater_than_average:\n            print(year)\n\ncountry = input(\"Enter the name of the country: \")\ngender = input(\"Enter the gender (M or F): \")\n\ncalculate_average_years(country, gender)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ntest_inputs = [['Canada', 'M'], ['Egypt', 'F']]\r\nexpected_outputs = [['7.140344827586206', '1945', '1950', '1955', '1960', '1965', '1970', '1975', '1980', '1985', '1990', '1995', '2000', '2005', '2010'],\r\n                    ['1.1858620689655173', '1980', '1985', '1990', '1995', '2000', '2005', '2010']]\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    test_case_to_run = random.randint(0, len(test_inputs)-1)\r\n    inputs = test_inputs[test_case_to_run]\r\n    outputs = expected_outputs[test_case_to_run]\r\n    \r\n    output, errors = autograder.run_script(\"lsn24_education.py\", inputs)\r\n    lines = output.strip().split('\\n')\r\n    \r\n    lines_match = autograder.compare_strings(lines, outputs)\r\n    \r\n    if lines_match == len(outputs):\r\n        return 100.0\r\n    else:\r\n        return 0.0\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 58, "problem_id": "lsn24_airspeed", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou are writing a program to determine which aircraft  can fly in formation\nbased on their (min) safe cruise speed. Write a python program  \nthat asks the user for:\n\n  1. The number of aircraft to analyze\n  2. The target cruise velocity, in mph\n\n\n\nYour program will then repeatedly ask the user for the designator for each\naircraft and its cruise velocity. Once all of the values have been input, your\nprogram will output:\n\n  1. The NUMBER of aircraft whose cruise velocity is within 50mph of the target (above or below, inclusive)\n  2. The designator of each aircraft that meets the above criteria\n\n\n\n| **Example 1** | **Example 2**  \n---|---|---  \nInput |\n\n3  \n400  \nF-15  \n450  \nF-16  \n425  \nF-22  \n500\n\n| 4  \n230  \nC-130  \n250  \nF-35  \n450  \nB-52  \n390  \nC-141  \n375  \nExpected Output | 2  \nF-15  \nF-16 | 1  \nC-130  \n  \n\n\n\n", "code": "\nnum_aircraft = int(input(\"Enter the number of aircraft to analyze: \"))\ntarget_speed = int(input(\"Enter the target cruise velocity in mph: \"))\n\nwithin_range = 0\nmatching_aircraft = []\n\nfor _ in range(num_aircraft):\n    designator = input(\"Enter the designator for the aircraft: \")\n    cruise_speed = int(input(\"Enter the cruise velocity for the aircraft: \"))\n\n    if abs(cruise_speed - target_speed) <= 50:\n        within_range += 1\n        matching_aircraft.append(designator)\n\nprint(within_range)\nfor aircraft in matching_aircraft:\n    print(aircraft)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ntest_cases = [[3, 400, 'F-15', 450, 'F-16', 425, 'F-22', 600],\r\n              [4, 230, 'C-130', 250, 'F-35', 450, 'B-52', 390, 'C-141', 375]]\r\nanswers    = [['2', 'F-15', 'F-16'],\r\n              ['1', 'C-130']]\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    test_to_run = random.randint(0, len(test_cases)-1)\r\n    inputs = test_cases[test_to_run]\r\n    expected_output = answers[test_to_run]    \r\n    \r\n    output, errors = autograder.run_script(\"lsn24_airspeed.py\", inputs)\r\n    lines = output.strip().split('\\n')\r\n    \r\n    lines_match = autograder.compare_strings(lines, expected_output)\r\n    \r\n    if lines_match == len(expected_output):\r\n        return 100.0\r\n    else:\r\n        return 0.0\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 59, "problem_id": "lsn23_soundboard", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Using PythonGraph, create a \"soundboard\" application. Your program should\ndisplay a list of colored buttons (i.e., rectangles). When the user clicks\ninside of a rectangle, the program plays a different sound.\n\nThe provided template file comes with a single button implemented. Your job is\nto study this code and create at least 5 other buttons. Note: The buttons do\nnot have to be laid out in the same arrangement, but they should look\norganized.\n\nWhen you are finished, upload your python code. Do NOT upload any of the sound\nfiles.\n\n\n", "code": "\nfrom pygame import mixer\nfrom pythongameengine.pygame_engine import *\n\n\nclass Button(GameObject):\n    def __init__(self, x, y, width, height, color, sound_file):\n        super().__init__(x, y, width, height, color)\n        self.sound_file = sound_file\n\n    def on_click(self, mouse_x, mouse_y):\n        if self.is_point_inside(mouse_x, mouse_y):\n            mixer.init()\n            mixer.music.load(self.sound_file)\n            mixer.music.play()\n\n\ndef main():\n    initialize_screen(800, 600, \"Soundboard\")\n\n    button1 = Button(100, 100, 100, 100, (255, 0, 0), \"sound1.mp3\")\n    button2 = Button(250, 100, 100, 100, (0, 255, 0), \"sound2.mp3\")\n    button3 = Button(400, 100, 100, 100, (0, 0, 255), \"sound3.mp3\")\n    button4 = Button(550, 100, 100, 100, (255, 255, 0), \"sound4.mp3\")\n    button5 = Button(700, 100, 100, 100, (255, 0, 255), \"sound5.mp3\")\n\n    game_objects = [button1, button2, button3, button4, button5]\n\n    game_running = True\n    while game_running:\n        handle_events()\n\n        for game_object in game_objects:\n            game_object.update()\n\n        draw(game_objects)\n\n        update_screen()\n\n    mixer.quit()\n\n\nif __name__ == \"__main__\":\n    main()\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn23_soundboard.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 60, "problem_id": "lsn23_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM NAME:  \n** lsn23_skill1\n\n\n\n**PROBLEM STATEMENT:  \n** You have been provided with the template code for an animation.  Study the\ncode for a minute, then modify the code to do the following WHEN THE LEFT\nMOUSE BUTTON IS HELD DOWN:\n\n  1. Write the code needed to get the mouse's x and y coordinates\n  2. Draw a circle centered at the mouse's x and y coordinates\n\n\n", "code": "\nimport pygame\nimport sys\n\n# Initialize pygame\npygame.init()\n\n# Set up the display window\nwindow_width = 800\nwindow_height = 600\nwindow_size = (window_width, window_height)\nwindow = pygame.display.set_mode(window_size)\npygame.display.set_caption(\"Mouse Circle\")\n\n# Set up the clock\nclock = pygame.time.Clock()\n\n# Set up colors\nWHITE = (255, 255, 255)\n\n# Main game loop\nwhile True:\n    # Clear the screen\n    window.fill(WHITE)\n\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n\n        # Check for left mouse button pressed\n        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:\n            # Get mouse coordinates\n            mouse_x, mouse_y = pygame.mouse.get_pos()\n\n            # Draw a circle centered at mouse coordinates\n            radius = 50\n            pygame.draw.circle(window, (0, 0, 255), (mouse_x, mouse_y), radius)\n\n    # Update the display\n    pygame.display.update()\n    clock.tick(60)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    aircraft_dictionary = {\"F-16\":\"Fighting Falcon\", \"F-22\":\"Raptor\", \"B-2\":\"Spirit\", \"F-15\":\"Eagle\"}\r\n    \r\n    aircraft = [(\"C-141\", \"Starlifter\"), (\"C-5\", \"Galaxy\"), (\"MQ-9\", \"Reaper\")]\r\n    random_aircraft = aircraft[random.randint(0, len(aircraft)-1)]\r\n    aircraft_dictionary[random_aircraft[0]] = random_aircraft[1]\r\n    \r\n    output, error = autograder.run_script(\"lsn23_skill1.py\", random_aircraft)\r\n    \r\n    if output.strip() == str(aircraft_dictionary):\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT. Expected:\")\r\n        print(aircraft_dictionary)\r\n        return 0.0\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 61, "problem_id": "lsn23_paint", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nUsing PythonGraph, create a simple paint application. Your program should draw\ncircles on the window whenever the user presses the left mouse button. Your\nprogram should also listen for keyboard inputs, and allow the user to change\ncolors and the size of the circle by pressing on different keys.\n\nA simple paint program has been provided to you as a starting point. Study the\ncode and make the necessary modifications.\n\nWhen you are finished, upload your python code.\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn23_paint.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 62, "problem_id": "lsn22_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM NAME:  \n** lsn22_skill1\n\n\n\n**PROBLEM STATEMENT:  \n** You have been provided with the template code for an animation.  Study the\ncode for a minute, then perform the following tasks:\n\n  * In the draw() function, add one line of code that draws a circle.  \nFor the center, use the ball_x and ball_y variables defined on lines 21 and 22  \n  \n\n  * In the update() function, add code that modifies the value of ball_x and ball_y.  \nFor example, add 1 to ball_x every time update() is called, and see what\nhappens.\n\n\n", "code": "\nimport pygame\n\n# Initialize the game engine\npygame.init()\n\n# Set the height and width of the screen\nsize = (700, 500)\nscreen = pygame.display.set_mode(size)\n\npygame.display.set_caption(\"Animation\")\n\n# Loop until the user clicks the close button\ndone = False\n\n# Used to manage how fast the screen updates\nclock = pygame.time.Clock()\n\n# Starting position of the ball\nball_x = 50\nball_y = 50\n\n# Ball movement variables\nball_change_x = 2\nball_change_y = 2\n\ndef update():\n    # Add code here to modify the value of ball_x and ball_y\n    # For example, you can add 1 to ball_x every time update() is called\n    ball_x += 1\n\n# -------- Main Program Loop -----------\nwhile not done:\n    # --- Main event loop\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            done = True\n\n    # --- Game logic should go here\n\n    # --- Drawing code should go here\n    # First, clear the screen to white\n    screen.fill((255, 255, 255))\n    \n    # Next, draw a circle at the current ball_x and ball_y position\n    pygame.draw.circle(screen, (0, 0, 0), (ball_x, ball_y), 10)\n    \n    # --- Update the screen with what we've drawn\n    pygame.display.flip()\n\n    # --- Limit frames per second\n    clock.tick(60)\n\n    # --- Call the update function to modify ball_x and ball_y\n    update()\n\n# Close the window and quit.\npygame.quit()\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0.0\r\n    \r\n    if autograder.code_compiles(\"lsn22_skill1.py\"):\r\n        file = open(\"lsn22_skill1.py\", \"r\")\r\n        file_contents = file.read()\r\n        \r\n        if \"get_mouse_x(\" in file_contents:\r\n            print(\"get_mouse_x called\")\r\n            score += 33\r\n        else:\r\n            print(\"get_mouse_x does not appear to be called.\")\r\n            \r\n        if \"get_mouse_y(\" in file_contents:\r\n            print(\"get_mouse_y called\")\r\n            score += 33\r\n        else:\r\n            print(\"get_mouse_y does not appear to be called.\")\r\n            \r\n        if \"draw_circle(\" in file_contents:\r\n            print(\"draw_circle called\")\r\n            score += 34\r\n        else:\r\n            print(\"draw_circle does not appear to be called.\")\r\n            \r\n    else:\r\n        print(\"There appears to be an error in your python Script that is preventing it from running\")\r\n    \r\n    print(\"\\nThank you for your submission.  Your instructor will let you know if there is an issue.\")\r\n    return score        \r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 63, "problem_id": "lsn22_bouncingtriangle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Using the Bouncing Ball from the previous lab as a starting point, generate\nan animation of a bouncing triangle. The triangle's vertices should start at\nrandom locations, and bounce whenever the triangle hits a wall.\n\n\n\n\n\n**HINTS** :\n\n  * Try drawing 3 bouncing balls on the screen.\n  * Once the balls are moving correctly, draw 3 lines to connect them!\n\n\n", "code": "\nimport pygame\nimport random\n\n# Initialize Pygame\npygame.init()\n\n# Set up the screen\nWIDTH = 800\nHEIGHT = 600\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"Bouncing Triangle\")\n\n# Define colors\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\n\n# Define triangle vertices\nvertices = [(random.randint(0, WIDTH), random.randint(0, HEIGHT)),\n            (random.randint(0, WIDTH), random.randint(0, HEIGHT)),\n            (random.randint(0, WIDTH), random.randint(0, HEIGHT))]\n\n# Define triangle velocities\nvelocities = [(random.randint(1, 5), random.randint(1, 5)),\n              (random.randint(1, 5), random.randint(1, 5)),\n              (random.randint(1, 5), random.randint(1, 5))]\n\n# Game loop\nrunning = True\nwhile running:\n    # Handle events\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n\n    # Move the triangle vertices\n    for i in range(3):\n        x, y = vertices[i]\n        vx, vy = velocities[i]\n        vertices[i] = (x + vx, y + vy)\n\n        # Bounce when hitting a wall\n        if x <= 0 or x >= WIDTH:\n            velocities[i] = (-vx, vy)\n        if y <= 0 or y >= HEIGHT:\n            velocities[i] = (vx, -vy)\n\n    # Clear the screen\n    screen.fill(BLACK)\n\n    # Draw the triangle\n    pygame.draw.polygon(screen, WHITE, vertices)\n\n    # Update the screen\n    pygame.display.flip()\n\n# Quit the game\npygame.quit()\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn22_bouncingtriangle.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 64, "problem_id": "lsn22_bouncingballs", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n** Write a python algorithm that asks the user for the number of balls to\ndraw. Then, open a pythonGraph window and draw that many bouncing balls on the\nscreen.\n\n\n\n**Challenge** :\n\n  * Try to randomize every aspect of the bouncing balls (e.g., their radius, color, speed)\n\n\n\n\n", "code": "\n\nimport pygame\nimport random\n\n# Initialize pygame\npygame.init()\n\n# Set the width and height of the window\nwidth = 800\nheight = 600\n\n# Set the background color of the window\nbackground_color = (255, 255, 255)\n\n# Set the number of balls to draw\nnum_balls = int(input(\"Enter the number of balls to draw: \"))\n\n# Set the maximum and minimum radius of the balls\nmin_radius = 5\nmax_radius = 30\n\n# Set the maximum and minimum speed of the balls\nmin_speed = 1\nmax_speed = 5\n\n# Set the maximum and minimum color values for the balls\nmin_color = 0\nmax_color = 255\n\n# Create a list to store the balls\nballs = []\n\n# Create a Ball class\nclass Ball:\n    def __init__(self, x, y, radius, color, speed_x, speed_y):\n        self.x = x\n        self.y = y\n        self.radius = radius\n        self.color = color\n        self.speed_x = speed_x\n        self.speed_y = speed_y\n\n    def update(self):\n        self.x += self.speed_x\n        self.y += self.speed_y\n\n        if self.x + self.radius >= width or self.x - self.radius <= 0:\n            self.speed_x *= -1\n\n        if self.y + self.radius >= height or self.y - self.radius <= 0:\n            self.speed_y *= -1\n\n    def draw(self):\n        pygame.draw.circle(screen, self.color, (self.x, self.y), self.radius)\n\n# Create the main window\nscreen = pygame.display.set_mode((width, height))\npygame.display.set_caption(\"Bouncing Balls\")\n\n# Set the clock to control the frame rate\nclock = pygame.time.Clock()\n\n# Create balls with random properties\nfor i in range(num_balls):\n    x = random.randint(max_radius, width - max_radius)\n    y = random.randint(max_radius, height - max_radius)\n    radius = random.randint(min_radius, max_radius)\n    color = (random.randint(min_color, max_color), random.randint(min_color, max_color), random.randint(min_color, max_color))\n    speed_x = random.randint(min_speed, max_speed) * random.choice([1, -1])\n    speed_y = random.randint(min_speed, max_speed) * random.choice([1, -1])\n    balls.append(Ball(x, y, radius, color, speed_x, speed_y))\n\n# Main game loop\nrunning = True\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n\n    # Update and draw the balls\n    for ball in balls:\n        ball.update()\n        ball.draw()\n\n    # Fill the window with the background color\n    screen.fill(background_color)\n\n    # Draw the balls\n    for ball in balls:\n        ball.draw()\n\n    # Update the display\n    pygame.display.update()\n\n    # Set the frame rate\n    clock.tick(60)\n\n# Quit pygame\npygame.quit()\n```\n\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn22_bouncingballs.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 65, "problem_id": "lsn22_bouncingball", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Using the pythonGraph animation template, create an animation of a bouncing\nball. Your ball should start at a random location, and change direction each\ntime it hits a side, top, or bottom of the window.  \n  \n\n\n\n**CHALLENGE:**\n\n  1. Try to make the ball change color every time it hits a wall.\n\n\n\n\n", "code": "\nimport random\nfrom PythonGraph import Animation, Color, GraphicsWindow\n\nwindow = GraphicsWindow()\ncanvas = window.canvas()\n\nx = random.randint(0, 400)\ny = random.randint(0, 400)\nradius = 20\ndx = random.randint(1, 5)\ndy = random.randint(1, 5)\n\ndef update():\n  global x, y, dx, dy\n\n  # Move the ball\n  x += dx\n  y += dy\n\n  # Check collision with walls\n  if x + radius >= window.getWidth() or x - radius <= 0:\n    dx = -dx\n\t\n  if y + radius >= window.getHeight() or y - radius <= 0:\n    dy = -dy\n\t\n  # Change color\n  canvas.changeColor(Color.random(), Color.random(), Color.random())\n  \n  # Clear the canvas\n  canvas.clear()\n\n  # Draw the ball\n  canvas.drawCircle(x, y, radius)\n\nanimation = Animation(window, update)\nanimation.run()\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn22_bouncingball.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 66, "problem_id": "lsn21_triangle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite an algorithm that asks the user for X and Y coordinates of a single\npoint (the coordinates of the top left point on the triangle), the length of\nthe base, and the height of a right triangle. Then, open a graphics window and\ndraw the triangle. The area of the triangle is should be displayed at the\nbottom center of the window in black.\n\n\n\n**HINTS:**\n\n  * Make sure you get the user input BEFORE you open the window. Otherwise, the program will freeze.\n  * The `draw_text` function will draw text on a screen. Don't worry about getting the text EXACTLY in the center (it's hard!).\n\n\n\n\n", "code": "\nimport graphics\n\ndef calculate_area(base, height):\n    return (base * height) / 2\n\ndef draw_triangle(x, y, base, height):\n    win = graphics.GraphWin(\"Triangle\", 500, 500)\n\n    p1 = graphics.Point(x, y)\n    p2 = graphics.Point(x + base, y)\n    p3 = graphics.Point(x + (base / 2), y + height)\n\n    triangle = graphics.Polygon(p1, p2, p3)\n    triangle.setFill(\"white\")\n    triangle.draw(win)\n\n    area = calculate_area(base, height)\n    text = graphics.Text(graphics.Point(250, 480), f\"Area: {area}\")\n    text.setTextColor(\"black\")\n    text.draw(win)\n\n    win.getMouse()\n    win.close()\n\ndef main():\n    x = int(input(\"Enter X coordinate of the top left point: \"))\n    y = int(input(\"Enter Y coordinate of the top left point: \"))\n    base = int(input(\"Enter the length of the base: \"))\n    height = int(input(\"Enter the height of the triangle: \"))\n\n    draw_triangle(x, y, base, height)\n\nif __name__ == \"__main__\":\n    main()\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn21_triangle.py\", doraise=True)\r\n        print(\"----------------------------------------------------------------------\")\r\n        print(\"*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\")\r\n        print(\"----------------------------------------------------------------------\\n\")\r\n        \r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 67, "problem_id": "lsn21_stamp", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Create a pythonGraph function called `draw_stamp` that accepts an x and y\ncoordinate as parameters. Add code so that this function will then draw a\npicture (of your choosing) centered on that coordinate.\n\n\n\nTo test your function, create a pythonGraph window, and call your function\nseveral times (each time, passing it a different set of x and y coordinates).\n\n\n", "code": "\nfrom python_graph import pythonGraph\n\ndef draw_stamp(x, y):\n    pythonGraph.move(x, y)\n    pythonGraph.color(\"blue\")\n    pythonGraph.begin_fill()\n    for _ in range(4):\n        pythonGraph.forward(100)\n        pythonGraph.right(90)\n    pythonGraph.end_fill()\n\nwindow = pythonGraph.Screen()\ndraw_stamp(0, 0)\ndraw_stamp(200, 100)\ndraw_stamp(-200, -100)\nwindow.exitonclick()\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn21_stamp.py\", doraise=True)\r\n        print(\"----------------------------------------------------------------------\")\r\n        print(\"*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\")\r\n        print(\"----------------------------------------------------------------------\\n\")\r\n        \r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 68, "problem_id": "lsn21_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM NAME:  \n** lsn21_skill1\n\n\n\n**PROBLEM STATEMENT:  \n** Read the pythonGraph documentation, and write the following 3 lines of\ncode:\n\n  1. Use the open_window function to create a graphics window\n  2. Use the draw_circle function to draw a circle (any size and/or color).\n  3. Call the wait_for_close function to keep the graphics window open until you click the X in the top right corner.\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0.0\r\n    \r\n    if autograder.code_compiles(\"lsn21_skill1.py\"):\r\n        file = open(\"lsn21_skill1.py\", \"r\")\r\n        file_contents = file.read()\r\n        \r\n        if \"draw_circle(\" in file_contents:\r\n            print(\"draw_circle called\")\r\n            score += 50\r\n        else:\r\n            print(\"draw_circle does not appear to be called.  You need to call it in the draw() function\")\r\n            \r\n        if file_contents.count(\"ball_x\") + file_contents.count(\"ball_y\") > 5:\r\n            print(\"Looks like you are using ball_x and/or ball_y\")\r\n            score += 50\r\n        else:\r\n            print(\"Make sure you are changing the value of ball_x and ball_y in update().\")\r\n            \r\n    else:\r\n        print(\"There appears to be an error in your python Script that is preventing it from running\")\r\n    \r\n    print(\"\\nThank you for your submission.  Your instructor will let you know if there is an issue.\")\r\n    return score        \r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 69, "problem_id": "lsn21_simpledrawing", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nUsing pythonGraph (and the documentation for pythonGraph), experiment with\neach of the drawing commands listed (drawing commands begin with the keyword\n\"draw\"). Draw something interesting using at least 4 different drawing\ncommands. One of those drawing commands must be `draw_image`\n\n**NOTE:  \n** The best files will be added to our Python \"Hall of Fame\".\n\n\n", "code": "\nfrom graph import *\n\ndrawing_window(800, 600)\n\n# Draw a line\ndraw_line(100, 100, 500, 100)\n\n# Draw a rectangle\ndraw_rect(100, 200, 400, 200)\n\n# Draw a circle\ndraw_circle(300, 400, 100)\n\n# Draw an image\ndraw_image(\"image.jpg\", 200, 50)\n\nend()", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    drawing_functions = [\"draw_arc\", \"draw_image\", \"draw_rectangle\", \"draw_circle\", \"draw_ellipse\", \"draw_line\", \"draw_pixel\", \"draw_text\", \"write_text\"]\r\n    drawing_functions_called = []\r\n    \r\n    print(\"----------------------------------------------------------------------\")\r\n    print(\"*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\")\r\n    print(\"----------------------------------------------------------------------\\n\")\r\n    \r\n    file = open(\"lsn21_simpledrawing.py\", \"r\")\r\n    file_contents = file.read()\r\n    \r\n    for f in drawing_functions:\r\n        if f in file_contents and f not in drawing_functions_called:\r\n            drawing_functions_called.append(f)\r\n    \r\n    if len(drawing_functions_called) >= 4 and \"draw_image\" in drawing_functions_called:\r\n        print(\"Good Job!\")\r\n        return 100.0\r\n    elif len(drawing_functions_called) >= 4 and \"draw_image\" not in drawing_functions_called:\r\n        print(\"Missing at least one call of draw_image\")\r\n        return 90.0\r\n    else:\r\n        print(\"Not enough different drawing functions.  Need 4 unique (including draw_image) calls.\")\r\n        return 25 * len(drawing_functions_called)\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 70, "problem_id": "lsn21_randomcircles", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Create a pythonGraph that asks the user for the number of circles to draw.\nYour program should then open a pythonGraph window and then draw that many\ncircles somewhere within view.\n\n**Hints**\n\n  * Import the `random` module in order to generate random numbers. There are specifically two functions that are useful:\n  * `random.random()` returns a random number between 0.0 and 1.0\n  * `random.randint(start, end)` returns a random integer between `start` and `end`\n\n\n\n\n", "code": "\nimport random\nfrom graph import *\n\ndef draw_circles(num_circles):\n    window_size = 500\n    \n    open_canvas(window_size, window_size)\n    \n    for _ in range(num_circles):\n        radius = random.randint(10, 50)\n        x = random.randint(radius, window_size - radius)\n        y = random.randint(radius, window_size - radius)\n        \n        draw_circle(x, y, radius)\n\ndef draw_circle(x, y, radius):\n    set_color(random_color())\n    draw_filled_circle(x, y, radius)\n\ndef random_color():\n    red = random.random()\n    green = random.random()\n    blue = random.random()\n    \n    return red, green, blue\n\ndraw_circles(int(input(\"Enter the number of circles to draw: \")))\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:\r\n        py_compile.compile(\"lsn21_randomcircles.py\", doraise=True)\r\n        print(\"----------------------------------------------------------------------\")\r\n        print(\"*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\")\r\n        print(\"----------------------------------------------------------------------\\n\")\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 71, "problem_id": "lsn20_unpopularnames", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n**\n\nThis lab makes use of the names.csv dataset, which provides a list of over\n1200+ names that were given to children in 2011. Here is a typical line from\nthe file:\n\n\n\n`FEMALE, HISPANIC, GIA, 21`\n\n\n\n  \nEach position in the line (separated by a comma) represents a different \"data\nelement\". Here is a key for your reference:\n\nGender | Ethnicity | Name | Count  \n(i.e., Number of Children Assigned this Name)  \n---|---|---|---  \nFEMALE | HISPANIC | GIA | 21  \n  \n  \n  \nWrite a Python algorithm that gets a gender (all CAPs, \"MALE\" or \"FEMALE\") and\na number, `X`, from the user, and prints out the X least popular names for\nthat gender, starting with the most popular and working down.\n\nFor example, if the user types `MALE` and `2`, and you determine that the two\nleast popular names are Bill and Ted, your program should output:\n\n    \n    \n    Bill  \n    Ted  \n      \n    \n\n\n\n**HINTS (really really important):**\n\n  * Remember that you can use the `sort()` function to sort a list in ascending order. For example, if your list is named `my_list`, you can sort it by typing:  \n`my_list.sort()`\n\n  * `sort()` will work on 2D lists. It will sort by the first column, and then look at the 2nd column in the event of a tie. Think about this when you are building your 2D list.\n\n\n", "code": "\nimport csv\n\ndef get_least_popular_names(gender, num):\n    names = []\n    with open('names.csv', 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        for row in reader:\n            if row[0] == gender:\n                names.append(row[2])\n    \n    names.sort(reverse=True)\n    \n    for i in range(num):\n        print(names[i])\n\ngender = input(\"Enter gender (MALE or FEMALE): \")\nnum = int(input(\"Enter number of least popular names: \"))\n\nget_least_popular_names(gender, num)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nexpected_output_male = [\"ALDO\", \"ALIJAH\", \"ALLAN\", \"ANGEL\", \"ARTURO\", \"AUGUSTUS\", \"BENNETT\", \"BERISH\", \"CADEN\", \"CHRIS\", \"CODY\", \"COREY\", \"DERRICK\", \"DEVON\", \"DONOVAN\", \"EASON\", \"EDWARD\", \"ELLIS\", \"GIOVANI\", \"HASSAN\",]\r\nexpected_output_female = [\"ABBY\", \"AIZA\", \"ALISHA\", \"ANGELICA\", \"ANGIE\", \"ARIANNY\", \"ARIELA\", \"ATARA\", \"AUBREY\", \"AUTUMN\", \"AYLA\", \"BIANCA\", \"BONNIE\", \"BRIANNY\", \"CASSANDRA\", \"CELIA\", \"CHAVY\", \"CHEYENNE\", \"CORA\", \"CRISTINA\"]\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    if (random.random() > 0.5):\r\n        gender = \"MALE\"\r\n        expected_output = expected_output_male\r\n    else:\r\n        gender = \"FEMALE\"\r\n        expected_output = expected_output_female\r\n        \r\n    num_to_print = random.randint(5, 20)\r\n    output, error = autograder.run_script(\"lsn20_unpopularnames.py\", [gender, num_to_print])\r\n    lines = output.strip().split('\\n')\r\n    num_matches = autograder.compare_strings(lines, expected_output[:num_to_print])\r\n    \r\n    print()\r\n    \r\n    if len(lines) == 0:\r\n        return 0\r\n    elif len(lines) > len(expected_output[:num_to_print]):\r\n        print(\"Your program printed more lines than we expected\")\r\n        return round(100 * num_matches / len(lines), 1)\r\n    else:\r\n        return round(100.0/len(expected_output[:num_to_print]) * num_matches, 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 72, "problem_id": "lsn20_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a CSV file that contains the amount of medals\nwon by countries at the most recent Olympic games.   Here is a snippet of the\nfile:\n\n    \n    \n    USA,46,37,38  \n    Britain,27,23,17\n\n\n\nHere is how you can interpret each \"column\" in the file:\n\n**Country** | **# Gold Medals** | **# Silver Medals** | **# Bronze Medals**  \n---|---|---|---  \nUSA | 46 | 37 | 38  \nBritain | 27 | 23 | 17  \n  \n\n\nYou have also been provided with a code template that automatically reads this\nfile and extracts each line from it.\n\n  * In the provided code template, perform the following tasks: \n    * **Line 30:** Write a line of code that extracts the columns from each line. Use the split() function\n    * **Line 33:** Create a new row (i.e., a list) that contains the number of **silver** medals, followed by the name of the country\n    * **Line 36:** Append the new row to **my_table**\n\n\n", "code": "\nimport csv\n\ndef process_file(file_name):\n    my_table = []\n    \n    with open(file_name, 'r') as file:\n        reader = csv.reader(file)\n        \n        # Skip the header\n        next(reader)\n        \n        for line in reader:\n            # Extract the columns from each line\n            columns = line[0].split(',')\n            \n            # Create a new row with the number of silver medals and the country name\n            new_row = [int(columns[2]), columns[0]]\n            \n            # Append the new row to my_table\n            my_table.append(new_row)\n    \n    return my_table\n\n# Test the function\nmy_table = process_file('medals.csv')\nprint(my_table)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0.0\r\n    \r\n    if autograder.code_compiles(\"lsn20_skill1.py\"):\r\n        file = open(\"lsn20_skill1.py\", \"r\")\r\n        file_contents = file.read()\r\n        \r\n        if \"get_mouse_x(\" in file_contents:\r\n            print(\"get_mouse_x called\")\r\n            score += 33\r\n        else:\r\n            print(\"get_mouse_x does not appear to be called.\")\r\n            \r\n        if \"get_mouse_y(\" in file_contents:\r\n            print(\"get_mouse_y called\")\r\n            score += 33\r\n        else:\r\n            print(\"get_mouse_y does not appear to be called.\")\r\n            \r\n        if \"draw_circle(\" in file_contents:\r\n            print(\"draw_circle called\")\r\n            score += 34\r\n        else:\r\n            print(\"draw_circle does not appear to be called.\")\r\n            \r\n    else:\r\n        print(\"There appears to be an error in your python Script that is preventing it from running\")\r\n    \r\n    print(\"\\nThank you for your submission.  Your instructor will let you know if there is an issue.\")\r\n    return score        \r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 73, "problem_id": "lsn20_popularnames", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nThis program makes use of the names.csv dataset, which provides a list of over\n1200+ names that were given to children in 2011. Here is a typical line from\nthe file:\n\n\n\n`FEMALE, HISPANIC, GIA, 21`\n\n\n\n  \nEach position in the line (separated by a comma) represents a different \"data\nelement\". Here is a key for your reference:\n\nGender | Ethnicity | Name | Count  \n(i.e., Number of Children Assigned this Name)  \n---|---|---|---  \nFEMALE | HISPANIC | GIA | 21  \n  \n  \n  \nWrite a Python algorithm that gets a number, `X`, from the user, and prints\nout the X most popular names, starting with the most popular and working down.\n\nFor example, if the user types `5`, and you determine that the five most\npopular names are Adrian, David, Bob, Jane, Ulysses, your program should\noutput:  \nAdrian  \nDavid  \nBob  \nJane  \nUlysses  \n  \n\n**HINTS (really really important):**\n\n  * Remember that you can use the `sort()` function to sort a list in ascending order. For example, if your list is named `my_list`, you can sort it by typing:  \n`my_list.sort()`\n\n  * For this lab, you need to sort the list in descending order, so that the most popular items appear first. To do this, you need to tell the function to sort in reverse. You can do this by typing the following (assuming your list is named `my_list`):  \n`my_list.sort(reverse=True)`\n\n  * `sort()` will work on 2D lists. It will sort by the first column, and then look at the 2nd column in the event of a tie. Think about this when you are building your 2D list.\n\n\n", "code": "\n\nimport csv\n\n\ndef get_popular_names(X):\n    names_dict = {}\n    \n    with open('names.csv') as csv_file:\n        csv_reader = csv.reader(csv_file, delimiter=',')\n        for row in csv_reader:\n            gender = row[0]\n            ethnicity = row[1]\n            name = row[2]\n            count = int(row[3])\n            \n            if name in names_dict:\n                names_dict[name] += count\n            else:\n                names_dict[name] = count\n                \n    sorted_names_list = sorted(names_dict.items(), key=lambda x: x[1], reverse=True)\n    \n    for i in range(X):\n        print(sorted_names_list[i][0])\n\n\nX = int(input(\"Enter a number: \"))\nget_popular_names(X)\n\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nexpected_output = [\r\n\"ISABELLA\",\r\n\"MIA\",\r\n\"MOSHE\",\r\n\"ESTHER\",\r\n\"SOPHIA\",\r\n\"EMMA\",\r\n\"CAMILA\",\r\n\"CHAYA\",\r\n\"ETHAN\",\r\n\"JAYDEN\",\r\n\"SOFIA\",\r\n\"AVA\",\r\n\"JEREMIAH\",\r\n\"CHAIM\",\r\n\"JOSE\",\r\n\"CHANA\",\r\n\"LUIS\",\r\n\"ELLA\",\r\n\"CHARLOTTE\",\r\n\"HAILEY\",\r\n\"LEAH\",\r\n\"MADISON\"]\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    num_to_print = random.randint(5, 15)\r\n    output, error = autograder.run_script(\"lsn20_popularnames.py\", [num_to_print])\r\n    lines = output.strip().split('\\n')\r\n    num_matches = autograder.compare_strings(lines, expected_output[:num_to_print])\r\n    \r\n    print()\r\n    \r\n    if len(lines) == 0:\r\n        return 0\r\n    elif len(lines) > len(expected_output[:num_to_print]):\r\n        print(\"Your program printed more lines than we expected\")\r\n        return round(100 * num_matches / len(lines), 1)\r\n    else:\r\n        return round(100.0/len(expected_output[:num_to_print]) * num_matches, 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 74, "problem_id": "lsn20_lowvolume", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nThis program makes use of the traffic.csv dataset. Here is a typical line from\nthe file:\n\n\n\n`691,6067 North,Kimball Ave,8/15/06,15600,North Bound:7500/South Bound:8100`\n\n\n\n  \nAs you will recall from class, each position in the line (separated by a\ncomma) represents a different \"data element\". Here is a key for your\nreference:\n\nID | Address | Street | Sample Date | Total # of Passing Vehicles | # of\nVehicles by Direction  \n---|---|---|---|---|---  \n691 | 6067 North | Kimball Ave | 8/15/06 | 15600 | North Bound:7500/South\nBound:8100  \n  \n  \n  \nWrite a Python algorithm that opens the file and outputs the lowest traffic\ncount. Then, output the name of all streets whose traffic count is within 2500\n(inclusive) of the min. Output one street name per line.\n\n\n\nFor example, if the min value is 500, and the roads within 2500 of this value\nare \"Road A\", \"Road B\", \"Road C\", then your program should output:\n\n    \n    \n    500  \n    Road A  \n    Road B  \n    Road C\n\n\n", "code": "\nimport csv\n\ndef find_lowest_traffic(file):\n    with open(file, 'r') as f:\n        reader = csv.reader(f)\n        next(reader) # skip header row\n        data = list(reader)\n    \n    min_traffic = float('inf')\n    min_streets = []\n    \n    for line in data:\n        traffic_count = int(line[4])\n        \n        if traffic_count < min_traffic:\n            min_traffic = traffic_count\n            min_streets = [line[2]]\n        elif traffic_count == min_traffic:\n            min_streets.append(line[2])\n    \n    result = [min_traffic] + min_streets\n    \n    return result\n\nfile = 'traffic.csv'\nresult = find_lowest_traffic(file)\n\nfor item in result:\n    print(item)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nexpected_output = [\r\n\"700\",\r\n\"Harbor Ave\",\r\n\"Woodlawn Ave\",\r\n\"Root St\",\r\n\"Calumet Ave\",\r\n\"Financial PL\",\r\n\"16th St\",\r\n\"Racine Ave\",\r\n\"60th St\",\r\n\"Wentworth Ave\",\r\n\"Parnell Ave\",\r\n\"Ashland Ave\",\r\n\"Federal St\",\r\n\"Hamlin Ave\",\r\n\"Pitney Ct\",\r\n\"109th St\",\r\n\"Loomis St\",\r\n\"Harrison St\",\r\n\"24th St\",\r\n\"La Salle St\",\r\n\"83rd Pl\",\r\n\"Homan Ave\"]\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    output, error = autograder.run_script(\"lsn20_lowvolume.py\", [])\r\n    lines = set(output.split('\\n'))\r\n    matches = (len(lines.intersection(expected_output)))\r\n    return (round((matches/22)*100,1))\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 75, "problem_id": "lsn20_averagetraffic", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n**\n\nThis program makes use of the traffic.csv dataset. Here is a typical line from\nthe file:\n\n\n\n`691,6067 North,Kimball Ave,8/15/06,15600,North Bound:7500/South Bound:8100`\n\n\n\n  \nAs you will recall from class, each position in the line (separated by a\ncomma) represents a different \"data element\". Here is a key for your\nreference:\n\nID | Address | Street | Sample Date | Total # of Passing Vehicles | # of\nVehicles by Direction  \n---|---|---|---|---|---  \n691 | 6067 North | Kimball Ave | 8/15/06 | 15600 | North Bound:7500/South\nBound:8100  \n  \n  \n  \nWrite a Python algorithm that opens the file and outputs the # of roads whose\ntraffic count is greater than (or equal to) the average. For example, if you\ndetermine that the answer is 20, your program should output:\n\n    \n    \n    20\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nexpected_output = [\"525\"]\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    output, error = autograder.run_script(\"lsn20_averagetraffic.py\", [])\r\n    lines = output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_output)\r\n       \r\n    return round(num_matches * (100.0 / len(expected_output)), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 76, "problem_id": "lsn19_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You are being provided with an empty table that contains information about\nUSAF Academy Squadrons. The columns of the table are organized as follows:\n\n**Squadron Name** | **Squadron Number**  \n---|---  \nName Goes Here (string) | # Goes Here (integer)  \n  \n\n\nAdd the following two rows to the table:\n\nDogs of War | 3  \n---|---  \nWolverines | 19  \n  \n  \n  \n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\nfrom lsn19_skill2 import *\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    if len(squadron_table) >= 2:\r\n        print(\"Squadron Table has at least 2 things in them.  Let's see what's inside!\")\r\n        score += 20\r\n        \r\n        if (squadron_table[0][0] == \"Dogs of War\" and squadron_table[0][1] == 3):\r\n            print(\"First Row Added Correctly\")\r\n            score += 40\r\n        else:\r\n            print(\"Something is wrong with the first row.  Make sure you are appending a list!\")\r\n        \r\n        if (squadron_table[1][0] == \"Wolverines\" and squadron_table[1][1] == 19):\r\n            print(\"Second Row Added Correctly\")\r\n            score += 40\r\n        else:\r\n            print(\"Something is wrong with the second row.  Make sure you are appending a list!\")\r\n    else:\r\n        print(\"Squadron Table does not appear to have (at least) 2 rows\")\r\n        \r\n    return score\r\n        \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 77, "problem_id": "lsn19_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You are being provided with a table  that describes various starship\nclasses from the Star Trek universe (I'm a nerd . . . go with it), as well as\ntwo input statements that get a row and column from the user.  \n\nPrint out the corresponding row/column value from the table.\n\n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\nfrom lsn19_skill1 import *\r\n\r\nanswer= [[37, 'USA'],\r\n        [23, 'Britain'],\r\n        [18, 'China'],\r\n        [17, 'Russia'],\r\n        [10, 'Germany'],\r\n        [8, 'Japan'],\r\n        [18, 'France'],\r\n        [3, 'South Korea'],\r\n        [12, 'Italy'],\r\n        [11, 'Australia']]\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    num_matches = 0\r\n    count_vals_as_str = 0\r\n    \r\n    for i in range(len(my_table)):\r\n        print(\"Row \" + str(i+1) + \": \", end='')\r\n        if i < len(answer):\r\n            if my_table[i] == answer[i]:\r\n                print(\"CORRECT\")\r\n                num_matches += 1\r\n            else:\r\n                if type(my_table[i][0]) is str:\r\n                    count_vals_as_str += 1\r\n                print(\"INCORRECT (Expected: \" + str(answer[i]) + \" instead of \" + str(my_table[i]) + \")\")\r\n        else:\r\n            print(\"INCORRECT (Unexpected Row: '\" + str(my_table[i]) + \"')\")\r\n    \r\n    print()\r\n    print(num_matches, \"out of\", len(answer), \"rows match\")\r\n    if count_vals_as_str > 0:\r\n        print(\"Looks like your medal numbers are strings not integers.\")\r\n    \r\n    if len(answer) < num_matches:\r\n        return 100 * num_matches / len(answer)\r\n    else:\r\n        return num_matches * (100 / len(answer))\r\n    \r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 78, "problem_id": "lsn19_population", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nYou are being provided with a simple 2D list that contains the names and\npopulations of the 10 largest cities in the world. This list (which is called\n`cities_table`) can be logicially visualized as the following:\n\n\n\n**City** | **Population**  \n---|---  \nTokyo | 37,435,191  \nDelhi | 29,399,141  \nShanghai | 29,399,141  \nSao Paulo | 21,846,507  \nMexico City | 21,671,908  \nCairo | 20,484,965  \nDhaka | 20,283,552  \nMumbai | 20,185,064  \nBeijing | 20,035,455  \nOsaka | 19,222,665  \n  \n  \nWrite a Python program that gets a population from the user, and prints the\nnames of all the cities whose populations are at least that big (starting with\nthe most populated city). Print each city's name on a separate line.\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2  \n---|---|---  \nInput | 28000000 | 30000000  \nOutput | Tokyo  \nDelhi  \nShanghai | Tokyo\n\n\n", "code": "\ncities_table = [\n    [\"Tokyo\", 37435191],\n    [\"Delhi\", 29399141],\n    [\"Shanghai\", 29399141],\n    [\"Sao Paulo\", 21846507],\n    [\"Mexico City\", 21671908],\n    [\"Cairo\", 20484965],\n    [\"Dhaka\", 20283552],\n    [\"Mumbai\", 20185064],\n    [\"Beijing\", 20035455],\n    [\"Osaka\", 19222665]\n]\n\npopulation = int(input(\"Enter a population: \"))\n\nfor city in cities_table:\n    if city[1] >= population:\n        print(city[0])\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\ndef solution(population):\r\n    result = ''\r\n    \r\n    cities_table = [\r\n        ['Tokyo', 37435191],\r\n        ['Delhi', 29399141],\r\n        ['Shanghai', 25647805],\r\n        ['Sao Paulo', 21846507],\r\n        ['Mexico City', 21671908],\r\n        ['Cairo', 20484965],\r\n        ['Dhaka', 20283552],\r\n        ['Mumbai', 20185064],\r\n        ['Beijing', 20035455],\r\n        ['Osaka', 19222665]]\r\n    \r\n    for row in cities_table:\r\n        if row[1] >= population:\r\n            result += row[0] + '\\n'\r\n    \r\n    return result.strip()\r\n\r\n\r\ndef test_passed():\r\n    \r\n    random_population_size = random.randint(19, 30) * 1000000\r\n    \r\n    output, error = autograder.run_script(\"lsn19_population.py\", [random_population_size])\r\n    answer = solution(random_population_size)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, answer.strip().split('\\n'))\r\n    \r\n    if num_matches == len(lines):\r\n        print(\"\\nCORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"\\nOne or more outputs were incorrect.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 79, "problem_id": "lsn19_movies", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:**\n\nWrite a Python function called `get_movies` that takes three parameters:\n\n  * A two-dimensional list containing movie titles and other stats (see table below for an example)\n  * A rating (e.g., \"PG\", \"R\")\n  * A run time (in minutes)\n\n\n\nTitle | Release Year | Rating | Run Time (minutes)  \n---|---|---|---  \nStar Wars: A New Hope | 1977 | PG | 121  \nStar Trek: The Motion Picture | 1979 | G | 132  \nIndiana Jones: Raiders of the Lost Ark | 1989 | PG | 115  \n  \n  \nYour function should return the number of movies that have the specified\nrating, and run for at least the number of minutes specified.\n\n\n\n**EXAMPLE:**  \nIf the above table were contained within a list called `movie_table`, then\n`get_movies(movie_table, \"PG\", 100)` should return 2\n\n\n", "code": "\ndef get_movies(movie_table, rating, run_time):\n    count = 0\n    for movie in movie_table:\n        if movie[2] == rating and movie[3] >= run_time:\n            count += 1\n    return count\n", "testcase": "from cs110 import autograder\r\nimport random\r\nimport lsn19_movies\r\n\r\ndef solution(movies_table, rating, runtime):\r\n    count = 0\r\n    \r\n    for row in movies_table:\r\n        if row[2] == rating and row[3] >= runtime:\r\n            count += 1\r\n    \r\n    return count\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    ratings = ['PG', 'PG-13', 'R']\r\n    num_passed = 0\r\n    \r\n    for rating in ratings:\r\n        movies_table = [\r\n            [\"Star Wars: A New Hope\", 1977, \"PG\", 121],\r\n            [\"Star Trek: The Motion Picture\", 1979, \"G\", 132],\r\n            [\"Raiders of the Lost Ark\", 1989, \"PG\", 115],\r\n            [\"Indiana Jones and the Temple of Doom\", 1984, \"PG\", 118],\r\n            [\"Indiana Jones and the Last Crusade\", 1989, \"PG-13\", 127],\r\n            [\"Serenity\", 2005, \"PG-13\", 119],\r\n            [\"Joker\", 2019, \"R\", 122],\r\n            [\"The Terminator\", 1984, \"R\", 107]\r\n            ]\r\n        test_table = []\r\n        runtime = random.randint(90, 120)\r\n        \r\n        for j in range(random.randint(2, 5)):\r\n            index = random.randint(0, len(movies_table)-1)\r\n            test_table.append(movies_table[index])\r\n            movies_table.remove(movies_table[index])\r\n        \r\n        print(\"Testing (Rating = \" + rating + \"):\\n\" + \"  Movie Table: \" + str(test_table) + \"\\n\" + \"  Runtime: \" + str(runtime))\r\n        print(\"  Expecting: \" + str(solution(test_table, rating, runtime)) + \"\\n  Your Function's Output: \" + str(lsn19_movies.get_movies(test_table, rating, runtime)))\r\n        \r\n        if solution(test_table, rating, runtime) == lsn19_movies.get_movies(test_table, rating, runtime):\r\n            print(\"PASSED!\\n\")\r\n            num_passed += 1\r\n        else:\r\n            print(\"INCORRECT\\n\")\r\n            \r\n    \r\n    return (num_passed / len(ratings)) * 100.0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 80, "problem_id": "lsn19_golf", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** In, Python, write an algorithm that first asks the user how many football\nplayers they wish to enter statistics for and then gets that many yearly\npassing totals for each player. Output how many of those players that had more\nthan 5000 passing yards in a year. Also your algorithm will output the average\nyardage per year as well as the minimum yardage entered, in that order. You\ncan assume there is at least one player's yardage to input.\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2 | Example 3  \n---|---|---|---  \n**Inputs** | 6  \n4924  \n4442  \n5117  \n2700  \n1990  \n4399 | 5  \n2305  \n4209  \n5100  \n5109  \n3800 | 4  \n4200  \n2709  \n3757  \n2976  \n**Outputs** | 1  \n3928.6666666666665  \n1990 | 2  \n4104.6  \n2305 | 0  \n3410.5  \n2709\n\n\n", "code": "\ndef football_stats():\n    num_players = int(input(\"How many football players do you wish to enter statistics for? \"))\n    passing_totals = []\n    for i in range(num_players):\n        yardage = int(input(\"Enter the yearly passing total for player {}: \".format(i+1)))\n        passing_totals.append(yardage)\n    \n    num_high_yardage_players = 0\n    total_yardage = 0\n    min_yardage = passing_totals[0]\n    \n    for yardage in passing_totals:\n        if yardage > 5000:\n            num_high_yardage_players += 1\n        total_yardage += yardage\n        if yardage < min_yardage:\n            min_yardage = yardage\n    \n    average_yardage = total_yardage / num_players\n    \n    print(\"Number of players with more than 5000 passing yards in a year: {}\".format(num_high_yardage_players))\n    print(\"Average yardage per year: {}\".format(average_yardage))\n    print(\"Minimum yardage entered: {}\".format(min_yardage))\n\nfootball_stats()\n", "testcase": "from cs110 import autograder\r\nimport random, statistics\r\n\r\nrandom_names = ['Mcllroy', 'Koepka', 'Rahm', 'Woods', 'Thomas', 'Johnson', 'Cantlay', 'Simpson']\r\n\r\ndef get_random_name():\r\n    global random_names\r\n    name = random_names[random.randint(0, len(random_names)-1)]\r\n    random_names.remove(name)\r\n    return name\r\n\r\n\r\ndef solution(data):\r\n    min_value = 99999\r\n    min_name = \"\"\r\n    count = 0\r\n    \r\n    for row in data:\r\n        if row[1] < min_value:\r\n            min_value = row[1]\r\n            min_name = row[0]\r\n    \r\n    for row in data:\r\n        if row[1] <= min_value + 5:\r\n            count += 1\r\n\r\n    return min_name, (count / len(data) * 100.0)\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num_inputs = random.randint(2, 5)\r\n    input_list = []\r\n    data = []\r\n        \r\n    for i in range(num_inputs):\r\n        new_row = [get_random_name(), random.randint(70, 90)]\r\n        input_list.append(new_row[0])\r\n        input_list.append(new_row[1])\r\n        data.append(new_row)\r\n    input_list.append(\"END\")\r\n    \r\n    lowest_name, percent = solution(data)\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn19_golf.py\", input_list)\r\n    lines = output.strip().split('\\n')\r\n\r\n    # Checks Min\r\n    if len(lines) < 2:\r\n        print(\"Number of output lines does not match\")\r\n        return 0\r\n    else:\r\n        if not lowest_name == lines[0]:\r\n            print(\"Incorrect Name.  Expected \" + str(lowest_name))\r\n            return 0\r\n        if not autograder.equals(percent, lines[1]):\r\n            print(\"Incorrect Percent.  Expected \" + str(percent))\r\n            return 50\r\n        \r\n    print(\"PASSED!\")\r\n    return 100\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 81, "problem_id": "lsn19_credit", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:**\n\nThe Air Academy Federal Credit Union wants to identify its best customers and\ncomes to you for help. To help with the accounting, create a Python program\nwhich inputs repeated pairs of member last-names followed by account balances\nuntil the word \" **DONE** \" (all capital letters) is entered at the member\nlast-name prompt.\n\nYour program should output:\n\n  * The last name of the member the highest account value, if there are two members with the same highest account value it should output the name of the first person entered.\n  * It will then output the percentage members who are within $10,000 (inclusive) of the highest account value.\n\nThere is no bound on the number of members that may be entered, but you may\nassume that there will be at least one member and balance entered.\n\n\n\n**EXAMPLE:**\n\n  | Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInputs | Rockefeller  \n120000  \nChase  \n115000  \nMorgan  \n110000  \nGates  \n90000  \nJobs  \n65000  \nDONE | Jobs  \n150000  \nChase  \n150000  \nKennedy  \n40000  \nDONE | Morgan  \n145000  \nChase  \n135000  \nKennedy  \n142000  \nGates  \n145000  \nDONE  \nOutput | Rockefeller  \n60.0 | Jobs  \n66.66666666666666 | Morgan  \n100.0  \n  \n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, statistics\r\n\r\nrandom_names = ['Gates', 'Bezos', 'Zuckerberg', 'Ellison', 'Page', 'Brin', 'Huateng', 'Dell', 'Musk', 'Allen']\r\n\r\ndef get_random_name():\r\n    global random_names\r\n    name = random_names[random.randint(0, len(random_names)-1)]\r\n    random_names.remove(name)\r\n    return name\r\n\r\n\r\ndef solution(data):\r\n    highest_value = -99999\r\n    highest_name = \"\"\r\n    count = 0\r\n    \r\n    for row in data:\r\n        if row[1] > highest_value:\r\n            highest_value = row[1]\r\n            highest_name = row[0]\r\n    \r\n    for row in data:\r\n        if row[1] >= highest_value - 10000:\r\n            count += 1\r\n\r\n    return highest_name, (count / len(data) * 100.0)\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num_inputs = random.randint(5, 7)\r\n    input_list = []\r\n    data = []\r\n        \r\n    for i in range(num_inputs):\r\n        new_row = [get_random_name(), random.randint(5000, 35000)]\r\n        input_list.append(new_row[0])\r\n        input_list.append(new_row[1])\r\n        data.append(new_row)\r\n    input_list.append(\"DONE\")\r\n    \r\n    highest_balance, percent = solution(data)\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn19_credit.py\", input_list)\r\n    lines = output.strip().split('\\n')\r\n\r\n    # Checks Min\r\n    if len(lines) < 2:\r\n        print(\"Number of output lines does not match\")\r\n        return 0\r\n    else:\r\n        if not highest_balance == lines[0]:\r\n            print(\"Incorrect Highest Balance.  Expected \" + str(highest_balance))\r\n            return 0\r\n        if not autograder.equals(percent, lines[1]):\r\n            print(\"Incorrect Percent.  Expected \" + str(percent))\r\n            return 50\r\n        \r\n    print(\"PASSED!\")\r\n    return 100\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 82, "problem_id": "lsn19_100m", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nYou have been asked by your unit to record 100m dash times for an upcoming\nUSAFA track meet. Create a Python algorithm that first asks for the number of\ncadets, and then asks for that many cadet last names, squadrons, and 100m dash\ntimes (in that order).\n\nYour program should output:\n\n  * The cadet squadron containing the cadet with the fastest 100m dash time followed by their 100m dash time. If there is a tie for fastest 100m dash times, you should output the squadron number and time for the LAST cadet entered who had that fastest time.\n  * The number of cadets whose 100m dash time was faster than the average.\n\nThere is no bound on the number of cadet that may be entered, but you may\nassume that there will be at least one cadet and track time entered.\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Inputs** | 4  \nThorpe  \n13  \n10.2  \nOwens  \n22  \n9.93  \nMathias  \n19  \n9.99  \nRudolph  \n39  \n10.23 | 3  \nJohnson  \n7  \n10.3  \nTyus  \n14  \n10.02  \nLewis  \n40  \n9.67 | 2  \nJoyner  \n1  \n10.08  \nKersee  \n29  \n9.97  \n**Output** | 22  \n9.93  \n2 | 40  \n9.67  \n1 | 29  \n9.97  \n1  \n  \n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, statistics\r\n\r\nrandom_names = ['Alice', 'Bob', 'Courtney', 'Devon', 'Frank', 'Genie']\r\n\r\ndef get_random_name():\r\n    global random_names\r\n    name = random_names[random.randint(0, len(random_names)-1)]\r\n    random_names.remove(name)\r\n    return name\r\n\r\ndef solution(data):\r\n    fastest_time = 99999\r\n    fastest_squadron = 0\r\n    total = 0\r\n    count = 0\r\n    \r\n    for row in data:\r\n        total += row[2]\r\n        if row[2] <= fastest_time:\r\n            fastest_time = row[2]\r\n            fastest_squadron = row[1]\r\n            \r\n    average = total / len(data)\r\n    \r\n    for row in data:\r\n        if row[2] <= average:\r\n            count += 1\r\n    \r\n    return fastest_squadron, fastest_time, count\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num_inputs = random.randint(2, 5)\r\n    input_list = [num_inputs]\r\n    data = []\r\n        \r\n    for i in range(num_inputs):\r\n        new_row = [get_random_name(), random.randint(1, 40), round(random.uniform(12, 18), 1)]\r\n        input_list.append(new_row[0])\r\n        input_list.append(new_row[1])\r\n        input_list.append(new_row[2])\r\n        data.append(new_row)\r\n    \r\n    fastest_squadron, fastest_time, count = solution(data)\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn19_100m.py\", input_list)\r\n    lines = output.strip().split('\\n')\r\n\r\n    # Checks Min\r\n    if len(lines) != 3:\r\n        print(\"Number of output lines does not match\")\r\n        return 0\r\n    else:\r\n        if not autograder.equals(fastest_squadron, lines[0]):\r\n            print(\"Incorrect Squadron.  Expected \" + str(fastest_squadron))\r\n            return 0\r\n        if not autograder.equals(fastest_time, lines[1]):\r\n            print(\"Incorrect Time.  Expected \" + str(fastest_time))\r\n            return 33\r\n        if not autograder.equals(count, lines[2]):\r\n            print(\"Incorrect Count.  Expected \" + str(count))\r\n            return 67\r\n        \r\n    print(\"PASSED!\")\r\n    return 100\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 83, "problem_id": "lsn18_swimstats", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nWrite a Python algorithm that keeps asking the user for swim times (in\nseconds) until the user types -1. Your program will print the following values\n(in order, one per line):\n\n  * Average time\n  * Range (i.e., the difference between the min and max time)\n  * Standard Deviation (hint: like many things in Python you can find how to accomplish this with a quick web search, stdev() should show up on top)\n\n\n\n  | Example 1 | Example 2  \n---|---|---  \nInputs | 62  \n71  \n83  \n-1 | 45  \n47  \n51  \n46  \n44  \n-1  \nOutputs | 72.0  \n21  \n8.602 | 46.6  \n7  \n2.417  \n  \n** **\n\n\n", "code": "\nimport statistics\n\ntimes = []\n\nwhile True:\n    time = int(input(\"Enter swim time in seconds (-1 to quit): \"))\n    if time == -1:\n        break\n    times.append(time)\n\naverage = sum(times) / len(times)\nrange_value = max(times) - min(times)\nstd_dev = statistics.stdev(times)\n\nprint(average)\nprint(range_value)\nprint(std_dev)\n", "testcase": "from cs110 import autograder\r\nimport random, statistics\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    list_of_swim_times = []\r\n    for i in range(6):\r\n        list_of_swim_times.append(random.randint(40, 60))\r\n    min_time = min(list_of_swim_times)\r\n    max_time = max(list_of_swim_times)\r\n    range_time = max_time - min_time\r\n    average = sum(list_of_swim_times) / len(list_of_swim_times)\r\n    \r\n    # There are multiple standard deviations; this unit test accepts either one\r\n    stdev = statistics.stdev(list_of_swim_times)\r\n    pstdev = statistics.pstdev(list_of_swim_times)\r\n    \r\n    list_of_swim_times.append(-1)\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn18_swimstats.py\", list_of_swim_times)\r\n    lines = output.split('\\n')\r\n\r\n    # Checks Min\r\n    if len(lines) != 4:\r\n        print(\"Number of output lines does not match\")\r\n        return 0\r\n    else:\r\n        if not autograder.equals(average, lines[0]):\r\n            print(\"Invalid Average.  Expected \" + str(average))\r\n            return 0\r\n        if not autograder.equals(range_time, lines[1]):\r\n            print(\"Invalid Range.  Expected \" + str(range_time))\r\n            return 33\r\n        if not (autograder.equals(stdev, lines[2]) or equals(pstdev, lines[2])):\r\n            print(\"Invalid Std Dev.  Expected \" + str(stdev))\r\n            return 67\r\n        \r\n    print(\"PASSED!\")\r\n    return 100\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 84, "problem_id": "lsn18_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM NAME:  \n** lsn18_skill2\n\n\n\n**PROBLEM STATEMENT:  \n** You are being provided with a list containing 5 random numbers. Create a\nvariable called **my_value** , and assign it the value of the 3rd item in the\nlist.\n\n\n\n**NOTES:**\n\n  * You do not need to print my_value OR the list\n\n\n", "code": "\nnumbers = [10, 15, 20, 25, 30]\nmy_value = numbers[2]\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nfrom lsn18_skill2 import *\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    if len(squadron_table) >= 2:\r\n        print(\"Squadron Table has at least 2 things in them.  Let's see what's inside!\")\r\n        score += 20\r\n        \r\n        if (squadron_table[0][0] == \"Dogs of War\" and squadron_table[0][1] == 3):\r\n            print(\"First Row Added Correctly\")\r\n            score += 40\r\n        else:\r\n            print(\"Something is wrong with the first row.  Make sure you are appending a list!\")\r\n        \r\n        if (squadron_table[1][0] == \"Wolverines\" and squadron_table[1][1] == 19):\r\n            print(\"Second Row Added Correctly\")\r\n            score += 40\r\n        else:\r\n            print(\"Something is wrong with the second row.  Make sure you are appending a list!\")\r\n    else:\r\n        print(\"Squadron Table does not appear to have (at least) 2 rows\")\r\n        \r\n    return score\r\n        \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 85, "problem_id": "lsn18_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Create a list called my_list. Put 3 items inside the list (they can be\nanything you want)\n\n\n\n**HINTS:  \n** Look at the quick reference guide! ****\n\n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nstarship_table = [['Constitution', 288.6,  127.1,  72.6],\r\n                  ['Galaxy',       642.5,  463.73, 135.26],\r\n                  ['Intrepid',     343.0,  133.0,  66],\r\n                  ['Sovereign',   685.3,  250.6,  88.2]]\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    row_to_print = random.randint(0, len(starship_table) - 1)\r\n    col_to_print = random.randint(0, len(starship_table[0]) - 1)\r\n    value_from_table = str(starship_table[row_to_print][col_to_print])\r\n    value_from_table_flipped = str(starship_table[col_to_print][row_to_print])\r\n    output, error = autograder.run_script(\"lsn18_skill1.py\", [row_to_print, col_to_print])\r\n    \r\n    if output.strip() == value_from_table:\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    elif output.strip() == value_from_table_flipped:\r\n        print(\"INCORRECT. Expected\", value_from_table)\r\n        print(\"It looks like you flipped columns and rows.  Remember that the format is list_name[row][col]\")\r\n        return 25.0\r\n    else:\r\n        print(\"INCORRECT. Expected\", value_from_table)\r\n        print(\"Try again.  Remember that the format is list_name[row][col]\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 86, "problem_id": "lsn18_namesreverse", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:**\n\nAllow the user to enter names one at a time until they type the word 'END'\n(without quotes). This keyword is called a  **sentinel value,**  and it marks\nthe end of the input. The user entered names (not counting 'END') are to be\nstored in a Python list. The user will enter the names one at a time. After\nentering all the names, your algorithm will print the names in the reverse\norder that they were entered.\n\n\n\n  | Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInputs | Adrian  \nLiam  \nMichelle  \nEND | Rick  \nMorty  \nEND | Spock  \nData  \nDax  \nBurnham  \nEND  \nOutputs | Michelle  \nLiam  \nAdrian | Morty  \nRick | Burnham  \nDax  \nData  \nSpock  \n  \nYou may assume that the user types at least one name.\n\n\n\n**HINTS:**\n\n  * Remember that the range() function can have up to 3 parameters. The first is the starting value, the second is the ending value, and the third is the increment amount.\n  * Don't forget that the index of a list starts at 0, and goes to the length of the list - 1. For example, a list with 5 elements has indices 0, 1, 2, 3, and 4.\n  * To get the length of a list, use the `len()` function\n\n\n", "code": "\nnames = []\n\nwhile True:\n    name = input(\"Enter a name (type 'END' to stop): \")\n    if name == \"END\":\n        break\n    names.append(name)\n\nfor i in range(len(names)-1, -1, -1):\n    print(names[i])\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\ndef solution(name_list):\r\n    result = ''\r\n    \r\n    for i in range(len(name_list) - 1, -1, -1):\r\n        result += name_list[i] + \"\\n\"\r\n\r\n    return result.strip()\r\n\r\n\r\ndef test_passed():\r\n    \r\n    name_list = [\"Alice\", \"Bob\", \"Catrina\", \"Dennis\", \"Felix\", \"Garfield\", \"Henry\", \"Ignis\", \"Jack\", \"Kelly\"]\r\n    num_names = random.randint(3, len(name_list))\r\n    input_list = []\r\n    random_names = []\r\n    \r\n    for i in range(num_names):\r\n        random_name = name_list[random.randint(0, len(name_list)-1)]\r\n        input_list.append(random_name)\r\n        random_names.append(random_name)\r\n        name_list.remove(random_name)\r\n    \r\n    input_list.append(\"END\")\r\n    \r\n    output, error = autograder.run_script(\"lsn18_namesreverse.py\", input_list)\r\n    expected_output = solution(random_names)\r\n    \r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT.  Expected:\")\r\n        print(expected_output)\r\n    \r\n    return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 87, "problem_id": "lsn18_names", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nWrite a Python algorithm that asks the user for the number of names to\nprocess, and then gets that many values. Print out the names in alphabetical\norder, with each name starting on a line.\n\n  | Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInputs | 3  \nAlice  \nJane  \nBob | 3  \nBailey  \nPaul  \nAdrian | 5  \nDavid  \nDave  \nSteve  \nBarry  \nTroy  \nOutputs | Alice  \nBob  \nJane | Adrian  \nBailey  \nPaul | Barry  \nDave  \nDavid  \nSteve  \nTroy  \n  \n\n\nYou may assume that the user will enter at least one name.\n\n\n\n**NOTES:**\n\n  * Python has a built-in function called `sort()` that can be used to sort a list. Here is an example to show you how to use it:  \n`# Declare a list and put some stuff in it`  \n`my_list = ['b', 'c', 'a', 'd']`  \n  \n`# Sort the list alphabetically (a-z)`  \n`my_list.sort()`\n\n** **\n\n\n", "code": "\n# take input from the user\nnum_of_names = int(input(\"Enter the number of names: \"))\n\n# initialize an empty list to store the names\nnames = []\n\n# get the names from the user and add them to the list\nfor i in range(num_of_names):\n    name = input(\"Enter a name: \")\n    names.append(name)\n\n# sort the names alphabetically\nnames.sort()\n\n# print out the names\nfor name in names:\n    print(name)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\ndef solution(name_list):\r\n    result = ''\r\n    \r\n    name_list.sort()\r\n    \r\n    for name in name_list:\r\n        result += name + \"\\n\"\r\n    \r\n    return result.strip()\r\n\r\n\r\ndef test_passed():\r\n    \r\n    name_list = [\"Alice\", \"Bob\", \"Catrina\", \"Dennis\", \"Felix\", \"Garfield\", \"Henry\", \"Ignis\", \"Jack\", \"Kelly\"]\r\n    num_names = random.randint(3, len(name_list))\r\n    input_list = [num_names]\r\n    random_names = []\r\n    \r\n    for i in range(num_names):\r\n        random_name = name_list[random.randint(0, len(name_list)-1)]\r\n        input_list.append(random_name)\r\n        random_names.append(random_name)\r\n        name_list.remove(random_name)\r\n    \r\n    output, error = autograder.run_script(\"lsn18_names.py\", input_list)\r\n    expected_output = solution(random_names)\r\n    \r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT.  Expected:\")\r\n        print(expected_output)\r\n    \r\n    return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 88, "problem_id": "lsn18_grades", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:**\n\nCreate a Python program that asks how many students are in a class, then\nprompts the user for each student's grade. Then output the grades that are\n**at least 10 points above the average.**\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 3  \n10  \n100  \n70 | 3  \n30  \n40  \n60 | 4  \n10  \n20  \n60  \n90  \nOutput | 100 | 70 | 60  \n90\n\n\n", "code": "```\n# Prompting user for the number of students in the class\nnum_students = int(input(\"How many students are in the class? \"))\n\n# Initializing an empty list to store the grades\ngrades = []\n\n# Prompting user for each student's grade\nfor i in range(num_students):\n    grade = int(input(\"Enter student's grade: \"))\n    grades.append(grade)\n\n# Calculating the average grade\naverage_grade = sum(grades) / num_students\n\n# Finding the grades that are at least 10 points above the average\nhigh_grades = [grade for grade in grades if grade >= average_grade + 10]\n\n# Printing the high grades\nfor grade in high_grades:\n    print(grade)\n```\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\ndef solution(grade_list):\r\n    result = ''\r\n    \r\n    average = sum(grade_list) / len(grade_list)\r\n    \r\n    for grade in grade_list:\r\n        if (grade >= (average + 10)):\r\n            result += str(grade) + \"\\n\"\r\n    \r\n    return result.strip()\r\n\r\n\r\ndef test_passed():\r\n    \r\n    num_grades = random.randint(3, 7)\r\n    input_list = [num_grades]\r\n    random_grades = []\r\n    \r\n    for i in range(num_grades):\r\n        random_grade = random.randint(0, 100)\r\n        input_list.append(random_grade)\r\n        random_grades.append(random_grade)\r\n    \r\n    output, error = autograder.run_script(\"lsn18_grades.py\", input_list)\r\n    expected_output = solution(random_grades)\r\n    \r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT.  Expected:\")\r\n        print(expected_output)\r\n    \r\n    return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 89, "problem_id": "lsn18_combinations", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nWrite a Python function called `get_combinations` that takes a list of\ndistinct characters as a parameter, and returns a list containing all of the\n2-letter combinations of said characters.\n\nFor example, given the following list:  \n`my_list = ['a', 'b']`\n\n`get_combinations(my_list)` should return a list containing the following\nelements:  \n['aa', 'ab', 'ba', 'bb']\n\nNotes:\n\n  * The ordering of the elements in the list does not matter, so long as all of the 2-letter combinations are contained within the list\n\n\n", "code": "\ndef get_combinations(chars):\n    combinations = []\n    for char1 in chars:\n        for char2 in chars:\n            combinations.append(char1 + char2)\n    return combinations\n```\n\nExample usage:\n\n", "testcase": "from cs110 import autograder\r\nimport random, lsn18_combinations\r\n\r\nSTUDENT_SCRIPT = \"lsn18_combinations.py\"\r\n\r\n\r\ndef solution(list_of_characters):\r\n    result = []\r\n    \r\n    for character1 in list_of_characters:\r\n        for character2 in list_of_characters:\r\n            result.append(character2 + character1)\r\n    \r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    possible_characters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\r\n    list_size = random.randint(2, len(possible_characters))\r\n    test_input = []\r\n    \r\n    for i in range(list_size):\r\n        random_index = int(random.random() * len(possible_characters))\r\n        random_character = possible_characters[random_index]\r\n        test_input.append(random_character)\r\n        possible_characters.remove(random_character)\r\n\r\n    # Runs the Script\r\n    answer = solution(test_input)\r\n    student_answer = lsn18_combinations.get_combinations(test_input)\r\n    \r\n    print(\"Letters Provided:\\n\", test_input, \"\\n\")\r\n    print(\"Expected:\\n\" + str(answer) + \"\\n\")\r\n    print(\"Your List:\\n\" + str(student_answer) + \"\\n\")\r\n\r\n    if len(answer) == len(student_answer):\r\n        for combo in answer:\r\n            if student_answer.count(combo) != 1:\r\n                print(\"Missing Combo Value: \" + combo)\r\n                return 0\r\n    else:\r\n        print(\"Lists are not the same size\")\r\n        return 0\r\n    \r\n    print(\"CORRECT\")\r\n    return 100\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 90, "problem_id": "lsn16_practice4", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a dataset called `fuelprices.csv` that contains\nmonthly gasoline prices from 2006 - 2012. Here is a typical line from the\ndataset (each line ends with the newline \"\\n\" character):\n\n`1/1/2006 0:00,Regular,2.314`\n\n\n\nEach position in the line (separated by a comma) represents a different \"data\nelement,\" or \"column.\" The following table shows how the above line can be\ninterpreted:\n\n  | Day | Gas Type | Price (in Dollars)  \n---|---|---|---  \nValue | 1/1/2006 0:00 | Regular | 2.314  \n  \n\n\nWrite a Python program that asks the user for:\n\n  * A Gas Type (e.g., \"Regular\")\n\n\n\nYour program should then read the file and output:\n\n  * The average price of gas for that gas type\n\n\n\n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef test_passed():\r\n\r\n    num_tests_passed = 0\r\n    test_cases = [(\"Regular\", 37, 2.938), (\"Midgrade\", 37, 3.098), (\"Premium\", 37, 3.208), (\"Diesel\", 32, 3.242)]\r\n\r\n    for test_case in test_cases:\r\n        print(\"# -----------------------------------\")\r\n        print(\"# Testing\", test_case[0])\r\n        print(\"# -----------------------------------\")\r\n        output, error = autograder.run_script(\"lsn16_practice4.py\", [test_case[0]])\r\n    \r\n        lines = output.strip().split('\\n')\r\n        \r\n        if len(lines) > 0:\r\n            if autograder.equals(lines[0], test_case[2]):\r\n                print(\"CORRECT\")\r\n                num_tests_passed += 1\r\n            elif len(lines) > 1 and autograder.equals(lines[0], test_case[1]) and autograder.equals(lines[1], test_case[2]):\r\n                print(\"CORRECT\")\r\n                num_tests_passed += 1\r\n            else:\r\n                print(\"INCORRECT\")\r\n            print()\r\n                    \r\n    return round(100 / len(test_cases), 1) * num_tests_passed\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 91, "problem_id": "lsn16_practice3", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You are writing a program to analyze the BMI of cadets. Write a program\nthat asks for the number of cadets, and then gets that many weights and\nheights (alternating, a weight then the corresponding height, in that order).\nYour program should then output the number of thin, healthy, overweight, and\nobese cadets (based on their BMI), using the following formula and table as a\nguide:\n\n\n\n**BMI = 703 * (weight / height 2)**\n\n\n\n**Rating** | **BMI**  \n---|---  \nThin | less than 18.5  \nHealthy | at least 18.5 but less than 25  \nOverweight | at least 25 but less than 30  \nObese | 30 or more  \n  \n\n\n\n\n\n", "code": "\nnum_cadets = int(input(\"Enter the number of cadets: \"))\n\nthin = 0\nhealthy = 0\noverweight = 0\nobese = 0\n\nfor i in range(num_cadets):\n    weight = float(input(\"Enter the weight of cadet {}: \".format(i+1)))\n    height = float(input(\"Enter the height of cadet {}: \".format(i+1)))\n    \n    bmi = 703 * (weight / (height**2))\n    \n    if bmi < 18.5:\n        thin += 1\n    elif bmi < 25:\n        healthy += 1\n    elif bmi < 30:\n        overweight += 1\n    else:\n        obese += 1\n\nprint(\"Thin: \", thin)\nprint(\"Healthy: \", healthy)\nprint(\"Overweight: \", overweight)\nprint(\"Obese: \", obese)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(weights, heights):\r\n    num_thin = 0\r\n    num_healthy = 0\r\n    num_overweight = 0\r\n    num_obese = 0\r\n    \r\n    for i in range(len(weights)):\r\n        bmi = 703 * (weights[i] / heights[i]**2)\r\n\r\n        if bmi <= 18.5:\r\n            num_thin += 1\r\n        elif bmi <= 25:\r\n            num_healthy += 1\r\n        elif bmi <= 30:\r\n            num_overweight += 1\r\n        else:\r\n            num_obese += 1\r\n    \r\n    return (num_thin, num_healthy, num_overweight, num_obese)\r\n\r\n\r\ndef test_passed():\r\n\r\n    score = 0\r\n\r\n    # Generates the Test Set\r\n    num_students = random.randint(5, 10)\r\n    inputs = [num_students]\r\n    weights = []\r\n    heights = []\r\n    \r\n    for i in range(num_students):\r\n        random_weight = random.randint(120, 200)\r\n        random_height = random.randint(55, 76)\r\n        \r\n        weights.append(random_weight)\r\n        heights.append(random_height)\r\n        \r\n        inputs.append(random_weight)\r\n        inputs.append(random_height)\r\n    \r\n    output, error = autograder.run_script(\"lsn16_practice3.py\", inputs)\r\n    expected_output = solution(weights, heights)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    \r\n    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):\r\n        print(\"Thin is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Thin is Incorrect.  Expected\", expected_output[0])\r\n\r\n    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):\r\n        print(\"Healthy is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Healthy is Incorrect.  Expected\", expected_output[1])\r\n    \r\n    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):\r\n        print(\"Overweight is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Overweight is Incorrect.  Expected\", expected_output[2])\r\n    \r\n    if len(lines) > 3 and autograder.equals(lines[3], expected_output[3]):\r\n        print(\"Obese is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Obese is Incorrect.  Expected\", expected_output[0])\r\n        \r\n    return score\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 92, "problem_id": "lsn16_practice2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a function that returns the nth value in a\nsequence (i.e., pattern). Get a number from the user (x), and print the xth to\nthe x+5th value in that sequence (6 numbers total).\n\n\n\n**HINTS:**\n\n  * To get the 8th value in a sequence, you would call `get_value(8)`\n\n\n\n\n", "code": "\ndef get_value(n):\n    return n * 2\n\nx = int(input(\"Enter a number: \"))\nfor i in range(x, x+6):\n    print(get_value(i))\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef get_value(n):\r\n    return (2 * n) + 1\r\n\r\n\r\ndef solution(x):\r\n    result = ''\r\n    \r\n    for i in range(x, x+6):\r\n        result += str(get_value(i)) + \"\\n\"\r\n    \r\n    return result\r\n\r\n\r\ndef test_passed():\r\n    random_value = random.randint(5, 15)\r\n    output, error = autograder.run_script(\"lsn16_practice2.py\", [random_value])\r\n    expected_output = solution(random_value)\r\n    \r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT.  Expected:\")\r\n        print(expected_output)\r\n    \r\n    return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 93, "problem_id": "lsn16_practice1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Define a function called add_values. The function should take 3 parameters\n(x, y, z), and return the sum of these values.\n\n\n\n**NOTES:**\n\n  * You do not need to call the function. Simple define it.\n\n\n\n\n", "code": "\ndef add_values(x, y, z):\n    return x + y + z\n", "testcase": "from cs110 import autograder\r\nimport lsn16_practice1\r\n\r\ndef add_values(x, y, z):\r\n    return x + y + z\r\n\r\ndef test_passed():\r\n    \r\n    if 'add_values' in dir(lsn16_practice1) and add_values(1, 2, 3) == lsn16_practice1.add_values(1, 2, 3):\r\n        print(\"PASSED\")\r\n        return 100.0\r\n    elif 'add_values' not in dir(lsn16_practice1):\r\n        print(\"FAILED.  Could not find function 'add_values'\")\r\n    elif result != solution:\r\n        print(\"FAILED.  Function 'add_values' did not return the correct value\")\r\n    else:\r\n        print(\"FAILED.  Something unexpected happened.\")\r\n    \r\n    return 0.0\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 94, "problem_id": "lsn15_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a python program that creates a file called \"output.txt\" and prints a\nmessage of your choosing.\n\n**HINTS:  \n** Look at the quick reference guide!\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math, os\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0.0\r\n    \r\n    # Deletes Result.txt if it already exists\r\n    if (os.path.exists(\"output.txt\")):\r\n        os.remove(\"output.txt\")\r\n    \r\n    output, error_message = autograder.run_script(\"lsn15_skill2.py\", [])\r\n    \r\n    if (os.path.exists(\"output.txt\")):\r\n        print(\"File Found!\")\r\n        score += 50\r\n        file = open(\"output.txt\", \"r\")\r\n        file_contents = file.read()\r\n        if (len(file_contents) > 0):\r\n            print(\"File has Something in it!\")\r\n            score += 50\r\n        else:\r\n            print(\"output.txt appears to be empty.  Did you forget to close the file or write to it?\")\r\n    else:\r\n        print(\"File output.txt does not appear to exist\")\r\n    \r\n    return score\r\n        \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 95, "problem_id": "lsn15_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a file called sample.txt. Write a python\nprogram that opens this file and prints all of its contents as a single\nstring.\n\n\n\n**HINTS:  \n** Look at the quick reference guide!\n\n\n\n\n", "code": "\nfile = open(\"sample.txt\", \"r\")\ncontent = file.read()\nfile.close()\n\nprint(content)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    expected_output = \"Lorem ipsum dolor sit amet, qui at luptatum efficiantur, ne autem offendit expetendis mel. Nec augue assentior ea, ne debet virtute mel. Integre vivendo id usu, ne primis repudiandae ullamcorper cum. Harum prompta appellantur vix ut. Ius voluptatibus definitiones te, eius scribentur referrentur mei at. Suas tota velit in usu, ex has complectitur signiferumque, sale lorem dolore ei ius. Perpetua scriptorem mei ex, ex est illum summo consul.\"\r\n    \r\n    output, error_message = autograder.run_script(\"lsn15_skill1.py\", [])\r\n        \r\n    lines = output.strip().split('\\n')\r\n    expected_lines = expected_output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_lines)\r\n    \r\n    if num_matches == len(lines):\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT\")\r\n        return 0.0\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 96, "problem_id": "lsn15_echo", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite a program that asks the user to type the name of a file (e.g.,\n\"file.txt\"), and a letter. Your program should then open the file, and print\nout all of the lines where the first character starts with the letter\n\nFor example, if the user types the following filename:\n\n    \n    \n    input1.txt\n    a\n    \n\nand the contents of input1.txt are:\n\n    \n    \n    aspiration\n    classified\n    federation\n    \n\nthe output should be:\n\n    \n    \n    aspiration\n    \n\n\n\nNotes:\n\n  * Each line ends with the '\\n' character. Use `split()` to get each line.\n  * Refer to the String Functions slide to see how you can get the first character from a string\n\n\n", "code": "\nfilename = input(\"Enter the filename: \")\nletter = input(\"Enter a letter: \")\n\nwith open(filename, 'r') as file:\n    lines = file.readlines()\n\nfor line in lines:\n    if line.strip()[0] == letter:\n        print(line.strip())\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(filename, letter):\r\n    result = ''\r\n    \r\n    file = open(filename, \"r\")\r\n    contents = file.read()\r\n    lines = contents.split(\"\\n\")\r\n\r\n    for line in lines:\r\n        if line[0] == letter:\r\n            result += line + \"\\n\"\r\n\r\n    file.close()\r\n\r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_letter = chr(random.randint(97, 122))\r\n    \r\n    output, error_message = autograder.run_script(\"lsn15_echo.py\", [\"file.txt\", random_letter])\r\n    expected_output = solution(\"file.txt\", random_letter)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    expected_lines = expected_output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_lines)\r\n    \r\n    if num_matches == len(lines):\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT\")\r\n        return 0.0\r\n        \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 97, "problem_id": "lsn14_timestable", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n** Write an algorithm that asks the user for a positive number and then\noutputs the multiplication table of that number 1-10.\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2  \n---|---|---  \nInputs | 3 | 9  \nOutputs |\n\n3  \n6  \n9  \n12  \n15  \n18  \n21  \n24  \n27  \n30\n\n| 9  \n18  \n27  \n36  \n45  \n54  \n63  \n72  \n81  \n90  \n  \n\n\n\n", "code": "Below is a Python program that solves the problem:\n\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(multiple):\r\n    result = ''\r\n    i = 1\r\n    \r\n    while i <= 10:\r\n        result += str(i * multiple) + \"\\n\"\r\n        i += 1\r\n    \r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_multiple = random.randint(1, 20)\r\n\r\n    output, error_message = autograder.run_script(\"lsn14_timestable.py\", [random_multiple])\r\n    expected_output = solution(random_multiple)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n    \r\n    return 0\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 98, "problem_id": "lsn14_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You are trying to use a for loop to print all of the powers of 2 from 1024\n(210) to 1 (20). Unfortunately, for some reason, the loop does not work.\nReview the code and make the necessary corrections.\n\n\n", "code": "\n# Defining the range from 210 to 20 (inclusive) and reducing the power of 2 each time\nfor i in range(10, -1, -1):\n    print(2 ** i)\n", "testcase": "from cs110 import autograder\r\nimport random, math, os\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0.0\r\n    \r\n    # Deletes Result.txt if it already exists\r\n    if (os.path.exists(\"output.txt\")):\r\n        os.remove(\"output.txt\")\r\n    \r\n    output, error_message = autograder.run_script(\"lsn14_skill2.py\", [])\r\n    \r\n    if (os.path.exists(\"output.txt\")):\r\n        print(\"File Found!\")\r\n        score += 50\r\n        file = open(\"output.txt\", \"r\")\r\n        file_contents = file.read()\r\n        if (len(file_contents) > 0):\r\n            print(\"File has Something in it!\")\r\n            score += 50\r\n        else:\r\n            print(\"output.txt appears to be empty.  Did you forget to close the file or write to it?\")\r\n    else:\r\n        print(\"File output.txt does not appear to exist\")\r\n    \r\n    return score\r\n        \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 99, "problem_id": "lsn14_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a variable that asks the user for the number of\ntimes to loop. Construct a FOR loop that loops this many times printing out a\nmessage each time (the message can be whatever you want)\n\n\n", "code": "\nnum_loops = int(input(\"Enter the number of times to loop: \"))\n\nfor i in range(num_loops):\n    print(\"Loop\", i+1, \"message\") \n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    expected_output = \"Lorem ipsum dolor sit amet, qui at luptatum efficiantur, ne autem offendit expetendis mel. Nec augue assentior ea, ne debet virtute mel. Integre vivendo id usu, ne primis repudiandae ullamcorper cum. Harum prompta appellantur vix ut. Ius voluptatibus definitiones te, eius scribentur referrentur mei at. Suas tota velit in usu, ex has complectitur signiferumque, sale lorem dolore ei ius. Perpetua scriptorem mei ex, ex est illum summo consul.\"\r\n    \r\n    output, error_message = autograder.run_script(\"lsn14_skill1.py\", [])\r\n        \r\n    lines = output.strip().split('\\n')\r\n    expected_lines = expected_output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_lines)\r\n    \r\n    if num_matches == len(lines):\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT\")\r\n        return 0.0\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 100, "problem_id": "lsn14_printchars", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Write a Python algorithm that asks the users for two ASCII characters\n(e.g., 'a', 'z'), and prints all of the characters between them (inclusive).\n\n  * If the first character has a lower ASCII value than the second (e.g., 'a' - 'z'), print out the letters in ascending order.\n  * Alternatively, if the second letter has a lower ASCII value, print out the letters in descending order.\n\n\n\n**HINTS:**\n\n  * Use the `ord()` function to convert a character into an integer:  \n`ord('a')` returns 141  \n  \n\n  * Use the `chr()` function to convert an integer back into a character:  \n`chr(142)` returns 'b'\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2  \n---|---|---  \nInputs | a  \nc | f  \na  \nOutputs |\n\na  \nb  \nc\n\n| f  \ne  \nd  \nc  \nb  \na\n\n\n", "code": "\nfirst_char = input(\"Enter the first character: \")\nsecond_char = input(\"Enter the second character: \")\n\nif ord(first_char) < ord(second_char):\n    for i in range(ord(first_char), ord(second_char)+1):\n        print(chr(i))\nelse:\n    for i in range(ord(first_char), ord(second_char)-1, -1):\n        print(chr(i))\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(start_char, end_char):\r\n    result = ''\r\n    \r\n    start_char = ord(start_char)\r\n    end_char = ord(end_char)\r\n    \r\n    if start_char < end_char:\r\n        for i in range(start_char, end_char+1, 1):\r\n            result += chr(i) + '\\n'\r\n    else:\r\n        for i in range(start_char, end_char-1, -1):\r\n            result += chr(i) + '\\n'\r\n\r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    print(\"# ------------------------------------------\")\r\n    print(\"# Test 1:  First letter lower than second\")\r\n    print(\"# ------------------------------------------\")\r\n    start_char = chr(random.randint(65, 85))\r\n    end_char   = chr(random.randint(ord(start_char), 90))\r\n\r\n    output, error_message = autograder.run_script(\"lsn14_printchars.py\", [start_char, end_char])\r\n    expected_output = solution(start_char, end_char)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\\n\")\r\n        score += 50\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n        \r\n    \r\n    print(\"# ------------------------------------------\")\r\n    print(\"# Test 2:  First letter higher than second\")\r\n    print(\"# ------------------------------------------\")\r\n    start_char = chr(random.randint(85, 90))\r\n    end_char   = chr(random.randint(65, 84))\r\n\r\n    output, error_message = autograder.run_script(\"lsn14_printchars.py\", [start_char, end_char])\r\n    expected_output = solution(start_char, end_char)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\\n\")\r\n        score += 50\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 101, "problem_id": "lsn14_football", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** In, Python, write an algorithm that first asks the user how many football\nplayers they wish to enter statistics for and then gets that many yearly\npassing totals for each player. Output how many of those players that had more\nthan 5000 passing yards in a year. Also your algorithm will output the average\nyardage per year as well as the minimum yardage entered, in that order. You\ncan assume there is at least one player's yardage to input.\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2 | Example 3  \n---|---|---|---  \n**Inputs** | 6  \n4924  \n4442  \n5117  \n2700  \n1990  \n4399 | 5  \n2305  \n4209  \n5100  \n5109  \n3800 | 4  \n4200  \n2709  \n3757  \n2976  \n**Outputs** | 1  \n3928.6666666666665  \n1990 | 2  \n4104.6  \n2305 | 0  \n3410.5  \n2709\n\n\n", "code": "\nnum_players = int(input(\"Enter the number of football players: \"))\n\npassing_yardages = []\nabove_5000 = 0\ntotal_yardages = 0\n\nfor _ in range(num_players):\n    yardage = int(input(\"Enter the yearly passing total: \"))\n    passing_yardages.append(yardage)\n    if yardage > 5000:\n        above_5000 += 1\n    total_yardages += yardage\n\naverage_yardage = total_yardages / num_players\nminimum_yardage = min(passing_yardages)\n\nprint(above_5000)\nprint(average_yardage)\nprint(minimum_yardage)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    num_entries = random.randint(1, 6)\r\n    num_above_5000 = random.randint(0, num_entries)\r\n    list_of_values = [num_entries]\r\n    \r\n    for i in range(num_entries):\r\n        if i < num_above_5000:\r\n            list_of_values.append(random.randint(5001, 8000))\r\n        elif i == num_above_5000:\r\n            list_of_values.append(5000)\r\n        else:\r\n            list_of_values.append(random.randint(1, 5000))\r\n    \r\n    average = sum(list_of_values[1:])/num_entries\r\n    min_value = min(list_of_values[1:])\r\n    \r\n    output, error_message = autograder.run_script(\"lsn14_football.py\", list_of_values)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if len(lines) >= 1 and autograder.equals(lines[0], num_above_5000):\r\n        print(\"Number Above 5000 Looks Good\")\r\n        score += 33\r\n    else:\r\n        print(\"Number Above 5000 is Incorrect (or Missing)\")\r\n    \r\n    if len(lines) >= 2 and autograder.equals(lines[1], average):\r\n        print(\"Average Looks Good\")\r\n        score += 33\r\n    else:\r\n        print(\"Average is Incorrect (or Missing)\")\r\n    \r\n    if len(lines) >= 3 and autograder.equals(lines[2], min_value):\r\n        print(\"Min Value Looks Good\")\r\n        score += 34\r\n    else:\r\n        print(\"Min Value is Incorrect (or Missing)\")\r\n        \r\n    return score\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 102, "problem_id": "lsn14_counting", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n** Write a Python algorithm that gets three numbers from the user, X, Y, and\nZ. Then have the algorithm output all the numbers from X to Y (inclusive),\ncounting by Z. You may assume that Z is non-zero.\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2 | Example 3  \n---|---|---|---  \n**Inputs** | 1  \n5  \n1 | -5  \n-10  \n-3 | 15  \n15  \n100  \n**Outputs** | 1  \n2  \n3  \n4  \n5 | -5  \n-8 | 15\n\n\n", "code": "\n# Read the inputs from the user\nX = int(input(\"Enter X: \"))\nY = int(input(\"Enter Y: \"))\nZ = int(input(\"Enter Z: \"))\n\n# Output the numbers from X to Y, counting by Z\nfor num in range(X, Y+1, Z):\n    print(num)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(random_start, random_end, random_increment):\r\n    result = ''\r\n\r\n    for i in range(random_start, random_end+1, random_increment):\r\n        result += str(i) + \"\\n\"\r\n\r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_start = random.randint(0, 10)\r\n    random_end = random.randint(50, 100)\r\n    random_increment = random.randint(2, 9)\r\n\r\n    output, error_message = autograder.run_script(\"lsn14_counting.py\", [random_start, random_end, random_increment])\r\n    expected_output = solution(random_start, random_end, random_increment)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n    \r\n    return 0\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 103, "problem_id": "lsn14_coordinates", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a Python algorithm that prints all the coordinates in a coordinate\nplane, given two corners. Your program should get four inputs from the user:\n\n  * the starting x-coordinate,\n  * the ending x-coordinate,\n  * the starting y-coordinate, and\n  * the ending y-coordinate.\n\nYour program will then print out all of the coordinates in x y order\n(separating coordinates with a space), listing all of the coordinates in the\nx-axis before incrementing y. You may assume that the ending coordinate is\nnever less than the starting coordinate.  \n\nFor example, your algorithm would print out:  \n1 2  \n2 2  \n3 2  \n4 2  \n5 2  \n6 2  \n1 3  \n2 3  \n3 3  \n4 3  \n5 3  \n6 3  \n. . . and so on\n\n\n\n**HINTS:**\n\n  * Write a loop that first prints all of the x coordinates from start to end\n  * Use a nested loop to print all of the y coordinates from start to end\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**Inputs** | 0  \n1  \n0  \n1 | 0  \n2  \n0  \n1  \n**Outputs** | 0 0  \n1 0  \n0 1  \n1 1 | 0 0  \n1 0  \n2 0  \n0 1  \n1 1  \n2 1  \n  \n\n\n\n", "code": "\nstart_x = int(input(\"Enter the starting x-coordinate: \"))\nend_x = int(input(\"Enter the ending x-coordinate: \"))\nstart_y = int(input(\"Enter the starting y-coordinate: \"))\nend_y = int(input(\"Enter the ending y-coordinate: \"))\n\nfor x in range(start_x, end_x+1):\n    for y in range(start_y, end_y+1):\n        print(x, y)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(start_x, end_x, start_y, end_y):\r\n    result = ''\r\n\r\n    for y in range(start_y, end_y+1):\r\n        for x in range(start_x, end_x+1):\r\n            result += str(x) + \" \" + str(y) + \"\\n\"\r\n\r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    start_x = random.randint(-2, -1)\r\n    end_x = random.randint(1, 2)\r\n    start_y = random.randint(-3, -1)\r\n    end_y = random.randint(1, 3)\r\n\r\n    output, error_message = autograder.run_script(\"lsn14_coordinates.py\", [start_x, end_x, start_y, end_y])\r\n    expected_output = solution(start_x, end_x, start_y, end_y)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    num_matches = autograder.compare_strings(lines, expected_output.strip().split('\\n'))\r\n\r\n    return 100 * (num_matches / len(lines))\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 104, "problem_id": "lsn14_class2017", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** In Python, write an algorithm that first asks the user how many cadets to\ninput and then gets that many cadet class years from the user. Output how many\nof those cadets were in the class of 2017. You can assume there is at least\none cadet to enter.\n\n**EXAMPLES:**\n\nExample 1 | Example 2 | Example 3  \n---|---|---  \nInputs | 4  \n2014  \n2016  \n2017  \n2017 | 5  \n2015  \n2017  \n2014  \n2014  \n2017 | 4  \n2014  \n2016  \n2014  \n2014  \nOutputs | 2 | 3 | 0\n\n\n", "code": "\nnum_cadets = int(input(\"Enter the number of cadets: \"))\ncadet_years = []\ncount_2017 = 0\n\nfor i in range(num_cadets):\n    year = int(input(\"Enter the cadet's class year: \"))\n    cadet_years.append(year)\n    if year == 2017:\n        count_2017 += 1\n\nprint(count_2017)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    num_entries = random.randint(1, 6)\r\n    num_in_2017 = random.randint(0, num_entries)\r\n    list_of_values = [num_entries]\r\n    \r\n    for i in range(num_entries):\r\n        if i < num_in_2017:\r\n            list_of_values.append(2017)\r\n        else:\r\n            list_of_values.append(random.randint(2018, 2024))\r\n        \r\n    output, error_message = autograder.run_script(\"lsn14_class2017.py\", list_of_values)\r\n    \r\n    lines = output.strip().split('\\n')\r\n\r\n    if len(lines) >= 1 and autograder.equals(lines[0], num_in_2017):\r\n        print(\"CORRECT\")\r\n        score += 100\r\n    else:\r\n        print(\"Expected\", num_in_2017)\r\n        \r\n    return score\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 105, "problem_id": "lsn13_waittimes", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write an algorithm that lets the user input the wait times for various\nrides at an amusement park (in minutes) until he/she types the value -999.\nOutput the shortest waiting time, followed by the number of waiting times that\nare over 30 minutes.\n\n**EXAMPLE:**\n\nExample 1 | Example 2 | Example 3  \n---|---|---  \nInputs |\n\n90  \n30  \n31  \n-999\n\n|\n\n35  \n15  \n90  \n120  \n15  \n-999\n\n|\n\n15  \n15  \n10  \n5  \n-999  \n  \nOutputs | 30  \n2 | 15  \n3 | 5  \n0\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0.0\r\n    \r\n    possible_tests = [[30, 45, 15, 5, 5, -999], [15, 30, 31, 29, 120, 90, -999]]\r\n    possible_output = [[5, 1], [15, 3]]\r\n    \r\n    # Generates a Random Test\r\n    random_index = random.randint(0, len(possible_tests)-1)\r\n    random_test = possible_tests[random_index]\r\n    expected_output = possible_output[random_index]\r\n            \r\n    output, error = autograder.run_script(\"lsn13_waittimes.py\", random_test)\r\n    \r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):\r\n        print(\"Min Wait Time is Correct\")\r\n        score += 50\r\n    else:\r\n        print(\"Min Wait Time is Incorrect.  Expected\", expected_output[0])\r\n        \r\n    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):\r\n        print(\"Number of Lines With Over 30 Minute Wait Times is Correct\")\r\n        score += 50\r\n    else:\r\n        print(\"Number of Lines With Over 30 Minute Wait Times is Incorrect.  Expected\", expected_output[1])\r\n    \r\n    return score\r\n\r\n\r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 106, "problem_id": "lsn13_squadrons", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write an algorithm that asks the user for the number of squadrons to input,\nand then gets each squadron's number. Output the number  \nof squadrons from 1st, 2nd, 3rd, and 4th groups (one per line)\n\n**EXAMPLE:**\n\nExample 1 | Example 2 | Example 3  \n---|---|---  \nInputs |\n\n3  \n3  \n19  \n24\n\n|\n\n4  \n19  \n25  \n37  \n40\n\n|\n\n2  \n1  \n34  \n  \nOutputs | 1  \n1  \n1  \n0 | 0  \n1  \n1  \n2 | 1  \n0  \n0  \n1\n\n\n", "code": "\nnum_groups = 4\nsquadrons = [0] * num_groups\n\nnum_squadrons = int(input(\"Enter the number of squadrons: \"))\n\nfor _ in range(num_squadrons):\n    squadron = int(input(\"Enter the squadron number: \"))\n\n    if squadron <= 10:\n        squadrons[0] += 1\n    elif squadron <= 20:\n        squadrons[1] += 1\n    elif squadron <= 30:\n        squadrons[2] += 1\n    elif squadron <= 40:\n        squadrons[3] += 1\n\nfor count in squadrons:\n    print(count)\n```\n\n**Explanation:**\n\n- We define a list `squadrons` with `num_groups` number of elements, all initialized to 0. This list will hold the count of squadrons in each group.\n- We ask the user to enter the total number of squadrons (`num_squadrons`).\n- We then use a loop to iterate `num_squadrons` number of times.\n- In each iteration, we ask the user to enter a squadron number (`squadron`).\n- We use conditional statements to check which group the squadron belongs to and increment the corresponding element in the `squadrons` list accordingly.\n- Finally, we use a loop to print the count of squadrons in each group, one per line.", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0.0\r\n    \r\n    possible_tests = [[5, 10, 20, 30, 40, 19], [8, 3, 1, 23, 37, 40, 7, 6, 25]]\r\n    possible_output = [[1, 2, 1, 1], [4, 0, 2, 2]]\r\n    \r\n    # Generates a Random Test\r\n    random_index = random.randint(0, len(possible_tests)-1)\r\n    random_test = possible_tests[random_index]\r\n    expected_output = possible_output[random_index]\r\n            \r\n    output, error = autograder.run_script(\"lsn13_squadrons.py\", random_test)\r\n    \r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):\r\n        print(\"Num in Group One is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Num in Group One is Incorrect.  Expected\", expected_output[0])\r\n        \r\n    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):\r\n        print(\"Num in Group Two is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Num in Group Two is Incorrect.  Expected\", expected_output[1])\r\n    \r\n    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):\r\n        print(\"Num in Group Three is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Num in Group Three is Incorrect.  Expected\", expected_output[2])\r\n    \r\n    if len(lines) > 3 and autograder.equals(lines[3], expected_output[3]):\r\n        print(\"Num in Group Four is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Num in Group Four is Incorrect.  Expected\", expected_output[3])\r\n    \r\n    return score\r\n\r\n\r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 107, "problem_id": "lsn13_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a WHILE loop that prints values from 0 to 10.\nModify the code so that it counts from 10 to 0.\n\n\n", "code": "\nx = 10\nwhile x >= 0:\n    print(x)\n    x -= 1\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution():\r\n    result = ''\r\n    i = 10\r\n    \r\n    while i >= 0:\r\n        result += str(2 ** i) + \"\\n\"\r\n        i -= 1\r\n    \r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    output, error_message = autograder.run_script(\"lsn13_skill2.py\", [])\r\n    expected_output = solution()\r\n    \r\n    lines = output.strip().split('\\n')\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n    \r\n    return 0\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 108, "problem_id": "lsn13_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You are trying to use a for loop to print all of the powers of 2 from 1024\n(210) to 1 (20). Unfortunately, for some reason, the loop does not work.\nReview the code and make the necessary corrections.\n\n\n", "code": "\nfor i in range(10, -1, -1):\n    print(2 ** i)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_multiple = random.randint(1, 10)\r\n\r\n    output, error_message = autograder.run_script(\"lsn13_skill1.py\", [random_multiple])\r\n    \r\n    lines = output.strip().split('\\n')\r\n\r\n    if len(lines) == random_multiple:\r\n        print(\"CORRECT\")\r\n        return 100\r\n    else:\r\n        print(\"INCORRECT.  Make sure your loop is repeating num_times_to_loop times\")\r\n    \r\n    return 0\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 109, "problem_id": "lsn13_dvc", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** The CS110Z course director, unfortunately, was tricked into purchasing a\nDisney Vacation Club timeshare. The good news about DVC is that it lets you\nreserve a room at any Disney Resort for one week! The downside, however, is\nthat members have to pay an annual \"maintenance fee\" so that the mouse can\nkeep the property looking good (EVEN when Disney World was closed due to\nCOVID-19 . . . yay).\n\nThis year, the maintenance was $623.00. If that isn't bad enough, your course\ndirector discovered that maintenance fees aren't fixed! On the contrary, it\naccues each year at a rate of approximately 1.5%.\n\nWrite a Python function called `get_years_until` that takes a  **target\nvalue**  as a parameter, and returns the number of years (assuming a fixed\ninterest rate) before the maintenance fee exceeds this value.\n\n**Example 1**  \n`get_years_until(624)` should return 1. This is because:\n\n  * The maintenance fee will increase by $9.35 (i.e., 1.5% of 623) in a year\n  * The new maintenance fee will be $623.00 + $9.35 = $632.35, which is obviously more than $624.00\n\n**  \nExample 2**  \n`get_years_until(1000)` should return 32. This is because:\n\n  * 623 * 1.015 * 1.015 * 1.015 . . . (32 times total) = $1003.23, which is obviously more than $1000.00\n\n  \n**Don't Know Where to Start?!?**  \nUse a While loop to keep calculating the new maintenance fee until the value\nis . . . (we'll let you figure out the rest).\n\n\n", "code": "", "testcase": "from lsn13_dvc import get_years_until\r\nfrom cs110 import autograder\r\nimport random, math\r\n\r\nNUM_SUBTESTS = 5\r\n\r\ndef soln(target_value):\r\n    maintenance_fee = 623.00\r\n    interest_rate = 0.015\r\n    count = 0\r\n\r\n    while maintenance_fee < target_value:\r\n        count += 1\r\n        maintenance_fee = maintenance_fee * (1 + interest_rate)\r\n    \r\n    return count\r\n\r\ndef test_passed():\r\n    passed = 0\r\n    for i in range(NUM_SUBTESTS):\r\n        print('Running test %d of %d:' % (i+1 , NUM_SUBTESTS), end='')\r\n        target_amount = random.randint(650, 1100)\r\n        if autograder.equals(get_years_until(target_amount), soln(target_amount)):\r\n            print(\"  It will take \" + str(get_years_until(target_amount)) + \" years until the maintenance fee exceeds $\" + str(target_amount))\r\n            passed += 1\r\n        else:\r\n            print('  get_years_until(%d) incorrectly returned %d instead of %d\\n' % (target_amount, get_years_until(target_amount), soln(target_amount)))\r\n    \r\n    return round((100 / NUM_SUBTESTS), 1) * passed\r\n\r\n\r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 110, "problem_id": "lsn13_countby10s", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a program whose input is two integers. Output the first integer and\nsubsequent increments of 10 as long as the value is less than or equal to the\nsecond integer.\n\nCase #1: If the input is:\n\n    \n    \n    -15\n    30\n    \n\nthe output is:\n\n    \n    \n    -15\n    -5\n    5\n    15\n    25\n    \n\nCase 2: If the second integer is less than the first as in:\n\n    \n    \n    20\n    5\n    \n\nthe output is:\n\n    \n    \n    Second integer can't be less than the first.\n    \n\nFor coding simplicity, output a space after every integer, including the last.\n\n\n", "code": "\ndef print_numbers(num1, num2):\n    if num1 > num2:\n        return \"Second integer can't be less than the first.\"\n    \n    result = [str(num1)]\n    while num1 + 10 <= num2:\n        num1 += 10\n        result.append(str(num1))\n    \n    return '\\n'.join(result)\n\nnum1 = int(input())\nnum2 = int(input())\nprint(print_numbers(num1, num2))\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(starting_value, value_to_count_to):\r\n    result = ''\r\n    \r\n    if value_to_count_to < starting_value:\r\n        return \"Second integer can't be less than the first.\"\r\n    else:\r\n        i = starting_value\r\n        \r\n        while i <= value_to_count_to:\r\n            result += str(i) + \"\\n\"\r\n            i += 10\r\n        \r\n        return result\r\n\r\ndef run_test(random_starting_number, random_ending_number):\r\n    print(\"#--------------------------------------------\")\r\n    print(\"# Testing\", random_starting_number, \"to\", random_ending_number)\r\n    print(\"#--------------------------------------------\")\r\n    \r\n    output, error_message = autograder.run_script(\"lsn13_countby10s.py\", [random_starting_number, random_ending_number])\r\n    expected_output = solution(random_starting_number, random_ending_number)\r\n    \r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\\n\")\r\n        return True\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n        print()\r\n    \r\n    return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    \r\n    if run_test(10 * random.randint(1, 5), 60 + 10 * random.randint(1, 20)):\r\n        score += 40\r\n        \r\n    if run_test(random.randint(0, 30), random.randint(31, 200)):\r\n        score += 40\r\n    \r\n    if run_test(random.randint(50, 100), random.randint(0, 10)):\r\n        score += 20\r\n    \r\n    \r\n    return score\r\n\r\n        \r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 111, "problem_id": "lsn13_count", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a Python program that gets 2 inputs from the user\n\n  * a number,  **x**\n  * an increment amount,  **y**\n\nYour program will then print out all the numbers from 0 to the user-defined\nvalue (x), counting by the increment amount (y).\n\n**EXAMPLES:**\n\n| Example 1 | Example 2  \n---|---|---  \nInputs | 10  \n2 | 14  \n3  \nOutputs | 0  \n2  \n4  \n6  \n8  \n10 | 0  \n3  \n6  \n9  \n12\n\n\n", "code": "\nx = int(input(\"Enter a number: \"))\ny = int(input(\"Enter an increment amount: \"))\n\nfor i in range(0, x+1, y):\n    print(i)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(value_to_count_to, increment):\r\n    result = ''\r\n    i = 0\r\n    \r\n    while i <= value_to_count_to:\r\n        result += str(i) + \"\\n\"\r\n        i += increment\r\n    \r\n    return result\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_ending_number = 10 + 2 * random.randint(1, 10)\r\n    random_increment = 2\r\n\r\n    output, error_message = autograder.run_script(\"lsn13_count.py\", [random_ending_number, random_increment])\r\n    expected_output = solution(random_ending_number, random_increment)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n    \r\n    return 0\r\n\r\n        \r\n# Testbench (to run on outside of zyBooks)\r\nif __name__ == '__main__':   \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 112, "problem_id": "lsn13_cargocapacity", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write an algorithm that lets the user input the cargo capacity (in lbs) of\nvarious transport aircraft until the user enters -1. Your program should\noutput the min and max cargo capacity, as well as the number of aircraft that\ncan carry at least 10000 lbs.\n\n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInputs |\n\n4500  \n11000  \n9000  \n-1\n\n|\n\n9999  \n15000  \n3500  \n17500  \n-1\n\n| 10000  \n-1  \nOutputs | 4500  \n11000  \n1 | 3500  \n17500  \n2 | 10000  \n10000  \n1\n\n\n", "code": "\ndef transport_aircraft_capacity():\n    capacities = []\n    count = 0\n    while True:\n        capacity = int(input())\n        if capacity == -1:\n            break\n        capacities.append(capacity)\n        if capacity >= 10000:\n            count += 1\n    if capacities:\n        min_capacity = min(capacities)\n        max_capacity = max(capacities)\n        print(min_capacity)\n        print(max_capacity)\n        print(count)\n\ntransport_aircraft_capacity()\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0.0\r\n    \r\n    possible_tests = [[8000, 12000, 25000, 10000, 7500, -1], [5000, 9000, 22000, 10000, 8700, -1], [9999, 5000, 3000, -1]]\r\n    possible_output = [[7500, 25000, 3], [5000, 22000, 2], [3000, 9999, 0]]\r\n    \r\n    # Generates a Random Test\r\n    random_index = random.randint(0, len(possible_tests)-1)\r\n    random_test = possible_tests[random_index]\r\n    expected_output = possible_output[random_index]\r\n            \r\n    output, error = autograder.run_script(\"lsn13_cargocapacity.py\", random_test)\r\n    \r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):\r\n        print(\"Min Value is Correct\")\r\n        score += 30\r\n    else:\r\n        print(\"Min Value is Incorrect.  Expected\", expected_output[0])\r\n    \r\n    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):\r\n        print(\"Max Value is Correct\")\r\n        score += 30\r\n    else:\r\n        print(\"Max Value is Incorrect.  Expected\", expected_output[1])\r\n        \r\n    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):\r\n        print(\"Number of Aircraft with At Least 10000 lbs is Correct\")\r\n        score += 40\r\n    else:\r\n        print(\"Number of Aircraft with At Least 10000 lbs is Incorrect.  Expected\", expected_output[2])\r\n    \r\n    return score\r\n\r\n\r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 113, "problem_id": "lsn13_averagerun", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** In, Python, write an algorithm that first asks the user how many PFT run\ntimes to input and then gets that many values from the user. Output the\naverage of all the run times. You can assume there is at least one run time to\ninput.\n\n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInputs | 6  \n98  \n75  \n88  \n82  \n94  \n100 | 5  \n99  \n83  \n79  \n86  \n87 | 4  \n88  \n82  \n80  \n90  \nOutputs | 89.5 | 86.8 | 85\n\n\n", "code": "\ndef calculate_average():\n    total = 0\n    count = 0\n\n    num_times = int(input(\"Enter the number of run times: \"))\n\n    for _ in range(num_times):\n        run_time = int(input(\"Enter a run time: \"))\n        total += run_time\n        count += 1\n\n    average = total / count\n    print(\"The average run time is:\", average)\n\n\ncalculate_average()\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    NUM_TESTS = 5\r\n    num_tests_passed = 0\r\n\r\n    for i in range(NUM_TESTS):\r\n        print(\"Running Test \" + str(i) + \":\")\r\n        \r\n        num_inputs = random.randint(2, 11)\r\n        inputs = [num_inputs]\r\n        sum = 0\r\n        \r\n        for j in range(num_inputs):\r\n            value = random.randint(70, 130)\r\n            sum += value\r\n            inputs.append(value)\r\n               \r\n        avg = sum / (len(inputs) - 1)   \r\n               \r\n        # Runs the Script\r\n        output, error_message = autograder.run_script(\"lsn13_averagerun.py\", inputs)\r\n        \r\n        # Extracts the Output\r\n        lines = output.split(\"\\n\")\r\n        \r\n        if (len(lines) > 0):            \r\n            if (autograder.equals(lines[0], avg)):\r\n                print(\"CORRECT\\n\")\r\n                num_tests_passed += 1\r\n            else:\r\n                print(\"INCORRECT.  Expected: \" + str(avg) + \"\\n\")\r\n\r\n    # Result\r\n    return (100 / NUM_TESTS) * num_tests_passed\r\n            \r\n\r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 114, "problem_id": "lsn12_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a function called `fahrenheit_to_kelvin()`. Your function should take\na temperature (in Fahrenheit) as a parameter, and RETURN (NOT PRINT) the\nequivalent temperature in Kelvin.\n\n**NOTE:  \n** The formula for converting between Fahrenheit and Kelvin is\n\n**K = ((F - 32) / 1.8) + 273.15**\n\n\n", "code": "\ndef fahrenheit_to_kelvin(fahrenheit):\n    kelvin = ((fahrenheit - 32) / 1.8) + 273.15\n    return kelvin\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(value_to_count_to, increment):\r\n    result = ''\r\n    i = 10\r\n    \r\n    while i >= value_to_count_to:\r\n        result += str(i) + \"\\n\"\r\n        i += increment\r\n    \r\n    return result\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_ending_number = 0\r\n    random_increment = -1\r\n\r\n    output, error_message = autograder.run_script(\"lsn12_skill2.py\", [])\r\n    expected_output = solution(random_ending_number, random_increment)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n    \r\n    return 0\r\n\r\n        \r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 115, "problem_id": "lsn12_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a function called get_fuel_consumption() that\ntakes a distance in kilometers as a parameter, and calculates the fuel\nconsumed (in gallons) by a 747 aircraft to travel this distance.\n\nCall this function to determine how much fuel is consumed by a 747 when\ntraveling 1500 kilometers. Store the returned result in a variable called\nfuel_consumed\n\nRemember, \"Calling a function\" simply means typing in the name of the function\n(and providing it with any parameters that it needs--in this case, there are\nno parameters since there is nothing in the parenthesis).\n\n\n", "code": "\ndef get_fuel_consumption(distance_km):\n    fuel_consumed = distance_km * 0.1\n    return fuel_consumed\n\n\nfuel_consumed = get_fuel_consumption(1500)\nprint(fuel_consumed)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(value_to_count_to, increment):\r\n    result = ''\r\n    i = 0\r\n    \r\n    while i <= value_to_count_to:\r\n        result += str(i) + \"\\n\"\r\n        i += increment\r\n    \r\n    return result\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_ending_number = 10\r\n    random_increment = 2\r\n\r\n    output, error_message = autograder.run_script(\"lsn12_skill1.py\", [])\r\n    expected_output = solution(random_ending_number, random_increment)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n    \r\n    return 0\r\n\r\n        \r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 116, "problem_id": "lsn12_in_circle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a function that determines if a point is within a circle. You will\nname your function `in_circle()`. It has five parameters:\n\n  1. The coordinates of the point that is to be tested (x, y)\n  2. The center of a circle (cir_x, cir_y)\n  3. The radius of the circle (radius)\n\n The `in_circle()` function will return **True** if the point is on or inside\nthe circle, and **False** otherwise.\n\n**IMPORTANT:  \n** You are encouraged to write code to test your function. However, when you\ntest against the server, only include the code for the function itself (you\ncan comment out your test code).\n\n\n", "code": "\ndef in_circle(x, y, cir_x, cir_y, radius):\n    distance = ((x - cir_x)**2 + (y - cir_y)**2)**0.5\n    if distance <= radius:\n        return True\n    else:\n        return False\n", "testcase": "import lsn12_in_circle\nfrom cs110 import autograder\nimport random, math\n\nNUM_SUBTESTS = 5\n   \ndef soln(x, y, cir_x, cir_y, radius):\n    distance = math.sqrt((cir_x - x)**2 + (cir_y - y)**2)\n    return distance <= radius\n\ndef test_passed():\n    \n    passed = 0\n    for i in range(NUM_SUBTESTS):\n        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')\n        if i == 0:\n            x = 6.04\n            y = 2.43\n            cir_x = 43.4\n            cir_y = 52.2\n            radius = 74.1\n        else:\n            x = random.random() * 10.0\n            y = random.random() * 10.0\n            cir_x = random.random() * 100.0\n            cir_y = random.random() * 100.0\n            radius = random.random() * 100.0\n        #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))\n        if lsn12_in_circle.in_circle(x, y, cir_x, cir_y, radius) == soln(x, y, cir_x, cir_y, radius):\n            print(\"CORRECT!\")\n            passed += 1\n        else:\n            print('INCORRECT:  in_circle(%f, %f, %f, %f, %f) incorrectly returned %s' % (x, y, cir_x, cir_y, radius, lsn12_in_circle.in_circle(x, y, cir_x, cir_y, radius)))\n    \n    return (100 / NUM_SUBTESTS) * passed\n\n\n# Runs your code in an IDE (for testing purposes)\nif __name__ == '__main__':    \n    result = test_passed()\n    print(\"Unit Test Returned:\", result)\n\n\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 117, "problem_id": "lsn12_distance", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a function that computes the distance between two points. You will\nname your function `dist_points`. It has four parameters, the cordinates of\nthe two points as `x1, y1, x2, y2`. The `dist_points()` function will return\nthe distance between the two points as a floating point number.\n\n**IMPORTANT:  \n** You are encouraged to write code to test your function. However, when you\ntest against the server, only include the code for the function itself (you\ncan comment out your test code).\n\n\n", "code": "\nimport math\n\ndef dist_points(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n", "testcase": "from lsn12_distance import dist_points\r\nfrom cs110 import autograder\r\nimport random, math\r\n\r\nNUM_SUBTESTS = 5\r\n\r\ndef soln(x1, y1, x2, y2):\r\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\r\n\r\ndef test_passed():\r\n    \r\n    passed = 0\r\n    \r\n    print(\"Feedback:\")\r\n    \r\n    for i in range(NUM_SUBTESTS):\r\n        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')\r\n        x1 = round(random.uniform(-10, 10), 1)\r\n        y1 = round(random.uniform(-10, 10), 1)\r\n        x2 = round(random.uniform(-10, 10), 1)\r\n        y2 = round(random.uniform(-10, 10), 1)\r\n        if autograder.equals(dist_points(x1, y1, x2, y2), soln(x1, y1, x2, y2)):\r\n            print(\"PASSED!\")\r\n            passed += 1\r\n        else:\r\n            print('FAILED: dist_point(%1.1f, %1.1f, %1.1f, %1.1f) incorrectly returned' % (x1, y1, x2, y2), dist_points(x1, y1, x2, y2))\r\n    \r\n    return round(100 / NUM_SUBTESTS, 1) * passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 118, "problem_id": "lsn12_circle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a function that computes the area of a circle. You will name your\nfunction `area_circle`. It has one parameter, the radius of the circle,\n`radius`. The `area_circle()` function will return the area of the circle.\n\n**IMPORTANT:  \n** You are encouraged to write code to test your function. However, when you\ntest against the server, only include the code for the function itself (you\ncan comment out your test code).\n\n\n", "code": "\nimport math\n\ndef area_circle(radius):\n    area = math.pi * radius * radius\n    return area\n\n# Testing the function\nprint(area_circle(2))\nprint(area_circle(3.5))\n", "testcase": "import lsn12_circle\r\nfrom cs110 import autograder\r\nimport random, math\r\n\r\nNUM_SUBTESTS = 5\r\n\r\n# Helper method to see if a numeric value is within a specified delta\r\ndef soln(radius):\r\n    return math.pi * radius * radius\r\n\r\ndef test_passed():\r\n    \r\n    passed = 0\r\n    \r\n    print(\"Feedback:\")\r\n    \r\n    for i in range(NUM_SUBTESTS):\r\n        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')\r\n        radius = random.random() * 100.0\r\n        if autograder.equals(lsn12_circle.area_circle(radius), soln(radius)):\r\n            print(\"CORRECT!\")\r\n            passed += 1\r\n        else:\r\n            print('area_circle(%d) incorrectly returned' % (radius), lsn12_circle.area_circle(radius))\r\n        \r\n    return round(100 / NUM_SUBTESTS, 1) * passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 119, "problem_id": "lsn12_asteroids", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\n\"Asteroids\" was an arcade game created in 1979 by Atari, Inc. In the game, the\nplayer is given control of a spaceship that has the ability to shoot bullets.\nThe player is then placed in a field of floating rocks, and is tasked with\ndestroying them without running into them.\n\nIn this lab, you will write a \"collision detection\" function that will be used\nby the game to determine if the player's ship has hit a rock. To make this\nsimple, assume that an imaginary circle extends from the center of the\nasteroid and the player's ship (see below image). If the two circles ever\noverlap one another, then a collision has occurred. (NOTE: There are more\naccurate ways to detect a collision. [Click here if you want to learn more\n(Links to an external site.)](https://bell0bytes.eu/basic-collision-\ndetection/)).\n\n![](https://bell0bytes.eu/content/images/2019/03/spaceShipAsteroid.png)\n\nYour function, which you will name `detect_collision()` should have six\nparameters: the (x, y) coordinates of the center of player's ship, the ship's\nradius, the (x, y) coordinates of the center of an asteroid, and the\nasteroid's radius. Your function will return `True` if the player's ship has\nhit the asteroid, and `False` otherwise.\n\n**HINT: _  \n_** _You may want to copy and paste the_  `dist_points`  _function you created\nearlier. It's almost as if we are trying to demonstrate the importance of\nreusable functions . . ._\n\n**IMPORTANT:  \n** You are encouraged to write code to test your function. However, when you\ntest against the server, only include the code for the function itself (you\ncan comment out your test code).\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport lsn12_asteroids \r\n\r\ndef soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):\r\n    distance = math.sqrt((ship_x - asteroid_x)**2 + (ship_y - asteroid_y)**2)\r\n    return distance < asteroid_r + ship_r\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    NUM_TESTS = 4\r\n    num_tests_passed = 0\r\n    \r\n    print(\"Feedback:\")\r\n    score = 0\r\n        \r\n    if \"dist_points\" in dir(lsn12_asteroids):\r\n        score += 20\r\n        print(\"dist_points function found\")\r\n    else:\r\n        print(\"dist_points function not being utilized.  Don't reinvent the wheel!\")\r\n        #score += 20\r\n        \r\n    for i in range(NUM_TESTS):\r\n        print('Running test %d of %d: ' % (i+1 , NUM_TESTS), end='')\r\n        \r\n        if i == 0:\r\n            ship_x = 2.3\r\n            ship_y = 0.2\r\n            ship_r = 3\r\n            asteroid_x = -4\r\n            asteroid_y = 3.4\r\n            asteroid_r = 6\r\n        else:\r\n            ship_x = round(random.uniform(-50, 50), 1)\r\n            ship_y = round(random.uniform(-50, 50), 1)\r\n            ship_r = 3\r\n            asteroid_x = round(random.uniform(-50, 50), 1)\r\n            asteroid_y = round(random.uniform(-50, 50), 1)\r\n            asteroid_r = 6\r\n        \r\n        #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))\r\n        if lsn12_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r) == soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):\r\n            print(\"CORRECT\")\r\n            score += 20\r\n        else:\r\n            print('detect_collision(%f, %f, %f, %f, %f, %f) incorrectly returned %s' % (ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r, lsn12_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r)))\r\n    \r\n    return score\r\n            \r\n            \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 120, "problem_id": "lsn11_triangle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a function that computes the area of a triangle. You will name your\nfunction `area_triangle()`. It has two parameters, the height of the triangle,\n`height`, and the length of the base, `base`. The `area_triangle()` function\nwill print the area of the triangle.\n\n**IMPORTANT:  \n** You are encouraged to write code to test your function. However, when you\nsubmit to the server for grading, only the function will be tested.\n\n\n", "code": "\ndef area_triangle(height, base):\n    area = 0.5 * height * base\n    print(\"The area of the triangle is:\", area)\n\n# Test the function\nheight = 4\nbase = 7\narea_triangle(height, base)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport lsn11_triangle\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    base = round(random.uniform(1.0, 10.0), 1)\r\n    height = round(random.uniform(1.0, 10.0), 1)\r\n    output, error_message = autograder.run_script(\"lsn11_triangle.py\", [base, height])\r\n    \r\n    area = (base * height) / 2.0\r\n    score = 0\r\n    \r\n    if \"area_triangle\" in dir(lsn11_triangle):\r\n        print(\"Function Correctly Defined\")\r\n        score += 50\r\n    else:\r\n        print(\"Function does not exist.  Check to make sure the name matches the prompt\")\r\n    \r\n    if autograder.equals(output, area):\r\n        print(\"Function produces correct output\")\r\n        score += 50\r\n    else:\r\n        print(\"Function produces incorrect output. Expected:\", area)\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 121, "problem_id": "lsn11_skill3", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Define a function called `print_hello()`. Your function should, when\ncalled, simply print out a message of your choosing that would be a greeting\nto someone.\n\n**IMPORTANT NOTE:**  \nFunctions only run when a program calls them. For the purposes of this\nexercise, you do not need to call the function. If you don't, however, nothing\nwill appear on the screen when you run it in Thonny.\n\n\n", "code": "\ndef print_hello():\n    print(\"Hello! Welcome to my program.\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport lsn11_skill3\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    output, error = autograder.run_script(\"lsn11_skill3.py\", [])\r\n    score = 0\r\n    \r\n    if \"print_hello\" in dir(lsn11_skill3):\r\n        print(\"Function found!\")\r\n        score += 50\r\n        \r\n        if len(output) > 0:\r\n            print(\"Output Found!\")\r\n            score += 50\r\n        else:\r\n            print(\"Function does not appear to be printing out anything\")\r\n    else:\r\n        print(\"Function does not appear to be defined.  Check the name and make sure it matches the prompt\")\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 122, "problem_id": "lsn11_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a function called `draw_multiple_trees()` that\noutputs a tree using ASCII art. Unlike the previous problem, this function\naccepts a parameter that tells it how many trees to draw.\n\nWrite a program that:\n\n  1. Gets an integer from the user and stores it in a variable. You can name this variable whatever you want.\n  2. Call the function, and passes the variable to it. \n\nRemember that \"passing a value\" to a function simply means putting the number\ninside the parenthesis when you call it.\n\n\n", "code": "\ndef draw_multiple_trees(num_trees):\n    tree = '''\n        *\n       ***\n      *****\n     *******\n    *********\n        |\n    '''\n    for _ in range(num_trees):\n        print(tree)\n\n# Get input from user\nnum_trees = int(input(\"Enter the number of trees to draw: \"))\n\n# Call the function\ndraw_multiple_trees(num_trees)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nfrom lsn11_skill2 import *\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    if 'my_value' in globals():\r\n        print(\"Looking for my_value . . . FOUND!\")\r\n        if my_value == my_list[2]:\r\n            print(\"Looking inside my_value . . . VALUE MATCHES THE 3rd VALUE IN THE LIST\")\r\n            return 100\r\n        elif my_value == my_list[3]:\r\n            print(\"Looking inside my_value . . . VALUE MATCHES THE 4th VALUE INSTEAD OF THE THIRD!\")\r\n            print(\"** HINT:  The index starts at 0 **\")\r\n            return 50\r\n        else:\r\n            print(\"Looking inside my_value . . . VALUE DOES NOT MATCH.  EXPECTED\", my_list[2])\r\n            return 50\r\n    else:\r\n        print(\"Looking for my_value . . . NOT FOUND!\")\r\n        return 0\r\n        \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 123, "problem_id": "lsn11_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a function called `draw_tree()` that prints a\ntree using ASCII art:\n\n    \n    \n     *  \n     ***  \n    *****  \n     |\n\nCall this function\n\n\n", "code": "\ndef draw_tree():\n    print(\"     *  \")\n    print(\"    *** \")\n    print(\"   *****\")\n    print(\"     |  \")\n\n\ndraw_tree()\n```\n", "testcase": "from cs110 import autograder\r\nimport random\r\nfrom lsn11_skill1 import *\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    if 'my_list' in globals():\r\n        print(\"Looking for my_list . . . FOUND!\")\r\n        if len(my_list) == 3:\r\n            print(\"Looking inside my_list . . . FOUND 3 ITEMS!\")\r\n            return 100\r\n        else:\r\n            print(\"Looking inside my_list . . . FOUND\", len(my_list), \"INSTEAD OF 3 ITEMS\")\r\n            return 50\r\n    else:\r\n        print(\"Looking for my_list . . . NOT FOUND!\")\r\n        return0\r\n        \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 124, "problem_id": "lsn11_imagesize", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \nPROBLEM STATEMENT:  \nWrite a function that computes the size of an uncompressed image. You will\nname your function calculate_size_of_image(), and it will have three\nparameters: the width of the image, the height of the image, and the bit depth\n(i.e., # of bits per pixel).\n\nThe function should print the size of the image in kilobytes.\n\n\n", "code": "\ndef calculate_size_of_image(width, height, bit_depth):\n    size_in_bytes = (width * height * bit_depth) / 8\n    size_in_kilobytes = size_in_bytes / 1024\n    print(f\"The size of the image is {size_in_kilobytes} kilobytes.\")\n    \n# Example usage\ncalculate_size_of_image(1920, 1080, 24)\n", "testcase": "from cs110 import autograder\r\nimport lsn11_imagesize, random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    base = random.randint(1024, 1980)\r\n    height = random.randint(1024, 1980)\r\n    bd = 2**random.randint(3, 7)\r\n    output, error_message = autograder.run_script(\"lsn11_imagesize.py\", [base, height, bd])\r\n    \r\n    filesize = (base * height * bd) / 8 / 1024\r\n    score = 0\r\n    \r\n    if \"calculate_size_of_image\" in dir(lsn11_imagesize):\r\n        print(\"Function Correctly Defined\")\r\n        score += 50\r\n    else:\r\n        print(\"Function does not exist.  Check to make sure the name matches the prompt\")\r\n    \r\n    if autograder.equals(output, filesize):\r\n        print(\"Function produces correct output\")\r\n        score += 50\r\n    else:\r\n        print(\"Function produces incorrect output. Expected:\", filesize)\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 125, "problem_id": "lsn11_callme", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with three functions. Open the template file, and\nperform the following tasks: **  \n**\n\n  * **Task 1:** Ask the user to enter a width and height. Do **NOT** assume they are whole numbers. Call area_rectangle and give it the user values\n  * **Task 2:** Ask the user to enter a string. Call print_backwards and give it the user value\n  * **Task 3:** You have been provided with a variable called my_number. Call positive_or_negative and give it the variable\n\n\n", "code": "\ndef area_rectangle(width, height):\n    area = width * height\n    return area\n\ndef print_backwards(string):\n    reversed_string = string[::-1]\n    return reversed_string\n\ndef positive_or_negative(number):\n    if number > 0:\n        return \"positive\"\n    elif number < 0:\n        return \"negative\"\n    else:\n        return \"zero\"\n\nwidth = float(input(\"Enter the width: \"))\nheight = float(input(\"Enter the height: \"))\narea = area_rectangle(width, height)\nprint(\"The area of the rectangle is:\", area)\n\nstring = input(\"Enter a string: \")\nreversed_string = print_backwards(string)\nprint(\"The string in reverse is:\", reversed_string)\n\nmy_number = 5\nresult = positive_or_negative(my_number)\nprint(\"The number is\", result)\n```\nNote: The input values for width, height, and string are assumed to be valid, i.e., no input validation is included in the code.", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# This function takes a string and prints it backwards\r\ndef get_reverse(s):\r\n    result = ''\r\n    for i in range(len(s)-1, -1, -1):\r\n        result += s[i]\r\n    return result\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    base = round(random.uniform(1.0, 100.0), 1)\r\n    height = round(random.uniform(1.0, 100.0), 1)\r\n\r\n    string_list = ['abcde', 'defgh', 'xzy', 'abba']\r\n    test_string = string_list[random.randint(0, len(string_list)-1)]\r\n\r\n    file = open(\"lsn11_callme.py\", \"r\")\r\n    file_contents = file.read()\r\n    num_calls_area_rectangle = file_contents.count(\"area_rectangle\")\r\n    num_calls_print_backwards = file_contents.count(\"print_backwards\")\r\n    num_calls_positive = file_contents.count(\"positive_or_negative\")\r\n\r\n    output, error_message = autograder.run_script(\"lsn11_callme.py\", [base, height, test_string])\r\n    \r\n    area = (base * height)\r\n    score = 0\r\n    \r\n    lines = output.split(\"\\n\")\r\n    \r\n    if autograder.equals(lines[0], area) and num_calls_area_rectangle > 1:\r\n        print(\"area_rectangle called successfully\")\r\n        score += 33\r\n    else:\r\n        print(\"area_rectangle was not called successfully\")\r\n    \r\n    if len(lines) > 1 and lines[1].strip() == get_reverse(test_string) and num_calls_print_backwards > 1:\r\n        print(\"print_backwards called successfully\")\r\n        score += 33\r\n    else:\r\n        print(\"print_backwards was not called successfully\")\r\n    \r\n    if len(lines) > 2 and lines[2].strip() == \"Positive\" and num_calls_positive > 1:\r\n        print(\"positive_or_negative called successfully\")\r\n        score += 34\r\n    else:\r\n        print(\"positive_or_negative was not called successfully\")\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 126, "problem_id": "lsn1_helloworld", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n  1. Download the template file below and save it somewhere you will remember.  Do not rename the file!  \n  \n\n  2. Open the file in Thonny.  You should be able to double click on it.  \n  \n\n  3. Press the play button.  It looks like a Green button  \n  \n  \n\n  4. You will see the following prompt in the Console.  Type 'y' (without the quotes) and press ENTER.  \n  \n  \n\n  5. The test program will automatically run and print a result.  If you see the following, you are good to go.  Otherwise, contact your instructor:  \n\n\n", "code": "", "testcase": "import sys, subprocess, random\r\nfrom cs110 import autograder\r\n\r\n# ---------------------------------------------------------------------\r\n# Hello World Unit Test\r\n# ---------------------------------------------------------------------\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn1_helloworld.py\", [])\r\n    \r\n    # Checks to See if the Program Passed the Test\r\n    if output.strip() == \"Hello World\":\r\n        print(\"SUCCESS!\")\r\n        return 100.0\r\n    else:\r\n        print(\"Try Again.  Just have it print the words 'Hello World'!\")\r\n        return 0.0\r\n    \r\n    \r\n# Testbench (to be run in an IDE)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 127, "problem_id": "a4_7_fit_u", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a dataset called `afpft_v2.csv` that describes how\nvarious Air Force personnel performed on their most recent fitness test. Do\nNOT ask the user for the file name--just open and read this specific file.\nHere is a typical line from the dataset (each line ends with the newline \"\\n\"\ncharacter):\n\n\n\n`38, 52, 29, 568`\n\n\n\nEach position in the line (separated by a comma) represents a different \"data\nelement,\" or \"column.\" The following table shows how the above line can be\ninterpreted:  \n  \n\n  | Sit Ups  \n(Reps) | Push Ups  \n(Reps) | Waist  \n(inches) | 1.5 Mile Run Time  \n(seconds)  \n---|---|---|---|---  \nValue | 45 | 65 | 32 | 630  \n  \n\n\n**Write a Python program that analyzes this file and prints the # of\n_unsatisfactory_ (less than 75) scores. **\n\n\n\nTo assist you, we have provided you with a module called `fitness_calculator`\nthat contains four functions:\n\n  * calculate_waist_score\n  * calculate_pushup_score\n  * calculate_situp_score\n  * calculate_run_score\n\n\n\nEach function takes a single number as a parameter, and **returns** the score\nfor that category. For example, to get the score for an Airman who did 45\npushups, you could import the module and call it, as follows:\n\n    \n    \n    pushup_score = fitness_calculator.calculate_pushup_score(45)\n\n\n\nTo get a single Airman's total score, simply calculate the score for each\ncategory and add them up.\n\n    \n    \n    score = waist_score + pushup_score + situp_score + run_score\n\n\n\n**EXAMPLES:**\n\nIf, for example, the number of unsatisfactory scores is 10, your program\nshould print:\n\n    \n    \n    **10**\n\n*** Your answer will be different.**\n\n\n", "code": "\nimport fitness_calculator\n\ndef count_unsatisfactory_scores(filename):\n    with open(filename, 'r') as file:\n        count = 0\n        for line in file:\n            data = line.strip().split(',')\n            situps = int(data[0].strip())\n            pushups = int(data[1].strip())\n            waist = int(data[2].strip())\n            run_time = int(data[3].strip())\n\n            situps_score = fitness_calculator.calculate_situp_score(situps)\n            pushups_score = fitness_calculator.calculate_pushup_score(pushups)\n            waist_score = fitness_calculator.calculate_waist_score(waist)\n            run_score = fitness_calculator.calculate_run_score(run_time)\n\n            total_score = situps_score + pushups_score + waist_score + run_score\n\n            if total_score < 75:\n                count += 1\n    \n    return count\n\nfilename = 'afpft_v2.csv'\nunsatisfactory_scores = count_unsatisfactory_scores(filename)\nprint(unsatisfactory_scores)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nfilename = \"a4_7_fit_u.py\"\r\nexpected_output = [\"39\"]\r\n\r\n# Function checks for known shortcuts\r\ndef shortcut_detected():\r\n    file = open(filename, \"r\")\r\n    contents = file.read()\r\n    file.close()\r\n\r\n    # Looks for a short\r\n    if \"print('39')\" in contents or 'print(\"39\")' in contents or 'print(39)' in contents:\r\n        print(\"WARNING:  You cannot just print out the answer.\")\r\n        return True\r\n    \r\n    return False\r\n\r\n# Unit Test Function\r\ndef test_passed():    \r\n    output, error = autograder.run_script(filename, [])\r\n    lines = output.strip().split('\\n')\r\n    \r\n    if shortcut_detected() == True:\r\n        print(\"Invalid Code Detected.  Contact your instructor.\")\r\n    elif len(lines) == 1:\r\n        if autograder.equals(lines[0], expected_output[0]):\r\n            print(\"Count of Unsatisfactory scores is Correct\")\r\n            return 100.0\r\n        else:\r\n            print(\"Count of Unsatisfactory scores is Incorrect\")\r\n    else:\r\n        print(\"Missing Output (or too many lines)\")\r\n\r\n    return 0.0\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 128, "problem_id": "a4_7_fit_e", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a dataset called `afpft_v1.csv` that describes how\nvarious Air Force personnel performed on their most recent fitness test. Do\nNOT ask the user for the file name--just open and read this specific file.\nHere is a typical line from the dataset (each line ends with the newline \"\\n\"\ncharacter):\n\n\n\n`38, 52, 29, 568`\n\n\n\nEach position in the line (separated by a comma) represents a different \"data\nelement,\" or \"column.\" The following table shows how the above line can be\ninterpreted:  \n  \n\n  | Waist  \n(inches) | Push Ups  \n(Reps) | Sit Ups  \n(Reps) | 1.5 Mile Run Time  \n(seconds)  \n---|---|---|---|---  \nValue | 38 | 52 | 29 | 568  \n  \n\n\n**Write a Python program that analyzes this file and prints the # of excellent\n(90 or higher) scores.**\n\n\n\nTo assist you, we have provided you with a module called `fitness_calculator`\nthat contains four functions:\n\n  * calculate_waist_score\n  * calculate_pushup_score\n  * calculate_situp_score\n  * calculate_run_score\n\n\n\nEach function takes a single number as a parameter, and **returns** the score\nfor that category. For example, to get the score for an Airman who did 45\npushups, you could import the module and call it, as follows:\n\n    \n    \n    pushup_score = fitness_calculator.calculate_pushup_score(45)\n\n\n\nTo get a single Airman's total score, simply calculate the score for each\ncategory and add them up.\n\n    \n    \n    score = waist_score + pushup_score + situp_score + run_score\n\n\n\n**EXAMPLES:**\n\nIf, for example, the number of excellent scores is 4, your program should\nprint:\n\n    \n    \n    **4  \n    **\n\n*** Your answers will be different.**\n\n\n", "code": "\nimport fitness_calculator\n\nfile_name = \"afpft_v1.csv\"\n\nexcellent_scores = 0\n\nwith open(file_name, \"r\") as file:\n    for line in file:\n        data = line.strip().split(\",\")\n        waist = int(data[0])\n        pushups = int(data[1])\n        situps = int(data[2])\n        run_time = int(data[3])\n        \n        waist_score = fitness_calculator.calculate_waist_score(waist)\n        pushup_score = fitness_calculator.calculate_pushup_score(pushups)\n        situp_score = fitness_calculator.calculate_situp_score(situps)\n        run_score = fitness_calculator.calculate_run_score(run_time)\n        \n        total_score = waist_score + pushup_score + situp_score + run_score\n        \n        if total_score >= 90:\n            excellent_scores += 1\n            \nprint(excellent_scores)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nfilename = \"a4_7_fit_e.py\"\r\nexpected_output = [\"9\"]\r\n\r\n# Function checks for known shortcuts\r\ndef shortcut_detected():\r\n    file = open(filename, \"r\")\r\n    contents = file.read()\r\n    file.close()\r\n\r\n    # Looks for a short\r\n    if \"print('9')\" in contents or 'print(\"9\")' in contents or 'print(9)' in contents:\r\n        print(\"WARNING:  You cannot just print out the answer.\")\r\n        return True\r\n    \r\n    return False\r\n\r\n# Unit Test Function\r\ndef test_passed():    \r\n    output, error = autograder.run_script(filename, [])\r\n    lines = output.strip().split('\\n')\r\n    \r\n    if shortcut_detected() == True:\r\n        print(\"Invalid Code Detected.  Contact your instructor.\")\r\n    elif len(lines) == 1:\r\n        if autograder.equals(lines[0], expected_output[0]):\r\n            print(\"# of Excellents is Correct\")\r\n            return 100.0\r\n        else:\r\n            print(\"# of Excellents is Incorrect\")\r\n    else:\r\n        print(\"Missing Output (or too many lines)\")\r\n    \r\n    return 0.0\r\n    \r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 129, "problem_id": "a4_6_scores", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nYou have been asked to write a program to assess student's performance on a\nrecent test. Write a Python program that asks the user to repeatedly type in\nthe name of a cadet, followed by their test score (between 0 and 100) until\nthe user types the word \"DONE\". Your program then analyze the values and\nprint:\n\n  * The highest overall test score (just score, not the name)\n  * The names of all cadets who scored within 10 points of the highest score. \n    * Comparison to the target score should be exclusive.\n    * The names should be output in the same order of input.\n\n\n\n**EXAMPLES:**\n\n  | **Example 1**  \n---|---  \n**Input(s)** | Paul  \n95  \nAndrew  \n86  \nJoel  \n57  \nDONE  \n**Output(s)** | 95  \nPaul  \nAndrew\n\n\n", "code": "\nscores = {}\nhighest_score = 0\n\nwhile True:\n    name = input(\"Enter cadet name (or 'DONE' to finish): \")\n    if name == \"DONE\":\n        break\n    score = int(input(\"Enter test score (between 0 and 100): \"))\n    scores[name] = score\n    if score > highest_score:\n        highest_score = score\n\nclose_scores = []\nfor name, score in scores.items():\n    if highest_score - score <= 10 and score < highest_score:\n        close_scores.append(name)\n\nprint(highest_score)\nfor name in close_scores:\n    print(name)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nfrom itertools import combinations\r\n\r\nrandom_names = [\"Marvel\", \"Bucky\", \"Mouse\",\r\n                \"Goose\", \"Jimmy\", \"Dice\",\r\n                \"Upshot\", \"Twain\", \"Ballpark\",\r\n                \"Hammer\", \"Pixel\", \"Billy\",\r\n                \"Lance\",\"Bong\",\"Eddie\",\r\n                \"Patton\",\"Tooey\",\"Gus\",\r\n                \"Karl\",\"Hub\",\"Luke\",\r\n                \"Olds\",\"Hap\",\"Zeamer\"]\r\n\r\nnum_names = random.randint(3,6)\r\n\r\n\r\n\r\ndef same_case():\r\n    print(\"Test Case 1\")\r\n    table = []\r\n    input_list = []\r\n    random_score = int(random.uniform(25, 100))\r\n    for name in random.choice(list(combinations(random_names,num_names))):\r\n        input_list.append(name)\r\n        input_list.append(random_score)\r\n        table.append([random_score, name])\r\n    \r\n    input_list.append(\"DONE\")\r\n    \r\n    output, error = autograder.run_script(\"a4_6_scores.py\", input_list)\r\n    \r\n    max_time = max(table)[0] \r\n    expected_output = [str(max_time)]\r\n    \r\n    for row in table:\r\n        if row[0] > max_time-10:\r\n            expected_output.append(row[1])\r\n\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    \r\n    if len(expected_output) != len(output.strip().split(\"\\n\")):\r\n        print(\"Too many or too few outputs\")\r\n        return 0.0\r\n    elif num_matches == len(expected_output):\r\n        print(\"Test Case 1 Correct\\n\")\r\n        return 100.0\r\n    else:\r\n        print(\"One or more lines in your output is incorrect\")\r\n        return 0.0\r\n\r\ndef random_case():\r\n    print(\"Test Case 2\")\r\n    table = []\r\n    input_list = []\r\n    \r\n    for name in random.choice(list(combinations(random_names,num_names))):\r\n        random_score = int(random.uniform(25, 100))\r\n        input_list.append(name)\r\n        input_list.append(random_score)\r\n        table.append([random_score, name])\r\n    \r\n    input_list.append(\"DONE\")\r\n    \r\n    output, error = autograder.run_script(\"a4_6_scores.py\", input_list)\r\n    \r\n    max_time = max(table)[0] \r\n    expected_output = [str(max_time)]\r\n    \r\n    for row in table:\r\n        if row[0] > max_time-10:\r\n            expected_output.append(row[1])\r\n\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    if len(expected_output) != len(output.strip().split(\"\\n\")):\r\n        print(\"Too many or too few outputs\")\r\n        return 0.0\r\n    elif num_matches == len(expected_output):\r\n        print(\"Test Case 2 Correct\\n\")\r\n        return 100.0\r\n    else:\r\n        print(\"One or more lines in your output is incorrect\")\r\n        return 0.0\r\n\r\ndef test_passed():\r\n    return same_case()*.1+random_case()*.9\r\n\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 130, "problem_id": "a4_6_flighthours", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nYou have been asked to write a program to get flying hours from a squadron of\npilots for the month. Write a Python program that asks the user to repeatedly\ntype in the name of a pilot, followed by their flying hours until the user\ntypes the word \"DONE\". Your program then analyze the values and print:\n\n  * The average number of flying hours (as a whole number)\n  * The names of all pilots who flew less than the average number of flight hours. \n    * Comparison to the average should be exclusive.\n    * Names should be output in the same order as input\n\n\n\n**EXAMPLES:**\n\n  | **Example 1**  \n---|---  \n**Input(s)** | Polo  \n95  \nRenegade  \n78  \nHeadphones  \n70  \nDONE  \n**Output(s)** |\n\n81  \nRenegade  \nHeadphones\n\n\n", "code": "\ndef calculate_avg_hours(hours):\n    return sum(hours) // len(hours)\n\ndef pilots_below_avg(hours, avg_hours):\n    below_avg = []\n    for i in range(len(hours)):\n        if hours[i] < avg_hours:\n            below_avg.append(i)\n    return below_avg\n\npilot_hours = []\npilot_names = []\n\nwhile True:\n    name = input(\"Enter the name of a pilot (or 'DONE' to exit): \")\n    if name == \"DONE\":\n        break\n    hours = int(input(\"Enter the flying hours of the pilot: \"))\n    pilot_names.append(name)\n    pilot_hours.append(hours)\n\navg_hours = calculate_avg_hours(pilot_hours)\nbelow_avg_pilots = pilots_below_avg(pilot_hours, avg_hours)\n\nprint(avg_hours)\nfor index in below_avg_pilots:\n    print(pilot_names[index])\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nfrom itertools import combinations\r\n\r\n\r\nrandom_names = [\"Marvel\", \"Bucky\", \"Mouse\",\r\n                \"Goose\", \"Jimmy\", \"Dice\",\r\n                \"Upshot\", \"Twain\", \"Ballpark\",\r\n                \"Hammer\", \"Pixel\", \"Billy\",\r\n                \"Lance\",\"Bong\",\"Eddie\",\r\n                \"Patton\",\"Tooey\",\"Gus\",\r\n                \"Karl\",\"Hub\",\"Luke\",\r\n                \"Olds\",\"Hap\",\"Zeamer\"]\r\nnum_names = random.randint(3,6)\r\n\r\ndef same_case():\r\n    print(\"Test Case 1\")\r\n    table = []\r\n    input_list = []\r\n    random_score = int(random.uniform(60, 100))\r\n    for name in random.choice(list(combinations(random_names,num_names))):\r\n        \r\n        input_list.append(name)\r\n        input_list.append(random_score)\r\n        table.append([random_score, name])\r\n    \r\n    input_list.append(\"DONE\")\r\n    \r\n    output, error = autograder.run_script(\"a4_6_flighthours.py\", input_list)\r\n    \r\n    avg_hours = int(sum([x[0] for x in table])/len(table))\r\n    expected_output = [str(avg_hours)]\r\n    \r\n    for row in table:\r\n        if row[0] < avg_hours:\r\n            expected_output.append(row[1])\r\n\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    \r\n    if len(expected_output) != len(output.strip().split(\"\\n\")):\r\n        print(\"Too many or too few outputs\")\r\n        return 0.0\r\n    elif num_matches == len(expected_output):\r\n        print(\"Test Case 1 Correct\\n\")\r\n        return 100.0\r\n    else:\r\n        print(\"One or more lines in your output is incorrect\")\r\n        return 0.0\r\n\r\ndef random_case():\r\n    print(\"Test Case 2\")\r\n    table = []\r\n    input_list = []\r\n    \r\n    for name in random.choice(list(combinations(random_names,num_names))):\r\n        random_score = int(random.uniform(60, 100))\r\n        input_list.append(name)\r\n        input_list.append(random_score)\r\n        table.append([random_score, name])\r\n    \r\n    input_list.append(\"DONE\")\r\n    \r\n    output, error = autograder.run_script(\"a4_6_flighthours.py\", input_list)\r\n    \r\n    avg_hours = int(sum([x[0] for x in table])/len(table))\r\n    expected_output = [str(avg_hours)]\r\n    \r\n    for row in table:\r\n        if row[0] < avg_hours:\r\n            expected_output.append(row[1])\r\n\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    \r\n    if len(expected_output) != len(output.strip().split(\"\\n\")):\r\n        print(\"Too many or too few outputs\")\r\n        return 0.0\r\n    elif num_matches == len(expected_output):\r\n        print(\"Test Case 2 Correct\\n\")\r\n        return 100.0\r\n    else:\r\n        print(\"One or more lines in your output is incorrect\")\r\n        return 0.0\r\n\r\ndef test_passed():\r\n    return same_case()*.1+random_case()*.9\r\n    \r\n    \r\n        \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 131, "problem_id": "a4_6_aft", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nYou have been asked to write a program to assess student's performance on the\nAFT. Write a Python program that asks the user to repeatedly type in the name\nof a cadet, followed by their run time (in whole seconds) until the user types\nthe word \"DONE\". Your program then analyze the values and print:\n\n  * The fastest (lowest) AFT time.\n  * The names of all cadets who were within 30 seconds of the fastest time. \n    * Comparison to the target time should be exclusive.\n    * Names should be output in the same order as input\n\n\n\n**EXAMPLES:**\n\n  | **Example 1**  \n---|---  \n**Input(s)** | Paul  \n545  \nAndrew  \n661  \nJoel  \n575  \nDONE  \n**Output(s)** | 545  \nPaul  \nJoel\n\n\n", "code": "\nfastest_time = float('inf')\nwithin_30 = []\n\nwhile True:\n    name = input(\"Enter the name of the cadet: \")\n    if name == \"DONE\":\n        break\n    time = int(input(\"Enter the run time (in whole seconds): \"))\n\n    if time < fastest_time:\n        fastest_time = time\n        within_30 = [name]\n    elif time == fastest_time:\n        within_30.append(name)\n\nprint(fastest_time)\nfor name in within_30:\n    print(name)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nfrom itertools import combinations\r\n\r\nrandom_names = [\"Marvel\", \"Bucky\", \"Mouse\",\r\n                \"Goose\", \"Jimmy\", \"Dice\",\r\n                \"Upshot\", \"Twain\", \"Ballpark\",\r\n                \"Hammer\", \"Pixel\", \"Billy\",\r\n                \"Lance\",\"Bong\",\"Eddie\",\r\n                \"Patton\",\"Tooey\",\"Gus\",\r\n                \"Karl\",\"Hub\",\"Luke\",\r\n                \"Olds\",\"Hap\",\"Zeamer\"]\r\n\r\nnum_names = random.randint(3,6)\r\n\r\ndef same_case():\r\n    print(\"Test Case 1\")\r\n    table = []\r\n    input_list = []\r\n    random_score = int(random.uniform(540.0, 720.0))\r\n    for name in random.choice(list(combinations(random_names,num_names))):\r\n        input_list.append(name)\r\n        input_list.append(random_score)\r\n        table.append([random_score, name])\r\n    \r\n    input_list.append(\"DONE\")\r\n    \r\n    output, error = autograder.run_script(\"a4_6_aft.py\", input_list)\r\n    \r\n    min_time = min(table)[0] \r\n    expected_output = [str(min_time)]\r\n    \r\n    for row in table:\r\n        if row[0] < min_time+30:\r\n            expected_output.append(row[1])\r\n\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    \r\n    if len(expected_output) != len(output.strip().split(\"\\n\")):\r\n        print(\"Too many or too few outputs\")\r\n        return 0.0\r\n    elif num_matches == len(expected_output):\r\n        print(\"Test Case 1 Correct\\n\")\r\n        return 100.0\r\n    else:\r\n        print(\"One or more lines in your output is incorrect\")\r\n        return 0.0\r\n\r\ndef random_case():\r\n    print(\"Test Case 2\")\r\n    table = []\r\n    input_list = []\r\n    \r\n    for name in random.choice(list(combinations(random_names,num_names))):\r\n        random_score = int(random.uniform(540.0, 720.0))\r\n        input_list.append(name)\r\n        input_list.append(random_score)\r\n        table.append([random_score, name])\r\n    \r\n    input_list.append(\"DONE\")\r\n    \r\n    output, error = autograder.run_script(\"a4_6_aft.py\", input_list)\r\n    \r\n    min_time = min(table)[0] \r\n    expected_output = [str(min_time)]\r\n    \r\n    for row in table:\r\n        if row[0] < min_time+30:\r\n            expected_output.append(row[1])\r\n\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    \r\n    if len(expected_output) != len(output.strip().split(\"\\n\")):\r\n        print(\"Too many or too few outputs\")\r\n        return 0.0\r\n    elif num_matches == len(expected_output):\r\n        print(\"Test Case 2 Correct\\n\")\r\n        return 100.0\r\n    else:\r\n        print(\"One or more lines in your output is incorrect\")\r\n        return 0.0\r\n\r\ndef test_passed():\r\n    return same_case()*.1+random_case()*.9\r\n\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 132, "problem_id": "a4_5_translate", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nWrite a function called get_english_word that **returns** the English\ntranslation for a Spanish word. Your function will take the following two\nparameters:\n\n  1. The spanish word (e.g., \"Hola\").\n  2. A dictionary containing a list of Spanish / English pairs. \n\nHere is an example of what the dictionary might look like:\n\n\n\n**Key** | **Value**  \n---|---  \nHola | Hello  \nAdios | Goodbye  \nAeronave | Aircraft  \n  \n\n\nYour function should **return** the English translation of the Spanish word\ncontained within the dictionary.\n\n\n\n**HINT:**\n\nUsing parameters and return with functions is in the Lessons 11/12 block on\nyour Python Quick Reference guide.\n\n\n", "code": "\ndef get_english_word(spanish_word, dictionary):\n    return dictionary.get(spanish_word)\n\n# Example usage:\nspanish_english_pairs = {\n    \"Hola\": \"Hello\",\n    \"Adios\": \"Goodbye\",\n    \"Aeronave\": \"Aircraft\"\n}\n\nenglish_translation = get_english_word(\"Hola\", spanish_english_pairs)\nprint(english_translation)\n", "testcase": "from cs110 import autograder\r\nimport random, math, ast\r\nfrom a4_5_translate import get_english_word\r\n\r\nbad_key = \"\"\r\n\r\ndef create_dictionary(size):\r\n    global bad_key\r\n    \r\n    values = [(\"Militar\", \"Military\"), (\"cadete\", \"Cadet\"), (\"Universidad\", \"University\"),\r\n              (\"Halcon\", \"Falcon\"), (\"montana\", \"Mountain\"), (\"computadora\", \"computer\"), (\"piton\", \"python\"),\r\n              (\"graduado\", \"graduated\")]\r\n    spanish_dictionary = {}\r\n    \r\n    print(\"Test Dictionary Contains the Following Words:\")\r\n    \r\n    for i in range(size):\r\n        random_value = values[random.randint(0, len(values)-1)]\r\n        values.remove(random_value)\r\n        spanish_dictionary[random_value[0]] = random_value[1]\r\n        print(random_value[0], \"(Translation\", str(random_value[1]) + \")\")\r\n    \r\n    bad_key = values[0][0]\r\n    \r\n    return spanish_dictionary\r\n\r\n\r\ndef test_passed():\r\n    tests = 5\r\n    \r\n    num_passed = 0\r\n    \r\n    spanish_dictionary = create_dictionary(tests)\r\n    \r\n    print()\r\n    \r\n    # Checking All of the Keys in our Dictionary\r\n    for key in spanish_dictionary.keys():\r\n        print(\"Using Function to get Translation for:\", key, \". . . \", end=\"\")\r\n        returned_value = get_english_word(key, spanish_dictionary)\r\n        print(\"Your Function Returned\", returned_value, \". . . \", end=\"\")\r\n        if returned_value == spanish_dictionary[key]:\r\n            print(\"Correct!\")\r\n            num_passed += 1\r\n        else:\r\n            print(\"Incorrect.  Returned\", returned_value, \"instead of\", spanish_dictionary[key])\r\n    \r\n#     print(\"Using Function to get Translation for a Word Not in the Dictionary:\", bad_key, \". . . \", end=\"\")\r\n#     \r\n#     try:\r\n#         returned_value = get_english_word(bad_key, spanish_dictionary)\r\n#         if returned_value == \"Unknown\":\r\n#             print(\"Correctly Handled\")\r\n#             num_passed += 1\r\n#         else:\r\n#             print(\"Incorrect.  Returned\", returned_value, \"instead of 'Unknown'\")\r\n#     except:\r\n#         print(\"Program crashed trying to access a key that does not exist in the dictionary\")\r\n        \r\n    return (100/tests) * num_passed;\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 133, "problem_id": "a4_5_password", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nWrite a function called get_password that **returns** the password for a\nspecified website. Your function will take the following two parameters in\nthis order:\n\n  1. The website (e.g., \"Amazon\").\n  2. A dictionary containing a list of website/password pairs. \n\nHere is an example of what the dictionary might look like:\n\n\n\n**Key** | **Value**  \n---|---  \nAmazon | password1234  \nFacebook | aardvark  \nTwitter | AirPower!  \n  \n\n\nYour function should return the password of the website contained within the\ndictionary.\n\n\n\n**HINT:**\n\nUsing parameters and **return** with functions is in the Lessons 11/12 block\non your Python Quick Reference guide.\n\n\n", "code": "```\ndef get_password(website, password_dict):\n    return password_dict[website]\n```\n\n**Explanation:**\nThe function `get_password()` takes two parameters: `website` and `password_dict`.\nIt uses the `website` parameter as the key to access the corresponding value (password) in the `password_dict` dictionary.\nThe function then returns the password for the specified website.", "testcase": "from cs110 import autograder\r\nimport random, math, ast\r\nfrom a4_5_password import get_password\r\n\r\nbad_key = \"\"\r\n\r\ndef create_dictionary(size):\r\n    global bad_key\r\n    \r\n    values = [(\"CarMax\", \"B-1IsBest\"), (\"YouTube\", \"MyCatisthecoolest\"), (\"Gmail\", \"thisIsMyPassword\"),\r\n              (\"Outlook\", \"MSDOSwasBAD!\"), (\"Blackboard\", \"SkoolRulez\"), (\"Canvas\", \"beststudentEvA\"), (\"REI\", \"MountainClimber\"),\r\n              (\"UnitedAirlines\", \"gimmeDemMiles\")]\r\n    dictionary = {}\r\n    \r\n    print(\"Test Dictionary Contains the Following Words:\")\r\n    \r\n    for i in range(size):\r\n        random_value = values[random.randint(0, len(values)-1)]\r\n        values.remove(random_value)\r\n        dictionary[random_value[0]] = random_value[1]\r\n        print(random_value[0], \"(Password\", str(random_value[1]) + \")\")\r\n    \r\n    bad_key = values[0][0]\r\n    \r\n    return dictionary\r\n\r\n\r\ndef test_passed():\r\n    tests = 5\r\n    num_passed = 0\r\n    \r\n    dictionary = create_dictionary(tests)\r\n    \r\n    print()\r\n    \r\n    # Checking All of the Keys in our Dictionary\r\n    for key in dictionary.keys():\r\n        print(\"Using Function to get Password for:\", key, \". . . \", end=\"\")\r\n        returned_value = get_password(key, dictionary)\r\n        print(\"Your Function Returned\", returned_value, \". . . \", end=\"\")\r\n        if returned_value == dictionary[key]:\r\n            print(\"Correct!\")\r\n            num_passed += 1\r\n        else:\r\n            print(\"Incorrect.  Returned\", returned_value, \"instead of\", dictionary[key])\r\n    \r\n#     print(\"Using Function to get Password for a Website Not in the Dictionary:\", bad_key, \". . . \", end=\"\")\r\n#     \r\n#     try:\r\n#         returned_value = get_password(bad_key, dictionary)\r\n#         if returned_value == \"Unknown\":\r\n#             print(\"Correctly Handled\")\r\n#             num_passed += 1\r\n#         else:\r\n#             print(\"Incorrect.  Returned\", returned_value, \"instead of 'Unknown'\")\r\n#     except:\r\n#         print(\"Program crashed trying to access a key that does not exist in the dictionary\")\r\n        \r\n    return (100/tests) * num_passed;\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 134, "problem_id": "a4_5_areacode", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nWrite a function called get_area_code that **returns** the area code for a\nspecific state. Your function will take the following two parameters in this\norder:\n\n  1. The name of the state (e.g., \"California\").\n  2. A dictionary containing a list of State / Area Code Pairs. \n\nHere is an example of what the dictionary might look like:\n\n\n\n**Key** | **Value**  \n---|---  \nCalifornia | 209  \nMichigan | 234  \nColorado | 719  \n  \n\n\nYour function should **return** the area code for the specified state\ncontained within the dictionary.\n\n\n\n**HINT:**\n\nUsing parameters and return with functions is in the Lessons 11/12 block on\nyour Python Quick Reference guide.\n\n\n", "code": "\ndef get_area_code(state, area_codes):\n    return area_codes[state]\n", "testcase": "from cs110 import autograder\r\nimport random, math, ast\r\nfrom a4_5_areacode import get_area_code\r\n\r\nbad_key = \"\"\r\n\r\ndef create_dictionary(size):\r\n    global bad_key\r\n    \r\n    values = [(\"California\", 209), (\"Texas\", 214), (\"Michigan\", 248), (\"Iowa\", 319), (\"Utah\", 358), (\"Colorado\", 719), (\"Alabama\", 334), (\"Alaska\", 907)]\r\n    area_code_dictionary = {}\r\n    \r\n    print(\"Test Dictionary Contains Area Codes for the Following States:\")\r\n    \r\n    for i in range(size):\r\n        random_value = values[random.randint(0, len(values)-1)]\r\n        values.remove(random_value)\r\n        area_code_dictionary[random_value[0]] = random_value[1]\r\n        print(random_value[0], \"(Area Code:\", str(random_value[1]) + \")\")\r\n    \r\n    bad_key = values[0][0]\r\n    \r\n    return area_code_dictionary\r\n\r\n\r\ndef test_passed():\r\n    tests = 5\r\n\r\n    num_passed = 0\r\n    area_code_dictionary = create_dictionary(tests)\r\n    \r\n    print()\r\n    output, error = autograder.run_script(\"a4_5_areacode.py\", [])\r\n    output_lines = output.strip().split('\\n')\r\n\r\n    # Checking All of the Keys in our Dictionary\r\n    for key in area_code_dictionary.keys():\r\n        print(\"Using Function to get Area Code for:\", key, \". . . \", end=\"\")\r\n        returned_value = get_area_code(key, area_code_dictionary)\r\n        print(\"Your Function Returned\", returned_value, \". . . \", end=\"\")\r\n        if returned_value == area_code_dictionary[key]:\r\n            print(\"Correct!\")\r\n            num_passed += 1\r\n        else:\r\n            print(\"Incorrect.  Returned\", returned_value, \"instead of\", area_code_dictionary[key])\r\n    \r\n#     print(\"Using Function to get Area Code for a State Not in the Dictionary:\", bad_key, \". . . \", end=\"\")\r\n#     \r\n#     try:\r\n#         returned_value = get_area_code(bad_key, area_code_dictionary)\r\n#         if returned_value == \"Unknown\":\r\n#             print(\"Correctly Handled\")\r\n#             num_passed += 1\r\n#         else:\r\n#             print(\"Incorrect.  Returned\", returned_value, \"instead of 'Unknown'\")\r\n#     except:\r\n#         print(\"Program crashed trying to access a key that does not exist in the dictionary\")\r\n        \r\n    return (100/tests) * num_passed;\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 135, "problem_id": "a4_3_parks", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a table called `amusement_parks` that contains\ninformation about various amusement parks in the United States. Logically, the\ntable can be represented as follows:\n\n\n\n**Price Per Day** | **Name of Park** | **State**  \n---|---|---  \n$154.00 | Disneyland | California  \n$169.34 | Disney World | Florida  \n$79.99 | Great America | California  \n$73.00 | Cedar Point | Ohio  \n  \n\n\nWrite code that gets 1) the name of the park, 2) the state where the park is\nlocated, and 3) the price of a single day of admission from the user. Your\nprogram should then add a new row to the table containing these values.\n\n\n\nHINT:\n\n  * When you are creating your row, make sure you are adding the columns in the correct order!\n\n\n\n\n", "code": "\nimport pandas as pd\n\n# Read the amusement_parks table into a pandas DataFrame\namusement_parks = pd.DataFrame({\n    'Price Per Day': ['$154.00', '$169.34', '$79.99', '$73.00'],\n    'Name of Park': ['Disneyland', 'Disney World', 'Great America', 'Cedar Point'],\n    'State': ['California', 'Florida', 'California', 'Ohio']\n})\n\n# Get user input for park name, state, and price\npark_name = input(\"Enter the name of the park: \")\nstate = input(\"Enter the state where the park is located: \")\nprice = input(\"Enter the price of a single day of admission: \")\n\n# Create a new row with the user input values\nnew_row = pd.DataFrame({\n    'Price Per Day': [price],\n    'Name of Park': [park_name],\n    'State': [state]\n})\n\n# Append the new row to the amusement_parks DataFrame\namusement_parks = amusement_parks.append(new_row, ignore_index=True)\n\n# Print the updated amusement_parks table\nprint(amusement_parks)\n", "testcase": "from cs110 import autograder\r\nimport random, math, ast\r\n\r\ndef script_name():\r\n    return \"a4_3_parks.py\"\r\n\r\n\r\n'''\r\nitem = [a,b,c] (what should be in this entry)\r\nentry = [d,e,f] (what is in this entry)\r\n\r\nFor each value in item, if it is in entry:\r\n   Of the right type in the right place: 100\r\n   Of the wrong type in the right place: 80\r\n   Of the right type but in the wrong place: 80\r\n   Of the wrong type in the wrong place: 64\r\nIf entry and item are not the same length, 20% penalty\r\n\r\nNote that this has issues if there are duplicate values in the correct item.\r\n'''\r\ndef score_value_against_value(v1, v2):\r\n    score = 0\r\n    if v1 == v2:\r\n        return 100\r\n    try:\r\n        if float(v1) == float(v2):\r\n            score = 80\r\n    except:\r\n        pass\r\n    return score\r\n\r\ndef score_list_against_list(correct, scored):\r\n    score = 0\r\n    for i in range(len(correct)):\r\n        col_score = []\r\n        for j in range(len(scored)):\r\n            t_score = score_value_against_value(correct[i], scored[j])\r\n            if i != j:\r\n                t_score *= 0.80\r\n            col_score.append(t_score)\r\n        score += max(col_score)\r\n    score /= len(correct)\r\n\r\n    if len(correct) != len(scored):\r\n        score *= 0.80\r\n    return score\r\n\r\ndef score_list_against_table(item_list, table):\r\n    score_list = []\r\n    for entry in table:\r\n        score = 0\r\n        if item_list == entry:\r\n            score = 100\r\n        else:\r\n            score = score_list_against_list(item_list, entry)\r\n        score_list.append(score)\r\n    return score_list\r\n\r\ndef score_correct_against_scored(correct_table, scored_table, weights):\r\n    # normalize weights\r\n    norm_wt = []\r\n    sum_of_weights = sum(weights)\r\n    for weight in weights:\r\n        norm_wt.append(weight / sum_of_weights)\r\n        \r\n    # score each item separately against table\r\n    cum_score = 0\r\n    for i in range(len(correct_table)):\r\n        # Check if this item is in the table correctly and in the correct position\r\n        if (i < len(scored_table)) and (correct_table[i] == scored_table[i]):\r\n            score = 100\r\n        # Score this item against each item in the table\r\n        else:\r\n            score_list = score_list_against_table(correct_table[i], scored_table)\r\n            if len(score_list) > 0:\r\n                score = 0.50 * max(score_list)\r\n            else:\r\n                score = 0\r\n            if i < len(score_list):\r\n                score = max([score, score_list[i]])\r\n        cum_score += score * norm_wt[i]\r\n    \r\n    # penalty for wrong number of items in table.\r\n    if len(correct_table) != len(scored_table):\r\n        cum_score = max([cum_score - 20, 0])\r\n    return cum_score\r\n    \r\ndef item_in_table(item, table):\r\n    if item in table:\r\n        print(\"Item Found\")\r\n        return 100\r\n    print(item, \"not found in\", table)\r\n    return 50\r\n\r\ndef given_table():\r\n    if script_name() == \"a4_3_aircraft.py\":\r\n        return [[218, \"C-17 Globemaster\", \"Boeing\"],\r\n                [14.6, \"F-16 Falcon\", \"General Dynamics\"],\r\n                [16.9, \"MQ-9 Reaper\", \"General Atomics\"],\r\n                [737, \"B-2 Spirit\", \"Northrop Grumman\"]]\r\n    if script_name() == \"a4_3_new_cars.py\":\r\n        return [[26660, \"Bronco\", \"Ford\"],\r\n                [36340, \"4Runner\", \"Toyota\"],\r\n                [68200, \"Q8\", \"Audi\"],\r\n                [48475, \"Silverado\", \"Cheverolet\"]]\r\n    if script_name() == \"a4_3_parks.py\":\r\n        return [[154.0, \"Disneyland\", \"California\"],\r\n                [169.34, \"Disney World\", \"Florida\"],\r\n                [79.99, \"Six Flags Great America\", \"California\"],\r\n                [73.00, \"Cedar Point\", \"Ohio\"]]\r\n    return []\r\n\r\ndef user_inputs():\r\n    if script_name() == \"a4_3_aircraft.py\":\r\n        return [ ['B-52 Stratofortress', 'Boeing', 14.4], ['T-6 Texan', 'North American Aviation', 4] ]\r\n    if script_name() == \"a4_3_new_cars.py\":\r\n        return [ ['Model 3', 'Tesla', 34999.99], ['Cayenne', 'Porche', 67500] ]\r\n    if script_name() == \"a4_3_parks.py\":\r\n        return [ ['Elitch Gardens', 'Colorado', 69.99], ['Euro Disney', 'France', 189] ]\r\n    return []\r\n\r\ndef get_correct_output(inputs):\r\n    table = given_table()\r\n    weights = []\r\n    for i in range(len(table)):\r\n        weights.append(0.1)\r\n    table.append([inputs[2], inputs[0], inputs[1]])\r\n    for i in range(len(table)-len(weights)):\r\n        weights.append(1)\r\n    return (table, weights)\r\n\r\ndef test_passed():    \r\n    \r\n    # Template-only check\r\n    print(\"-------------------------------------------------\")\r\n    print(\"Test #\" + str(0))\r\n    print(\"-------------------------------------------------\")\r\n    output, error = autograder.run_script(script_name(), [])\r\n    if len(error) == 0:\r\n        print(\"Be sure that you are not running just the template file.\")\r\n        return 0.2\r\n    else:\r\n        print(\"Ignore the errors for this run.\")\r\n        \r\n    # Run Data Sets\r\n    run_data = user_inputs()\r\n    \r\n    # Set the weights for the individual runs\r\n    relative_weights = []\r\n    for i in range(len(run_data)):         \r\n        relative_weights.append(1)\r\n    relative_weights = [1,19] #(override evenly weighted)\r\n    sum_of_relative_weights = sum(relative_weights)\r\n    run_weight = []\r\n    for weight in relative_weights:\r\n        run_weight.append(weight / sum_of_relative_weights)\r\n    \r\n    # Runs the Script for each data set\r\n    cum_score = 0\r\n    for run in range(len(run_data)):\r\n        print(\"-------------------------------------------------\")\r\n        print(\"Test #\" + str(run + 1))\r\n        print(\"-------------------------------------------------\")\r\n\r\n        inputs_for_this_run = run_data[run]\r\n\r\n        input_list = []\r\n        (correct, weights) = get_correct_output(inputs_for_this_run)\r\n        \r\n        output, error = autograder.run_script(script_name(), inputs_for_this_run)\r\n        \r\n        score = 0\r\n        # Deal with the case of errors occuring during run\r\n        if (run == 1): # Cost is a float\r\n            if len(error) > 0:\r\n                print(\"Error when handling a float cost\")\r\n                score = 0\r\n                \r\n        if (run == 2): # Cost is an integer\r\n            if len(error) > 0:\r\n                print(\"Error when handling an integer cost\")\r\n                score = 0\r\n\r\n        # Deal with case of no errors occurring during run\r\n        if len(error) == 0:\r\n            lines = output.strip().split('\\n')\r\n\r\n            if len(lines) >= 1 and len(lines[0]) > 0:                    \r\n                output_table = ast.literal_eval(lines[0])\r\n            \r\n                score = score_correct_against_scored(correct, output_table, weights)\r\n\r\n            else:\r\n                score = 0\r\n                \r\n\r\n        print(\"This test score:\", round(score,1), \"% (weight =\", round(100*run_weight[run],1), \"%)\")\r\n        cum_score += score * run_weight[run]\r\n        print()\r\n        \r\n    return max([round(cum_score, 1), 0.1])\r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 136, "problem_id": "a4_3_new_cars", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a table called `new_cars` that contains\ninformation about various automobiles for sale in the United States.\nLogically, the table can be represented as follows:\n\n\n\n**Unit Price  ** | **Model Name** | **Make**  \n---|---|---  \n$26,660 | Bronco | Ford  \n$36,340 | 4Runner | Toyota  \n$68,199.99 | Q8 | Audi  \n$48,475 | Silverado | Chevrolet  \n  \n\n\nWrite code that gets 1) Model Name of the car, 2) Make, and 3) the unit price.\nYour program should then add a new row to the table containing these values.\n\n\n\nHINT:\n\n  * When you are creating your row, make sure you are adding the columns in the correct order!\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math, ast\r\n\r\ndef script_name():\r\n    return \"a4_3_new_cars.py\"\r\n\r\n\r\n'''\r\nitem = [a,b,c] (what should be in this entry)\r\nentry = [d,e,f] (what is in this entry)\r\n\r\nFor each value in item, if it is in entry:\r\n   Of the right type in the right place: 100\r\n   Of the wrong type in the right place: 80\r\n   Of the right type but in the wrong place: 80\r\n   Of the wrong type in the wrong place: 64\r\nIf entry and item are not the same length, 20% penalty\r\n\r\nNote that this has issues if there are duplicate values in the correct item.\r\n'''\r\ndef score_value_against_value(v1, v2):\r\n    score = 0\r\n    if v1 == v2:\r\n        return 100\r\n    try:\r\n        if float(v1) == float(v2):\r\n            score = 80\r\n    except:\r\n        pass\r\n    return score\r\n\r\ndef score_list_against_list(correct, scored):\r\n    score = 0\r\n    for i in range(len(correct)):\r\n        col_score = []\r\n        for j in range(len(scored)):\r\n            t_score = score_value_against_value(correct[i], scored[j])\r\n            if i != j:\r\n                t_score *= 0.80\r\n            col_score.append(t_score)\r\n        score += max(col_score)\r\n    score /= len(correct)\r\n\r\n    if len(correct) != len(scored):\r\n        score *= 0.80\r\n    return score\r\n\r\ndef score_list_against_table(item_list, table):\r\n    score_list = []\r\n    for entry in table:\r\n        score = 0\r\n        if item_list == entry:\r\n            score = 100\r\n        else:\r\n            score = score_list_against_list(item_list, entry)\r\n        score_list.append(score)\r\n    return score_list\r\n\r\ndef score_correct_against_scored(correct_table, scored_table, weights):\r\n    # normalize weights\r\n    norm_wt = []\r\n    sum_of_weights = sum(weights)\r\n    for weight in weights:\r\n        norm_wt.append(weight / sum_of_weights)\r\n        \r\n    # score each item separately against table\r\n    cum_score = 0\r\n    for i in range(len(correct_table)):\r\n        # Check if this item is in the table correctly and in the correct position\r\n        if (i < len(scored_table)) and (correct_table[i] == scored_table[i]):\r\n            score = 100\r\n        # Score this item against each item in the table\r\n        else:\r\n            score_list = score_list_against_table(correct_table[i], scored_table)\r\n            if len(score_list) > 0:\r\n                score = 0.50 * max(score_list)\r\n            else:\r\n                score = 0\r\n            if i < len(score_list):\r\n                score = max([score, score_list[i]])\r\n        cum_score += score * norm_wt[i]\r\n    \r\n    # penalty for wrong number of items in table.\r\n    if len(correct_table) != len(scored_table):\r\n        cum_score = max([cum_score - 20, 0])\r\n    return cum_score\r\n    \r\ndef item_in_table(item, table):\r\n    if item in table:\r\n        print(\"Item Found\")\r\n        return 100\r\n    print(item, \"not found in\", table)\r\n    return 50\r\n\r\ndef given_table():\r\n    if script_name() == \"a4_3_aircraft.py\":\r\n        return [[218, \"C-17 Globemaster\", \"Boeing\"],\r\n                [14.6, \"F-16 Falcon\", \"General Dynamics\"],\r\n                [16.9, \"MQ-9 Reaper\", \"General Atomics\"],\r\n                [737, \"B-2 Spirit\", \"Northrop Grumman\"]]\r\n    if script_name() == \"a4_3_new_cars.py\":\r\n        return [[26660, \"Bronco\", \"Ford\"],\r\n                [36340, \"4Runner\", \"Toyota\"],\r\n                [68200, \"Q8\", \"Audi\"],\r\n                [48475, \"Silverado\", \"Cheverolet\"]]\r\n    if script_name() == \"a4_3_parks.py\":\r\n        return [[154.0, \"Disneyland\", \"California\"],\r\n                [169.34, \"Disney World\", \"Florida\"],\r\n                [79.99, \"Six Flags Great America\", \"California\"],\r\n                [73.00, \"Cedar Point\", \"Ohio\"]]\r\n    return []\r\n\r\ndef user_inputs():\r\n    if script_name() == \"a4_3_aircraft.py\":\r\n        return [ ['B-52 Stratofortress', 'Boeing', 14.4], ['T-6 Texan', 'North American Aviation', 4] ]\r\n    if script_name() == \"a4_3_new_cars.py\":\r\n        return [ ['Model 3', 'Tesla', 34999.99], ['Cayenne', 'Porche', 67500] ]\r\n    if script_name() == \"a4_3_parks.py\":\r\n        return [ ['Elitch Gardens', 'Colorado', 69.99], ['Euro Disney', 'France', 189] ]\r\n    return []\r\n\r\ndef get_correct_output(inputs):\r\n    table = given_table()\r\n    weights = []\r\n    for i in range(len(table)):\r\n        weights.append(0.1)\r\n    table.append([inputs[2], inputs[0], inputs[1]])\r\n    for i in range(len(table)-len(weights)):\r\n        weights.append(1)\r\n    return (table, weights)\r\n\r\ndef test_passed():    \r\n    \r\n    # Template-only check\r\n    print(\"-------------------------------------------------\")\r\n    print(\"Test #\" + str(0))\r\n    print(\"-------------------------------------------------\")\r\n    output, error = autograder.run_script(script_name(), [])\r\n    if len(error) == 0:\r\n        print(\"Be sure that you are not running just the template file.\")\r\n        return 0.2\r\n    else:\r\n        print(\"Ignore the errors for this run.\")\r\n        \r\n    # Run Data Sets\r\n    run_data = user_inputs()\r\n    \r\n    # Set the weights for the individual runs\r\n    relative_weights = []\r\n    for i in range(len(run_data)):         \r\n        relative_weights.append(1)\r\n    relative_weights = [1,19] #(override evenly weighted)\r\n    sum_of_relative_weights = sum(relative_weights)\r\n    run_weight = []\r\n    for weight in relative_weights:\r\n        run_weight.append(weight / sum_of_relative_weights)\r\n    \r\n    # Runs the Script for each data set\r\n    cum_score = 0\r\n    for run in range(len(run_data)):\r\n        print(\"-------------------------------------------------\")\r\n        print(\"Test #\" + str(run + 1))\r\n        print(\"-------------------------------------------------\")\r\n\r\n        inputs_for_this_run = run_data[run]\r\n\r\n        input_list = []\r\n        (correct, weights) = get_correct_output(inputs_for_this_run)\r\n        \r\n        output, error = autograder.run_script(script_name(), inputs_for_this_run)\r\n        \r\n        score = 0\r\n        # Deal with the case of errors occuring during run\r\n        if (run == 1): # Cost is a float\r\n            if len(error) > 0:\r\n                print(\"Error when handling a float cost\")\r\n                score = 0\r\n                \r\n        if (run == 2): # Cost is an integer\r\n            if len(error) > 0:\r\n                print(\"Error when handling an integer cost\")\r\n                score = 0\r\n\r\n        # Deal with case of no errors occurring during run\r\n        if len(error) == 0:\r\n            lines = output.strip().split('\\n')\r\n\r\n            if len(lines) >= 1 and len(lines[0]) > 0:                    \r\n                output_table = ast.literal_eval(lines[0])\r\n            \r\n                score = score_correct_against_scored(correct, output_table, weights)\r\n\r\n            else:\r\n                score = 0\r\n                \r\n\r\n        print(\"This test score:\", round(score,1), \"% (weight =\", round(100*run_weight[run],1), \"%)\")\r\n        cum_score += score * run_weight[run]\r\n        print()\r\n        \r\n    return max([round(cum_score, 1), 0.1])\r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 137, "problem_id": "a4_3_aircraft", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a table called `usaf_aircraft` that contains\ninformation about various aircraft in the United States Air Force inventory.\nLogically, the table can be represented as follows:\n\n\n\n**Unit Price in Millions** | **Aircraft Name** | **Manufacturer**  \n---|---|---  \n$218 | C-17 Globemaster | Boeing  \n$14.6 | F-16 Falcon | General Dynamics  \n$16.9 | MQ-9 Reaper | General Atomics  \n$737 | B-2 Spirit | Northrop Grumman  \n  \n\n\nWrite code that gets 1) Name of the Aircraft, 2) Manufacturer, and 3) the unit\nprice in millions. Your program should then add a new row to the table\ncontaining these values.\n\n\n\nHINT:\n\n  * When you are creating your row, make sure you are adding the columns in the correct order!\n\n\n", "code": "\nimport pandas as pd\n\n# Define the new row\nnew_aircraft = {'Unit Price in Millions': 24.5,\n               'Aircraft Name': 'F-35 Lightning II',\n               'Manufacturer': 'Lockheed Martin'}\n\n# Load the existing table into a pandas DataFrame\nusaf_aircraft = pd.DataFrame({'Unit Price in Millions': [218, 14.6, 16.9, 737],\n                              'Aircraft Name': ['C-17 Globemaster', 'F-16 Falcon', 'MQ-9 Reaper', 'B-2 Spirit'],\n                              'Manufacturer': ['Boeing', 'General Dynamics', 'General Atomics', 'Northrop Grumman']})\n\n# Append the new row to the DataFrame\nusaf_aircraft = usaf_aircraft.append(new_aircraft, ignore_index=True)\n\n# Print the updated table\nprint(usaf_aircraft)\n", "testcase": "from cs110 import autograder\r\nimport random, math, ast\r\n\r\ndef script_name():\r\n    return \"a4_3_aircraft.py\"\r\n\r\n\r\n'''\r\nitem = [a,b,c] (what should be in this entry)\r\nentry = [d,e,f] (what is in this entry)\r\n\r\nFor each value in item, if it is in entry:\r\n   Of the right type in the right place: 100\r\n   Of the wrong type in the right place: 80\r\n   Of the right type but in the wrong place: 80\r\n   Of the wrong type in the wrong place: 64\r\nIf entry and item are not the same length, 20% penalty\r\n\r\nNote that this has issues if there are duplicate values in the correct item.\r\n'''\r\ndef score_value_against_value(v1, v2):\r\n    score = 0\r\n    if v1 == v2:\r\n        return 100\r\n    try:\r\n        if float(v1) == float(v2):\r\n            score = 80\r\n    except:\r\n        pass\r\n    return score\r\n\r\ndef score_list_against_list(correct, scored):\r\n    score = 0\r\n    for i in range(len(correct)):\r\n        col_score = []\r\n        for j in range(len(scored)):\r\n            t_score = score_value_against_value(correct[i], scored[j])\r\n            if i != j:\r\n                t_score *= 0.80\r\n            col_score.append(t_score)\r\n        score += max(col_score)\r\n    score /= len(correct)\r\n\r\n    if len(correct) != len(scored):\r\n        score *= 0.80\r\n    return score\r\n\r\ndef score_list_against_table(item_list, table):\r\n    score_list = []\r\n    for entry in table:\r\n        score = 0\r\n        if item_list == entry:\r\n            score = 100\r\n        else:\r\n            score = score_list_against_list(item_list, entry)\r\n        score_list.append(score)\r\n    return score_list\r\n\r\ndef score_correct_against_scored(correct_table, scored_table, weights):\r\n    # normalize weights\r\n    norm_wt = []\r\n    sum_of_weights = sum(weights)\r\n    for weight in weights:\r\n        norm_wt.append(weight / sum_of_weights)\r\n        \r\n    # score each item separately against table\r\n    cum_score = 0\r\n    for i in range(len(correct_table)):\r\n        # Check if this item is in the table correctly and in the correct position\r\n        if (i < len(scored_table)) and (correct_table[i] == scored_table[i]):\r\n            score = 100\r\n        # Score this item against each item in the table\r\n        else:\r\n            score_list = score_list_against_table(correct_table[i], scored_table)\r\n            if len(score_list) > 0:\r\n                score = 0.50 * max(score_list)\r\n            else:\r\n                score = 0\r\n            if i < len(score_list):\r\n                score = max([score, score_list[i]])\r\n        cum_score += score * norm_wt[i]\r\n    \r\n    # penalty for wrong number of items in table.\r\n    if len(correct_table) != len(scored_table):\r\n        cum_score = max([cum_score - 20, 0])\r\n    return cum_score\r\n    \r\ndef item_in_table(item, table):\r\n    if item in table:\r\n        print(\"Item Found\")\r\n        return 100\r\n    print(item, \"not found in\", table)\r\n    return 50\r\n\r\ndef given_table():\r\n    if script_name() == \"a4_3_aircraft.py\":\r\n        return [[218, \"C-17 Globemaster\", \"Boeing\"],\r\n                [14.6, \"F-16 Falcon\", \"General Dynamics\"],\r\n                [16.9, \"MQ-9 Reaper\", \"General Atomics\"],\r\n                [737, \"B-2 Spirit\", \"Northrop Grumman\"]]\r\n    if script_name() == \"a4_3_new_cars.py\":\r\n        return [[26660, \"Bronco\", \"Ford\"],\r\n                [36340, \"4Runner\", \"Toyota\"],\r\n                [68200, \"Q8\", \"Audi\"],\r\n                [48475, \"Silverado\", \"Cheverolet\"]]\r\n    if script_name() == \"a4_3_parks.py\":\r\n        return [[154.0, \"Disneyland\", \"California\"],\r\n                [169.34, \"Disney World\", \"Florida\"],\r\n                [79.99, \"Six Flags Great America\", \"California\"],\r\n                [73.00, \"Cedar Point\", \"Ohio\"]]\r\n    return []\r\n\r\ndef user_inputs():\r\n    if script_name() == \"a4_3_aircraft.py\":\r\n        return [ ['B-52 Stratofortress', 'Boeing', 14.4], ['T-6 Texan', 'North American Aviation', 4] ]\r\n    if script_name() == \"a4_3_new_cars.py\":\r\n        return [ ['Model 3', 'Tesla', 34999.99], ['Cayenne', 'Porche', 67500] ]\r\n    if script_name() == \"a4_3_parks.py\":\r\n        return [ ['Elitch Gardens', 'Colorado', 69.99], ['Euro Disney', 'France', 189] ]\r\n    return []\r\n\r\ndef get_correct_output(inputs):\r\n    table = given_table()\r\n    weights = []\r\n    for i in range(len(table)):\r\n        weights.append(0.1)\r\n    table.append([inputs[2], inputs[0], inputs[1]])\r\n    for i in range(len(table)-len(weights)):\r\n        weights.append(1)\r\n    return (table, weights)\r\n\r\ndef test_passed():    \r\n    \r\n    # Template-only check\r\n    print(\"-------------------------------------------------\")\r\n    print(\"Test #\" + str(0))\r\n    print(\"-------------------------------------------------\")\r\n    output, error = autograder.run_script(script_name(), [])\r\n    if len(error) == 0:\r\n        print(\"Be sure that you are not running just the template file.\")\r\n        return 0.2\r\n    else:\r\n        print(\"Ignore the errors for this run.\")\r\n        \r\n    # Run Data Sets\r\n    run_data = user_inputs()\r\n    \r\n    # Set the weights for the individual runs\r\n    relative_weights = []\r\n    for i in range(len(run_data)):         \r\n        relative_weights.append(1)\r\n    relative_weights = [1,19] #(override evenly weighted)\r\n    sum_of_relative_weights = sum(relative_weights)\r\n    run_weight = []\r\n    for weight in relative_weights:\r\n        run_weight.append(weight / sum_of_relative_weights)\r\n    \r\n    # Runs the Script for each data set\r\n    cum_score = 0\r\n    for run in range(len(run_data)):\r\n        print(\"-------------------------------------------------\")\r\n        print(\"Test #\" + str(run + 1))\r\n        print(\"-------------------------------------------------\")\r\n\r\n        inputs_for_this_run = run_data[run]\r\n\r\n        input_list = []\r\n        (correct, weights) = get_correct_output(inputs_for_this_run)\r\n        \r\n        output, error = autograder.run_script(script_name(), inputs_for_this_run)\r\n        \r\n        score = 0\r\n        # Deal with the case of errors occuring during run\r\n        if (run == 1): # Cost is a float\r\n            if len(error) > 0:\r\n                print(\"Error when handling a float cost\")\r\n                score = 0\r\n                \r\n        if (run == 2): # Cost is an integer\r\n            if len(error) > 0:\r\n                print(\"Error when handling an integer cost\")\r\n                score = 0\r\n\r\n        # Deal with case of no errors occurring during run\r\n        if len(error) == 0:\r\n            lines = output.strip().split('\\n')\r\n\r\n            if len(lines) >= 1 and len(lines[0]) > 0:                    \r\n                output_table = ast.literal_eval(lines[0])\r\n            \r\n                score = score_correct_against_scored(correct, output_table, weights)\r\n\r\n            else:\r\n                score = 0\r\n                \r\n\r\n        print(\"This test score:\", round(score,1), \"% (weight =\", round(100*run_weight[run],1), \"%)\")\r\n        cum_score += score * run_weight[run]\r\n        print()\r\n        \r\n    return max([round(cum_score, 1), 0.1])\r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 138, "problem_id": "a4_2_sickness", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a template that gets the following values from\nthe user:\n\n  * Body temperature (in Fahrenheit)\n  * Body aches (a string, which will be either \"yes\" or \"no\")\n  * Loss of smell (a string, which will be either \"yes\" or \"no\")\n\n\n\nUsing the following rules as a guide, have your program determine a person's\nrisk of having an infectious disease:\n\n  1. If the person's temperature is above 100.4 degrees, print \"High Risk\"\n  2. If the person is experiencing both body aches and loss of smell, print \"High Risk\"\n  3. For all other situations, print \"Low Risk\"\n\n\n\n**EXAMPLE:  \n**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \nInput |\n\n99.0  \nyes  \nyes  \n  \n\n| 100.4  \nno  \nyes  \nOutput | High Risk | Low Risk  \n  \n\n\n\n", "code": "\ntemperature = float(input(\"Enter body temperature (in Fahrenheit): \"))\nbody_aches = input(\"Are you experiencing body aches? (yes/no): \")\nloss_of_smell = input(\"Are you experiencing loss of smell? (yes/no): \")\n\nif temperature > 100.4:\n    print(\"High Risk\")\nelif body_aches == \"yes\" and loss_of_smell == \"yes\":\n    print(\"High Risk\")\nelse:\n    print(\"Low Risk\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(temperature, body_aches, loss_of_smell, expected_output):\r\n    output, error = autograder.run_script(\"a4_2_sickness.py\", [temperature, body_aches, loss_of_smell])\r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) >= 4:\r\n        if lines[3] == expected_output:\r\n            print(\"Correct Output\\n\")\r\n            return True\r\n        else:\r\n            print(\"Incorrect Output.  Expected\", expected_output, '\\n')\r\n            return False\r\n    else:\r\n        print(\"No Output Found\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    num_tests_passed = 0\r\n    \r\n    testcase_library = [(round(random.uniform(98.0, 99.9), 1), \"yes\", \"no\", \"Low Risk\"),\r\n                        (round(random.uniform(100.5, 102.0), 1), \"yes\", \"yes\", \"High Risk\"),\r\n                        (round(random.uniform(98.0, 99.9), 1), \"yes\", \"yes\", \"High Risk\"),\r\n                        (round(random.uniform(100.5, 102.0), 1), \"no\", \"no\", \"High Risk\")]\r\n    \r\n    for i in range(len(testcase_library)):\r\n        print(\"-------------------\")\r\n        print(\"Test\", i+1, \"of\", len(testcase_library))\r\n        print(\"-------------------\")\r\n        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):\r\n            num_tests_passed += 1\r\n    \r\n    return round(100 / len(testcase_library) * num_tests_passed, 1)\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 139, "problem_id": "a4_2_pt", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a template that gets the following values from\nthe user:\n\n  * Outside Temperature (in Fahrenheit)\n  * Lightning within 5?(a string, which will be either \"yes\" or \"no\")\n  * Winds over 20 knots? (a string, which will be either \"yes\" or \"no\")\n\n\n\nUsing the following rules as a guide, have your program determine if PT is\ncancelled or a go:\n\n  1. If the outside temperature is above 90 degrees, print \"PT Cancelled\"\n  2. If there is lightning within 5 or winds over 20 knots print \"PT Cancelled\"\n  3. For all other situations, print \"PT is a Go\"\n\n\n\n**EXAMPLE:  \n**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \nInput |\n\n99.0  \nno  \nno  \n  \n\n| 85  \nno  \nyes |\n\n85\n\nno\n\nno  \n  \nOutput | PT Cancelled | PT Cancelled | PT is a Go  \n  \n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(temperature, lightning, winds, expected_output):\r\n    output, error = autograder.run_script(\"a4_2_pt.py\", [temperature, lightning, winds])\r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) >= 4:\r\n        if lines[3] == expected_output:\r\n            print(\"Correct Output\\n\")\r\n            return True\r\n        else:\r\n            print(\"Incorrect Output.  Expected\", expected_output, '\\n')\r\n            return False\r\n    else:\r\n        print(\"No Output Found\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    num_tests_passed = 0\r\n    \r\n    testcase_library = [(round(random.uniform(72.0, 90), 1), \"no\", \"no\", \"PT is a Go\"),\r\n                        (round(random.uniform(100.5, 102.0), 1), \"yes\", \"yes\", \"PT Cancelled\"),\r\n                        (round(random.uniform(72.0, 90), 1), \"yes\", \"no\", \"PT Cancelled\"),\r\n                        (round(random.uniform(100.5, 102.0), 1), \"no\", \"no\", \"PT Cancelled\")]\r\n    \r\n    for i in range(len(testcase_library)):\r\n        print(\"-------------------\")\r\n        print(\"Test\", i+1, \"of\", len(testcase_library))\r\n        print(\"-------------------\")\r\n        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):\r\n            num_tests_passed += 1\r\n    \r\n    return round(100 / len(testcase_library) * num_tests_passed, 1)\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 140, "problem_id": "a4_2_dog", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a template that gets the following values from\nthe user:\n\n  * Outside Temperature (in Fahrenheit)\n  * Is it raining? (a string that will be either \"yes\" or \"no\")\n  * Is it daytime? (a string that will be either \"yes\" or \"no\")\n\n\n\nUsing the following rules as a guide, have your program determine if the dog\nis outside:\n\n  1. If the outside temperature is above 85 degrees, print \"Dog Inside\"\n  2. If it is raining outside print \"Dog Inside\"\n  3. If it is NOT daytime, print \"Dog Inside\"\n  4. For all other situations, print \"Dog Outside\"\n\n\n\n**EXAMPLE:  \n**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \nInput |\n\n99.0  \nno  \nyes  \n  \n\n| 80  \nyes  \nyes |\n\n75\n\nno\n\nyes  \n  \nOutput | Dog Inside | Dog Inside | Dog Outside  \n  \n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(temperature, raining, daytime, expected_output):\r\n    output, error = autograder.run_script(\"a4_2_dog.py\", [temperature, raining, daytime])\r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) >= 4:\r\n        if lines[3] == expected_output:\r\n            print(\"Correct Output\\n\")\r\n            return True\r\n        else:\r\n            print(\"Incorrect Output.  Expected\", expected_output, '\\n')\r\n            return False\r\n    else:\r\n        print(\"No Output Found\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    num_tests_passed = 0\r\n    \r\n    testcase_library = [(round(random.uniform(83.0, 84.9), 1), \"no\", \"yes\", \"Dog Outside\"),\r\n                        (round(random.uniform(83.0, 84.9), 1), \"yes\", \"yes\", \"Dog Inside\"),\r\n                        (round(random.uniform(83.0, 84.9), 1), \"no\", \"no\", \"Dog Inside\"),\r\n                        (round(random.uniform(100.5, 102.0), 1), \"no\", \"yes\", \"Dog Inside\")]\r\n    \r\n    for i in range(len(testcase_library)):\r\n        print(\"-------------------\")\r\n        print(\"Test\", i+1, \"of\", len(testcase_library))\r\n        print(\"-------------------\")\r\n        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):\r\n            num_tests_passed += 1\r\n    \r\n    return round(100 / len(testcase_library) * num_tests_passed, 1)\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 141, "problem_id": "a4_1_lift", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite a Python function that calculates the lift for an aircraft. You will\nname your function `calculate_lift`, and it will have the following parameters\n(in this order):\n\n  * Lift coefficient\n  * Density\n  * Velocity\n  * Area\n\nYour function will **return** the lift, which can be computed using the\nfollowing equation:\n\n\n\n![Principles of Flying](https://www.thaitechnics.com/fly/tg4/lift_equa.gif)\n\n\n\nNOTE: You do NOT need to call the function.\n\n\n", "code": "\ndef calculate_lift(lift_coefficient, density, velocity, area):\n    lift = lift_coefficient * density * velocity * velocity * area\n    return lift\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport a4_1_lift\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    \r\n    if \"calculate_lift\" in dir(a4_1_lift):\r\n        print(\"Function Defined\")\r\n        score += 20\r\n        \r\n        lift_coefficient = round(random.uniform(3, 5), 1)\r\n        density = round(random.uniform(2, 3), 1)\r\n        velocity = round(random.uniform(50, 200), 1)\r\n        area = round(random.uniform(400, 1000), 1)\r\n        lift = lift_coefficient * area * 0.5 * density * velocity ** 2.0\r\n        \r\n        if autograder.equals(lift, a4_1_lift.calculate_lift(lift_coefficient, density, velocity, area)):\r\n            print(\"Function Returned the Correct Value\")\r\n            score += 80\r\n        else:\r\n            print(\"calculate_lift(%1.1f, %1.1f, %1.1f, %1.1f) return %f instead of %f\" %\r\n                  (lift_coefficient, density, velocity, area, a4_1_lift.calculate_lift(lift_coefficient, density, velocity, area), lift))\r\n        \r\n    else:\r\n        print(\"Function Not Defined\")\r\n    \r\n    return score\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 142, "problem_id": "a4_1_buoyancy", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite a Python function that calculates the buoyancy force for an object. You\nwill name your function `calculate_buoyancy`, and it will have the following\nparameters (in this order):\n\n  * Submerged Volume\n  * Density\n  * Gravity\n\nOur function will  **return**  the buoyancy force, which can be computed using\nthe following equation:\n\n**Fb = Vs \u00d7 D \u00d7 g **where Fb is the buoyancy force, Vs is the submerged\nvolume, D is the density of the fluid the object is submerged in, and g is the\nforce of gravity.\n\nNOTE: You do NOT need to call the function.\n\n\n", "code": "\ndef calculate_buoyancy(Vs, D, g):\n    Fb = Vs * D * g\n    return Fb\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport a4_1_buoyancy\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    \r\n    if \"calculate_buoyancy\" in dir(a4_1_buoyancy):\r\n        print(\"Function Defined\")\r\n        score += 20\r\n        \r\n        volume = round(random.uniform(3, 5), 1)\r\n        density = round(random.uniform(2, 3), 1)\r\n        gravity = round(random.uniform(50, 200), 1)\r\n        buoyancy = volume * density * gravity\r\n        \r\n        if autograder.equals(buoyancy, a4_1_buoyancy.calculate_buoyancy(volume, density, gravity)):\r\n            print(\"Function Returned the Correct Value\")\r\n            score += 80\r\n        else:\r\n            print(\"calculate_buoyancy(%1.1f, %1.1f, %1.1f) returned %f instead of %f\" %\r\n                  (volume, density, gravity, a4_1_buoyancy.calculate_buoyancy(volume, density, gravity), buoyancy))\r\n        \r\n    else:\r\n        print(\"Function Not Defined\")\r\n    \r\n    return score\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 143, "problem_id": "a4_1_area", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite a Python function that calculates the area of a trapazoid. You will name\nyour function `calculate_area`, and it will have the following parameters (in\nthis order):\n\n  * Side_A\n  * Side_B\n  * Height\n\nOur function will  **return**  the area, which can be computed using the\nfollowing equation:\n\nA = (a + b) h\n\nNOTE: You do NOT need to call the function.\n\n\n\n\n\n\n", "code": "\ndef calculate_area(a, b, h):\n    return (a + b) * h\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport a4_1_area\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    \r\n    if \"calculate_area\" in dir(a4_1_area):\r\n        print(\"Function Defined\")\r\n        score += 20\r\n        \r\n        Side_A = round(random.uniform(3, 5), 1)\r\n        Side_B = round(random.uniform(2, 3), 1)\r\n        Height = round(random.uniform(50, 200), 1)\r\n        area = ((Side_A + Side_B) / 2) * Height\r\n        \r\n        if autograder.equals(area, a4_1_area.calculate_area(Side_A,Side_B,Height)):\r\n            print(\"Function Returned the Correct Value\")\r\n            score += 80\r\n        else:\r\n            print(\"calculate_area(%1.1f, %1.1f, %1.1f) return %f instead of %f\" %\r\n                  (Side_A, Side_B, Height, a4_1_area.calculate_area(Side_A,Side_B,Height), area))\r\n        \r\n    else:\r\n        print(\"Function Not Defined\")\r\n    \r\n    return score\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 144, "problem_id": "a3_6_tests", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been asked to write a program that analyzes scores of a recent\ntest given to a class. Write a program that gets from the user the number of\ntests scored, and gets that many test scores (which you may assume are whole\nnumbers) from the user. Your program must print out:\n\n  * The average score of all tests.\n  * The count of tests that scored lower than the average.\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**Input** | 3  \n75  \n90  \n88  \n  \n  \n| 5  \n86  \n79  \n90  \n90  \n100  \n**Output** | 84.3  \n1 | 89.0  \n2  \n  \n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef script_name():\r\n    return \"a3_6_tests.py\"\r\n\r\n# There should be two outputs:\r\n#    The average followed by a count.\r\n# The test cases should be constructed so that:\r\n#    The average is >= 30\r\n#    The count   is <= 20\r\n\r\n# AUTOGRADER RUBRIC for scoring one test:\r\n\r\n# Number of outputs (10 pt):\r\n# 10 pt Output consists of exactly two values\r\n#  5 pt Output consists of one value or more than two values\r\n#  0 pt Output consists of either zero\r\n\r\n# Output of average (45 pt):\r\n# 45 pt Exactly correct and is first value in list\r\n# 30 pt Within 0.1 and is first value in list\r\n# 30 pt Exactly correct but is not first value in list\r\n# 15 pt Within 0.1 but is not first value in list\r\n\r\n# Output of count (45 pt):\r\n# 45 pt Exactly correct and is first value in list\r\n# 30 pt Within 1 and is first value in list\r\n# 30 pt Exactly correct but is not first value in list\r\n# 15 pt Within 1 but is not first value in list\r\n\r\ndef base_name(name_of_script):\r\n    return (name_of_script.split('.')[0]).split('_')[2]\r\n\r\ndef solution(input_list):\r\n\r\n    # Input is a count followed by that many values\r\n    # Create a list of just the values\r\n    items_list = input_list[1:]\r\n    \r\n    # Determine the average of the values\r\n    average = sum(items_list) / len(items_list)\r\n    \r\n    # Count the number of items that meet the criteria\r\n    # This depends on the specific variant of the problem\r\n    base_script = base_name(script_name())\r\n    count = 0\r\n    for score in items_list:\r\n        if base_script == \"pushups\" and score > average:\r\n            count += 1\r\n        if base_script == \"sami\" and score > average:\r\n            count += 1\r\n        if base_script == \"tests\" and score < average:\r\n            count += 1\r\n    \r\n    # Output is average (rounded to 1 decimal place) and count \r\n    return [str(round(average,1)), str(count)]\r\n\r\ndef is_value(s):\r\n    try:\r\n        float(s)\r\n        return True\r\n    except ValueError:\r\n        return False\r\n    \r\n# Returns the position and distance of the closes user value from the solution value.\r\n# Returns found=False if list from user contains no numeric values\r\ndef matchup_numeric(value, from_user):\r\n    value = float(value)\r\n    found = False\r\n    position = -1\r\n    within = 1E10\r\n    for i in range(len(from_user)):\r\n        item = from_user[i]\r\n        if is_value(item):\r\n            found = True\r\n            user_value = float(item)\r\n            distance = abs(value - user_value)\r\n            if  distance < within:\r\n                within = distance\r\n                position = i \r\n                \r\n    return (found, position, within)\r\n\r\ndef decimal_places(float_string):\r\n    if is_value(float_string):\r\n        decimal_point_index = float_string.find('.')\r\n        if decimal_point_index == -1:\r\n            return 0\r\n        else:\r\n            return len(float_string) - (decimal_point_index + 1)\r\n    else:\r\n        return -1\r\n    \r\ndef grade_item(name, correct_position, places, tolerance, from_soln, from_user):\r\n    score = 0\r\n    \r\n    value_from_soln = from_soln[correct_position]\r\n    \r\n    (found, position, within) = matchup_numeric(value_from_soln, from_user)\r\n    if not found:\r\n        print(name, \"not found.  Expected: \", value_from_soln)\r\n        score += 0\r\n    else:\r\n        place_penalty = 0\r\n        if   (position == correct_position) and (within <= tolerance[0]):\r\n            print(name, \"appears correct.\")\r\n            score += 45 - place_penalty\r\n        elif (position == correct_position) and (within <= tolerance[1]):\r\n            print(name, \"is close.  Expected: \", value_from_soln)\r\n            score += 30 - place_penalty\r\n        elif (position != correct_position) and (within <= tolerance[0]):\r\n            print(name, \"appears correct, but in wrong position.\")\r\n            score += 30 - place_penalty\r\n        elif  (position != correct_position) and (within <= tolerance[1]):\r\n            print(name, \"is close, but in wrong position.  Expected: \", value_from_soln)\r\n            score += 15 - place_penalty\r\n        else:\r\n            print(name, \"is not close and probably in wrong position.  Expected: \", value_from_soln)\r\n            score += 0\r\n    return score            \r\n\r\ndef run_1_test(script_being_tested, input_list):\r\n\r\n    (output, error) = autograder.run_script(script_being_tested, input_list)\r\n    lines = output.strip().split('\\n')\r\n    expected_output = solution(input_list)\r\n    \r\n    score = 0\r\n\r\n    # Number of outputs\r\n    if len(lines) == 2:\r\n        print(\"Number of output lines is correct.\")\r\n        score += 10\r\n    elif len(lines) == 1:\r\n        print(\"Number of output lines is not quite correct.\")\r\n        score += 5\r\n    else:\r\n        print(\"Number of output lines is not correct.\")\r\n        score += 0\r\n\r\n    score += grade_item(\"Average\", 0, 1, [0.1, 10], expected_output, lines)\r\n    score += grade_item(\"Count\", 1, 0, [0, 1], expected_output, lines)\r\n\r\n    print('-----------------------------')\r\n\r\n    return score\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    script_being_tested = script_name()\r\n    score = 0\r\n    cum_weight = 0.0\r\n\r\n    # Corner Case #1 (5%) -- only a single score\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n    \r\n    random_people = 1\r\n    input_list = [random_people]\r\n        \r\n    for i in range(random_people):\r\n        random_score = random.randint(30, 100)\r\n        input_list.append(random_score)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n\r\n    # Corner Case #2 (5%) -- multiple all scores that are all the same\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n\r\n    random_people = random.randint(5, 10)\r\n    input_list = [random_people]\r\n        \r\n    random_score = random.randint(30, 100)\r\n    for i in range(random_people):\r\n        input_list.append(random_score)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n\r\n    # Corner Case #3 (5%) -- scores exist that exactly match average\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n\r\n    random_people = random.randint(7,15)\r\n    input_list = [random_people]\r\n        \r\n    random_mean = random.randint(50, 70)\r\n    \r\n    for i in range(random_people % 3):\r\n        input_list.append(random_mean)\r\n        \r\n    for i in range(random_people // 3):\r\n        random_step = random.randint(3,20)\r\n        input_list.append(random_mean)\r\n        input_list.append(random_mean + random_step)\r\n        input_list.append(random_mean - random_step)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n    \r\n    #Corner Case # 4 makes sure students are rounding to one decimal place\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100\r\n    \r\n    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]\r\n    rounding_score = run_1_test(script_being_tested, input_list)\r\n    score += weight * rounding_score\r\n    \r\n    # General Case (80%) -- 4 runs @ 20% each\r\n    runs = 2\r\n    weight = (100.0 - cum_weight)\r\n    weight /= runs * 100.0\r\n\r\n    \r\n    for run in range(runs):\r\n        random_people = random.randint(2, 20)\r\n        input_list = [random_people]\r\n            \r\n        for i in range(random_people):\r\n            random_score = random.randint(30, 100)\r\n            input_list.append(random_score)\r\n        \r\n        score += weight * run_1_test(script_being_tested, input_list)\r\n    score = min([score,rounding_score])\r\n    return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 145, "problem_id": "a3_6_sami", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been asked to write a program that analyzes the cadet wing's\nperformance on a recent SAMI. Write a program that gets from the user the\nnumber of squadrons scored, and gets that many squadron SAMI scores (which you\nmay assume are whole numbers) from the user. Your program must print out:\n\n  * The average score of all squadrons.\n  * The count of squadrons that scored higher than the average.\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**Input** | 3  \n75  \n90  \n88  \n  \n  \n| 5  \n86  \n79  \n90  \n90  \n100  \n**Output** | 84.3  \n2 | 89.0  \n3  \n  \n\n\n\n\n\n", "code": "\n# Get the number of squadrons scored from the user\nnum_squadrons = int(input(\"Enter the number of squadrons scored: \"))\n\n# Initialize variables\nsquadron_scores = []\ntotal_score = 0\n\n# Get the squadron scores from the user\nfor i in range(num_squadrons):\n    score = int(input(\"Enter the score for squadron {}: \".format(i+1)))\n    squadron_scores.append(score)\n    total_score += score\n\n# Calculate the average score\naverage_score = total_score / num_squadrons\n\n# Initialize variable for count of squadrons that scored higher than the average\ncount_higher = 0\n\n# Count the number of squadrons that scored higher than the average\nfor score in squadron_scores:\n    if score > average_score:\n        count_higher += 1\n\n# Print the average score and count of squadrons that scored higher than the average\nprint(\"Average score: {:.1f}\".format(average_score))\nprint(\"Count of squadrons that scored higher than the average: {}\".format(count_higher))\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef script_name():\r\n    return \"a3_6_sami.py\"\r\n\r\n# There should be two outputs:\r\n#    The average followed by a count.\r\n# The test cases should be constructed so that:\r\n#    The average is >= 30\r\n#    The count   is <= 20\r\n\r\n# AUTOGRADER RUBRIC for scoring one test:\r\n\r\n# Number of outputs (10 pt):\r\n# 10 pt Output consists of exactly two values\r\n#  5 pt Output consists of one value or more than two values\r\n#  0 pt Output consists of either zero\r\n\r\n# Output of average (45 pt):\r\n# 45 pt Exactly correct and is first value in list\r\n# 30 pt Within 0.1 and is first value in list\r\n# 30 pt Exactly correct but is not first value in list\r\n# 15 pt Within 0.1 but is not first value in list\r\n\r\n# Output of count (45 pt):\r\n# 45 pt Exactly correct and is first value in list\r\n# 30 pt Within 1 and is first value in list\r\n# 30 pt Exactly correct but is not first value in list\r\n# 15 pt Within 1 but is not first value in list\r\n\r\ndef base_name(name_of_script):\r\n    return (name_of_script.split('.')[0]).split('_')[2]\r\n\r\ndef solution(input_list):\r\n\r\n    # Input is a count followed by that many values\r\n    # Create a list of just the values\r\n    items_list = input_list[1:]\r\n    \r\n    # Determine the average of the values\r\n    average = sum(items_list) / len(items_list)\r\n    \r\n    # Count the number of items that meet the criteria\r\n    # This depends on the specific variant of the problem\r\n    base_script = base_name(script_name())\r\n    count = 0\r\n    for score in items_list:\r\n        if base_script == \"pushups\" and score > average:\r\n            count += 1\r\n        if base_script == \"sami\" and score > average:\r\n            count += 1\r\n        if base_script == \"tests\" and score < average:\r\n            count += 1\r\n    \r\n    # Output is average (rounded to 1 decimal place) and count \r\n    return [str(round(average,1)), str(count)]\r\n\r\ndef is_value(s):\r\n    try:\r\n        float(s)\r\n        return True\r\n    except ValueError:\r\n        return False\r\n    \r\n# Returns the position and distance of the closes user value from the solution value.\r\n# Returns found=False if list from user contains no numeric values\r\ndef matchup_numeric(value, from_user):\r\n    value = float(value)\r\n    found = False\r\n    position = -1\r\n    within = 1E10\r\n    for i in range(len(from_user)):\r\n        item = from_user[i]\r\n        if is_value(item):\r\n            found = True\r\n            user_value = float(item)\r\n            distance = abs(value - user_value)\r\n            if  distance < within:\r\n                within = distance\r\n                position = i \r\n                \r\n    return (found, position, within)\r\n\r\ndef decimal_places(float_string):\r\n    if is_value(float_string):\r\n        decimal_point_index = float_string.find('.')\r\n        if decimal_point_index == -1:\r\n            return 0\r\n        else:\r\n            return len(float_string) - (decimal_point_index + 1)\r\n    else:\r\n        return -1\r\n    \r\ndef grade_item(name, correct_position, places, tolerance, from_soln, from_user):\r\n    score = 0\r\n    \r\n    value_from_soln = from_soln[correct_position]\r\n    \r\n    (found, position, within) = matchup_numeric(value_from_soln, from_user)\r\n    if not found:\r\n        print(name, \"not found.  Expected: \", value_from_soln)\r\n        score += 0\r\n    else:\r\n        place_penalty = 0\r\n        if   (position == correct_position) and (within <= tolerance[0]):\r\n            print(name, \"appears correct.\")\r\n            score += 45 - place_penalty\r\n        elif (position == correct_position) and (within <= tolerance[1]):\r\n            print(name, \"is close.  Expected: \", value_from_soln)\r\n            score += 30 - place_penalty\r\n        elif (position != correct_position) and (within <= tolerance[0]):\r\n            print(name, \"appears correct, but in wrong position.\")\r\n            score += 30 - place_penalty\r\n        elif  (position != correct_position) and (within <= tolerance[1]):\r\n            print(name, \"is close, but in wrong position.  Expected: \", value_from_soln)\r\n            score += 15 - place_penalty\r\n        else:\r\n            print(name, \"is not close and probably in wrong position.  Expected: \", value_from_soln)\r\n            score += 0\r\n    return score            \r\n\r\ndef run_1_test(script_being_tested, input_list):\r\n\r\n    (output, error) = autograder.run_script(script_being_tested, input_list)\r\n    lines = output.strip().split('\\n')\r\n    expected_output = solution(input_list)\r\n    \r\n    score = 0\r\n\r\n    # Number of outputs\r\n    if len(lines) == 2:\r\n        print(\"Number of output lines is correct.\")\r\n        score += 10\r\n    elif len(lines) == 1:\r\n        print(\"Number of output lines is not quite correct.\")\r\n        score += 5\r\n    else:\r\n        print(\"Number of output lines is not correct.\")\r\n        score += 0\r\n\r\n    score += grade_item(\"Average\", 0, 1, [0.1, 10], expected_output, lines)\r\n    score += grade_item(\"Count\", 1, 0, [0, 1], expected_output, lines)\r\n\r\n    print('-----------------------------')\r\n\r\n    return score\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    script_being_tested = script_name()\r\n    score = 0\r\n    cum_weight = 0.0\r\n\r\n    # Corner Case #1 (5%) -- only a single score\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n    \r\n    random_people = 1\r\n    input_list = [random_people]\r\n        \r\n    for i in range(random_people):\r\n        random_score = random.randint(30, 100)\r\n        input_list.append(random_score)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n\r\n    # Corner Case #2 (5%) -- multiple all scores that are all the same\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n\r\n    random_people = random.randint(5, 10)\r\n    input_list = [random_people]\r\n        \r\n    random_score = random.randint(30, 100)\r\n    for i in range(random_people):\r\n        input_list.append(random_score)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n\r\n    # Corner Case #3 (5%) -- scores exist that exactly match average\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n\r\n    random_people = random.randint(7,15)\r\n    input_list = [random_people]\r\n        \r\n    random_mean = random.randint(50, 70)\r\n    \r\n    for i in range(random_people % 3):\r\n        input_list.append(random_mean)\r\n        \r\n    for i in range(random_people // 3):\r\n        random_step = random.randint(3,20)\r\n        input_list.append(random_mean)\r\n        input_list.append(random_mean + random_step)\r\n        input_list.append(random_mean - random_step)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n    \r\n    #Corner Case # 4 makes sure students are rounding to one decimal place\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100\r\n    \r\n    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]\r\n    rounding_score = run_1_test(script_being_tested, input_list)\r\n    score += weight * rounding_score\r\n    \r\n    # General Case (80%) -- 4 runs @ 20% each\r\n    runs = 2\r\n    weight = (100.0 - cum_weight)\r\n    weight /= runs * 100.0\r\n\r\n    \r\n    for run in range(runs):\r\n        random_people = random.randint(2, 20)\r\n        input_list = [random_people]\r\n            \r\n        for i in range(random_people):\r\n            random_score = random.randint(30, 100)\r\n            input_list.append(random_score)\r\n        \r\n        score += weight * run_1_test(script_being_tested, input_list)\r\n    score = min([score,rounding_score])\r\n    return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 146, "problem_id": "a3_6_pushups", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been asked to write a program that analyzes number of pushups done\nby a group of cadets. Write a program that gets from the user the number of\npeople tested, and gets that many pushup scores (which you may assume are\nwhole numbers) from the user. Your program must print out:\n\n  * The average number of pushups for the group.\n  * The count of cadets that scored higher than the average.\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**Input** | 3  \n75  \n90  \n88  \n  \n  \n| 5  \n86  \n79  \n90  \n90  \n100  \n**Output** | 84.3  \n2 | 89.0  \n3  \n  \n\n\n\n", "code": "\nnum_cadets = int(input(\"Enter the number of people tested: \"))\n\npushup_scores = []\nfor i in range(num_cadets):\n    score = int(input(\"Enter pushup score: \"))\n    pushup_scores.append(score)\n\naverage = sum(pushup_scores) / num_cadets\n\nabove_average = len([score for score in pushup_scores if score > average])\n\nprint(\"Average number of pushups for the group:\", average)\nprint(\"Count of cadets that scored higher than the average:\", above_average)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef script_name():\r\n    return \"a3_6_pushups.py\"\r\n\r\n# There should be two outputs:\r\n#    The average followed by a count.\r\n# The test cases should be constructed so that:\r\n#    The average is >= 30\r\n#    The count   is <= 20\r\n\r\n# AUTOGRADER RUBRIC for scoring one test:\r\n\r\n# Number of outputs (10 pt):\r\n# 10 pt Output consists of exactly two values\r\n#  5 pt Output consists of one value or more than two values\r\n#  0 pt Output consists of either zero\r\n\r\n# Output of average (45 pt):\r\n# 45 pt Exactly correct and is first value in list\r\n# 30 pt Within 0.1 and is first value in list\r\n# 30 pt Exactly correct but is not first value in list\r\n# 15 pt Within 0.1 but is not first value in list\r\n\r\n# Output of count (45 pt):\r\n# 45 pt Exactly correct and is first value in list\r\n# 30 pt Within 1 and is first value in list\r\n# 30 pt Exactly correct but is not first value in list\r\n# 15 pt Within 1 but is not first value in list\r\n\r\ndef base_name(name_of_script):\r\n    return (name_of_script.split('.')[0]).split('_')[2]\r\n\r\ndef solution(input_list):\r\n\r\n    # Input is a count followed by that many values\r\n    # Create a list of just the values\r\n    items_list = input_list[1:]\r\n    \r\n    # Determine the average of the values\r\n    average = sum(items_list) / len(items_list)\r\n    \r\n    # Count the number of items that meet the criteria\r\n    # This depends on the specific variant of the problem\r\n    base_script = base_name(script_name())\r\n    count = 0\r\n    for score in items_list:\r\n        if base_script == \"pushups\" and score > average:\r\n            count += 1\r\n        if base_script == \"sami\" and score > average:\r\n            count += 1\r\n        if base_script == \"tests\" and score < average:\r\n            count += 1\r\n    \r\n    # Output is average (rounded to 1 decimal place) and count \r\n    return [str(round(average,1)), str(count)]\r\n\r\ndef is_value(s):\r\n    try:\r\n        float(s)\r\n        return True\r\n    except ValueError:\r\n        return False\r\n    \r\n# Returns the position and distance of the closes user value from the solution value.\r\n# Returns found=False if list from user contains no numeric values\r\ndef matchup_numeric(value, from_user):\r\n    value = float(value)\r\n    found = False\r\n    position = -1\r\n    within = 1E10\r\n    for i in range(len(from_user)):\r\n        item = from_user[i]\r\n        if is_value(item):\r\n            found = True\r\n            user_value = float(item)\r\n            distance = abs(value - user_value)\r\n            if  distance < within:\r\n                within = distance\r\n                position = i \r\n                \r\n    return (found, position, within)\r\n\r\ndef decimal_places(float_string):\r\n    if is_value(float_string):\r\n        decimal_point_index = float_string.find('.')\r\n        if decimal_point_index == -1:\r\n            return 0\r\n        else:\r\n            return len(float_string) - (decimal_point_index + 1)\r\n    else:\r\n        return -1\r\n    \r\ndef grade_item(name, correct_position, places, tolerance, from_soln, from_user):\r\n    score = 0\r\n    \r\n    value_from_soln = from_soln[correct_position]\r\n    \r\n    (found, position, within) = matchup_numeric(value_from_soln, from_user)\r\n    if not found:\r\n        print(name, \"not found.  Expected: \", value_from_soln)\r\n        score += 0\r\n    else:\r\n        place_penalty = 0\r\n        if   (position == correct_position) and (within <= tolerance[0]):\r\n            print(name, \"appears correct.\")\r\n            score += 45 - place_penalty\r\n        elif (position == correct_position) and (within <= tolerance[1]):\r\n            print(name, \"is close.  Expected: \", value_from_soln)\r\n            score += 30 - place_penalty\r\n        elif (position != correct_position) and (within <= tolerance[0]):\r\n            print(name, \"appears correct, but in wrong position.\")\r\n            score += 30 - place_penalty\r\n        elif  (position != correct_position) and (within <= tolerance[1]):\r\n            print(name, \"is close, but in wrong position.  Expected: \", value_from_soln)\r\n            score += 15 - place_penalty\r\n        else:\r\n            print(name, \"is not close and probably in wrong position.  Expected: \", value_from_soln)\r\n            score += 0\r\n    return score            \r\n\r\ndef run_1_test(script_being_tested, input_list):\r\n\r\n    (output, error) = autograder.run_script(script_being_tested, input_list)\r\n    lines = output.strip().split('\\n')\r\n    expected_output = solution(input_list)\r\n    \r\n    score = 0\r\n\r\n    # Number of outputs\r\n    if len(lines) == 2:\r\n        print(\"Number of output lines is correct.\")\r\n        score += 10\r\n    elif len(lines) == 1:\r\n        print(\"Number of output lines is not quite correct.\")\r\n        score += 5\r\n    else:\r\n        print(\"Number of output lines is not correct.\")\r\n        score += 0\r\n\r\n    score += grade_item(\"Average\", 0, 1, [0.1, 10], expected_output, lines)\r\n    score += grade_item(\"Count\", 1, 0, [0, 1], expected_output, lines)\r\n\r\n    print('-----------------------------')\r\n\r\n    return score\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    script_being_tested = script_name()\r\n    score = 0\r\n    cum_weight = 0.0\r\n\r\n    # Corner Case #1 (5%) -- only a single score\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n    \r\n    random_people = 1\r\n    input_list = [random_people]\r\n        \r\n    for i in range(random_people):\r\n        random_score = random.randint(30, 100)\r\n        input_list.append(random_score)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n\r\n    # Corner Case #2 (5%) -- multiple all scores that are all the same\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n\r\n    random_people = random.randint(5, 10)\r\n    input_list = [random_people]\r\n        \r\n    random_score = random.randint(30, 100)\r\n    for i in range(random_people):\r\n        input_list.append(random_score)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n\r\n    # Corner Case #3 (5%) -- scores exist that exactly match average\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n\r\n    random_people = random.randint(7,15)\r\n    input_list = [random_people]\r\n        \r\n    random_mean = random.randint(50, 70)\r\n    \r\n    for i in range(random_people % 3):\r\n        input_list.append(random_mean)\r\n        \r\n    for i in range(random_people // 3):\r\n        random_step = random.randint(3,20)\r\n        input_list.append(random_mean)\r\n        input_list.append(random_mean + random_step)\r\n        input_list.append(random_mean - random_step)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n    \r\n    #Corner Case # 4 makes sure students are rounding to one decimal place\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100\r\n    \r\n    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]\r\n    rounding_score = run_1_test(script_being_tested, input_list)\r\n    score += weight * rounding_score\r\n    \r\n    # General Case (80%) -- 4 runs @ 20% each\r\n    runs = 2\r\n    weight = (100.0 - cum_weight)\r\n    weight /= runs * 100.0\r\n\r\n    \r\n    for run in range(runs):\r\n        random_people = random.randint(2, 20)\r\n        input_list = [random_people]\r\n            \r\n        for i in range(random_people):\r\n            random_score = random.randint(30, 100)\r\n            input_list.append(random_score)\r\n        \r\n        score += weight * run_1_test(script_being_tested, input_list)\r\n    score = min([score,rounding_score])\r\n    return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 147, "problem_id": "a3_6_missiletest", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been asked to write a program that analyzes the results acquired\nfrom several missile tests executed last week. Write a program that gets from\nthe user the number missile tests preformed, and gets the result from each\ntest (which you may assume are whole numbers) from the user. Your program must\nprint out:\n\n  * The average result for the missile tests.\n  * The count of missile tests that scored above the average.\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**Input** | 3  \n350  \n410  \n256  \n  \n  \n| 5  \n178  \n98  \n200  \n200  \n154  \n**Output** | 338.7  \n2 | 166.0  \n3\n\n\n", "code": "\ndef missile_analysis():\n    num_tests = int(input(\"Enter the number of missile tests: \"))\n    \n    test_results = []\n    for i in range(num_tests):\n        result = int(input(\"Enter the result of test {}: \".format(i+1)))\n        test_results.append(result)\n    \n    average = sum(test_results) / len(test_results)\n    above_average_count = sum(result > average for result in test_results)\n    \n    print(\"Average result: {:.1f}\".format(average))\n    print(\"Number of tests above average: {}\".format(above_average_count))\n\nmissile_analysis()\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef script_name():\r\n    return \"a3_6_missiletest.py\"\r\n\r\n# There should be two outputs:\r\n#    The average followed by a count.\r\n# The test cases should be constructed so that:\r\n#    The average is >= 30\r\n#    The count   is <= 20\r\n\r\n# AUTOGRADER RUBRIC for scoring one test:\r\n\r\n# Number of outputs (10 pt):\r\n# 10 pt Output consists of exactly two values\r\n#  5 pt Output consists of one value or more than two values\r\n#  0 pt Output consists of either zero\r\n\r\n# Output of average (45 pt):\r\n# 45 pt Exactly correct and is first value in list\r\n# 30 pt Within 0.1 and is first value in list\r\n# 30 pt Exactly correct but is not first value in list\r\n# 15 pt Within 0.1 but is not first value in list\r\n\r\n# Output of count (45 pt):\r\n# 45 pt Exactly correct and is first value in list\r\n# 30 pt Within 1 and is first value in list\r\n# 30 pt Exactly correct but is not first value in list\r\n# 15 pt Within 1 but is not first value in list\r\n\r\ndef base_name(name_of_script):\r\n    return (name_of_script.split('.')[0]).split('_')[2]\r\n\r\ndef solution(input_list):\r\n\r\n    # Input is a count followed by that many values\r\n    # Create a list of just the values\r\n    items_list = input_list[1:]\r\n    \r\n    # Determine the average of the values\r\n    average = sum(items_list) / len(items_list)\r\n    \r\n    # Count the number of items that meet the criteria\r\n    # This depends on the specific variant of the problem\r\n    base_script = base_name(script_name())\r\n    count = 0\r\n    for score in items_list:\r\n        if base_script == \"pushups\" and score > average:\r\n            count += 1\r\n        if base_script == \"sami\" and score > average:\r\n            count += 1\r\n        if base_script == \"tests\" and score < average:\r\n            count += 1\r\n        if base_script == \"flighttest\" and score < average:\r\n            count += 1\r\n        if base_script == \"missiletest\" and score > average:\r\n            count += 1\r\n    \r\n    # Output is average (rounded to 1 decimal place) and count \r\n    return [str(round(average,1)), str(count)]\r\n\r\ndef is_value(s):\r\n    try:\r\n        float(s)\r\n        return True\r\n    except ValueError:\r\n        return False\r\n    \r\n# Returns the position and distance of the closes user value from the solution value.\r\n# Returns found=False if list from user contains no numeric values\r\ndef matchup_numeric(value, from_user):\r\n    value = float(value)\r\n    found = False\r\n    position = -1\r\n    within = 1E10\r\n    for i in range(len(from_user)):\r\n        item = from_user[i]\r\n        if is_value(item):\r\n            found = True\r\n            user_value = float(item)\r\n            distance = abs(value - user_value)\r\n            if  distance < within:\r\n                within = distance\r\n                position = i \r\n                \r\n    return (found, position, within)\r\n\r\ndef decimal_places(float_string):\r\n    if is_value(float_string):\r\n        decimal_point_index = float_string.find('.')\r\n        if decimal_point_index == -1:\r\n            return 0\r\n        else:\r\n            return len(float_string) - (decimal_point_index + 1)\r\n    else:\r\n        return -1\r\n    \r\ndef grade_item(name, correct_position, places, tolerance, from_soln, from_user):\r\n    score = 0\r\n    \r\n    value_from_soln = from_soln[correct_position]\r\n    \r\n    (found, position, within) = matchup_numeric(value_from_soln, from_user)\r\n    if not found:\r\n        print(name, \"not found.  Expected: \", value_from_soln)\r\n        score += 0\r\n    else:\r\n        place_penalty = 0\r\n        if   (position == correct_position) and (within <= tolerance[0]):\r\n            print(name, \"appears correct.\")\r\n            score += 45 - place_penalty\r\n        elif (position == correct_position) and (within <= tolerance[1]):\r\n            print(name, \"is close.  Expected: \", value_from_soln)\r\n            score += 30 - place_penalty\r\n        elif (position != correct_position) and (within <= tolerance[0]):\r\n            print(name, \"appears correct, but in wrong position.\")\r\n            score += 30 - place_penalty\r\n        elif  (position != correct_position) and (within <= tolerance[1]):\r\n            print(name, \"is close, but in wrong position.  Expected: \", value_from_soln)\r\n            score += 15 - place_penalty\r\n        else:\r\n            print(name, \"is not close and probably in wrong position.  Expected: \", value_from_soln)\r\n            score += 0\r\n    return score            \r\n\r\ndef run_1_test(script_being_tested, input_list):\r\n\r\n    (output, error) = autograder.run_script(script_being_tested, input_list)\r\n    lines = output.strip().split('\\n')\r\n    expected_output = solution(input_list)\r\n    \r\n    score = 0\r\n\r\n    # Number of outputs\r\n    if len(lines) == 2:\r\n        print(\"Number of output lines is correct.\")\r\n        score += 10\r\n    elif len(lines) == 1:\r\n        print(\"Number of output lines is not quite correct.\")\r\n        score += 5\r\n    else:\r\n        print(\"Number of output lines is not correct.\")\r\n        score += 0\r\n\r\n    score += grade_item(\"Average\", 0, 1, [0.1, 10], expected_output, lines)\r\n    score += grade_item(\"Count\", 1, 0, [0, 1], expected_output, lines)\r\n\r\n    print('-----------------------------')\r\n\r\n    return score\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    script_being_tested = script_name()\r\n    score = 0\r\n    cum_weight = 0.0\r\n\r\n    # Corner Case #1 (5%) -- only a single score\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n    \r\n    random_people = 1\r\n    input_list = [random_people]\r\n        \r\n    for i in range(random_people):\r\n        random_score = random.randint(30, 100)\r\n        input_list.append(random_score)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n\r\n    # Corner Case #2 (5%) -- multiple all scores that are all the same\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n\r\n    random_people = random.randint(5, 10)\r\n    input_list = [random_people]\r\n        \r\n    random_score = random.randint(30, 100)\r\n    for i in range(random_people):\r\n        input_list.append(random_score)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n\r\n    # Corner Case #3 (5%) -- scores exist that exactly match average\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n\r\n    random_people = random.randint(7,15)\r\n    input_list = [random_people]\r\n        \r\n    random_mean = random.randint(50, 70)\r\n    \r\n    for i in range(random_people % 3):\r\n        input_list.append(random_mean)\r\n        \r\n    for i in range(random_people // 3):\r\n        random_step = random.randint(3,20)\r\n        input_list.append(random_mean)\r\n        input_list.append(random_mean + random_step)\r\n        input_list.append(random_mean - random_step)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n    \r\n    #Corner Case # 4 makes sure students are rounding to one decimal place\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100\r\n    \r\n    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]\r\n    rounding_score = run_1_test(script_being_tested, input_list)\r\n    score += weight * rounding_score\r\n    \r\n    # General Case (80%) -- 4 runs @ 20% each\r\n    runs = 2\r\n    weight = (100.0 - cum_weight)\r\n    weight /= runs * 100.0\r\n\r\n    \r\n    for run in range(runs):\r\n        random_people = random.randint(2, 20)\r\n        input_list = [random_people]\r\n            \r\n        for i in range(random_people):\r\n            random_score = random.randint(30, 100)\r\n            input_list.append(random_score)\r\n        \r\n        score += weight * run_1_test(script_being_tested, input_list)\r\n    score = min([score,rounding_score])\r\n    return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 148, "problem_id": "a3_6_flighttest", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been asked to write a program that analyzes the results acquired\nfrom several flight tests executed last week. Write a program that gets from\nthe user the number flight tests preformed, and gets the result from each\nflight (which you may assume are whole numbers) from the user. Your program\nmust print out:\n\n  * The average result for the flight tests.\n  * The count of flight tests that scored below the average.\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**Input** | 3  \n350  \n410  \n256  \n  \n  \n| 5  \n178  \n98  \n200  \n200  \n154  \n**Output** | 338.7  \n1 | 166.0  \n2\n\n\n", "code": "\nnum_tests = int(input(\"Enter the number of flight tests: \"))\n\nscores = []\nfor _ in range(num_tests):\n    score = int(input(\"Enter the score for a flight test: \"))\n    scores.append(score)\n\naverage = sum(scores) / num_tests\n\nbelow_average = sum([1 for score in scores if score < average])\n\nprint(\"The average result for the flight tests is\", average)\nprint(\"The count of flight tests that scored below the average is\", below_average)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef script_name():\r\n    return \"a3_6_flighttest.py\"\r\n\r\n# There should be two outputs:\r\n#    The average followed by a count.\r\n# The test cases should be constructed so that:\r\n#    The average is >= 30\r\n#    The count   is <= 20\r\n\r\n# AUTOGRADER RUBRIC for scoring one test:\r\n\r\n# Number of outputs (10 pt):\r\n# 10 pt Output consists of exactly two values\r\n#  5 pt Output consists of one value or more than two values\r\n#  0 pt Output consists of either zero\r\n\r\n# Output of average (45 pt):\r\n# 45 pt Exactly correct and is first value in list\r\n# 30 pt Within 0.1 and is first value in list\r\n# 30 pt Exactly correct but is not first value in list\r\n# 15 pt Within 0.1 but is not first value in list\r\n\r\n# Output of count (45 pt):\r\n# 45 pt Exactly correct and is first value in list\r\n# 30 pt Within 1 and is first value in list\r\n# 30 pt Exactly correct but is not first value in list\r\n# 15 pt Within 1 but is not first value in list\r\n\r\ndef base_name(name_of_script):\r\n    return (name_of_script.split('.')[0]).split('_')[2]\r\n\r\ndef solution(input_list):\r\n\r\n    # Input is a count followed by that many values\r\n    # Create a list of just the values\r\n    items_list = input_list[1:]\r\n    \r\n    # Determine the average of the values\r\n    average = sum(items_list) / len(items_list)\r\n    \r\n    # Count the number of items that meet the criteria\r\n    # This depends on the specific variant of the problem\r\n    base_script = base_name(script_name())\r\n    count = 0\r\n    for score in items_list:\r\n        if base_script == \"pushups\" and score > average:\r\n            count += 1\r\n        if base_script == \"sami\" and score > average:\r\n            count += 1\r\n        if base_script == \"tests\" and score < average:\r\n            count += 1\r\n        if base_script == \"flighttest\" and score < average:\r\n            count += 1\r\n        \r\n    \r\n    # Output is average (rounded to 1 decimal place) and count \r\n    return [str(round(average,1)), str(count)]\r\n\r\ndef is_value(s):\r\n    try:\r\n        float(s)\r\n        return True\r\n    except ValueError:\r\n        return False\r\n    \r\n# Returns the position and distance of the closes user value from the solution value.\r\n# Returns found=False if list from user contains no numeric values\r\ndef matchup_numeric(value, from_user):\r\n    value = float(value)\r\n    found = False\r\n    position = -1\r\n    within = 1E10\r\n    for i in range(len(from_user)):\r\n        item = from_user[i]\r\n        if is_value(item):\r\n            found = True\r\n            user_value = float(item)\r\n            distance = abs(value - user_value)\r\n            if  distance < within:\r\n                within = distance\r\n                position = i \r\n                \r\n    return (found, position, within)\r\n\r\ndef decimal_places(float_string):\r\n    if is_value(float_string):\r\n        decimal_point_index = float_string.find('.')\r\n        if decimal_point_index == -1:\r\n            return 0\r\n        else:\r\n            return len(float_string) - (decimal_point_index + 1)\r\n    else:\r\n        return -1\r\n    \r\ndef grade_item(name, correct_position, places, tolerance, from_soln, from_user):\r\n    score = 0\r\n    \r\n    value_from_soln = from_soln[correct_position]\r\n    \r\n    (found, position, within) = matchup_numeric(value_from_soln, from_user)\r\n    if not found:\r\n        print(name, \"not found.  Expected: \", value_from_soln)\r\n        score += 0\r\n    else:\r\n        place_penalty = 0\r\n        if   (position == correct_position) and (within <= tolerance[0]):\r\n            print(name, \"appears correct.\")\r\n            score += 45 - place_penalty\r\n        elif (position == correct_position) and (within <= tolerance[1]):\r\n            print(name, \"is close.  Expected: \", value_from_soln)\r\n            score += 30 - place_penalty\r\n        elif (position != correct_position) and (within <= tolerance[0]):\r\n            print(name, \"appears correct, but in wrong position.\")\r\n            score += 30 - place_penalty\r\n        elif  (position != correct_position) and (within <= tolerance[1]):\r\n            print(name, \"is close, but in wrong position.  Expected: \", value_from_soln)\r\n            score += 15 - place_penalty\r\n        else:\r\n            print(name, \"is not close and probably in wrong position.  Expected: \", value_from_soln)\r\n            score += 0\r\n    return score            \r\n\r\ndef run_1_test(script_being_tested, input_list):\r\n\r\n    (output, error) = autograder.run_script(script_being_tested, input_list)\r\n    lines = output.strip().split('\\n')\r\n    expected_output = solution(input_list)\r\n    \r\n    score = 0\r\n\r\n    # Number of outputs\r\n    if len(lines) == 2:\r\n        print(\"Number of output lines is correct.\")\r\n        score += 10\r\n    elif len(lines) == 1:\r\n        print(\"Number of output lines is not quite correct.\")\r\n        score += 5\r\n    else:\r\n        print(\"Number of output lines is not correct.\")\r\n        score += 0\r\n\r\n    score += grade_item(\"Average\", 0, 1, [0.1, 10], expected_output, lines)\r\n    score += grade_item(\"Count\", 1, 0, [0, 1], expected_output, lines)\r\n\r\n    print('-----------------------------')\r\n\r\n    return score\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    script_being_tested = script_name()\r\n    score = 0\r\n    cum_weight = 0.0\r\n\r\n    # Corner Case #1 (5%) -- only a single score\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n    \r\n    random_people = 1\r\n    input_list = [random_people]\r\n        \r\n    for i in range(random_people):\r\n        random_score = random.randint(30, 100)\r\n        input_list.append(random_score)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n\r\n    # Corner Case #2 (5%) -- multiple all scores that are all the same\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n\r\n    random_people = random.randint(5, 10)\r\n    input_list = [random_people]\r\n        \r\n    random_score = random.randint(30, 100)\r\n    for i in range(random_people):\r\n        input_list.append(random_score)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n\r\n    # Corner Case #3 (5%) -- scores exist that exactly match average\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n\r\n    random_people = random.randint(7,15)\r\n    input_list = [random_people]\r\n        \r\n    random_mean = random.randint(50, 70)\r\n    \r\n    for i in range(random_people % 3):\r\n        input_list.append(random_mean)\r\n        \r\n    for i in range(random_people // 3):\r\n        random_step = random.randint(3,20)\r\n        input_list.append(random_mean)\r\n        input_list.append(random_mean + random_step)\r\n        input_list.append(random_mean - random_step)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n    \r\n    #Corner Case # 4 makes sure students are rounding to one decimal place\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100\r\n    \r\n    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]\r\n    rounding_score = run_1_test(script_being_tested, input_list)\r\n    score += weight * rounding_score\r\n    \r\n    # General Case (80%) -- 4 runs @ 20% each\r\n    runs = 2\r\n    weight = (100.0 - cum_weight)\r\n    weight /= runs * 100.0\r\n\r\n    \r\n    for run in range(runs):\r\n        random_people = random.randint(2, 20)\r\n        input_list = [random_people]\r\n            \r\n        for i in range(random_people):\r\n            random_score = random.randint(30, 100)\r\n            input_list.append(random_score)\r\n        \r\n        score += weight * run_1_test(script_being_tested, input_list)\r\n    score = min([score,rounding_score])\r\n    return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 149, "problem_id": "a3_5_star_map", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a table that describes a simple night sky. In\nthis code, a list (`simple_map`) is populated with characters representing the\nlocation of various astronomical entities (stars, planets, etc).\n\n\n\n    \n    \n    S = Star; St = Satellite; M = Moon; P = Planet; C = Comet; _ = No Major Feature\n\n\n\nWrite a program that gets two values from the user in the following order:\n\n1) a row, a 1 indicates the Top row and 8 the Bottom row\n\n2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column\n\n\n\nFinally, **Print** out the contents of the table at that particular cell.\n\n\n\n**HINT:**\n\n  * Your output should be one of the following letters: \"S\", \"St\", \"M\", \"P\", \"C\", or \"_\"\n\n\n# AUTOGRADER IMPORT REMOVED\n\n# --------------------------------------------------------------\n# Assessment #3, Problem 5\n# --------------------------------------------------------------\n#DO NOT TOUCH THIS LIST!\nstar_map = [['M', 'C', '_', '_', '_', '_', 'M', 'P'],\n              ['S', 'M', '_', '_', 'P', 'M', 'St', 'St'],\n              ['C', '_', '_', 'P', 'M', 'M', 'S', 'M'],\n              ['C', 'C', '_', 'C', '_', 'S', '_', 'P'],\n              ['M', 'St', '_', 'St', '_', '_', 'P', 'S'],\n              ['_', '_', '_', '_', '_', '_', '_', '_'],\n              ['_', 'M', '_', '_', 'M', '_', '_', 'S'],\n              ['_', '_', '_', '_', 'St', 'St', 'P', 'P']]\n\n#Your code goes here.", "code": "\nrow = int(input(\"Enter row: \"))\ncolumn = int(input(\"Enter column: \"))\n\nsky = star_map[row-1][column-1]\nprint(sky)\n", "testcase": "import random\nfrom cs110 import autograder\n\nsimple_map = [['M', 'C', '_', '_', '_', '_', 'M', 'P'],\n              ['S', 'M', '_', '_', 'P', 'M', 'St', 'St'],\n              ['C', '_', '_', 'P', 'M', 'M', 'S', 'M'],\n              ['C', 'C', '_', 'C', '_', 'S', '_', 'P'],\n              ['M', 'St', '_', 'St', '_', '_', 'P', 'S'],\n              ['_', '_', '_', '_', '_', '_', '_', '_'],\n              ['_', 'M', '_', '_', 'M', '_', '_', 'S'],\n              ['_', '_', '_', '_', 'St', 'St', 'P', 'P']]\n\n\ndef check_location(row, col):\n    print(\"-----------------------------\")\n    print(\"Checking row:{} col:{}\".format(row+1, col+1))\n    print(\"-----------------------------\")\n\n    output, error = autograder.run_script(\"a3_5_star_map.py\", [row+1, col+1])\n\n    if simple_map[row][col] == output.strip():\n        print(\"Correct\\n\")\n        return True\n    else:\n        print(\"Incorrect.  Expected:\", simple_map[row][col], \"\\n\")\n        return False\n\n\n# Runs the Python script and sees if it passes the test(s)\ndef test_passed():\n    score = 0\n\n    if (check_location(0,\n                       1)):\n        score += 20\n\n    if (check_location(1,\n                       random.randint(0, len(simple_map[0])-1))):\n        score += 20\n\n    if (check_location(7,\n                       random.randint(0, len(simple_map[0])-1))):\n        score += 20\n\n    if (check_location(random.randint(0, len(simple_map)-1),\n                       random.randint(0, len(simple_map[0])-1))):\n        score += 20\n\n    if (check_location(random.randint(0, len(simple_map)-1),\n                       random.randint(0, len(simple_map[0])-1))):\n        score += 20\n\n    return score\n\n\n# ---------------------------------------------------------------------\n# Optional\n# Runs your code in an IDE (for testing purposes)\n# ---------------------------------------------------------------------\nif __name__ == '__main__':\n    result = test_passed()\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 150, "problem_id": "a3_5_map", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a table that describes a simple landscape. In\nthis code, a list (`simple_map`) is populated with characters representing the\nlocation of various landmarks (Road, Water, Trees, Stones, Mud).\n\n\n\n    \n    \n    R = Road; W = Water; T = Trees; S = Stones; M = Mud; _ = Grass\n\n\n\nWrite a program that gets two values from the user in the following order:\n\n1) a row, a 1 indicates the Top row and 8 the Bottom row\n\n2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column\n\n\n\nFinally,  **Print  **out the contents of the table at that particular cell.\n\n\n\n**HINT:**\n\n  * Your output should be one of the following letters: \"R\", \"W\", \"T\", \"S\", \"M\", or \"_\"\n\n\n# AUTOGRADER IMPORT REMOVED\n\n# --------------------------------------------------------------\n# Assessment #3, Problem 5\n# --------------------------------------------------------------\n#DO NOT TOUCH THIS LIST!\nsimple_map = [['_', 'T', '_', '_', '_', 'R', '_', '_'],\n                    ['_', '_', 'T', 'S', 'B', 'R', '_', '_'],\n                    ['W', '_', '_', '_', '_', '_', 'R', '_'],\n                    ['W', 'W', 'S', '_', '_', 'B', '_', '_'],\n                    ['W', '_', '_', 'S', '_', '_', 'B', 'R'],\n                    ['_', '_', '_', '_', '_', 'T', '_', '_'],\n                    ['_', '_', '_', '_', '_', '_', 'T', '_'],\n                    ['R', 'R', 'R', 'R', 'R', '_', '_', '_']]\n\n#Your code goes here.", "code": "\n# Get row and column from user\nrow = int(input(\"Enter the row (1-8): \"))\ncolumn = int(input(\"Enter the column (1-8): \"))\n\n# Use row and column to access the cell in the simple_map list\ncell = simple_map[row-1][column-1]\n\n# Print the contents of the cell\nprint(cell)\n```\n", "testcase": "import random\nfrom cs110 import autograder\n\n## EDITED 15 MAR 2022 by Capt Ben McGraw\n\nsimple_map = [['_', 'T', '_', '_', '_', 'R', '_', '_'],\n              ['_', '_', 'T', 'S', 'B', 'R', '_', '_'],\n              ['W', '_', '_', '_', '_', '_', 'R', '_'],\n              ['W', 'W', 'S', '_', '_', 'B', '_', '_'],\n              ['W', '_', '_', 'S', '_', '_', 'B', 'R'],\n              ['_', '_', '_', '_', '_', 'T', '_', '_'],\n              ['_', '_', '_', '_', '_', '_', 'T', '_'],\n              ['R', 'R', 'R', 'R', 'R', '_', '_', '_']]\n\n\ndef check_location(row, col):\n    print(\"-----------------------------\")\n    print(\"Checking row:{} col:{}\".format(row, col))\n    print(\"-----------------------------\")\n\n    output, error = autograder.run_script(\"a3_5_map.py\", [row, col])\n\n    if simple_map[row][col] == output.strip():\n        print(\"Correct\\n\")\n        return True\n    else:\n        print(\"Incorrect.  Expected:\", simple_map[row][col], \"\\n\")\n        return False\n\n\n# Runs the Python script and sees if it passes the test(s)\ndef test_passed():\n    score = 0\n\n    if (check_location(0,\n                       1)):\n        score += 20\n\n    if (check_location(1,\n                       random.randint(0, len(simple_map[0])-1))):\n        score += 20\n\n    if (check_location(7,\n                       random.randint(0, len(simple_map[0])-1))):\n        score += 20\n\n    if (check_location(random.randint(0, len(simple_map)-1),\n                       random.randint(0, len(simple_map[0])-1))):\n        score += 20\n\n    if (check_location(random.randint(0, len(simple_map)-1),\n                       random.randint(0, len(simple_map[0])-1))):\n        score += 20\n\n    return score\n# ---------------------------------------------------------------------\n# Optional\n# Runs your code in an IDE (for testing purposes)\n# ---------------------------------------------------------------------\nif __name__ == '__main__':\n    result = test_passed()\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 151, "problem_id": "a3_5_chess", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a table that describes a chess board. In this\ncode, a list (`chess_board`) is populated with characters representing the\nlocation of each of the pieces(Rook, Knight, Bishop,King,Queen,Pawn).\n\n\n\n    \n    \n    R = Rook; N = Knight; B = Bishop; K = King; Q = Queen; P = pawn; _ = Empty\n\n\n\nWrite a program that gets two values from the user in the following order:\n\n1) a row, a 1 indicates the Top row and 8 the Bottom row\n\n2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column\n\n\n\nFinally,  **Print  **out the contents of the table at that particular cell.\n\n\n\n**HINT:**\n\n  * Your output should be one of the following letters: \"R\", \"N\", \"B\", \"K\", \"Q\", \"P\", or \"_\"\n\n\n# AUTOGRADER IMPORT REMOVED\n\n# --------------------------------------------------------------\n# Assessment #3, Problem 5\n# --------------------------------------------------------------\n#DO NOT TOUCH THIS LIST!\nchess_board =      [['R', 'N', '_', 'K', '_', 'B', 'N', 'R'],\n                    ['p', 'p', 'p', '_', 'p', 'p', 'p', 'p'],\n                    ['_', '_', 'Q', '_', '_', '_', '_', '_'],\n                    ['_', '_', '_', 'p', '_', 'B', '_', '_'],\n                    ['_', '_', '_', 'p', '_', '_', '_', '_'],\n                    ['_', '_', '_', '_', 'p', '_', '_', '_'],\n                    ['p', 'p', 'p', '_', '_', 'p', 'p', 'p'],\n                    ['R', 'N', 'B', 'K', 'Q', 'B', 'N', 'R']]\n\n#Your code goes here.", "code": "\nrow = int(input(\"Enter the row number (1-8): \"))\ncolumn = int(input(\"Enter the column number (1-8): \"))\n\npiece = chess_board[row-1][column-1]\nprint(piece)\n", "testcase": "import random\nfrom cs110 import autograder\n\n## EDITED 15 MAR 2022 by Capt Ben McGraw\n\nchess_board = [['R', 'N', '_', 'K', '_', 'B', 'N', 'R'],\n               ['p', 'p', 'p', '_', 'p', 'p', 'p', 'p'],\n               ['_', '_', 'Q', '_', '_', '_', '_', '_'],\n               ['_', '_', '_', 'p', '_', 'B', '_', '_'],\n               ['_', '_', '_', 'p', '_', '_', '_', '_'],\n               ['_', '_', '_', '_', 'p', '_', '_', '_'],\n               ['p', 'p', 'p', '_', '_', 'p', 'p', 'p'],\n               ['R', 'N', 'B', 'K', 'Q', 'B', 'N', 'R']]\n\n\ndef check_location(row, col):\n    print(\"-----------------------------\")\n    print(\"Checking row:{} col:{}\".format(row, col))\n    print(\"-----------------------------\")\n\n    output, error = autograder.run_script(\"a3_5_chess.py\", [row, col])\n\n    if chess_board[row][col] == output.strip():\n        print(\"Correct\\n\")\n        return True\n    else:\n        print(\"Incorrect.  Expected:\", chess_board[row][col], \"\\n\")\n        return False\n\n\n# Runs the Python script and sees if it passes the test(s)\ndef test_passed():\n    score = 0\n\n    if (check_location(0,\n                       2)):\n        score += 20\n\n    if (check_location(1,\n                       random.randint(0, len(chess_board[0])-1))):\n        score += 20\n\n    if (check_location(7,\n                       random.randint(0, len(chess_board[0])-1))):\n        score += 20\n\n    if (check_location(random.randint(0, len(chess_board)-1),\n                       random.randint(0, len(chess_board[0])-1))):\n        score += 20\n\n    if (check_location(random.randint(0, len(chess_board)-1),\n                       random.randint(0, len(chess_board[0])-1))):\n        score += 20\n\n    return score\n\n# ---------------------------------------------------------------------\n# Optional\n# Runs your code in an IDE (for testing purposes)\n# ---------------------------------------------------------------------\nif __name__ == '__main__':\n    result = test_passed()\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 152, "problem_id": "a3_5_carnival", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a table that describes a simple carnival ring\ntoss. In this code, a list (`simple_map`) is populated with characters\nrepresenting the colors of the bottles.\n\n\n\n    \n    \n    G = Green; B = Blue; P = Purple; R = Red; O = Orange; _ = Clear\n\n\n\nWrite a program that gets two values from the user in the following order:\n\n1) a row, a 1 indicates the Top row and 8 the Bottom row\n\n2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column\n\n\n\nFinally,  **Print  **out the contents of the table at that particular cell.\n\n\n\n**HINT:**\n\n  * Your output should be one of the following letters: \"G\", \"B\", \"P\", \"R\", \"O\", or \"_\"\n\n\n# AUTOGRADER IMPORT REMOVED\n\n# --------------------------------------------------------------\n# Assessment #3, Problem 5\n# --------------------------------------------------------------\n#DO NOT TOUCH THIS LIST!\nsimple_map = [['O', '_', '_', 'P', '_', 'R', '_', 'G'],\n              ['R', 'O', '_', '_', '_', 'P', '_', '_'],\n              ['_', '_', 'O', '_', '_', 'O', 'P', '_'],\n              ['R', '_', 'G', '_', '_', '_', '_', 'P'],\n              ['B', '_', '_', '_', '_', '_', '_', 'P'],\n              ['G', 'R', 'P', 'O', 'O', '_', '_', 'G'],\n              ['P', '_', '_', '_', '_', 'G', 'B', '_'],\n              ['B', 'R', 'G', 'B', '_', 'G', 'B', 'G']]\n\n#Your code goes here.", "code": "\nrow = int(input(\"Enter the row (1-8): \"))\ncolumn = int(input(\"Enter the column (1-8): \"))\n\ncontents = simple_map[row-1][column-1]\nprint(contents)\n```\n", "testcase": "import random\nfrom cs110 import autograder\n\n## EDITED 15 MAR 2022 by Capt Ben McGraw\n\nsimple_map = [['O', '_', '_', 'P', '_', 'R', '_', 'G'],\n              ['R', 'O', '_', '_', '_', 'P', '_', '_'],\n              ['_', '_', 'O', '_', '_', 'O', 'P', '_'],\n              ['R', '_', 'G', '_', '_', '_', '_', 'P'],\n              ['B', '_', '_', '_', '_', '_', '_', 'P'],\n              ['G', 'R', 'P', 'O', 'O', '_', '_', 'G'],\n              ['P', '_', '_', '_', '_', 'G', 'B', '_'],\n              ['B', 'R', 'G', 'B', '_', 'G', 'B', 'G']]\n\n\ndef check_location(row, col):\n    print(\"-----------------------------\")\n    print(\"Checking row:{} col:{}\".format(row, col))\n    print(\"-----------------------------\")\n\n    output, error = autograder.run_script(\"a3_5_carnival.py\", [row, col])\n\n    if simple_map[row][col] == output.strip():\n        print(\"Correct\\n\")\n        return True\n    else:\n        print(\"Incorrect.  Expected:\", simple_map[row][col], \"\\n\")\n        return False\n\n\n# Runs the Python script and sees if it passes the test(s)\ndef test_passed():\n    score = 0\n\n    if (check_location(0,\n                       3)):\n        score += 20\n\n    if (check_location(1,\n                       random.randint(0, len(simple_map[0])-1))):\n        score += 20\n\n    if (check_location(7,\n                       random.randint(0, len(simple_map[0])-1))):\n        score += 20\n\n    if (check_location(random.randint(0, len(simple_map)-1),\n                       random.randint(0, len(simple_map[0])-1))):\n        score += 20\n\n    if (check_location(random.randint(0, len(simple_map)-1),\n                       random.randint(0, len(simple_map[0])-1))):\n        score += 20\n\n    return score\n\n# ---------------------------------------------------------------------\n# Optional\n# Runs your code in an IDE (for testing purposes)\n# ---------------------------------------------------------------------\nif __name__ == '__main__':\n    result = test_passed()\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 153, "problem_id": "a3_5_battleship", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a table that describes the board game,\nBattleship. In this code, a list (`battleship_board`) is populated with\ncharacters representing the location of each of the game's ship types\n(Carrier, Battleship, Submarine, Cruiser, and Destroyer).\n\n\n\n    \n    \n    C = Carrier; B = Battleship; S = Submarine; R = Cruiser; D = Destroyer; _ = Blank\n\n\n\nWrite a program that gets two values from the user in the following order:\n\n1) a row, a 1 indicates the Top row and 8 the Bottom row\n\n2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column\n\n\n\nFinally,  **Print  **out the contents of the table at that particular cell.\n\n\n\n**HINT:**\n\n  * Your output should be one of the following letters: \"C\", \"B\", \"S\", \"R\", \"D\", or \"_\"\n\n\n# AUTOGRADER IMPORT REMOVED\n\n# --------------------------------------------------------------\n# Assessment #3, Problem 5\n# --------------------------------------------------------------\n#DO NOT TOUCH THIS LIST!\nbattleship_board = [['_', '_', 'C', '_', '_', '_', '_', '_'],\n                    ['_', '_', 'C', 'S', 'S', 'S', '_', '_'],\n                    ['D', 'D', 'C', '_', '_', '_', '_', '_'],\n                    ['_', '_', 'C', '_', '_', '_', '_', '_'],\n                    ['_', '_', '_', '_', '_', 'R', 'R', 'R'],\n                    ['_', '_', '_', '_', '_', '_', '_', '_'],\n                    ['_', '_', '_', '_', '_', '_', '_', '_'],\n                    ['_', 'B', 'B', 'B', 'B', '_', '_', '_']]\n\n#Your code goes here.", "code": "\nrow = int(input('Enter row number (1-8): '))\ncol = int(input('Enter column number (1-8): '))\n\ncell_contents = battleship_board[row-1][col-1]\nprint(cell_contents)\n", "testcase": "import random\nfrom cs110 import autograder\n\n## EDITED 15 MAR 2022 by Capt Ben McGraw\n\nbattleship_board = [['_', '_', 'C', '_', '_', '_', '_', '_'],\n                    ['_', '_', 'C', 'S', 'S', 'S', '_', '_'],\n                    ['D', 'D', 'C', '_', '_', '_', '_', '_'],\n                    ['_', '_', 'C', '_', '_', '_', '_', '_'],\n                    ['_', '_', '_', '_', '_', 'R', 'R', 'R'],\n                    ['_', '_', '_', '_', '_', '_', '_', '_'],\n                    ['_', '_', '_', '_', '_', '_', '_', '_'],\n                    ['_', 'B', 'B', 'B', 'B', '_', '_', '_']]\n\n\ndef check_location(row, col):\n    print(\"-----------------------------\")\n    print(\"Checking row:{} col:{}\".format(row, col))\n    print(\"-----------------------------\")\n\n    output, error = autograder.run_script(\"a3_5_battleship.py\", [row, col])\n\n    if battleship_board[row][col] == output.strip():\n        print(\"Correct\\n\")\n        return True\n    else:\n        print(\"Incorrect.  Expected:\", battleship_board[row][col], \"\\n\")\n        return False\n\n# Runs the Python script and sees if it passes the test(s)\ndef test_passed():\n    score = 0\n    if check_location(0, 2):\n        score += 20\n    if check_location(1, random.randint(0, len(battleship_board[0])-1)):\n        score += 20\n    if check_location(7, random.randint(0, len(battleship_board[0])-1)):\n        score += 20\n    if check_location(random.randint(0, len(battleship_board)-1),\n                      random.randint(0, len(battleship_board[0])-1)):\n        score += 20\n    if check_location(random.randint(0, len(battleship_board)-1),\n                      random.randint(0, len(battleship_board[0])-1)):\n        score += 20\n    return score\n\n\n# ---------------------------------------------------------------------\n# Optional\n# Runs your code in an IDE (for testing purposes)\n# ---------------------------------------------------------------------\nif __name__ == '__main__':\n    result = test_passed()\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 154, "problem_id": "a3_4_weights", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a list called list_of_weights. Write a program\nthat prints out the range ( _i.e.,  _the difference between the max and min\nweight)\n\n\n\n**EXAMPLE:  \n** If, for example, the list contained the values: 103, 110, 115\n\nYour program should print:\n\n    \n    \n    12\n\n\n\n\n", "code": "\nlist_of_weights = [103, 110, 115]\n\nrange_of_weights = max(list_of_weights) - min(list_of_weights)\nprint(range_of_weights)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nSTUDENT_FILE = \"a3_4_weights.py\"\r\nANSWER = 5416\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    output, error = autograder.run_script(STUDENT_FILE, [])\r\n    lines = output.strip().split('\\n')\r\n    score = 0\r\n    \r\n    if len(lines) >= 1:           \r\n        if autograder.equals(lines[0], ANSWER):\r\n            print(\"CORRECT: Range Looks Good!\")\r\n            score += 100\r\n        else:\r\n            print(\"Incorrect range.  Remember that the range is the difference between the max and the min\")\r\n            \r\n    else:\r\n        print(\"More lines expected in your answer.  Make sure you are printing out the range.\")\r\n    \r\n    return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 155, "problem_id": "a3_4_run", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a list called list_of_run_times. Write a\nprogram that prints out the range ( _i.e.,  _the difference between the max\nand min run time)\n\n\n\n**EXAMPLE:  \n** If, for example, the list contained the values: 3, 10, 15\n\nYour program should print:\n\n    \n    \n    12\n\n\n\n\n", "code": "\nlist_of_run_times = [3, 10, 15]\nprint(max(list_of_run_times) - min(list_of_run_times))\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nSTUDENT_FILE = \"a3_4_run.py\"\r\nANSWER = 4491\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    output, error = autograder.run_script(STUDENT_FILE, [])\r\n    lines = output.strip().split('\\n')\r\n    score = 0\r\n    \r\n    if len(lines) >= 1:           \r\n        if autograder.equals(lines[0], ANSWER):\r\n            print(\"CORRECT: Range Looks Good!\")\r\n            score += 100\r\n        else:\r\n            print(\"Incorrect range.  Remember that the range is the difference between the max and the min\")\r\n            \r\n    else:\r\n        print(\"More lines expected in your answer.  Make sure you are printing out the range.\")\r\n    \r\n    return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 156, "problem_id": "a3_4_ptscores", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a list called list_of_pt_scores. Write a\nprogram that prints out the range ( _i.e.,  _the difference between the max\nand min pt scores)\n\n\n\n**EXAMPLE:  \n** If, for example, the list contained the values: 3, 10, 15\n\nYour program should print:\n\n    \n    \n    12\n\n\n\n\n", "code": "\nlist_of_pt_scores = [3, 10, 15]\nrange_of_scores = max(list_of_pt_scores) - min(list_of_pt_scores)\nprint(range_of_scores)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nSTUDENT_FILE = \"a3_4_ptscores.py\"\r\nANSWER = 6068\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    output, error = autograder.run_script(STUDENT_FILE, [])\r\n    lines = output.strip().split('\\n')\r\n    score = 0\r\n    \r\n    if len(lines) >= 1:           \r\n        if autograder.equals(lines[0], ANSWER):\r\n            print(\"CORRECT: Range Looks Good!\")\r\n            score += 100\r\n        else:\r\n            print(\"Incorrect range.  Remember that the range is the difference between the max and the min\")\r\n            \r\n    else:\r\n        print(\"More lines expected in your answer.  Make sure you are printing out the range.\")\r\n    \r\n    return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 157, "problem_id": "a3_4_ages", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a list called list_of_ages. Write a program\nthat prints out the range ( _i.e.,  _the difference between the max and min\nages)\n\n\n\n**EXAMPLE:  \n** If, for example, the list contained the values: 50, 64, 72\n\nYour program should print:\n\n    \n    \n    22\n\n\n\n\n", "code": "\nlist_of_ages = [50, 64, 72]\n\nmin_age = min(list_of_ages)\nmax_age = max(list_of_ages)\nrange_ages = max_age - min_age\n\nprint(range_ages)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nSTUDENT_FILE = \"a3_4_ages.py\"\r\nANSWER = 9840\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    output, error = autograder.run_script(STUDENT_FILE, [])\r\n    lines = output.strip().split('\\n')\r\n    score = 0\r\n    \r\n    if len(lines) >= 1:           \r\n        if autograder.equals(lines[0], ANSWER):\r\n            print(\"CORRECT: Range Looks Good!\")\r\n            score += 100\r\n        else:\r\n            print(\"Incorrect range.  Remember that the range is the difference between the max and the min\")\r\n            \r\n    else:\r\n        print(\"More lines expected in your answer.  Make sure you are printing out the range.\")\r\n    \r\n    return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 158, "problem_id": "a3_3_ships", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a list called `list_of_ship_classes`. Write a\nprogram that prints out each of the items in this list (one item per line).\n\n\n\n**EXAMPLE:  \n** If, for example, the list contained the items: \"A\", \"B\", \"C\"\n\nYour program should print:\n\n    \n    \n    A  \n    B  \n    C\n\n\n\n**NOTE:**\n\n  * You must use a loop to complete this task. \n\n\n\n\n# AUTOGRADER IMPORT REMOVED\n\n# --------------------------------------------------------------\n# Assessment #3, Problem 3\n# --------------------------------------------------------------\n\n# This list is being provided to you.  DO NOT TOUCH!\nlist_of_ship_classes = ['Ford', 'Ticonderoga', 'Arleigh Burke', 'Virginia', 'Zumwalt', 'REDACTED_NAME', 'Legend']\n\n#Your code goes here.", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nlist_of_ship_classes = ['Ford', 'Ticonderoga', 'Arleigh Burke', 'Virginia', 'Zumwalt', 'Hamilton', 'Legend']\r\n\r\ndef solution():\r\n    result = []\r\n    \r\n    for item in list_of_ship_classes:\r\n        result.append(item)\r\n    \r\n    return result\r\n             \r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    output, error = autograder.run_script(\"a3_3_ships.py\", [])\r\n    expected_output = solution()\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    \r\n    return round(100 / len(expected_output) * num_matches, 1)\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 159, "problem_id": "a3_3_pizza", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a list called `list_of_pizza_toppings`. Write a\nprogram that prints out each of the items in this list (one item per line).\n\n\n\n**EXAMPLE:  \n** If, for example, the list contained the items: \"A\", \"B\", \"C\"\n\nYour program should print:\n\n    \n    \n    A  \n    B  \n    C\n\n\n\n**NOTE:**\n\n  * You must use a loop to complete this task. \n\n\n# AUTOGRADER IMPORT REMOVED\n\n# --------------------------------------------------------------\n# Assessment #3, Problem 3\n# --------------------------------------------------------------\n\n# This list is being provided to you.  DO NOT TOUCH!\nlist_of_pizza_toppings = ['Pepporoni', 'Sausage', 'Onion', 'Mushroom', 'Peppers', 'Chicken', 'Hamburger']\n\n#Your code goes here.", "code": "\nfor topping in list_of_pizza_toppings:\n    print(topping)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nlist_of_pizza_toppings = ['Pepporoni', 'Sausage', 'Onion', 'Mushroom', 'Peppers', 'Chicken', 'Hamburger']\r\n\r\ndef solution():\r\n    result = []\r\n    \r\n    for item in list_of_pizza_toppings:\r\n        result.append(item)\r\n    \r\n    return result\r\n             \r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    output, error = autograder.run_script(\"a3_3_pizza.py\", [])\r\n    expected_output = solution()\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    \r\n    return round(100 / len(expected_output) * num_matches, 1)\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 160, "problem_id": "a3_3_aircraft", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a list called `list_of_aircraft_classes`. Write\na program that prints out each of the items in this list (one item per line).\n\n\n\n**EXAMPLE:  \n** If, for example, the list contained the items: \"A\", \"B\", \"C\"\n\nYour program should print:\n\n    \n    \n    A  \n    B  \n    C\n\n\n\n**NOTE:**\n\n  * You must use a loop to complete this task. \n\n\n# AUTOGRADER IMPORT REMOVED\n\n# --------------------------------------------------------------\n# Assessment #3, Problem 3\n# --------------------------------------------------------------\n\n# This list is being provided to you.  DO NOT TOUCH!\nlist_of_aircraft_classes = ['Attack','Cargo','Drone', 'Fighter', 'Unmanned','Trainer','Tanker']\n\n#Your code goes here.", "code": "\nfor aircraft_class in list_of_aircraft_classes:\n    print(aircraft_class)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nlist_of_aircraft_classes = ['Attack','Cargo','Drone', 'Fighter', 'Unmanned','Trainer','Tanker']\r\n\r\ndef solution():\r\n    result = []\r\n    \r\n    for item in list_of_aircraft_classes:\r\n        result.append(item)\r\n    \r\n    return result\r\n             \r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    output, error = autograder.run_script(\"a3_3_aircraft.py\", [])\r\n    expected_output = solution()\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    \r\n    return round(100 / len(expected_output) * num_matches, 1)\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 161, "problem_id": "a3_2_jets", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a list called `list_of_aircraft`. Write a program\nthat gets two aircraft designator names from the user. Then append the\naircraft (in the same order they were provided) to the list.\n\n\n\n**NOTE:**\n\n  * Do not touch the code we provide you. Otherwise, the test cases will not work.\n\n\n\n\n", "code": "", "testcase": "from cs110 import autograder\nimport random, math\n\nlist_of_jets = ['F-16', 'F-15', 'F-22', 'F-35', 'B-1', 'B-2']\n\n\n\n# Runs the Python script and sees if it passes the test(s)\ndef test_passed():\n\n    index_list = [1, random.randint(2, len(list_of_jets)-2), len(list_of_jets)]\n    score = 0\n\n    new_jets = [\"B-52\",\"KC-10\",\"KC-135\",\"A-10\",\"AC-130\",\"C-130\",\"CV-22\"]\n\n    random_ac1 = new_jets[random.randint(0, len(new_jets)-1)]\n    new_jets.remove(random_ac1)\n    random_ac2 = new_jets[random.randint(0, len(new_jets)-1)]\n\n    list_of_jets.append(random_ac1)\n    list_of_jets.append(random_ac2)\n\n    output, error = autograder.run_script(\"a3_2_jets.py\", [random_ac1, random_ac2])\n    output = output.strip().replace(\"[\", \"\")\n    output = output.strip().replace(\"]\", \"\")\n    output = output.strip().replace(\"'\", \"\")\n    lines = output.split(',')\n\n    if lines[len(lines)-2].strip() == list_of_jets[len(list_of_jets)-2]:\n        print(\"Second to Last Element in List is Correct!\")\n        score += 50\n    else:\n        print(\"Incorrect Second to Last Element in List.  Expected:\", random_ac1, \"instead of\", lines[len(lines)-2].strip())\n\n    if lines[len(lines)-1].strip() == list_of_jets[len(list_of_jets)-1]:\n        print(\"Last Element in List is Correct!\")\n        score += 50\n    else:\n        print(\"Incorrect Last Element in List.  Expected:\", random_ac2, \"instead of\", lines[len(lines)-1].strip())\n\n    return score\n\n# ---------------------------------------------------------------------\n# Optional\n# Runs your code in an IDE (for testing purposes)\n# ---------------------------------------------------------------------\nif __name__ == '__main__':\n    result = test_passed()\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 162, "problem_id": "a3_2_grammys", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a list called `grammy_list`. Write a program that\ngets two new Grammy awards categories from the user. Then append the\ncategories (in the same order they were provided) to the list.\n\n\n\n**NOTE:**\n\n  * Do not touch the code we provide you. Otherwise, the test cases will not work.\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ngrammy_list = ['Pop', 'Global', 'Rock', 'Rap', 'Jazz', 'R&B', 'Comedy']\r\n\r\n             \r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    index_list = [1, random.randint(2, len(grammy_list)-2), len(grammy_list)]\r\n    score = 0\r\n\r\n    new_categories = [\"Dance\", \"Country\", \"Classical\", \"Gospel\", \"Alternative\", \"Soundtrack\", \"Instrumental\", \"Latin\", \"Reggae\"]\r\n    \r\n    random_ac1 = new_categories[random.randint(0, len(new_categories)-1)]\r\n    new_categories.remove(random_ac1)\r\n    random_ac2 = new_categories[random.randint(0, len(new_categories)-1)]\r\n    \r\n    grammy_list.append(random_ac1)\r\n    grammy_list.append(random_ac2)\r\n\r\n    output, error = autograder.run_script(\"a3_2_grammys.py\", [random_ac1, random_ac2])\r\n    output = output.strip().replace(\"[\", \"\")\r\n    output = output.strip().replace(\"]\", \"\")\r\n    output = output.strip().replace(\"'\", \"\")\r\n    lines = output.split(',')\r\n    \r\n    if lines[len(lines)-2].strip() == grammy_list[len(grammy_list)-2]:\r\n        print(\"Second to Last Element in List is Correct!\")\r\n        score += 50\r\n    else:\r\n        print(\"Incorrect Second to Last Element in List.  Expected:\", random_ac1, \"instead of\", lines[len(lines)-2].strip())\r\n    \r\n    if lines[len(lines)-1].strip() == grammy_list[len(grammy_list)-1]:\r\n        print(\"Last Element in List is Correct!\")\r\n        score += 50\r\n    else:\r\n        print(\"Incorrect Last Element in List.  Expected:\", random_ac2, \"instead of\", lines[len(lines)-1].strip())\r\n    \r\n    return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 163, "problem_id": "a3_2_departments", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a list called `department_list`. Write a program\nthat gets two new departments from the user. Then append the departments (in\nthe same order they were provided) to the list.\n\n\n\n**NOTE:**\n\n  * Do not touch the code we provide you. Otherwise, the test cases will not work.\n\n\n", "code": "\ndepartment_list = ['Marketing', 'HR', 'Finance', 'Operations']\n\ndepartment1 = input(\"Enter the first department: \")\ndepartment2 = input(\"Enter the second department: \")\n\ndepartment_list.append(department1)\ndepartment_list.append(department2)\n\nprint(department_list)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndepartment_list = ['Science','Engineering','Humanities','Social Science']\r\n\r\n             \r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    index_list = [1, random.randint(2, len(department_list)-2), len(department_list)]\r\n    score = 0\r\n\r\n    new_departments = ['Education', 'E-Sports', '8-Bit Gaming', 'Midi Music', 'General Studies', \"Deep Space\", \"Department of Motor Vehicles\"]\r\n    \r\n    random_ac1 = new_departments[random.randint(0, len(new_departments)-1)]\r\n    new_departments.remove(random_ac1)\r\n    random_ac2 = new_departments[random.randint(0, len(new_departments)-1)]\r\n    \r\n    department_list.append(random_ac1)\r\n    department_list.append(random_ac2)\r\n\r\n    output, error = autograder.run_script(\"a3_2_departments.py\", [random_ac1, random_ac2])\r\n    output = output.strip().replace(\"[\", \"\")\r\n    output = output.strip().replace(\"]\", \"\")\r\n    output = output.strip().replace(\"'\", \"\")\r\n    lines = output.split(',')\r\n    \r\n    if lines[len(lines)-2].strip() == department_list[len(department_list)-2]:\r\n        print(\"Second to Last Element in List is Correct!\")\r\n        score += 50\r\n    else:\r\n        print(\"Incorrect Second to Last Element in List.  Expected:\", random_ac1, \"instead of\", lines[len(lines)-2].strip())\r\n    \r\n    if lines[len(lines)-1].strip() == department_list[len(department_list)-1]:\r\n        print(\"Last Element in List is Correct!\")\r\n        score += 50\r\n    else:\r\n        print(\"Incorrect Last Element in List.  Expected:\", random_ac2, \"instead of\", lines[len(lines)-1].strip())\r\n    \r\n    return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 164, "problem_id": "a3_2_cities", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a list called `list_of_cities`. Write a program\nthat gets two new cities from the user. Then append the cities (in the same\norder they were provided) to the list.\n\n\n\n**NOTE:**\n\n  * Do not touch the code we provide you. Otherwise, the test cases will not work.\n\n\n", "code": "\nlist_of_cities = ['New York', 'Los Angeles', 'Chicago']\n\ncity1 = input(\"Enter the first city: \")\ncity2 = input(\"Enter the second city: \")\n\nlist_of_cities.append(city1)\nlist_of_cities.append(city2)\n\nprint(list_of_cities)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nlist_of_cities = ['Tokyo', 'Delhi', 'Shanghai', 'Cairo', 'Mumbai', 'Bejing', 'Dhaka']\r\n\r\n             \r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    index_list = [1, random.randint(2, len(list_of_cities)-2), len(list_of_cities)]\r\n    score = 0\r\n\r\n    new_cities = [\"Osaka\", \"Karachi\", \"Istanbul\", \"Kolkata\", \"Manila\", \"Lagos\", \"Moscow\", \"Lahore\", \"Paris\"]\r\n    \r\n    random_ac1 = new_cities[random.randint(0, len(new_cities)-1)]\r\n    new_cities.remove(random_ac1)\r\n    random_ac2 = new_cities[random.randint(0, len(new_cities)-1)]\r\n    \r\n    list_of_cities.append(random_ac1)\r\n    list_of_cities.append(random_ac2)\r\n\r\n    output, error = autograder.run_script(\"a3_2_cities.py\", [random_ac1, random_ac2])\r\n    output = output.strip().replace(\"[\", \"\")\r\n    output = output.strip().replace(\"]\", \"\")\r\n    output = output.strip().replace(\"'\", \"\")\r\n    lines = output.split(',')\r\n    \r\n    if lines[len(lines)-2].strip() == list_of_cities[len(list_of_cities)-2]:\r\n        print(\"Second to Last Element in List is Correct!\")\r\n        score += 50\r\n    else:\r\n        print(\"Incorrect Second to Last Element in List.  Expected:\", random_ac1, \"instead of\", lines[len(lines)-2].strip())\r\n    \r\n    if lines[len(lines)-1].strip() == list_of_cities[len(list_of_cities)-1]:\r\n        print(\"Last Element in List is Correct!\")\r\n        score += 50\r\n    else:\r\n        print(\"Incorrect Last Element in List.  Expected:\", random_ac2, \"instead of\", lines[len(lines)-1].strip())\r\n    \r\n    return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 165, "problem_id": "a3_2_cars", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a list called `list_of_cars`. Write a program that\ngets two new cars from the user. Then append the cars (in the same order they\nwere provided) to the list.\n\n\n\n**NOTE:**\n\n  * Do not touch the code we provide you. Otherwise, the test cases will not work.\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nlist_of_cars = ['Viper', 'Highlander', 'Audi A8', 'Tundra', 'Porsche', 'Mazada', 'Fiesta']\r\n\r\n             \r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    index_list = [1, random.randint(2, len(list_of_cars)-2), len(list_of_cars)]\r\n    score = 0\r\n\r\n    new_cars = [\"Ford\", \"Maserati\", \"BMW\", \"Cheetah\", \"Scion\", \"Lambo\", \"Pilot\", \"Civic\", \"Corolla\"]\r\n    \r\n    random_ac1 = new_cars[random.randint(0, len(new_cars)-1)]\r\n    new_cars.remove(random_ac1)\r\n    random_ac2 = new_cars[random.randint(0, len(new_cars)-1)]\r\n    \r\n    list_of_cars.append(random_ac1)\r\n    list_of_cars.append(random_ac2)\r\n\r\n    output, error = autograder.run_script(\"a3_2_cars.py\", [random_ac1, random_ac2])\r\n    output = output.strip().replace(\"[\", \"\")\r\n    output = output.strip().replace(\"]\", \"\")\r\n    output = output.strip().replace(\"'\", \"\")\r\n    lines = output.split(',')\r\n    \r\n    if lines[len(lines)-2].strip() == list_of_cars[len(list_of_cars)-2]:\r\n        print(\"Second to Last Element in List is Correct!\")\r\n        score += 50\r\n    else:\r\n        print(\"Incorrect Second to Last Element in List.  Expected:\", random_ac1, \"instead of\", lines[len(lines)-2].strip())\r\n    \r\n    if lines[len(lines)-1].strip() == list_of_cars[len(list_of_cars)-1]:\r\n        print(\"Last Element in List is Correct!\")\r\n        score += 50\r\n    else:\r\n        print(\"Incorrect Last Element in List.  Expected:\", random_ac2, \"instead of\", lines[len(lines)-1].strip())\r\n    \r\n    return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 166, "problem_id": "a3_1_medals", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a list called `list_of_medals` that contains the\ncurrent Air Force and Space Force approved decorations. Write a program that\nprints a single, specified decoration from the list. Your program shall take a\nnumber via user input used to identify which decoration to print. For example,\nif the user types a 3, you should print out the third item.\n\n\n\n**NOTE:**\n\n  * You may assume that the user will always enter a value that \"should\" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)\n\n\n\n\n", "code": "\nlist_of_medals = [\n    \"Air Force Cross\",\n    \"Air Medal\",\n    \"Aerial Achievement Medal\",\n    \"Airman's Medal\",\n    \"Distinguished Flying Cross\",\n]\n\nindex = int(input(\"Enter the index of the decoration to print: \"))\n\nprint(list_of_medals[index])\n", "testcase": "from cs110 import autograder\nimport random, math\n\nsoln_list = [\n                    'Congressional Medal of Honor', 'Air Force Cross',\t'Air Force Distinguished Service Medal',\n                    \"Airman's Medal\",\t\"Aerial Achievement Medal\",\t\"Air Force Commendation Medal\",\n                    \"Air Force Achievement Medal\", 'Air Force Combat Action Medal',\t'Combat Readiness Medal',\n                    'Air and Space Campaign Medal',\t'Nuclear Deterrence Operations Service Medal',\n                    'Remote Combat Effects Campaign Medal'\n            ] \n             \n\n# Runs the Python script and sees if it passes the test(s)\ndef test_passed():\n    \n    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]\n    tests_passed = 0\n\n    for i in range(len(index_list)):\n        print(\"----------------------------------------------------------\")\n        print(\"Testing item #\" + str(index_list[i]) + \": \")\n        print(\"----------------------------------------------------------\")\n               \n        # Runs the Script\n        output, error_message = autograder.run_script(\"a3_1_medals.py\", [index_list[i]])\n\n        # Test Goes Here\n        lines = output.split(\"\\n\")\n        \n        if lines[0] == soln_list[index_list[i]-1]:\n            print(\"Looks Good!\")\n            tests_passed += 1\n        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:\n            print(\"Unexpected Output (Expected \" + str(soln_list[index_list[i]-1]) + \")\")\n    \n        print()\n    \n    return (100 / len(index_list)) * tests_passed\n\n\n# ---------------------------------------------------------------------\n# Optional\n# Runs your code in an IDE (for testing purposes)\n# ---------------------------------------------------------------------\nif __name__ == '__main__':    \n    result = test_passed()\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 167, "problem_id": "a3_1_countries", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a list called `list_of_coalition_countries`. Write\na program that prints a single, specified country from the list. Your program\nshall take a number via user input used to identify which country to print.\nFor example, if the user types a 3, you should print out the third item.\n\n\n\n**NOTE:**\n\n  * You may assume that the user will always enter a value that \"should\" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)\n\n\n\n\n", "code": "\nlist_of_coalition_countries = ['USA', 'UK', 'Germany', 'France', 'Canada']\n\ncountry_index = int(input(\"Enter the index of the country to print: \"))\n\nprint(list_of_coalition_countries[country_index])\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nsoln_list = ['United States', 'United Kingdom', 'Australia', 'South Korea', 'Czech Republic', 'Romania', 'El Salvador', 'Estonia', \r\n             'Bulgaria', 'Moldova', 'Albania', 'Ukraine', 'Denmark', 'Tonga', 'Azerbaijan', 'Singapore', 'Bosnia', 'Macedonia',\r\n             'Latvia', 'Poland', 'Kazakhstan']\r\n             \r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]\r\n    tests_passed = 0\r\n\r\n    for i in range(len(index_list)):\r\n        print(\"----------------------------------------------------------\")\r\n        print(\"Testing item #\" + str(index_list[i]) + \": \")\r\n        print(\"----------------------------------------------------------\")\r\n               \r\n        # Runs the Script\r\n        output, error_message = autograder.run_script(\"a3_1_countries.py\", [index_list[i]])\r\n\r\n        # Test Goes Here\r\n        lines = output.split(\"\\n\")\r\n        \r\n        if lines[0] == soln_list[index_list[i]-1]:\r\n            print(\"Looks Good!\")\r\n            tests_passed += 1\r\n        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:\r\n            print(\"Unexpected Output (Expected \" + str(soln_list[index_list[i]-1]) + \")\")\r\n    \r\n        print()\r\n    \r\n    return (100 / len(index_list)) * tests_passed\r\n\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 168, "problem_id": "a3_1_commands", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a list called `list_of_usaf_commands`. Write a\nprogram that prints a single, specified command organization from the list.\nYour program shall take a number via user input used to identify which command\norganization to print. For example, if the user types a 3, you should print\nout the third item.\n\n\n\n**NOTE:**\n\n  * You may assume that the user will always enter a value that \"should\" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)\n\n\n", "code": "\nlist_of_usaf_commands = [\n    \"Air Combat Command\",\n    \"Air Education and Training Command\",\n    \"Air Force Global Strike Command\",\n    \"Air Force Materiel Command\",\n    \"Air Force Reserve Command\",\n    \"Air Force Space Command\",\n    \"Air Force Special Operations Command\",\n    \"Air Mobility Command\",\n    \"Pacific Air Forces\",\n    \"United States Air Forces in Europe\",\n    \"Air National Guard\"\n]\n\ncommand_number = int(input(\"Enter the command number to print: \"))\nprint(list_of_usaf_commands[command_number - 1])\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nlist_of_usaf_commands = ['ACC','AETC','AFGSC','AFMC',\r\n                         'AFRC','AFSOC','AMC','PACAF',\r\n                         'USAFE']\r\n             \r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    index_list = [1, random.randint(2, len(list_of_usaf_commands)-2), len(list_of_usaf_commands)]\r\n    tests_passed = 0\r\n\r\n    for i in range(len(index_list)):\r\n        print(\"----------------------------------------------------------\")\r\n        print(\"Testing item #\" + str(index_list[i]) + \": \")\r\n        print(\"----------------------------------------------------------\")\r\n               \r\n        # Runs the Script\r\n        output, error_message = autograder.run_script(\"a3_1_commands.py\", [index_list[i]])\r\n\r\n        # Test Goes Here\r\n        lines = output.split(\"\\n\")\r\n        \r\n        if lines[0] == list_of_usaf_commands[index_list[i]-1]:\r\n            print(\"Looks Good!\")\r\n            tests_passed += 1\r\n        elif error_message == '' and lines[0] != list_of_usaf_commands[index_list[i]-1]:\r\n            print(\"Unexpected Output (Expected \" + str(list_of_usaf_commands[index_list[i]-1]) + \")\")\r\n    \r\n        print()\r\n    \r\n    return (100 / len(index_list)) * tests_passed\r\n\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 169, "problem_id": "a3_1_afbs", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a list called `list_of_bases`. Write a program\nthat prints a single, specified base from the list. Your program shall take a\nnumber via user input used to identify which base to print. For example, if\nthe user types a 3, you should print out the third item.\n\n\n\n**NOTE:**\n\n  * You may assume that the user will always enter a value that \"should\" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nsoln_list = ['Travis', 'Eglin', 'Offutt', 'Minot', 'Luke', 'Malmstrom', 'Ellsworth', 'Patrick', 'Moody', 'Barksdale',\r\n             'Maxwell', 'Mountain Home', 'Keesler', 'Lackland', 'Kelly', 'Andrews', 'Tinker', 'Peterson', 'Buckley',\r\n             'Hill', 'Dyess', 'Wright-Patterson', 'Nellis']\r\n             \r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]\r\n    tests_passed = 0\r\n\r\n    for i in range(len(index_list)):\r\n        print(\"----------------------------------------------------------\")\r\n        print(\"Testing item #\" + str(index_list[i]) + \": \")\r\n        print(\"----------------------------------------------------------\")\r\n               \r\n        # Runs the Script\r\n        output, error_message = autograder.run_script(\"a3_1_afbs.py\", [index_list[i]])\r\n\r\n        # Test Goes Here\r\n        lines = output.split(\"\\n\")\r\n        \r\n        if lines[0] == soln_list[index_list[i]-1]:\r\n            print(\"Looks Good!\")\r\n            tests_passed += 1\r\n        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:\r\n            print(\"Unexpected Output (Expected \" + str(soln_list[index_list[i]-1]) + \")\")\r\n    \r\n        print()\r\n    \r\n    return (100 / len(index_list)) * tests_passed\r\n\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 170, "problem_id": "a2_6_virus", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou are writing a program that will help you decide if there are too many\npeople at a restaurant for you to dine safely. Your program will ask for the\nnumber of people in the restaurant. It will then ask for the distance between\nyourself and each of the people (in feet, which do not have to be whole\nnumbers). Your program will keep track of how many people are within 6 feet of\nyou (inclusive). Your program will then print one of the following statements:\n\n**# of People within 6 Feet** | **0** | **1-2** | **> 2**  \n---|---|---|---  \n**Output** | All Clear | Warning | Find Another Place  \n  \n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**INPUT** | 3  \n5.7  \n10.2  \n12.4 | 2  \n7.0  \n15.1  \n**OUTPUT** | Warning | All Clear\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(num_violating, num_people):    \r\n    inputs = [num_people]\r\n    \r\n    for i in range(num_people):\r\n        if i < num_violating:\r\n            if (i + 1 == num_violating):\r\n                inputs.append(6)\r\n            else:\r\n                inputs.append(round(random.uniform(0, 6), 1))\r\n        else:\r\n            inputs.append(round(random.uniform(7, 20), 1))\r\n\r\n    # Generates Expected Answer\r\n    if num_violating == 0:\r\n        answer = \"All Clear\"\r\n    elif num_violating <= 2:\r\n        answer = \"Warning\"\r\n    else:\r\n        answer = \"Find Another Place\"\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"a2_6_virus.py\", inputs)\r\n    \r\n    print(\"Testing when\", num_violating, \"out of\", num_people, \"are violating . . . \")\r\n    print(\"  Inputs:\", inputs)\r\n    print(\"  Result: \", end='')\r\n    \r\n    if answer.strip() == output.strip():\r\n        print(\"CORRECT!\\n\")\r\n        return True\r\n    else:\r\n        print(\"INCORRECT. Expected: '\" + answer + \"' instead of '\" + output + \"'\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    num_passed = 0\r\n    \r\n    if (run_test(0, random.randint(1, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(1, random.randint(1, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(2, random.randint(2, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(3, random.randint(3, 5))):\r\n        num_passed += 1\r\n        \r\n    return (100 / 4) * num_passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 171, "problem_id": "a2_6_traffic_lights", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nThe City Manager is having a traffic problem and asked you are to write a\nprogram that will determine whether or not to activate a newly installed\nalternate traffic light schedule to help alleviate traffic throughout the city\nduring peak traffic hours. Your program will ask for the number of traffic\n\"time periods\" to analyze. It will then ask for the traffic throughput (in\naverage number of cars per minute, which does not have to be a whole number)\nfor each \"time period\". Your program will keep track of how many \"time\nperiods\" are considered heavy traffic, as defined as 15 cars per minutes or\nmore (inclusive). Your program will then print one of the following\nstatements:\n\n**# of \"time periods\" of heavy traffic** | **0** | **1-2** | **> 2**  \n---|---|---|---  \n**Output** | Regular Schedule | Prepare Activation | Activate New Schedule  \n  \n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**INPUT** |\n\n3\n\n12.8\n\n15.0\n\n6.7\n\n|\n\n3\n\n17.3\n\n15.1\n\n19.2  \n  \n**OUTPUT** | Prepare Activation | Activate New Schedule\n\n\n", "code": "\nnum_periods = int(input())\nheavy_traffic_periods = 0\n\nfor i in range(num_periods):\n    throughput = float(input())\n    if throughput >= 15:\n        heavy_traffic_periods += 1\n\nif heavy_traffic_periods > 2:\n    print(\"Activate New Schedule\")\nelif heavy_traffic_periods >= 1:\n    print(\"Prepare Activation\")\nelse:\n    print(\"Regular Schedule\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(num_over, traffic):    \r\n    inputs = [traffic]\r\n    \r\n    for i in range(traffic):\r\n        if i < num_over:\r\n            if (i + 1 == num_over):\r\n                inputs.append(15)\r\n            else:\r\n                inputs.append(round(random.uniform(15, 30), 1))\r\n        else:\r\n            inputs.append(round(random.uniform(1, 15), 1))\r\n\r\n    # Generates Expected Answer\r\n    if num_over == 0:\r\n        answer = \"Regular Schedule\"\r\n    elif num_over <= 2:\r\n        answer = \"Prepare Activation\"\r\n    else:\r\n        answer = \"Activate New Schedule\"\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"a2_6_traffic_lights.py\", inputs)\r\n    \r\n    print(\"Testing when\", num_over, \"out of\", traffic, \"\\\"time periods\\\" are experiencing heavy traffic . . . \")\r\n    print(\"  Inputs:\", inputs)\r\n    print(\"  Result: \", end='')\r\n    \r\n    if answer.strip() == output.strip():\r\n        print(\"CORRECT!\\n\")\r\n        return True\r\n    else:\r\n        print(\"INCORRECT. Expected: '\" + answer + \"' instead of '\" + output + \"'\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    num_passed = 0\r\n    \r\n    if (run_test(0, random.randint(1, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(1, random.randint(1, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(2, random.randint(2, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(3, random.randint(3, 5))):\r\n        num_passed += 1\r\n        \r\n    return (100 / 4) * num_passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 172, "problem_id": "a2_6_network_traffic", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nThe 10th Communications Squadron (10 CS) recently detected a higher volume of\nnetwork traffic on the base network. The 10 CS Director of Operations asked\nyou are to write a program that will determine whether or not to activate an\nadditional Network Load Balancer (NLB) to improve the network performance\nduring these peak loads. Your program will ask for the number of network\ntraffic \"snapshots\" to analyze. It will then ask for the network load (in\nGigabits per second (Gbps), which does not have to be a whole number) for each\n\"snapshot\". Your program will keep track of how many \"snapshots\" are\ndesignated as high volume network traffic, defined as loads greater than 512\nGbps. Your program will then print one of the following statements:\n\n**# of \"snapshots\" with high network traffic volume** | **0** | **1-2** | **>\n2**  \n---|---|---|---  \n**Output** | Ops Normal | Initialize NLB | Activate NLB  \n  \n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**INPUT** |\n\n3\n\n512.0\n\n738.5\n\n199.6\n\n|\n\n3\n\n498.6\n\n372.9\n\n512.0  \n  \n**OUTPUT** | Initialize NLB | Ops Normal\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(num_over, traffic):    \r\n    inputs = [traffic]\r\n    \r\n    for i in range(traffic):\r\n        if i < num_over:\r\n            if (i + 1 == num_over):\r\n                inputs.append(512.1)\r\n            else:\r\n                inputs.append(round(random.uniform(512, 1024), 1))\r\n        else:\r\n            inputs.append(round(random.uniform(256, 512), 1))\r\n\r\n    # Generates Expected Answer\r\n    if num_over == 0:\r\n        answer = \"Ops Normal\"\r\n    elif num_over <= 2:\r\n        answer = \"Initialize NLB\"\r\n    else:\r\n        answer = \"Activate NLB\"\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"a2_6_network_traffic.py\", inputs)\r\n    \r\n    print(\"Testing when\", num_over, \"out of\", traffic, \"\\\"snaphots\\\" have high volume of network traffic . . . \")\r\n    print(\"  Inputs:\", inputs)\r\n    print(\"  Result: \", end='')\r\n    \r\n    if answer.strip() == output.strip():\r\n        print(\"CORRECT!\\n\")\r\n        return True\r\n    else:\r\n        print(\"INCORRECT. Expected: '\" + answer + \"' instead of '\" + output + \"'\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    num_passed = 0\r\n    \r\n    if (run_test(0, random.randint(1, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(1, random.randint(1, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(2, random.randint(2, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(3, random.randint(3, 5))):\r\n        num_passed += 1\r\n        \r\n    return (100 / 4) * num_passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 173, "problem_id": "a2_6_grades", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou are writing a program that will help your instructors analyze student\nperformance on an exam. Your program will ask for the number of students in\nthe class. It will then ask for the grade of each student (this grade does not\nhave to be a whole number). Your program will keep track of how many students\nreceived less than 70 on an assignment. Your program will then print one of\nthe following statements.\n\n\n\n**# of scores below 70** | **0** | **1-2** | **> 2**  \n---|---|---|---  \n**Output** | Excellent | Satisfactory | Unsatisfactory  \n  \n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**INPUT** |\n\n4  \n75.6  \n80.2  \n95.5  \n71.0\n\n|\n\n3  \n68.2  \n72.9  \n95.4\n\n|\n\n3  \n67.0  \n65.5  \n68.3  \n  \n**OUTPUT** | Excellent | Satisfactory | Unsatisfactory  \n  \n\n\n\n", "code": "\nnum_students = int(input())\ngrades = []\n\nfor _ in range(num_students):\n  grade = float(input())\n  grades.append(grade)\n  \nbelow_70 = len([grade for grade in grades if grade < 70])\n  \nif below_70 == 0:\n  print(\"Excellent\")\nelif below_70 <= 2:\n  print(\"Satisfactory\")\nelse:\n  print(\"Unsatisfactory\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(num_failures, num_papers):    \r\n    inputs = [num_papers]\r\n    \r\n    for i in range(num_papers):\r\n        if i < num_failures:\r\n            inputs.append(round(random.uniform(0, 70), 1))\r\n        else:\r\n            if (i == num_failures):\r\n                inputs.append(70)\r\n            else:\r\n                inputs.append(round(random.uniform(70, 100), 1))\r\n\r\n    # Generates Expected Answer\r\n    if num_failures == 0:\r\n        answer = \"Excellent\"\r\n    elif num_failures >= 1 and num_failures <= 2:\r\n        answer = \"Satisfactory\"\r\n    else:\r\n        answer = \"Unsatisfactory\"\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"a2_6_grades.py\", inputs)\r\n    \r\n    print(\"Testing when\", num_failures, \"out of\", num_papers, \"failed . . . \")\r\n    print(\"  Inputs:\", inputs)\r\n    print(\"  Result: \", end='')\r\n    \r\n    if answer.strip() == output.strip():\r\n        print(\"CORRECT!\\n\")\r\n        return True\r\n    else:\r\n        print(\"INCORRECT. Expected: '\" + answer + \"' instead of '\" + output + \"'\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    num_passed = 0\r\n    \r\n    if (run_test(0, random.randint(1, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(1, random.randint(1, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(2, random.randint(2, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(3, random.randint(3, 5))):\r\n        num_passed += 1\r\n        \r\n    return (100 / 4) * num_passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 174, "problem_id": "a2_6_gameday", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nThe Academy Athletic Director asked you are to write a program that will\ndetermine whether or not a football game in progress should be delayed based\non current weather conditions. Your program will ask for the number of\nlightning strikes occurred in the immediate area in the past thirty minutes.\nIt will then ask for the distance from Falcon Stadium to each lightning strike\n(in miles, which do not have to be whole numbers). Your program will keep\ntrack of how many lightning strikes are within 15 miles of the stadium\n(inclusive). Your program will then print one of the following statements:\n\n**# of lightning strikes in immediate area** | **0** | **1-3** | **> 3**  \n---|---|---|---  \n**Output** | All Clear | Weather Warning | Game Delay  \n  \n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**INPUT** |\n\n4\n\n15.0\n\n13.2\n\n6.5\n\n9.8\n\n|\n\n3\n\n17.8\n\n15.1\n\n19.0\n\n  \n  \n**OUTPUT** | Game Delay | All Clear  \n  \n\n\n\n", "code": "\ndef should_delay_game():\n    num_strikes = int(input(\"Number of lightning strikes: \"))\n    strikes_within_15_miles = 0\n    \n    for _ in range(num_strikes):\n        distance = float(input(\"Distance from stadium: \"))\n        if distance <= 15:\n            strikes_within_15_miles += 1\n    \n    if strikes_within_15_miles == 0:\n        print(\"All Clear\")\n    elif strikes_within_15_miles <= 3:\n        print(\"Weather Warning\")\n    else:\n        print(\"Game Delay\")\n\nshould_delay_game()\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(num_close, num_strikes):    \r\n    inputs = [num_strikes]\r\n    \r\n    for i in range(num_strikes):\r\n        if i < num_close:\r\n            if (i + 1 == num_close):\r\n                inputs.append(15)\r\n            else:\r\n                inputs.append(round(random.uniform(0, 15), 1))\r\n        else:\r\n            inputs.append(round(random.uniform(15, 50), 1))\r\n\r\n    # Generates Expected Answer\r\n    if num_close == 0:\r\n        answer = \"All Clear\"\r\n    elif num_close <= 3:\r\n        answer = \"Weather Warning\"\r\n    else:\r\n        answer = \"Game Delay\"\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"a2_6_gameday.py\", inputs)\r\n    \r\n    print(\"Testing when\", num_close, \"out of\", num_strikes, \"\\\"strikes\\\" are are close . . . \")\r\n    print(\"  Inputs:\", inputs)\r\n    print(\"  Result: \", end='')\r\n    \r\n    if answer.strip() == output.strip():\r\n        print(\"CORRECT!\\n\")\r\n        return True\r\n    else:\r\n        print(\"INCORRECT. Expected: '\" + answer + \"' instead of '\" + output + \"'\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    num_passed = 0\r\n    \r\n    if (run_test(0, random.randint(2, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(1, random.randint(2, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(2, random.randint(3, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(4, random.randint(4, 5))):\r\n        num_passed += 1\r\n        \r\n    return (100 / 4) * num_passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 175, "problem_id": "a2_6_combat", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou are writing a program that will determine whether or not a fighter pilot\nwill need to make an evasive action when enemy aircraft are near. Your program\nwill ask for the number of enemy planes in the area. It will then ask for the\ndistance between the pilot and each of the enemy planes (in miles, which do\nnot have to be whole numbers). Your program will keep track of how many enemy\nplanes are within 20 miles of the pilot (inclusive). Your program will then\nprint one of the following statements:\n\n**# of Enemy Planes in Area** | **0** | **1-2** | **> 2**  \n---|---|---|---  \n**Output** | All Clear | Warning | Evasive Action  \n  \n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**INPUT** |\n\n3\n\n10.5\n\n17.2\n\n23.7\n\n|\n\n3\n\n21.4\n\n34.0\n\n27.9  \n  \n**OUTPUT** | Warning | All Clear\n\n\n", "code": "\nnum_planes = int(input())\ndistances = []\nfor _ in range(num_planes):\n    distances.append(float(input()))\n\ncount = 0\nfor distance in distances:\n    if distance <= 20:\n        count += 1\n\nif count == 0:\n    print(\"All Clear\")\nelif count <= 2:\n    print(\"Warning\")\nelse:\n    print(\"Evasive Action\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(num_close, num_planes):    \r\n    inputs = [num_planes]\r\n    \r\n    for i in range(num_planes):\r\n        if i < num_close:\r\n            if (i + 1 == num_close):\r\n                inputs.append(20)\r\n            else:\r\n                inputs.append(round(random.uniform(0, 20), 1))\r\n        else:\r\n            inputs.append(round(random.uniform(20, 50), 1))\r\n\r\n    # Generates Expected Answer\r\n    if num_close == 0:\r\n        answer = \"All Clear\"\r\n    elif num_close <= 2:\r\n        answer = \"Warning\"\r\n    else:\r\n        answer = \"Evasive Action\"\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"a2_6_combat.py\", inputs)\r\n    \r\n    print(\"Testing when\", num_close, \"out of\", num_planes, \"are close . . . \")\r\n    print(\"  Inputs:\", inputs)\r\n    print(\"  Result: \", end='')\r\n    \r\n    if answer.strip() == output.strip():\r\n        print(\"CORRECT!\\n\")\r\n        return True\r\n    else:\r\n        print(\"INCORRECT. Expected: '\" + answer + \"' instead of '\" + output + \"'\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    num_passed = 0\r\n    \r\n    if (run_test(0, random.randint(1, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(1, random.randint(1, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(2, random.randint(2, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(3, random.randint(3, 5))):\r\n        num_passed += 1\r\n        \r\n    return (100 / 4) * num_passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 176, "problem_id": "a2_4_slash", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with program that gets the following values from the\nuser:\n\n  * **slash_separated_string** : A slash separated string  \nExample: johnson81/4081/30no86/cj4081/Craig/Johnson/Depot/London  \n  \n\n  * **column_to_print** : A number representing the value to print from the slash separated string  \nNOTE: 0 represents the first value in the slash separated string, 1 represents\nthe second, etc\n\n\n\nWrite a Python program that:\n\n  1. Splits the **slash separated string**\n  2. Prints the column_to_printth value.\n\n\n\n**EXAMPLE:**\n\nIf the user types:\n\n    \n    \n    johnson81/4081/30no86/cj4081/Craig/Johnson/Depot/London  \n    2\n\nYour program should then output:\n\n    \n    \n    30no86\n\n\n\n\n", "code": "\ndef print_column_value(slash_separated_string, column_to_print):\n    values = slash_separated_string.split('/')\n    print(values[column_to_print])\n    \nslash_separated_string = input(\"Enter a slash separated string: \")\ncolumn_to_print = int(input(\"Enter the column to print: \"))\n\nprint_column_value(slash_separated_string, column_to_print)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\nvariant = \"slash\"\r\nverbose = False\r\n\r\nvariants = {\r\n            \"validate\": {\"delimiter\": '.'}, \r\n            \"comma\"   : {\"delimiter\": ','},\r\n            \"pipe\"    : {\"delimiter\": '|'}, #\r\n            \"amp\"     : {\"delimiter\": '&'}, #\r\n            \"caret\"   : {\"delimiter\": '^'}, #\r\n            \"dollar\"  : {\"delimiter\": '$'}, #\r\n            \"hash\"    : {\"delimiter\": '#'}, #\r\n            \"ques\"    : {\"delimiter\": '?'}, #\r\n            \"semic\"   : {\"delimiter\": ';'}, #\r\n            \"slash\"   : {\"delimiter\": '/'}, #\r\n            \"star\"    : {\"delimiter\": '*'}, #\r\n            \"colon\"   : {\"delimiter\": ':'}, #\r\n            \"hyphen\"  : {\"delimiter\": '-'}, #\r\n            \"score\"   : {\"delimiter\": '_'}, #\r\n           }\r\n\r\ndelimiter_proper = variants[variant][\"delimiter\"]\r\n\r\ndef generate_test_string(delimiter):\r\n    \r\n    random_lists = [\r\n                    [\"booker12\",\"9012\",\"12se74\",\"rb9012\",\"Rachel\",\"Booker\",\"Sales\",\"Coventry\"],\r\n                    [\"grey07\",\"2070\",\"04ap67\",\"lg2070\",\"Laura\",\"Grey\",\"Depot\",\"London\"],\r\n                    [\"johnson81\",\"4081\",\"30no86\",\"cj4081\",\"Craig\",\"Johnson\",\"Shipping\",\"Westminster\"],\r\n                    [\"jenkins46\",\"9346\",\"14ju73\",\"mj9346\",\"Mary\",\"Jenkins\",\"Engineering\",\"Liverpool\"],\r\n                    [\"smith79\",\"5079\",\"09ja61\",\"js5079\",\"Jamie\",\"Smith\",\"Testing\",\"Manchester\"]\r\n                   ]\r\n    \r\n    random_list = random_lists[random.randrange(len(random_lists))]\r\n    random_column = random.randrange(len(random_list))\r\n    test_string = \"\"\r\n    for field in random_list:\r\n        if test_string != \"\":\r\n            test_string += delimiter\r\n        test_string += field\r\n    return test_string, random_column\r\n\r\ndef solution(delimiter, string, column_num):\r\n    \r\n    #print(\"SOLUTION:\", string, delimiter, column_num, sep=\"\\n\")\r\n    columns = string.split(delimiter)\r\n    output = str(len(columns)) + '\\n'\r\n    output += columns[column_num] + '\\n'\r\n        \r\n    return output\r\n\r\ndef print_test_results(test_score, actual_output, expected_output):\r\n\r\n    if verbose:\r\n        \r\n        if test_score == 100:\r\n            print(\"CORRECT: %.1f%%\" % (test_score))\r\n        else:\r\n            print(\"INCORRECT: %.1f%%\" % (test_score))\r\n            print(\"Expected:\")\r\n            print(expected_output)\r\n\r\n    else:\r\n\r\n        if test_score == 100:\r\n            print(\"CORRECT\")\r\n        else:\r\n            print(\"INCORRECT\")\r\n            print(\"Expected:\")\r\n            print(expected_output)\r\n\r\ndef run1test(delimiter):\r\n\r\n    # Rubric\r\n    # 1 Runs without errors\r\n    # 1 Prints out the correct item count (regardless of order)\r\n    # 1 Prints out the correct item value (regardless of order)\r\n    # 1 Prints out the items in the correct order (0.5 for each)\r\n\r\n    test_score = 0\r\n    test_max = 4\r\n    \r\n    test_string, random_column = generate_test_string(delimiter)\r\n    output, error = autograder.run_script(\"a2_4_%s.py\" % (variant), [ test_string, random_column ])\r\n    expected_output = solution(delimiter, test_string, random_column)\r\n\r\n    if error == \"\":\r\n        test_score += 1\r\n    \r\n    returned_lines = output.strip().split('\\n')\r\n    returned_count = None\r\n    returned_item = None\r\n    if len(returned_lines) > 0:\r\n        returned_count = returned_lines[0]\r\n    if len(returned_lines) > 1:\r\n        returned_item = returned_lines[1]\r\n    \r\n    expected_lines = expected_output.strip().split('\\n')\r\n    expected_count = expected_lines[0]\r\n    expected_item = expected_lines[1]\r\n\r\n    if returned_count in expected_lines:\r\n        test_score += 1\r\n    if returned_count == expected_count:\r\n        test_score += 0.5\r\n    \r\n    if returned_item in expected_lines:\r\n        test_score += 1\r\n    if returned_item == expected_item:\r\n        test_score += 0.5\r\n\r\n    test_score = round(100 * (test_score / test_max), 1)\r\n    print_test_results(test_score, output, expected_output)\r\n    \r\n    return test_score\r\n\r\ndef initial_test():\r\n    global delimiter_used\r\n    \r\n    test_max = 12\r\n\r\n    test_score = 1 # For testing against the server\r\n\r\n    sensor_string = \"sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end\"\r\n    delimiter_column = 1\r\n\r\n    detection_failed = False\r\n    output, error   = autograder.run_script(\"a2_4_%s.py\" % (variant), [ sensor_string, delimiter_column ])\r\n    \r\n    if error == \"\":\r\n        test_score += 1\r\n        if verbose: print(\"+1 Running without error.\")\r\n    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)\r\n\r\n    returned_lines = output.strip().split('\\n')\r\n    returned_count = None\r\n    returned_item = None\r\n    if len(returned_lines) > 0:\r\n        returned_count = returned_lines[0]\r\n    if len(returned_lines) > 1:\r\n        returned_item = returned_lines[1]\r\n\r\n    expected_lines = expected_output.strip().split('\\n')\r\n    #expected_count = expected_lines[0]\r\n    #expected_item = expected_lines[1]\r\n\r\n    if len(returned_lines) >= 1 and returned_lines[0] != '':\r\n        test_score += 1\r\n        if verbose: print(\"+1 At least one line of output.\")\r\n    if len(returned_lines) == 2:\r\n        test_score += 1\r\n        if verbose: print(\"+1 Exactly two lines of output.\")\r\n        \r\n    if returned_count in expected_lines:\r\n        test_score += 1\r\n        if verbose: print(\"+1 Count contained in output somewhere.\")\r\n    if returned_item in expected_lines:\r\n        test_score += 1\r\n        if verbose: print(\"+1 Requested item contained in output somewhere.\")\r\n\r\n    detection_failed = len(returned_lines) < 2\r\n    \r\n    if verbose:\r\n        print(\"Delimiter Detection:\")\r\n        if detection_failed:\r\n            print(\"Failed:\", returned_lines)\r\n        else:\r\n            print(\"Detected delimiter: \", returned_lines[1])\r\n            print(\"Sensor fields: \", returned_lines[0])\r\n    \r\n    if variant in returned_lines:\r\n        test_score += 3\r\n        if verbose: print(\"+3 Detected delimiter is correct.\")\r\n\r\n    delimiter_used = None\r\n    if (not detection_failed) and (returned_lines[1] in variants):\r\n        delimiter_used = variants[returned_lines[1]][\"delimiter\"]\r\n\r\n    if delimiter_used == delimiter_proper:\r\n        test_score += 3\r\n        if verbose: print(\"+3 Detected delimiter is proper.\")\r\n\r\n    if delimiter_used == None:\r\n        delimiter_used = delimiter_proper\r\n        \r\n    test_score = round(100 * (test_score / test_max), 1)\r\n    print_test_results(test_score, output, expected_output)\r\n\r\n    return test_score\r\n    \r\ndef test_passed():\r\n\r\n    test_weights = [20, 12,4,4]\r\n    test_total = sum(test_weights) - test_weights[0]\r\n    if test_total != test_weights[0]:\r\n        print(\"Individual tests do not add to total value.\\n\")\r\n        \r\n    score = 0\r\n    test_num = 0\r\n    #------------------------------------------------\r\n    # Test #1: Sense delimiter used\r\n    #------------------------------------------------\r\n    test_num += 1\r\n    test_weight = 100*(test_weights[test_num]/test_total)\r\n    \r\n    if verbose:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    else:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n        \r\n    test_score = initial_test()\r\n    \r\n    score += (test_score/100) * test_weight\r\n    \r\n    #------------------------------------------------\r\n    # Test #2: Using detected delimiter\r\n    #------------------------------------------------\r\n    test_num += 1\r\n    test_weight = 100*(4/20)\r\n    \r\n    if verbose:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    else:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    \r\n    test_score = run1test(delimiter_used)\r\n    \r\n    score += (test_score/100) * test_weight\r\n\r\n    #------------------------------------------------\r\n    # Test #3: Use correct delimiter\r\n    #------------------------------------------------\r\n    test_num += 1\r\n    test_weight = 100*(4/20)\r\n    \r\n    if verbose:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    else:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n        \r\n    test_score = run1test(delimiter_proper)\r\n    \r\n    score += (test_score/100) * test_weight\r\n\r\n    #------------------------------------------------\r\n    # End of Test\r\n    #------------------------------------------------\r\n    \r\n    print(\"\\nOVERALL SCORE:\")\r\n    return round(score,1)\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':   \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 177, "problem_id": "a2_4_semic", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with program that gets the following values from the\nuser:\n\n  * **semicolon_separated_string** : A semicolon separated string  \nExample: booker12;9012;12se74;rb9012;Rachel;Booker;Sales;Manchester  \n  \n\n  * **column_to_print** : A number representing the value to print from the semicolon separated string  \nNOTE: 0 represents the first value in the semicolon separated string, 1\nrepresents the second, etc\n\n\n\nWrite a Python program that:\n\n  1. Splits the **semicolon separated string**\n  2. Prints the column_to_printth value.\n\n\n\n**EXAMPLE:**\n\nIf the user types:\n\n    \n    \n    booker12;9012;12se74;rb9012;Rachel;Booker;Sales;Manchester  \n    2\n\nYour program should then output:\n\n    \n    \n    12se74\n\n\n\n\n", "code": "\ndef print_column_value():\n    semicolon_separated_string = input()\n    column_to_print = int(input())\n    \n    values = semicolon_separated_string.split(';')\n    if column_to_print < len(values):\n        print(values[column_to_print])\n\nprint_column_value()\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\nvariant = \"semic\"\r\nverbose = False\r\n\r\nvariants = {\r\n            \"validate\": {\"delimiter\": '.'}, \r\n            \"comma\"   : {\"delimiter\": ','},\r\n            \"pipe\"    : {\"delimiter\": '|'}, #\r\n            \"amp\"     : {\"delimiter\": '&'}, #\r\n            \"caret\"   : {\"delimiter\": '^'}, #\r\n            \"dollar\"  : {\"delimiter\": '$'}, #\r\n            \"hash\"    : {\"delimiter\": '#'}, #\r\n            \"ques\"    : {\"delimiter\": '?'}, #\r\n            \"semic\"   : {\"delimiter\": ';'}, #\r\n            \"slash\"   : {\"delimiter\": '/'}, #\r\n            \"star\"    : {\"delimiter\": '*'}, #\r\n            \"colon\"   : {\"delimiter\": ':'}, #\r\n            \"hyphen\"  : {\"delimiter\": '-'}, #\r\n            \"score\"   : {\"delimiter\": '_'}, #\r\n           }\r\n\r\ndelimiter_proper = variants[variant][\"delimiter\"]\r\n\r\ndef generate_test_string(delimiter):\r\n    \r\n    random_lists = [\r\n                    [\"booker12\",\"9012\",\"12se74\",\"rb9012\",\"Rachel\",\"Booker\",\"Sales\",\"Coventry\"],\r\n                    [\"grey07\",\"2070\",\"04ap67\",\"lg2070\",\"Laura\",\"Grey\",\"Depot\",\"London\"],\r\n                    [\"johnson81\",\"4081\",\"30no86\",\"cj4081\",\"Craig\",\"Johnson\",\"Shipping\",\"Westminster\"],\r\n                    [\"jenkins46\",\"9346\",\"14ju73\",\"mj9346\",\"Mary\",\"Jenkins\",\"Engineering\",\"Liverpool\"],\r\n                    [\"smith79\",\"5079\",\"09ja61\",\"js5079\",\"Jamie\",\"Smith\",\"Testing\",\"Manchester\"]\r\n                   ]\r\n    \r\n    random_list = random_lists[random.randrange(len(random_lists))]\r\n    random_column = random.randrange(len(random_list))\r\n    test_string = \"\"\r\n    for field in random_list:\r\n        if test_string != \"\":\r\n            test_string += delimiter\r\n        test_string += field\r\n    return test_string, random_column\r\n\r\ndef solution(delimiter, string, column_num):\r\n    \r\n    #print(\"SOLUTION:\", string, delimiter, column_num, sep=\"\\n\")\r\n    columns = string.split(delimiter)\r\n    output = str(len(columns)) + '\\n'\r\n    output += columns[column_num] + '\\n'\r\n        \r\n    return output\r\n\r\ndef print_test_results(test_score, actual_output, expected_output):\r\n\r\n    if verbose:\r\n        \r\n        if test_score == 100:\r\n            print(\"CORRECT: %.1f%%\" % (test_score))\r\n        else:\r\n            print(\"INCORRECT: %.1f%%\" % (test_score))\r\n            print(\"Expected:\")\r\n            print(expected_output)\r\n\r\n    else:\r\n\r\n        if test_score == 100:\r\n            print(\"CORRECT\")\r\n        else:\r\n            print(\"INCORRECT\")\r\n            print(\"Expected:\")\r\n            print(expected_output)\r\n\r\ndef run1test(delimiter):\r\n\r\n    # Rubric\r\n    # 1 Runs without errors\r\n    # 1 Prints out the correct item count (regardless of order)\r\n    # 1 Prints out the correct item value (regardless of order)\r\n    # 1 Prints out the items in the correct order (0.5 for each)\r\n\r\n    test_score = 0\r\n    test_max = 4\r\n    \r\n    test_string, random_column = generate_test_string(delimiter)\r\n    output, error = autograder.run_script(\"a2_4_%s.py\" % (variant), [ test_string, random_column ])\r\n    expected_output = solution(delimiter, test_string, random_column)\r\n\r\n    if error == \"\":\r\n        test_score += 1\r\n    \r\n    returned_lines = output.strip().split('\\n')\r\n    returned_count = None\r\n    returned_item = None\r\n    if len(returned_lines) > 0:\r\n        returned_count = returned_lines[0]\r\n    if len(returned_lines) > 1:\r\n        returned_item = returned_lines[1]\r\n    \r\n    expected_lines = expected_output.strip().split('\\n')\r\n    expected_count = expected_lines[0]\r\n    expected_item = expected_lines[1]\r\n\r\n    if returned_count in expected_lines:\r\n        test_score += 1\r\n    if returned_count == expected_count:\r\n        test_score += 0.5\r\n    \r\n    if returned_item in expected_lines:\r\n        test_score += 1\r\n    if returned_item == expected_item:\r\n        test_score += 0.5\r\n\r\n    test_score = round(100 * (test_score / test_max), 1)\r\n    print_test_results(test_score, output, expected_output)\r\n    \r\n    return test_score\r\n\r\ndef initial_test():\r\n    global delimiter_used\r\n    \r\n    test_max = 12\r\n\r\n    test_score = 1 # For testing against the server\r\n\r\n    sensor_string = \"sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end\"\r\n    delimiter_column = 1\r\n\r\n    detection_failed = False\r\n    output, error   = autograder.run_script(\"a2_4_%s.py\" % (variant), [ sensor_string, delimiter_column ])\r\n    \r\n    if error == \"\":\r\n        test_score += 1\r\n        if verbose: print(\"+1 Running without error.\")\r\n    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)\r\n\r\n    returned_lines = output.strip().split('\\n')\r\n    returned_count = None\r\n    returned_item = None\r\n    if len(returned_lines) > 0:\r\n        returned_count = returned_lines[0]\r\n    if len(returned_lines) > 1:\r\n        returned_item = returned_lines[1]\r\n\r\n    expected_lines = expected_output.strip().split('\\n')\r\n    #expected_count = expected_lines[0]\r\n    #expected_item = expected_lines[1]\r\n\r\n    if len(returned_lines) >= 1 and returned_lines[0] != '':\r\n        test_score += 1\r\n        if verbose: print(\"+1 At least one line of output.\")\r\n    if len(returned_lines) == 2:\r\n        test_score += 1\r\n        if verbose: print(\"+1 Exactly two lines of output.\")\r\n        \r\n    if returned_count in expected_lines:\r\n        test_score += 1\r\n        if verbose: print(\"+1 Count contained in output somewhere.\")\r\n    if returned_item in expected_lines:\r\n        test_score += 1\r\n        if verbose: print(\"+1 Requested item contained in output somewhere.\")\r\n\r\n    detection_failed = len(returned_lines) < 2\r\n    \r\n    if verbose:\r\n        print(\"Delimiter Detection:\")\r\n        if detection_failed:\r\n            print(\"Failed:\", returned_lines)\r\n        else:\r\n            print(\"Detected delimiter: \", returned_lines[1])\r\n            print(\"Sensor fields: \", returned_lines[0])\r\n    \r\n    if variant in returned_lines:\r\n        test_score += 3\r\n        if verbose: print(\"+3 Detected delimiter is correct.\")\r\n\r\n    delimiter_used = None\r\n    if (not detection_failed) and (returned_lines[1] in variants):\r\n        delimiter_used = variants[returned_lines[1]][\"delimiter\"]\r\n\r\n    if delimiter_used == delimiter_proper:\r\n        test_score += 3\r\n        if verbose: print(\"+3 Detected delimiter is proper.\")\r\n\r\n    if delimiter_used == None:\r\n        delimiter_used = delimiter_proper\r\n        \r\n    test_score = round(100 * (test_score / test_max), 1)\r\n    print_test_results(test_score, output, expected_output)\r\n\r\n    return test_score\r\n    \r\ndef test_passed():\r\n\r\n    test_weights = [20, 12,4,4]\r\n    test_total = sum(test_weights) - test_weights[0]\r\n    if test_total != test_weights[0]:\r\n        print(\"Individual tests do not add to total value.\\n\")\r\n        \r\n    score = 0\r\n    test_num = 0\r\n    #------------------------------------------------\r\n    # Test #1: Sense delimiter used\r\n    #------------------------------------------------\r\n    test_num += 1\r\n    test_weight = 100*(test_weights[test_num]/test_total)\r\n    \r\n    if verbose:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    else:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n        \r\n    test_score = initial_test()\r\n    \r\n    score += (test_score/100) * test_weight\r\n    \r\n    #------------------------------------------------\r\n    # Test #2: Using detected delimiter\r\n    #------------------------------------------------\r\n    test_num += 1\r\n    test_weight = 100*(4/20)\r\n    \r\n    if verbose:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    else:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    \r\n    test_score = run1test(delimiter_used)\r\n    \r\n    score += (test_score/100) * test_weight\r\n\r\n    #------------------------------------------------\r\n    # Test #3: Use correct delimiter\r\n    #------------------------------------------------\r\n    test_num += 1\r\n    test_weight = 100*(4/20)\r\n    \r\n    if verbose:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    else:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n        \r\n    test_score = run1test(delimiter_proper)\r\n    \r\n    score += (test_score/100) * test_weight\r\n\r\n    #------------------------------------------------\r\n    # End of Test\r\n    #------------------------------------------------\r\n    \r\n    print(\"\\nOVERALL SCORE:\")\r\n    return round(score,1)\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':   \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 178, "problem_id": "a2_4_dash", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with program that gets the following values from the\nuser:\n\n  * **dash_separated_string** : A dash separated string  \nExample: johnson81-4081-30no86-cj4081-Craig-Johnson-Depot-London  \n  \n\n  * **column_to_print** : A number representing the value to print from the dash separated string  \nNOTE: 0 represents the first value in the dash separated string, 1 represents\nthe second, etc\n\n\n\nWrite a Python program that:\n\n  1. Splits the **dash separated string**\n  2. Prints the column_to_printth value.\n\n\n\n**EXAMPLE:**\n\nIf the user types:\n\n    \n    \n    johnson81-4081-30no86-cj4081-Craig-Johnson-Depot-London  \n    2\n\nYour program should then output:\n\n    \n    \n    30no86\n\n\n\n\n", "code": "\ninputs = input().split(\"\\n\")\ndash_separated_string = inputs[0]\ncolumn_to_print = int(inputs[1])\n\nsplit_values = dash_separated_string.split(\"-\")\nif column_to_print < len(split_values):\n    print(split_values[column_to_print])\nelse:\n    print(\"Invalid column number\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(string, column_num):\r\n    \r\n    columns = string.split('-')\r\n    return columns[column_num]\r\n    \r\n\r\ndef test_passed():\r\n\r\n    score = 0\r\n\r\n    # Generates the Test Set\r\n    random_strings = [\"booker12-9012-12se74-rb9012-Rachel-Booker-Sales-Manchester\",\r\n                      \"grey07-2070-04ap67-lg2070-Laura-Grey-Depot-London\",\r\n                      \"johnson81-4081-30no86-cj4081-Craig-Johnson-Depot-London\",\r\n                      \"jenkins46-9346-14ju73-mj9346-Mary-Jenkins-Engineering-Manchester\",\r\n                      \"smith79-5079-09ja61-js5079-Jamie-Smith-Engineering-Manchester\"]\r\n    \r\n    random_column   = random.randint(0, 6)\r\n    random_string   = random_strings[random.randint(0, len(random_strings)-1)]\r\n    output, error   = autograder.run_script(\"a2_4_dash.py\", [ random_string, random_column ])\r\n    expected_output = solution(random_string, random_column)\r\n    \r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT.  Expected:\", expected_output)\r\n        return 0.0\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 179, "problem_id": "a2_4_comma", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with program that gets the following values from the\nuser:\n\n  * **comma_separated_string** : A comma separated string  \nExample: booker12,9012,12se74,rb9012,Rachel,Booker,Sales,Manchester  \n  \n\n  * **column_to_print** : A number representing the value to print from the comma separated string  \nNOTE: 0 represents the first value in the comma separated string, 1 represents\nthe second, etc\n\n\n\nWrite a Python program that:\n\n  1. Splits the **comma separated** **string**\n  2. Prints the column_to_printth value\n\n\n\n**EXAMPLE:**\n\nIf the user types:\n\n    \n    \n    booker12,9012,12se74,rb9012,Rachel,Booker,Sales,Manchester  \n    2\n\nYour program should then output:\n\n    \n    \n    12se74\n\n\n\n\n", "code": "\n# Get comma separated string from user\ncomma_separated_string = input(\"Enter a comma separated string: \")\n\n# Get column to print from user\ncolumn_to_print = int(input(\"Enter the column to print: \"))\n\n# Split the comma separated string\nvalues = comma_separated_string.split(\",\")\n\n# Print the column_to_printth value\nif column_to_print < len(values):\n    print(values[column_to_print])\nelse:\n    print(\"Invalid column specified\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(string, column_num):\r\n    \r\n    columns = string.split(',')\r\n    return columns[column_num]\r\n    \r\n\r\ndef test_passed():\r\n\r\n    score = 0\r\n\r\n    # Generates the Test Set\r\n    random_strings = [\"booker12,9012,12se74,rb9012,Rachel,Booker,Sales,Manchester\",\r\n                      \"grey07,2070,04ap67,lg2070,Laura,Grey,Depot,London\",\r\n                      \"johnson81,4081,30no86,cj4081,Craig,Johnson,Depot,London\",\r\n                      \"jenkins46,9346,14ju73,mj9346,Mary,Jenkins,Engineering,Manchester\",\r\n                      \"smith79,5079,09ja61,js5079,Jamie,Smith,Engineering,Manchester\"]\r\n    \r\n    random_column   = random.randint(0, 6)\r\n    random_string   = random_strings[random.randint(0, len(random_strings)-1)]\r\n    output, error   = autograder.run_script(\"a2_4_comma.py\", [ random_string, random_column ])\r\n    expected_output = solution(random_string, random_column)\r\n    \r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT.  Expected:\", expected_output)\r\n        return 0.0\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 180, "problem_id": "a2_4_colon", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with program that gets the following values from the\nuser:\n\n  * **colon_separated_string** : A colon separated string  \nExample: jones78:4273:24px47:kj4273:Karyl:Jones:Accounts:Essex  \n  \n\n  * **column_to_print** : A number representing the value to print from the colon separated string  \nNOTE: 0 represents the first value in the colon separated string, 1 represents\nthe second, etc\n\n\n\nWrite a Python program that:\n\n  1. Splits the **colon separated string**\n  2. Prints the column_to_printth value.\n\n\n\n**EXAMPLE:**\n\nIf the user types:\n\n    \n    \n    jones78:4273:24px47:kj4273:Karyl:Jones:Accounts:Essex  \n    2\n\nYour program should then output:\n\n    \n    \n    24px47\n\n\n\n\n", "code": "\ncolon_separated_string = input(\"Enter the colon separated string: \")\ncolumn_to_print = int(input(\"Enter the column number to print: \"))\n\nsplit_string = colon_separated_string.split(':')\nprint(split_string[column_to_print])\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\nvariant = \"colon\"\r\nverbose = False\r\n\r\nvariants = {\r\n            \"validate\": {\"delimiter\": '.'}, \r\n            \"comma\"   : {\"delimiter\": ','},\r\n            \"pipe\"    : {\"delimiter\": '|'}, #\r\n            \"amp\"     : {\"delimiter\": '&'}, #\r\n            \"caret\"   : {\"delimiter\": '^'}, #\r\n            \"dollar\"  : {\"delimiter\": '$'}, #\r\n            \"hash\"    : {\"delimiter\": '#'}, #\r\n            \"ques\"    : {\"delimiter\": '?'}, #\r\n            \"semic\"   : {\"delimiter\": ';'}, #\r\n            \"slash\"   : {\"delimiter\": '/'}, #\r\n            \"star\"    : {\"delimiter\": '*'}, #\r\n            \"colon\"   : {\"delimiter\": ':'}, #\r\n            \"hyphen\"  : {\"delimiter\": '-'}, #\r\n            \"score\"   : {\"delimiter\": '_'}, #\r\n           }\r\n\r\ndelimiter_proper = variants[variant][\"delimiter\"]\r\n\r\ndef generate_test_string(delimiter):\r\n    \r\n    random_lists = [\r\n                    [\"booker12\",\"9012\",\"12se74\",\"rb9012\",\"Rachel\",\"Booker\",\"Sales\",\"Coventry\"],\r\n                    [\"grey07\",\"2070\",\"04ap67\",\"lg2070\",\"Laura\",\"Grey\",\"Depot\",\"London\"],\r\n                    [\"johnson81\",\"4081\",\"30no86\",\"cj4081\",\"Craig\",\"Johnson\",\"Shipping\",\"Westminster\"],\r\n                    [\"jenkins46\",\"9346\",\"14ju73\",\"mj9346\",\"Mary\",\"Jenkins\",\"Engineering\",\"Liverpool\"],\r\n                    [\"smith79\",\"5079\",\"09ja61\",\"js5079\",\"Jamie\",\"Smith\",\"Testing\",\"Manchester\"]\r\n                   ]\r\n    \r\n    random_list = random_lists[random.randrange(len(random_lists))]\r\n    random_column = random.randrange(len(random_list))\r\n    test_string = \"\"\r\n    for field in random_list:\r\n        if test_string != \"\":\r\n            test_string += delimiter\r\n        test_string += field\r\n    return test_string, random_column\r\n\r\ndef solution(delimiter, string, column_num):\r\n    \r\n    #print(\"SOLUTION:\", string, delimiter, column_num, sep=\"\\n\")\r\n    columns = string.split(delimiter)\r\n    output = str(len(columns)) + '\\n'\r\n    output += columns[column_num] + '\\n'\r\n        \r\n    return output\r\n\r\ndef print_test_results(test_score, actual_output, expected_output):\r\n\r\n    if verbose:\r\n        \r\n        if test_score == 100:\r\n            print(\"CORRECT: %.1f%%\" % (test_score))\r\n        else:\r\n            print(\"INCORRECT: %.1f%%\" % (test_score))\r\n            print(\"Expected:\")\r\n            print(expected_output)\r\n\r\n    else:\r\n\r\n        if test_score == 100:\r\n            print(\"CORRECT\")\r\n        else:\r\n            print(\"INCORRECT\")\r\n            print(\"Expected:\")\r\n            print(expected_output)\r\n\r\ndef run1test(delimiter):\r\n\r\n    # Rubric\r\n    # 1 Runs without errors\r\n    # 1 Prints out the correct item count (regardless of order)\r\n    # 1 Prints out the correct item value (regardless of order)\r\n    # 1 Prints out the items in the correct order (0.5 for each)\r\n\r\n    test_score = 0\r\n    test_max = 4\r\n    \r\n    test_string, random_column = generate_test_string(delimiter)\r\n    output, error = autograder.run_script(\"a2_4_%s.py\" % (variant), [ test_string, random_column ])\r\n    expected_output = solution(delimiter, test_string, random_column)\r\n\r\n    if error == \"\":\r\n        test_score += 1\r\n    \r\n    returned_lines = output.strip().split('\\n')\r\n    returned_count = None\r\n    returned_item = None\r\n    if len(returned_lines) > 0:\r\n        returned_count = returned_lines[0]\r\n    if len(returned_lines) > 1:\r\n        returned_item = returned_lines[1]\r\n    \r\n    expected_lines = expected_output.strip().split('\\n')\r\n    expected_count = expected_lines[0]\r\n    expected_item = expected_lines[1]\r\n\r\n    if returned_count in expected_lines:\r\n        test_score += 1\r\n    if returned_count == expected_count:\r\n        test_score += 0.5\r\n    \r\n    if returned_item in expected_lines:\r\n        test_score += 1\r\n    if returned_item == expected_item:\r\n        test_score += 0.5\r\n\r\n    test_score = round(100 * (test_score / test_max), 1)\r\n    print_test_results(test_score, output, expected_output)\r\n    \r\n    return test_score\r\n\r\ndef initial_test():\r\n    global delimiter_used\r\n    \r\n    test_max = 12\r\n\r\n    test_score = 1 # For testing against the server\r\n\r\n    sensor_string = \"sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end\"\r\n    delimiter_column = 1\r\n\r\n    detection_failed = False\r\n    output, error   = autograder.run_script(\"a2_4_%s.py\" % (variant), [ sensor_string, delimiter_column ])\r\n    \r\n    if error == \"\":\r\n        test_score += 1\r\n        if verbose: print(\"+1 Running without error.\")\r\n    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)\r\n\r\n    returned_lines = output.strip().split('\\n')\r\n    returned_count = None\r\n    returned_item = None\r\n    if len(returned_lines) > 0:\r\n        returned_count = returned_lines[0]\r\n    if len(returned_lines) > 1:\r\n        returned_item = returned_lines[1]\r\n\r\n    expected_lines = expected_output.strip().split('\\n')\r\n    #expected_count = expected_lines[0]\r\n    #expected_item = expected_lines[1]\r\n\r\n    if len(returned_lines) >= 1 and returned_lines[0] != '':\r\n        test_score += 1\r\n        if verbose: print(\"+1 At least one line of output.\")\r\n    if len(returned_lines) == 2:\r\n        test_score += 1\r\n        if verbose: print(\"+1 Exactly two lines of output.\")\r\n        \r\n    if returned_count in expected_lines:\r\n        test_score += 1\r\n        if verbose: print(\"+1 Count contained in output somewhere.\")\r\n    if returned_item in expected_lines:\r\n        test_score += 1\r\n        if verbose: print(\"+1 Requested item contained in output somewhere.\")\r\n\r\n    detection_failed = len(returned_lines) < 2\r\n    \r\n    if verbose:\r\n        print(\"Delimiter Detection:\")\r\n        if detection_failed:\r\n            print(\"Failed:\", returned_lines)\r\n        else:\r\n            print(\"Detected delimiter: \", returned_lines[1])\r\n            print(\"Sensor fields: \", returned_lines[0])\r\n    \r\n    if variant in returned_lines:\r\n        test_score += 3\r\n        if verbose: print(\"+3 Detected delimiter is correct.\")\r\n\r\n    delimiter_used = None\r\n    if (not detection_failed) and (returned_lines[1] in variants):\r\n        delimiter_used = variants[returned_lines[1]][\"delimiter\"]\r\n\r\n    if delimiter_used == delimiter_proper:\r\n        test_score += 3\r\n        if verbose: print(\"+3 Detected delimiter is proper.\")\r\n\r\n    if delimiter_used == None:\r\n        delimiter_used = delimiter_proper\r\n        \r\n    test_score = round(100 * (test_score / test_max), 1)\r\n    print_test_results(test_score, output, expected_output)\r\n\r\n    return test_score\r\n    \r\ndef test_passed():\r\n\r\n    test_weights = [20, 12,4,4]\r\n    test_total = sum(test_weights) - test_weights[0]\r\n    if test_total != test_weights[0]:\r\n        print(\"Individual tests do not add to total value.\\n\")\r\n        \r\n    score = 0\r\n    test_num = 0\r\n    #------------------------------------------------\r\n    # Test #1: Sense delimiter used\r\n    #------------------------------------------------\r\n    test_num += 1\r\n    test_weight = 100*(test_weights[test_num]/test_total)\r\n    \r\n    if verbose:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    else:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n        \r\n    test_score = initial_test()\r\n    \r\n    score += (test_score/100) * test_weight\r\n    \r\n    #------------------------------------------------\r\n    # Test #2: Using detected delimiter\r\n    #------------------------------------------------\r\n    test_num += 1\r\n    test_weight = 100*(4/20)\r\n    \r\n    if verbose:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    else:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    \r\n    test_score = run1test(delimiter_used)\r\n    \r\n    score += (test_score/100) * test_weight\r\n\r\n    #------------------------------------------------\r\n    # Test #3: Use correct delimiter\r\n    #------------------------------------------------\r\n    test_num += 1\r\n    test_weight = 100*(4/20)\r\n    \r\n    if verbose:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    else:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n        \r\n    test_score = run1test(delimiter_proper)\r\n    \r\n    score += (test_score/100) * test_weight\r\n\r\n    #------------------------------------------------\r\n    # End of Test\r\n    #------------------------------------------------\r\n    \r\n    print(\"\\nOVERALL SCORE:\")\r\n    return round(score,1)\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':   \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 181, "problem_id": "a2_3_twenty_one", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with program that gets a number from the user and\nstores it in a variable called  **starting_number**.\n\nWrite a program that prints all of the numbers between  **starting_number**\nand  **0**  (inclusive), counting down by **21** each time.\n\n\n\nFor example, if the user types **85** , your program should print:\n\n    \n    \n    85  \n    64  \n    43  \n    22  \n    1\n\nSimilarly, if the user types  **51** , your program should print:\n\n    \n    \n    51  \n    30  \n    9  \n      \n    \n\nYou may assume that the user will only enter positive numbers.\n\n\n\n**HINT:**\n\n  * This problem can be solved using either a  **for**  or  **while**  loop.\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef solution(starting_num):\r\n    result = ''\r\n    i = starting_num\r\n    \r\n    while i >= 0:\r\n    \r\n        result += str(i) + \"\\n\"\r\n        \r\n        i = i - 21\r\n    return result\r\n\r\n\r\ndef test_passed():    \r\n    score = 0\r\n    random_number = 126 + 21 * random.randint(1, 15)\r\n    \r\n    output, error = autograder.run_script(\"a2_3_twenty_one.py\", [random_number])\r\n    expected_string = solution(random_number)\r\n    lines = output.strip().split('\\n')\r\n    expected_lines = expected_string.strip().split('\\n')\r\n\r\n    #Exactly correct\r\n    if output.strip() == expected_string.strip():\r\n        print(\"CORRECT\")\r\n        score += 100\r\n    #Mostly correct but added an extra value or included one less value: -2 points\r\n    elif output.strip().split('\\n') == expected_lines[:-1] or \\\r\n         output.strip().split('\\n')[:-1] == expected_lines:\r\n        print(\"INCORRECT.  Expected:\\n\"+expected_string)\r\n        score+=90\r\n    else:\r\n        print(\"INCORRECT.  Expected:\\n\"+expected_string)\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 182, "problem_id": "a2_3_seventeen", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with program that gets a number from the user and\nstores it in a variable called **starting_number**.  \n\nWrite a program that prints all of the numbers between **starting_number** and\n**0** (inclusive), counting down by **17** each time.\n\n\n\nFor example, if the user types **45** , your program should print:\n\n    \n    \n    45  \n    28  \n    11\n\nSimilarly, if the user types **51** , your program should print:\n\n    \n    \n    51  \n    34  \n    17  \n    0\n\nYou may assume that the user will only enter positive numbers.\n\n\n\n**HINT:**\n\n  * This problem can be solved using either a **for** or **while** loop.\n\n\n", "code": "\nstarting_number = int(input(\"Enter a number: \"))\n\nwhile starting_number >= 0:\n    print(starting_number)\n    starting_number -= 17\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef solution(starting_num):\r\n    result = ''\r\n    i = starting_num\r\n    \r\n    while i >= 0:\r\n    \r\n        result += str(i) + \"\\n\"\r\n        \r\n        i = i - 17\r\n    return result\r\n\r\n\r\ndef test_passed():    \r\n    score = 0\r\n    random_number = 102 + 17 * random.randint(1, 20)\r\n    \r\n    output, error = autograder.run_script(\"a2_3_seventeen.py\", [random_number])\r\n    expected_string = solution(random_number)\r\n    lines = output.strip().split('\\n')\r\n    expected_lines = expected_string.strip().split('\\n')\r\n\r\n    #Exactly correct\r\n    if output.strip() == expected_string.strip():\r\n        print(\"CORRECT\")\r\n        score += 100\r\n    #Mostly correct but added an extra value or included one less value: -2 points\r\n    elif output.strip().split('\\n') == expected_lines[:-1] or \\\r\n         output.strip().split('\\n')[:-1] == expected_lines:\r\n        print(\"INCORRECT.  Expected:\\n\"+expected_string)\r\n        score+=90\r\n    else:\r\n        print(\"INCORRECT.  Expected:\\n\"+expected_string)\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 183, "problem_id": "a2_3_fourty_two", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with program that gets a number from the user and\nstores it in a variable called  **starting_number**.\n\nWrite a program that prints all of the numbers between  **starting_number**\nand  **0**  (inclusive), counting down by **42** each time.\n\n\n\nFor example, if the user types  **228** , your program should print:\n\n    \n    \n    228  \n    186  \n    144  \n    102  \n    60  \n    18\n\nSimilarly, if the user types **106** , your program should print:\n\n    \n    \n    106  \n    64  \n    22\n\nYou may assume that the user will only enter positive numbers.\n\n\n\n**HINT:**\n\n  * This problem can be solved using either a  **for**  or  **while**  loop.\n\n\n", "code": "\nstarting_number = int(input(\"Enter a number: \"))\n\nwhile starting_number >= 0:\n    print(starting_number)\n    starting_number -= 42\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef solution(starting_num):\r\n    result = ''\r\n    i = starting_num\r\n    \r\n    while i >= 0:\r\n    \r\n        result += str(i) + \"\\n\"\r\n        \r\n        i = i - 42\r\n    \r\n    return result\r\n\r\n\r\ndef test_passed():    \r\n    score = 0\r\n    random_number = 85 + 42 * random.randint(1, 20)\r\n    \r\n    output, error = autograder.run_script(\"a2_3_fourty_two.py\", [random_number])\r\n    expected_string = solution(random_number)\r\n    lines = output.strip().split('\\n')\r\n    expected_lines = expected_string.strip().split('\\n')\r\n\r\n    if output.strip() == expected_string.strip():\r\n        print(\"CORRECT\")\r\n        score += 100\r\n    else:\r\n        print(\"INCORRECT.  Expected:\")\r\n        print(expected_string)\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 184, "problem_id": "a2_3_countdown", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with program that gets a number from the user and\nstores it in a variable called  **starting_number**.\n\nWrite a program that prints all of the numbers between  **starting_number**\nand **0** (inclusive), counting down by **13** each time.\n\n\n\nFor example, if the user types **45** , your program should print:\n\n    \n    \n    45  \n    32  \n    19  \n    6\n\nSimilarly, if the user types **39** , your program should print:\n\n    \n    \n    39  \n    26  \n    13  \n    0\n\nYou may assume that the user will only enter positive numbers.\n\n\n\n**HINT:**\n\n  * This problem can be solved using either a  **for**  or  **while**  loop.\n\n\n", "code": "\nstarting_number = int(input(\"Enter a number: \"))\n\nfor number in range(starting_number, -1, -13):\n    print(number)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef solution(starting_num):\r\n    result = ''\r\n    i = starting_num\r\n    \r\n    while i >= 0:\r\n    \r\n        result += str(i) + \"\\n\"\r\n        \r\n        i = i - 13\r\n    \r\n    return result\r\n\r\n\r\ndef test_passed():    \r\n    score = 0\r\n    random_number = 85 + 13 * random.randint(1, 20)\r\n    \r\n    output, error = autograder.run_script(\"a2_3_countdown.py\", [random_number])\r\n    expected_string = solution(random_number)\r\n    lines = output.strip().split('\\n')\r\n    expected_lines = expected_string.strip().split('\\n')\r\n\r\n    if output.strip() == expected_string.strip():\r\n        print(\"CORRECT\")\r\n        score += 100\r\n    else:\r\n        print(\"INCORRECT.  Expected:\")\r\n        print(expected_string)\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 185, "problem_id": "a2_3_19", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with program that gets a number from the user and\nstores it in a variable called  **starting_number**.\n\nWrite a program that prints all of the numbers between  **starting_number**\nand **0** (inclusive), counting down by **19** each time.\n\n\n\nFor example, if the user types **45** , your program should print:\n\n    \n    \n    45  \n    26  \n    7\n\nSimilarly, if the user types **57** , your program should print:\n\n    \n    \n    57  \n    38  \n    19  \n    0  \n      \n    \n\nYou may assume that the user will only enter positive numbers.\n\n\n\n**HINT:**\n\n  * This problem can be solved using either a  **for**  or  **while**  loop.\n\n\n", "code": "\nstarting_number = int(input(\"Enter a number: \"))\n\nwhile starting_number >= 0:\n    print(starting_number)\n    starting_number -= 19\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef solution(starting_num):\r\n    result = ''\r\n    i = starting_num\r\n    \r\n    while i >= 0:\r\n    \r\n        result += str(i) + \"\\n\"\r\n        \r\n        i = i - 19\r\n    \r\n    return result\r\n\r\n\r\ndef test_passed():    \r\n    score = 0\r\n    random_number = 85 + 19 * random.randint(1, 20)\r\n    \r\n    output, error = autograder.run_script(\"a2_3_19.py\", [random_number])\r\n    expected_string = solution(random_number)\r\n    lines = output.strip().split('\\n')\r\n    expected_lines = expected_string.strip().split('\\n')\r\n\r\n    if output.strip() == expected_string.strip():\r\n        print(\"CORRECT\")\r\n        score += 100\r\n    else:\r\n        print(\"INCORRECT.  Expected:\")\r\n        print(expected_string)\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 186, "problem_id": "a2_2_unladen", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nThe airspeed velocity of an unladen swallow can be estimated using the\nfollowing formula:  \n  \n\n`SPEED = 3 * F * A`\n\n\n\nIn this formula:\n\n  * **F** is the number of wing flaps per minute (integer)\n  * **A** is the distance the wing travels (up and down) per wing flap (floating point number in meters)\n\n\n\nWrite a function called **speed_of_unladen_swallow** that takes **F** and\n**A** as parameters (in that order), and **returns** the speed in meters per\nminute.\n\n\n\n**NOTES:**\n\n  * You do NOT need to call this function. Simply define it.\n\n\n\n\n", "code": "\ndef speed_of_unladen_swallow(F, A):\n    return 3 * F * A\n", "testcase": "from cs110 import autograder\r\nimport a2_2_unladen\r\n\r\ndef solution(S, A):\r\n    return 3 * S * A\r\n\r\n\r\ndef test_passed():    \r\n    score = 0\r\n    \r\n    print(\"Feedback:\")\r\n    \r\n    if 'speed_of_unladen_swallow' in dir(a2_2_unladen):\r\n        print(\"Function Defined\")\r\n        score += 50\r\n    else:\r\n        print(\"Function Not Defined\")\r\n    \r\n    if 'speed_of_unladen_swallow' in dir(a2_2_unladen) and \\\r\n        abs(a2_2_unladen.speed_of_unladen_swallow(15, 0.22) - solution(15, 0.22)) < 0.001:\r\n        print(\"Function Returns Correct Value\")\r\n        score += 50\r\n    else:\r\n        print(\"Function Does NOT Return the Correct Value\")\r\n\r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 187, "problem_id": "a2_2_stride", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou can calculate a person's speed using the following formula:\n\n`Speed = Stride * SPM * .011`\n\n\n\nIn this formula:\n\n  * **Stride** in inches (float)\n  * **SPM** is strides per minute (integer)\n\n\n\nWrite a function called **person_speed** that takes **Stride**  and **SPM**\nas parameters (in that order), and **returns** the speed.\n\n\n\n**NOTES:**\n\n  * You do NOT need to call this function. Simply define it\n\n\n", "code": "\ndef person_speed(Stride, SPM):\n    speed = Stride * SPM * .011\n    return speed\n", "testcase": "from cs110 import autograder\r\nimport a2_2_stride\r\n\r\ndef solution(S, SPM):\r\n    return S * SPM * .011\r\n\r\n\r\ndef test_passed():    \r\n    score = 0\r\n    \r\n    print(\"Feedback:\")\r\n    \r\n    if 'person_speed' in dir(a2_2_stride):\r\n        print(\"Function Defined\")\r\n        score += 50\r\n    else:\r\n        print(\"Function Not Defined\")\r\n    \r\n    if 'person_speed' in dir(a2_2_stride) and a2_2_stride.person_speed(32, 60) == solution(32, 60):\r\n        print(\"Function Returns Correct Value\")\r\n        score += 50\r\n    else:\r\n        print(\"Function Does NOT Return the Correct Value\")\r\n\r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 188, "problem_id": "a2_2_speed", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou can calculate how fast a vehicle is moving in feet per minute using the\nfollowing formula:  \n  \n\n`SPEED = RPM * Cir / 12`\n\n\n\nIn this formula:\n\n  * **RPM** is the rotations per minute of the wheel (integer)\n  * **Cir** is the Circumference of the wheel (floating point number in inches)\n\n\n\nWrite a function called **speed_fpm** that takes **RPM** and **Cir** as\nparameters (in that order), and **returns** the speed in feet per minute.\n\n\n\n**NOTES:**\n\n  * You do NOT need to call this function. Simply define it.\n\n\n", "code": "\ndef speed_fpm(RPM, Cir):\n    SPEED = RPM * Cir / 12\n    return SPEED\n", "testcase": "from cs110 import autograder\r\nimport a2_2_speed\r\n\r\ndef solution(RPM, Cir):\r\n    return RPM * Cir / 12\r\n\r\n\r\ndef test_passed():    \r\n    score = 0\r\n    \r\n    print(\"Feedback:\")\r\n    \r\n    if 'speed_fpm' in dir(a2_2_speed):\r\n        print(\"Function Defined\")\r\n        score += 50\r\n    else:\r\n        print(\"Function Not Defined\")\r\n    \r\n    if 'speed_fpm' in dir(a2_2_speed) and a2_2_speed.speed_fpm(10, 6.6) == solution(10, 6.6):\r\n        print(\"Function Returns Correct Value\")\r\n        score += 50\r\n    else:\r\n        print(\"Function Does NOT Return the Correct Value\")\r\n\r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 189, "problem_id": "a2_2_hp", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM** **STATEMENT:  \n**\n\nYou can calculate a car's horsepower by using the following formula:\n\n`Horsepower = RPM * Torque / 5252`\n\n\n\nIn this formula:\n\n  * **RPM** is rotations per minute (integer)\n  * **Torque**  in foot pounds (floating point number)\n\n\n\nWrite a function called  **horsepower**  that takes  **RPM**  and  **Torque**\nas parameters (in that order), and  **returns** the calculated horsepower.\n\n\n\n**NOTES:**\n\n  * You do NOT need to call this function. Simply define it\n\n\n", "code": "\ndef horsepower(RPM, Torque):\n    return RPM * Torque / 5252\n", "testcase": "from cs110 import autograder\r\nimport a2_2_hp\r\n\r\ndef solution(RPM, Torque):\r\n    return RPM*Torque/5252\r\n\r\n\r\ndef test_passed():    \r\n    score = 0\r\n    \r\n    print(\"Feedback:\")\r\n    \r\n    if 'horsepower' in dir(a2_2_hp):\r\n        print(\"Function Defined\")\r\n        score += 50\r\n    else:\r\n        print(\"Function Not Defined\")\r\n    \r\n    if 'horsepower' in dir(a2_2_hp) and a2_2_hp.horsepower(4000, 600) == solution(4000, 600):\r\n        print(\"Function Returns Correct Value\")\r\n        score += 50\r\n    else:\r\n        print(\"Function Does NOT Return the Correct Value\")\r\n\r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 190, "problem_id": "a2_2_bmi", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou can calculate a person's body mass index using the following formula:  \n  \n\n`BMI = Weight / Height2 * 703`\n\n\n\nIn this formula:\n\n  * **height** in inches (integer)\n  * **weight** in pounds (floating point number)\n\n\n\nWrite a function called **body_mass_index** that takes **height** and\n**weight** as parameters (in that order), and **returns**  the body mass\nindex.\n\n\n\n**NOTES:**\n\n  * You do NOT need to call this function. Simply define it\n\n\n", "code": "\ndef body_mass_index(height, weight):\n    bmi = weight / (height ** 2) * 703\n    return bmi\n", "testcase": "from cs110 import autograder\r\nimport a2_2_bmi\r\n\r\ndef solution(H, W):\r\n    return W/(H**2) * 703\r\n\r\n\r\ndef test_passed():    \r\n    score = 0\r\n    \r\n    print(\"Feedback:\")\r\n    \r\n    if 'body_mass_index' in dir(a2_2_bmi):\r\n        print(\"Function Defined\")\r\n        score += 50\r\n    else:\r\n        print(\"Function Not Defined\")\r\n    \r\n    if 'body_mass_index' in dir(a2_2_bmi) and a2_2_bmi.body_mass_index(15, 0.22) == solution(15, 0.22):\r\n        print(\"Function Returns Correct Value\")\r\n        score += 50\r\n    else:\r\n        print(\"Function Does NOT Return the Correct Value\")\r\n\r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 191, "problem_id": "a2_1_surface", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a function called calculate_surface, which takes\ntwo parameters:\n\n  * **radius**\n  * **Pi**\n\nCall this function and pass it **5**  for **radius** , and\n**3.141592653589793** for **Pi**. Store the result in a variable called\n**result**. Do not print. Simply call the function and store the returned\nvalue in the variable **result**.\n\n\n", "code": "\ndef calculate_surface(radius, Pi):\n    return Pi * radius**2\n\nradius = 5\nPi = 3.141592653589793\n\nresult = calculate_surface(radius, Pi)\n", "testcase": "from cs110 import autograder\nfrom a2_1_surface import *  \n\ndef calculate_surface(radius, Pi):\n    return 4*Pi*radius**2\n\n\ndef test_passed():\n    solution = calculate_surface(5,  3.141592653589793 )\n    \n    print(\"Feedback:\")\n        \n    if 'result' in globals() and abs(result - solution) < 0.1:\n        print(\"PASSED\")\n        return 100\n    elif 'result' not in globals():\n        print(\"FAILED.  Could not find variable 'result'\")\n    elif result != solution:\n        print(\"FAILED.  Variable 'result' has the wrong value \" + str(result))\n    else:\n        print(\"FAILED.  Something unexpected happened.\")\n    \n    return 0\n\n        \n# Runs your code in an IDE (for testing purposes)\nif __name__ == '__main__':    \n    result = test_passed()\n    print(\"Unit Test Returned:\", result)\n    \n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 192, "problem_id": "a2_1_future_value", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a function called calculate_future_value, which\ntakes two parameters:\n\n  * **present_value**\n  * **years**\n\nCall this function and pass it **50000**  for **present_value** , and  **25\n**for  **years**. Store the result in a variable called  **result**. Do not\nprint. Simply call the function and store the returned value in the variable\n**result**.\n\n\n", "code": "\ndef calculate_future_value(present_value, years):\n    future_value = present_value * (1 + 0.07) ** years\n    return future_value\n\npresent_value = 50000\nyears = 25\n\nresult = calculate_future_value(present_value, years)\n", "testcase": "from cs110 import autograder\nfrom a2_1_future_value import *  \n\ndef calculate_future_value(present_value, years):\n    return present_value * (1 + 0.05/12) ** (years * 12)\n\n\ndef test_passed():\n    solution = calculate_future_value(50000, 25)\n    \n    print(\"Feedback:\")\n        \n    if 'result' in globals() and abs(result - solution) < 0.1:\n        print(\"PASSED\")\n        return 100\n    elif 'result' not in globals():\n        print(\"FAILED.  Could not find variable 'result'\")\n    elif result != solution:\n        print(\"FAILED.  Variable 'result' has the wrong value \" + str(result))\n    else:\n        print(\"FAILED.  Something unexpected happened.\")\n    \n    return 0\n\n        \n# Runs your code in an IDE (for testing purposes)\nif __name__ == '__main__':    \n    test_case_result = test_passed()\n    print(\"Unit Test Returned:\", test_case_result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 193, "problem_id": "a2_1_equation", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a function called calculate_equation, which takes\ntwo parameters:\n\n  * **value**\n  * **C**\n\nCall this function and pass it **355000** for **value** , and **2.99 * 10**\n**8**  for **C**. Store the result in a variable called **result.** Do not\nprint. Simply call the function, and store the returned value in the variable\n**result**.\n\n\n", "code": "\ndef calculate_equation(value, C):\n    return value * C\n\nresult = calculate_equation(355000, 2.99 * 10**8)\n", "testcase": "from cs110 import autograder\r\nfrom a2_1_equation import *  \r\n\r\ndef calculate_equation(value, C):\r\n    return value * (1.0 / 1 - (value**2)/(C*2))\r\n\r\n\r\ndef test_passed():\r\n    solution = calculate_equation(35500, 29900)\r\n    solution_prev = 35500 * (1.0 / (1 - (35500**2)/(29900**2))**0.5)\r\n    \r\n    print(\"Feedback:\")\r\n        \r\n    if 'result' in globals() and (abs(result - solution) < 0.1 or abs(result - solution_prev) < 0.1):\r\n        print(\"PASSED\")\r\n        return 100\r\n    elif 'result' not in globals():\r\n        print(\"FAILED.  Could not find variable 'result'\")\r\n    elif result != solution:\r\n        print(\"FAILED.  Variable 'result' has the wrong value \" + str(result))\r\n    else:\r\n        print(\"FAILED.  Something unexpected happened.\")\r\n    \r\n    return 0\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    test_case_result = test_passed()\r\n    print(\"Unit Test Returned:\", test_case_result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 194, "problem_id": "a2_1_calculate", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a function called calculate_equation, which takes\ntwo parameters:\n\n  * **value**\n  * **C**\n\nCall this function and pass it  **278**  for  **value** , and  **6.4 * 2 10**\nfor  **C**. Store the result in a variable called  **result**. Do not print.\nSimply call the function, and store the returned value in the variable\n**result**.\n\n\n", "code": "", "testcase": "from cs110 import autograder\nfrom a2_1_calculate import *  \n\ndef calculate_equation(value):\n    C =  6.4*2**10\n    return value * (1.0 / (1 - (value**2)/(C**2))**0.5)\n\n\ndef test_passed():\n    solution = calculate_equation(278)\n    \n    print(\"Feedback:\")\n        \n    if 'result' in globals() and abs(result - solution) < 0.1:\n        print(\"PASSED\")\n        return 100\n    elif 'result' not in globals():\n        print(\"FAILED.  Could not find variable 'result'\")\n    elif result != solution:\n        print(\"FAILED.  Variable 'result' has the wrong value \" + str(result))\n        return 50\n    else:\n        print(\"FAILED.  Something unexpected happened.\")\n    \n    return 0\n\n        \n# Runs your code in an IDE (for testing purposes)\nif __name__ == '__main__':    \n    ans = test_passed()\n    print(\"Unit Test Returned:\", ans)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 195, "problem_id": "a2_1_calculate_volume", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a function called calculate_volume, which takes\ntwo parameters:\n\n  * **radius**\n  * **Pi**\n\nCall this function and pass it **15**  for  **radius** , and\n**3.141592653589793  **for  **Pi**. Store the result in a variable called\n**result**. Do not print. Simply call the function and store the returned\nvalue in the variable  **result**.\n\n\n", "code": "\ndef calculate_volume(radius, Pi):\n    return (4/3) * Pi * (radius ** 3)\n\nresult = calculate_volume(15, 3.141592653589793)\n", "testcase": "from cs110 import autograder\nfrom a2_1_calculate_volume import *  \n\ndef calculate_volume(radius, pi):\n    return pi * 4/3 * radius **3\n\n\ndef test_passed():\n    solution = calculate_volume(15, 3.1415)\n    \n    print(\"Feedback:\")\n        \n    if 'result' in globals() and abs(result - solution) < 0.1:\n        print(\"PASSED\")\n        return 100\n    elif 'result' not in globals():\n        print(\"FAILED.  Could not find variable 'result'\")\n    elif result != solution:\n        print(\"FAILED.  Variable 'result' has the wrong value \" + str(result))\n    else:\n        print(\"FAILED.  Something unexpected happened.\")\n    \n    return 0\n\n        \n# Runs your code in an IDE (for testing purposes)\nif __name__ == '__main__':    \n    test_case_result = test_passed()\n    print(\"Unit Test Returned:\", test_case_result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 196, "problem_id": "a1_7_pilot_quals", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nC-130 Pilot qualifications usually depend on a pilot's flight experience in\nterms of flight hours.\n\n**C-130 Pilot Qualification** | **Flight Hours**  \n---|---  \nUpgrade Pilot | 600  \nAircraft Commander | 800  \nFormation Lead | 1000  \nInstructor Pilot | 1250  \nEvaluator Pilot | 1500  \n  \n  \nWrite a Python program that asks the user to enter the number of flight hours\nthey currently have (does not need to be a whole number). Then, referencing\nthe table above, print out all qualifications they should have achieved in the\naircraft (one per line). If the their experience in the C-130 is more than 600\nflight hours, output \"Co-Pilot\".\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input** | 1996 | 1156.7 | 535.4  \n**Output** |\n\nUpgrade Pilot  \nAircraft Commander  \nFormation Lead  \nInstructor Pilot  \nEvaluator Pilot\n\n|\n\nUpgrade Pilot  \nAircraft Commander  \nFormation Lead\n\n| Co-Pilot  \n  \nNOTE: The qualifications can be listed in any order, so long as only the ones\nin range are printed.\n\n\n", "code": "\nflight_hours = float(input(\"Enter the number of flight hours: \"))\n\nif flight_hours >= 600:\n    print(\"Upgrade Pilot\")\nif flight_hours >= 800:\n    print(\"Aircraft Commander\")\nif flight_hours >= 1000:\n    print(\"Formation Lead\")\nif flight_hours >= 1250:\n    print(\"Instructor Pilot\")\nif flight_hours >= 1500:\n    print(\"Evaluator Pilot\")\nif flight_hours > 600:\n    print(\"Co-Pilot\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\n\r\ndef solution(hours):\r\n    result = \"\"\r\n\r\n    if hours < 600:\r\n        result += \"Co-Pilot\\n\"\r\n\r\n    if hours >= 600:\r\n        result += \"Upgrade Pilot\\n\"\r\n\r\n    if hours >= 800:\r\n        result += \"Aircraft Commander\\n\"\r\n        \r\n    if hours >= 1000:\r\n        result += \"Formation Lead\\n\"\r\n\r\n    if hours >=1250:\r\n        result += \"Instructor Pilot\\n\"\r\n\r\n    if hours >= 1500:\r\n        result += \"Evaluator Pilot\\n\"\r\n\r\n    \r\n    return result.strip().split('\\n')\r\n\r\n\r\ndef run_test(hours):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"------------------------------\")\r\n    print(\"Test\", num_tests_run, \"-\", hours, \"hours\")\r\n    print(\"------------------------------\")\r\n    \r\n    output, error_message = autograder.run_script(\"a1_7_pilot_quals.py\", [hours], True)\r\n    lines = output.strip().split(\"\\n\")\r\n    expected_answer = solution(hours)\r\n    \r\n    count = 0\r\n    \r\n    for answer in expected_answer:\r\n        if answer in lines:\r\n            print(\"Expecting\", answer, \" . . . FOUND!\")\r\n            count += 1\r\n        else:\r\n            print(\"Expecting\", answer, \" . . . MISSING!\")\r\n            \r\n    if count == len(expected_answer) and len(expected_answer) == len(lines):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    elif len(expected_answer) < len(lines):\r\n        print(\"Problems Detected - Your output has more lines than expected.\\n\")\r\n    else:\r\n        print(\"Problems Detected - Your output is missing one or more expected outputs.\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(0, 600), 1))\r\n    run_test(600)\r\n    run_test(round(random.uniform(600, 799), 1))\r\n    run_test(800)\r\n    run_test(round(random.uniform(800, 999), 1))\r\n    run_test(1000)\r\n    run_test(round(random.uniform(1000, 1249), 1))\r\n    run_test(1250)\r\n    run_test(round(random.uniform(1250, 1499), 1))\r\n    run_test(1500)\r\n    run_test(2750)\r\n    \r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Testbench (to run on outside of zyBooks)\r\nif __name__ == '__main__':\r\n    class Console:\r\n        def write(self, txt):\r\n            print(txt, end='')\r\n    \r\n    test_passed()\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 197, "problem_id": "a1_7_payload", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nThe USAF is known for its massive cargo transport capabilities. Below are the\nnames of 5 aircraft, as well as their maximum payload capacity\n\n\n\n**Cargo Aircraft**\n\n|\n\n**Maximum Load (inclusive, in Lbs. )**  \n  \n---|---  \n  \nC-5 Galaxy\n\n|\n\n285000  \n  \nC-17 Globemaster\n\n|\n\n170900  \n  \nKC-10 Extender\n\n|\n\n169000  \n  \nC-130 Hercules\n\n|\n\n42000  \n  \nV-22 Osprey\n\n|\n\n6000  \n  \n  \nWrite a Python program that asks the user to enter the payload weight (in\nLbs.) that needs to be moved. Then, referencing the table, print out all of\nthe Aircraft that could potentially carry that payload (one per line). If no\naircraft can carry the payload, output \"Too Heavy for Airlift\".\n\n\n\n**EXAMPLES:**\n\n  |\n\n**Example 1**\n\n|\n\n**Example 2**\n\n|\n\n**Example 3**  \n  \n---|---|---|---  \n  \n**Input**\n\n|\n\n150000\n\n|\n\n250000\n\n|\n\n300000  \n  \n**Output**\n\n|\n\nC-5 Galaxy\n\nC-17 Globemaster\n\nKC-10 Extender\n\n|\n\nC-5 Galaxy\n\n|\n\nToo Heavy for Airlift  \n  \nNOTE: The aircraft can be listed in any order, so long as only the ones\ncapable of the lift are printed.\n\n\n", "code": "\npayload_weight = int(input(\"Enter the payload weight (in Lbs.): \"))\n\naircraft = {\n    \"C-5 Galaxy\": 285000,\n    \"C-17 Globemaster\": 170900,\n    \"KC-10 Extender\": 169000,\n    \"C-130 Hercules\": 42000,\n    \"V-22 Osprey\": 6000\n}\n\ncapable_aircraft = []\n\nfor aircraft_name, max_payload in aircraft.items():\n    if payload_weight <= max_payload:\n        capable_aircraft.append(aircraft_name)\n\nif len(capable_aircraft) == 0:\n    print(\"Too Heavy for Airlift\")\nelse:\n    for aircraft_name in capable_aircraft:\n        print(aircraft_name)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\n\r\ndef solution(payload_weight):\r\n    result = \"\"\r\n    \r\n    if payload_weight <= 6000:\r\n        result += \"V-22 Osprey\\n\"\r\n\r\n    if payload_weight <= 42000:\r\n        result += \"C-130 Hercules\\n\"\r\n        \r\n    if payload_weight <= 169000:\r\n        result += \"KC-10 Extender\\n\"\r\n\r\n    if payload_weight <= 170900:\r\n        result += \"C-17 Globemaster\\n\"\r\n\r\n    if payload_weight <= 285000:\r\n        result += \"C-5 Galaxy\\n\"\r\n\r\n    if payload_weight > 285000:\r\n        result += \"Too Heavy for Airlift\\n\"\r\n    \r\n    return result.strip().split('\\n')\r\n\r\n\r\ndef run_test(payload_weight):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"------------------------------\")\r\n    print(\"Test\", num_tests_run, \"-\", payload_weight, \"lbs\")\r\n    print(\"------------------------------\")\r\n    \r\n    output, error_message = autograder.run_script(\"a1_7_payload.py\", [payload_weight], True)\r\n    lines = output.strip().split(\"\\n\")\r\n    expected_answer = solution(payload_weight)\r\n    \r\n    count = 0\r\n    \r\n    for answer in expected_answer:\r\n        if answer in lines:\r\n            print(\"Expecting\", answer, \" . . . FOUND!\")\r\n            count += 1\r\n        else:\r\n            print(\"Expecting\", answer, \" . . . MISSING!\")\r\n            \r\n    if count == len(expected_answer) and len(expected_answer) == len(lines):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    elif len(expected_answer) < len(lines):\r\n        print(\"Problems Detected - Your output has more lines than expected.\\n\")\r\n    else:\r\n        print(\"Problems Detected - Your output is missing one or more expected outputs.\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(0, 5999), 1))\r\n    run_test(6000)\r\n    run_test(round(random.uniform(6001, 41999), 1))\r\n    run_test(42000)\r\n    run_test(round(random.uniform(42001, 168999), 1))\r\n    run_test(169000)\r\n    run_test(round(random.uniform(169001, 170899), 1))\r\n    run_test(170900)\r\n    run_test(round(random.uniform(170901, 284999), 1))\r\n    run_test(285000)\r\n    run_test(300000)\r\n    \r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Testbench (to run on outside of zyBooks)\r\nif __name__ == '__main__':\r\n    class Console:\r\n        def write(self, txt):\r\n            print(txt, end='')\r\n    \r\n    test_passed()", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 198, "problem_id": "a1_7_missilethreat", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nAccording to intelligence reports, the North Korean military uses at least 5\ndifferent classes of Ballistic Missiles. The names of these missiles, as well\nas their maximum theoretical range, are provided below:\n\n**Missile Class** | **Maximum Range (inclusive, in Kilometers)**  \n---|---  \nHwasong-6 | 500  \nKN-11 | 1200  \nMusudan BM-25 | 4000  \nHwasong-14 | 8000  \nTaepodong-2 | 12000  \n  \n  \nWrite a Python program that asks the user to enter the distance to a potential\ntarget (in Kilometers). Then, referencing the table, print out all of the\nMissile Classes that could potentially reach the target (one per line). If no\nmissiles are in range, output \"Not in range\".\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input** | 1800 | 8000 | 18000  \n**Output** | Musudan BM-25  \nHwason-14  \nTaepodong-2 |\n\nHwasong-14  \nTaepodong-2\n\n| Not in range  \n  \nNOTE: The missiles can be listed in any order, so long as only the ones in\nrange are printed.\n\n\n", "code": "\n# List of missile classes and their maximum range\nmissiles = {\n    \"Hwasong-6\": 500,\n    \"KN-11\": 1200,\n    \"Musudan BM-25\": 4000,\n    \"Hwasong-14\": 8000,\n    \"Taepodong-2\": 12000\n}\n\n# Ask the user to enter the distance to the target\ntarget_distance = int(input(\"Enter the distance to the target (in Kilometers): \"))\n\n# Iterate over the missiles and check if the distance is within range\nin_range_missiles = []\nfor missile, range in missiles.items():\n    if target_distance <= range:\n        in_range_missiles.append(missile)\n\n# Print the missiles that are in range, or \"Not in range\" if no missiles are in range\nif in_range_missiles:\n    for missile in in_range_missiles:\n        print(missile)\nelse:\n    print(\"Not in range\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\n\r\ndef solution(target_range):\r\n    result = \"\"\r\n    \r\n    if target_range <= 500:\r\n        result += \"Hwasong-6\\n\"\r\n\r\n    if target_range <= 1200:\r\n        result += \"KN-11\\n\"\r\n        \r\n    if target_range <= 4000:\r\n        result += \"Musudan BM-25\\n\"\r\n\r\n    if target_range <= 8000:\r\n        result += \"Hwasong-14\\n\"\r\n\r\n    if target_range <= 12000:\r\n        result += \"Taepodong-2\\n\"\r\n\r\n    if target_range > 12000:\r\n        result += \"Not in range\\n\"\r\n    \r\n    return result.strip().split('\\n')\r\n\r\n\r\ndef run_test(target_range):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"------------------------------\")\r\n    print(\"Test\", num_tests_run, \"-\", target_range, \"kilometers\")\r\n    print(\"------------------------------\")\r\n    \r\n    output, error_message = autograder.run_script(\"a1_7_missilethreat.py\", [target_range], True)\r\n    lines = output.strip().split(\"\\n\")\r\n    expected_answer = solution(target_range)\r\n    \r\n    count = 0\r\n    \r\n    for answer in expected_answer:\r\n        if answer in lines:\r\n            print(\"Expecting\", answer, \" . . . FOUND!\")\r\n            count += 1\r\n        else:\r\n            print(\"Expecting\", answer, \" . . . MISSING!\")\r\n            \r\n    if count == len(expected_answer) and len(expected_answer) == len(lines):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    elif len(expected_answer) < len(lines):\r\n        print(\"Problems Detected - Your output has more lines than expected.\\n\")\r\n    else:\r\n        print(\"Problems Detected - Your output is missing one or more expected outputs.\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(0, 499), 1))\r\n    run_test(500)\r\n    run_test(round(random.uniform(501, 1199), 1))\r\n    run_test(1200)\r\n    run_test(round(random.uniform(1201, 3999), 1))\r\n    run_test(4000)\r\n    run_test(round(random.uniform(4001, 7999), 1))\r\n    run_test(8000)\r\n    run_test(round(random.uniform(8001, 11999), 1))\r\n    run_test(12000)\r\n    run_test(12001)\r\n    \r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Testbench (to run on outside of zyBooks)\r\nif __name__ == '__main__':\r\n    class Console:\r\n        def write(self, txt):\r\n            print(txt, end='')\r\n    \r\n    test_passed()", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 199, "problem_id": "a1_7_evacuation", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \nPROBLEM STATEMENT:  \n\nTerrorist groups in the past have created improvised explosive devices in\nvarious shapes and sizes. According to the National Counterterrorism Center,\nthe following evacuation distances are appropriate for certain explosive\ndevices.\n\nExplosive Container\n\n|\n\nEvacuation Distance (inclusive, in Feet)  \n  \n---|---  \n  \nPipe Bomb\n\n|\n\n850  \n  \nSuitcase Bomb\n\n|\n\n1850  \n  \nSedan\n\n|\n\n2000  \n  \nCargo Van\n\n|\n\n2750  \n  \nSemi-Trailer\n\n|\n\n7000  \n  \n  \nWrite a Python program that asks the user to enter a distance to a device (in\nfeet). Then, referencing the table, print out all of the explosive devices\nthat could potentially reach a target at the specified distance (one per\nline). If no explosives can reach the specified distance, output \"Not in\nrange\".\n\nEXAMPLES:\n\n|\n\nExample 1\n\n|\n\nExample 2\n\n|\n\nExample 3  \n  \n---|---|---|---  \n  \nInput\n\n|\n\n1900\n\n|\n\n2500\n\n|\n\n8000  \n  \nOutput\n\n|\n\nSedan  \nCargo Van  \nSemi-Trailer\n\n|\n\nCargo Van  \nSemi-Trailer\n\n|\n\nNot in range  \n  \nNOTE: The devices can be listed in any order, so long as only the ones in\nrange are printed.\n\n\n", "code": "\nevacuation_distance = int(input(\"Enter the distance to a device (in feet)\"))\n\nif evacuation_distance <= 850:\n    print(\"Pipe Bomb\")\nif evacuation_distance <= 1850:\n    print(\"Suitcase Bomb\")\nif evacuation_distance <= 2000:\n    print(\"Sedan\")\nif evacuation_distance <= 2750:\n    print(\"Cargo Van\")\nif evacuation_distance <= 7000:\n    print(\"Semi-Trailer\")\n    \nif evacuation_distance > 7000:\n    print(\"Not in range\")\n", "testcase": "from cs110 import autograder\nimport random, math\n\nnum_tests_passed = 0\nnum_tests_run = 0\n\n\ndef solution(target_range):\n    result = \"\"\n    \n    if target_range <= 850:\n        result += \"Pipe Bomb\\n\"\n\n    if target_range <= 1850:\n        result += \"Suitcase Bomb\\n\"\n        \n    if target_range <= 2000:\n        result += \"Sedan\\n\"\n\n    if target_range <= 2750:\n        result += \"Cargo Van\\n\"\n\n    if target_range <= 7000:\n        result += \"Semi-Trailer\\n\"\n\n    if target_range > 7000:\n        result += \"Not in range\\n\"\n    \n    return result.strip().split('\\n')\n\n\ndef run_test(target_range):\n    global num_tests_run, num_tests_passed\n        \n    num_tests_run += 1\n    \n    print(\"------------------------------\")\n    print(\"Test\", num_tests_run, \"-\", target_range, \"feet\")\n    print(\"------------------------------\")\n    \n    output, error_message = autograder.run_script(\"a1_7_evacuation.py\", [target_range], True)\n    lines = output.strip().split(\"\\n\")\n    expected_answer = solution(target_range)\n    \n    count = 0\n    \n    for answer in expected_answer:\n        if answer in lines:\n            print(\"Expecting\", answer, \" . . . FOUND!\")\n            count += 1\n        else:\n            print(\"Expecting\", answer, \" . . . MISSING!\")\n            \n    if count == len(expected_answer) and len(expected_answer) == len(lines):\n        print(\"SUCCESS!\\n\")\n        num_tests_passed += 1\n    elif len(expected_answer) < len(lines):\n        print(\"Problems Detected - Your output has more lines than expected.\\n\")\n    else:\n        print(\"Problems Detected - Your output is missing one or more expected outputs.\\n\")\n\n\n# Runs the Python script and sees if it passes the test(s)\ndef test_passed():\n    run_test(round(random.uniform(0, 899), 1))\n    run_test(850)\n    run_test(round(random.uniform(851, 1849), 1))\n    run_test(1850)\n    run_test(round(random.uniform(1851, 1999), 1))\n    run_test(2000)\n    run_test(round(random.uniform(2001, 2749), 1))\n    run_test(2750)\n    run_test(round(random.uniform(2751, 7999), 1))\n    run_test(7000)\n    run_test(7001)\n    \n    \n    return round(num_tests_passed * (100 / num_tests_run), 1)\n\n        \n# Testbench (to run on outside of zyBooks)\nif __name__ == '__main__':\n    class Console:\n        def write(self, txt):\n            print(txt, end='')\n    \n    test_passed()\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 200, "problem_id": "a1_7_digitalstorage", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nAssume someone takes hundreds of photos on their smartphone every week. They\nare seeking the best and least expensive alternatives to store/share their\nimages because their phone's storage capacity is limited. Using the table\nbelow, determine which storage options they should consider, assuming each\nimage has an average file size of 6 MB.\n\n\n\n**Storage Option** | **Short Name** | **Number of Images (inclusive)**  \n---|---|---  \nCD-ROM (700 MB) | CD | 116  \nDVD-ROM (4.7 GB) | DVD | 780  \nUSB Thumb Drive (16 GB) | USB Small | 2660  \nUSB Thumb Drive (64 GB) | USB Large | 10600  \nPortable Hard Drive (256 GB) | Portable HDD | 42600  \n  \n  \nWrite a Python program that asks the user to enter the number of images that\nneed to be shared/stored (non-negative, whole number). Then, referencing the\ntable above, print out all the storage options (by Short Name) capable of\nholding that many images (one per line). If no storage options are capable of\nstoring that many images, output \"Consider Cloud Storage\".\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input** | 2000 | 4000 | 45000  \n**Output** | USB Small  \nUSB Large  \nPortable HDD |\n\nUSB Large  \nPortable HDD\n\n| Consider Cloud Storage  \n  \nNOTE: The devices can be listed in any order, so long as only the ones in\nrange are printed.\n\n\n", "code": "\nnum_images = int(input(\"Enter the number of images: \"))\n\n# Check if the number of images is within the range of any storage option\nif 0 <= num_images <= 116:\n    print(\"CD\")\nif 0 <= num_images <= 780:\n    print(\"DVD\")\nif 0 <= num_images <= 2660:\n    print(\"USB Small\")\nif 0 <= num_images <= 10600:\n    print(\"USB Large\")\nif 0 <= num_images <= 42600:\n    print(\"Portable HDD\")\n\n# If no storage options are capable of storing that many images\nif num_images > 42600:\n    print(\"Consider Cloud Storage\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\n\r\ndef solution(num_images):\r\n    result = \"\"\r\n    \r\n    if num_images <= 116:\r\n        result += \"CD\\n\"\r\n\r\n    if num_images <= 780:\r\n        result += \"DVD\\n\"\r\n        \r\n    if num_images <= 2660:\r\n        result += \"USB Small\\n\"\r\n\r\n    if num_images <= 10600:\r\n        result += \"USB Large\\n\"\r\n\r\n    if num_images <= 42600:\r\n        result += \"Portable HDD\\n\"\r\n\r\n    if num_images > 42600:\r\n        result += \"Consider Cloud Storage\\n\"\r\n    \r\n    return result.strip().split('\\n')\r\n\r\n\r\ndef run_test(num_images):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"------------------------------\")\r\n    print(\"Test\", num_tests_run, \"-\", num_images, \"images\")\r\n    print(\"------------------------------\")\r\n    \r\n    output, error_message = autograder.run_script(\"a1_7_digitalstorage.py\", [num_images], True)\r\n    lines = output.strip().split(\"\\n\")\r\n    expected_answer = solution(num_images)\r\n    \r\n    count = 0\r\n    \r\n    for answer in expected_answer:\r\n        if answer in lines:\r\n            print(\"Expecting\", answer, \" . . . FOUND!\")\r\n            count += 1\r\n        else:\r\n            print(\"Expecting\", answer, \" . . . MISSING!\")\r\n            \r\n    if count == len(expected_answer) and len(expected_answer) == len(lines):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    elif len(expected_answer) < len(lines):\r\n        print(\"Problems Detected - Your output has more lines than expected.\\n\")\r\n    else:\r\n        print(\"Problems Detected - Your output is missing one or more expected outputs.\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(int(random.uniform(0, 115)))\r\n    run_test(116)\r\n    run_test(int(random.uniform(117, 779)))\r\n    run_test(780)\r\n    run_test(int(random.uniform(781, 2659)))\r\n    run_test(2660)\r\n    run_test(int(random.uniform(2661, 10599)))\r\n    run_test(10600)\r\n    run_test(int(random.uniform(10601, 42599)))\r\n    run_test(42600)\r\n    run_test(45000)\r\n    \r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Testbench (to run on outside of zyBooks)\r\nif __name__ == '__main__':\r\n    class Console:\r\n        def write(self, txt):\r\n            print(txt, end='')\r\n    \r\n    test_passed()\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 201, "problem_id": "a1_7_broadband", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nChoosing the right broadband speed for your internet connection depends on\nwhich online activities you plan on engaging while online. Using the table\nbelow, determine which activities are possible with a given broadband speed,\ngiven in Kilobits per second (Kbps).\n\n\n\n**Activity** | **Short Name** | **Minimum Broadband Speed  \n(inclusive, in Kbps)**  \n---|---|---  \nSocial Media | Social Media | 1000  \nMultiplayer Gaming | Gaming | 4000  \nHD Video Conferencing | Video Conferencing | 6000  \nFile Downloading | File Downloads | 10000  \nStream Ultra HD 4K Video | HD 4K Video | 25000  \n  \n  \nWrite a Python program that asks the user to enter the broadband speed in\nKbps. Then, referencing the table above, print out all the activities (by\nShort Name) that can be achieved using that speed (one per line). If the\nbroadband speed is less than 1000 Kbps, output \"Upgrade to Broadband\".\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input** | 8500 | 5000 | 750  \n**Output** |\n\nSocial Media  \nGaming  \nVideo Conferencing\n\n|\n\nSocial Media  \nGaming\n\n| Upgrade to Broadband  \n  \nNOTE: The activities can be listed in any order, so long as only the ones in\nrange are printed.\n\n\n", "code": "\nspeed = int(input(\"Enter broadband speed (in Kbps): \"))\n\nif speed >= 25000:\n    print(\"HD 4K Video\")\nif speed >= 10000:\n    print(\"File Downloads\")\nif speed >= 6000:\n    print(\"Video Conferencing\")\nif speed >= 4000:\n    print(\"Gaming\")\nif speed >= 1000:\n    print(\"Social Media\")\nelse:\n    print(\"Upgrade to Broadband\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\n\r\ndef solution(speed):\r\n    result = \"\"\r\n    \r\n    if speed >= 1000:\r\n        result += \"Social Media\\n\"\r\n\r\n    if speed >= 4000:\r\n        result += \"Gaming\\n\"\r\n        \r\n    if speed >= 6000:\r\n        result += \"Video Conferencing\\n\"\r\n\r\n    if speed >= 10000:\r\n        result += \"File Downloads\\n\"\r\n\r\n    if speed >= 25000:\r\n        result += \"HD 4K Video\\n\"\r\n\r\n    if speed < 1000:\r\n        result += \"Upgrade to Broadband\\n\"\r\n    \r\n    return result.strip().split('\\n')\r\n\r\n\r\ndef run_test(speed):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"------------------------------\")\r\n    print(\"Test\", num_tests_run, \"-\", speed, \"Kbps\")\r\n    print(\"------------------------------\")\r\n    \r\n    output, error_message = autograder.run_script(\"a1_7_broadband.py\", [speed], True)\r\n    lines = output.strip().split(\"\\n\")\r\n    expected_answer = solution(speed)\r\n    \r\n    count = 0\r\n    \r\n    for answer in expected_answer:\r\n        if answer in lines:\r\n            print(\"Expecting\", answer, \" . . . FOUND!\")\r\n            count += 1\r\n        else:\r\n            print(\"Expecting\", answer, \" . . . MISSING!\")\r\n            \r\n    if count == len(expected_answer) and len(expected_answer) == len(lines):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    elif len(expected_answer) < len(lines):\r\n        print(\"Problems Detected - Your output has more lines than expected.\\n\")\r\n    else:\r\n        print(\"Problems Detected - Your output is missing one or more expected outputs.\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(0, 999), 1))\r\n    run_test(1000)\r\n    run_test(round(random.uniform(1001, 4999), 1))\r\n    run_test(4000)\r\n    run_test(round(random.uniform(4001, 5999), 1))\r\n    run_test(6000)\r\n    run_test(round(random.uniform(6001, 9999), 1))\r\n    run_test(10000)\r\n    run_test(round(random.uniform(10001, 24999), 1))\r\n    run_test(25000)\r\n    run_test(30000)\r\n    \r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Testbench (to run on outside of zyBooks)\r\nif __name__ == '__main__':\r\n    class Console:\r\n        def write(self, txt):\r\n            print(txt, end='')\r\n    \r\n    test_passed()\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 202, "problem_id": "a1_6_woodshop", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have a personal woodshop and want to easily calculate whether you can\nafford the board materials for a project. It is unlikely you can obtain the\nexact amount of board materials that you may need for the project because wood\nplanks are provided in fixed lengths.\n\nWrite an algorithm that asks for:\n\n  *     * The total length of board materials required for the project\n    * The budget (in dollars--do not worry about the dollar sign)\n\n\n\nYour program should then output:\n\n  *     * The number of boards needed for the project (Hint: use math.ceil(VALUE) to round up to the next full board).\n    * The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)\n    * Either \"Over Budget\" or \"Within Budget\", depending on whether the cost of boards is greater than or not greater than the budget, respectfully.\n\n\n\nAssume your local lumberyard sells each board in **5.33** feet pieces at\n**$45.25** per board. You may assume that all inputs are non-negative numbers.\n\n\n\n**EXAMPLES:**\n\n\n\n  | **Example 1** | **Example 2**  \n---|---|---  \nInput | 26  \n250 |\n\n46  \n300  \n  \nOutput | 5  \n226.25  \nWithin Budget | 9  \n407.25  \nOver Budget  \n  \n\n\n\n", "code": "\nimport math\n\ndef calculate_woodshop_budget():\n    board_length = float(input(\"Enter the total length of board materials required for the project: \"))\n    budget = float(input(\"Enter the budget in dollars: \"))\n\n    board_length_needed = math.ceil(board_length / 5.33)\n    estimated_cost = board_length_needed * 45.25\n\n    if estimated_cost <= budget:\n        result = \"Within Budget\"\n    else:\n        result = \"Over Budget\"\n\n    print(\"Number of boards needed: \", board_length_needed)\n    print(\"Estimated cost: \", estimated_cost)\n    print(result)\n\ncalculate_woodshop_budget()\n", "testcase": "from cs110 import autograder\nimport random, math\n\nnum_tests_passed = 0\nnum_tests_run = 0\n\ndef run_test(total_bf, budget):\n    global num_tests_run, num_tests_passed\n        \n    num_tests_run += 1\n    \n    print(\"----------------------------------\")\n    print(\"Test #\" + str(num_tests_run))\n    print(\"----------------------------------\")\n    \n    total_boards = math.ceil(total_bf/5.33)\n    total_cost = 45.25*total_boards\n    \n    \n    if total_cost > budget:\n        expected_output = \"Over Budget\"\n    else:\n        expected_output = \"Within Budget\"\n    \n    output, error_message = autograder.run_script(\"a1_6_woodshop.py\", [total_bf, budget])\n    \n    lines = output.split(\"\\n\")\n    \n    # Length of Materials\n    if len(lines) >= 1 and autograder.equals(lines[0], total_boards):\n        print(\"Number of Boards Looks Good!\")\n        num_tests_passed += 0.33\n    else:\n        print(\"Incorrect Amount. Expected:\", total_boards)\n\n    # Cost of Materials\n    if len(lines) >= 2 and autograder.equals(lines[1], total_cost):\n        print(\"Cost of Materials Looks Good!\")\n        num_tests_passed += 0.33\n    else:\n        print(\"Incorrect Cost. Expected:\", total_cost)\n        \n    # Cost Analysis\n    if len(lines) >= 3 and lines[2].strip() == expected_output:\n        print(\"Correct Budget Analysis\\n\")\n        num_tests_passed += 0.34\n    else:\n        print(\"Incorrect Budget Analysis. Expected:\", expected_output, \"\\n\")\n\n    return round((num_tests_passed / num_tests_run) * 100.0, 1)\n\n# Runs the Python script and sees if it passes the test(s)\ndef test_passed():\n    for x in range(4):\n        run_test(round(random.uniform(10, 50), 1), random.randint(100, 500))\n    run_test(round(random.uniform(10, 100), 1), 0)\n    \n    return round(num_tests_passed * (100 / num_tests_run), 1)\n\n        \n# Runs your code in an IDE (for testing purposes)\nif __name__ == '__main__':    \n    result = test_passed()\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 203, "problem_id": "a1_6_scuba", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nRecreational SCUBA divers have to plan out how many air tanks they will need\nin order to safely dive. The amount varies per diver because each person\nconsumes air at a different rate. This rate is commonly called Surface Air\nConsumption. You want to figure whether you can afford the air requirements\nfor the trips that you are planning.\n\nWrite an algorithm that asks for:\n\n  *     * The total dive time for the trip in minutes \n    * The air budget (in dollars--do not worry about the dollar sign)\n\n\n\nYour program should then output:\n\n  *     * The number of liters needed for the project.\n    * The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)\n    * Either \"Over Budget\" or \"Within Budget\", depending on whether the cost of compressed air is greater than or not greater than the budget, respectfully.\n\n\n\nAssume that your Surface Air Consumption is **14.5** liters/minute, and that\nair costs **2 cents** per liter. You may assume that all inputs are non-\nnegative numbers.\n\n\n\n**EXAMPLES:**\n\n\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**Input** | 180  \n70 |\n\n120  \n30  \n  \n**Output** | 2610.0  \n52.2  \nWithin Budget | 1740.0  \n34.800000000000004  \nOver Budget  \n  \n\n\n\n", "code": "", "testcase": "from cs110 import autograder\nimport random, math\n\nnum_tests_passed = 0\nnum_tests_run = 0\n\ndef run_test(target_minutes, budget):\n    global num_tests_run, num_tests_passed\n        \n    num_tests_run += 1\n    \n    print(\"----------------------------------\")\n    print(\"Test #\" + str(num_tests_run))\n    print(\"----------------------------------\")\n    \n    \n    total_liters = target_minutes*14.5\n    total_cost = total_liters*.02\n        \n    if total_cost > budget:\n        expected_output = \"Over Budget\"\n    else:\n        expected_output = \"Within Budget\"\n    \n    output, error_message = autograder.run_script(\"a1_6_scuba.py\", [target_minutes, budget])\n    \n    lines = output.split(\"\\n\")\n    \n    # Length of Materials\n    if len(lines) >= 1 and autograder.equals(lines[0], total_liters):\n        print(\"Amount of Air Looks Good!\")\n        num_tests_passed += 0.33\n    else:\n        print(\"Incorrect Amount. Expected:\", total_liters)\n\n    # Cost of Materials\n    if len(lines) >= 2 and autograder.equals(lines[1], total_cost):\n        print(\"Cost of Air Looks Good!\")\n        num_tests_passed += 0.33\n    else:\n        print(\"Incorrect Cost. Expected:\", total_cost)\n        \n    # Cost Analysis\n    if len(lines) >= 3 and lines[2].strip() == expected_output:\n        print(\"Correct Budget Analysis\\n\")\n        num_tests_passed += 0.34\n    else:\n        print(\"Incorrect Budget Analysis. Expected:\", expected_output, \"\\n\")\n\n    return round((num_tests_passed / num_tests_run) * 100.0, 1)\n\n# Runs the Python script and sees if it passes the test(s)\ndef test_passed():\n    for x in range(4):\n        run_test(round(random.uniform(10,100), 1), random.randint(10, 50))\n    run_test(round(random.uniform(10,100), 1), 0)\n    \n    return round(num_tests_passed * (100 / num_tests_run), 1)\n\n        \n# Runs your code in an IDE (for testing purposes)\nif __name__ == '__main__':    \n    result = test_passed()\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 204, "problem_id": "a1_6_runway", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nThe CSAF has authorized new runways for any base that can accomplish the\nproject under their current budget. The new runways will be solid concrete\nwith their lengths measured in meters.\n\nWrite an algorithm that asks for:\n\n  *     * The length of runway to be built (in meters)\n    * The base's budget (in dollars--do not worry about the dollar sign, do not round to the nearest)\n\n\n\nYour program should then output:\n\n  *     * The amount of concrete (in tons) needed for the base's runway\n    * The estimated cost (in dollars--do not output a dollar sign)\n    * Either \"Over Budget\" or \"Within Budget\", depending on whether the cost of materials is greater than or not greater than the base's budget, respectfully.\n\nAssume that each meter of runway requires **  2.5** tons of concrete to build,\nand that concrete costs  **$75.50**  per ton. You may assume that all inputs\nare non-negative numbers.\n\n\n\n**EXAMPLES:**\n\n  |\n\nExample 1\n\n|\n\nExample 2  \n  \n---|---|---  \n  \nInput\n\n|\n\n2000  \n400000\n\n|\n\n1500  \n250000  \n  \nOutput\n\n|\n\n5000.0  \n377500.0  \nWithin Budget\n\n|\n\n3750.0  \n283125.0  \nOver Budget  \n  \n\n\n\n", "code": "\ndef calculate_runway_concrete(length, budget):\n    concrete_needed = length * 2.5\n    cost = concrete_needed * 75.50\n    \n    if cost > budget:\n        status = \"Over Budget\"\n    else:\n        status = \"Within Budget\"\n    \n    return concrete_needed, cost, status\n\n# Example 1\nlength1 = 2000\nbudget1 = 400000\noutput1 = calculate_runway_concrete(length1, budget1)\nprint(output1)\n\n# Example 2\nlength2 = 1500\nbudget2 = 250000\noutput2 = calculate_runway_concrete(length2, budget2)\nprint(output2)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(runway_length, budget):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"----------------------------------\")\r\n    print(\"Test #\" + str(num_tests_run))\r\n    print(\"----------------------------------\")\r\n    \r\n    tons_of_concrete = 2.5 * runway_length\r\n    cost_of_materials = 75.50 * tons_of_concrete\r\n    if cost_of_materials > budget:\r\n        expected_output = \"Over Budget\"\r\n    else:\r\n        expected_output = \"Within Budget\"\r\n    \r\n    output, error_message = autograder.run_script(\"a1_6_runway.py\", [runway_length, budget])\r\n    \r\n    lines = output.split(\"\\n\")\r\n    \r\n    # Length of Materials\r\n    if len(lines) >= 1 and autograder.equals(lines[0], tons_of_concrete):\r\n        print(\"Amount of Concrete Looks Good!\")\r\n        num_tests_passed += 0.33\r\n    else:\r\n        print(\"Incorrect Amount. Expected:\", tons_of_concrete)\r\n\r\n    # Cost of Materials\r\n    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):\r\n        print(\"Cost of Materials Looks Good!\")\r\n        num_tests_passed += 0.33\r\n    else:\r\n        print(\"Incorrect Cost. Expected:\", cost_of_materials)\r\n        \r\n    # Cost Analysis\r\n    if len(lines) >= 3 and lines[2].strip() == expected_output:\r\n        print(\"Correct Budget Analysis\\n\")\r\n        num_tests_passed += 0.34\r\n    else:\r\n        print(\"Incorrect Budget Analysis. Expected:\", expected_output, \"\\n\")\r\n\r\n    return round((num_tests_passed / num_tests_run) * 100.0, 1)\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(500, 3000), 1), random.randint(100000, 500000))\r\n    run_test(round(random.uniform(500, 3000), 1), 0)\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 205, "problem_id": "a1_6_printer", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nA 3D printer converts computer generated models into physical objects by\nheating and extruding a filament known as Polylactic Acid (PLA). PLA, normally\nsold in spools, is directly fed to the printer head like a thread. You want to\ndetermine if you can afford to 3D print a project given its volume of\nmaterial.\n\nWrite an algorithm that asks for:\n\n  *     * The volume of the 3D model to be printed (in cm3)\n    * The user's budget (in dollars--do not worry about the dollar sign, do not round to the nearest)\n\n\n\nYour program should then output:\n\n  *     * The length of material (in meters) needed to produce the object\n    * The estimated cost (in dollars--do not output a dollar sign)\n    * Either \"Over Budget\" or \"Within Budget\", depending on whether the cost of materials is greater than or not greater than the user's budget, respectfully.\n\nAssume that each cm3 requires **  0.312** meters of PLA to print, and that PLA\nfilament costs  **$0.063**  per meter. You may assume that all inputs are non-\nnegative numbers.\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2  \n---|---|---  \nInput | 15.0  \n2.5 | 500.0  \n5.0  \nOutput | 4.68  \n0.29484  \nWithin Budget | 156.0  \n9.828  \nOver Budget  \n  \n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(volume, budget):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"----------------------------------\")\r\n    print(\"Test #\" + str(num_tests_run))\r\n    print(\"----------------------------------\")\r\n    \r\n    length_of_materials = 0.312 * volume\r\n    cost_of_materials = 0.063 * length_of_materials\r\n    if cost_of_materials > budget:\r\n        expected_output = \"Over Budget\"\r\n    else:\r\n        expected_output = \"Within Budget\"\r\n    \r\n    output, error_message = autograder.run_script(\"a1_6_printer.py\", [volume, budget])\r\n    \r\n    lines = output.split(\"\\n\")\r\n    \r\n    # Length of Materials\r\n    if len(lines) >= 1 and autograder.equals(lines[0], length_of_materials):\r\n        print(\"Length of Materials Looks Good!\")\r\n        num_tests_passed += 0.33\r\n    else:\r\n        print(\"Incorrect Length. Expected:\", length_of_materials)\r\n\r\n    # Cost of Materials\r\n    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):\r\n        print(\"Cost of Materials Looks Good!\")\r\n        num_tests_passed += 0.33\r\n    else:\r\n        print(\"Incorrect Cost. Expected:\", cost_of_materials)\r\n        \r\n    # Cost Analysis\r\n    if len(lines) >= 3 and lines[2].strip() == expected_output:\r\n        print(\"Correct Budget Analysis\\n\")\r\n        num_tests_passed += 0.34\r\n    else:\r\n        print(\"Incorrect Budget Analysis. Expected:\", expected_output, \"\\n\")\r\n\r\n    return round((num_tests_passed / num_tests_run) * 100.0, 1)\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(0, 100), 1), random.randint(10, 50))\r\n    run_test(round(random.uniform(0, 100), 1), 0)\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 206, "problem_id": "a1_6_fueldepot", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nFuel in the military is essential to conducting operations. Balancing mission\nrequirements against budgetary constraints is a constant concern.\n\nWrite an algorithm that asks for:\n\n  *     * The distance to a target in miles\n    * The budget (in dollars--do not worry about the dollar sign)\n\n\n\nYour program should then output:\n\n  *     * The amount of fuel (in gallons) needed to reach the target\n    * The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)\n    * Either \"Over Budget\" or \"Within Budget\", depending on whether the cost of fuel is greater than or not greater than the budget, respectfully.\n\nAssume that the convoy can get **  12.5** miles to the gallon, and that the\ncurrent price of fuel is  **$3.73**  per gallon. You may assume that all\ninputs are non-negative numbers.\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2  \n---|---|---  \nInput | 130.7  \n50.50 |\n\n750  \n100  \n  \nOutput | 10.456  \n39.0009  \nWithin Budget | 60.0  \n223.80  \nOver Budget  \n  \n\n\n\n", "code": "\ndef calculate_fuel_distance():\n    distance = float(input(\"Enter the distance to the target in miles: \"))\n    budget = float(input(\"Enter the budget in dollars: \"))\n\n    fuel_needed = distance / 12.5\n    cost = fuel_needed * 3.73\n\n    if cost <= budget:\n        budget_status = \"Within Budget\"\n    else:\n        budget_status = \"Over Budget\"\n\n    print(\"The amount of fuel needed to reach the target:\", fuel_needed)\n    print(\"The estimated cost:\", cost)\n    print(budget_status)\n    \ncalculate_fuel_distance()\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(target_distance, budget):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"----------------------------------\")\r\n    print(\"Test #\" + str(num_tests_run))\r\n    print(\"----------------------------------\")\r\n    \r\n    fuel_required = target_distance / 12.5\r\n    cost_of_materials = 3.73 * fuel_required\r\n    \r\n    if cost_of_materials > budget:\r\n        expected_output = \"Over Budget\"\r\n    else:\r\n        expected_output = \"Within Budget\"\r\n    \r\n    output, error_message = autograder.run_script(\"a1_6_fueldepot.py\", [target_distance, budget])\r\n    \r\n    lines = output.split(\"\\n\")\r\n    \r\n    # Length of Materials\r\n    if len(lines) >= 1 and autograder.equals(lines[0], fuel_required):\r\n        print(\"Amount of Fuel Looks Good!\")\r\n        num_tests_passed += 0.33\r\n    else:\r\n        print(\"Incorrect Amount. Expected:\", fuel_required)\r\n\r\n    # Cost of Materials\r\n    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):\r\n        print(\"Cost of Materials Looks Good!\")\r\n        num_tests_passed += 0.33\r\n    else:\r\n        print(\"Incorrect Cost. Expected:\", cost_of_materials)\r\n        \r\n    # Cost Analysis\r\n    if len(lines) >= 3 and lines[2].strip() == expected_output:\r\n        print(\"Correct Budget Analysis\\n\")\r\n        num_tests_passed += 0.34\r\n    else:\r\n        print(\"Incorrect Budget Analysis. Expected:\", expected_output, \"\\n\")\r\n\r\n    return round((num_tests_passed / num_tests_run) * 100.0, 1)\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(500, 3000), 1), random.randint(100000, 500000))\r\n    run_test(round(random.uniform(500, 3000), 1), 0)\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 207, "problem_id": "a1_4_speed", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a partially complete Python program that contains\n2 variables.\n\n  1. aircraft_speed (input by the user in mph)\n  2. speed_of_sound (already initialized in mph)\n\n\n\nAdd code to the end of this program that will output:\n\n  *     *         Faster than Mach 1 \n\nIf the aircraft speed is higher than the speed of sound  \n  \n\n    *         Mach 1 \n\nIf the aircraft speed is equal to the speed of sound  \n  \n\n    *         Slower than Mach 1 \n\nIf the aircraft speed is lower than the speed of sound  \n  \n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input** | 800 | 767.269 | 450.8  \n**Output** | Faster than Mach 1 | Mach 1 | Slower than Mach 1\n\n\n", "code": "\naircraft_speed = float(input())\nspeed_of_sound = 767.269\n\nif aircraft_speed > speed_of_sound:\n    print(\"Faster than Mach 1\")\nelif aircraft_speed == speed_of_sound:\n    print(\"Mach 1\")\nelse:\n    print(\"Slower than Mach 1\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(speed):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"----------------------------------\")\r\n    print(\"Testing speed =\", speed, \"MPH\")\r\n    print(\"----------------------------------\")\r\n    \r\n    if speed > 767.269:\r\n        solution = \"Faster than Mach 1\"\r\n    elif speed == 767.269:\r\n        solution = \"Mach 1\"\r\n    else:\r\n        solution = \"Slower than Mach 1\"\r\n    \r\n    output, error_message = autograder.run_script(\"a1_4_speed.py\", [speed])\r\n    \r\n    if output.strip() == solution:\r\n        print(\"CORRECT!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", solution)\r\n        print(\"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(768.0, 1000.0), 1))\r\n    run_test(767.269)\r\n    run_test(round(random.uniform(0.0, 767.0), 1))\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 208, "problem_id": "a1_4_satellite", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nYou have been provided with a partially complete Python program that contains\n2 variables.\n\n  1. satellite_speed (input by the user in km/s)\n  2. orbit_speed (already initialize in km/s)\n\n\n\nAdd code to the end of this program that will output:\n\n    *       *             Crashed to Earth\n\nIf the speed of the satellite is below the orbital speed.\n\n      *             In Orbit\n\nIf the speed of the satellite is equal to the orbital speed.\n\n      *             Lost to Space\n\nIf the speed of the satellite is above the orbital speed.\n\n\n\n** **\n\n**EXAMPLES:**\n\n|\n\n**Example 1**\n\n|\n\n**Example 2**\n\n|\n\n**Example 3**  \n  \n---|---|---|---  \n  \n**Input**\n\n|\n\n3\n\n|\n\n7.8\n\n|\n\n9  \n  \n**Output**\n\n|\n\nCrashed to Earth\n\n|\n\nIn Orbit\n\n|\n\nLost to Space  \n  \n\n\n\n", "code": "\nsatellite_speed = float(input(\"Enter the speed of the satellite in km/s: \"))\norbit_speed = 7.8  # orbit speed\n\nif satellite_speed < orbit_speed:\n    print(\"Crashed to Earth\")\nelif satellite_speed == orbit_speed:\n    print(\"In Orbit\")\nelse:\n    print(\"Lost to Space\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(speed):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"----------------------------------\")\r\n    print(\"Testing speed =\", speed, \"km/s\")\r\n    print(\"----------------------------------\")\r\n    \r\n    if speed > 7.8:\r\n        solution = \"Lost to Space\"\r\n    elif speed == 7.8:\r\n        solution = \"In Orbit\"\r\n    else:\r\n        solution = \"Crashed to Earth\"\r\n    \r\n    output, error_message = autograder.run_script(\"a1_4_satellite.py\", [speed])\r\n    \r\n    if output.strip() == solution:\r\n        print(\"CORRECT!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", solution)\r\n        print(\"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(7.8, 20), 1))\r\n    run_test(7.8)\r\n    run_test(round(random.uniform(0.0, 7.7), 1))\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 209, "problem_id": "a1_4_goldilocks", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a partially complete Python program that contains\n2 variables.\n\n  1. porridge_temp (input by the user in \u00b0F)\n  2. correct_temp (already initialized in \u00b0F)\n\n\n\nAdd code to the end of this program that will output:\n\n  *     *         Too Hot \n\nWhen the porridge temp is above the correct temperature.  \n  \n\n    *         Just Right \n\nWhen the porridge temp is equal to the correct temperature  \n  \n\n    *         Too Cold \n\nWhen the porridge temp is below the correct temperature.  \n  \n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input** | 110 | 105 | 98  \n**Output** | Too Hot | Just Right | Too Cold\n\n\n", "code": "\nporridge_temp = int(input(\"Enter the porridge temperature (in \u00b0F): \"))\ncorrect_temp = 100\n\nif porridge_temp > correct_temp:\n    print(\"Too Hot\")\nelif porridge_temp == correct_temp:\n    print(\"Just Right\")\nelse:\n    print(\"Too Cold\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(temp):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"----------------------------------\")\r\n    print(\"Testing temperature =\", temp, \"degrees\")\r\n    print(\"----------------------------------\")\r\n    \r\n    if temp > 105:\r\n        solution = \"Too Hot\"\r\n    elif temp == 105:\r\n        solution = \"Just Right\"\r\n    else:\r\n        solution = \"Too Cold\"\r\n    \r\n    output, error_message = autograder.run_script(\"a1_4_goldilocks.py\", [temp])\r\n    \r\n    if output.strip() == solution:\r\n        print(\"CORRECT!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", solution)\r\n        print(\"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(106, 130), 1))\r\n    run_test(105)\r\n    run_test(round(random.uniform(80, 104), 1))\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 210, "problem_id": "a1_4_cards", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a partially complete Python program that contains\n2 variables.\n\n  1. number_of_cards (input by the user)\n  2. cards_needed (already initialized)\n\n\n\nAdd code to the end of this program that will output whether you have enough\ncards to make a full deck of 52 cards (already initialized):\n\n  *     *         Too many cards \n\nIf the number of cards is more than the cards needed  \n  \n\n    *         Full deck\n\nIf the number of cards is equal to the cards needed  \n  \n\n    *         Not enough cards \n\nIf the number of cards is fewer than the cards needed  \n  \n\n\n\n**EXAMPLES:**\n\n\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input** | 57 | 52 | 38  \n**Output** | Too many cards | Full deck | Not enough cards\n\n\n", "code": "\n# Get the number of cards from the user\nnumber_of_cards = int(input(\"Enter the number of cards: \"))\n\n# Cards needed to make a full deck\ncards_needed = 52\n\n# Check if there are too many cards\nif number_of_cards > cards_needed:\n  print(\"Too many cards\")\n\n# Check if there are enough cards to make a full deck\nelif number_of_cards == cards_needed:\n  print(\"Full deck\")\n\n# Check if there are not enough cards\nelse:\n  print(\"Not enough cards\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(num_cards):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"----------------------------------\")\r\n    print(\"Testing number of cards =\", num_cards, \"cards\")\r\n    print(\"----------------------------------\")\r\n    \r\n    if num_cards > 52:\r\n        solution = \"Too many cards\"\r\n    elif num_cards == 52:\r\n        solution = \"Full deck\"\r\n    else:\r\n        solution = \"Not enough cards\"\r\n    \r\n    output, error_message = autograder.run_script(\"a1_4_cards.py\", [num_cards])\r\n    \r\n    if output.strip() == solution:\r\n        print(\"CORRECT!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", solution)\r\n        print(\"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(53, 60)))\r\n    run_test(52)\r\n    run_test(round(random.uniform(0, 51)))\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 211, "problem_id": "a1_4_arrow", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a partially complete Python program that contains\n2 variables.\n\n  1. arrow_height (input by the user in feet)\n  2. apple_height (already initialized in feet)\n\n\n\nAdd code to the end of this program that will output:\n\n  *     *         Arrow too high \n\nIf the arrow height is higher than the apple  \n  \n\n    *         Direct hit\n\nIf the arrow height is equal to the apple  \n  \n\n    *         Arrow too low \n\nIf the arrow is lower than the apple  \n  \n\n\n\n**EXAMPLES:**\n\n\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input** | 7.1 | 6.2 | 5.9  \n**Output** | Arrow too high | Direct hit | Arrow too low\n\n\n", "code": "\narrow_height = float(input(\"Enter the arrow height in feet: \"))\napple_height = 6.2\n\nif arrow_height > apple_height:\n    print(\"Arrow too high\")\nelif arrow_height == apple_height:\n    print(\"Direct hit\")\nelse:\n    print(\"Arrow too low\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(height):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"----------------------------------\")\r\n    print(\"Testing height =\", height, \"feet\")\r\n    print(\"----------------------------------\")\r\n    \r\n    if height > 6.2:\r\n        solution = \"Arrow too high\"\r\n    elif height == 6.2:\r\n        solution = \"Direct hit\"\r\n    else:\r\n        solution = \"Arrow too low\"\r\n    \r\n    output, error_message = autograder.run_script(\"a1_4_arrow.py\", [height])\r\n    \r\n    if output.strip() == solution:\r\n        print(\"CORRECT!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", solution)\r\n        print(\"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(6.2, 20), 1))\r\n    run_test(6.2)\r\n    run_test(round(random.uniform(0.0, 6.1), 1))\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 212, "problem_id": "a1_3_spheres", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou are trying to write a program that calculates the volume of a multiple\nspheres. The template provided to you defines 2 variables:\n\n  * **radius**  \\- radius of the sphere\n  * **total**  \\- The total amount of spheres\n\n\n\nCalculate the volume, using the following formula:\n\nV=4/3 \u03c0 r3 t\n\nWhere . . .\n\n  *     * **\u03c0**  is the mathematical constant (approximately equal to 3.14... -- see the HINT for more details)\n    * **r**  is the radius of the cylinder\n    * **t**  is the total amount of spheres\n\n\n\nStore the answer in a variable called **  volume**. You do not need to print\nthe variable.\n\n\n\n**HINT:**\n\nThe math module contains the mathematical constant, \u03c0. To use it, simply type\n**math.pi**\n\n\n", "code": "\nimport math\n\nradius = 3\ntotal = 5\n\nvolume = (4/3) * math.pi * (radius ** 3) * total\nvolume\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nfrom a1_3_spheres import *\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    answer = math.pi * (4/3) * (radius**3)*total\r\n    file = open(\"a1_3_spheres.py\", \"r\")\r\n    file_contents = file.read()\r\n    \r\n    print(\"Checking to see if variable 'volume' exists . . . \", end='')\r\n    if 'volume' in globals():\r\n        print(\"FOUND!\")\r\n        score += 10\r\n        \r\n        print(\"Checking mathematical formula . . . \", end='')\r\n        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):\r\n            print(\"CORRECT!\")\r\n            score += 60\r\n        else:\r\n            print(\"NOT FOUND. Make sure you are using the formula.\")\r\n        \r\n        print(\"Checking the value of 'volume' . . . \", end='')\r\n        if 'volume' in globals() and autograder.equals(volume, answer):\r\n            print(\"CORRECT!\")\r\n            score += 30\r\n        else:\r\n            print(\"INCORRECT\")\r\n    else:\r\n        print(\"NOT FOUND. Make sure you name your variable according to the prompt.\")\r\n      \r\n    return score\r\n    \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 213, "problem_id": "a1_3_radius", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou are trying to write a program that calculates the volume of multiple\nidentical cylinders. The template provided to you defines 3 variables:\n\n  * **radius**  \\- radius of the cylinders\n  * **height** \\- height of the cylinders\n  * **total**  \\- The total amount of cylinders\n\n\n\nCalculate the volume, using the following formula:\n\nV = \u03c0 r2 h t\n\nWhere . . .\n\n  *     * **\u03c0**  is the mathematical constant (approximately equal to 3.14... -- see the HINT for more details)\n    * **r**  is the radius of the cylinder\n    * **h  **is the height of the cylinder\n    * **t**  is the total amount of cylinders\n\n\n\nStore the answer in a variable called **volume**. You do not need to print the\nvariable.\n\n\n\n**HINT:**\n\nThe math module contains the mathematical constant, \u03c0. To use it, simply type\n**math.pi**\n\n\n", "code": "\nimport math\n\nradius = 5\nheight = 10\ntotal = 3\n\nvolume = math.pi * radius**2 * height * total\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nfrom a1_3_radius import *\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    answer = math.pi * (radius**2) * height * total\r\n    file = open(\"a1_3_radius.py\", \"r\")\r\n    file_contents = file.read()\r\n    \r\n    print(\"Checking to see areif variable 'volume' exists . . . \", end='')\r\n    if 'volume' in globals():\r\n        print(\"FOUND!\")\r\n        score += 10\r\n        \r\n        print(\"Checking mathematical formula . . . \", end='')\r\n        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):\r\n            print(\"CORRECT!\")\r\n            score += 60\r\n        else:\r\n            print(\"NOT FOUND. Make sure you are using the formula.\")\r\n        \r\n        print(\"Checking the value of 'volume' . . . \", end='')\r\n        if 'volume' in globals() and autograder.equals(volume, answer):\r\n            print(\"CORRECT!\")\r\n            score += 30\r\n        else:\r\n            print(\"INCORRECT\")\r\n    else:\r\n        print(\"NOT FOUND. Make sure you name your variable according to the prompt.\")\r\n      \r\n    return score\r\n    \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 214, "problem_id": "a1_3_interest", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou are trying to write a program that calculates the amount of money a person\nwill earn from an investment. The template provided to you defines 3\nvariables:\n\n  * **principal_amount**  \\- The principal (i.e., starting) amount of money that a person has\n  * **interest_rate**  \\- The interest rate\n  * **time**  \\- The length of the investment (in months)\n\n\n\nCalculate the amount of money earned, using the following formula:\n\n    \n    \n    amount = pert\n\nWhere . . .\n\n  *     * **p**  is the principal amount\n    * **e**  is the mathematical constant (approximately equal to 2.718... -- see the HINT for more details)\n    * **r**  is the interest rate\n    * **t**  is the time\n\n\n\nStore the answer in a variable called  **amount.** You do not need to print\nthe variable.\n\n\n\n**HINT:**\n\nThe math module contains the mathematical constant, e. To use it, simply type\n**math.e**\n\n\n", "code": "\nimport math\n\nprincipal_amount = 1000\ninterest_rate = 0.05\ntime = 12\n\namount = principal_amount * math.e**(interest_rate * time)\namount\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nfrom a1_3_interest import *\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    answer = principal_amount * math.e**(interest_rate * time)\r\n    file = open(\"a1_3_interest.py\", \"r\")\r\n    file_contents = file.read()\r\n    \r\n    print(\"Checking to see if variable 'amount' exists . . . \", end='')\r\n    if 'amount' in globals():\r\n        print(\"FOUND!\")\r\n        score += 10\r\n        \r\n        print(\"Checking mathematical formula . . . \", end='')\r\n        if '*' in file_contents and 'math.e' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):\r\n            print(\"CORRECT!\")\r\n            score += 60\r\n        else:\r\n            print(\"NOT FOUND. Make sure you are using the formula.\")\r\n        \r\n        print(\"Checking the value of 'amount' . . . \", end='')\r\n        if 'amount' in globals() and autograder.equals(amount, answer):\r\n            print(\"CORRECT!\")\r\n            score += 30\r\n        else:\r\n            print(\"INCORRECT\")\r\n    else:\r\n        print(\"NOT FOUND. Make sure you name your variable according to the prompt.\")\r\n      \r\n    return score\r\n    \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 215, "problem_id": "a1_3_cones", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou are trying to write a program that calculates the volume of multiple\nidentical cones. The template provided to you defines 3 variables:\n\n  * **radius**  \\- radius of the cones\n  * **height** \\- height of the cones\n  * **total**  \\- The total amount of cones\n\n\n\nCalculate the volume, using the following formula:\n\nV = \u03c0 r2(h/3)t\n\nWhere . . .\n\n  *     * **\u03c0**  is the mathematical constant (approximately equal to 3.14... -- see the HINT for more details)\n    * **r**  is the radius of the cones\n    * **h  **is the height of the cones\n    * **t**  is the total amount of cones\n\n\n\nStore the answer in a variable called **volume**. You do not need to print the\nvariable.\n\n\n\n**HINT:**\n\nThe math module contains the mathematical constant, e. To use it, simply type\n**math.pi**\n\n\n", "code": "\nimport math\n\nradius = 2.5\nheight = 5.0\ntotal = 10\n\nvolume = math.pi * radius**2 * (height/3) * total\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nfrom a1_3_cones import *\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    answer = math.pi * (radius**2) * (height/3) * total\r\n    file = open(\"a1_3_cones.py\", \"r\")\r\n    file_contents = file.read()\r\n    \r\n    print(\"Checking to see if variable 'volume' exists . . . \", end='')\r\n    if 'volume' in globals():\r\n        print(\"FOUND!\")\r\n        score += 10\r\n        \r\n        print(\"Checking mathematical formula . . . \", end='')\r\n        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):\r\n            print(\"CORRECT!\")\r\n            score += 60\r\n        else:\r\n            print(\"NOT FOUND. Make sure you are using the formula.\")\r\n        \r\n        print(\"Checking the value of 'volume' . . . \", end='')\r\n        if 'volume' in globals() and autograder.equals(volume, answer):\r\n            print(\"CORRECT!\")\r\n            score += 30\r\n        else:\r\n            print(\"INCORRECT\")\r\n    else:\r\n        print(\"NOT FOUND. Make sure you name your variable according to the prompt.\")\r\n      \r\n    return score\r\n    \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 216, "problem_id": "a1_3_circles", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou are trying to write a program that calculates the area of multiple\ncircles. The template provided to you defines 2 variables:\n\n  * **radius**  \\- radius of the circle\n  * **total**  \\- The total amount of circles\n\n\n\nCalculate the volume, using the following formula:\n\nV=\u03c0 r2t\n\nWhere . . .\n\n  *     * **\u03c0**  is the mathematical constant (approximately equal to 3.14... -- see the HINT for more details)\n    * **r** is the radius of the circle\n    * **t** is the total amount of circles\n\n\n\nStore the answer in a variable called **area**. You do not need to print the\nvariable.\n\n\n\n**HINT:**\n\nThe math module contains the mathematical constant, \u03c0. To use it, simply type\n**math.pi**\n\n\n", "code": "\nimport math\n\n# Get input from user\nradius = float(input(\"Enter the radius of the circle: \"))\ntotal = int(input(\"Enter the total amount of circles: \"))\n\n# Calculate the area\narea = math.pi * radius ** 2 * total\n\n# Print the result\nprint(\"The area of\", total, \"circles is\", area)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nfrom a1_3_circles import *\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    answer = math.pi * (radius**2)*total\r\n    file = open(\"a1_3_circles.py\", \"r\")\r\n    file_contents = file.read()\r\n    \r\n    print(\"Checking to see if variable 'area' exists . . . \", end='')\r\n    if 'area' in globals():\r\n        print(\"FOUND!\")\r\n        score += 10\r\n        \r\n        print(\"Checking mathematical formula . . . \", end='')\r\n        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):\r\n            print(\"CORRECT!\")\r\n            score += 60\r\n        else:\r\n            print(\"NOT FOUND. Make sure you are using the formula.\")\r\n        \r\n        print(\"Checking the value of 'area' . . . \", end='')\r\n        if 'area' in globals() and autograder.equals(area, answer):\r\n            print(\"CORRECT!\")\r\n            score += 30\r\n        else:\r\n            print(\"INCORRECT\")\r\n    else:\r\n        print(\"NOT FOUND. Make sure you name your variable according to the prompt.\")\r\n      \r\n    return score\r\n    \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 217, "problem_id": "a1_1_squad", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \nPROBLEM STATEMENT:  \n\nWrite the Python code needed to get three values from the user:\n\n  1. A string representing the name of a cadet squadron (e.g., Grim Reapers). Store this value in a variable called sqd_name\n  2. A floating point value representing average age for all cadets in the squadron. Store this value in a variable called sqd_avg_age\n  3. An integer representing the weight of the ICBM in kilograms. Store this value in a variable called sqd_number\n\nIMPORTANT: Your template file contains a print statement that combines these\nvalues to produce an output (see Example). Do not modify this line. Simply add\nyour input statements in the space provided.\n\nEXAMPLE:\n\nIf the user types \"Grim Reapers\", 20.5, and 31, your program should print:\n\n    \n    \n    Cadet Squadron 31, aka \"Grim Reapers\",\n    \n    \n     has an average cadet age of 20.5.\n\n  \n\n\n", "code": "Here is the Python code solution to the problem statement:\n\n```python\n# Get input from the user\nsqd_name = input(\"Enter the name of the cadet squadron: \")\nsqd_avg_age = float(input(\"Enter the average age for all cadets in the squadron: \"))\nsqd_number = int(input(\"Enter the weight of the ICBM in kilograms: \"))\n\n# Print output\nprint(\"Cadet Squadron\", sqd_number, ', aka', '\"' + sqd_name + '\",')\nprint(\" has an average cadet age of\", sqd_avg_age)\n```\n\nCopy and paste the above code into a Python file and run it to solve the problem.", "testcase": "from cs110 import autograder\nimport random, math\n\nnum_tests_passed = 0\nnum_tests_run = 0\n\ndef run_test():\n    global num_tests_run, num_tests_passed\n        \n    num_tests_run += 1\n    \n    squad_list = [(\"Warhawks\", 21.2, 40), (\"Barnstormers\", 19.2, 23), (\"Black Panthers\", 20.7, 29), (\"Dogs of War\", 21.1, 3)]\n    squad = squad_list[random.randint(0, len(squad_list) - 1)]\n    solution = \"The \\\"%s\\\" has an average cadet age of %1.1f and is Squadron %i.\" % (squad[0], squad[1], squad[2])\n    \n    output, error_message = autograder.run_script(\"a1_1_squad.py\", [squad[0], squad[1], squad[2]])\n        \n    if output.strip() == solution:\n        print(\"SUCCESS!\\n\")\n        num_tests_passed += 1\n    else:\n        print(\"INCORRECT. Expected:\", solution)\n        print(\"\\n\")\n\n\n# Runs the Python script and sees if it passes the test(s)\ndef test_passed():\n    run_test()\n    return round(num_tests_passed * (100 / num_tests_run), 1)\n\n        \n# Runs your code in an IDE (for testing purposes)\nif __name__ == '__main__':    \n    result = test_passed()\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 218, "problem_id": "a1_1_icbm", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite the Python code needed to get three values from the user:\n\n  1. A string representing the name of an Intercontinental Ballistic Missile (ICBM) (e.g., Minuteman). Store this value in a variable called **  icbm** **_name**\n  2. A floating point value representing the length of this missile in meters. Store this value in a variable called  **icbm_length**\n  3. An integer representing the weight of the ICBM in kilograms. Store this value in a variable called  **icbm_weight**\n\n**IMPORTANT:** Your template file contains a print statement that combines\nthese values to produce an output (see Example). **Do not modify this line.**\nSimply add your input statements in the space provided.\n\n\n\n**EXAMPLE:**\n\nIf the user types \"Minuteman\", 16.3, and 290000, your program should print:\n\n    \n    \n    The Minuteman has a total length of 16.3 meters and it weighs 290000 kilograms.\n\n\n", "code": "\nicbm_name = input(\"Enter the name of the ICBM: \")\nicbm_length = float(input(\"Enter the length of the ICBM in meters: \"))\nicbm_weight = int(input(\"Enter the weight of the ICBM in kilograms: \"))\n\nprint(\"The\", icbm_name, \"has a total length of\", icbm_length, \"meters and it weighs\", icbm_weight, \"kilograms.\")\n", "testcase": "#import cs110,\r\nimport random, math\r\nfrom cs110 import autograder\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test():\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    icbm_list = [(\"Peacekeeper\", 21.8, 88450), (\"Minuteman\", 16.36, 29000), (\"Titan\", 31.394, 155000)]\r\n    icbm = icbm_list[random.randint(0, len(icbm_list) - 1)]\r\n    solution = \"The %s has a total length of %1.1f meters and it weighs %d kilograms.\" % (icbm[0], icbm[1], icbm[2])\r\n    \r\n    output, error_message = autograder.run_script(\"a1_1_icbm.py\", [icbm[0], icbm[1], icbm[2]])\r\n        \r\n    if output.strip() == solution:\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", solution)\r\n        print(\"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test()\r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 219, "problem_id": "a1_1_dorms", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite the Python code needed to get three values from the user:\n\n  1. A string representing the name of an USAFA dormitory (e.g., Vandenburg). Store this value in a variable called **dorm** **_name**\n  2. A floating point value representing the total area, in square feet, that the dormitory contains. Store this value in a variable called **dorm_area**\n  3. An integer representing the number cadets living in this dormitory. Store this value in a variable called **dorm_population**\n\n**IMPORTANT:** Your template file contains a print statement that combines\nthese values to produce an output (see Example). **Do not modify this line.**\nSimply add your input statements in the space provided.\n\n\n\n**EXAMPLE:**\n\nIf the user types \"Vandenberg\", 63383.5, and 1720, your program should print:\n\n    \n    \n    The Vandenburg dormitory has an area of 63383.5 square feet and has 1720 cadets living in it.\n\n\n\n\n", "code": "\n# get values from the user\ndorm_name = input(\"Enter the name of the dormitory: \")\ndorm_area = float(input(\"Enter the total area in square feet: \"))\ndorm_population = int(input(\"Enter the number of cadets living in the dormitory: \"))\n\n# print the output\nprint(f\"The {dorm_name} dormitory has an area of {dorm_area} square feet and has {dorm_population} cadets living in it.\")\n", "testcase": "from cs110 import autograder\nimport random, math\n\nnum_tests_passed = 0\nnum_tests_run = 0\n\ndef run_test():\n    global num_tests_run, num_tests_passed\n        \n    num_tests_run += 1\n    \n    dorm_list = [(\"Vandenburg\", 111874.79, 2212), (\"Sijan\", 124488.97, 2112)]\n    dorm = dorm_list[random.randint(0, len(dorm_list) - 1)]\n    solution = \"The %s dormitory has an area of %1.1f square feet and has %d cadets living in it.\" % (dorm[0], dorm[1], dorm[2])\n    \n    output, error_message = autograder.run_script(\"a1_1_dorms.py\", [dorm[0], dorm[1], dorm[2]])\n        \n    if output.strip() == solution:\n        print(\"SUCCESS!\\n\")\n        num_tests_passed += 1\n    else:\n        print(\"INCORRECT. Expected:\", solution)\n        print(\"\\n\")\n\n\n# Runs the Python script and sees if it passes the test(s)\ndef test_passed():\n    run_test()\n    return round(num_tests_passed * (100 / num_tests_run), 1)\n\n        \n# Runs your code in an IDE (for testing purposes)\nif __name__ == '__main__':    \n    result = test_passed()\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 220, "problem_id": "a1_1_bases", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite the Python code needed to get three values from the user:\n\n  1. A string representing the name of an Air Force Base (e.g., Travis). Store this value in a variable called **  base** **_name**\n  2. A floating point value representing the area of this base in acres. Store this value in a variable called  **base_acres**\n  3. An integer representing the number of buildings on this base. Store this value in a variable called  **building_** **quantity**\n\n**IMPORTANT:** Your template file contains a print statement that combines\nthese values to produce an output (see Example). **Do not modify this line.**\nSimply add your input statements in the space provided.\n\n\n\n**EXAMPLE:**\n\nIf the user types \"Travis\", 6383.5, and 1720, your program should print:\n\n    \n    \n    Travis Air Force Base sits on 6383.5 acres and has 1720 buildings on it.\n\n\n", "code": "\nbase_name = input(\"Enter the name of the Air Force Base: \")\nbase_acres = float(input(\"Enter the area of the base in acres: \"))\nbuilding_quantity = int(input(\"Enter the number of buildings on the base: \"))\n\nprint(base_name, \"Air Force Base sits on\", base_acres, \"acres and has\", building_quantity, \"buildings on it.\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test():\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    base_list = [(\"Travis\", 1874.79, 1288), (\"Barksdale\", 1488.97, 1680), (\"Eglin\", 1611.08, 1388)]\r\n    base = base_list[random.randint(0, len(base_list) - 1)]\r\n    solution = \"%s Air Force Base sits on %1.1f acres and has %d buildings on it.\" % (base[0], base[1], base[2])\r\n    \r\n    output, error_message = autograder.run_script(\"a1_1_bases.py\", [base[0], base[1], base[2]])\r\n        \r\n    if output.strip() == solution:\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", solution)\r\n        print(\"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test()\r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 221, "problem_id": "a1_1_aircraft", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\nWrite the Python code needed to get three values from the user:\n\n  1. A string representing the name of an aircraft (e.g., F-16). Store this value in a variable called  **aircraft_name**\n  2. A floating point value representing the maximum speed of the aircraft. Store this value in a variable called  **aircraft_speed**\n  3. An integer representing the number of airplanes of this type owned by the USAF. Store this value in a variable called  **quantity**\n\n**IMPORTANT:** Your template file contains a print statement that combines\nthese values to produce an output (see Example). **Do not modify this line.**\nSimply add your input statements in the space provided.\n\n\n\n**EXAMPLE:**\n\nIf the user types \"F-16\", 1500.1, and 600, your program should print:\n\n    \n    \n    The F-16 has a top speed of 1500.1 MPH. The USAF has 600 in its inventory. \n\n\n", "code": "\n# Getting input from the user\naircraft_name = input(\"Enter the name of the aircraft: \")\naircraft_speed = float(input(\"Enter the maximum speed of the aircraft: \"))\nquantity = int(input(\"Enter the number of airplanes owned by the USAF: \"))\n\n# Outputting the result\nprint(\"The\", aircraft_name, \"has a top speed of\", aircraft_speed, \"MPH. The USAF has\", quantity, \"in its inventory.\")\n", "testcase": "#import cs110,\r\nimport random, math\r\nfrom cs110 import autograder\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test():\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    aircraft_list = [(\"F-15\", 1874.79, 288), (\"F-16\", 1488.97, 680), (\"F-22\", 1611.08, 88)]\r\n    aircraft = aircraft_list[random.randint(0, len(aircraft_list) - 1)]\r\n    solution = \"The %s has a top speed of %1.1f MPH.  The USAF has %d in its inventory.\" % (aircraft[0], aircraft[1], aircraft[2])\r\n    \r\n    output, error_message = autograder.run_script(\"a1_1_aircraft.py\", [aircraft[0], aircraft[1], aircraft[2]])\r\n        \r\n    if output.strip() == solution:\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", solution)\r\n        print(\"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test()\r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 222, "problem_id": "lsn21_bouncingball", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Using the pythonGraph animation template, create an animation of a bouncing\nball. Your ball should start at a random location, and change direction each\ntime it hits a side, top, or bottom of the window.  \n  \n\n\n\n**CHALLENGE:**\n\n  1. Try to make the ball change color every time it hits a wall.\n\n\n\n\n", "code": "\nimport random\nfrom graphics import *\n\n# Set up the window\nwin = GraphWin(\"Bouncing Ball Animation\", 500, 500)\nwin.setBackground(\"white\")\n\n# Set the radius and initial position of the ball\nradius = 20\nx = random.randint(radius, win.getWidth() - radius)\ny = random.randint(radius, win.getHeight() - radius)\ndx = random.choice([-1, 1])\ndy = random.choice([-1, 1])\n\n# Set up the ball with a random color\ncolor = color_rgb(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))\nball = Circle(Point(x, y), radius)\nball.setFill(color)\nball.setOutline(\"black\")\nball.draw(win)\n\n# Animation loop\nwhile True:\n    # Move the ball\n    ball.move(dx, dy)\n\n    # Check if the ball has hit a wall\n    if ball.getCenter().getX() <= radius or ball.getCenter().getX() >= win.getWidth() - radius:\n        dx *= -1\n        # Change the color of the ball\n        color = color_rgb(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))\n        ball.setFill(color)\n\n    if ball.getCenter().getY() <= radius or ball.getCenter().getY() >= win.getHeight() - radius:\n        dy *= -1\n        # Change the color of the ball\n        color = color_rgb(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))\n        ball.setFill(color)\n\n    # Pause for a short amount of time to control the animation speed\n    time.sleep(0.02)\n\n# Close the window when the animation is done\nwin.close()\n```\n\nNote: The provided code uses the `graphics` library to create the animation window and draw the ball. Make sure to install the `graphics` library before running the code.", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn21_bouncingball.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 223, "problem_id": "lsn21_bouncingtriangle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Using the Bouncing Ball from the previous lab as a starting point, generate\nan animation of a bouncing triangle. The triangle's vertices should start at\nrandom locations, and bounce whenever the triangle hits a wall.\n\n\n\n\n\n**HINTS** :\n\n  * Try drawing 3 bouncing balls on the screen.\n  * Once the balls are moving correctly, draw 3 lines to connect them!\n\n\n", "code": "\nimport pygame\nimport random\n\n# Initialize the pygame library\npygame.init()\n\n# Set up the screen\nscreen_width = 800\nscreen_height = 600\nscreen = pygame.display.set_mode((screen_width, screen_height))\npygame.display.set_caption(\"Bouncing Triangle\")\n\n# Set up the colors\nwhite = (255, 255, 255)\n\n# Set up the triangle vertices\nvertex1 = [random.randint(0, screen_width), random.randint(0, screen_height)]\nvertex2 = [random.randint(0, screen_width), random.randint(0, screen_height)]\nvertex3 = [random.randint(0, screen_width), random.randint(0, screen_height)]\n\n# Set up the triangle velocities\nvelocity1 = [random.randint(1, 5), random.randint(1, 5)]\nvelocity2 = [random.randint(1, 5), random.randint(1, 5)]\nvelocity3 = [random.randint(1, 5), random.randint(1, 5)]\n\n# Run the game loop\nrunning = True\nwhile running:\n    # Process events\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n\n    # Update triangle position\n    vertex1[0] += velocity1[0]\n    vertex1[1] += velocity1[1]\n    vertex2[0] += velocity2[0]\n    vertex2[1] += velocity2[1]\n    vertex3[0] += velocity3[0]\n    vertex3[1] += velocity3[1]\n\n    # Check for wall collision\n    if vertex1[0] < 0 or vertex1[0] > screen_width:\n        velocity1[0] = -velocity1[0]\n    if vertex1[1] < 0 or vertex1[1] > screen_height:\n        velocity1[1] = -velocity1[1]\n\n    if vertex2[0] < 0 or vertex2[0] > screen_width:\n        velocity2[0] = -velocity2[0]\n    if vertex2[1] < 0 or vertex2[1] > screen_height:\n        velocity2[1] = -velocity2[1]\n\n    if vertex3[0] < 0 or vertex3[0] > screen_width:\n        velocity3[0] = -velocity3[0]\n    if vertex3[1] < 0 or vertex3[1] > screen_height:\n        velocity3[1] = -velocity3[1]\n\n    # Clear the screen\n    screen.fill(white)\n\n    # Draw the triangle\n    pygame.draw.polygon(screen, (0, 0, 0), [vertex1, vertex2, vertex3])\n\n    # Update the display\n    pygame.display.flip()\n\n# Quit the game\npygame.quit()\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn21_bouncingtriangle.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 224, "problem_id": "lsn12_fastestcar", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nWrite a Python program with the definition of a new function named fastest_car\nand takes two lists of car info as parameters. The function will then\n**return** the car model name with the higher top speed or \"Same speed\" if the\ntop speeds are the same.\n\nThe two parameters to the function are both a list with the same 3 types of\nelements, as follows:\n\n  \n| **Car Model** | **Cost** | **Top Speed**  \n---|---|---|---  \n**Value** | Ford Mustang | 27205.00 | 163  \n  \n\n\n| **Car Model** | **Cost** | **Top Speed**  \n---|---|---|---  \n**Value** | Chevy Corvette | 66400.00 | 194  \n  \n\n\n**EXAMPLE** :\n\n| **Example**  \n---|---  \n**Input Parameters to** `fastest_car()` |\n\n`fastest_car([\"Ford Mustang\", 27205.00, 163], [\"Chevy Corvette\", 66400.00,\n194])`  \n  \n**Outputs** | Chevy Corvette\n\n\n", "code": "\ndef fastest_car(car1, car2):\n    if car1[2] > car2[2]:\n        return car1[0]\n    elif car1[2] < car2[2]:\n        return car2[0]\n    else:\n        return \"Same speed\"\n\nprint(fastest_car([\"Ford Mustang\", 27205.00, 163], [\"Chevy Corvette\", 66400.00, 194]))\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport lsn12_fastestcar\r\n\r\ndef solution(car1, car2):\r\n\r\n    if car1[2] > car2[2]:\r\n        return car1[0]\r\n    elif car2[2] > car1[2]:\r\n        return car2[0]\r\n    else:\r\n        return \"Same speed\"\r\n\r\ndef test_passed():\r\n    \r\n    # 5 test strategies\r\n    cars_list = []\r\n    cars_list.append([\"Honda Civic\", 18983.20, 127])\r\n    cars_list.append([\"Acura NSX\", 157500.39, 191])\r\n    cars_list.append([\"VW Golf GTI\", 28595.83, 130])\r\n    cars_list.append([\"Ford F-150 Raptor\", 45290.82, 107])\r\n    cars_list.append([\"Subaru BRZ\", 28955.38, 140])\r\n    cars_list.append([\"Mazda Mazdaspeed3\", 17424.30, 130])\r\n    \r\n    test_vals = []\r\n    \r\n    index_permutations = []\r\n    # build all possible permutations except those with the same vehicle\r\n    for i in range(len(cars_list)):\r\n        for j in range(len(cars_list)):\r\n            if i != j:\r\n                index_permutations.append((i,j))\r\n    \r\n    # randomly choose 4 of the permutations\r\n    for i in range(4):\r\n        car_idx_pair = index_permutations[random.randint(0,len(index_permutations)-1)]\r\n        first_car_idx = car_idx_pair[0]\r\n        second_car_idx = car_idx_pair[1]\r\n        \r\n        index_permutations.remove(car_idx_pair)\r\n        \r\n        test_vals.append([cars_list[first_car_idx], cars_list[second_car_idx]])\r\n\r\n    # same speed\r\n    test_vals.append((cars_list[2], cars_list[5]))\r\n  \r\n    i = 0\r\n    total_score = 0.0\r\n    \r\n    for val in test_vals:\r\n        print('-'*10 + \"Test #\" + str(i) + '-'*10)\r\n        \r\n        output = lsn12_fastestcar.fastest_car(val[0], val[1])\r\n        expected_output = solution(val[0], val[1])\r\n\r\n        print(\"Your Program's Output:\")\r\n        print(output)\r\n\r\n        if output == None:\r\n            print(\"INCORRECT - Your function did not return anything. Expected:\")\r\n            print(str(expected_output))\r\n        elif output.strip() == expected_output.strip():\r\n            print(\"CORRECT\")\r\n            total_score += 100.0 / len(test_vals)\r\n        else:\r\n            print(\"INCORRECT - Expected:\")\r\n            print(str(expected_output))\r\n            \r\n        print()\r\n        i += 1\r\n    \r\n    return total_score\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 225, "problem_id": "lsn12_listrange", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nWrite a Python program that obtains two whole numbers that represent the start\nand stop values for a range of numbers. You may assume the second number is\nalways greater than the first.\n\nUsing these start and stop values, print the two following items in order:\n\n1.  Print a list that starts at the start value and ends at (the list contains) the stop value\n\n**HINT** : Use `range()` to accomplish this. In order to print the result from\nrange() as a list, surround it with list(), `list(range(#,#))`, like you\nsurround input() with int() or float(), `int(input())`.\n\n2.  Print the size (how many numbers are contained) of that list\n\n\n\n**EXAMPLE:**\n\n| **Example 1** | **Example 2**  \n---|---|---  \n**Inputs** |\n\n1\n\n10\n\n|\n\n1023\n\n1029  \n  \n**Outputs** | [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  \n10 |\n\n[1023, 1024, 1025, 1026, 1027, 1028, 1029]  \n7\n\n\n", "code": "\nstart = int(input())\nstop = int(input())\n\nnum_list = list(range(start, stop+1))\nprint(num_list)\nprint(len(num_list))\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef solution(test_start, test_stop):\r\n    result = []\r\n    \r\n    result.append(list(range(test_start, test_stop+1)))\r\n    result.append(len(range(test_start, test_stop+1)))\r\n        \r\n    return result\r\n\r\ndef test_passed():\r\n    \r\n    # 5 test strategies\r\n    test_vals = []\r\n    \r\n    for j in range(5):\r\n        test_val_start = random.randint(0,2048)\r\n        test_val_stop = test_val_start + random.randint(9,16)\r\n        test_vals.append((test_val_start, test_val_stop))\r\n  \r\n    i = 0\r\n    total_score = 0.0\r\n    \r\n    for val in test_vals:\r\n        print('-'*10 + \"Test #\" + str(i) + '-'*10)\r\n        \r\n        output, error_message = autograder.run_script(\"lsn12_listrange.py\", [val[0], val[1]])\r\n        expected_output = solution(val[0], val[1])\r\n        \r\n        lines = output.strip().split('\\n')\r\n        \r\n        if lines[0].strip() == str(expected_output[0]) and autograder.equals(int(lines[1]), expected_output[1]):\r\n            print(\"CORRECT\")\r\n            total_score += 100.0 / len(test_vals)\r\n        else:\r\n            print(\"INCORRECT\")\r\n            \r\n        print()\r\n        i += 1\r\n    \r\n    return total_score\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 226, "problem_id": "lsn22_paint", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nUsing PythonGraph, create a simple paint application. Your program should draw\ncircles on the window whenever the user presses the left mouse button. Your\nprogram should also watch for keyboard inputs, and allow the user to change\ncolors and the size of the circle by pressing on different keys of your\nchoice.\n\nThe code template of a paint program has been provided to you as a starting\npoint in paint. Use this code and make the necessary modifications in the\nAnimation while loop.\n\nWhen you are finished, upload your Python code.\n\n\n", "code": "\nfrom PythonGraph import GraphWin, Circle, Point\nfrom time import sleep\n\ndef main():\n  win = GraphWin(\"Paint Program\", 800, 600)\n  win.setBackground(\"white\")\n\n  while True:\n    key = win.checkKey()\n\n    if key == \"q\":\n      break\n\n    if key == \"c\":\n      win.setBackground(\"white\")\n\n    if key == \"r\":\n      win.setBackground(\"red\")\n\n    if key == \"g\":\n      win.setBackground(\"green\")\n\n    if key == \"b\":\n      win.setBackground(\"blue\")\n\n    if key == \"y\":\n      win.setBackground(\"yellow\")\n\n    if win.checkMouse():\n      center = win.getMouse()\n      radius = 10\n      color = win.getBackground()\n      circle = Circle(center, radius)\n      circle.setFill(color)\n      circle.draw(win)\n      \n  win.close()\n\nif __name__ == \"__main__\":\n  main()\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn22_paint.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 227, "problem_id": "lsn12_pftscores", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nYou are provided a list of PFT scores, already in the lab template, in a\nvariable `pft_scores` arranged in no particular order.\n\nWrite a Python program that obtains a new score from the user. If the score is\nvalid (above zero and no greater than 500), add it to the list and print out\nthe following two stats in this order:\n\n1\\. **average score  ** HINT: use the functions `len()` and `sum()` on your\nlist to find the average\n\n2\\. **range of scores** , the difference between the largest score and\nsmallest score. HINT: use the functions `min()` and `max()` on your list to\nfind the range\n\nIf the score is invalid (below zero or above 500), instead print:  \"Invalid\nscore provided\".\n\n\n\n**EXAMPLE:**\n\n| **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input** | -5 | 328 | 65  \n**Outputs** | Invalid score provided |\n\n291.8\n\n403\n\n|\n\n274.26666666666665\n\n408  \n  \n\n\n\n\n  \n\n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n#import lsn12_pftscores\r\n\r\npft_scores = [243, 394, 143, 288, 303, 473, 325, 273, 284, 198, 70, 289, 437, 329]\r\n\r\n\r\ndef solution(new_num):\r\n    result = ''\r\n    \r\n    # Append number to num_list ONLY IF IT IS A valid number > 0\r\n    if new_num >= 0 and new_num <= 500:\r\n\r\n        temp_scores = pft_scores.copy()\r\n        temp_scores.append(new_num)\r\n        \r\n        average = sum(temp_scores) / len(temp_scores)\r\n        num_range = max(temp_scores) - min(temp_scores)\r\n        \r\n        result += str(average) + '\\n'\r\n        result += str(num_range) + '\\n'\r\n    else:\r\n        result += \"Invalid score provided\"\r\n        \r\n    return result\r\n\r\ndef test_passed():\r\n    \r\n    # 5 test strategies\r\n    # 1) invalid, out of range low\r\n    # 2) invalid, out of range high\r\n    # 3) rand num that doesn't affect range\r\n    # 4) rand num lower than current lowest, but valid\r\n    # 5) rand num higher than current highest, but valid\r\n    \r\n    min_score = min(pft_scores)\r\n    max_score = max(pft_scores)\r\n    \r\n    test_vals = []\r\n    \r\n    # random_low_invalid\r\n    test_vals.append(random.randint(-1010,-1))\r\n    #random_high_invalid\r\n    test_vals.append(random.randint(501,5000))\r\n    #random_mid_num\r\n    test_vals.append(random.randint(min_score, max_score))\r\n    #random_low\r\n    test_vals.append(random.randint(0, min_score-1))\r\n    #random_high\r\n    test_vals.append(random.randint(max_score + 1, 500))\r\n    \r\n    i = 0\r\n    total_score = 0.0\r\n    \r\n    for val in test_vals:\r\n        print('-'*10 + \"Test #\" + str(i) + '-'*10)\r\n        \r\n        output, error_message = autograder.run_script(\"lsn12_pftscores.py\", [val])\r\n        expected_output = solution(val)\r\n        \r\n        lines = output.strip().split('\\n')\r\n        \r\n        if expected_output.strip() == \"Invalid score provided\":\r\n            if output.strip() == expected_output.strip():\r\n                print(\"CORRECT\")\r\n                total_score += 100 / len(test_vals)\r\n            else:\r\n                print(\"INCORRECT. Expected the following:\")\r\n                print(expected_output)\r\n        else:\r\n            expected_lines = expected_output.strip().split('\\n')\r\n            \r\n            if autograder.equals(float(expected_lines[0]), float(lines[0]), 0.99) and autograder.equals(float(expected_lines[1]), float(lines[1]), 0.99):\r\n                print(\"CORRECT\")\r\n                total_score += 100 / len(test_vals)\r\n            else:\r\n                print(\"INCORRECT. Expected the following:\")\r\n                print(expected_output)\r\n            \r\n        print()\r\n        i += 1\r\n    \r\n    return total_score\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 228, "problem_id": "lsn22_soundboard", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Using PythonGraph, create a \"soundboard\" application. Your program should\ndisplay a list of colored buttons (i.e., rectangles). When the user clicks\ninside of a rectangle, the program plays a different\nsound.[](https://canvas.instructure.com/courses/1762383/files/86200052/download?download_frd=1)\n\nThe provided template file comes with a single button implemented. Your job is\nto study this code and create at least 5 other buttons. Note: The buttons do\nnot have to be laid out in the same arrangement, but they should look\norganized.\n\nWhen you are finished, upload your Python code. Do NOT upload any of the sound\nfiles.\n\n\n\n\n", "code": "Here is a possible solution to the problem:\n\n```python\nfrom python_graph import GraphApp, colors, Point, Rectangle, Text\n\n# Define a list of sound files to be played for each button\nsound_files = [\n    \"button1.wav\",\n    \"button2.wav\",\n    \"button3.wav\",\n    \"button4.wav\",\n    \"button5.wav\"\n]\n\n# Define the button colors\nbutton_colors = [\n    colors.RED,\n    colors.GREEN,\n    colors.BLUE,\n    colors.YELLOW,\n    colors.ORANGE\n]\n\n# Define the button positions\nbutton_positions = [\n    Point(50, 50),\n    Point(150, 50),\n    Point(250, 50),\n    Point(50, 150),\n    Point(150, 150)\n]\n\n# Define the size of the buttons\nbutton_size = Point(100, 100)\n\n# Create a list to store the button rectangles\nbuttons = []\n\n# Create a GraphApp object\napp = GraphApp(\"Soundboard\", 400, 300)\n\n# Create the buttons and add them to the app\nfor i in range(len(sound_files)):\n    button = Rectangle(button_positions[i], button_size)\n    button.fill(button_colors[i])\n    buttons.append(button)\n    app.add(button)\n\n# Create a Text object to display the currently playing sound file\ntext = Text(Point(200, 250), \"\")\napp.add(text)\n\n# Define a function to handle button click events\ndef button_click(event):\n    for i, button in enumerate(buttons):\n        if button.is_inside(event.point):\n            app.play_sound(sound_files[i])\n            text.set_text(sound_files[i])\n            break\n\n# Set the button click handler\napp.on_click(button_click)\n\n# Start the app\napp.run()\n```\n\nThis solution creates a soundboard application using the `python_graph` library. It defines a list of sound files, button colors, button positions, and button sizes. Then, it creates a list of button rectangles based on these specifications and adds them to the app. \n\nWhen a button is clicked, the program plays the corresponding sound file and updates the display text to show the currently playing sound file.\n\nTo run this program, you will need to have the `python_graph` library installed. You can install it using the command `pip install python_graph`.", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn22_soundboard.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 229, "problem_id": "lsn8_practice4", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a program that asks the user for the area of three plots of land.\n\n  * The first area will be provided to you in ACRES\n  * The second area will be provided to you in SQUARE MILES\n  * The third area will be provided to you in SQUARE KILOMETERS\n\nYour program will output \"Plot X is the biggest\", replacing X with either a 1,\n2, or 3 depending on if the first, second, or third plot of land is the\nbiggest, respectively.  For this problem, you may assume that the plots are\nall different sizes (e.g., no two plots will be the same size)\n\n\n\n**NOTES:**\n\n  * **1 acre = 0.0015625 square miles**\n  * **1 sq kilometer = 0.386102 square miles**\n\n\n\n**EXAMPLES:**\n\n| **EXAMPLE 1** | **EXAMPLE 2**  \n---|---|---  \n**Inputs** |\n\n35  \n0.25  \n1\n\n|\n\n150  \n1  \n2.2  \n  \n**Expected Output** | Plot 3 is the biggest | Plot 2 is the biggest  \n  \n\n\n\n", "code": "\nimport sys\n\n# Get the areas from the user\narea1 = float(input(\"Enter the area of plot 1 (in acres): \"))\narea2 = float(input(\"Enter the area of plot 2 (in square miles): \"))\narea3 = float(input(\"Enter the area of plot 3 (in square kilometers): \"))\n\n# Convert the areas to square miles\narea1 = area1 * 0.0015625\narea3 = area3 * 0.386102\n\n# Find the largest area\nlargest_area = max(area1, area2, area3)\n\n# Determine which plot has the largest area\nif largest_area == area1:\n    print(\"Plot 1 is the biggest\")\nelif largest_area == area2:\n    print(\"Plot 2 is the biggest\")\nelse:\n    print(\"Plot 3 is the biggest\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef solution(area_1, area_2, area_3):\r\n    area_1 = area_1 * 0.0015625\r\n    area_3 = area_3 * 0.386102\r\n\r\n    if area_1 > area_2 and area_1 > area_3:\r\n        return \"Plot 1 is the biggest\"\r\n    elif area_2 > area_1 and area_2 > area_3:\r\n        return \"Plot 2 is the biggest\"\r\n    elif area_3 > area_1 and area_3 > area_2:\r\n        return \"Plot 3 is the biggest\"\r\n    \r\n    return \"This should never return\"\r\n\r\ndef run_test(area1, area2, area3):\r\n    global num_tests_run, num_tests_passed\r\n    \r\n    num_tests_run += 1\r\n    expected_output = solution(area1, area2, area3)\r\n        \r\n    print(\"--------------------------------------------\")\r\n    print(\"Comparing %1.1f acres, %1.1f sq miles, and %1.1f sq km\" % (area1, area2, area3))\r\n    print(\"--------------------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_practice4.py\", [area1, area2, area3])\r\n    \r\n    if output.strip() == expected_output:\r\n        print(\"CORRECT!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", expected_output)\r\n        print(\"\\n\")\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))\r\n    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))\r\n    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))\r\n\r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 230, "problem_id": "lsn8_practice3", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a program that asks the user for the price of an item in US dollars /\ncents.  Then calculate and print out the equivalent price of the item in:\n\n  *     * British Pounds (1.25 USD per Pound)\n    * Korean Won (1 Won == 0.00083 USD)\n    * Mexican Pesos (1 Peso == 53.81 Won)\n\nPrint each currency on a separate line.\n\n\n", "code": "\nusd_price = float(input(\"Enter the price in US dollars/cents: \"))\n\n# Calculate equivalent prices\npound_price = usd_price * 1.25\nwon_price = usd_price / 0.00083\npeso_price = won_price / 53.81\n\n# Print equivalent prices\nprint(\"Price in British Pounds:\", pound_price)\nprint(\"Price in Korean Won:\", won_price)\nprint(\"Price in Mexican Pesos:\", peso_price)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(dollar_amount):\r\n\r\n    \r\n    return result\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    total_score = 0\r\n    \r\n    test_values = [209.66, 0.95, 44.46, 652.08]\r\n    \r\n    for idx, dollar_amount in enumerate(test_values):\r\n        print(\"\\n-----------------------------\")\r\n        print(\"     Test Case \" + str(idx+1))\r\n        print(\"-----------------------------\")\r\n        \r\n        result = 0.0\r\n    \r\n        pound_amount = dollar_amount / 1.25\r\n        won_amount = dollar_amount / 0.00083\r\n        peso_amount = won_amount / 53.81\r\n        \r\n        output, error_message = autograder.run_script(\"lsn8_practice3.py\", [dollar_amount])   \r\n        lines = output.split('\\n')\r\n        \r\n        if len(lines) > 0 and autograder.equals(lines[0], pound_amount):\r\n            print(\"Correct Pound Conversion\")\r\n            result += 33\r\n        else:\r\n            print(\"Incorrect Pound Conversion.  Expected\", pound_amount)\r\n            \r\n        if len(lines) > 1 and autograder.equals(lines[1], won_amount):\r\n            print(\"Correct Won Conversion\")\r\n            result += 33\r\n        else:\r\n            print(\"Incorrect Won Conversion.  Expected\", won_amount)\r\n            \r\n        if len(lines) > 2 and autograder.equals(lines[2], peso_amount):\r\n            print(\"Correct Peso Conversion\")\r\n            result += 34\r\n        else:\r\n            print(\"Incorrect Peso Conversion.  Expected\", peso_amount)\r\n        \r\n        total_score += result\r\n    \r\n    print()\r\n    \r\n    return int(total_score * (1 / len(test_values)))\r\n        \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 231, "problem_id": "lsn8_practice2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a program that gets two (x, y) coordinates from\nthe user in the following order: x1, y1, x2, y2.  Write a program that\ncalculates the distance between these two points, and prints them out. The\ndistance formula is  ( x 1 x 2 ) 2 + ( y 1 y 2 ) 2\n\nHINT:  You will have to use the math module.\n\n\n\n**EXAMPLES:**\n\n| **EXAMPLE 1** | **EXAMPLE 2**  \n---|---|---  \n**Inputs** |\n\n5.0  \n10.0\n\n8.0  \n16.0\n\n|\n\n8.3  \n-5.0\n\n-9.3  \n4.6  \n  \n**Expected Output (within 0.01)** | 6.708 | 20.047\n\n\n", "code": "\nimport math\n\nx1 = float(input())\ny1 = float(input())\nx2 = float(input())\ny2 = float(input())\n\ndistance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\nprint(round(distance, 2))\n", "testcase": "from cs110 import autograder\nimport random, math\n\nnum_tests_passed = 0\nnum_tests_run = 0\n\ndef run_test():\n    global num_tests_run, num_tests_passed\n    \n    x1 = round(random.uniform(-10, 10), 1)\n    y1 = round(random.uniform(-10, 10), 1)\n    x2 = round(random.uniform(-10, 10), 1)\n    y2 = round(random.uniform(-10, 10), 1)\n    \n    num_tests_run += 1\n    solution = math.sqrt(abs(x1-x2)**2 + abs(y1-y2)**2)\n    \n    print(\"--------------------------------------------\")\n    print(\"Calculating distance between (%1.1f, %1.1f) and (%1.1f, %1.1f)\" % (x1, y1, x2, y2))\n    print(\"--------------------------------------------\")\n    output, error_message = autograder.run_script(\"lsn8_practice2.py\", [x1, y1, x2, y2])\n    print(\"Your Output:\", output.strip())\n    \n    if autograder.equals(output, solution):\n        print(\"CORRECT!\\n\")\n        num_tests_passed += 1\n    else:\n        print(\"INCORRECT\")    \n        print(\"Expected:\", solution)\n        print(\"\\n\")\n\n# Runs the Python script and sees if it passes the test(s)\ndef test_passed():\n    run_test()\n    run_test()\n\n    return round(num_tests_passed * (100 / num_tests_run), 1)\n\n        \n# Runs your code in an IDE (for testing purposes)\nif __name__ == '__main__':    \n    result = test_passed()\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 232, "problem_id": "lsn8_practice1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with an incomplete Python program that prints out a\nmessage with the class year.  Write the appropriate input statement above this\nline to make this program work.\n\n\n\n**EXAMPLE:** ****\n\nIf the user types \"2014\", your program should print:\n\n    \n    \n    Members of the class of 2014 arrived at USAFA in 2010\n\n\n", "code": "\nclass_year = input(\"Enter the class year: \")\n\nprint(\"Members of the class of\", class_year, \"arrived at USAFA in\", int(class_year)-4)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(class_year):\r\n    global num_tests_run, num_tests_passed\r\n    \r\n    num_tests_run += 1\r\n    solution = \"Members of the class of \" + str(class_year) + \" arrived at USAFA in \" + str(class_year - 4)\r\n    \r\n    print(\"--------------------------------------------\")\r\n    print(\"Testing Class Year =\", class_year)\r\n    print(\"--------------------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_practice1.py\", [class_year])\r\n        \r\n    if output.strip() == solution:\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT\")\r\n        print(\"Your Output:\", output.strip())\r\n        print(\"Expected:\", solution)\r\n        if \".0\" in output.strip():\r\n            print(\"*** HINT:  Is year a floating point number? ***\")\r\n        print(\"\\n\")\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(random.randint(1959, 2024))\r\n    run_test(random.randint(1959, 2024))\r\n\r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 233, "problem_id": "lsn4_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a program that gets a cadet's age, and stores it in a variable called\n**your_age.**\n\nPrint the user's age + 4.\n\nFor example, if the user types:\n\n    \n    \n     18\n\nYour program should print:\n\n    \n    \n    22\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n       \r\n    # Generates Random Values\r\n    distance = random.uniform(100, 200)\r\n    speed = random.uniform(20, 50)\r\n    time = distance / speed\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn4_skill2.py\", [distance, speed])\r\n    \r\n    if autograder.equals(output, time):\r\n        print(\"PASSED\")\r\n        return 100\r\n    else:\r\n        print(\"Incorrect Output, Expected\", time)\r\n        return 0\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 234, "problem_id": "lsn4_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Create a variable called  **name,  **and set it equal to your name\n(represented as a string--don't forget to use the quotation marks!).\n\n\n", "code": "\nname = \"John Doe\"\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n       \r\n    points_earned = 0   \r\n    \r\n    output, error = autograder.run_script(\"lsn4_skill1.py\", ['abc', 123, 123.45])\r\n    \r\n    lines = output.split(\"\\n\")\r\n    \r\n    if (lines[0] == \"<class 'str'>\"):\r\n        points_earned += 33\r\n        print(\"my_string correct!\")\r\n    else:\r\n        print(\"my_string is either not present, or is not the correct data type\")\r\n    \r\n    if (lines[1] == \"<class 'int'>\"):\r\n        points_earned += 33\r\n        print(\"my_integer correct!\")\r\n    else:\r\n        print(\"my_integer is either not present, or is not the correct data type\")\r\n        \r\n    if (lines[2] == \"<class 'float'>\"):\r\n        points_earned += 34\r\n        print(\"my_float correct!\")\r\n    else:\r\n        print(\"my_float is either not present, or is not the correct data type\")\r\n        \r\n    return points_earned\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 235, "problem_id": "lsn4_scoreaverage", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write an algorithm that prompts the user for three sports game scores and\noutputs the average.\n\n  \n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 8  \n15  \n12 | 89  \n103  \n63 | 14  \n42  \n36  \nOutput | 11.666666666666666 | 85.0 | 30.666666666666668  \n  \n**Note: Output must match (within a predefined tolerance).**\n\n\n", "code": "\nscore1 = float(input())\nscore2 = float(input())\nscore3 = float(input())\n\naverage = (score1 + score2 + score3) / 3\nprint(average)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    score1 = random.randint(0, 100)\r\n    score2 = random.randint(0, 100)\r\n    score3 = random.randint(0, 100)\r\n    average = (score1 + score2 + score3) / 3.0\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn4_scoreaverage.py\", [score1, score2, score3])\r\n    \r\n    if autograder.equals(output, average):\r\n        print(\"PASSED!\")\r\n        return 100\r\n    else:\r\n        print(\"Value doesn't match.\\nExpected: \" + str(average))\r\n        return 0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 236, "problem_id": "lsn4_pointspread", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nA \"Point Spread\" is a term used to in sports (and gambling) to describe the\ndifference between two teams' scores. For example, if one team scores 20\npoints and another team scores 30 points, the point spread is 10. A point\nspread is always a positive number.\n\nWrite an algorithm that prompts the user for two sports game scores and\noutputs the point spread.  \n  \n**  \nEXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 8  \n15 | 89  \n103 | 42  \n14  \nOutput | 7 | 14 | 28  \n  \n**Note: Output must match exactly.**\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    score1 = random.randint(0, 50)\r\n    score2 = random.randint(score1, 100)\r\n    spread = abs(score1 - score2)\r\n\r\n    points_earned = 0\r\n\r\n    # Trial #1:  score 1 > score2\r\n    print(\"Testing when score 1 is bigger than score 2 . . .\")\r\n    output, error_message = autograder.run_script(\"lsn4_pointspread.py\", [score1, score2])\r\n    \r\n    if autograder.equals(output, spread):\r\n        print(\"PASSED!\\n\")\r\n        points_earned += 50\r\n    else:\r\n        print(\"Value doesn't match.\\nExpected: \" + str(spread)  + \"\\n\")\r\n        \r\n    # Trial #2:  score 2 > score1\r\n    print(\"Testing when score 2 is bigger than score 1 . . .\")\r\n    output, error_message = autograder.run_script(\"lsn4_pointspread.py\", [score2, score1])\r\n    \r\n    if autograder.equals(output, spread):\r\n        print(\"PASSED!\")\r\n        points_earned += 50\r\n    else:\r\n        print(\"Value doesn't match.\\nExpected: \" + str(spread))\r\n    \r\n    return points_earned\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 237, "problem_id": "lsn4_madlib", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Mad Libs are activities that have a person provide various words, which are\nthen used to complete a short story in unexpected (and hopefully funny) ways.\n(EDITOR'S NOTE: Do you kids even do Mad Libs anymore?)\n\nComplete the program to read the needed values from input, that the existing\noutput statement(s) can use to output a short story.\n\n**EXAMPLE:**\n\nIf the input is:\n\n    \n    \n    Eric\n    Chipotle\n    12\n    burritos\n    \n\nThen the output is:\n\n    \n    \n    Eric went to Chipotle to buy 12 different types of burritos\n\n\n", "code": "\nname = input()\nrestaurant = input()\nnum = input()\nfood = input()\n\nprint(name + ' went to ' + restaurant + ' to buy ' + num + ' different types of ' + food)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    first_names = ['Adrian', 'Troy', 'Dave', 'Paul', 'Kelly', 'Steve', 'Barry']\r\n    generic_locations = ['Best Buy', 'AAFES', 'Target', 'THE Walmart', 'Home Depot']\r\n    nouns = ['Video Games', 'Board Games', 'Nintendo Switches', 'Sony PS4s', 'Microsoft (Ugh) Xbox Ones']\r\n    \r\n    first_name = first_names[random.randint(0, len(first_names) - 1)]\r\n    generic_location = generic_locations[random.randint(0, len(generic_locations) - 1)]\r\n    whole_number = random.randint(0, 100)\r\n    plural_noun = nouns[random.randint(0, len(nouns) - 1)]\r\n\r\n    expected_output = first_name + ' went to ' + generic_location + ' to buy ' + str(whole_number) + ' different types of ' + plural_noun + \"\\n\"\r\n\r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn4_madlib.py\", [first_name, generic_location, whole_number, plural_noun])\r\n    \r\n    if output == expected_output:\r\n        print(\"PASSED!\")\r\n        return 100\r\n    else:\r\n        print(\"String doesn't match.\\nExpected: \" + expected_output)\r\n        return 0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 238, "problem_id": "lsn4_girlscouts", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a program that asks the user for the amount of money he/she has on\nhand, and outputs the number of girl scout cookies that he/she can purchase.\nUse the following prices:\n\n$5 per box for the \"Super Six\" (Thin Mints, Samoas, Tagalongs, Do-Si-Dos,\nTrefoils, Savannah Smiles)  \n$6 per box for the Specialty Cookies (S'mores, Toffee-tastic)\n\n**For this problem, assume that the user will buy all of one or the other. In\nother words, output the number of boxes that he/she would be able to obtain if\nhe/she bought nothing but the Super Six, and nothing but the Specialty\nCookies.**\n\n**HINT:**  \nYou can convert a number to an integer by using the int() function. For\nexample:  \n **int(2.51)** will convert the number to 2\n\nEXAMPLE:  \nIf the input is:\n\n    \n    \n    26\n\nThen the output is:\n\n    \n    \n    5 boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles  \n    4 boxes of S'mores and Toffee-tastic\n\n\n", "code": "\nmoney = int(input())\n\nsuper_six_price = 5\nspecialty_price = 6\n\nsuper_six_boxes = money // super_six_price\nspecialty_boxes = money // specialty_price\n\nprint(super_six_boxes, \"boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles\")\nprint(specialty_boxes, \"boxes of S'mores and Toffee-tastic\")\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    dollar_amount = round(random.uniform(10.00, 100.00), 2)\r\n    super_six_amount = (dollar_amount // 5)\r\n    specialty_amount = (dollar_amount // 6)\r\n    score = 0\r\n    \r\n    line_1 = str(int(super_six_amount)) + \" boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles\"\r\n    line_2 = str(int(specialty_amount)) + \" boxes of S'mores and Toffee-tastic\"\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn4_girlscouts.py\", [dollar_amount])\r\n    output_lines = output.split('\\n')\r\n    \r\n    if line_1 == output_lines[0]:\r\n        print(\"First Line is Correct\")\r\n        score += 50\r\n    else:\r\n        print(\"First Line is Incorrect.  Expected:\", line_1)\r\n    \r\n    if line_2 == output_lines[1]:\r\n        print(\"Second Line is Correct\")\r\n        score += 50\r\n    else:\r\n        print(\"Second Line is Incorrect.  Expected:\", line_2)\r\n    \r\n    return score\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 239, "problem_id": "lsn4_arrivaltime", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite an algorithm that prompts the user for a distance to travel (in miles)\nand a speed (in mph) and outputs time of arrival in hours.\n\n  \n**For Example:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 72  \n60 | 1282  \n85 | 120.5  \n59.2  \nOutput | 1.2 | 15.0823 | 2.0355  \n  \n**Note: Output needs to match the examples.**\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    distance = round(random.random() * 1000, 1)\r\n    speed = round(random.random() * 60, 1)\r\n    time = distance / speed\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn4_arrivaltime.py\", [distance, speed])\r\n    \r\n    if autograder.equals(output, time):\r\n        print(\"PASSED!\")\r\n        return 100\r\n    else:\r\n        print(\"Value doesn't match.\\nExpected: \" + str(time))\r\n        return 0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 240, "problem_id": "lsn23_tokens", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a Python program that asks the user for the name of a file.\n\nYour program should then read this file and count how many times each token\n(i.e., word) appears (NOTE: to keep it simple, and split on the ). Finally,\nlet the user type a token, and print how many times that token appears (if a\nword is not in your dictionary, print 0).\n\n\n\n**HINTS:**\n\n  * You have been provided with the file review.txt to test your code.\n\n\n", "code": "\ndef count_tokens():\n    file_name = input(\"Enter the name of the file: \")\n    tokens = {}\n\n    with open(file_name, 'r') as file:\n        for line in file:\n            words = line.strip().split()\n            for word in words:\n                if word in tokens:\n                    tokens[word] += 1\n                else:\n                    tokens[word] = 1\n\n    search_token = input(\"Enter a token: \")\n    count = tokens.get(search_token, 0)\n    print(f\"The token '{search_token}' appears {count} times.\")\n\ncount_tokens()\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(filename, t):\r\n    # Opens the file\r\n    file = open(filename, \"r\")\r\n\r\n    # Extracts ALL of the text as one big string\r\n    file_contents = file.read()\r\n\r\n    # Splits the entire document into tokens\r\n    list_of_tokens = file_contents.split(' ')\r\n\r\n    # Creates a Dictionary to Store All Tokens\r\n    token_dictionary = {}\r\n\r\n    for token in list_of_tokens:\r\n        if token not in token_dictionary:\r\n            token_dictionary[token] = 1\r\n        else:\r\n            token_dictionary[token] = token_dictionary[token] + 1\r\n    \r\n    if t in token_dictionary:\r\n        return token_dictionary[t]\r\n    else:\r\n        return 0\r\n    \r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    num_correct = 0\r\n    \r\n    # Test #1:\r\n    print(\"------------------------------------------\")\r\n    print(\"Test 1\")\r\n    print(\"------------------------------------------\")\r\n    answer, error = autograder.run_script(\"lsn23_tokens.py\", [\"review.txt\", \"Fit\"])\r\n    expected_answer = solution(\"review.txt\", \"Fit\")\r\n    \r\n    if autograder.equals(answer, expected_answer):\r\n        print(\"CORRECT\\n\")\r\n        num_correct += 1\r\n    else:\r\n        print(\"INCORRECT, Expected:\", expected_answer, \"\\n\")\r\n    \r\n    \r\n    # Test #2:\r\n    print(\"------------------------------------------\")\r\n    print(\"Test 2\")\r\n    print(\"------------------------------------------\")\r\n    answer, error = autograder.run_script(\"lsn23_tokens.py\", [\"article.txt\", \"plastic\"])\r\n    expected_answer = solution(\"article.txt\", \"plastic\")\r\n    \r\n    if autograder.equals(answer, expected_answer):\r\n        print(\"CORRECT\\n\")\r\n        num_correct += 1\r\n    else:\r\n        print(\"INCORRECT, Expected:\", expected_answer, \"\\n\")\r\n        \r\n    # Test #3:\r\n    print(\"------------------------------------------\")\r\n    print(\"Test 3\")\r\n    print(\"------------------------------------------\")\r\n    answer, error = autograder.run_script(\"lsn23_tokens.py\", [\"article2.txt\", \"environment\"])\r\n    expected_answer = solution(\"article2.txt\", \"environment\")\r\n    \r\n    if autograder.equals(answer, expected_answer):\r\n        print(\"CORRECT\")\r\n        num_correct += 1\r\n    else:\r\n        print(\"INCORRECT, Expected:\", expected_answer)\r\n    \r\n    return round(100 / 3 * num_correct, 1)\r\n    \r\n    \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 241, "problem_id": "lsn23_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You are being provided with a function called `mini_sort` that takes two\nnumbers as parameters. Modify this function so that it returns a tuple\ncontaining the numbers in ascending order.\n\n\n\n**EXAMPLES:**\n\n`mini_sort(1, 2)` should return the tuple:  (1, 2)\n\n`mini_sort(50, 40)` should return the tuple:  (40, 50)\n\n\n\n\n", "code": "\ndef mini_sort(num1, num2):\n    return (min(num1, num2), max(num1, num2))\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport lsn23_skill2\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    a = random.randint(0, 5)\r\n    b = random.randint(6, 10)\r\n    c = random.randint(100, 200)\r\n    d = random.randint(0, 99)\r\n    \r\n    score = 0\r\n    \r\n    print(\"Test #1.  Calling mini_sort(%d, %d)\" % (a, b))\r\n    output = lsn23_skill2.mini_sort(a, b)\r\n    print(\"  Your Function Returned:\", output)\r\n    if output == (a, b):\r\n        print(\"  CORRECT\\n\")\r\n        score += 50\r\n    else:\r\n        print(\"  INCORRECT.  Expected\", (a, b), \"\\n\")\r\n        \r\n    print(\"Test #2.  Calling mini_sort(%d, %d)\" % (c, d))\r\n    output = lsn23_skill2.mini_sort(c, d)\r\n    print(\"  Your Function Returned:\", output)\r\n    if output == (d, c):\r\n        print(\"  CORRECT\\n\")\r\n        score += 50\r\n    else:\r\n        print(\"  INCORRECT.  Expected\", (d, c), \"\\n\")\r\n    \r\n    return score\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 242, "problem_id": "lsn18_triangle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite an algorithm that asks the user for X and Y coordinates of a single\npoint (the coordinates of the top left point on the triangle), the length of\nthe base, and the height of a right triangle. Then, open a graphics window and\ndraw the triangle. The area of the triangle is should be displayed at the\nbottom center of the window in black.\n\n\n\n**HINTS:**\n\n  * Make sure you get the user input BEFORE you open the window. Otherwise, the program will freeze.\n  * The `draw_text` function will draw text on a screen. Don't worry about getting the text EXACTLY in the center (it's hard!).\n\n\n\n\n", "code": "\nimport graphics as gr\n\nx = int(input(\"Enter the X coordinate of the top left point: \"))\ny = int(input(\"Enter the Y coordinate of the top left point: \"))\nbase = int(input(\"Enter the length of the base: \"))\nheight = int(input(\"Enter the height of the triangle: \"))\n\nwin = gr.GraphWin(\"Triangle\", base, height)\n\npoint1 = gr.Point(x, y)\npoint2 = gr.Point(x + base, y)\npoint3 = gr.Point(x + base/2, y + height)\n\ntriangle = gr.Polygon(point1, point2, point3)\ntriangle.setFill(\"white\")\ntriangle.draw(win)\n\narea = (base * height) / 2\n\ntext = gr.Text(gr.Point(base/2, height+10), \"Area: \" + str(area))\ntext.setTextColor(\"black\")\ntext.draw(win)\n\nwin.getMouse()\nwin.close()\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn18_triangle.py\", doraise=True)\r\n        print(\"----------------------------------------------------------------------\")\r\n        print(\"*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\")\r\n        print(\"----------------------------------------------------------------------\\n\")\r\n        \r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 243, "problem_id": "lsn18_stamp", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Create a pythonGraph function called `draw_stamp` that accepts an x and y\ncoordinate as parameters. Add code so that this function will then draw a\npicture (of your choosing) centered on that coordinate.\n\n\n\nTo test your function, create a pythonGraph window, and call your function\nseveral times (each time, passing it a different set of x and y coordinates).\n\n\n", "code": "\nfrom pythonGraph import *\nimport random\n\ndef draw_stamp(x, y):\n    window_size(800, 600)\n    set_color(\"black\")\n    set_fill_color(random.choice([\"red\", \"blue\", \"green\", \"yellow\"]))\n    draw_circle(x, y, 50)\n\ndraw_stamp(200, 200)\ndraw_stamp(400, 300)\ndraw_stamp(600, 400)\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn18_stamp.py\", doraise=True)\r\n        print(\"----------------------------------------------------------------------\")\r\n        print(\"*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\")\r\n        print(\"----------------------------------------------------------------------\\n\")\r\n        \r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 244, "problem_id": "lsn18_simpledrawing", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nUsing pythonGraph (and the documentation for pythonGraph), experiment with\neach of the drawing commands listed (drawing commands begin with the keyword\n\"draw\"). Draw something interesting using at least 4 different drawing\ncommands. One of those drawing commands must be `draw_image`\n\n**NOTE:  \n** The best files will be added to our Python \"Hall of Fame\".\n\n\n", "code": "\nfrom pythongraph import Graph\n\n# create a graph object\ngraph = Graph()\n\n# draw a line from (0, 0) to (100, 100)\ngraph.draw_line(0, 0, 100, 100)\n\n# draw a rectangle with top-left corner at (50, 50) and width = 100, height = 50\ngraph.draw_rectangle(50, 50, 100, 50)\n\n# draw an ellipse centered at (200, 200) with horizontal radius = 50, vertical radius = 100\ngraph.draw_ellipse(200, 200, 50, 100)\n\n# draw an image at (300, 300) with width = 200, height = 200\ngraph.draw_image(\"image.jpg\", 300, 300, 200, 200)\n\n# display the graph\ngraph.display()\n```\n\nMake sure to replace \"image.jpg\" with the actual image file path. This code will draw a line, a rectangle, an ellipse, and an image on the graph. Finally, it will display the graph with all the drawings.", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    drawing_functions = [\"draw_arc\", \"draw_image\", \"draw_rectangle\", \"draw_circle\", \"draw_ellipse\", \"draw_line\", \"draw_pixel\", \"draw_text\", \"write_text\"]\r\n    drawing_functions_called = []\r\n    \r\n    print(\"----------------------------------------------------------------------\")\r\n    print(\"*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\")\r\n    print(\"----------------------------------------------------------------------\\n\")\r\n    \r\n    file = open(\"lsn18_simpledrawing.py\", \"r\")\r\n    file_contents = file.read()\r\n    \r\n    for f in drawing_functions:\r\n        if f in file_contents and f not in drawing_functions_called:\r\n            drawing_functions_called.append(f)\r\n    \r\n    if len(drawing_functions_called) >= 4 and \"draw_image\" in drawing_functions_called:\r\n        print(\"Good Job!\")\r\n        return 100.0\r\n    elif len(drawing_functions_called) >= 4 and \"draw_image\" not in drawing_functions_called:\r\n        print(\"Missing at least one call of draw_image\")\r\n        return 90.0\r\n    else:\r\n        print(\"Not enough different drawing functions.  Need 4 unique (including draw_image) calls.\")\r\n        return 25 * len(drawing_functions_called)\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 245, "problem_id": "lsn18_randomcircles", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Create a pythonGraph that asks the user for the number of circles to draw.\nYour program should then open a pythonGraph window and then draw that many\ncircles somewhere within view.\n\n**Hints**\n\n  * Import the `random` module in order to generate random numbers. There are specifically two functions that are useful:\n  * `random.random()` returns a random number between 0.0 and 1.0\n  * `random.randint(start, end)` returns a random integer between `start` and `end`\n\n\n\n\n", "code": "\nimport random\nimport turtle\n\nnum_of_circles = int(input(\"Enter the number of circles to draw: \"))\n\nturtle.setup(500, 500)\nturtle.hideturtle()\nturtle.speed(0)\n\nfor _ in range(num_of_circles):\n    x = random.randint(-250, 250)\n    y = random.randint(-250, 250)\n    radius = random.randint(10, 100)\n\n    turtle.penup()\n    turtle.goto(x, y)\n    turtle.pendown()\n    turtle.circle(radius)\n\nturtle.done()\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:\r\n        py_compile.compile(\"lsn18_randomcircles.py\", doraise=True)\r\n        print(\"----------------------------------------------------------------------\")\r\n        print(\"*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\")\r\n        print(\"----------------------------------------------------------------------\\n\")\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 246, "problem_id": "lsn11_in_circle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a function that determines if a point is within a circle. You will\nname your function `in_circle()`. It has five parameters:\n\n  1. The coordinates of the point that is to be tested (x, y)\n  2. The center of a circle (cir_x, cir_y)\n  3. The radius of the circle (radius)\n\n The `in_circle()` function will return **True** if the point is on or inside\nthe circle, and **False** otherwise.\n\n**IMPORTANT:  \n** You are encouraged to write code to test your function. However, when you\ntest against the server, only include the code for the function itself (you\ncan comment out your test code).\n\n\n", "code": "\ndef in_circle(x, y, cir_x, cir_y, radius):\n    distance = ((x - cir_x) ** 2 + (y - cir_y) ** 2) ** 0.5\n    if distance <= radius:\n        return True\n    else:\n        return False\n", "testcase": "import lsn11_in_circle\nfrom cs110 import autograder\nimport random, math\n\nNUM_SUBTESTS = 5\n   \ndef soln(x, y, cir_x, cir_y, radius):\n    distance = math.sqrt((cir_x - x)**2 + (cir_y - y)**2)\n    return distance <= radius\n\ndef test_passed():\n    \n    passed = 0\n    for i in range(NUM_SUBTESTS):\n        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')\n        if i == 0:\n            x = 6.04\n            y = 2.43\n            cir_x = 43.4\n            cir_y = 52.2\n            radius = 74.1\n        else:\n            x = random.random() * 10.0\n            y = random.random() * 10.0\n            cir_x = random.random() * 100.0\n            cir_y = random.random() * 100.0\n            radius = random.random() * 100.0\n        #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))\n        if lsn11_in_circle.in_circle(x, y, cir_x, cir_y, radius) == soln(x, y, cir_x, cir_y, radius):\n            print(\"CORRECT!\")\n            passed += 1\n        else:\n            print('INCORRECT:  in_circle(%f, %f, %f, %f, %f) incorrectly returned %s' % (x, y, cir_x, cir_y, radius, lsn11_in_circle.in_circle(x, y, cir_x, cir_y, radius)))\n    \n    return (100 / NUM_SUBTESTS) * passed\n\n\n# Runs your code in an IDE (for testing purposes)\nif __name__ == '__main__':    \n    result = test_passed()\n    print(\"Unit Test Returned:\", result)\n\n\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 247, "problem_id": "lsn11_distance", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a function that computes the distance between two points. You will\nname your function `dist_points`. It has four parameters, the cordinates of\nthe two points as `x1, y1, x2, y2`. The `dist_points()` function will return\nthe distance between the two points as a floating point number.\n\n**IMPORTANT:  \n** You are encouraged to write code to test your function. However, when you\ntest against the server, only include the code for the function itself (you\ncan comment out your test code).\n\n\n", "code": "\nimport math\n\ndef dist_points(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\n# Test the function\nprint(dist_points(0, 0, 3, 4))\nprint(dist_points(0, 0, -1, -1))\nprint(dist_points(10, 5, 8, 10))\n", "testcase": "from lsn11_distance import dist_points\r\nfrom cs110 import autograder\r\nimport random, math\r\n\r\nNUM_SUBTESTS = 5\r\n\r\ndef soln(x1, y1, x2, y2):\r\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\r\n\r\ndef test_passed():\r\n    \r\n    passed = 0\r\n    \r\n    print(\"Feedback:\")\r\n    \r\n    for i in range(NUM_SUBTESTS):\r\n        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')\r\n        x1 = round(random.uniform(-10, 10), 1)\r\n        y1 = round(random.uniform(-10, 10), 1)\r\n        x2 = round(random.uniform(-10, 10), 1)\r\n        y2 = round(random.uniform(-10, 10), 1)\r\n        if autograder.equals(dist_points(x1, y1, x2, y2), soln(x1, y1, x2, y2)):\r\n            print(\"PASSED!\")\r\n            passed += 1\r\n        else:\r\n            print('FAILED: dist_point(%1.1f, %1.1f, %1.1f, %1.1f) incorrectly returned' % (x1, y1, x2, y2), dist_points(x1, y1, x2, y2))\r\n    \r\n    return round(100 / NUM_SUBTESTS, 1) * passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 248, "problem_id": "lsn11_circle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a function that computes the area of a circle. You will name your\nfunction `area_circle`. It has one parameter, the radius of the circle,\n`radius`. The `area_circle()` function will return the area of the circle.\n\n**IMPORTANT:  \n** You are encouraged to write code to test your function. However, when you\ntest against the server, only include the code for the function itself (you\ncan comment out your test code).\n\n\n", "code": "\ndef area_circle(radius):\n    area = 3.14159 * radius**2\n    return area\n", "testcase": "import lsn11_circle\r\nfrom cs110 import autograder\r\nimport random, math\r\n\r\nNUM_SUBTESTS = 5\r\n\r\n# Helper method to see if a numeric value is within a specified delta\r\ndef soln(radius):\r\n    return math.pi * radius * radius\r\n\r\ndef test_passed():\r\n    \r\n    passed = 0\r\n    \r\n    print(\"Feedback:\")\r\n    \r\n    for i in range(NUM_SUBTESTS):\r\n        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')\r\n        radius = random.random() * 100.0\r\n        if autograder.equals(lsn11_circle.area_circle(radius), soln(radius)):\r\n            print(\"CORRECT!\")\r\n            passed += 1\r\n        else:\r\n            print('area_circle(%d) incorrectly returned' % (radius), lsn11_circle.area_circle(radius))\r\n        \r\n    return round(100 / NUM_SUBTESTS, 1) * passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 249, "problem_id": "lsn11_asteroids", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\n\"Asteroids\" was an arcade game created in 1979 by Atari, Inc. In the game, the\nplayer is given control of a spaceship that has the ability to shoot bullets.\nThe player is then placed in a field of floating rocks, and is tasked with\ndestroying them without running into them.\n\nIn this lab, you will write a \"collision detection\" function that will be used\nby the game to determine if the player's ship has hit a rock. To make this\nsimple, assume that an imaginary circle extends from the center of the\nasteroid and the player's ship (see below image). If the two circles ever\noverlap one another, then a collision has occurred. (NOTE: There are more\naccurate ways to detect a collision. [Click here if you want to learn more\n(Links to an external site.)](https://bell0bytes.eu/basic-collision-\ndetection/)).\n\n![](https://bell0bytes.eu/content/images/2019/03/spaceShipAsteroid.png)\n\nYour function, which you will name `detect_collision()` should have six\nparameters: the (x, y) coordinates of the center of player's ship, the ship's\nradius, the (x, y) coordinates of the center of an asteroid, and the\nasteroid's radius. Your function will return `True` if the player's ship has\nhit the asteroid, and `False` otherwise.\n\n**HINT: _  \n_** _You may want to copy and paste the_  `dist_points`  _function you created\nearlier. It's almost as if we are trying to demonstrate the importance of\nreusable functions . . ._\n\n**IMPORTANT:  \n** You are encouraged to write code to test your function. However, when you\ntest against the server, only include the code for the function itself (you\ncan comment out your test code).\n\n\n", "code": "\nimport math\n\ndef dist_points(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\ndef detect_collision(ship_x, ship_y, ship_radius, asteroid_x, asteroid_y, asteroid_radius):\n    distance = dist_points(ship_x, ship_y, asteroid_x, asteroid_y)\n    if distance <= ship_radius + asteroid_radius:\n        return True\n    else:\n        return False\n\n# Test cases\n#print(detect_collision(0, 0, 5, 0, 10, 5)) # Expected output: False\n#print(detect_collision(0, 0, 5, 0, 4, 5)) # Expected output: True\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport lsn11_asteroids \r\n\r\ndef soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):\r\n    distance = math.sqrt((ship_x - asteroid_x)**2 + (ship_y - asteroid_y)**2)\r\n    return distance < asteroid_r + ship_r\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    NUM_TESTS = 4\r\n    num_tests_passed = 0\r\n    \r\n    print(\"Feedback:\")\r\n    score = 0\r\n        \r\n    if \"dist_points\" in dir(lsn11_asteroids):\r\n        score += 20\r\n        print(\"dist_points function found\")\r\n    else:\r\n        print(\"dist_points function not being utilized.  Don't reinvent the wheel!\")\r\n        #score += 20\r\n        \r\n    for i in range(NUM_TESTS):\r\n        print('Running test %d of %d: ' % (i+1 , NUM_TESTS), end='')\r\n        \r\n        if i == 0:\r\n            ship_x = 2.3\r\n            ship_y = 0.2\r\n            ship_r = 3\r\n            asteroid_x = -4\r\n            asteroid_y = 3.4\r\n            asteroid_r = 6\r\n        else:\r\n            ship_x = round(random.uniform(-50, 50), 1)\r\n            ship_y = round(random.uniform(-50, 50), 1)\r\n            ship_r = 3\r\n            asteroid_x = round(random.uniform(-50, 50), 1)\r\n            asteroid_y = round(random.uniform(-50, 50), 1)\r\n            asteroid_r = 6\r\n        \r\n        #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))\r\n        if lsn11_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r) == soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):\r\n            print(\"CORRECT\")\r\n            score += 20\r\n        else:\r\n            print('detect_collision(%f, %f, %f, %f, %f, %f) incorrectly returned %s' % (ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r, lsn11_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r)))\r\n    \r\n    return score\r\n            \r\n            \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 250, "problem_id": "lsn10_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a function called `draw_multiple_trees()` that\noutputs a tree using ASCII art. Unlike the previous problem, this function\naccepts a parameter that tells it how many trees to draw.\n\nWrite a program that:\n\n  1. Gets an integer from the user and stores it in a variable. You can name this variable whatever you want.\n  2. Calls the function, and passes the variable to it. \n\nRemember that \"passing a value\" to a function simply means putting the number\ninside the parenthesis when you call it.\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\nfrom lsn10_skill2 import *\r\n\r\ndef solution(temp_in_f):\r\n    temp_in_k = ((temp_in_f - 32) / 1.8) + 273.15\r\n    return temp_in_k\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    print(\"Feedback:\")\r\n    print(\"Looking for a function called fahrenheit_to_kelvin . . .\", end=\"\")\r\n    \r\n    if \"fahrenheit_to_kelvin\" in globals():\r\n        print(\"FOUND!\")\r\n        score += 50\r\n    else:\r\n        print(\"NOT FOUND\")\r\n    \r\n    random_temp = round(random.uniform(0, 100), 1)\r\n    \r\n    print(\"Testing function when temperature =\", random_temp, \"F . . . \", end=\"\")\r\n    if \"fahrenheit_to_kelvin\" in globals() and fahrenheit_to_kelvin(random_temp) == solution(random_temp):\r\n        print(\"CORRECT!\")\r\n        score += 50\r\n    elif \"fahrenheit_to_kelvin\" in globals() and fahrenheit_to_kelvin(random_temp) != solution(random_temp):\r\n        print(\"INCORRECT.  Expected\", solution(random_temp), \"instead of\", fahrenheit_to_kelvin(random_temp))\r\n    else:\r\n        print(\"Could not evaluate the function's returned value because the function does not exist\")\r\n        \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 251, "problem_id": "lsn10_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a function called `draw_tree()` that prints a\ntree using ASCII art:\n\n    \n    \n     *  \n     ***  \n    *****  \n     |\n\nCall this function.\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\nfrom lsn10_skill1 import *\r\n\r\ndef get_fuel_consumption(distance_in_kilometers):\r\n    distance_in_miles = distance_in_kilometers * 0.621\r\n    return 5 * distance_in_miles\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    file = open(\"lsn10_skill1.py\", \"r\")\r\n    file_contents = file.read()\r\n    num_calls_function1 = file_contents.count(\"get_fuel_consumption(1500\")\r\n    num_calls_function2 = file_contents.count(\"get_fuel_consumption( 1500\")\r\n    num_calls_function3 = file_contents.count(\"get_fuel_consumption (1500\")\r\n    num_calls_function4 = file_contents.count(\"get_fuel_consumption ( 1500\")\r\n    num_calls = num_calls_function1 + num_calls_function2 + num_calls_function3 + num_calls_function4\r\n\r\n    output, error_message = autograder.run_script(\"lsn10_skill1.py\", [])\r\n    \r\n    if num_calls >= 1:\r\n        print(\"get_fuel_consumption called successfully\")\r\n        score += 33\r\n    else:\r\n        print(\"get_fuel_consumption was not called successfully\")\r\n    \r\n    if \"fuel_consumed\" in globals():\r\n        print(\"fuel_consumed variable successfully created\")\r\n        score += 33\r\n    else:\r\n        print(\"Did not find a variable called fuel_consumed\")\r\n        \r\n    if \"fuel_consumed\" in globals() and fuel_consumed == get_fuel_consumption(1500):\r\n        print(\"fuel_consumed contains the correct value\")\r\n        score += 34\r\n    elif \"fuel_consumed\" in globals() and fuel_consumed != get_fuel_consumption(1500):\r\n        print(\"fuel_consumed contains\", fuel_consumed, \"instead of\", get_fuel_consumption(1500))\r\n    else:\r\n        print(\"Cannot check the value of fuel_consumed because it does not exist\")\r\n        \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 252, "problem_id": "a3_6_situps", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been asked to write a program that analyzes the number of situps\ndone by a group of cadets.  Write a program that gets from the user the number\nof people tested, and gets that many situp scores (which you may assume are\nwhole numbers) from the user.  Your program must print out:\n\n  * The average number of situps for the group.\n  * The count of cadets that scored higher than the average.\n\n\n\n**EXAMPLES:**\n\n| **Example 1** | **Example 2**  \n---|---|---  \n**Input** | 3  \n75  \n90  \n88  \n  \n  \n| 5  \n86  \n79  \n90  \n90  \n100  \n**Output** | 84.3  \n2 | 89.0  \n3  \n  \n\n\n\n", "code": "Here is the code solution to the problem:\n\n```python\nnum_cadets = int(input(\"Enter the number of cadets tested: \"))\n\nsitup_scores = []\nfor i in range(num_cadets):\n    score = int(input(\"Enter the situp score for cadet {}: \".format(i+1)))\n    situp_scores.append(score)\n\naverage = sum(situp_scores) / num_cadets\nprint(\"Average number of situps for the group: {:.1f}\".format(average))\n\ncount_higher = 0\nfor score in situp_scores:\n    if score > average:\n        count_higher += 1\n\nprint(\"Count of cadets that scored higher than the average: {}\".format(count_higher))\n```\n\nI apologize for the formatting issues in the table.", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef script_name():\r\n    return \"a3_6_situps.py\"\r\n\r\n# There should be two outputs:\r\n#    The average followed by a count.\r\n# The test cases should be constructed so that:\r\n#    The average is >= 30\r\n#    The count   is <= 20\r\n\r\n# AUTOGRADER RUBRIC for scoring one test:\r\n\r\n# Number of outputs (10 pt):\r\n# 10 pt Output consists of exactly two values\r\n#  5 pt Output consists of one value or more than two values\r\n#  0 pt Output consists of either zero\r\n\r\n# Output of average (45 pt):\r\n# 45 pt Exactly correct and is first value in list\r\n# 30 pt Within 0.1 and is first value in list\r\n# 30 pt Exactly correct but is not first value in list\r\n# 15 pt Within 0.1 but is not first value in list\r\n\r\n# Output of count (45 pt):\r\n# 45 pt Exactly correct and is first value in list\r\n# 30 pt Within 1 and is first value in list\r\n# 30 pt Exactly correct but is not first value in list\r\n# 15 pt Within 1 but is not first value in list\r\n\r\ndef base_name(name_of_script):\r\n    return (name_of_script.split('.')[0]).split('_')[2]\r\n\r\ndef solution(input_list):\r\n\r\n    # Input is a count followed by that many values\r\n    # Create a list of just the values\r\n    items_list = input_list[1:]\r\n    \r\n    # Determine the average of the values\r\n    average = sum(items_list) / len(items_list)\r\n    \r\n    # Count the number of items that meet the criteria\r\n    # This depends on the specific variant of the problem\r\n    base_script = base_name(script_name())\r\n    count = 0\r\n    for score in items_list:\r\n        if base_script == \"situps\" and score > average:\r\n            count += 1\r\n        if base_script == \"sami\" and score > average:\r\n            count += 1\r\n        if base_script == \"tests\" and score < average:\r\n            count += 1\r\n    \r\n    # Output is average (rounded to 1 decimal place) and count \r\n    return [str(round(average,1)), str(count)]\r\n\r\ndef is_value(s):\r\n    try:\r\n        float(s)\r\n        return True\r\n    except ValueError:\r\n        return False\r\n    \r\n# Returns the position and distance of the closes user value from the solution value.\r\n# Returns found=False if list from user contains no numeric values\r\ndef matchup_numeric(value, from_user):\r\n    value = float(value)\r\n    found = False\r\n    position = -1\r\n    within = 1E10\r\n    for i in range(len(from_user)):\r\n        item = from_user[i]\r\n        if is_value(item):\r\n            found = True\r\n            user_value = float(item)\r\n            distance = abs(value - user_value)\r\n            if  distance < within:\r\n                within = distance\r\n                position = i \r\n                \r\n    return (found, position, within)\r\n\r\ndef decimal_places(float_string):\r\n    if is_value(float_string):\r\n        decimal_point_index = float_string.find('.')\r\n        if decimal_point_index == -1:\r\n            return 0\r\n        else:\r\n            return len(float_string) - (decimal_point_index + 1)\r\n    else:\r\n        return -1\r\n    \r\ndef grade_item(name, correct_position, places, tolerance, from_soln, from_user):\r\n    score = 0\r\n    \r\n    value_from_soln = from_soln[correct_position]\r\n    \r\n    (found, position, within) = matchup_numeric(value_from_soln, from_user)\r\n    if not found:\r\n        print(name, \"not found.  Expected: \", value_from_soln)\r\n        score += 0\r\n    else:\r\n        if   (position == correct_position) and (within <= tolerance[0]):\r\n            print(name, \"appears correct.\")\r\n            score += 45\r\n        elif (position == correct_position) and (within <= tolerance[1]):\r\n            print(name, \"is close.  Expected: \", value_from_soln)\r\n            score += 30\r\n        elif (position != correct_position) and (within <= tolerance[0]):\r\n            print(name, \"appears correct, but in wrong position.\")\r\n            score += 30\r\n        elif  (position != correct_position) and (within <= tolerance[1]):\r\n            print(name, \"is close, but in wrong position.  Expected: \", value_from_soln)\r\n            score += 15\r\n        else:\r\n            print(name, \"is not close and probably in wrong position.  Expected: \", value_from_soln)\r\n            score += 0\r\n            \r\n    return score            \r\n\r\ndef run_1_test(script_being_tested, input_list):\r\n\r\n    (output, error) = autograder.run_script(script_being_tested, input_list)\r\n    lines = output.strip().split('\\n')\r\n    expected_output = solution(input_list)\r\n    \r\n    score = 0\r\n\r\n    # Number of outputs\r\n    if len(lines) == 2:\r\n        print(\"Number of output lines is correct.\")\r\n        score += 10\r\n    elif len(lines) == 1:\r\n        print(\"Number of output lines is not quite correct.\")\r\n        score += 5\r\n    else:\r\n        print(\"Number of output lines is not correct.\")\r\n        score += 0\r\n    \r\n    score += grade_item(\"Average\", 0, 1, [0.1, 10], expected_output, lines)\r\n    score += grade_item(\"Count\", 1, 0, [0, 1], expected_output, lines)\r\n    \r\n    print('-----------------------------')\r\n\r\n    return score\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    script_being_tested = script_name()\r\n    score = 0\r\n    cum_weight = 0.0\r\n\r\n    # Corner Case #1 (5%) -- only a single score\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n    \r\n    random_people = 1\r\n    input_list = [random_people]\r\n        \r\n    for i in range(random_people):\r\n        random_score = random.randint(30, 100)\r\n        input_list.append(random_score)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n\r\n    # Corner Case #2 (5%) -- multiple all scores that are all the same\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n\r\n    random_people = random.randint(5, 10)\r\n    input_list = [random_people]\r\n        \r\n    random_score = random.randint(30, 100)\r\n    for i in range(random_people):\r\n        input_list.append(random_score)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n\r\n    # Corner Case #3 (10%) -- scores exist that exactly match average\r\n    weight = 10.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n\r\n    random_people = random.randint(7,15)\r\n    input_list = [random_people]\r\n        \r\n    random_mean = random.randint(50, 70)\r\n    \r\n    for i in range(random_people % 3):\r\n        input_list.append(random_mean)\r\n        \r\n    for i in range(random_people // 3):\r\n        random_step = random.randint(3,20)\r\n        input_list.append(random_mean)\r\n        input_list.append(random_mean + random_step)\r\n        input_list.append(random_mean - random_step)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n    \r\n    # General Case (80%) -- 4 runs @ 20% each\r\n    runs = 2\r\n    weight = (100.0 - cum_weight)\r\n    weight /= runs * 100.0\r\n\r\n    \r\n    for run in range(runs):\r\n        random_people = random.randint(2, 20)\r\n        input_list = [random_people]\r\n            \r\n        for i in range(random_people):\r\n            random_score = random.randint(30, 100)\r\n            input_list.append(random_score)\r\n        \r\n        score += weight * run_1_test(script_being_tested, input_list)\r\n    \r\n    return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 253, "problem_id": "a3_5_connect", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a table that describes a connect 4 board. In\nthis code, a list (`connect_4`) is populated with characters representing the\nlocation of each of the pieces (Red, Yellow, or Blank).\n\n\n\n    \n    \n    X = Red; 0 = Yellow; _ = Blank\n\n\n\nWrite a program that gets two values from the user in the following order:\n\n1) a row index, a 0 indicates the Top row and 5 the Bottom row\n\n2) a column index, a 0 indicates the Leftmost column and 6 the Rightmost\ncolumn\n\n\n\nFinally,  **Print  **out the contents of the table at that particular cell.\n\n\n\n  \n\n**HINT:**\n\n  * Your output should be one of the following letters:  \"X\", \"0\" or \"_\"\n\n\n# AUTOGRADER IMPORT REMOVED\n\n# --------------------------------------------------------------\n# Assessment #3, Problem 5\n# --------------------------------------------------------------\n#DO NOT TOUCH THIS LIST!\nconnect_4   =      [['X', '_', '_', '_', '_', '_', '_'],\n                    ['X', '_', 'X', '_', '_', '_', '_'],\n                    ['0', '_', 'X', '_', '_', '_', '_'],\n                    ['0', '_', '0', 'X', '_', '_', '0'],\n                    ['0', '_', '0', '0', 'X', '_', 'X'],\n                    ['X', '_', 'X', '0', '0', 'X', 'X']]\n\n#Your code goes here.", "code": "\nrow_index = int(input(\"Enter a row index (0-5): \"))\ncol_index = int(input(\"Enter a column index (0-6): \"))\n\nprint(connect_4[row_index][col_index])\n```\n", "testcase": "import random\r\nfrom cs110 import autograder\r\n\r\n## EDITED 15 MAR 2022 by Capt Ben McGraw\r\n\r\nconnect_4   =      [['X', '_', '_', '_', '_', '_', '_'],\r\n                    ['X', '_', 'X', '_', '_', '_', '_'],\r\n                    ['0', '_', 'X', '_', '_', '_', '_'],\r\n                    ['0', '_', '0', 'X', '_', '_', '0'],\r\n                    ['0', '_', '0', '0', 'X', '_', 'X'],\r\n                    ['X', '_', 'X', '0', '0', 'X', 'X']]\r\n\r\n\r\ndef check_location(row, col):\r\n    print(\"-----------------------------\")\r\n    print(\"Checking row:{} col:{}\".format(row, col))\r\n    print(\"-----------------------------\")\r\n\r\n    output, error = autograder.run_script(\"a3_5_connect.py\", [row, col])\r\n\r\n    if connect_4[row][col] == output.strip():\r\n        print(\"Correct\\n\")\r\n        return True\r\n    else:\r\n        print(\"Incorrect.  Expected:\", connect_4[row][col], \"\\n\")\r\n        return False\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n\r\n    if (check_location(0,\r\n                       2)):\r\n        score += 20\r\n\r\n    if (check_location(1,\r\n                       random.randint(0, len(connect_4[0])-1))):\r\n        score += 20\r\n\r\n    if (check_location(5,\r\n                       random.randint(0, len(connect_4[0])-1))):\r\n        score += 20\r\n\r\n    if (check_location(random.randint(0, len(connect_4)-1),\r\n                       random.randint(0, len(connect_4[0])-1))):\r\n        score += 20\r\n\r\n    if (check_location(random.randint(0, len(connect_4)-1),\r\n                       random.randint(0, len(connect_4[0])-1))):\r\n        score += 20\r\n\r\n    return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':\r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 254, "problem_id": "a3_4_testscores", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a list called list_of_test_scores. Write a\nprogram that prints out the range ( _i.e.,  _the difference between the max\nand min scores)\n\n\n\n**EXAMPLE:  \n** If, for example, the list contained the values:  50, 64, 72\n\nYour program should print:\n\n    \n    \n    22\n\n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nSTUDENT_FILE = \"a3_4_testscores.py\"\r\nANSWER = 6092\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    output, error = autograder.run_script(STUDENT_FILE, [])\r\n    lines = output.strip().split('\\n')\r\n    score = 0\r\n    \r\n    if len(lines) >= 1:           \r\n        if autograder.equals(lines[0], ANSWER):\r\n            print(\"CORRECT: Range Looks Good!\")\r\n            score += 100\r\n        else:\r\n            print(\"Incorrect range.  Remember that the range is the difference between the max and the min\")\r\n            \r\n    else:\r\n        print(\"More lines expected in your answer.  Make sure you are printing out the range.\")\r\n    \r\n    return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 255, "problem_id": "a3_3_dogs", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a list called `list_of_dogs`. Write a program\nthat prints out each of the items in this list (one item per line).  \n\n\n\n**EXAMPLE:  \n** If, for example, the list contained the items:  \"A\", \"B\", \"C\"\n\nYour program should print:\n\n    \n    \n    A  \n    B  \n    C\n\n\n\n**NOTE:**\n\n  * You must use a loop to complete this task.  \n\n\n# AUTOGRADER IMPORT REMOVED\n\n# --------------------------------------------------------------\n# Assessment #3, Problem 3\n# --------------------------------------------------------------\n\n# This list is being provided to you.  DO NOT TOUCH!\nlist_of_dogs = [\"Pug\", \"Lab\", \"Yorkie\", \"Pit Bull\", \"Poodle\", \"Great Dane\"]\n\n#Your code goes here.", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nlist_of_dogs = [\"Pug\", \"Lab\", \"Yorkie\", \"Pit Bull\", \"Poodle\", \"Great Dane\"]\r\n\r\ndef solution():\r\n    result = []\r\n    \r\n    for item in list_of_dogs:\r\n        result.append(item)\r\n    \r\n    return result\r\n             \r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    output, error = autograder.run_script(\"a3_3_dogs.py\", [])\r\n    expected_output = solution()\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    \r\n    return round(100 / len(expected_output) * num_matches, 1)\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 256, "problem_id": "a3_1_light_aircraft", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a list called `list_of_aircraft`. Write a program\nthat prints a single, specified aircraft from the list. Your program shall\ntake a number via user input used to identify which aircraft to print. For\nexample, if the user types a 3, you should print out the third item.\n\n\n\n**NOTE:**\n\n  * You may assume that the user will always enter a value that \"should\" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)\n\n\n", "code": "\nlist_of_aircraft = [\"Boeing 747\", \"Airbus A380\", \"Cessna 172\", \"Embraer 190\", \"Bombardier CRJ\"]\n\naircraft_index = int(input(\"Enter the index of the aircraft you want to print: \"))\n\nprint(list_of_aircraft[aircraft_index])\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nlist_of_aircraft = [\"F-16\",\"F-15\",\"F-22\",\"F-35\", \"A-10\", \"B-1\",\"B-2\", \"B-52\" ]\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    index_list = [1, random.randint(2, len(list_of_aircraft)-2), len(list_of_aircraft)]\r\n    tests_passed = 0\r\n\r\n    for i in range(len(index_list)):\r\n        print(\"----------------------------------------------------------\")\r\n        print(\"Testing item #\" + str(index_list[i]) + \": \")\r\n        print(\"----------------------------------------------------------\")\r\n               \r\n        # Runs the Script\r\n        output, error_message = autograder.run_script(\"a3_1_light_aircraft.py\", [index_list[i]])\r\n\r\n        # Test Goes Here\r\n        lines = output.split(\"\\n\")\r\n        \r\n        if lines[0] == list_of_aircraft[index_list[i]-1]:\r\n            print(\"Looks Good!\")\r\n            tests_passed += 1\r\n        elif error_message == '' and lines[0] != list_of_aircraft[index_list[i]-1]:\r\n            print(\"Unexpected Output (Expected \" + str(list_of_aircraft[index_list[i]-1]) + \")\")\r\n    \r\n        print()\r\n    \r\n    return (100 / len(index_list)) * tests_passed\r\n\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 257, "problem_id": "a2_5_traffic_lights", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nThe City Manager is having a traffic problem and asked you are to write a\nprogram that will determine whether or not to activate a newly installed\nalternate traffic light schedule to help alleviate traffic throughout the city\nduring peak traffic hours. Your program will ask for the number of traffic\n\"time periods\" to analyze. It will then ask for the traffic throughput (in\naverage number of cars per minute, which does not have to be a whole number)\nfor each \"time period\". Your program will keep track of how many \"time\nperiods\" are considered heavy traffic, as defined as 15 cars per minutes or\nmore (inclusive). Your program will then print one of the following\nstatements:\n\n**# of \"time periods\" of heavy traffic** | **0** | **1-2** | **> 2**  \n---|---|---|---  \n**Output** | Regular Schedule | Prepare Activation | Activate New Schedule  \n  \n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**INPUT** |\n\n3\n\n12.8\n\n15.0\n\n6.7\n\n|\n\n3\n\n17.3\n\n15.1\n\n19.2  \n  \n**OUTPUT** | Prepare Activation | Activate New Schedule\n\n\n", "code": "\nnum_periods = int(input())\nheavy_traffic_count = 0\n\nfor _ in range(num_periods):\n    throughput = float(input())\n    if throughput >= 15:\n        heavy_traffic_count += 1\n\nif heavy_traffic_count == 0:\n    print(\"Regular Schedule\")\nelif heavy_traffic_count <= 2:\n    print(\"Prepare Activation\")\nelse:\n    print(\"Activate New Schedule\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(num_over, traffic):    \r\n    inputs = [traffic]\r\n    \r\n    for i in range(traffic):\r\n        if i < num_over:\r\n            if (i + 1 == num_over):\r\n                inputs.append(15)\r\n            else:\r\n                inputs.append(round(random.uniform(15, 30), 1))\r\n        else:\r\n            inputs.append(round(random.uniform(1, 15), 1))\r\n\r\n    # Generates Expected Answer\r\n    if num_over == 0:\r\n        answer = \"Regular Schedule\"\r\n    elif num_over <= 2:\r\n        answer = \"Prepare Activation\"\r\n    else:\r\n        answer = \"Activate New Schedule\"\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"a2_5_traffic_lights.py\", inputs)\r\n    \r\n    print(\"Testing when\", num_over, \"out of\", traffic, \"\\\"time periods\\\" are experiencing heavy traffic . . . \")\r\n    print(\"  Inputs:\", inputs)\r\n    print(\"  Result: \", end='')\r\n    \r\n    if answer.strip() == output.strip():\r\n        print(\"CORRECT!\\n\")\r\n        return True\r\n    else:\r\n        print(\"INCORRECT. Expected: '\" + answer + \"' instead of '\" + output + \"'\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    num_passed = 0\r\n    \r\n    if (run_test(0, random.randint(1, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(1, random.randint(1, 2))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(2, random.randint(3, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(3, random.randint(3, 5))):\r\n        num_passed += 1\r\n        \r\n    return (100 / 4) * num_passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 258, "problem_id": "a2_5_network_traffic", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nThe 10th Communications Squadron (10 CS) recently detected a higher volume of\nnetwork traffic on the base network. The 10 CS Director of Operations asked\nyou are to write a program that will determine whether or not to activate an\nadditional Network Load Balancer (NLB) to improve the network performance\nduring these peak loads. Your program will ask for the number of network\ntraffic \"snapshots\" to analyze. It will then ask for the network load (in\nGigabits per second (Gbps), which does not have to be a whole number) for each\n\"snapshot\". Your program will keep track of how many \"snapshots\" are\ndesignated as high volume network traffic, defined as loads greater than 512\nGbps. Your program will then print one of the following statements:\n\n**# of \"snapshots\" with high network traffic volume** | **0** | **1-2** | **>\n2**  \n---|---|---|---  \n**Output** | Ops Normal | Initialize NLB | Activate NLB  \n  \n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**INPUT** |\n\n3\n\n512.0\n\n738.5\n\n199.6\n\n|\n\n3\n\n498.6\n\n372.9\n\n512.0  \n  \n**OUTPUT** | Initialize NLB | Ops Normal\n\n\n", "code": "\n# Solution\n\nnum_snapshots = int(input(\"Enter the number of network traffic snapshots to analyze: \"))\n\nhigh_traffic = 0\n\nfor i in range(num_snapshots):\n    load = float(input(\"Enter the network load in Gbps for snapshot \" + str(i+1) + \": \"))\n    if load > 512:\n        high_traffic += 1\n\nif high_traffic == 0:\n    print(\"Ops Normal\")\nelif high_traffic > 2:\n    print(\"Activate NLB\")\nelse:\n    print(\"Initialize NLB\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(num_over, traffic):    \r\n    inputs = [traffic]\r\n    \r\n    for i in range(traffic):\r\n        if i < num_over:\r\n            if (i + 1 == num_over):\r\n                inputs.append(512.1)\r\n            else:\r\n                inputs.append(round(random.uniform(512, 1024), 1))\r\n        else:\r\n            inputs.append(round(random.uniform(256, 512), 1))\r\n\r\n    # Generates Expected Answer\r\n    if num_over == 0:\r\n        answer = \"Ops Normal\"\r\n    elif num_over <= 2:\r\n        answer = \"Initialize NLB\"\r\n    else:\r\n        answer = \"Activate NLB\"\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"a2_5_network_traffic.py\", inputs)\r\n    \r\n    print(\"Testing when\", num_over, \"out of\", traffic, \"\\\"snapshots\\\" have high volume of network traffic . . . \")\r\n    print(\"  Inputs:\", inputs)\r\n    print(\"  Result: \", end='')\r\n    \r\n    if answer.strip() == output.strip():\r\n        print(\"CORRECT!\\n\")\r\n        return True\r\n    else:\r\n        print(\"INCORRECT. Expected: '\" + answer + \"' instead of '\" + output + \"'\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    num_passed = 0\r\n    \r\n    if (run_test(0, random.randint(1, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(1, random.randint(1, 2))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(2, random.randint(3, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(3, random.randint(3, 5))):\r\n        num_passed += 1\r\n        \r\n    return (100 / 4) * num_passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 259, "problem_id": "a2_5_grades", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou are writing a program that will help your instructors analyze student\nperformance on an exam. Your program will ask for the number of students in\nthe class. It will then ask for the grade of each student (this grade does not\nhave to be a whole number). Your program will keep track of how many students\nreceived less than 70 on an assignment. Your program will then print one of\nthe following statements.\n\n\n\n**# of scores below 70** | **0** | **1-2** | **> 2**  \n---|---|---|---  \n**Output** | Excellent | Satisfactory | Unsatisfactory  \n  \n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**INPUT** |\n\n4  \n75.6  \n80.2  \n95.5  \n71.0\n\n|\n\n3  \n68.2  \n72.9  \n95.4\n\n|\n\n3  \n67.0  \n65.5  \n68.3  \n  \n**OUTPUT** | Excellent | Satisfactory | Unsatisfactory  \n  \n\n\n\n", "code": "\nnum_students = int(input(\"Enter the number of students: \"))\nbelow_70 = 0\n\nfor i in range(num_students):\n    grade = float(input(\"Enter the grade of student {}: \".format(i+1)))\n    if grade < 70:\n        below_70 += 1\n\nif below_70 == 0:\n    print(\"Excellent\")\nelif below_70 <= 2:\n    print(\"Satisfactory\")\nelse:\n    print(\"Unsatisfactory\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(num_failures, num_papers):    \r\n    inputs = [num_papers]\r\n    \r\n    for i in range(num_papers):\r\n        if i < num_failures:\r\n            inputs.append(round(random.uniform(0, 70), 1))\r\n        else:\r\n            if (i == num_failures):\r\n                inputs.append(70)\r\n            else:\r\n                inputs.append(round(random.uniform(70, 100), 1))\r\n\r\n    # Generates Expected Answer\r\n    if num_failures == 0:\r\n        answer = \"Excellent\"\r\n    elif num_failures >= 1 and num_failures <= 2:\r\n        answer = \"Satisfactory\"\r\n    else:\r\n        answer = \"Unsatisfactory\"\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"a2_5_grades.py\", inputs)\r\n    \r\n    print(\"Testing when\", num_failures, \"out of\", num_papers, \"failed . . . \")\r\n    print(\"  Inputs:\", inputs)\r\n    print(\"  Result: \", end='')\r\n    \r\n    if answer.strip() == output.strip():\r\n        print(\"CORRECT!\\n\")\r\n        return True\r\n    else:\r\n        print(\"INCORRECT. Expected: '\" + answer + \"' instead of '\" + output + \"'\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    num_passed = 0\r\n    \r\n    if (run_test(0, random.randint(1, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(1, random.randint(1, 2))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(2, random.randint(3, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(3, random.randint(3, 5))):\r\n        num_passed += 1\r\n        \r\n    return (100 / 4) * num_passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 260, "problem_id": "a2_5_combat", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou are writing a program that will determine whether or not a fighter pilot\nwill need to make an evasive action when enemy aircraft are near. Your program\nwill ask for the number of enemy planes in the area. It will then ask for the\ndistance between the pilot and each of the enemy planes (in miles, which do\nnot have to be whole numbers). Your program will keep track of how many enemy\nplanes are within 20 miles of the pilot (inclusive). Your program will then\nprint one of the following statements:\n\n**# of Enemy Planes in Area** | **0** | **1-2** | **> 2**  \n---|---|---|---  \n**Output** | All Clear | Warning | Evasive Action  \n  \n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**INPUT** |\n\n3\n\n10.5\n\n17.2\n\n23.7\n\n|\n\n3\n\n21.4\n\n34.0\n\n27.9  \n  \n**OUTPUT** | Warning | All Clear\n\n\n", "code": "\nnum_planes = int(input())\ndistances = []\nfor _ in range(num_planes):\n    distance = float(input())\n    distances.append(distance)\n\ncount = 0\nfor distance in distances:\n    if distance <= 20:\n        count += 1\n\nif count == 0:\n    print(\"All Clear\")\nelif count <= 2:\n    print(\"Warning\")\nelse:\n    print(\"Evasive Action\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(num_close, num_planes):    \r\n    inputs = [num_planes]\r\n    \r\n    for i in range(num_planes):\r\n        if i < num_close:\r\n            if (i + 1 == num_close):\r\n                inputs.append(20)\r\n            else:\r\n                inputs.append(round(random.uniform(0, 20), 1))\r\n        else:\r\n            inputs.append(round(random.uniform(20, 50), 1))\r\n\r\n    # Generates Expected Answer\r\n    if num_close == 0:\r\n        answer = \"All Clear\"\r\n    elif num_close <= 2:\r\n        answer = \"Warning\"\r\n    else:\r\n        answer = \"Evasive Action\"\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"a2_5_combat.py\", inputs)\r\n    \r\n    print(\"Testing when\", num_close, \"out of\", num_planes, \"are close . . . \")\r\n    print(\"  Inputs:\", inputs)\r\n    print(\"  Result: \", end='')\r\n    \r\n    if answer.strip() == output.strip():\r\n        print(\"CORRECT!\\n\")\r\n        return True\r\n    else:\r\n        print(\"INCORRECT. Expected: '\" + answer + \"' instead of '\" + output + \"'\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    num_passed = 0\r\n    \r\n    if (run_test(0, random.randint(1, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(1, random.randint(1, 2))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(2, random.randint(3, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(3, random.randint(3, 5))):\r\n        num_passed += 1\r\n        \r\n    return (100 / 4) * num_passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 261, "problem_id": "a2_4_pipe", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a Python program that already contains code to get\nthe following two items from the user:\n\n  * **the_string** :  A pipe-separated string.  \nExample: johnson81|4081|30no86|cj4081|Craig|Johnson|Depot|London\n\n  * **column_to_print** :  A number indicating which item from the input string to print  \nNOTE:  0 indicates the first item in the string, 1 indicates the second, etc.\n\nAdd code to this program that:\n\n  1. Splits the the_string into separate items.\n  2. Prints the number of items that result from splitting the_string (not the number of characters in the string).\n  3. Prints the item indicated by the column_to_print value.\n\n**EXAMPLE:**\n\nIf the user types:\n\n    \n    \n    johnson81|4081|30no86|cj4081|Craig|Johnson|Depot|London  \n    2\n\nYour program should output:\n\n    \n    \n    8  \n    30no86\n\n\n\n**HINT: A pipe is this: '|'. On most keyboards it is located on the same key\nas the backslash ('\\').** **If you cannot find it, ask an instructor for\nhelp.**\n\n\n", "code": "\nuser_input = input().split(\"|\")\ncolumn_to_print = int(input())\nprint(len(user_input))\nprint(user_input[column_to_print])", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\nvariant = \"pipe\"\r\nverbose = False\r\n\r\nvariants = {\r\n            \"validate\": {\"delimiter\": '.'}, \r\n            \"comma\"   : {\"delimiter\": ','},\r\n            \"pipe\"    : {\"delimiter\": '|'}, #\r\n            \"amp\"     : {\"delimiter\": '&'}, #\r\n            \"caret\"   : {\"delimiter\": '^'}, #\r\n            \"dollar\"  : {\"delimiter\": '$'}, #\r\n            \"hash\"    : {\"delimiter\": '#'}, #\r\n            \"ques\"    : {\"delimiter\": '?'}, #\r\n            \"semic\"   : {\"delimiter\": ';'}, #\r\n            \"slash\"   : {\"delimiter\": '/'}, #\r\n            \"star\"    : {\"delimiter\": '*'}, #\r\n            \"colon\"   : {\"delimiter\": ':'}, #\r\n            \"hyphen\"  : {\"delimiter\": '-'}, #\r\n            \"score\"   : {\"delimiter\": '_'}, #\r\n           }\r\n\r\ndelimiter_proper = variants[variant][\"delimiter\"]\r\n\r\ndef generate_test_string(delimiter):\r\n    \r\n    random_lists = [\r\n                    [\"booker12\",\"9012\",\"12se74\",\"rb9012\",\"Rachel\",\"Booker\",\"Sales\",\"Coventry\"],\r\n                    [\"grey07\",\"2070\",\"04ap67\",\"lg2070\",\"Laura\",\"Grey\",\"Depot\",\"London\"],\r\n                    [\"johnson81\",\"4081\",\"30no86\",\"cj4081\",\"Craig\",\"Johnson\",\"Shipping\",\"Westminster\"],\r\n                    [\"jenkins46\",\"9346\",\"14ju73\",\"mj9346\",\"Mary\",\"Jenkins\",\"Engineering\",\"Liverpool\"],\r\n                    [\"smith79\",\"5079\",\"09ja61\",\"js5079\",\"Jamie\",\"Smith\",\"Testing\",\"Manchester\"]\r\n                   ]\r\n    \r\n    random_list = random_lists[random.randrange(len(random_lists))]\r\n    random_column = random.randrange(len(random_list))\r\n    test_string = \"\"\r\n    for field in random_list:\r\n        if test_string != \"\":\r\n            test_string += delimiter\r\n        test_string += field\r\n    return test_string, random_column\r\n\r\ndef solution(delimiter, string, column_num):\r\n    \r\n    #print(\"SOLUTION:\", string, delimiter, column_num, sep=\"\\n\")\r\n    columns = string.split(delimiter)\r\n    output = str(len(columns)) + '\\n'\r\n    output += columns[column_num] + '\\n'\r\n        \r\n    return output\r\n\r\ndef print_test_results(test_score, actual_output, expected_output):\r\n\r\n    if verbose:\r\n        \r\n        if test_score == 100:\r\n            print(\"CORRECT: %.1f%%\" % (test_score))\r\n        else:\r\n            print(\"INCORRECT: %.1f%%\" % (test_score))\r\n            print(\"Expected:\")\r\n            print(expected_output)\r\n\r\n    else:\r\n\r\n        if test_score == 100:\r\n            print(\"CORRECT\")\r\n        else:\r\n            print(\"INCORRECT\")\r\n            print(\"Expected:\")\r\n            print(expected_output)\r\n\r\ndef run1test(delimiter):\r\n\r\n    # Rubric\r\n    # 1 Runs without errors\r\n    # 1 Prints out the correct item count (regardless of order)\r\n    # 1 Prints out the correct item value (regardless of order)\r\n    # 1 Prints out the items in the correct order (0.5 for each)\r\n\r\n    test_score = 0\r\n    test_max = 4\r\n    \r\n    test_string, random_column = generate_test_string(delimiter)\r\n    output, error = autograder.run_script(\"a2_4_%s.py\" % (variant), [ test_string, random_column ])\r\n    expected_output = solution(delimiter, test_string, random_column)\r\n\r\n    if error == \"\":\r\n        test_score += 1\r\n    \r\n    returned_lines = output.strip().split('\\n')\r\n    returned_count = None\r\n    returned_item = None\r\n    if len(returned_lines) > 0:\r\n        returned_count = returned_lines[0]\r\n    if len(returned_lines) > 1:\r\n        returned_item = returned_lines[1]\r\n    \r\n    expected_lines = expected_output.strip().split('\\n')\r\n    expected_count = expected_lines[0]\r\n    expected_item = expected_lines[1]\r\n\r\n    if returned_count in expected_lines:\r\n        test_score += 1\r\n    if returned_count == expected_count:\r\n        test_score += 0.5\r\n    \r\n    if returned_item in expected_lines:\r\n        test_score += 1\r\n    if returned_item == expected_item:\r\n        test_score += 0.5\r\n\r\n    test_score = round(100 * (test_score / test_max), 1)\r\n    print_test_results(test_score, output, expected_output)\r\n    \r\n    return test_score\r\n\r\ndef initial_test():\r\n    global delimiter_used\r\n    \r\n    test_max = 12\r\n\r\n    test_score = 1 # For testing against the server\r\n\r\n    sensor_string = \"sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end\"\r\n    delimiter_column = 1\r\n\r\n    detection_failed = False\r\n    output, error   = autograder.run_script(\"a2_4_%s.py\" % (variant), [ sensor_string, delimiter_column ])\r\n    \r\n    if error == \"\":\r\n        test_score += 1\r\n        if verbose: print(\"+1 Running without error.\")\r\n    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)\r\n\r\n    returned_lines = output.strip().split('\\n')\r\n    returned_count = None\r\n    returned_item = None\r\n    if len(returned_lines) > 0:\r\n        returned_count = returned_lines[0]\r\n    if len(returned_lines) > 1:\r\n        returned_item = returned_lines[1]\r\n\r\n    expected_lines = expected_output.strip().split('\\n')\r\n    #expected_count = expected_lines[0]\r\n    #expected_item = expected_lines[1]\r\n\r\n    if len(returned_lines) >= 1 and returned_lines[0] != '':\r\n        test_score += 1\r\n        if verbose: print(\"+1 At least one line of output.\")\r\n    if len(returned_lines) == 2:\r\n        test_score += 1\r\n        if verbose: print(\"+1 Exactly two lines of output.\")\r\n        \r\n    if returned_count in expected_lines:\r\n        test_score += 1\r\n        if verbose: print(\"+1 Count contained in output somewhere.\")\r\n    if returned_item in expected_lines:\r\n        test_score += 1\r\n        if verbose: print(\"+1 Requested item contained in output somewhere.\")\r\n\r\n    detection_failed = len(returned_lines) < 2\r\n    \r\n    if verbose:\r\n        print(\"Delimiter Detection:\")\r\n        if detection_failed:\r\n            print(\"Failed:\", returned_lines)\r\n        else:\r\n            print(\"Detected delimiter: \", returned_lines[1])\r\n            print(\"Sensor fields: \", returned_lines[0])\r\n    \r\n    if variant in returned_lines:\r\n        test_score += 3\r\n        if verbose: print(\"+3 Detected delimiter is correct.\")\r\n\r\n    delimiter_used = None\r\n    if (not detection_failed) and (returned_lines[1] in variants):\r\n        delimiter_used = variants[returned_lines[1]][\"delimiter\"]\r\n\r\n    if delimiter_used == delimiter_proper:\r\n        test_score += 3\r\n        if verbose: print(\"+3 Detected delimiter is proper.\")\r\n\r\n    if delimiter_used == None:\r\n        delimiter_used = delimiter_proper\r\n        \r\n    test_score = round(100 * (test_score / test_max), 1)\r\n    print_test_results(test_score, output, expected_output)\r\n\r\n    return test_score\r\n    \r\ndef test_passed():\r\n\r\n    test_weights = [20, 12,4,4]\r\n    test_total = sum(test_weights) - test_weights[0]\r\n    if test_total != test_weights[0]:\r\n        print(\"Individual tests do not add to total value.\\n\")\r\n        \r\n    score = 0\r\n    test_num = 0\r\n    #------------------------------------------------\r\n    # Test #1: Sense delimiter used\r\n    #------------------------------------------------\r\n    test_num += 1\r\n    test_weight = 100*(test_weights[test_num]/test_total)\r\n    \r\n    if verbose:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    else:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n        \r\n    test_score = initial_test()\r\n    \r\n    score += (test_score/100) * test_weight\r\n    \r\n    #------------------------------------------------\r\n    # Test #2: Using detected delimiter\r\n    #------------------------------------------------\r\n    test_num += 1\r\n    test_weight = 100*(4/20)\r\n    \r\n    if verbose:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    else:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    \r\n    test_score = run1test(delimiter_used)\r\n    \r\n    score += (test_score/100) * test_weight\r\n\r\n    #------------------------------------------------\r\n    # Test #3: Use correct delimiter\r\n    #------------------------------------------------\r\n    test_num += 1\r\n    test_weight = 100*(4/20)\r\n    \r\n    if verbose:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    else:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n        \r\n    test_score = run1test(delimiter_proper)\r\n    \r\n    score += (test_score/100) * test_weight\r\n\r\n    #------------------------------------------------\r\n    # End of Test\r\n    #------------------------------------------------\r\n    \r\n    print(\"\\nOVERALL SCORE:\")\r\n    return round(score,1)\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':   \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 262, "problem_id": "a2_4_hyphen", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a Python program that already contains code to get\nthe following two items from the user:\n\n  * **the_string** :  A hyphen-separated string.  \nExample: johnson81-4081-30no86-cj4081-Craig-Johnson-Depot-London\n\n  * **column_to_print** :  A number indicating which item from the string to print.  \nNOTE:  0 indicates the first item in the string, 1 indicates the second, etc.\n\nAdd code to this program that:\n\n  1. Splits the_string into separate items.\n  2. Prints the number of items that result from splitting the_string (not the number of characters in the string).\n  3. Prints the item indicated by the column_to_print value.\n\n**EXAMPLE:**\n\nIf the user types:\n\n    \n    \n    johnson81-4081-30no86-cj4081-Craig-Johnson-Depot-London  \n    2\n\nYour program should output:\n\n    \n    \n    8  \n    30no86\n\n**HINT: A hyphen (dash) is this: '-'. On most keyboards it is located to the\nright of the '0' key.** **If you cannot find it, ask an instructor for help.**\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\nvariant = \"hyphen\"\r\nverbose = False\r\n\r\nvariants = {\r\n            \"validate\": {\"delimiter\": '.'}, \r\n            \"comma\"   : {\"delimiter\": ','},\r\n            \"pipe\"    : {\"delimiter\": '|'}, #\r\n            \"amp\"     : {\"delimiter\": '&'}, #\r\n            \"caret\"   : {\"delimiter\": '^'}, #\r\n            \"dollar\"  : {\"delimiter\": '$'}, #\r\n            \"hash\"    : {\"delimiter\": '#'}, #\r\n            \"ques\"    : {\"delimiter\": '?'}, #\r\n            \"semic\"   : {\"delimiter\": ';'}, #\r\n            \"slash\"   : {\"delimiter\": '/'}, #\r\n            \"star\"    : {\"delimiter\": '*'}, #\r\n            \"colon\"   : {\"delimiter\": ':'}, #\r\n            \"hyphen\"  : {\"delimiter\": '-'}, #\r\n            \"score\"   : {\"delimiter\": '_'}, #\r\n           }\r\n\r\ndelimiter_proper = variants[variant][\"delimiter\"]\r\n\r\ndef generate_test_string(delimiter):\r\n    \r\n    random_lists = [\r\n                    [\"booker12\",\"9012\",\"12se74\",\"rb9012\",\"Rachel\",\"Booker\",\"Sales\",\"Coventry\"],\r\n                    [\"grey07\",\"2070\",\"04ap67\",\"lg2070\",\"Laura\",\"Grey\",\"Depot\",\"London\"],\r\n                    [\"johnson81\",\"4081\",\"30no86\",\"cj4081\",\"Craig\",\"Johnson\",\"Shipping\",\"Westminster\"],\r\n                    [\"jenkins46\",\"9346\",\"14ju73\",\"mj9346\",\"Mary\",\"Jenkins\",\"Engineering\",\"Liverpool\"],\r\n                    [\"smith79\",\"5079\",\"09ja61\",\"js5079\",\"Jamie\",\"Smith\",\"Testing\",\"Manchester\"]\r\n                   ]\r\n    \r\n    random_list = random_lists[random.randrange(len(random_lists))]\r\n    random_column = random.randrange(len(random_list))\r\n    test_string = \"\"\r\n    for field in random_list:\r\n        if test_string != \"\":\r\n            test_string += delimiter\r\n        test_string += field\r\n    return test_string, random_column\r\n\r\ndef solution(delimiter, string, column_num):\r\n    \r\n    #print(\"SOLUTION:\", string, delimiter, column_num, sep=\"\\n\")\r\n    columns = string.split(delimiter)\r\n    output = str(len(columns)) + '\\n'\r\n    output += columns[column_num] + '\\n'\r\n        \r\n    return output\r\n\r\ndef print_test_results(test_score, actual_output, expected_output):\r\n\r\n    if verbose:\r\n        \r\n        if test_score == 100:\r\n            print(\"CORRECT: %.1f%%\" % (test_score))\r\n        else:\r\n            print(\"INCORRECT: %.1f%%\" % (test_score))\r\n            print(\"Expected:\")\r\n            print(expected_output)\r\n\r\n    else:\r\n\r\n        if test_score == 100:\r\n            print(\"CORRECT\")\r\n        else:\r\n            print(\"INCORRECT\")\r\n            print(\"Expected:\")\r\n            print(expected_output)\r\n\r\ndef run1test(delimiter):\r\n\r\n    # Rubric\r\n    # 1 Runs without errors\r\n    # 1 Prints out the correct item count (regardless of order)\r\n    # 1 Prints out the correct item value (regardless of order)\r\n    # 1 Prints out the items in the correct order (0.5 for each)\r\n\r\n    test_score = 0\r\n    test_max = 4\r\n    \r\n    test_string, random_column = generate_test_string(delimiter)\r\n    output, error = autograder.run_script(\"a2_4_%s.py\" % (variant), [ test_string, random_column ])\r\n    expected_output = solution(delimiter, test_string, random_column)\r\n\r\n    if error == \"\":\r\n        test_score += 1\r\n    \r\n    returned_lines = output.strip().split('\\n')\r\n    returned_count = None\r\n    returned_item = None\r\n    if len(returned_lines) > 0:\r\n        returned_count = returned_lines[0]\r\n    if len(returned_lines) > 1:\r\n        returned_item = returned_lines[1]\r\n    \r\n    expected_lines = expected_output.strip().split('\\n')\r\n    expected_count = expected_lines[0]\r\n    expected_item = expected_lines[1]\r\n\r\n    if returned_count in expected_lines:\r\n        test_score += 1\r\n    if returned_count == expected_count:\r\n        test_score += 0.5\r\n    \r\n    if returned_item in expected_lines:\r\n        test_score += 1\r\n    if returned_item == expected_item:\r\n        test_score += 0.5\r\n\r\n    test_score = round(100 * (test_score / test_max), 1)\r\n    print_test_results(test_score, output, expected_output)\r\n    \r\n    return test_score\r\n\r\ndef initial_test():\r\n    global delimiter_used\r\n    \r\n    test_max = 12\r\n\r\n    test_score = 1 # For testing against the server\r\n\r\n    sensor_string = \"sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end\"\r\n    delimiter_column = 1\r\n\r\n    detection_failed = False\r\n    output, error   = autograder.run_script(\"a2_4_%s.py\" % (variant), [ sensor_string, delimiter_column ])\r\n    \r\n    if error == \"\":\r\n        test_score += 1\r\n        if verbose: print(\"+1 Running without error.\")\r\n    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)\r\n\r\n    returned_lines = output.strip().split('\\n')\r\n    returned_count = None\r\n    returned_item = None\r\n    if len(returned_lines) > 0:\r\n        returned_count = returned_lines[0]\r\n    if len(returned_lines) > 1:\r\n        returned_item = returned_lines[1]\r\n\r\n    expected_lines = expected_output.strip().split('\\n')\r\n    #expected_count = expected_lines[0]\r\n    #expected_item = expected_lines[1]\r\n\r\n    if len(returned_lines) >= 1 and returned_lines[0] != '':\r\n        test_score += 1\r\n        if verbose: print(\"+1 At least one line of output.\")\r\n    if len(returned_lines) == 2:\r\n        test_score += 1\r\n        if verbose: print(\"+1 Exactly two lines of output.\")\r\n        \r\n    if returned_count in expected_lines:\r\n        test_score += 1\r\n        if verbose: print(\"+1 Count contained in output somewhere.\")\r\n    if returned_item in expected_lines:\r\n        test_score += 1\r\n        if verbose: print(\"+1 Requested item contained in output somewhere.\")\r\n\r\n    detection_failed = len(returned_lines) < 2\r\n    \r\n    if verbose:\r\n        print(\"Delimiter Detection:\")\r\n        if detection_failed:\r\n            print(\"Failed:\", returned_lines)\r\n        else:\r\n            print(\"Detected delimiter: \", returned_lines[1])\r\n            print(\"Sensor fields: \", returned_lines[0])\r\n    \r\n    if variant in returned_lines:\r\n        test_score += 3\r\n        if verbose: print(\"+3 Detected delimiter is correct.\")\r\n\r\n    delimiter_used = None\r\n    if (not detection_failed) and (returned_lines[1] in variants):\r\n        delimiter_used = variants[returned_lines[1]][\"delimiter\"]\r\n\r\n    if delimiter_used == delimiter_proper:\r\n        test_score += 3\r\n        if verbose: print(\"+3 Detected delimiter is proper.\")\r\n\r\n    if delimiter_used == None:\r\n        delimiter_used = delimiter_proper\r\n        \r\n    test_score = round(100 * (test_score / test_max), 1)\r\n    print_test_results(test_score, output, expected_output)\r\n\r\n    return test_score\r\n    \r\ndef test_passed():\r\n\r\n    test_weights = [20, 12,4,4]\r\n    test_total = sum(test_weights) - test_weights[0]\r\n    if test_total != test_weights[0]:\r\n        print(\"Individual tests do not add to total value.\\n\")\r\n        \r\n    score = 0\r\n    test_num = 0\r\n    #------------------------------------------------\r\n    # Test #1: Sense delimiter used\r\n    #------------------------------------------------\r\n    test_num += 1\r\n    test_weight = 100*(test_weights[test_num]/test_total)\r\n    \r\n    if verbose:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    else:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n        \r\n    test_score = initial_test()\r\n    \r\n    score += (test_score/100) * test_weight\r\n    \r\n    #------------------------------------------------\r\n    # Test #2: Using detected delimiter\r\n    #------------------------------------------------\r\n    test_num += 1\r\n    test_weight = 100*(4/20)\r\n    \r\n    if verbose:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    else:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    \r\n    test_score = run1test(delimiter_used)\r\n    \r\n    score += (test_score/100) * test_weight\r\n\r\n    #------------------------------------------------\r\n    # Test #3: Use correct delimiter\r\n    #------------------------------------------------\r\n    test_num += 1\r\n    test_weight = 100*(4/20)\r\n    \r\n    if verbose:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    else:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n        \r\n    test_score = run1test(delimiter_proper)\r\n    \r\n    score += (test_score/100) * test_weight\r\n\r\n    #------------------------------------------------\r\n    # End of Test\r\n    #------------------------------------------------\r\n    \r\n    print(\"\\nOVERALL SCORE:\")\r\n    return round(score,1)\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':   \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 263, "problem_id": "a2_4_hash", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a Python program that already contains code to get\nthe following two items from the user:\n\n  * **the_string** :  A hashtag-separated string.  \nExample: johnson81#4081#30no86#cj4081#Craig#Johnson#Depot#London\n\n  * **column_to_print** :  A number indicating which item from the string to print.  \nNOTE:  0 indicates the first item in the string, 1 indicates the second, etc.\n\nAdd code to this program that:\n\n  1. Splits the_string into separate items.\n  2. Prints the number of items that result from splitting the_string (not the number of characters in the string).\n  3. Prints the item indicated by the column_to_print value.\n\n**EXAMPLE:**\n\nIf the user types:\n\n    \n    \n    johnson81#4081#30no86#cj4081#Craig#Johnson#Depot#London  \n    2\n\nYour program should output:\n\n    \n    \n    8  \n    30no86\n\n**HINT: A hashtag (pound sign) looks like this: '#'. On most keyboards it is\non the same key as the '3'. If you cannot find it, ask an instructor for\nhelp.** ****\n\n\n", "code": "\nthe_string = input()\ncolumn_to_print = int(input())\n\nitems = the_string.split('#')\nprint(len(items))\nprint(items[column_to_print])", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\nvariant = \"hash\"\r\nverbose = False\r\n\r\nvariants = {\r\n            \"validate\": {\"delimiter\": '.'}, \r\n            \"comma\"   : {\"delimiter\": ','},\r\n            \"pipe\"    : {\"delimiter\": '|'}, #\r\n            \"amp\"     : {\"delimiter\": '&'}, #\r\n            \"caret\"   : {\"delimiter\": '^'}, #\r\n            \"dollar\"  : {\"delimiter\": '$'}, #\r\n            \"hash\"    : {\"delimiter\": '#'}, #\r\n            \"ques\"    : {\"delimiter\": '?'}, #\r\n            \"semic\"   : {\"delimiter\": ';'}, #\r\n            \"slash\"   : {\"delimiter\": '/'}, #\r\n            \"star\"    : {\"delimiter\": '*'}, #\r\n            \"colon\"   : {\"delimiter\": ':'}, #\r\n            \"hyphen\"  : {\"delimiter\": '-'}, #\r\n            \"score\"   : {\"delimiter\": '_'}, #\r\n           }\r\n\r\ndelimiter_proper = variants[variant][\"delimiter\"]\r\n\r\ndef generate_test_string(delimiter):\r\n    \r\n    random_lists = [\r\n                    [\"booker12\",\"9012\",\"12se74\",\"rb9012\",\"Rachel\",\"Booker\",\"Sales\",\"Coventry\"],\r\n                    [\"grey07\",\"2070\",\"04ap67\",\"lg2070\",\"Laura\",\"Grey\",\"Depot\",\"London\"],\r\n                    [\"johnson81\",\"4081\",\"30no86\",\"cj4081\",\"Craig\",\"Johnson\",\"Shipping\",\"Westminster\"],\r\n                    [\"jenkins46\",\"9346\",\"14ju73\",\"mj9346\",\"Mary\",\"Jenkins\",\"Engineering\",\"Liverpool\"],\r\n                    [\"smith79\",\"5079\",\"09ja61\",\"js5079\",\"Jamie\",\"Smith\",\"Testing\",\"Manchester\"]\r\n                   ]\r\n    \r\n    random_list = random_lists[random.randrange(len(random_lists))]\r\n    random_column = random.randrange(len(random_list))\r\n    test_string = \"\"\r\n    for field in random_list:\r\n        if test_string != \"\":\r\n            test_string += delimiter\r\n        test_string += field\r\n    return test_string, random_column\r\n\r\ndef solution(delimiter, string, column_num):\r\n    \r\n    #print(\"SOLUTION:\", string, delimiter, column_num, sep=\"\\n\")\r\n    columns = string.split(delimiter)\r\n    output = str(len(columns)) + '\\n'\r\n    output += columns[column_num] + '\\n'\r\n        \r\n    return output\r\n\r\ndef print_test_results(test_score, actual_output, expected_output):\r\n\r\n    if verbose:\r\n        \r\n        if test_score == 100:\r\n            print(\"CORRECT: %.1f%%\" % (test_score))\r\n        else:\r\n            print(\"INCORRECT: %.1f%%\" % (test_score))\r\n            print(\"Expected:\")\r\n            print(expected_output)\r\n\r\n    else:\r\n\r\n        if test_score == 100:\r\n            print(\"CORRECT\")\r\n        else:\r\n            print(\"INCORRECT\")\r\n            print(\"Expected:\")\r\n            print(expected_output)\r\n\r\ndef run1test(delimiter):\r\n\r\n    # Rubric\r\n    # 1 Runs without errors\r\n    # 1 Prints out the correct item count (regardless of order)\r\n    # 1 Prints out the correct item value (regardless of order)\r\n    # 1 Prints out the items in the correct order (0.5 for each)\r\n\r\n    test_score = 0\r\n    test_max = 4\r\n    \r\n    test_string, random_column = generate_test_string(delimiter)\r\n    output, error = autograder.run_script(\"a2_4_%s.py\" % (variant), [ test_string, random_column ])\r\n    expected_output = solution(delimiter, test_string, random_column)\r\n\r\n    if error == \"\":\r\n        test_score += 1\r\n    \r\n    returned_lines = output.strip().split('\\n')\r\n    returned_count = None\r\n    returned_item = None\r\n    if len(returned_lines) > 0:\r\n        returned_count = returned_lines[0]\r\n    if len(returned_lines) > 1:\r\n        returned_item = returned_lines[1]\r\n    \r\n    expected_lines = expected_output.strip().split('\\n')\r\n    expected_count = expected_lines[0]\r\n    expected_item = expected_lines[1]\r\n\r\n    if returned_count in expected_lines:\r\n        test_score += 1\r\n    if returned_count == expected_count:\r\n        test_score += 0.5\r\n    \r\n    if returned_item in expected_lines:\r\n        test_score += 1\r\n    if returned_item == expected_item:\r\n        test_score += 0.5\r\n\r\n    test_score = round(100 * (test_score / test_max), 1)\r\n    print_test_results(test_score, output, expected_output)\r\n    \r\n    return test_score\r\n\r\ndef initial_test():\r\n    global delimiter_used\r\n    \r\n    test_max = 12\r\n\r\n    test_score = 1 # For testing against the server\r\n\r\n    sensor_string = \"sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end\"\r\n    delimiter_column = 1\r\n\r\n    detection_failed = False\r\n    output, error   = autograder.run_script(\"a2_4_%s.py\" % (variant), [ sensor_string, delimiter_column ])\r\n    \r\n    if error == \"\":\r\n        test_score += 1\r\n        if verbose: print(\"+1 Running without error.\")\r\n    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)\r\n\r\n    returned_lines = output.strip().split('\\n')\r\n    returned_count = None\r\n    returned_item = None\r\n    if len(returned_lines) > 0:\r\n        returned_count = returned_lines[0]\r\n    if len(returned_lines) > 1:\r\n        returned_item = returned_lines[1]\r\n\r\n    expected_lines = expected_output.strip().split('\\n')\r\n    #expected_count = expected_lines[0]\r\n    #expected_item = expected_lines[1]\r\n\r\n    if len(returned_lines) >= 1 and returned_lines[0] != '':\r\n        test_score += 1\r\n        if verbose: print(\"+1 At least one line of output.\")\r\n    if len(returned_lines) == 2:\r\n        test_score += 1\r\n        if verbose: print(\"+1 Exactly two lines of output.\")\r\n        \r\n    if returned_count in expected_lines:\r\n        test_score += 1\r\n        if verbose: print(\"+1 Count contained in output somewhere.\")\r\n    if returned_item in expected_lines:\r\n        test_score += 1\r\n        if verbose: print(\"+1 Requested item contained in output somewhere.\")\r\n\r\n    detection_failed = len(returned_lines) < 2\r\n    \r\n    if verbose:\r\n        print(\"Delimiter Detection:\")\r\n        if detection_failed:\r\n            print(\"Failed:\", returned_lines)\r\n        else:\r\n            print(\"Detected delimiter: \", returned_lines[1])\r\n            print(\"Sensor fields: \", returned_lines[0])\r\n    \r\n    if variant in returned_lines:\r\n        test_score += 3\r\n        if verbose: print(\"+3 Detected delimiter is correct.\")\r\n\r\n    delimiter_used = None\r\n    if (not detection_failed) and (returned_lines[1] in variants):\r\n        delimiter_used = variants[returned_lines[1]][\"delimiter\"]\r\n\r\n    if delimiter_used == delimiter_proper:\r\n        test_score += 3\r\n        if verbose: print(\"+3 Detected delimiter is proper.\")\r\n\r\n    if delimiter_used == None:\r\n        delimiter_used = delimiter_proper\r\n        \r\n    test_score = round(100 * (test_score / test_max), 1)\r\n    print_test_results(test_score, output, expected_output)\r\n\r\n    return test_score\r\n    \r\ndef test_passed():\r\n\r\n    test_weights = [20, 12,4,4]\r\n    test_total = sum(test_weights) - test_weights[0]\r\n    if test_total != test_weights[0]:\r\n        print(\"Individual tests do not add to total value.\\n\")\r\n        \r\n    score = 0\r\n    test_num = 0\r\n    #------------------------------------------------\r\n    # Test #1: Sense delimiter used\r\n    #------------------------------------------------\r\n    test_num += 1\r\n    test_weight = 100*(test_weights[test_num]/test_total)\r\n    \r\n    if verbose:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    else:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n        \r\n    test_score = initial_test()\r\n    \r\n    score += (test_score/100) * test_weight\r\n    \r\n    #------------------------------------------------\r\n    # Test #2: Using detected delimiter\r\n    #------------------------------------------------\r\n    test_num += 1\r\n    test_weight = 100*(4/20)\r\n    \r\n    if verbose:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    else:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    \r\n    test_score = run1test(delimiter_used)\r\n    \r\n    score += (test_score/100) * test_weight\r\n\r\n    #------------------------------------------------\r\n    # Test #3: Use correct delimiter\r\n    #------------------------------------------------\r\n    test_num += 1\r\n    test_weight = 100*(4/20)\r\n    \r\n    if verbose:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n    else:\r\n        print(\"\\nTEST #%d (weight: %.1f%%)\" % (test_num, test_weight))\r\n        \r\n    test_score = run1test(delimiter_proper)\r\n    \r\n    score += (test_score/100) * test_weight\r\n\r\n    #------------------------------------------------\r\n    # End of Test\r\n    #------------------------------------------------\r\n    \r\n    print(\"\\nOVERALL SCORE:\")\r\n    return round(score,1)\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':   \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 264, "problem_id": "a2_3_thirteen", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with program that gets a number from the user and\nstores it in a variable called  **starting_number**.  \n\nWrite a program that prints all of the numbers between  **starting_number**\nand **0** (including **0** ), counting down by **13** each time.\n\n\n\nFor example, if the user types **45** , your program should print:\n\n    \n    \n    45  \n    32  \n    19  \n    6\n\nSimilarly, if the user types **39** , your program should print:\n\n    \n    \n    39  \n    26  \n    13  \n    0\n\nYou may assume that the user will only enter positive numbers.\n\n**HINT:**\n\n  * This problem can be solved using either a  **for**  or  **while**  loop.\n\n\n", "code": "\nstarting_number = int(input(\"Enter a number: \"))\n\nfor num in range(starting_number, -1, -13):\n    print(num)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef solution(starting_num):\r\n    result = ''\r\n    i = starting_num\r\n    \r\n    while i >= 0:\r\n    \r\n        result += str(i) + \"\\n\"\r\n        \r\n        i = i - 13\r\n    return result\r\n\r\n\r\ndef test_passed():    \r\n    score = 0\r\n    random_number = 78 + 13 * random.randint(1, 15)\r\n    \r\n    output, error = autograder.run_script(\"a2_3_thirteen.py\", [random_number])\r\n    expected_string = solution(random_number)\r\n    lines = output.strip().split('\\n')\r\n    expected_lines = expected_string.strip().split('\\n')\r\n\r\n    #Exactly correct\r\n    if output.strip() == expected_string.strip():\r\n        print(\"CORRECT\")\r\n        score += 100\r\n    #Mostly correct but added an extra value or included one less value: -2 points\r\n    elif output.strip().split('\\n') == expected_lines[:-1] or \\\r\n         output.strip().split('\\n')[:-1] == expected_lines:\r\n        print(\"INCORRECT.  Expected:\\n\"+expected_string)\r\n        score+=90\r\n    else:\r\n        print(\"INCORRECT.  Expected:\\n\"+expected_string)\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 265, "problem_id": "a2_3_nineteen", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with program that gets a number from the user and\nstores it in a variable called  **starting_number**.  \n\nWrite a program that prints all of the numbers between  **starting_number**\nand **0** (including **0** ), counting down by **19** each time.\n\n\n\nFor example, if the user types **45** , your program should print:\n\n    \n    \n    45  \n    26  \n    7\n\nSimilarly, if the user types **57** , your program should print:\n\n    \n    \n    57  \n    38  \n    19  \n    0\n\nYou may assume that the user will only enter positive numbers.\n\n**HINT:**\n\n  * This problem can be solved using either a  **for**  or  **while**  loop.\n\n\n", "code": "\n# Get the starting number from the user\nstarting_number = int(input(\"Enter a number: \"))\n\n# Print the starting number\nprint(starting_number)\n\n# Loop until the starting number becomes 0\nwhile starting_number > 0:\n    # Subtract 19 from the starting number\n    starting_number -= 19\n    # Print the new starting number\n    print(starting_number)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef solution(starting_num):\r\n    result = ''\r\n    i = starting_num\r\n    \r\n    while i >= 0:\r\n    \r\n        result += str(i) + \"\\n\"\r\n        \r\n        i = i - 19\r\n    return result\r\n\r\n\r\ndef test_passed():    \r\n    score = 0\r\n    random_number = 114 + 19 * random.randint(1, 20)\r\n    \r\n    output, error = autograder.run_script(\"a2_3_nineteen.py\", [random_number])\r\n    expected_string = solution(random_number)\r\n    lines = output.strip().split('\\n')\r\n    expected_lines = expected_string.strip().split('\\n')\r\n\r\n    #Exactly correct\r\n    if output.strip() == expected_string.strip():\r\n        print(\"CORRECT\")\r\n        score += 100\r\n    #Mostly correct but added an extra value or included one less value: -2 points\r\n    elif output.strip().split('\\n') == expected_lines[:-1] or \\\r\n         output.strip().split('\\n')[:-1] == expected_lines:\r\n        print(\"INCORRECT.  Expected:\\n\"+expected_string)\r\n        score+=90\r\n    else:\r\n        print(\"INCORRECT.  Expected:\\n\"+expected_string)\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 266, "problem_id": "a2_3_nine", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nYou have been provided with program that gets a number from the user and\nstores it in a variable called  **starting_number**.  \n\nWrite a program that prints all of the numbers between  **starting_number**\nand  **0** (including **0** ), counting down by **9**  each time.\n\n\n\nFor example, if the user types ** 45**, your program should print:\n\n    \n    \n    45  \n    36  \n    27  \n    18  \n    9  \n    0\n\nSimilarly, if the user types **50** , your program should print:\n\n    \n    \n    50  \n    41  \n    32  \n    23  \n    14  \n    5\n\nYou may assume that the user will only enter positive numbers.\n\n**HINT:**\n\n  * This problem can be solved using either a  **for** or  **while** loop.\n\n\n", "code": "\n# Get input from the user and store it in the variable starting_number\nstarting_number = int(input(\"Enter a number: \"))\n\n# Use a while loop to print the numbers in descending order\n# starting from starting_number and counting down by 9 each time\nwhile starting_number >= 0:\n    print(starting_number)\n    starting_number -= 9\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef solution(starting_num):\r\n    result = ''\r\n    i = starting_num\r\n    \r\n    while i >= 0:\r\n    \r\n        result += str(i) + \"\\n\"\r\n        \r\n        i = i - 9\r\n    return result\r\n\r\n\r\ndef test_passed():    \r\n    score = 0\r\n    random_number = 81 + 9 * random.randint(1, 30)\r\n    \r\n    output, error = autograder.run_script(\"a2_3_nine.py\", [random_number])\r\n    expected_string = solution(random_number)\r\n    lines = output.strip().split('\\n')\r\n    expected_lines = expected_string.strip().split('\\n')\r\n\r\n    #Exactly correct\r\n    if output.strip() == expected_string.strip():\r\n        print(\"CORRECT\")\r\n        score += 100\r\n    #Mostly correct but added an extra value or included one less value: -2 points\r\n    elif output.strip().split('\\n') == expected_lines[:-1] or \\\r\n         output.strip().split('\\n')[:-1] == expected_lines:\r\n        print(\"INCORRECT.  Expected:\\n\"+expected_string)\r\n        score+=90\r\n    else:\r\n        print(\"INCORRECT.  Expected:\\n\"+expected_string)\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 267, "problem_id": "a2_3_eighteen", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with program that gets a number from the user and\nstores it in a variable called  **starting_number**.  \n\nWrite a program that prints all of the numbers between  **starting_number**\nand  **0**  (including **0** ), counting down by **18** each time.\n\n\n\nFor example, if the user types  **108** , your program should print:\n\n    \n    \n    108  \n    90  \n    72  \n    54  \n    36  \n    18  \n    0\n\nSimilarly, if the user types **92** , your program should print:\n\n    \n    \n    92  \n    74  \n    56  \n    38  \n    20  \n    2\n\nYou may assume that the user will only enter positive numbers.\n\n**HINT:**\n\n  * This problem can be solved using either a  **for**  or  **while**  loop.\n\n\n", "code": "\nstarting_number = int(input(\"Enter a number: \"))\n\nfor num in range(starting_number, -1, -18):\n    print(num)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef solution(starting_num):\r\n    result = ''\r\n    i = starting_num\r\n    \r\n    while i >= 0:\r\n    \r\n        result += str(i) + \"\\n\"\r\n        \r\n        i = i - 18\r\n    return result\r\n\r\n\r\ndef test_passed():    \r\n    score = 0\r\n    random_number = 108 + 18 * random.randint(1, 15)\r\n    \r\n    output, error = autograder.run_script(\"a2_3_eighteen.py\", [random_number])\r\n    expected_string = solution(random_number)\r\n    lines = output.strip().split('\\n')\r\n    expected_lines = expected_string.strip().split('\\n')\r\n\r\n    #Exactly correct\r\n    if output.strip() == expected_string.strip():\r\n        print(\"CORRECT\")\r\n        score += 100\r\n    #Mostly correct but added an extra value or included one less value: -2 points\r\n    elif output.strip().split('\\n') == expected_lines[:-1] or \\\r\n         output.strip().split('\\n')[:-1] == expected_lines:\r\n        print(\"INCORRECT.  Expected:\\n\"+expected_string)\r\n        score+=90\r\n    else:\r\n        print(\"INCORRECT.  Expected:\\n\"+expected_string)\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 268, "problem_id": "a2_2_orbit", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nThe oribt period of a planet can be calculated using the following formula:\n\n\n\n`Period = (D * 3.14)/ V`\n\n\n\n\n\nIn this formula:\n\n  * **D**  is the diameter of the orbit path (a floating point number)\n  * **V**  is the velocity of the planet (a floating point number)\n\n\n\nWrite a function called  **orbit_period**  that takes **D**  and **V**  as\nparameters (in that order), and  **returns**  the orbit period.  \n\n\n\n**NOTES:**\n\n  * You do NOT need to call this function.  Simply define it.\n\n\n\n\n", "code": "\ndef orbit_period(D, V):\n    Period = (D * 3.14) / V\n    return Period\n", "testcase": "from cs110 import autograder\r\nimport a2_2_orbit\r\n\r\ndef solution(D, V):\r\n    return (D*3.14)/V\r\n\r\n\r\ndef test_passed():    \r\n    score = 0\r\n    \r\n    print(\"Feedback:\")\r\n    \r\n    if 'orbit_period' in dir(a2_2_orbit):\r\n        print(\"Function Defined\")\r\n        score += 50\r\n    else:\r\n        print(\"Function Not Defined\")\r\n    \r\n    if 'orbit_period' in dir(a2_2_orbit) and a2_2_orbit.orbit_period(15, 0.22) == solution(15, 0.22):\r\n        print(\"Function Returns Correct Value\")\r\n        score += 50\r\n    else:\r\n        print(\"Function Does NOT Return the Correct Value\")\r\n\r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 269, "problem_id": "a2_1_right_triangle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a function called calculate_hypotenuse, which\ntakes two parameters:\n\n  * **side_1**\n  * **side_2**\n\nCall this function and pass it  **15**  for  **side_1** , and  **6.786**  for\n**side_2**.  Store the result in a variable called  **result**.  Do not print.\nSimply call the function, and store the returned value in the variable\n**result**.\n\n\n", "code": "\ndef calculate_hypotenuse(side_1, side_2):\n    import math\n    hypotenuse = math.sqrt(side_1**2 + side_2**2)\n    return hypotenuse\n\nresult = calculate_hypotenuse(15, 6.786)\n", "testcase": "from cs110 import autograder\nfrom a2_1_right_triangle import *  \n\ndef calculate_hypotenuse(side_1, side_2):\n    return (side_1**2+side_2**2)**.5\n\n\ndef test_passed():\n    solution = calculate_hypotenuse(15, 6.786)\n    \n    print(\"Feedback:\")\n        \n    if 'result' in globals() and abs(result - solution) < 0.1:\n        print(\"PASSED\")\n        return 100\n    elif 'result' not in globals():\n        print(\"FAILED.  Could not find variable 'result'\")\n    elif result != solution:\n        print(\"FAILED.  Variable 'result' has the wrong value \" + str(result))\n    else:\n        print(\"FAILED.  Something unexpected happened.\")\n    \n    return 0\n\n        \n# Runs your code in an IDE (for testing purposes)\nif __name__ == '__main__':    \n    test_case_result = test_passed()\n    print(\"Unit Test Returned:\", test_case_result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 270, "problem_id": "a1_6_pilot_quals", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nC-130 Pilot qualifications usually depend on a pilot's flight experience in\nterms of flight hours.\n\n**C-130 Pilot Qualification** | **Flight Hours**  \n---|---  \nUpgrade Pilot | 600  \nAircraft Commander | 800  \nFormation Lead | 1000  \nInstructor Pilot | 1250  \nEvaluator Pilot | 1500  \n  \n  \nWrite a Python program that asks the user to enter the number of flight hours\nthey currently have (does not need to be a whole number). Then, referencing\nthe table above, print out all qualifications they should have achieved in the\naircraft (one per line). If the their experience in the C-130 is more than 600\nflight hours, output \"Co-Pilot\".\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input** | 1996 | 1156.7 | 535.4  \n**Output** |\n\nUpgrade Pilot  \nAircraft Commander  \nFormation Lead  \nInstructor Pilot  \nEvaluator Pilot\n\n|\n\nUpgrade Pilot  \nAircraft Commander  \nFormation Lead\n\n| Co-Pilot  \n  \nNOTE: The qualifications can be listed in any order, so long as only the ones\nin range are printed.\n\n\n", "code": "\nflight_hours = float(input(\"Enter the number of flight hours: \"))\n\nprint(\"Co-Pilot\")\n\nif flight_hours >= 600:\n    print(\"Upgrade Pilot\")\nif flight_hours >= 800:\n    print(\"Aircraft Commander\")\nif flight_hours >= 1000:\n    print(\"Formation Lead\")\nif flight_hours >= 1250:\n    print(\"Instructor Pilot\")\nif flight_hours >= 1500:\n    print(\"Evaluator Pilot\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\n\r\ndef solution(hours):\r\n    result = \"\"\r\n\r\n    if hours < 600:\r\n        result += \"Co-Pilot\\n\"\r\n\r\n    if hours >= 600:\r\n        result += \"Upgrade Pilot\\n\"\r\n\r\n    if hours >= 800:\r\n        result += \"Aircraft Commander\\n\"\r\n        \r\n    if hours >= 1000:\r\n        result += \"Formation Lead\\n\"\r\n\r\n    if hours >=1250:\r\n        result += \"Instructor Pilot\\n\"\r\n\r\n    if hours >= 1500:\r\n        result += \"Evaluator Pilot\\n\"\r\n\r\n    \r\n    return result.strip().split('\\n')\r\n\r\n\r\ndef run_test(hours):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"------------------------------\")\r\n    print(\"Test\", num_tests_run, \"-\", hours, \"hours\")\r\n    print(\"------------------------------\")\r\n    \r\n    output, error_message = autograder.run_script(\"a1_6_pilot_quals.py\", [hours], True)\r\n    lines = output.strip().split(\"\\n\")\r\n    expected_answer = solution(hours)\r\n    \r\n    count = 0\r\n    \r\n    for answer in expected_answer:\r\n        if answer in lines:\r\n            print(\"Expecting\", answer, \" . . . FOUND!\")\r\n            count += 1\r\n        else:\r\n            print(\"Expecting\", answer, \" . . . MISSING!\")\r\n            \r\n    if count == len(expected_answer) and len(expected_answer) == len(lines):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    elif len(expected_answer) < len(lines):\r\n        print(\"Problems Detected - Your output has more lines than expected.\\n\")\r\n    else:\r\n        print(\"Problems Detected - Your output is missing one or more expected outputs.\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(0, 600), 1))\r\n    run_test(600)\r\n    run_test(round(random.uniform(600, 799), 1))\r\n    run_test(800)\r\n    run_test(round(random.uniform(800, 999), 1))\r\n    run_test(1000)\r\n    run_test(round(random.uniform(1000, 1249), 1))\r\n    run_test(1250)\r\n    run_test(round(random.uniform(1250, 1499), 1))\r\n    run_test(1500)\r\n    run_test(2750)\r\n    \r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Testbench (to run on outside of zyBooks)\r\nif __name__ == '__main__':\r\n    class Console:\r\n        def write(self, txt):\r\n            print(txt, end='')\r\n    \r\n    test_passed()\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 271, "problem_id": "a1_6_payload", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nThe USAF is known for its massive cargo transport capabilities. Below are the\nnames of 5 aircraft, as well as their maximum payload capacity\n\n\n\n**Cargo Aircraft**\n\n|\n\n**Maximum Load (inclusive, in Lbs. )**  \n  \n---|---  \n  \nC-5 Galaxy\n\n|\n\n285000  \n  \nC-17 Globemaster\n\n|\n\n170900  \n  \nKC-10 Extender\n\n|\n\n169000  \n  \nC-130 Hercules\n\n|\n\n42000  \n  \nV-22 Osprey\n\n|\n\n6000  \n  \n  \nWrite a Python program that asks the user to enter the payload weight (in\nLbs.) that needs to be moved. Then, referencing the table, print out all of\nthe Aircraft that could potentially carry that payload (one per line). If no\naircraft can carry the payload, output \"Too Heavy for Airlift\".\n\n\n\n**EXAMPLES:**\n\n  |\n\n**Example 1**\n\n|\n\n**Example 2**\n\n|\n\n**Example 3**  \n  \n---|---|---|---  \n  \n**Input**\n\n|\n\n150000\n\n|\n\n250000\n\n|\n\n300000  \n  \n**Output**\n\n|\n\nC-5 Galaxy\n\nC-17 Globemaster\n\nKC-10 Extender\n\n|\n\nC-5 Galaxy\n\n|\n\nToo Heavy for Airlift  \n  \nNOTE: The aircraft can be listed in any order, so long as only the ones\ncapable of the lift are printed.\n\n\n", "code": "\npayload = int(input(\"Enter the payload weight in lbs: \"))\n\nif payload <= 6000:\n    print(\"V-22 Osprey\")\n\nif payload <= 42000:\n    print(\"C-130 Hercules\")\n    \nif payload <= 169000:\n    print(\"KC-10 Extender\")\n    \nif payload <= 170900:\n    print(\"C-17 Globemaster\")\n    \nif payload <= 285000:\n    print(\"C-5 Galaxy\")\n    \nif payload > 285000:\n    print(\"Too Heavy for Airlift\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\n\r\ndef solution(payload_weight):\r\n    result = \"\"\r\n    \r\n    if payload_weight <= 6000:\r\n        result += \"V-22 Osprey\\n\"\r\n\r\n    if payload_weight <= 42000:\r\n        result += \"C-130 Hercules\\n\"\r\n        \r\n    if payload_weight <= 169000:\r\n        result += \"KC-10 Extender\\n\"\r\n\r\n    if payload_weight <= 170900:\r\n        result += \"C-17 Globemaster\\n\"\r\n\r\n    if payload_weight <= 285000:\r\n        result += \"C-5 Galaxy\\n\"\r\n\r\n    if payload_weight > 285000:\r\n        result += \"Too Heavy for Airlift\\n\"\r\n    \r\n    return result.strip().split('\\n')\r\n\r\n\r\ndef run_test(payload_weight):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"------------------------------\")\r\n    print(\"Test\", num_tests_run, \"-\", payload_weight, \"lbs\")\r\n    print(\"------------------------------\")\r\n    \r\n    output, error_message = autograder.run_script(\"a1_6_payload.py\", [payload_weight], True)\r\n    lines = output.strip().split(\"\\n\")\r\n    expected_answer = solution(payload_weight)\r\n    \r\n    count = 0\r\n    \r\n    for answer in expected_answer:\r\n        if answer in lines:\r\n            print(\"Expecting\", answer, \" . . . FOUND!\")\r\n            count += 1\r\n        else:\r\n            print(\"Expecting\", answer, \" . . . MISSING!\")\r\n            \r\n    if count == len(expected_answer) and len(expected_answer) == len(lines):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    elif len(expected_answer) < len(lines):\r\n        print(\"Problems Detected - Your output has more lines than expected.\\n\")\r\n    else:\r\n        print(\"Problems Detected - Your output is missing one or more expected outputs.\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(0, 5999), 1))\r\n    run_test(6000)\r\n    run_test(round(random.uniform(6001, 41999), 1))\r\n    run_test(42000)\r\n    run_test(round(random.uniform(42001, 168999), 1))\r\n    run_test(169000)\r\n    run_test(round(random.uniform(169001, 170899), 1))\r\n    run_test(170900)\r\n    run_test(round(random.uniform(170901, 284999), 1))\r\n    run_test(285000)\r\n    run_test(300000)\r\n    \r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Testbench (to run on outside of zyBooks)\r\nif __name__ == '__main__':\r\n    class Console:\r\n        def write(self, txt):\r\n            print(txt, end='')\r\n    \r\n    test_passed()\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 272, "problem_id": "a1_6_missilethreat", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nAccording to intelligence reports, the North Korean military uses at least 5\ndifferent classes of Ballistic Missiles. The names of these missiles, as well\nas their maximum theoretical range, are provided below:\n\n**Missile Class** | **Maximum Range (inclusive, in Kilometers)**  \n---|---  \nHwasong-6 | 500  \nKN-11 | 1200  \nMusudan BM-25 | 4000  \nHwasong-14 | 8000  \nTaepodong-2 | 12000  \n  \n  \nWrite a Python program that asks the user to enter the distance to a potential\ntarget (in Kilometers). Then, referencing the table, print out all of the\nMissile Classes that could potentially reach the target (one per line). If no\nmissiles are in range, output \"Not in range\".\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input** | 1800 | 8000 | 18000  \n**Output** | Musudan BM-25  \nHwason-14  \nTaepodong-2 |\n\nHwasong-14  \nTaepodong-2\n\n| Not in range  \n  \nNOTE: The missiles can be listed in any order, so long as only the ones in\nrange are printed.\n\n\n", "code": "\nmissile_ranges = {\n    \"Hwasong-6\": 500,\n    \"KN-11\": 1200,\n    \"Musudan BM-25\": 4000,\n    \"Hwasong-14\": 8000,\n    \"Taepodong-2\": 12000\n}\n\ntarget_distance = int(input(\"Enter the distance to the target in kilometers: \"))\n\nin_range_missiles = []\n\nfor missile, max_range in missile_ranges.items():\n    if target_distance <= max_range:\n        in_range_missiles.append(missile)\n\nif in_range_missiles:\n    for missile in in_range_missiles:\n        print(missile)\nelse:\n    print(\"Not in range\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\n\r\ndef solution(target_range):\r\n    result = \"\"\r\n    \r\n    if target_range <= 500:\r\n        result += \"Hwasong-6\\n\"\r\n\r\n    if target_range <= 1200:\r\n        result += \"KN-11\\n\"\r\n        \r\n    if target_range <= 4000:\r\n        result += \"Musudan BM-25\\n\"\r\n\r\n    if target_range <= 8000:\r\n        result += \"Hwasong-14\\n\"\r\n\r\n    if target_range <= 12000:\r\n        result += \"Taepodong-2\\n\"\r\n\r\n    if target_range > 12000:\r\n        result += \"Not in range\\n\"\r\n    \r\n    return result.strip().split('\\n')\r\n\r\n\r\ndef run_test(target_range):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"------------------------------\")\r\n    print(\"Test\", num_tests_run, \"-\", target_range, \"kilometers\")\r\n    print(\"------------------------------\")\r\n    \r\n    output, error_message = autograder.run_script(\"a1_6_missilethreat.py\", [target_range], True)\r\n    lines = output.strip().split(\"\\n\")\r\n    expected_answer = solution(target_range)\r\n    \r\n    count = 0\r\n    \r\n    for answer in expected_answer:\r\n        if answer in lines:\r\n            print(\"Expecting\", answer, \" . . . FOUND!\")\r\n            count += 1\r\n        else:\r\n            print(\"Expecting\", answer, \" . . . MISSING!\")\r\n            \r\n    if count == len(expected_answer) and len(expected_answer) == len(lines):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    elif len(expected_answer) < len(lines):\r\n        print(\"Problems Detected - Your output has more lines than expected.\\n\")\r\n    else:\r\n        print(\"Problems Detected - Your output is missing one or more expected outputs.\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(0, 499), 1))\r\n    run_test(500)\r\n    run_test(round(random.uniform(501, 1199), 1))\r\n    run_test(1200)\r\n    run_test(round(random.uniform(1201, 3999), 1))\r\n    run_test(4000)\r\n    run_test(round(random.uniform(4001, 7999), 1))\r\n    run_test(8000)\r\n    run_test(round(random.uniform(8001, 11999), 1))\r\n    run_test(12000)\r\n    run_test(12001)\r\n    \r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Testbench (to run on outside of zyBooks)\r\nif __name__ == '__main__':\r\n    class Console:\r\n        def write(self, txt):\r\n            print(txt, end='')\r\n    \r\n    test_passed()\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 273, "problem_id": "a1_6_evacuation", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \nPROBLEM STATEMENT:  \n\nTerrorist groups in the past have created improvised explosive devices in\nvarious shapes and sizes. According to the National Counterterrorism Center,\nthe following evacuation distances are appropriate for certain explosive\ndevices.\n\nExplosive Container\n\n|\n\nEvacuation Distance (inclusive, in Feet)  \n  \n---|---  \n  \nPipe Bomb\n\n|\n\n850  \n  \nSuitcase Bomb\n\n|\n\n1850  \n  \nSedan\n\n|\n\n2000  \n  \nCargo Van\n\n|\n\n2750  \n  \nSemi-Trailer\n\n|\n\n7000  \n  \n  \nWrite a Python program that asks the user to enter a distance to a device (in\nfeet). Then, referencing the table, print out all of the explosive devices\nthat could potentially reach a target at the specified distance (one per\nline). If no explosives can reach the specified distance, output \"Not in\nrange\".\n\nEXAMPLES:\n\n|\n\nExample 1\n\n|\n\nExample 2\n\n|\n\nExample 3  \n  \n---|---|---|---  \n  \nInput\n\n|\n\n1900\n\n|\n\n2500\n\n|\n\n8000  \n  \nOutput\n\n|\n\nSedan  \nCargo Van  \nSemi-Trailer\n\n|\n\nCargo Van  \nSemi-Trailer\n\n|\n\nNot in range  \n  \nNOTE: The devices can be listed in any order, so long as only the ones in\nrange are printed.\n\n\n", "code": "", "testcase": "from cs110 import autograder\nimport random, math\n\nnum_tests_passed = 0\nnum_tests_run = 0\n\n\ndef solution(target_range):\n    result = \"\"\n    \n    if target_range <= 850:\n        result += \"Pipe Bomb\\n\"\n\n    if target_range <= 1850:\n        result += \"Suitcase Bomb\\n\"\n        \n    if target_range <= 2000:\n        result += \"Sedan\\n\"\n\n    if target_range <= 2750:\n        result += \"Cargo Van\\n\"\n\n    if target_range <= 7000:\n        result += \"Semi-Trailer\\n\"\n\n    if target_range > 7000:\n        result += \"Not in range\\n\"\n    \n    return result.strip().split('\\n')\n\n\ndef run_test(target_range):\n    global num_tests_run, num_tests_passed\n        \n    num_tests_run += 1\n    \n    print(\"------------------------------\")\n    print(\"Test\", num_tests_run, \"-\", target_range, \"feet\")\n    print(\"------------------------------\")\n    \n    output, error_message = autograder.run_script(\"a1_6_evacuation.py\", [target_range], True)\n    lines = output.strip().split(\"\\n\")\n    expected_answer = solution(target_range)\n    \n    count = 0\n    \n    for answer in expected_answer:\n        if answer in lines:\n            print(\"Expecting\", answer, \" . . . FOUND!\")\n            count += 1\n        else:\n            print(\"Expecting\", answer, \" . . . MISSING!\")\n            \n    if count == len(expected_answer) and len(expected_answer) == len(lines):\n        print(\"SUCCESS!\\n\")\n        num_tests_passed += 1\n    elif len(expected_answer) < len(lines):\n        print(\"Problems Detected - Your output has more lines than expected.\\n\")\n    else:\n        print(\"Problems Detected - Your output is missing one or more expected outputs.\\n\")\n\n\n# Runs the Python script and sees if it passes the test(s)\ndef test_passed():\n    run_test(round(random.uniform(0, 899), 1))\n    run_test(850)\n    run_test(round(random.uniform(851, 1849), 1))\n    run_test(1850)\n    run_test(round(random.uniform(1851, 1999), 1))\n    run_test(2000)\n    run_test(round(random.uniform(2001, 2749), 1))\n    run_test(2750)\n    run_test(round(random.uniform(2751, 7999), 1))\n    run_test(7000)\n    run_test(7001)\n    \n    \n    return round(num_tests_passed * (100 / num_tests_run), 1)\n\n        \n# Testbench (to run on outside of zyBooks)\nif __name__ == '__main__':\n    class Console:\n        def write(self, txt):\n            print(txt, end='')\n    \n    test_passed()\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 274, "problem_id": "a1_6_digitalstorage", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nAssume someone takes hundreds of photos on their smartphone every week. They\nare seeking the best and least expensive alternatives to store/share their\nimages because their phone's storage capacity is limited. Using the table\nbelow, determine which storage options they should consider, assuming each\nimage has an average file size of 6 MB.\n\n\n\n**Storage Option** | **Short Name** | **Number of Images (inclusive)**  \n---|---|---  \nCD-ROM (700 MB) | CD | 116  \nDVD-ROM (4.7 GB) | DVD | 780  \nUSB Thumb Drive (16 GB) | USB Small | 2660  \nUSB Thumb Drive (64 GB) | USB Large | 10600  \nPortable Hard Drive (256 GB) | Portable HDD | 42600  \n  \n  \nWrite a Python program that asks the user to enter the number of images that\nneed to be shared/stored (non-negative, whole number). Then, referencing the\ntable above, print out all the storage options (by Short Name) capable of\nholding that many images (one per line). If no storage options are capable of\nstoring that many images, output \"Consider Cloud Storage\".\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input** | 2000 | 4000 | 45000  \n**Output** | USB Small  \nUSB Large  \nPortable HDD |\n\nUSB Large  \nPortable HDD\n\n| Consider Cloud Storage  \n  \nNOTE: The devices can be listed in any order, so long as only the ones in\nrange are printed.\n\n\n", "code": "\nnum_images = int(input(\"Enter the number of images: \"))\n\nstorage_options = {\n    \"CD\": [116],\n    \"DVD\": [780],\n    \"USB Small\": [2660],\n    \"USB Large\": [10600],\n    \"Portable HDD\": [42600]\n}\n\nvalid_options = []\nfor option, num_images_range in storage_options.items():\n    if num_images <= num_images_range[0]:\n        valid_options.append(option)\n\nif valid_options:\n    for option in valid_options:\n        print(option)\nelse:\n    print(\"Consider Cloud Storage\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\n\r\ndef solution(num_images):\r\n    result = \"\"\r\n    \r\n    if num_images <= 116:\r\n        result += \"CD\\n\"\r\n\r\n    if num_images <= 780:\r\n        result += \"DVD\\n\"\r\n        \r\n    if num_images <= 2660:\r\n        result += \"USB Small\\n\"\r\n\r\n    if num_images <= 10600:\r\n        result += \"USB Large\\n\"\r\n\r\n    if num_images <= 42600:\r\n        result += \"Portable HDD\\n\"\r\n\r\n    if num_images > 42600:\r\n        result += \"Consider Cloud Storage\\n\"\r\n    \r\n    return result.strip().split('\\n')\r\n\r\n\r\ndef run_test(num_images):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"------------------------------\")\r\n    print(\"Test\", num_tests_run, \"-\", num_images, \"images\")\r\n    print(\"------------------------------\")\r\n    \r\n    output, error_message = autograder.run_script(\"a1_6_digitalstorage.py\", [num_images], True)\r\n    lines = output.strip().split(\"\\n\")\r\n    expected_answer = solution(num_images)\r\n    \r\n    count = 0\r\n    \r\n    for answer in expected_answer:\r\n        if answer in lines:\r\n            print(\"Expecting\", answer, \" . . . FOUND!\")\r\n            count += 1\r\n        else:\r\n            print(\"Expecting\", answer, \" . . . MISSING!\")\r\n            \r\n    if count == len(expected_answer) and len(expected_answer) == len(lines):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    elif len(expected_answer) < len(lines):\r\n        print(\"Problems Detected - Your output has more lines than expected.\\n\")\r\n    else:\r\n        print(\"Problems Detected - Your output is missing one or more expected outputs.\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(int(random.uniform(0, 115)))\r\n    run_test(116)\r\n    run_test(int(random.uniform(117, 779)))\r\n    run_test(780)\r\n    run_test(int(random.uniform(781, 2659)))\r\n    run_test(2660)\r\n    run_test(int(random.uniform(2661, 10599)))\r\n    run_test(10600)\r\n    run_test(int(random.uniform(10601, 42599)))\r\n    run_test(42600)\r\n    run_test(45000)\r\n    \r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Testbench (to run on outside of zyBooks)\r\nif __name__ == '__main__':\r\n    class Console:\r\n        def write(self, txt):\r\n            print(txt, end='')\r\n    \r\n    test_passed()\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 275, "problem_id": "a1_6_broadband", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nChoosing the right broadband speed for your internet connection depends on\nwhich online activities you plan on engaging while online. Using the table\nbelow, determine which activities are possible with a given broadband speed,\ngiven in Kilobits per second (Kbps).\n\n\n\n**Activity** | **Short Name** | **Minimum Broadband Speed  \n(inclusive, in Kbps)**  \n---|---|---  \nSocial Media | Social Media | 1000  \nMultiplayer Gaming | Gaming | 4000  \nHD Video Conferencing | Video Conferencing | 6000  \nFile Downloading | File Downloads | 10000  \nStream Ultra HD 4K Video | HD 4K Video | 25000  \n  \n  \nWrite a Python program that asks the user to enter the broadband speed in\nKbps. Then, referencing the table above, print out all the activities (by\nShort Name) that can be achieved using that speed (one per line). If the\nbroadband speed is less than 1000 Kbps, output \"Upgrade to Broadband\".\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input** | 8500 | 5000 | 750  \n**Output** |\n\nSocial Media  \nGaming  \nVideo Conferencing\n\n|\n\nSocial Media  \nGaming\n\n| Upgrade to Broadband  \n  \nNOTE: The activities can be listed in any order, so long as only the ones in\nrange are printed.\n\n\n", "code": "\n# Prompt user for the broadband speed in Kbps\nbroadband_speed = int(input(\"Enter the broadband speed in Kbps: \"))\n\n# Check if the broadband speed is less than 1000 Kbps\nif broadband_speed < 1000:\n    print(\"Upgrade to Broadband\")\nelse:\n    # Check if Social Media is possible\n    if broadband_speed >= 1000:\n        print(\"Social Media\")\n    # Check if Gaming is possible\n    if broadband_speed >= 4000:\n        print(\"Gaming\")\n    # Check if Video Conferencing is possible\n    if broadband_speed >= 6000:\n        print(\"Video Conferencing\")\n    # Check if File Downloads is possible\n    if broadband_speed >= 10000:\n        print(\"File Downloads\")\n    # Check if HD 4K Video is possible\n    if broadband_speed >= 25000:\n        print(\"HD 4K Video\")\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\n\r\ndef solution(speed):\r\n    result = \"\"\r\n    \r\n    if speed >= 1000:\r\n        result += \"Social Media\\n\"\r\n\r\n    if speed >= 4000:\r\n        result += \"Gaming\\n\"\r\n        \r\n    if speed >= 6000:\r\n        result += \"Video Conferencing\\n\"\r\n\r\n    if speed >= 10000:\r\n        result += \"File Downloads\\n\"\r\n\r\n    if speed >= 25000:\r\n        result += \"HD 4K Video\\n\"\r\n\r\n    if speed < 1000:\r\n        result += \"Upgrade to Broadband\\n\"\r\n    \r\n    return result.strip().split('\\n')\r\n\r\n\r\ndef run_test(speed):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"------------------------------\")\r\n    print(\"Test\", num_tests_run, \"-\", speed, \"Kbps\")\r\n    print(\"------------------------------\")\r\n    \r\n    output, error_message = autograder.run_script(\"a1_6_broadband.py\", [speed], True)\r\n    lines = output.strip().split(\"\\n\")\r\n    expected_answer = solution(speed)\r\n    \r\n    count = 0\r\n    \r\n    for answer in expected_answer:\r\n        if answer in lines:\r\n            print(\"Expecting\", answer, \" . . . FOUND!\")\r\n            count += 1\r\n        else:\r\n            print(\"Expecting\", answer, \" . . . MISSING!\")\r\n            \r\n    if count == len(expected_answer) and len(expected_answer) == len(lines):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    elif len(expected_answer) < len(lines):\r\n        print(\"Problems Detected - Your output has more lines than expected.\\n\")\r\n    else:\r\n        print(\"Problems Detected - Your output is missing one or more expected outputs.\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(0, 999), 1))\r\n    run_test(1000)\r\n    run_test(round(random.uniform(1001, 4999), 1))\r\n    run_test(4000)\r\n    run_test(round(random.uniform(4001, 5999), 1))\r\n    run_test(6000)\r\n    run_test(round(random.uniform(6001, 9999), 1))\r\n    run_test(10000)\r\n    run_test(round(random.uniform(10001, 24999), 1))\r\n    run_test(25000)\r\n    run_test(30000)\r\n    \r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Testbench (to run on outside of zyBooks)\r\nif __name__ == '__main__':\r\n    class Console:\r\n        def write(self, txt):\r\n            print(txt, end='')\r\n    \r\n    test_passed()\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 276, "problem_id": "a1_5_scuba", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nRecreational SCUBA divers have to plan out how many air tanks they will need\nin order to safely dive. The amount varies per diver because each person\nconsumes air at a different rate. This rate is commonly called Surface Air\nConsumption. You want to figure whether you can afford the air requirements\nfor the trips that you are planning.\n\nWrite an algorithm that asks for:\n\n  *     * The total dive time for the trip in minutes \n    * The air budget (in dollars--do not worry about the dollar sign)\n\n\n\nYour program should then output:\n\n  *     * The number of liters needed for the project.\n    * The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)\n    * Either \"Over Budget\" or \"Within Budget\", depending on whether the cost of compressed air is greater than or not greater than the budget, respectfully.\n\n\n\nAssume that your Surface Air Consumption is **14.5** liters/minute, and that\nair costs **2 cents** per liter. You may assume that all inputs are non-\nnegative numbers.\n\n\n\n**EXAMPLES:**\n\n\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**Input** | 180  \n70 |\n\n120  \n30  \n  \n**Output** | 2610.0  \n52.2  \nWithin Budget | 1740.0  \n34.800000000000004  \nOver Budget  \n  \n\n\n\n", "code": "\ndef dive_planner():\n    # Get total dive time in minutes\n    total_time = int(input(\"Enter the total dive time in minutes: \"))\n    \n    # Get air budget in dollars\n    air_budget = float(input(\"Enter the air budget in dollars: \"))\n    \n    # Calculate the number of liters needed\n    liters_needed = total_time * 14.5\n    \n    # Calculate the estimated cost\n    cost = liters_needed * 0.02\n    \n    # Check if the cost is within the budget\n    if cost <= air_budget:\n        budget_status = \"Within Budget\"\n    else:\n        budget_status = \"Over Budget\"\n    \n    # Output the results\n    print(\"The number of liters needed for the project is:\", liters_needed)\n    print(\"The estimated cost is:\", cost)\n    print(\"Budget Status:\", budget_status)\n```\n\nTo test the program, you can call the `dive_planner()` function. For example:\n\n", "testcase": "from cs110 import autograder\nimport random, math\n\nnum_tests_passed = 0\nnum_tests_run = 0\n\ndef run_test(target_minutes, budget):\n    global num_tests_run, num_tests_passed\n        \n    num_tests_run += 1\n    \n    print(\"----------------------------------\")\n    print(\"Test #\" + str(num_tests_run))\n    print(\"----------------------------------\")\n    \n    \n    total_liters = target_minutes*14.5\n    total_cost = total_liters*.02\n        \n    if total_cost > budget:\n        expected_output = \"Over Budget\"\n    else:\n        expected_output = \"Within Budget\"\n    \n    output, error_message = autograder.run_script(\"a1_5_scuba.py\", [target_minutes, budget])\n    \n    lines = output.split(\"\\n\")\n    \n    # Length of Materials\n    if len(lines) >= 1 and autograder.equals(lines[0], total_liters):\n        print(\"Amount of Air Looks Good!\")\n        num_tests_passed += 0.33\n    else:\n        print(\"Incorrect Amount. Expected:\", total_liters)\n\n    # Cost of Materials\n    if len(lines) >= 2 and autograder.equals(lines[1], total_cost):\n        print(\"Cost of Air Looks Good!\")\n        num_tests_passed += 0.33\n    else:\n        print(\"Incorrect Cost. Expected:\", total_cost)\n        \n    # Cost Analysis\n    if len(lines) >= 3 and lines[2].strip() == expected_output:\n        print(\"Correct Budget Analysis\\n\")\n        num_tests_passed += 0.34\n    else:\n        print(\"Incorrect Budget Analysis. Expected:\", expected_output, \"\\n\")\n\n    return round((num_tests_passed / num_tests_run) * 100.0, 1)\n\n# Runs the Python script and sees if it passes the test(s)\ndef test_passed():\n    for x in range(4):\n        run_test(round(random.uniform(10,100), 1), random.randint(10, 50))\n    run_test(round(random.uniform(10,100), 1), 0)\n    \n    return round(num_tests_passed * (100 / num_tests_run), 1)\n\n        \n# Runs your code in an IDE (for testing purposes)\nif __name__ == '__main__':    \n    result = test_passed()\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 277, "problem_id": "a1_5_runway", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nThe CSAF has authorized new runways for any base that can accomplish the\nproject under their current budget. The new runways will be solid concrete\nwith their lengths measured in meters.\n\nWrite an algorithm that asks for:\n\n  *     * The length of runway to be built (in meters)\n    * The base's budget (in dollars--do not worry about the dollar sign, do not round to the nearest)\n\n\n\nYour program should then output:\n\n  *     * The amount of concrete (in tons) needed for the base's runway\n    * The estimated cost (in dollars--do not output a dollar sign)\n    * Either \"Over Budget\" or \"Within Budget\", depending on whether the cost of materials is greater than or not greater than the base's budget, respectfully.\n\nAssume that each meter of runway requires **  2.5** tons of concrete to build,\nand that concrete costs  **$75.50**  per ton. You may assume that all inputs\nare non-negative numbers.\n\n\n\n**EXAMPLES:**\n\n  |\n\nExample 1\n\n|\n\nExample 2  \n  \n---|---|---  \n  \nInput\n\n|\n\n2000  \n400000\n\n|\n\n1500  \n250000  \n  \nOutput\n\n|\n\n5000.0  \n377500.0  \nWithin Budget\n\n|\n\n3750.0  \n283125.0  \nOver Budget  \n  \n\n\n\n", "code": "\ndef calculate_runway(length, budget):\n    concrete_needed = length * 2.5\n    concrete_cost = concrete_needed * 75.50\n    if concrete_cost <= budget:\n        status = \"Within Budget\"\n    else:\n        status = \"Over Budget\"\n    return concrete_needed, concrete_cost, status\n\nrunway_length = int(input(\"Enter the length of the runway (in meters): \"))\nbase_budget = int(input(\"Enter the base's budget (in dollars): \"))\n\nconcrete_needed, concrete_cost, status = calculate_runway(runway_length, base_budget)\n\nprint(\"Amount of concrete needed (in tons):\", concrete_needed)\nprint(\"Estimated cost (in dollars):\", concrete_cost)\nprint(status)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(runway_length, budget):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"----------------------------------\")\r\n    print(\"Test #\" + str(num_tests_run))\r\n    print(\"----------------------------------\")\r\n    \r\n    tons_of_concrete = 2.5 * runway_length\r\n    cost_of_materials = 75.50 * tons_of_concrete\r\n    if cost_of_materials > budget:\r\n        expected_output = \"Over Budget\"\r\n    else:\r\n        expected_output = \"Within Budget\"\r\n    \r\n    output, error_message = autograder.run_script(\"a1_5_runway.py\", [runway_length, budget])\r\n    \r\n    lines = output.split(\"\\n\")\r\n    \r\n    # Length of Materials\r\n    if len(lines) >= 1 and autograder.equals(lines[0], tons_of_concrete):\r\n        print(\"Amount of Concrete Looks Good!\")\r\n        num_tests_passed += 0.33\r\n    else:\r\n        print(\"Incorrect Amount. Expected:\", tons_of_concrete)\r\n\r\n    # Cost of Materials\r\n    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):\r\n        print(\"Cost of Materials Looks Good!\")\r\n        num_tests_passed += 0.33\r\n    else:\r\n        print(\"Incorrect Cost. Expected:\", cost_of_materials)\r\n        \r\n    # Cost Analysis\r\n    if len(lines) >= 3 and lines[2].strip() == expected_output:\r\n        print(\"Correct Budget Analysis\\n\")\r\n        num_tests_passed += 0.34\r\n    else:\r\n        print(\"Incorrect Budget Analysis. Expected:\", expected_output, \"\\n\")\r\n\r\n    return round((num_tests_passed / num_tests_run) * 100.0, 1)\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(500, 3000), 1), random.randint(100000, 500000))\r\n    run_test(round(random.uniform(500, 3000), 1), 0)\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 278, "problem_id": "a1_5_printer", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nA 3D printer converts computer generated models into physical objects by\nheating and extruding a filament known as Polylactic Acid (PLA). PLA, normally\nsold in spools, is directly fed to the printer head like a thread. You want to\ndetermine if you can afford to 3D print a project given its volume of\nmaterial.\n\nWrite an algorithm that asks for:\n\n  *     * The volume of the 3D model to be printed (in cm3)\n    * The user's budget (in dollars--do not worry about the dollar sign, do not round to the nearest)\n\n\n\nYour program should then output:\n\n  *     * The length of material (in meters) needed to produce the object\n    * The estimated cost (in dollars--do not output a dollar sign)\n    * Either \"Over Budget\" or \"Within Budget\", depending on whether the cost of materials is greater than or not greater than the user's budget, respectfully.\n\nAssume that each cm3 requires **  0.312** meters of PLA to print, and that PLA\nfilament costs  **$0.063**  per meter. You may assume that all inputs are non-\nnegative numbers.\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2  \n---|---|---  \nInput | 15.0  \n2.5 | 500.0  \n5.0  \nOutput | 4.68  \n0.29484  \nWithin Budget | 156.0  \n9.828  \nOver Budget  \n  \n\n\n\n", "code": "\ndef print_3d_object():\n    volume = float(input(\"Enter the volume of the 3D model to be printed (in cm3): \"))\n    budget = float(input(\"Enter your budget (in dollars): \"))\n    \n    length = volume * 0.312\n    cost = length * 0.063\n    \n    print(f\"The length of material needed to produce the object is: {length} meters\")\n    print(f\"The estimated cost of materials is: {cost} dollars\")\n    \n    if cost > budget:\n        print(\"Over Budget\")\n    else:\n        print(\"Within Budget\")\n\n\n# Test the function\nprint_3d_object()\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(volume, budget):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"----------------------------------\")\r\n    print(\"Test #\" + str(num_tests_run))\r\n    print(\"----------------------------------\")\r\n    \r\n    length_of_materials = 0.312 * volume\r\n    cost_of_materials = 0.063 * length_of_materials\r\n    if cost_of_materials > budget:\r\n        expected_output = \"Over Budget\"\r\n    else:\r\n        expected_output = \"Within Budget\"\r\n    \r\n    output, error_message = autograder.run_script(\"a1_5_printer.py\", [volume, budget])\r\n    \r\n    lines = output.split(\"\\n\")\r\n    \r\n    # Length of Materials\r\n    if len(lines) >= 1 and autograder.equals(lines[0], length_of_materials):\r\n        print(\"Length of Materials Looks Good!\")\r\n        num_tests_passed += 0.33\r\n    else:\r\n        print(\"Incorrect Length. Expected:\", length_of_materials)\r\n\r\n    # Cost of Materials\r\n    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):\r\n        print(\"Cost of Materials Looks Good!\")\r\n        num_tests_passed += 0.33\r\n    else:\r\n        print(\"Incorrect Cost. Expected:\", cost_of_materials)\r\n        \r\n    # Cost Analysis\r\n    if len(lines) >= 3 and lines[2].strip() == expected_output:\r\n        print(\"Correct Budget Analysis\\n\")\r\n        num_tests_passed += 0.34\r\n    else:\r\n        print(\"Incorrect Budget Analysis. Expected:\", expected_output, \"\\n\")\r\n\r\n    return round((num_tests_passed / num_tests_run) * 100.0, 1)\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(0, 100), 1), random.randint(10, 50))\r\n    run_test(round(random.uniform(0, 100), 1), 0)\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 279, "problem_id": "a1_5_paint", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou are tasked to paint a large wall and need to see if your unit can afford\nthe paint for the project\n\nWrite an algorithm that asks for:\n\n  *     * The size of the wall in square feet\n    * The budget (in dollars--do not worry about the dollar sign)\n\n\n\nYour program should then output:\n\n  *     * The amount of paint required to cover the wall\n    * The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)\n    * Either \"Over Budget\" or \"Within Budget\", depending on whether the cost of paint is greater than or not greater than the budget, respectfully.\n\nAssume that a gallon of paint covers **15** square feet, and that the current\nprice of paint is  **$12.23**  per gallon. You may assume that all inputs are\nnon-negative numbers. You should also assume that you can purchase portions of\ngallons of paint so do NOT round up to the nearest full gallon.\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2  \n---|---|---  \nInput | 120.0  \n900.0 |\n\n750.0  \n100.0  \n  \nOutput | 8.0  \n97.84  \nWithin Budget | 50.0  \n611.5  \nOver Budget  \n  \n\n\n\n", "code": "\ndef paint_wall():\n  wall_size = float(input(\"Enter the size of the wall in square feet: \"))\n  budget = float(input(\"Enter the budget in dollars: \"))\n\n  paint_required = wall_size / 15\n  estimated_cost = paint_required * 12.23\n\n  print(\"Amount of paint required: \", paint_required)\n  print(\"Estimated cost: \", estimated_cost)\n\n  if estimated_cost <= budget:\n    print(\"Within Budget\")\n  else:\n    print(\"Over Budget\")\n\npaint_wall()\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(target_distance, budget):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"----------------------------------\")\r\n    print(\"Test #\" + str(num_tests_run))\r\n    print(\"----------------------------------\")\r\n    \r\n    fuel_required = target_distance / 15\r\n    cost_of_materials = 12.23 * fuel_required\r\n    \r\n    if cost_of_materials > budget:\r\n        expected_output = \"Over Budget\"\r\n    else:\r\n        expected_output = \"Within Budget\"\r\n    \r\n    output, error_message = autograder.run_script(\"a1_5_paint.py\", [target_distance, budget])\r\n    \r\n    lines = output.split(\"\\n\")\r\n    \r\n    # Length of Materials\r\n    if len(lines) >= 1 and autograder.equals(lines[0], fuel_required):\r\n        print(\"Amount of Paint Looks Good!\")\r\n        num_tests_passed += 0.33\r\n    else:\r\n        print(\"Incorrect Amount of Paint. Expected:\", fuel_required)\r\n\r\n    # Cost of Materials\r\n    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):\r\n        print(\"Cost of Paint Looks Good!\")\r\n        num_tests_passed += 0.33\r\n    else:\r\n        print(\"Incorrect Cost of Paint. Expected:\", cost_of_materials)\r\n        \r\n    # Cost Analysis\r\n    if len(lines) >= 3 and lines[2].strip() == expected_output:\r\n        print(\"Correct Budget Analysis\\n\")\r\n        num_tests_passed += 0.34\r\n    else:\r\n        print(\"Incorrect Budget Analysis. Expected:\", expected_output, \"\\n\")\r\n\r\n    return round((num_tests_passed / num_tests_run) * 100.0, 1)\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(500, 3000), 1), random.randint(100000, 500000))\r\n    run_test(round(random.uniform(500, 3000), 1), 0)\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 280, "problem_id": "a1_5_fueldepot", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nFuel in the military is essential to conducting operations. Balancing mission\nrequirements against budgetary constraints is a constant concern.\n\nWrite an algorithm that asks for:\n\n  *     * The distance to a target in miles\n    * The budget (in dollars--do not worry about the dollar sign)\n\n\n\nYour program should then output:\n\n  *     * The amount of fuel (in gallons) needed to reach the target\n    * The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)\n    * Either \"Over Budget\" or \"Within Budget\", depending on whether the cost of fuel is greater than or not greater than the budget, respectfully.\n\nAssume that the convoy can get **  12.5** miles to the gallon, and that the\ncurrent price of fuel is  **$3.73**  per gallon. You may assume that all\ninputs are non-negative numbers.\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2  \n---|---|---  \nInput | 130.7  \n50.50 |\n\n750  \n100  \n  \nOutput | 10.456  \n39.0009  \nWithin Budget | 60.0  \n223.80  \nOver Budget  \n  \n\n\n\n", "code": "\ndef calculate_fuel_distance():\n    distance = float(input(\"Enter the distance to target in miles: \"))\n    budget = float(input(\"Enter the budget in dollars: \"))\n\n    fuel_needed = distance / 12.5\n    cost = fuel_needed * 3.73\n\n    print(\"The amount of fuel needed to reach the target: {:.3f} gallons\".format(fuel_needed))\n    print(\"The estimated cost: {:.4f} dollars\".format(cost))\n\n    if cost <= budget:\n        print(\"Within Budget\")\n    else:\n        print(\"Over Budget\")\n\n\ncalculate_fuel_distance()\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(target_distance, budget):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"----------------------------------\")\r\n    print(\"Test #\" + str(num_tests_run))\r\n    print(\"----------------------------------\")\r\n    \r\n    fuel_required = target_distance / 12.5\r\n    cost_of_materials = 3.73 * fuel_required\r\n    \r\n    if cost_of_materials > budget:\r\n        expected_output = \"Over Budget\"\r\n    else:\r\n        expected_output = \"Within Budget\"\r\n    \r\n    output, error_message = autograder.run_script(\"a1_5_fueldepot.py\", [target_distance, budget])\r\n    \r\n    lines = output.split(\"\\n\")\r\n    \r\n    # Length of Materials\r\n    if len(lines) >= 1 and autograder.equals(lines[0], fuel_required):\r\n        print(\"Amount of Fuel Looks Good!\")\r\n        num_tests_passed += 0.33\r\n    else:\r\n        print(\"Incorrect Amount. Expected:\", fuel_required)\r\n\r\n    # Cost of Materials\r\n    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):\r\n        print(\"Cost of Materials Looks Good!\")\r\n        num_tests_passed += 0.33\r\n    else:\r\n        print(\"Incorrect Cost. Expected:\", cost_of_materials)\r\n        \r\n    # Cost Analysis\r\n    if len(lines) >= 3 and lines[2].strip() == expected_output:\r\n        print(\"Correct Budget Analysis\\n\")\r\n        num_tests_passed += 0.34\r\n    else:\r\n        print(\"Incorrect Budget Analysis. Expected:\", expected_output, \"\\n\")\r\n\r\n    return round((num_tests_passed / num_tests_run) * 100.0, 1)\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(500, 3000), 1), random.randint(100000, 500000))\r\n    run_test(round(random.uniform(500, 3000), 1), 0)\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 281, "problem_id": "a1_4_sickness", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a template that gets the following values from\nthe user:\n\n  * Body temperature (in Fahrenheit)\n  * Body aches ( **a string** , which will be either \"yes\" or \"no\")\n  * Loss of smell ( **a string** , which will be either \"yes\" or \"no\")\n\n\n\nUsing the following rules as a guide, have your program determine a person's\nrisk of having an infectious disease:\n\n  1. If the person's temperature is above 100.4 degrees, print \"High Risk\"\n  2. If the person is experiencing both body aches and loss of smell, print \"High Risk\"\n  3. For all other situations, print \"Low Risk\"\n\n\n\n**EXAMPLE:  \n**\n\n| **Example 1** | **Example 2**  \n---|---|---  \nInput |\n\n99.0  \nyes  \nyes\n\n| 100.4  \nno  \nyes  \nOutput | High Risk | Low Risk  \n  \n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(temperature, body_aches, loss_of_smell, expected_output):\r\n    output, error = autograder.run_script(\"a1_4_sickness.py\", [temperature, body_aches, loss_of_smell])\r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) >= 4:\r\n        if lines[3] == expected_output:\r\n            print(\"Correct Output\\n\")\r\n            return True\r\n        else:\r\n            print(\"Incorrect Output.  Expected\", expected_output, '\\n')\r\n            return False\r\n    else:\r\n        print(\"No Output Found\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    num_tests_passed = 0\r\n    \r\n    testcase_library = [(round(random.uniform(98.0, 99.9), 1), \"yes\", \"no\", \"Low Risk\"),\r\n                        (round(random.uniform(100.5, 102.0), 1), \"yes\", \"yes\", \"High Risk\"),\r\n                        (round(random.uniform(98.0, 99.9), 1), \"yes\", \"yes\", \"High Risk\"),\r\n                        (round(random.uniform(100.5, 102.0), 1), \"no\", \"no\", \"High Risk\")]\r\n    \r\n    for i in range(len(testcase_library)):\r\n        print(\"-------------------\")\r\n        print(\"Test\", i+1, \"of\", len(testcase_library))\r\n        print(\"-------------------\")\r\n        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):\r\n            num_tests_passed += 1\r\n    \r\n    return round(100 / len(testcase_library) * num_tests_passed, 1)\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 282, "problem_id": "a1_4_run", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a template that gets the following values from\nthe user:\n\n  * Outside Temperature (in Fahrenheit)\n  * Is it daytime? **(a string** that will be either \"yes\" or \"no\")\n  * Is it raining? ( **a string** that will be either \"yes\" or \"no\")\n\n\n\nUsing the following rules as a guide, have your program determine if you go on\na run:\n\n  1. If the outside temperature is above 95 degrees, print \"Do Not Run\"\n  2. If it is daytime and it is NOT raining, print \"Go Run\"\n  3. For all other situations, print \"Do Not Run\"\n\n\n\n**EXAMPLE:  \n**\n\n| **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \nInput |\n\n99.0  \nyes  \nno\n\n| 80  \nyes  \nno | 75  \nno  \nyes  \nOutput | Do Not Run | Go Run | Do Not Run  \n  \n\n\n\n", "code": "\ntemp = float(input(\"Outside Temperature (in Fahrenheit): \"))\ndaytime = input(\"Is it daytime? (yes or no): \")\nraining = input(\"Is it raining? (yes or no): \")\n\nif temp > 95:\n    print(\"Do Not Run\")\nelif daytime == \"yes\" and raining == \"no\":\n    print(\"Go Run\")\nelse:\n    print(\"Do Not Run\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(temperature, daytime, raining, expected_output):\r\n    output, error = autograder.run_script(\"a1_4_run.py\", [temperature, daytime, raining])\r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) >= 4:\r\n        if lines[3] == expected_output:\r\n            print(\"Correct Output\\n\")\r\n            return True\r\n        else:\r\n            print(\"Incorrect Output.  Expected\", expected_output, '\\n')\r\n            return False\r\n    else:\r\n        print(\"No Output Found\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    num_tests_passed = 0\r\n    \r\n    testcase_library = [(round(random.uniform(93.0, 94.9), 1), \"yes\", \"no\", \"Go Run\"),\r\n                        (round(random.uniform(93.0, 94.9), 1), \"no\", \"yes\", \"Do Not Run\"),\r\n                        (round(random.uniform(93.0, 94.9), 1), \"no\", \"no\", \"Do Not Run\"),\r\n                        (round(random.uniform(100.5, 102.0), 1), \"no\", \"yes\", \"Do Not Run\"),\r\n                        (round(random.uniform(100.5, 102.0), 1), \"yes\", \"yes\", \"Do Not Run\"),\r\n                        (95.0, \"yes\", \"no\", \"Go Run\")]\r\n    \r\n    for i in range(len(testcase_library)):\r\n        print(\"-------------------\")\r\n        print(\"Test\", i+1, \"of\", len(testcase_library))\r\n        print(\"-------------------\")\r\n        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):\r\n            num_tests_passed += 1\r\n    \r\n    return round(100 / len(testcase_library) * num_tests_passed, 1)\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 283, "problem_id": "a1_4_pt", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a template that gets the following values from\nthe user:\n\n  * Outside Temperature (in Fahrenheit)\n  * Is it raining? ( **a string** , which will be either \"yes\" or \"no\")\n  * Winds over 20 knots? ( **a string** , which will be either \"yes\" or \"no\")\n\n\n\nUsing the following rules as a guide, have your program determine if PT is\ncancelled or a go:\n\n  1. If the outside temperature is above 90 degrees, print \"PT Cancelled\"\n  2. If it is raining and there are winds over 20 knots print \"PT Cancelled\"\n  3. For all other situations, print \"PT is a Go\"\n\n\n\n**EXAMPLE:  \n**\n\n| **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \nInput |\n\n99.0  \nno  \nno\n\n| 85  \nyes  \nyes | 85  \nno  \nyes  \nOutput | PT Cancelled | PT Cancelled | PT is a Go  \n  \n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(temperature, raining, winds, expected_output):\r\n    output, error = autograder.run_script(\"a1_4_pt.py\", [temperature, raining, winds])\r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) >= 4:\r\n        if lines[3] == expected_output:\r\n            print(\"Correct Output\\n\")\r\n            return True\r\n        else:\r\n            print(\"Incorrect Output.  Expected\", expected_output, '\\n')\r\n            return False\r\n    else:\r\n        print(\"No Output Found\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    num_tests_passed = 0\r\n    \r\n    testcase_library = [(round(random.uniform(72.0, 90), 1), \"no\", \"no\", \"PT is a Go\"),\r\n                        (round(random.uniform(100.5, 102.0), 1), \"yes\", \"yes\", \"PT Cancelled\"),\r\n                        (round(random.uniform(72.0, 90), 1), \"yes\", \"no\", \"PT is a Go\"),\r\n                        (round(random.uniform(100.5, 102.0), 1), \"no\", \"no\", \"PT Cancelled\"),\r\n                        (round(random.uniform(72.0, 90), 1), \"yes\", \"yes\", \"PT Cancelled\")]\r\n    \r\n    for i in range(len(testcase_library)):\r\n        print(\"-------------------\")\r\n        print(\"Test\", i+1, \"of\", len(testcase_library))\r\n        print(\"-------------------\")\r\n        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):\r\n            num_tests_passed += 1\r\n    \r\n    return round(100 / len(testcase_library) * num_tests_passed, 1)\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 284, "problem_id": "a1_4_dog", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a template that gets the following values from\nthe user:\n\n  * Outside Temperature (in Fahrenheit)\n  * Is it raining? ( **a string** that will be either \"yes\" or \"no\")\n  * Is it daytime? ( **a string** that will be either \"yes\" or \"no\")\n\n\n\nUsing the following rules as a guide, have your program determine if the dog\nis outside:\n\n  1. If the outside temperature is above 85 degrees, print \"Dog Inside\"\n  2. If it is raining outside and it is NOT daytime, print \"Dog Inside\"\n  3. For all other situations, print \"Dog Outside\"\n\n\n\n**EXAMPLE:  \n**\n\n| **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \nInput |\n\n99.0  \nno  \nyes\n\n| 80  \nyes  \nno | 75  \nno  \nyes  \nOutput | Dog Inside | Dog Inside | Dog Outside  \n  \n\n\n\n", "code": "\ntemperature = float(input(\"Outside Temperature (in Fahrenheit): \"))\nis_raining = input(\"Is it raining? (yes/no): \")\nis_daytime = input(\"Is it daytime? (yes/no): \")\n\nif temperature > 85:\n    print(\"Dog Inside\")\nelif is_raining == \"yes\" and is_daytime == \"no\":\n    print(\"Dog Inside\")\nelse:\n    print(\"Dog Outside\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(temperature, raining, daytime, expected_output):\r\n    output, error = autograder.run_script(\"a1_4_dog.py\", [temperature, raining, daytime])\r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) >= 4:\r\n        if lines[3] == expected_output:\r\n            print(\"Correct Output\\n\")\r\n            return True\r\n        else:\r\n            print(\"Incorrect Output.  Expected\", expected_output, '\\n')\r\n            return False\r\n    else:\r\n        print(\"No Output Found\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    num_tests_passed = 0\r\n    \r\n    testcase_library = [(round(random.uniform(83.0, 84.9), 1), \"no\", \"yes\", \"Dog Outside\"),\r\n                        (round(random.uniform(83.0, 84.9), 1), \"yes\", \"no\", \"Dog Inside\"),\r\n                        (round(random.uniform(83.0, 84.9), 1), \"no\", \"no\", \"Dog Outside\"),\r\n                        (round(random.uniform(100.5, 102.0), 1), \"no\", \"yes\", \"Dog Inside\"),\r\n                        (round(random.uniform(100.5, 102.0), 1), \"yes\", \"yes\", \"Dog Inside\"),\r\n                        (85.0, \"yes\", \"yes\", \"Dog Outside\")]\r\n    \r\n    for i in range(len(testcase_library)):\r\n        print(\"-------------------\")\r\n        print(\"Test\", i+1, \"of\", len(testcase_library))\r\n        print(\"-------------------\")\r\n        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):\r\n            num_tests_passed += 1\r\n    \r\n    return round(100 / len(testcase_library) * num_tests_passed, 1)\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 285, "problem_id": "a1_3_vspeed", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nYou have been provided with a partially complete Python program that contains\n2 variables.\n\n  1. speed_of_vehicle(input by the user in mph)\n  2. speed_limit (already initialized in mph)\n\n\n\nAdd code to the end of this program that will output:\n\n  *     *         Too fast, slow down!\n\nIf the vehicle speed is higher than the speed limit  \n  \n\n    *         Maintain Speed\n\nIf the vehicle speed is equal to the speed limit  \n  \n\n    *         Too slow, speed up!\n\nIf the vehicle speed is lower than the speed limit  \n  \n\n\n\n**EXAMPLES:** ****\n\n| **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input** | 80 | 65 | 40  \n**Output** | Too fast, slow down! | Maintain Speed | Too slow, speed up!\n\n\n", "code": "\nspeed_of_vehicle = int(input(\"Enter the vehicle speed (mph): \"))\nspeed_limit = 60\n\nif speed_of_vehicle > speed_limit:\n    print(\"Too fast, slow down!\")\nelif speed_of_vehicle == speed_limit:\n    print(\"Maintain Speed\")\nelse:\n    print(\"Too slow, speed up!\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(speed):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"----------------------------------\")\r\n    print(\"Testing speed =\", speed, \"MPH\")\r\n    print(\"----------------------------------\")\r\n    \r\n    if speed > 65:\r\n        solution = \"Too fast, slow down!\"\r\n    elif speed == 65:\r\n        solution = \"Maintain Speed\"\r\n    else:\r\n        solution = \"Too slow, speed up!\"\r\n    \r\n    output, error_message = autograder.run_script(\"a1_3_vspeed.py\", [speed])\r\n    \r\n    if output.strip() == solution:\r\n        print(\"CORRECT!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", solution)\r\n        print(\"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(66, 150), 1))\r\n    run_test(65)\r\n    run_test(round(random.uniform(0.0, 64), 1))\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 286, "problem_id": "a1_3_speed", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a partially complete Python program that contains\n2 variables.\n\n  1. aircraft_speed (input by the user in mph)\n  2. speed_of_sound (already initialized in mph)\n\n\n\nAdd code to the end of this program that will output:\n\n  *     *         Faster than Mach 1 \n\nIf the aircraft speed is higher than the speed of sound  \n  \n\n    *         Mach 1 \n\nIf the aircraft speed is equal to the speed of sound  \n  \n\n    *         Slower than Mach 1 \n\nIf the aircraft speed is lower than the speed of sound  \n  \n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input** | 800 | 767.269 | 450.8  \n**Output** | Faster than Mach 1 | Mach 1 | Slower than Mach 1\n\n\n", "code": "\n# Partially complete Python program\n\naircraft_speed = float(input(\"Enter the aircraft speed in mph: \"))\nspeed_of_sound = 767.269\n\n# Add code below to output the correct message based on the aircraft speed\nif aircraft_speed > speed_of_sound:\n    print(\"Faster than Mach 1\")\nelif aircraft_speed == speed_of_sound:\n    print(\"Mach 1\")\nelse:\n    print(\"Slower than Mach 1\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(speed):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"----------------------------------\")\r\n    print(\"Testing speed =\", speed, \"MPH\")\r\n    print(\"----------------------------------\")\r\n    \r\n    if speed > 767.269:\r\n        solution = \"Faster than Mach 1\"\r\n    elif speed == 767.269:\r\n        solution = \"Mach 1\"\r\n    else:\r\n        solution = \"Slower than Mach 1\"\r\n    \r\n    output, error_message = autograder.run_script(\"a1_3_speed.py\", [speed])\r\n    \r\n    if output.strip() == solution:\r\n        print(\"CORRECT!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", solution)\r\n        print(\"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(768.0, 1000.0), 1))\r\n    run_test(767.269)\r\n    run_test(round(random.uniform(0.0, 767.0), 1))\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 287, "problem_id": "a1_3_satellite", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nYou have been provided with a partially complete Python program that contains\n2 variables.\n\n  1. satellite_speed (input by the user in km/s)\n  2. orbit_speed (already initialize in km/s)\n\n\n\nAdd code to the end of this program that will output:\n\n    *       *             Crashed to Earth\n\nIf the speed of the satellite is below the orbital speed.\n\n      *             In Orbit\n\nIf the speed of the satellite is equal to the orbital speed.\n\n      *             Lost to Space\n\nIf the speed of the satellite is above the orbital speed.\n\n\n\n** **\n\n**EXAMPLES:**\n\n|\n\n**Example 1**\n\n|\n\n**Example 2**\n\n|\n\n**Example 3**  \n  \n---|---|---|---  \n  \n**Input**\n\n|\n\n3\n\n|\n\n7.8\n\n|\n\n9  \n  \n**Output**\n\n|\n\nCrashed to Earth\n\n|\n\nIn Orbit\n\n|\n\nLost to Space  \n  \n\n\n\n", "code": "\nsatellite_speed = float(input(\"Enter the satellite speed in km/s: \"))\norbit_speed = 7.8\n\nif satellite_speed < orbit_speed:\n    print(\"Crashed to Earth\")\nelif satellite_speed == orbit_speed:\n    print(\"In Orbit\")\nelse:\n    print(\"Lost to Space\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(speed):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"----------------------------------\")\r\n    print(\"Testing speed =\", speed, \"km/s\")\r\n    print(\"----------------------------------\")\r\n    \r\n    if speed > 7.8:\r\n        solution = \"Lost to Space\"\r\n    elif speed == 7.8:\r\n        solution = \"In Orbit\"\r\n    else:\r\n        solution = \"Crashed to Earth\"\r\n    \r\n    output, error_message = autograder.run_script(\"a1_3_satellite.py\", [speed])\r\n    \r\n    if output.strip() == solution:\r\n        print(\"CORRECT!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", solution)\r\n        print(\"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(7.8, 20), 1))\r\n    run_test(7.8)\r\n    run_test(round(random.uniform(0.0, 7.7), 1))\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 288, "problem_id": "a1_3_goldilocks", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a partially complete Python program that contains\n2 variables.\n\n  1. porridge_temp (input by the user in \u00b0F)\n  2. correct_temp (already initialized in \u00b0F)\n\n\n\nAdd code to the end of this program that will output:\n\n  *     *         Too Hot \n\nWhen the porridge temp is above the correct temperature.  \n  \n\n    *         Just Right \n\nWhen the porridge temp is equal to the correct temperature  \n  \n\n    *         Too Cold \n\nWhen the porridge temp is below the correct temperature.  \n  \n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input** | 110 | 105 | 98  \n**Output** | Too Hot | Just Right | Too Cold\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(temp):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"----------------------------------\")\r\n    print(\"Testing temperature =\", temp, \"degrees\")\r\n    print(\"----------------------------------\")\r\n    \r\n    if temp > 105:\r\n        solution = \"Too Hot\"\r\n    elif temp == 105:\r\n        solution = \"Just Right\"\r\n    else:\r\n        solution = \"Too Cold\"\r\n    \r\n    output, error_message = autograder.run_script(\"a1_3_goldilocks.py\", [temp])\r\n    \r\n    if output.strip() == solution:\r\n        print(\"CORRECT!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", solution)\r\n        print(\"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(106, 130), 1))\r\n    run_test(105)\r\n    run_test(round(random.uniform(80, 104), 1))\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 289, "problem_id": "a1_3_cards", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a partially complete Python program that contains\n2 variables.\n\n  1. number_of_cards (input by the user)\n  2. cards_needed (already initialized)\n\n\n\nAdd code to the end of this program that will output whether you have enough\ncards to make a full deck of 52 cards (already initialized):\n\n  *     *         Too many cards \n\nIf the number of cards is more than the cards needed  \n  \n\n    *         Full deck\n\nIf the number of cards is equal to the cards needed  \n  \n\n    *         Not enough cards \n\nIf the number of cards is fewer than the cards needed  \n  \n\n\n\n**EXAMPLES:**\n\n\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input** | 57 | 52 | 38  \n**Output** | Too many cards | Full deck | Not enough cards\n\n\n", "code": "\n# partially complete Python program\n\nnumber_of_cards = int(input(\"Enter the number of cards: \"))\ncards_needed = 52\n\n# Add code to output whether you have enough cards to make a full deck\nif number_of_cards > cards_needed:\n    print(\"Too many cards\")\nelif number_of_cards == cards_needed:\n    print(\"Full deck\")\nelse:\n    print(\"Not enough cards\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(num_cards):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"----------------------------------\")\r\n    print(\"Testing number of cards =\", num_cards, \"cards\")\r\n    print(\"----------------------------------\")\r\n    \r\n    if num_cards > 52:\r\n        solution = \"Too many cards\"\r\n    elif num_cards == 52:\r\n        solution = \"Full deck\"\r\n    else:\r\n        solution = \"Not enough cards\"\r\n    \r\n    output, error_message = autograder.run_script(\"a1_3_cards.py\", [num_cards])\r\n    \r\n    if output.strip() == solution:\r\n        print(\"CORRECT!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", solution)\r\n        print(\"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(53, 60)))\r\n    run_test(52)\r\n    run_test(round(random.uniform(0, 51)))\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 290, "problem_id": "a1_3_arrow", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a partially complete Python program that contains\n2 variables.\n\n  1. arrow_height (input by the user in feet)\n  2. apple_height (already initialized in feet)\n\n\n\nAdd code to the end of this program that will output:\n\n  *     *         Arrow too high \n\nIf the arrow height is higher than the apple  \n  \n\n    *         Direct hit\n\nIf the arrow height is equal to the apple  \n  \n\n    *         Arrow too low \n\nIf the arrow is lower than the apple  \n  \n\n\n\n**EXAMPLES:**\n\n\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input** | 7.1 | 6.2 | 5.9  \n**Output** | Arrow too high | Direct hit | Arrow too low\n\n\n", "code": "\narrow_height = float(input(\"Enter the arrow height: \"))\napple_height = 6.2\n\nif arrow_height > apple_height:\n    print(\"Arrow too high\")\nelif arrow_height == apple_height:\n    print(\"Direct hit\")\nelse:\n    print(\"Arrow too low\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(height):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"----------------------------------\")\r\n    print(\"Testing height =\", height, \"feet\")\r\n    print(\"----------------------------------\")\r\n    \r\n    if height > 6.2:\r\n        solution = \"Arrow too high\"\r\n    elif height == 6.2:\r\n        solution = \"Direct hit\"\r\n    else:\r\n        solution = \"Arrow too low\"\r\n    \r\n    output, error_message = autograder.run_script(\"a1_3_arrow.py\", [height])\r\n    \r\n    if output.strip() == solution:\r\n        print(\"CORRECT!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", solution)\r\n        print(\"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(round(random.uniform(6.2, 20), 1))\r\n    run_test(6.2)\r\n    run_test(round(random.uniform(0.0, 6.1), 1))\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 291, "problem_id": "a1_2_spheres", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a program that calculates the volume of a multiple spheres.  The\ntemplate provided to you defines 2 variables:\n\n  * **radius**  \\- radius of the sphere\n  * **total**  \\- The number of spheres\n\n\n\nCalculate the volume, using the following formula:\n\n    \n    \n    V=(4/3)r3t\n\nWhere . . .\n\n  *     * ****  is the mathematical constant (see the HINT for more details)\n    * **r**  is the radius of the cylinder\n    * **t** is the number of spheres\n\n\n\nStore the answer in a variable called **  volume**.  You do not need to print\nthe variable.\n\n\n\n**HINT:** ****\n\nThe math module contains the mathematical constant, .  To use it, simply type\n**math.pi**\n\n\n", "code": "\nimport math\n\nradius = 5\ntotal = 8\n\nvolume = (4/3) * math.pi * math.pow(radius, 3) * total\n\nvolume\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nfrom a1_2_spheres import *\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    answer = math.pi * (4/3) * (radius**3)*total\r\n    file = open(\"a1_2_spheres.py\", \"r\")\r\n    file_contents = file.read()\r\n    \r\n    print(\"Checking to see if variable 'volume' exists . . . \", end='')\r\n    if 'volume' in globals():\r\n        print(\"FOUND!\")\r\n        score += 10\r\n        \r\n        print(\"Checking mathematical formula . . . \", end='')\r\n        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):\r\n            print(\"CORRECT!\")\r\n            score += 60\r\n        else:\r\n            print(\"NOT FOUND. Make sure you are using the formula.\")\r\n        \r\n        print(\"Checking the value of 'volume' . . . \", end='')\r\n        if 'volume' in globals() and autograder.equals(volume, answer):\r\n            print(\"CORRECT!\")\r\n            score += 30\r\n        else:\r\n            print(\"INCORRECT\")\r\n    else:\r\n        print(\"NOT FOUND. Make sure you name your variable according to the prompt.\")\r\n      \r\n    return score\r\n    \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 292, "problem_id": "a1_2_radius", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a program that calculates the area of multiple circles.  The template\nprovided to you defines 2 variables:\n\n  * **radius**  \\- radius of the circle\n  * **total**  \\- The number of circles\n\n\n\nCalculate the area, using the following formula:\n\n    \n    \n    A=r2t\n\nWhere . . .\n\n  *     * ****  is the mathematical constant (see the HINT for more details)\n    * **r** is the radius of the circle\n    * **t** is the number of circles\n\n\n\nStore the answer in a variable called **area**.  You do not need to print the\nvariable.\n\n\n\n**HINT:** ****\n\nThe math module contains the mathematical constant, .  To use it, simply type\n**math.pi**\n\nVariables\n\nVariable | Min | Max | Decimal Places  \n---|---|---|---  \n  \nFormulas\n\n0\n\n0\n\nPossible Solutions\n\nShow Answers for\n\n\n", "code": "\nimport math\n\nradius = 5\ntotal = 10\n\narea = total * (radius ** 2) * math.pi\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nfrom a1_2_radius import *\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    answer = math.pi * (radius**2) * height * total\r\n    file = open(\"a1_2_radius.py\", \"r\")\r\n    file_contents = file.read()\r\n    \r\n    print(\"Checking to see areif variable 'volume' exists . . . \", end='')\r\n    if 'volume' in globals():\r\n        print(\"FOUND!\")\r\n        score += 10\r\n        \r\n        print(\"Checking mathematical formula . . . \", end='')\r\n        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):\r\n            print(\"CORRECT!\")\r\n            score += 60\r\n        else:\r\n            print(\"NOT FOUND. Make sure you are using the formula.\")\r\n        \r\n        print(\"Checking the value of 'volume' . . . \", end='')\r\n        if 'volume' in globals() and autograder.equals(volume, answer):\r\n            print(\"CORRECT!\")\r\n            score += 30\r\n        else:\r\n            print(\"INCORRECT\")\r\n    else:\r\n        print(\"NOT FOUND. Make sure you name your variable according to the prompt.\")\r\n      \r\n    return score\r\n    \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 293, "problem_id": "a1_2_interest", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou are trying to write a program that calculates the amount of money a person\nwill earn from an investment.  The template provided to you defines 3\nvariables:\n\n  * **principal_amount**  \\- The principal (i.e., starting) amount of money that a person has\n  * **interest_rate**  \\- The interest rate\n  * **time**  \\- The length of the investment (in months)\n\n\n\nCalculate the amount of money earned, using the following formula:\n\n    \n    \n    amount = pert\n\nWhere . . .\n\n  *     * **p**  is the principal amount\n    * **e**  is the mathematical constant (approximately equal to 2.718... -- see the HINT for more details)\n    * **r**  is the interest rate\n    * **t**  is the time\n\n\n\nStore the answer in a variable called  **amount.   **You do not need to print\nthe variable.\n\n\n\n**HINT:** ****\n\nThe math module contains the mathematical constant, e.  To use it, simply type\n**math.e**\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nfrom a1_2_interest import *\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    answer = principal_amount * math.e**(interest_rate * time)\r\n    file = open(\"a1_2_interest.py\", \"r\")\r\n    file_contents = file.read()\r\n    \r\n    print(\"Checking to see if variable 'amount' exists . . . \", end='')\r\n    if 'amount' in globals():\r\n        print(\"FOUND!\")\r\n        score += 10\r\n        \r\n        print(\"Checking mathematical formula . . . \", end='')\r\n        if '*' in file_contents and 'math.e' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):\r\n            print(\"CORRECT!\")\r\n            score += 60\r\n        else:\r\n            print(\"NOT FOUND. Make sure you are using the formula.\")\r\n        \r\n        print(\"Checking the value of 'amount' . . . \", end='')\r\n        if 'amount' in globals() and autograder.equals(amount, answer):\r\n            print(\"CORRECT!\")\r\n            score += 30\r\n        else:\r\n            print(\"INCORRECT\")\r\n    else:\r\n        print(\"NOT FOUND. Make sure you name your variable according to the prompt.\")\r\n      \r\n    return score\r\n    \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 294, "problem_id": "a1_2_cones", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a program that calculates the volume of multiple identical cones.  The\ntemplate provided to you defines 3 variables:\n\n  * **radius**  \\- radius of the cones\n  * **height** \\- height of the cones\n  * **total**  \\- The number of cones\n\n\n\nCalculate the volume, using the following formula:\n\n    \n    \n    V =  r2(h/3)t\n\nWhere . . .\n\n  *     * ****  is the mathematical constant (see the HINT for more details)\n    * **r**  is the radius of the cones\n    * **h  **is the height of the cones\n    * **t**  is the total amount of cones\n\n\n\nStore the answer in a variable called **volume**.  You do not need to print\nthe variable.\n\n\n\n**HINT:** ****\n\nThe math module contains the mathematical constant, .  To use it, simply type\n**math.pi**\n\n\n", "code": "\nimport math\n\n# Define the variables\nradius = 10\nheight = 5\ntotal = 3\n\n# Calculate the volume\nvolume = math.pi * radius**2 * (height/3) * total\n\n# Print the volume (optional)\nprint(volume)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nfrom a1_2_cones import *\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    answer = math.pi * (radius**2) * (height/3) * total\r\n    file = open(\"a1_2_cones.py\", \"r\")\r\n    file_contents = file.read()\r\n    \r\n    print(\"Checking to see if variable 'volume' exists . . . \", end='')\r\n    if 'volume' in globals():\r\n        print(\"FOUND!\")\r\n        score += 10\r\n        \r\n        print(\"Checking mathematical formula . . . \", end='')\r\n        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):\r\n            print(\"CORRECT!\")\r\n            score += 60\r\n        else:\r\n            print(\"NOT FOUND. Make sure you are using the formula.\")\r\n        \r\n        print(\"Checking the value of 'volume' . . . \", end='')\r\n        if 'volume' in globals() and autograder.equals(volume, answer):\r\n            print(\"CORRECT!\")\r\n            score += 30\r\n        else:\r\n            print(\"INCORRECT\")\r\n    else:\r\n        print(\"NOT FOUND. Make sure you name your variable according to the prompt.\")\r\n      \r\n    return score\r\n    \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 295, "problem_id": "a1_2_circles", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a program that calculates the area of multiple circles.  The template\nprovided to you defines 2 variables:\n\n  * **radius**  \\- radius of the circle\n  * **total**  \\- The number of circles\n\n\n\nCalculate the area, using the following formula:\n\n    \n    \n    A=r2t\n\nWhere . . .\n\n  *     * ****  is the mathematical constant (see the HINT for more details)\n    * **r** is the radius of the circle\n    * **t** is the number of circles\n\n\n\nStore the answer in a variable called **area**.  You do not need to print the\nvariable.\n\n\n\n**HINT:** ****\n\nThe math module contains the mathematical constant, .  To use it, simply type\n**math.pi**\n\nVariables\n\nVariable | Min | Max | Decimal Places  \n---|---|---|---  \n  \nFormulas\n\n0\n\n0\n\nPossible Solutions\n\nShow Answers for\n\n\n", "code": "\nimport math\n\nradius = 5\ntotal = 3\n\narea = math.pi * radius**2 * total\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nfrom a1_2_circles import *\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    answer = math.pi * (radius**2)*total\r\n    file = open(\"a1_2_circles.py\", \"r\")\r\n    file_contents = file.read()\r\n    \r\n    print(\"Checking to see if variable 'area' exists . . . \", end='')\r\n    if 'area' in globals():\r\n        print(\"FOUND!\")\r\n        score += 10\r\n        \r\n        print(\"Checking mathematical formula . . . \", end='')\r\n        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):\r\n            print(\"CORRECT!\")\r\n            score += 60\r\n        else:\r\n            print(\"NOT FOUND. Make sure you are using the formula.\")\r\n        \r\n        print(\"Checking the value of 'area' . . . \", end='')\r\n        if 'area' in globals() and autograder.equals(area, answer):\r\n            print(\"CORRECT!\")\r\n            score += 30\r\n        else:\r\n            print(\"INCORRECT\")\r\n    else:\r\n        print(\"NOT FOUND. Make sure you name your variable according to the prompt.\")\r\n      \r\n    return score\r\n    \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 296, "problem_id": "a1_1_cadet", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite the Python code needed to get three values from the user:\n\n  1. A string representing the users name.  Store this value in a variable called **cadet** **_name**\n  2. A floating point value representing their height in meters.  Store this value in a variable called **cadet_height**\n  3. An integer representing their weight.  Store this value in a variable called **cadet_weight**\n\n**IMPORTANT:**   Your template file contains a print statement that combines\nthese values to produce an output (see Example).   **Do not modify this\nline.**   Simply add your input statements in the space provided.\n\n\n\n**EXAMPLE:** ****\n\nIf the user types \"Snuffy\", 2.1, and 185, your program should print:\n\n    \n    \n    Cadet Snuffy is 2.1 meters tall and weighs 180 lbs.\n\n\n", "code": "", "testcase": "#import cs110,\r\nimport random, math\r\nfrom cs110 import autograder\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test():\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    cadet_list = [(\"Snuffy\", 2.1, 185), (\"Smith\", 1.9, 205), (\"Green\", 2.0, 155)]\r\n    cadet = cadet_list[random.randint(0, len(cadet_list) - 1)]\r\n    solution = \"Cadet %s is %1.1f meters tall and weighs %d lbs.\" % (cadet[0], cadet[1], cadet[2])\r\n        \r\n    output, error_message = autograder.run_script(\"a1_1_cadet.py\", [cadet[0], cadet[1], cadet[2]])\r\n        \r\n    if output.strip() == solution:\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", solution)\r\n        print(\"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test()\r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 297, "problem_id": "PA2_practice4", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a dataset called `fuelprices.csv` that contains\nmonthly gasoline prices from 2006 - 2012. Here is a typical line from the\ndataset (each line ends with the newline \\n character):\n\n`1/1/2006 0:00,Regular,2.314`\n\n\n\nEach position in the line (separated by a comma) represents a different data\nelement, or column. The following table shows how the above line can be\ninterpreted:\n\n| Day | Gas Type | Price (in Dollars)  \n---|---|---|---  \nValue | 1/1/2006 0:00 | Regular | 2.314  \n  \n\n\nWrite a Python program that asks the user for:\n\n  * A Gas Type (e.g., Regular)\n\n\n\nYour program should then read the file and output:\n\n  * The average price of gas for that gas type\n\n\n\n\n", "code": "\nimport csv\n\n# Read the file and extract data\ndef read_fuel_prices():\n    fuel_prices = []\n    with open('fuelprices.csv', 'r') as file:\n        csv_reader = csv.reader(file)\n        for row in csv_reader:\n            fuel_prices.append(row)\n    return fuel_prices\n\n# Calculate the average price for a given gas type\ndef calculate_average_price(gas_type):\n    fuel_prices = read_fuel_prices()\n    prices = []\n    for row in fuel_prices:\n        if row[1] == gas_type:\n            prices.append(float(row[2]))\n    if len(prices) == 0:\n        return 0\n    average_price = sum(prices) / len(prices)\n    return average_price\n\n# Get user input and display the average price\ngas_type = input(\"Enter a gas type (e.g., Regular): \")\naverage_price = calculate_average_price(gas_type)\nprint(\"The average price of {0} gas is: {1}\".format(gas_type, average_price))\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef test_passed():\r\n\r\n    num_tests_passed = 0\r\n    test_cases = [(\"Regular\", 37, 2.938), (\"Midgrade\", 37, 3.098), (\"Premium\", 37, 3.208), (\"Diesel\", 32, 3.242)]\r\n\r\n    for test_case in test_cases:\r\n        print(\"# -----------------------------------\")\r\n        print(\"# Testing\", test_case[0])\r\n        print(\"# -----------------------------------\")\r\n        output, error = autograder.run_script(\"PA2_practice4.py\", [test_case[0]])\r\n    \r\n        lines = output.strip().split('\\n')\r\n        \r\n        if len(lines) > 0:\r\n            if autograder.equals(lines[0], test_case[2]):\r\n                print(\"CORRECT\")\r\n                num_tests_passed += 1\r\n            elif len(lines) > 1 and autograder.equals(lines[0], test_case[1]) and autograder.equals(lines[1], test_case[2]):\r\n                print(\"CORRECT\")\r\n                num_tests_passed += 1\r\n            else:\r\n                print(\"INCORRECT\")\r\n            print()\r\n                    \r\n    return round(100 / len(test_cases), 1) * num_tests_passed\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 298, "problem_id": "PA2_practice3", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You are writing a program to analyze the BMI of cadets.  Write a program\nthat asks for the number of cadets, and then gets that many weights and\nheights (alternating, a weight then the corresponding height, in that order).\nYour program should then output the number of thin, healthy, overweight, and\nobese cadets (based on their BMI), using the following formula and table as a\nguide:\n\n\n\n**BMI = 703 * (weight / height 2)**\n\n\n\n**Rating** | **BMI**  \n---|---  \nThin | less than 18.5  \nHealthy | at least 18.5 but less than 25  \nOverweight | at least 25 but less than 30  \nObese | 30 or more  \n  \n**EXAMPLES:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInputs |\n\n3\n\n180  \n60  \n149  \n68  \n168  \n72\n\n|\n\n4\n\n139  \n71  \n141  \n75  \n191  \n62  \n176  \n58\n\n|\n\n7\n\n194  \n70  \n159  \n66  \n167  \n63  \n173  \n75  \n161  \n66  \n186  \n72  \n131  \n60  \n  \nOutputs | 0  \n2  \n0  \n1 | 1  \n1  \n0  \n2 | 0  \n1  \n6  \n0\n\n\n", "code": "```\n# Get the number of cadets\nnum_cadets = int(input())\n\n# Initialize the counters for each category\nthin_count = 0\nhealthy_count = 0\noverweight_count = 0\nobese_count = 0\n\n# Loop through the cadets and calculate their BMI\nfor i in range(num_cadets):\n    weight = float(input())\n    height = float(input())\n    bmi = 703 * (weight / height ** 2)\n    \n    # Determine the category based on the BMI value\n    if bmi < 18.5:\n        thin_count += 1\n    elif bmi < 25:\n        healthy_count += 1\n    elif bmi < 30:\n        overweight_count += 1\n    else:\n        obese_count += 1\n\n# Print the number of cadets in each category\nprint(thin_count)\nprint(healthy_count)\nprint(overweight_count)\nprint(obese_count)\n```\n**Test Input Reasoning:**\n\nThe minimum possible input values: \n- Number of cadets = 1\n- Weight = 100 (minimum allowed value)\n- Height = 50 (minimum allowed value)", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(weights, heights):\r\n    num_thin = 0\r\n    num_healthy = 0\r\n    num_overweight = 0\r\n    num_obese = 0\r\n    \r\n    for i in range(len(weights)):\r\n        bmi = 703 * (weights[i] / heights[i]**2)\r\n\r\n        if bmi <= 18.5:\r\n            num_thin += 1\r\n        elif bmi <= 25:\r\n            num_healthy += 1\r\n        elif bmi <= 30:\r\n            num_overweight += 1\r\n        else:\r\n            num_obese += 1\r\n    \r\n    return (num_thin, num_healthy, num_overweight, num_obese)\r\n\r\n\r\ndef test_passed():\r\n\r\n    score = 0\r\n\r\n    # Generates the Test Set\r\n    num_students = random.randint(5, 10)\r\n    inputs = [num_students]\r\n    weights = []\r\n    heights = []\r\n    \r\n    for i in range(num_students):\r\n        random_weight = random.randint(120, 200)\r\n        random_height = random.randint(55, 76)\r\n        \r\n        weights.append(random_weight)\r\n        heights.append(random_height)\r\n        \r\n        inputs.append(random_weight)\r\n        inputs.append(random_height)\r\n    \r\n    output, error = autograder.run_script(\"PA2_practice3.py\", inputs)\r\n    expected_output = solution(weights, heights)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    \r\n    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):\r\n        print(\"Thin is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Thin is Incorrect.  Expected\", expected_output[0])\r\n\r\n    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):\r\n        print(\"Healthy is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Healthy is Incorrect.  Expected\", expected_output[1])\r\n    \r\n    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):\r\n        print(\"Overweight is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Overweight is Incorrect.  Expected\", expected_output[2])\r\n    \r\n    if len(lines) > 3 and autograder.equals(lines[3], expected_output[3]):\r\n        print(\"Obese is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Obese is Incorrect.  Expected\", expected_output[0])\r\n        \r\n    return score\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 299, "problem_id": "PA2_practice2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a function: get_value(n). Your task is to call\nthis function 6 times.\n\nGet a number from the user (`x`), and print the `x` , `x + 1`, `x + 2`, ... `x\n+ 5` values that result from calling get_value() with x to x+5  (i.e., you\nshould print 6 numbers total).\n\n\n\n**HINTS:**\n\n  * You should call this function from inside a loop passing a variable that increases by 1 each loop\n  * If the user enters a 2, you should call `get_value(2)`, `get_value(3)`, up to `get_value(7)` and print the results of each call (5, 7, 9, 11, 13, 15) \n\n\n\n**EXAMPLES:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInputs | 2 | 4 | 11  \nOutputs | 5  \n7  \n9  \n11  \n13  \n15 | 9  \n11  \n13  \n15  \n17  \n19 | 23  \n25  \n27  \n29  \n31  \n33\n\n\n", "code": "\ndef get_value(n):\n    return 2 * n + 1\n\nx = int(input(\"Enter a number: \"))\n\nfor i in range(x, x+6):\n    print(get_value(i))\n", "testcase": "from cs110 import autograder\r\nimport random, math, traceback\r\n\r\nsolution_filename = \"PA2_practice2.py\"\r\n\r\ndef test_passed():\r\n    test_cases_prev = dict()\r\n    test_cases_prev[1] = (3,5,7,9,11,13)\r\n    test_cases_prev[100] = (201,203,205,207,209,211)\r\n    test_cases_prev[1000] = (2001,2003,2005,2007,2009,2011)\r\n    test_cases_prev[42] = (85,87,89,91,93,95)    \r\n    test_cases_prev[87] = (175,177,179,181,183,185)\r\n\r\n    # test_cases[input] = (expected_result_1, \"expected_result_2\")\r\n    \r\n    test_cases = dict()\r\n    test_cases[1] = (1,2,3,4,5,6)\r\n    test_cases[100] = (100,101,102,103,104,105)\r\n    test_cases[1000] = (1000,1001,1002,1003,1004,1005)\r\n    test_cases[42] = (42,43,44,45,46,47)\r\n    test_cases[87] = (87,88,89,90,91,92)\r\n\r\n    \r\n    # shuffle the possible inputs    \r\n    test_case_input = list(test_cases.keys())\r\n    case_order = list(range(len(test_case_input)))\r\n    random.shuffle(case_order)\r\n    \r\n    # choose 5 of the randomly sorted \r\n    case_indices_used = case_order[:5]\r\n    \r\n    score = 0\r\n    \r\n    test_run_num = 1\r\n    for idx in case_indices_used:\r\n        print('\\n' + '='*30)\r\n        print(\" \"*10+\"Test Case #\" + str(test_run_num))\r\n        print('='*30)\r\n        \r\n        try:\r\n            output, error = autograder.run_script(solution_filename, [test_case_input[idx]])\r\n            \r\n            expected_output = \"\"\r\n            for num in test_cases[test_case_input[idx]]:\r\n                expected_output += str(num) + \"\\n\"\r\n            \r\n            expected_output_prev = \"\"\r\n            for num in test_cases_prev[test_case_input[idx]]:\r\n                expected_output_prev += str(num) + \"\\n\"\r\n            \r\n            lines = output.strip().split('\\n')\r\n            \r\n            if output.strip() == expected_output.strip():\r\n                print(\"CORRECT\")\r\n                score += 100.0 / len(case_indices_used)\r\n            elif output.strip() == expected_output_prev.strip():\r\n                print(\"CORRECT\")\r\n                score += 100.0 / len(case_indices_used)\r\n            else:\r\n                print(\"INCORRECT. Expected:\")\r\n                expected_lines = expected_output.split(\"\\n\")\r\n                expected_prev_lines = expected_output_prev.split(\"\\n\")\r\n                for line_idx in range(len(expected_lines)):\r\n                    if line_idx == 2:\r\n                        center_col = \"     OR     \"\r\n                    else:\r\n                        center_col = \"            \"\r\n                    \r\n                    print(expected_prev_lines[line_idx].strip()) # + center_col + expected_prev_lines[line_idx].strip())\r\n\r\n        except Exception as e:\r\n            print(\"ERROR occured when running your solution!\")\r\n            print(e)\r\n            print(traceback.format_exc())\r\n            \r\n        test_run_num += 1        \r\n    \r\n#     random_value = random.randint(5, 15)\r\n#     output, error = autograder.run_script(\"PA2_practice2.py\", [random_value])\r\n#     expected_output = solution(random_value)\r\n#     \r\n#     if output.strip() == expected_output.strip():\r\n#         print(\"CORRECT\")\r\n#         return 100.0\r\n#     else:\r\n#         print(\"INCORRECT.  Expected:\")\r\n#         print(expected_output)\r\n    \r\n    return score\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 300, "problem_id": "PA2_practice1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Define a function called `add_values`. The function should take 3\nparameters (x, y, z), and return the sum of these values.\n\n\n\n**NOTES:**\n\n  * You do not need to call the function.  Simply define it.\n\n\n\n\n", "code": "\ndef add_values(x, y, z):\n return x + y + z\n", "testcase": "from cs110 import autograder\r\nimport PA2_practice1\r\n\r\ndef add_values(x, y, z):\r\n    return x + y + z\r\n\r\ndef test_passed():\r\n    \r\n    if 'add_values' in dir(PA2_practice1) and add_values(1, 2, 3) == PA2_practice1.add_values(1, 2, 3):\r\n        print(\"PASSED\")\r\n        return 100.0\r\n    elif 'add_values' not in dir(PA2_practice1):\r\n        print(\"FAILED.  Could not find function 'add_values'\")\r\n    elif result != solution:\r\n        print(\"FAILED.  Function 'add_values' did not return the correct value\")\r\n    else:\r\n        print(\"FAILED.  Something unexpected happened.\")\r\n    \r\n    return 0.0\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 301, "problem_id": "lsn9_skill3", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Define a function called `print_hello()`. Your function should, when\ncalled, simply print out a message of your choosing that would be a greeting\nto someone.\n\n**IMPORTANT NOTE:**  \nFunctions only run when a program calls them. For the purposes of this\nexercise, you do not need to call the function. If you don't, however, nothing\nwill appear on the screen when you run it in Thonny.\n\n\n", "code": "\ndef print_hello():\n    print(\"Hello there!\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport lsn9_skill3\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    output, error = autograder.run_script(\"lsn9_skill3.py\", [])\r\n    score = 0\r\n    \r\n    if \"print_hello\" in dir(lsn9_skill3):\r\n        print(\"Function found!\")\r\n        score += 50\r\n        \r\n        if len(output) > 0:\r\n            print(\"Output Found!\")\r\n            score += 50\r\n        else:\r\n            print(\"Function does not appear to be printing out anything\")\r\n    else:\r\n        print(\"Function does not appear to be defined.  Check the name and make sure it matches the prompt\")\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 302, "problem_id": "lsn9_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a function called `draw_multiple_trees()` that\noutputs a tree using ASCII art. Unlike the previous problem, this function\naccepts a parameter that tells it how many trees to draw.\n\nWrite a program that:\n\n  1. Gets an integer from the user and stores it in a variable. You can name this variable whatever you want.\n  2. Calls the function, and passes the variable to it. \n\nRemember that \"passing a value\" to a function simply means putting the number\ninside the parenthesis when you call it.\n\n\n", "code": "\ndef draw_multiple_trees(num_trees):\n    for _ in range(num_trees):\n        print('     *')\n        print('    ***')\n        print('   *****')\n        print('    ***')\n        print('    ***')\n        print('    ***')\n        print('\\n')\n\nnum_trees = int(input('Enter the number of trees to draw: '))\ndraw_multiple_trees(num_trees)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# The Actual Solution\r\ndef draw_tree(num_times):\r\n    result = \"\"\r\n    for i in range(num_times):\r\n        result += \"  *  \\n\"\r\n        result += \" *** \\n\"\r\n        result += \"*****\\n\"\r\n        result += \"  |  \\n\"\r\n    return result;\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    num_passed = 0\r\n    num_tests = 3\r\n    \r\n    for i in range(num_tests):\r\n        print(\"-------------------------------------------\")\r\n        print(\"Test\", i+1)\r\n        print(\"-------------------------------------------\")\r\n        num_trees = random.randint(0, 5)\r\n        output, error_message = autograder.run_script(\"lsn9_skill2.py\", [num_trees])\r\n        expected_output = draw_tree(num_trees)\r\n        \r\n        if output == expected_output:\r\n            print(\"Good Job!\\n\")\r\n            num_passed += 1\r\n        else:\r\n            print(\"Incorrect Output. Expected the following:\")\r\n            print(expected_output, \"\\n\")\r\n    \r\n    return round((100 / num_tests) * num_passed, 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 303, "problem_id": "lsn9_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a function called `draw_tree()` that prints a\ntree using ASCII art:\n\n    \n    \n     *  \n     ***  \n    *****  \n     |\n\nCall this function 3 times.\n\n\n", "code": "\ndef draw_tree():\n    print(\"     *\")\n    print(\"    ***\")\n    print(\"   *****\")\n    print(\"    |\")\n\ndraw_tree()\ndraw_tree()\ndraw_tree()\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# The Actual Solution\r\ndef draw_tree():\r\n    result =  \"  *  \\n\"\r\n    result += \" *** \\n\"\r\n    result += \"*****\\n\"\r\n    result += \"  |  \\n\"\r\n    return result;\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    output, error_message = autograder.run_script(\"lsn9_skill1.py\", [])\r\n    \r\n    expected_output = draw_tree() + draw_tree () + draw_tree()\r\n    \r\n    if output == expected_output:\r\n        print(\"Good Job!\")\r\n        return 100\r\n    else:\r\n        print(\"Incorrect Output. Expected the following:\")\r\n        print(expected_output)\r\n    \r\n    return 0\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 304, "problem_id": "lsn9_imagesize", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \nPROBLEM STATEMENT:  \nWrite a function that computes the size of an uncompressed image. You will\nname your function calculate_size_of_image(), and it will have three\nparameters: the width of the image, the height of the image, and the bit depth\n(i.e., # of bits per pixel).\n\nThe function should print the size of the image in kilobytes.\n\n\n", "code": "\ndef calculate_size_of_image(width, height, bit_depth):\n    size = (width * height * bit_depth) / 8\n    print(f\"The size of the image is {size} kilobytes.\")\n    \n# Example usage\ncalculate_size_of_image(1920, 1080, 24)\n", "testcase": "from cs110 import autograder\r\nimport lsn9_imagesize, random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    base = random.randint(1024, 1980)\r\n    height = random.randint(1024, 1980)\r\n    bd = 2**random.randint(3, 7)\r\n    output, error_message = autograder.run_script(\"lsn9_imagesize.py\", [base, height, bd])\r\n    \r\n    filesize = (base * height * bd) / 8 / 1024\r\n    score = 0\r\n    \r\n    if \"calculate_size_of_image\" in dir(lsn9_imagesize):\r\n        print(\"Function Correctly Defined\")\r\n        score += 50\r\n    else:\r\n        print(\"Function does not exist.  Check to make sure the name matches the prompt\")\r\n    \r\n    if autograder.equals(output, filesize):\r\n        print(\"Function produces correct output\")\r\n        score += 50\r\n    else:\r\n        print(\"Function produces incorrect output. Expected:\", filesize)\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 305, "problem_id": "lsn9_callme", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with three functions. Open the template file, and\nperform the following tasks: **  \n**\n\n  * **Task 1:** Ask the user to enter a width and height. Do **NOT** assume they are whole numbers. Call area_rectangle and give it the user values\n  * **Task 2:** Ask the user to enter a string. Call print_backwards and give it the user value\n  * **Task 3:** You have been provided with a variable called my_number. Call positive_or_negative and give it the variable\n\n\n", "code": "\ndef area_rectangle(width, height):\n    return width * height\n\ndef print_backwards(string):\n    print(string[::-1])\n\ndef positive_or_negative(number):\n    if number > 0:\n        print(\"Positive\")\n    elif number < 0:\n        print(\"Negative\")\n    else:\n        print(\"Zero\")\n\n# Task 1\nwidth = float(input(\"Enter width: \"))\nheight = float(input(\"Enter height: \"))\narea = area_rectangle(width, height)\n\n# Task 2\nstring = input(\"Enter a string: \")\nprint_backwards(string)\n\n# Task 3\nmy_number = 5\npositive_or_negative(my_number)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# This function takes a string and prints it backwards\r\ndef get_reverse(s):\r\n    result = ''\r\n    for i in range(len(s)-1, -1, -1):\r\n        result += s[i]\r\n    return result\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    base = round(random.uniform(1.0, 100.0), 1)\r\n    height = round(random.uniform(1.0, 100.0), 1)\r\n\r\n    string_list = ['abcde', 'defgh', 'xzy', 'abba']\r\n    test_string = string_list[random.randint(0, len(string_list)-1)]\r\n\r\n    file = open(\"lsn9_callme.py\", \"r\")\r\n    file_contents = file.read()\r\n    num_calls_area_rectangle = file_contents.count(\"area_rectangle\")\r\n    num_calls_print_backwards = file_contents.count(\"print_backwards\")\r\n    num_calls_positive = file_contents.count(\"positive_or_negative\")\r\n\r\n    output, error_message = autograder.run_script(\"lsn9_callme.py\", [base, height, test_string])\r\n    \r\n    area = (base * height)\r\n    score = 0\r\n    \r\n    lines = output.split(\"\\n\")\r\n    \r\n    if autograder.equals(lines[0], area) and num_calls_area_rectangle > 1:\r\n        print(\"area_rectangle called successfully\")\r\n        score += 33\r\n    else:\r\n        print(\"area_rectangle was not called successfully\")\r\n    \r\n    if len(lines) > 1 and lines[1].strip() == get_reverse(test_string) and num_calls_print_backwards > 1:\r\n        print(\"print_backwards called successfully\")\r\n        score += 33\r\n    else:\r\n        print(\"print_backwards was not called successfully\")\r\n    \r\n    if len(lines) > 2 and lines[2].strip() == \"Positive\" and num_calls_positive > 1:\r\n        print(\"positive_or_negative called successfully\")\r\n        score += 34\r\n    else:\r\n        print(\"positive_or_negative was not called successfully\")\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 306, "problem_id": "lsn7_triangle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite an algorithm that asks the user for X and Y coordinates of a single\npoint (the coordinates of the top left point on the triangle), the length of\nthe base, and the height of a right triangle. Then, open a graphics window and\ndraw the triangle. The area of the triangle is should be displayed at the\nbottom center of the window in black.\n\n\n\n**HINTS:**\n\n  * Make sure you get the user input BEFORE you open the window. Otherwise, the program will freeze.\n  * The `draw_text` function will draw text on a screen. Don't worry about getting the text EXACTLY in the center (it's hard!).\n\n\n\n\n", "code": "\nimport graphics\n\ndef main():\n    # Get user input\n    x = int(input(\"Enter the X coordinate of the top left point: \"))\n    y = int(input(\"Enter the Y coordinate of the top left point: \"))\n    base = int(input(\"Enter the length of the base: \"))\n    height = int(input(\"Enter the height of the triangle: \"))\n\n    # Calculate the area of the triangle\n    area = base * height / 2\n\n    # Create a graphics window\n    win = graphics.GraphWin(\"Triangle\", 400, 400)\n    win.setBackground(\"white\")\n\n    # Draw the triangle\n    p1 = graphics.Point(x, y)\n    p2 = graphics.Point(x + base, y)\n    p3 = graphics.Point(x + base / 2, y + height)\n    triangle = graphics.Polygon(p1, p2, p3)\n    triangle.setFill(\"lightblue\")\n    triangle.draw(win)\n\n    # Draw the area text\n    text = graphics.Text(graphics.Point(200, 380), \"Area: \" + str(area))\n    text.setTextColor(\"black\")\n    text.draw(win)\n\n    # Wait for mouse click to close the window\n    win.getMouse()\n    win.close()\n\nif __name__ == \"__main__\":\n    main()\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn7_triangle.py\", doraise=True)\r\n        print(\"----------------------------------------------------------------------\")\r\n        print(\"*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\")\r\n        print(\"----------------------------------------------------------------------\\n\")\r\n        \r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 307, "problem_id": "lsn7_stamp", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Create a pythonGraph function called `draw_stamp` that accepts an x and y\ncoordinate as parameters. Add code so that this function will then draw a\npicture (of your choosing) centered on that coordinate.\n\n\n\nTo test your function, create a pythonGraph window, and call your function\nseveral times (each time, passing it a different set of x and y coordinates).\n\n\n", "code": "\nfrom graphics import *\n\ndef draw_stamp(x, y):\n    win = GraphWin(\"My Drawing\", 200, 200)\n    \n    # Create a circle at the given coordinate\n    circle = Circle(Point(x, y), 50)\n    circle.setFill(\"red\")\n    circle.draw(win)\n    \n    # Create a rectangle below the circle\n    rectangle = Rectangle(Point(x-30, y+70), Point(x+30, y+120))\n    rectangle.setFill(\"blue\")\n    rectangle.draw(win)\n    \n    # Create a triangle above the circle\n    triangle = Polygon(Point(x-50, y-20), Point(x, y-70), Point(x+50, y-20))\n    triangle.setFill(\"green\")\n    triangle.draw(win)\n    \n    win.getMouse()\n    win.close()\n\n# Test the function with different coordinates\ndraw_stamp(100, 100)\ndraw_stamp(300, 200)\ndraw_stamp(150, 300)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn7_stamp.py\", doraise=True)\r\n        print(\"----------------------------------------------------------------------\")\r\n        print(\"*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\")\r\n        print(\"----------------------------------------------------------------------\\n\")\r\n        \r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 308, "problem_id": "lsn7_simpledrawing", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nUsing pythonGraph (and the documentation for pythonGraph), experiment with\neach of the drawing commands listed (drawing commands begin with the keyword\n\"draw\"). Draw something interesting using at least 4 different drawing\ncommands. One of those drawing commands must be `draw_image`\n\n**NOTE:  \n** The best files will be added to our Python \"Hall of Fame\".\n\n\n", "code": "\nfrom graph import *\n\ndef main():\n    window_size(800, 600)\n    canvas_title(\"Drawing Examples\")\n\n    draw_circle(100, 100, 50)\n    draw_rectangle(200, 200, 300, 400)\n    draw_line(400, 200, 600, 400)\n    draw_image(500, 300, \"image.jpg\")\n\n    wait()\n\nmain()\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    drawing_functions = [\"draw_arc\", \"draw_image\", \"draw_rectangle\", \"draw_circle\", \"draw_ellipse\", \"draw_line\", \"draw_pixel\", \"draw_text\", \"write_text\"]\r\n    drawing_functions_called = []\r\n    \r\n    print(\"----------------------------------------------------------------------\")\r\n    print(\"*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\")\r\n    print(\"----------------------------------------------------------------------\\n\")\r\n    \r\n    file = open(\"lsn7_simpledrawing.py\", \"r\")\r\n    file_contents = file.read()\r\n    \r\n    for f in drawing_functions:\r\n        if f in file_contents and f not in drawing_functions_called:\r\n            drawing_functions_called.append(f)\r\n    \r\n    if len(drawing_functions_called) >= 4 and \"draw_image\" in drawing_functions_called:\r\n        print(\"Good Job!\")\r\n        return 100.0\r\n    elif len(drawing_functions_called) >= 4 and \"draw_image\" not in drawing_functions_called:\r\n        print(\"Missing at least one call of draw_image\")\r\n        return 90.0\r\n    else:\r\n        print(\"Not enough different drawing functions.  Need 4 unique (including draw_image) calls.\")\r\n        return 25 * len(drawing_functions_called)\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 309, "problem_id": "lsn7_randomcircles", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Create a pythonGraph that asks the user for the number of circles to draw.\nYour program should then open a pythonGraph window and then draw that many\ncircles somewhere within view.\n\n**Hints**\n\n  * Import the `random` module in order to generate random numbers. There are specifically two functions that are useful:\n  * `random.random()` returns a random number between 0.0 and 1.0\n  * `random.randint(start, end)` returns a random integer between `start` and `end`\n\n\n\n\n", "code": "\nimport random\nimport pythonGraph\n\nnum_circles = int(input(\"Enter the number of circles to draw: \"))\nwindow = pythonGraph.create_window()\n\nfor _ in range(num_circles):\n    x = random.randint(0, window.width)\n    y = random.randint(0, window.height)\n    radius = random.randint(10, 50)\n    circle = pythonGraph.create_circle(x, y, radius)\n    pythonGraph.draw_circle(window, circle)\n\npythonGraph.wait_for_close()\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:\r\n        py_compile.compile(\"lsn7_randomcircles.py\", doraise=True)\r\n        print(\"----------------------------------------------------------------------\")\r\n        print(\"*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\")\r\n        print(\"----------------------------------------------------------------------\\n\")\r\n        \r\n        file = open(\"lsn7_randomcircles.py\", \"r\")\r\n        file_contents = file.read()\r\n        lines = file_contents.split(\"\\n\")\r\n        \r\n        pg_draw_used = False\r\n        random_used = False\r\n        \r\n        for line in lines:\r\n            if len(line.strip()) > 0 and line.strip()[0] != '#':      \r\n                if \"random.rand\" in line:\r\n                    random_used = True\r\n                    \r\n                if \"draw_circle(\" in line:\r\n                    pg_draw_used = True\r\n        \r\n        if pg_draw_used and random_used:\r\n            print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n            return 100.0\r\n        elif pg_draw_used and not random_used:\r\n            print(\"Looks like you drew a circle but didn't use random values for size or location.\")\r\n            return 50.0\r\n        elif not pg_draw_used and random_used:\r\n            print(\"Looks like you created random variables but didn't actually draw any circles.\")\r\n            return 50.0\r\n        else:\r\n            print(\"Doesn't look like you created random variables or drew any circles.\")\r\n            return 0.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 310, "problem_id": "lsn6_uod", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou've been asked to develop a tool to help identify the uniform of the day,\nbased on temperature and wind speed.\n\nThe command center has provided the following table for guidance:\n\n| Temperature  \n---|---  \nWind Speed |  | <40 | 40 | >40 and <60 | 60 | >60  \n<15 | Parkas | A-Jackets | A-Jackets | A-Jackets | Blues  \n15 | ABUs | ABUs | Parkas | Parkas | Blues  \n>15 | ABUs | ABUs | Parkas | Parkas | A-Jackets  \n  \nCreate a Python program that first gets the temperature (in degrees\nFahrenheit) and then the wind speed (in knots) from the user. You may assume\nthat all inputs are non-negative numbers.\n\nIt should then output the correct response, as described above.\n\n\n", "code": "\ntemperature = float(input(\"Enter the temperature in degrees Fahrenheit: \"))\nwind_speed = float(input(\"Enter the wind speed in knots: \"))\n\nif wind_speed < 40:\n    if temperature < 15:\n        print(\"Parkas\")\n    elif temperature == 15:\n        print(\"ABUs\")\n    else:\n        print(\"ABUs\")\nelif wind_speed == 40:\n    if temperature < 15:\n        print(\"A-Jackets\")\n    elif temperature == 15:\n        print(\"ABUs\")\n    else:\n        print(\"ABUs\")\nelif wind_speed > 40 and wind_speed < 60:\n    if temperature < 15:\n        print(\"A-Jackets\")\n    elif temperature == 15:\n        print(\"Parkas\")\n    else:\n        print(\"Parkas\")\nelif wind_speed == 60:\n    if temperature < 15:\n        print(\"A-Jackets\")\n    elif temperature == 15:\n        print(\"Parkas\")\n    else:\n        print(\"Blues\")\nelse:\n    if temperature < 15:\n        print(\"Blues\")\n    elif temperature == 15:\n        print(\"Blues\")\n    else:\n        print(\"A-Jackets\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\n\r\n# The Actual Solution\r\ndef solution(temp, wind):\r\n    if temp < 40:\r\n        if wind < 15:\r\n            return \"Parkas\"\r\n        else:\r\n            return \"OCPs\"\r\n    elif temp == 40:\r\n        if wind < 15:\r\n            return 'A-Jackets'\r\n        else:\r\n            return 'OCPs'\r\n    elif temp > 40 and temp <= 60:\r\n        if wind < 15:\r\n            return 'A-Jackets'\r\n        else:\r\n            return 'Parkas'\r\n    else:\r\n        if wind <= 15:\r\n            return 'Blues'\r\n        else:\r\n            return 'A-Jackets'\r\n\r\n\r\ndef run_test(temp, wind):\r\n    global num_tests_passed\r\n    \r\n    print(\"Testing Temp =\", temp, 'and Wind =', wind)\r\n    output, error_message = autograder.run_script(\"lsn6_uod.py\", [temp, wind])\r\n    \r\n    print(\"Output:\", output.strip())\r\n    \r\n    if output.strip() == solution(temp, wind):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT.  Expected:\", solution(temp, wind), \"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(39, 14)\r\n    run_test(39, 15)\r\n    run_test(39, 16)\r\n    run_test(40, 14)\r\n    run_test(40, 15)\r\n    run_test(40, 16)\r\n    run_test(50, 14)\r\n    run_test(50, 15)\r\n    run_test(50, 16)\r\n    run_test(60, 14)\r\n    run_test(60, 15)\r\n    run_test(60, 16)\r\n    run_test(61, 14)\r\n    run_test(61, 15)\r\n    run_test(61, 16)\r\n    \r\n    return round(num_tests_passed * (100 / 15), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 311, "problem_id": "lsn6_speeding", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a program that gets a speed (in miles per hour). You may assume that\nall inputs are non-negative numbers.\n\nIt should output the kind of ticket a police officer should give the driver\n(according to the table below).\n\nSpeed (mph) | <= 65 | >65 and <= 70 | >70 and <= 75 | > 75 and <= 80 | > 80  \n---|---|---|---|---|---  \nTicket | No Ticket | Warning | Speeding | Reckless Driving | Reckless\nEndangerment  \n  \n**EXAMPLES:**\n\n| Example 1 | Example 2 | Example 3 | Example 4 | Example 5  \n---|---|---|---|---|---  \nInput | 48 | 68 | 72 | 78 | 136  \nExpected Output  | No Ticket | Warning | Speeding | Reckless Driving |\nReckless Endangerment\n\n\n", "code": "\ndef get_ticket(speed):\n    if speed <= 65:\n        return \"No Ticket\"\n    elif speed <= 70:\n        return \"Warning\"\n    elif speed <= 75:\n        return \"Speeding\"\n    elif speed <= 80:\n        return \"Reckless Driving\"\n    else:\n        return \"Reckless Endangerment\"\n\n# Testing the function with example inputs\nprint(get_ticket(48))\nprint(get_ticket(68))\nprint(get_ticket(72))\nprint(get_ticket(78))\nprint(get_ticket(136))\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# The Actual Solution\r\ndef solution(speed):\r\n    # Determines what to return based on the table\r\n    if (speed <= 65):\r\n        return \"No Ticket\"\r\n    elif (speed >65 and speed <= 70):\r\n        return \"Warning\"\r\n    elif (speed > 70 and speed <= 75):\r\n        return \"Speeding\"  \r\n    elif (speed >75 and speed <= 80):\r\n        return \"Reckless Driving\"\r\n    elif (speed > 80):\r\n        return \"Reckless Endangerment\"\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    num_tests_passed = 0\r\n    \r\n    SPEEDS_TO_TEST = [random.randint(0, 65),\r\n                      65,\r\n                      random.randint(66, 70),\r\n                      70,\r\n                      random.randint(71, 75),\r\n                      75,\r\n                      random.randint(76, 80),\r\n                      80,\r\n                      random.randint(81, 100)]\r\n    \r\n    for i in range(0, len(SPEEDS_TO_TEST)):\r\n        print(\"-------------------------------\")\r\n        print(\"Test\", i+1)\r\n        print(\"-------------------------------\")\r\n        speed = SPEEDS_TO_TEST[i]\r\n        output, error_message = autograder.run_script(\"lsn6_speeding.py\", [speed])\r\n        \r\n        if output.strip() == solution(speed):\r\n            print(\"SUCCESS!\\n\")\r\n            num_tests_passed += 1\r\n        else:\r\n            print(\"INCORRECT.  Expected:\", solution(speed), \"\\n\")\r\n    \r\n    return round(num_tests_passed * (100 / len(SPEEDS_TO_TEST)), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 312, "problem_id": "lsn6_roundtrip", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a Python program that gets three values from the user:\n\n  * The distance to a destination (in miles)\n  * The amount of fuel in the user's car (in gallons)\n  * The # of miles the user's car can travel per gallon of gas (i.e., Miles Per Gallon)\n\nYou may assume that all inputs are non-negative numbers.\n\nCalculate the amount of fuel needed to reach the destination. Then output\nwhether or not the user needs to refuel during a round trip, using the below\ntable as a guide:\n\nFuel Consumed (One-Way) | =< 50% | > 50% and <= 100% | > 100%  \n---|---|---|---  \nOutput | No Refueling Needed | Refuel on Way Back | Refuel En Route  \n  \n**EXAMPLES:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 100  \n10  \n30 | 100  \n5  \n20 | 100  \n7  \n10  \nOutput | No Refueling Needed | Refuel on Way Back | Refuel En Route  \n  \n**NOTE: Your Output Must Match Exactly**\n\n\n", "code": "\ndistance = float(input(\"Enter the distance to the destination (in miles): \"))\nfuel_in_car = float(input(\"Enter the amount of fuel in your car (in gallons): \"))\nmiles_per_gallon = float(input(\"Enter the miles per gallon of your car: \"))\n\nfuel_needed = distance / miles_per_gallon\n\nif fuel_needed <= (fuel_in_car / 2):\n    print(\"No Refueling Needed\")\nelif fuel_needed <= fuel_in_car:\n    print(\"Refuel on Way Back\")\nelse:\n    print(\"Refuel En Route\")\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    points_earned = 0\r\n            \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 1\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn6_roundtrip.py\", [100,10,30])\r\n    \r\n    if output.strip() == \"No Refueling Needed\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 33\r\n    else:\r\n        print(\"Incorrect.  Expected: No Refueling Needed\\n\")\r\n        \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 2\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn6_roundtrip.py\", [100,5,20])\r\n    \r\n    if output.strip() == \"Refuel on Way Back\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 33\r\n    else:\r\n        print(\"Incorrect.  Expected: Refuel on Way Back\\n\")\r\n    \r\n        # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 3\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn6_roundtrip.py\", [100,7,10])\r\n    \r\n    if output.strip() == \"Refuel En Route\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 34\r\n    else:\r\n        print(\"Incorrect.  Expected: Refuel En Route\\n\")\r\n\r\n    return points_earned\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 313, "problem_id": "lsn6_lists", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite an algorithm that gets a decimal GPA, APA, and MPA from the user (in\nthat order). You may assume that all inputs are non-negative whole numbers.\n\nIt then reports which meritorious list the cadet is on. If the GPA is equal to\nor above 3.0, the cadet is on the \"Dean's List\", and if the APA is equal to or\nabove 3.0, the cadet is on the \"Athletic Director's List\", and if the MPA is\nequal to or above 3.0, the cadet is on the \"Commandant's List\". Finally, if\nthe cadet qualifies for all three individual lists, then the cadet is on the\n\"Superintendent's List\". The algorithm should report all the lists the cadet\nis on (in the order defined above), unless the cadet is on the Superintendents\nList, in which case, it should report only, \"Superintendent's List\".\n\n| No List | Dean's List | Athletic Director's List | Commandant's List |\nSuperintendent's List  \n---|---|---|---|---|---  \nGPA | < 3.0 | >= 3.0 | n/a | n/a | >= 3.0  \nAPA | < 3.0 | n/a | >= 3.0 | n/a | >= 3.0  \nMPA | < 3.0 | n/a | n/a | >= 3.0 | >= 3.0  \n  \n**EXAMPLES:**\n\n| Example 1 | Example 2 | Example 3 | Example 4 | Example 5  \n---|---|---|---|---|---  \nInput | 2.8  \n2.6  \n2.5 | 3.5  \n3.2  \n2.8 | 3.3  \n2.8  \n3.4 | 3.6  \n3.8  \n3.2 | 2.8  \n3.5  \n3.8  \nOutput | No List | Dean's List  \nAthletic Director's List | Dean's List  \nCommandant's List | Superintendent's List | Athletic Director's List  \nCommandant's List\n\n\n", "code": "\ndef meritorious_list(gpa, apa, mpa):\n    if gpa >= 3.0 and apa >= 3.0 and mpa >= 3.0:\n        return \"Superintendent's List\"\n    elif gpa >= 3.0 and apa >= 3.0:\n        return \"Athletic Director's List, Commandant's List\"\n    elif gpa >= 3.0 and mpa >= 3.0:\n        return \"Dean's List, Commandant's List\"\n    elif apa >= 3.0 and mpa >= 3.0:\n        return \"Dean's List, Athletic Director's List\"\n    elif gpa >= 3.0:\n        return \"Dean's List\"\n    elif apa >= 3.0:\n        return \"Athletic Director's List\"\n    elif mpa >= 3.0:\n        return \"Commandant's List\"\n    else:\n        return \"No List\"\n\n\n# Test cases\nprint(meritorious_list(2.8, 2.6, 2.5))\nprint(meritorious_list(3.5, 3.2, 2.8))\nprint(meritorious_list(3.3, 2.8, 3.4))\nprint(meritorious_list(3.6, 3.8, 3.2))\nprint(meritorious_list(2.8, 3.5, 3.8))\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\n\r\n# The Actual Solution\r\ndef solution(gpa, apa, mpa):\r\n    answer = \"\"\r\n    \r\n    # Determines what output to present (note how we are using the \" character because of the 's)\r\n    if (gpa < 3.0 and apa < 3.0 and mpa < 3.0):\r\n        answer += \"No List\\n\"\r\n    elif (gpa >= 3.0 and apa >= 3.0 and mpa >= 3.0):\r\n        answer += \"Superintendent's List\\n\"\r\n    else:\r\n        # Note that these are 3 separate if statements; we do this because we don't know what list(s) the cadet is on\r\n        if (gpa >= 3.0):\r\n            answer += \"Dean's List\\n\"\r\n        \r\n        if (apa >= 3.0):\r\n            answer += \"Athletic Director's List\\n\"\r\n        \r\n        if (mpa >= 3.0):\r\n            answer += \"Commandant's List\\n\"\r\n\r\n    return answer.strip()\r\n\r\n\r\ndef run_test(gpa, apa, mpa):\r\n    global num_tests_passed\r\n    \r\n    print(\"--------------------------------------------\")\r\n    print(\"Testing GPA =\", str(gpa) + \";\", \"APA =\", str(apa) + \";\", \"MPA =\", mpa)\r\n    print(\"--------------------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn6_lists.py\", [gpa, apa, mpa])\r\n        \r\n    if output.strip() == solution(gpa, apa, mpa):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT.  Expected:\", solution(gpa, apa, mpa), \"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(2.8, 2.6, 2.5)\r\n    run_test(3.5, 3.2, 2.8)\r\n    run_test(3.3, 2.8, 3.4)\r\n    run_test(3.6, 3.8, 3.2)\r\n    run_test(2.8, 3.5, 3.8)\r\n    \r\n    return round(num_tests_passed * (100 / 5), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 314, "problem_id": "lsn6_fuel", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nWrite an algorithm that gets a fuel load (in lbs) and then a distance to base\n(in nautical miles). You may assume all inputs are non-negative numbers.\n\nIt then outputs what kind of action the pilot should take. If the fuel load is\nless than 50 lbs and the distance to base is less than 70 nm, report \"Return\nto base\", otherwise, report \"Resume flight\".\n\n**EXAMPLES:**\n\n| Example 1 | Example 2 | Example 3 | Example 4  \n---|---|---|---|---  \nInput | 30  \n60 | 60  \n60 | 40  \n80 | 60  \n80  \nOutput | Return to base | Resume flight | Resume flight | Resume flight  \n  \n**Note: Output must match exactly.**\n\n\n", "code": "\ndef fuel_action(fuel_load, distance_to_base):\n    if fuel_load < 50 and distance_to_base < 70:\n        return \"Return to base\"\n    else:\n        return \"Resume flight\"\n\n\n# Example cases\nprint(fuel_action(30, 60))  # Return to base\nprint(fuel_action(60, 60))  # Resume flight\nprint(fuel_action(60, 40))  # Resume flight\nprint(fuel_action(80, 60))  # Resume flight\nprint(fuel_action(80, 80))  # Resume flight\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    points_earned = 0\r\n            \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 1\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn6_fuel.py\", [30,60])\r\n    \r\n    if output.strip() == \"Return to base\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 25\r\n    else:\r\n        print(\"Incorrect.  Expected: Return to base\\n\")\r\n        \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 2\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn6_fuel.py\", [60,60])\r\n    \r\n    if output.strip() == \"Resume flight\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 25\r\n    else:\r\n        print(\"Incorrect.  Expected: Resume flight\\n\")\r\n    \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 3\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn6_fuel.py\", [40,80])\r\n    \r\n    if output.strip() == \"Resume flight\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 25\r\n    else:\r\n        print(\"Incorrect.  Expected: Resume flight\\n\")\r\n\r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 4\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn6_fuel.py\", [60,80])\r\n    \r\n    if output.strip() == \"Resume flight\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 25\r\n    else:\r\n        print(\"Incorrect.  Expected: Resume flight\\n\")\r\n\r\n    return points_earned\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 315, "problem_id": "lsn5_positive", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a Python  **program**  that gets a floating point number from the user:\n\n  * If the number is positive, print the word `POSITIVE`\n  * Otherwise, print the word `NOT POSITIVE`\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 10 | -5 | 0  \nOutput | POSITIVE | NOT POSITIVE | NOT POSITIVE\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    points_earned = 0\r\n    \r\n    # Generates Random Values\r\n    negative_value = random.randint(-100, -1)\r\n    positive_value = random.randint(1, 100)\r\n        \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"# Test 1 - Positive Number\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn5_positive.py\", [positive_value])\r\n    \r\n    if output.strip() == \"POSITIVE\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 33\r\n    else:\r\n        print(\"Incorrect Output:\", output)\r\n        print(\"Expected POSITIVE\\n\")\r\n        \r\n    \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"# Test 2 - Negative Number\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn5_positive.py\", [negative_value])\r\n    \r\n    if output.strip() == \"NOT POSITIVE\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 33\r\n    else:\r\n        print(\"Incorrect Output:\", output)\r\n        print(\"Expected NOT POSITIVE\\n\")\r\n        \r\n    \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"# Test 3 - Zero\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn5_positive.py\", [0])\r\n    \r\n    if output.strip() == \"NOT POSITIVE\":\r\n        print(\"CORRECT\")\r\n        points_earned += 34\r\n    else:\r\n        print(\"Incorrect Output:\", output)\r\n        print(\"Expected NOT POSITIVE\\n\")\r\n\r\n    return points_earned\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 316, "problem_id": "lsn5_largest", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a program that takes three integers as parameters, and prints the\nlargest (i.e., highest) number.\n\nEx: If the input is:\n\n    \n    \n    7\n    15\n    3\n    \n\nYour function should return:\n\n    \n    \n    15\n    \n\n  \nIn the event that all 3 numbers are the same, output that number.\n\nEx: If the input is:\n\n    \n    \n    5\n    5\n    5\n    \n\nYour function should return:\n\n    \n    \n    5\n\n\n", "code": "\ndef largest_number(num1, num2, num3):\n    if num1 == num2 and num2 == num3:\n        return num1\n    elif num1 >= num2 and num1 >= num3:\n        return num1\n    elif num2 >= num1 and num2 >= num3:\n        return num2\n    else:\n        return num3\n\nprint(largest_number(7, 15, 3))\nprint(largest_number(5, 5, 5))\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef run_test(num1, num2, num3):\r\n    print(\"-------------------------------\")\r\n    print(\"# Testing: \" + str(num1) + \" \" + str(num2) + \" \" + str(num3))\r\n    print(\"-------------------------------\")\r\n    \r\n    output, error_message = autograder.run_script(\"lsn5_largest.py\", [num1, num2, num3])\r\n    \r\n    if autograder.equals(output, max(num1, num2, num3)):\r\n        print(\"CORRECT\\n\")\r\n        return True\r\n    else:\r\n        print(\"Incorrect.  Expected\", max(num1, num2, num3))\r\n        return False\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    tests_passed = 0\r\n    \r\n    # Generate 3 Random Numbers\r\n    num1 = 0\r\n    num2 = 0\r\n    num3 = 0\r\n    \r\n    # Ensures that the 3 Numbers are Different\r\n    while num1 == num2 or num1 == num3 or num2 == num3:\r\n        num1 = random.randint(0, 100)\r\n        num2 = random.randint(0, 100)\r\n        num3 = random.randint(0, 100)\r\n    \r\n    # Sorts the numbers\r\n    # This is needed so that we can test relationships between numbers\r\n    numbers = [num1, num2, num3]\r\n    numbers.sort()\r\n    num1 = numbers[0]\r\n    num2 = numbers[1]\r\n    num3 = numbers[2]\r\n    \r\n    # Test 1:  num1, num2, num3\r\n    if run_test(num1, num2, num3):\r\n        tests_passed += 1\r\n\r\n    # Test 2:  num1, num3, num2\r\n    if run_test(num1, num3, num2):\r\n        tests_passed += 1\r\n        \r\n    # Test 3:  num2, num3, num1\r\n    if run_test(num2, num3, num1):\r\n        tests_passed += 1\r\n    \r\n    # Test 4:  num3, num1, num2\r\n    if run_test(num3, num1, num2):\r\n        tests_passed += 1\r\n\r\n    # Test 5:  num2, num1, num3\r\n    if run_test(num2, num1, num3):\r\n        tests_passed += 1\r\n    \r\n    # Test 6:  3 Equal Numbers\r\n    if run_test(num1, num1, num1):\r\n        tests_passed += 1\r\n            \r\n    print(\"Passed \" + str(tests_passed) + \" out of 6 tests\")\r\n    return round(tests_passed * (100 / 6), 1)\r\n    \r\n    \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 317, "problem_id": "lsn5_classyear", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nUsing the below table as a guide, write a Python program that takes the user's\nclass year as input, and outputs their cadet class. If the class year is\nbefore 2021, output \"Graduate\". Alternatively, if the class year is larger\nthan 2024, output \"Not a Cadet\".\n\nYou may assume that all inputs provided to your application are years\n(represented as Integers)\n\n| Example 1 | Example 2 | Example 3 | Example 4 | Example 5 | Example 6  \n---|---|---|---|---|---|---  \nInput | 2021 | 2022 | 2023 | 2024 | 2020 | 2025  \nOutput | Firstie | Two Degree | Three Degree | Four Degree | Graduate | Not a\nCadet\n\n\n", "code": "\ndef find_cadet_class(year):\n    if year < 2021:\n        return \"Graduate\"\n    elif year > 2024:\n        return \"Not a Cadet\"\n    elif year == 2021:\n        return \"Firstie\"\n    elif year == 2022:\n        return \"Two Degree\"\n    elif year == 2023:\n        return \"Three Degree\"\n    elif year == 2024:\n        return \"Four Degree\"\n        \nyear = int(input(\"Enter your class year: \"))\ncadet_class = find_cadet_class(year)\nprint(cadet_class)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef solution(class_year):\r\n    if class_year < 2022:\r\n        return \"Graduate\"\r\n    elif class_year == 2022:\r\n        return \"Firstie\"\r\n    elif class_year == 2023:\r\n        return \"Two Degree\"\r\n    elif class_year == 2024:\r\n        return \"Three Degree\"\r\n    elif class_year == 2025:\r\n        return \"Four Degree\"\r\n    else:\r\n        return \"Not a Cadet\"\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    START_YEAR = 2021\r\n    END_YEAR = 2026\r\n    number_correct = 0\r\n    \r\n    for year in range(START_YEAR, END_YEAR + 1):\r\n        print(\"------------------------------\")\r\n        print(\"Testing: \" + str(year))\r\n        print(\"------------------------------\")\r\n        \r\n        # Runs the Script\r\n        output, error_message = autograder.run_script(\"lsn5_classyear.py\", [year])\r\n                \r\n        lines = output.split(\"\\n\")\r\n               \r\n        if lines[0] == solution(year):\r\n            print(\"PASS\\n\")\r\n            number_correct += 1\r\n        else:\r\n            print(\"FAIL\\n\")\r\n    \r\n    print(\"Passed \" + str(number_correct) + \" out of \" + str(END_YEAR - START_YEAR + 1) + \" tests\")\r\n    return round(number_correct * (100 / (END_YEAR - START_YEAR + 1)), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 318, "problem_id": "lsn5_atmosphere", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** The Earth's atmosphere is divided into a series of layers. Write an\nalgorithm that asks the user for the altitude in kilometers. Then output the\ncorresponding layer according to the following table:\n\nAltitude | \u226410km | >10km&\u226450km | >50km&\u226485km | >85km&\u22641000km |\n>1000km&\u2264100,000km | >100,000km  \n---|---|---|---|---|---|---  \n**Layer** | Troposphere | Stratosphere | Mesosphere | Thermosphere | Exosphere\n| Space\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(altitude):\r\n    if altitude >= 0:\r\n        if altitude <= 10:\r\n            return \"Troposphere\"\r\n    if altitude >= 11:\r\n        if altitude <= 50:\r\n            return \"Stratosphere\"\r\n    if altitude >= 51:\r\n        if altitude <= 85:\r\n            return \"Mesosphere\"\r\n    if altitude >= 86:\r\n        if altitude <= 1000:\r\n            return \"Thermosphere\"\r\n    if altitude >= 1001:\r\n        if altitude <= 100000:\r\n            return \"Exosphere\"\r\n        else:\r\n            return \"Space\"\r\n        \r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    TEST_VALUES = [0, 1, 10, 11, 50, 51, 85, 86, 1000, 1001, 100000, 100001]\r\n    tests_passed = 0\r\n    \r\n    for altitude in TEST_VALUES:\r\n        print(\"--------------------------\")\r\n        print(\"Testing \" + str(altitude) + \" km\")\r\n        print(\"--------------------------\")\r\n        \r\n        # Runs the Script\r\n        output, error_message = autograder.run_script(\"lsn5_atmosphere.py\", [altitude])\r\n                               \r\n        # Your Test Goes Here (Return True if Pass, False Otherwise)   \r\n        if output.strip() == solution(altitude):\r\n            print(\"Passed\\n\")\r\n            tests_passed += 1\r\n        else:\r\n            print(\"Failed (Expected: \" + solution(altitude) + \")\\n\")\r\n    \r\n    print(\"Passed\", tests_passed, \"out of\", len(TEST_VALUES), \"tests.\")\r\n    return round(tests_passed * (100 / len(TEST_VALUES)), 2)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 319, "problem_id": "lsn4_temperature", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nWrite an algorithm that prompts the user for a temperature in \u00b0F and then\noutputs K and \u00b0C in that order.\n\n**EXAMPLE:**\n\n| Example 1 | Example 2  \n---|---|---  \nInput | 32 | 0  \nOutput | 273.15  \n0 | 255.372  \n-17.778  \n  \n**Note: Output must match within a predefined tolerance.**\n\n\n", "code": "\ndef convert_temperature():\n    fahrenheit = float(input(\"Enter the temperature in \u00b0F: \"))\n    celsius = (fahrenheit - 32) * 5/9\n    kelvin = celsius + 273.15\n    print(\"Temperature in Kelvin: {:.2f}\".format(kelvin))\n    print(\"Temperature in \u00b0C: {:.2f}\".format(celsius))\n\nconvert_temperature()\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    degrees_farenheit = random.random() * 451.0\r\n    degrees_celsius = (degrees_farenheit - 32.0) * 5/9\r\n    degrees_kelvin = degrees_celsius + 273.15\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn4_temperature.py\", [degrees_farenheit])\r\n    \r\n    lines = output.split('\\n')\r\n    \r\n    if autograder.equals(lines[0], degrees_kelvin):\r\n        print(\"Conversion to Kelvin looks good.\")\r\n        if autograder.equals(lines[1], degrees_celsius):\r\n            print(\"Conversion to Celsius looks good.\")\r\n            return 100.0\r\n        else:\r\n            print(\"Conversion to Celsius incorrect.\\nYour result: \" + str(lines[1]) + \"\\nExpected: \" + str(degrees_celsius))\r\n            return 50.0\r\n    else:\r\n        if autograder.equals(lines[0], degrees_celsius):\r\n            print(\"Looks like you swapped the order of your output. Look at the Problem Statement and try again.\")\r\n        else:\r\n            print(\"Conversion to Kelvin incorrect.\\nYour result: \" + str(lines[0]) + \"\\nExpected: \" + str(degrees_kelvin))\r\n        return 0.0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 320, "problem_id": "lsn4_math", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nGiven three floating-point numbers x, y, and z, output the square root of x,\nthe absolute value of (y minus z) , and the factorial of (the ceiling of z).\nEach input should be on a new line, and rounded to a maximum of 2 decimal\nplaces.\n\n(Hint: use the [`round` (Links to an external\nsite.)](https://docs.python.org/3/library/functions.html#round) function to\nround your outputs!):\n\n`round(# to round, # of digits to round to)`\n\n**EXAMPLE:**\n\n    \n    \n    5.0\n    6.5\n    3.2\n    \n\nThen the output is:\n\n    \n    \n    2.24\n    3.30\n    24.00\n    \n\nNOTE: Decimal places may be slightly off depending on the exact numbers used.\n\n\n", "code": "\nimport math\n\nx = float(input())\ny = float(input())\nz = float(input())\n\nsqrt_x = round(math.sqrt(x), 2)\nabs_y_minus_z = round(abs(y - z), 2)\nfactorial_z = round(math.factorial(math.ceil(z)), 2)\n\nprint(sqrt_x)\nprint(abs_y_minus_z)\nprint(factorial_z)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num1 = random.random() * 100.0\r\n    num2 = random.random() * 100.0\r\n    num3 = random.random() * 10.0\r\n    \r\n    part1 = round(math.sqrt(num1), 2)\r\n    part2 = round(math.fabs(num2 - num3), 2)\r\n    part3 = round(math.factorial(math.ceil(num3)), 2)\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn4_math.py\", [num1, num2, num3])\r\n    \r\n    lines = output.split('\\n')\r\n    \r\n    correct = [0,0,0]\r\n    \r\n    if autograder.equals(lines[0], part1, 0.001):\r\n        correct[0]=1\r\n        print(\"Calculation 1 Correct!\")\r\n    else:\r\n        print(\"Calculation 1 Incorrect. Expected: \" + str(part1) + \"<-- Did you forget to use round()?\")\r\n    if autograder.equals(lines[1], part2, 0.001):\r\n        correct[1]=1\r\n        print(\"Calculation 2 Correct!\")\r\n    else:\r\n        print(\"Calculation 2 Incorrect. Expected: \" + str(part2) + \"<-- Did you forget to use round()?\")\r\n    if autograder.equals(lines[2], part3, 0.001):\r\n        correct[2]=1\r\n        print(\"Calculation 3 Correct!\")\r\n    else:\r\n        print(\"Calculation 3 Incorrect. Expected: \" + str(part3) + \"<-- Did you forget to use round()?\")\r\n    \r\n    amt_correct = len([elem for elem in correct if elem==1])\r\n    \r\n    return round(amt_correct/3*100,2)\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 321, "problem_id": "lsn4_calories", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nThe following equations estimate the calories burned when exercising ([source\n(Links to an external\nsite.)](https://web.archive.org/web/20121021230025/http://fitnowtraining.com/2012/01/formula-\nfor-calories-burned/)):\n\nMen: Calories = ( (Age x 0.2017) + (Weight x 0.09036) + (Heart Rate x 0.6309)\n-- 55.0969 ) x Time / 4.184\n\nWomen: Calories = ( (Age x 0.074) -- (Weight x 0.05741) + (Heart Rate x\n0.4472) -- 20.4022 ) x Time / 4.184\n\nWrite a program using inputs age (years), weight (pounds), heart rate (beats\nper minute), and time (minutes), respectively. Output calories burned for men\nand women.\n\nOutput each floating-point value (your program will be marked correct so long\nas it outputs a value within a predefined range)\n\n**EXAMPLE:**\n\nIf the input is:\n\n    \n    \n    49\n    155\n    148\n    60\n    \n\nThen the output is:\n\n    \n    \n    891.47\n    580.94\n\n\n", "code": "\nage = int(input())\nweight = int(input())\nheart_rate = int(input())\ntime = int(input())\n\ncalories_men = ((age * 0.2017) + (weight * 0.09036) + (heart_rate * 0.6309) - 55.0969) * time / 4.184\ncalories_women = ((age * 0.074) - (weight * 0.05741) + (heart_rate * 0.4472) - 20.4022) * time / 4.184\n\nprint('{:.2f}'.format(calories_men))\nprint('{:.2f}'.format(calories_women))\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    age_years = random.randint(10, 99)\r\n    weight_pounds = random.randint(80, 400)\r\n    heart_bpm = random.randint(50, 140)\r\n    time_minutes = random.randint(15, 90)\r\n    \r\n    calories_man   = ( (age_years * 0.2017) + (weight_pounds * 0.09036) + (heart_bpm * 0.6309) - 55.0969 )  * time_minutes / 4.184\r\n    calories_woman = ( (age_years * 0.074)  + (weight_pounds * 0.05741) + (heart_bpm * 0.4472) - 20.4022 ) * time_minutes / 4.184\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn4_calories.py\", [age_years, weight_pounds, heart_bpm, time_minutes])\r\n      \r\n    lines = output.split('\\n')\r\n      \r\n    if autograder.equals(lines[0], calories_man):\r\n        print(\"Male Calorie Calculations Look Good.\")\r\n        if autograder.equals(lines[1], calories_woman):\r\n            print(\"Female Calorie Calculations Look Good.\")\r\n            return 100.0\r\n        else:\r\n            print(\"Female Calorie Calculation is Incorrect.\\nExpected: \" + str(calories_woman))\r\n            return 50.0\r\n    else:\r\n        print(\"Male Calorie Calculation is Incorrect.\\nExpected: \" + str(calories_man))\r\n        return 0.0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 322, "problem_id": "lsn4_bits_to_kmg", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nOne byte is comprised of 8 bits. A typical computer program has a requirement\nfor much more memory. Therefore, many bytes can be grouped together to make\nlarger memory amounts. Our convention is for computer memory is scaled in\nlogical increments of 210 = 1024.\n\nFor example:\n\n  * 1024 bytes = 1 kilobyte (KB)\n  * 1024 KB = 1 megabyte (MB)\n  * 1024 MB = 1 gigabyte (GB)\n\nWrite an algorithm that prompts the user for a number of bits and then outputs\nthe equivalent number of kilobytes, megabytes, and gigabytes.\n\n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 1000000 | 6879000 | 92445694  \nOutput | 122.07  \n0.12  \n0.00012 | 839.72  \n0.82  \n.0008 | 11,284.87  \n11.02  \n0.01  \n  \n**Note: Output must match within a predefined tolerance.**\n\n\n", "code": "\ndef convert_bits_to_memory(bits):\n    kilobytes = bits / (8 * 1024)\n    megabytes = bits / (8 * 1024 * 1024)\n    gigabytes = bits / (8 * 1024 * 1024 * 1024)\n    return kilobytes, megabytes, gigabytes\n\nbits = int(input(\"Enter the number of bits: \"))\nkilobytes, megabytes, gigabytes = convert_bits_to_memory(bits)\nprint(round(kilobytes, 2))\nprint(round(megabytes, 2))\nprint(round(gigabytes, 5))\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num_bits = random.randint(1, 1000000)\r\n    num_bytes = num_bits / 8\r\n    num_kb = num_bytes / 1024\r\n    num_mb = num_kb / 1024\r\n    num_gb = num_mb / 1024\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn4_bits_to_kmg.py\", [num_bits])\r\n      \r\n    lines = output.split('\\n')\r\n      \r\n    if autograder.equals(lines[0], num_kb):\r\n        print(\"Kilobyte Conversion Looks Good.\")\r\n        if autograder.equals(lines[1], num_mb):\r\n            print(\"Megabyte Conversion Looks Good.\")\r\n            if autograder.equals(lines[2], num_gb):\r\n                print(\"Gigabyte Conversion Looks Good.\")\r\n                return 100.0\r\n            else:\r\n                print(\"Num GB is Incorrect.\\n  Expected: \" + str(num_gb))\r\n                return 67.0\r\n        else:\r\n            print(\"Num MB is Incorrect.\\n  Expected: \" + str(num_mb))\r\n            return 33.0\r\n    else:\r\n        print(\"Num KB is Incorrect.\\n  Expected: \" + str(num_kb))\r\n        return 0.0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 323, "problem_id": "lsn4_bits_to_bytes", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nThe basic unit of computer memory is a bit. A bit can represent two values (on\nor off, 0 or 1). To represent more information, bits are grouped together in\nlarger quantities. Beyond a bit, the next logical grouping is a byte, where 1\nbyte has 8 bits. Write an algorithm that prompts the user for a number of bits\nand then outputs the equivalent number of bytes.\n\n**EXAMPLE:**\n\nExample 1 | Example 2 | Example 3  \n---|---|---  \nInput | 8 | 800 | 7234  \nOutput | 1.0 | 100.0 | 904.25  \n  \n**Note: Output must match exactly.**\n\n\n", "code": "\ndef convert_bits_to_bytes(bits):\n    bytes = bits / 8\n    return bytes\n\nbits = int(input(\"Enter the number of bits: \"))\nbytes = convert_bits_to_bytes(bits)\nprint(bytes)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num_bits = random.randint(1, 1000000)\r\n    num_bytes = num_bits / 8\r\n\r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn4_bits_to_bytes.py\", [num_bits])\r\n      \r\n    if autograder.equals(output, num_bytes):\r\n        print(\"Num Bytes Looks Good.\")\r\n        return 100.0\r\n    else:\r\n        print(\"Num Bytes is Incorrect.\\nExpected: \" + str(num_bytes))\r\n        return 0.0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 324, "problem_id": "lsn4_bit_representation", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nOne way bits can hold information is computer images. Computer images are\ncomposed of a grid of small, independent colored cells known as pixels. The\nnumber of colors each pixel can hold is related to the number bits allocated\nto each pixel. A simple black and white image, for example, would have a\nsingle bit per pixel, where the value of the bit would represent black or\nwhite for that pixel. Allocating 2 bits per pixel would allow each pixel to\nhave one of four colors.\n\nGenerally speaking, the number of color options available to a particular\npixel can be described as:\n\n    \n    \n    numberofcolors = 2number of bits\n\nIn Python, write an algorithm that prompts the user for a number of bits and\nthen outputs the number of different colors that could be represented by a\nsingle pixel.\n\n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 3 | 8 | 24  \nOutput | 8 | 256 | 16777216  \n  \n**Note: Output must match exactly.**\n\n\n", "code": "\n# Prompt the user for the number of bits\nbits = int(input(\"Enter the number of bits: \"))\n\n# Calculate the number of colors\ncolors = 2 ** bits\n\n# Output the number of colors\nprint(\"The number of different colors that could be represented by a single pixel is:\", colors)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num_bits = random.randint(1, 32)\r\n    num_colors = 2 ** num_bits\r\n\r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn4_bit_representation.py\", [num_bits])\r\n      \r\n    if autograder.equals(output, num_colors):\r\n        print(\"Num Colors Looks Good.\")\r\n        return 100.0\r\n    else:\r\n        print(\"Num Colors is Incorrect.\\nExpected: \" + str(num_colors))\r\n        return 0.0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 325, "problem_id": "lsn3_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a program that gets a cadet's age, and stores it in a variable called\n**your_age.**\n\nPrint the user's age + 4.\n\nFor example, if the user types:\n\n    \n    \n     18\n\nYour program should print:\n\n    \n    \n    22\n\n\n", "code": "\nyour_age = int(input(\"Enter your age: \"))\nage_plus_four = your_age + 4\nprint(age_plus_four)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n       \r\n    # Generates Random Values\r\n    age = random.randint(18, 30)\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn3_skill2.py\", [age])\r\n    \r\n    if autograder.equals(output, age+4):\r\n        print(\"PASSED\")\r\n        return 100\r\n    elif autograder.equals(output, age):\r\n        print(\"Close!  You forgot to add 4 to the age before printing it out\")\r\n        return 50\r\n    else:\r\n        print(\"Incorrect Output, Expected\", age+4)\r\n        return 0\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 326, "problem_id": "lsn3_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Create a variable called  **name,  **and set it equal to your name\n(represented as a string--don't forget to use the quotation marks!).\n\n\n", "code": "\nname = \"John Doe\"\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\nfrom lsn3_skill1 import *\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n       \r\n    points_earned = 0   \r\n    \r\n    print(\"Looking for a variable called 'name' . . . \", end='')\r\n    \r\n    if 'name' in globals():\r\n        points_earned += 50\r\n        print(\"FOUND!\")\r\n        print(\"Now, checking to make sure your name is a string\")\r\n        \r\n        if type(name).__name__ == 'str':\r\n            points_earned += 50\r\n            print(\"Good Job\", name + \"!\")\r\n        else:\r\n            print(\"Make sure you are surrounding your name with quotation marks\")\r\n    else:\r\n        print(\"NOT FOUND :(\")\r\n        \r\n    return points_earned\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 327, "problem_id": "lsn3_scoreaverage", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write an algorithm that prompts the user for three sports game scores and\noutputs the average.\n\n  \n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 8  \n15  \n12 | 89  \n103  \n63 | 14  \n42  \n36  \nOutput | 11.666666666666666 | 85.0 | 30.666666666666668  \n  \n**Note: Output must match (within a predefined tolerance).**\n\n\n", "code": "\nscore1 = float(input(\"Enter score for game 1: \"))\nscore2 = float(input(\"Enter score for game 2: \"))\nscore3 = float(input(\"Enter score for game 3: \"))\n\naverage = (score1 + score2 + score3) / 3\n\nprint(average)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    score1 = random.randint(0, 100)\r\n    score2 = random.randint(0, 100)\r\n    score3 = random.randint(0, 100)\r\n    average = (score1 + score2 + score3) / 3.0\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn3_scoreaverage.py\", [score1, score2, score3])\r\n    \r\n    if autograder.equals(output, average):\r\n        print(\"PASSED!\")\r\n        return 100\r\n    else:\r\n        print(\"Value doesn't match.\\nExpected: \" + str(average))\r\n        return 0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 328, "problem_id": "lsn3_madlib", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Mad Libs are activities that have a person provide various words, which are\nthen used to complete a short story in unexpected (and hopefully funny) ways.\n(EDITOR'S NOTE: Do you kids even do Mad Libs anymore?)\n\nComplete the program to read the needed values from input, that the existing\noutput statement(s) can use to output a short story.\n\n**EXAMPLE:**\n\nIf the input is:\n\n    \n    \n    Eric\n    Chipotle\n    12\n    burritos\n    \n\nThen the output is:\n\n    \n    \n    Eric went to Chipotle to buy 12 different types of burritos\n\n\n", "code": "\nname = input()\nplace = input()\nnum = input()\nfood = input()\n\nprint(f\"{name} went to {place} to buy {num} different types of {food}\")\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    first_names = ['Adrian', 'Troy', 'Dave', 'Paul', 'Kelly', 'Steve', 'Barry']\r\n    generic_locations = ['Best Buy', 'AAFES', 'Target', 'THE Walmart', 'Home Depot']\r\n    nouns = ['Video Games', 'Board Games', 'Nintendo Switches', 'Sony PS4s', 'Microsoft (Ugh) Xbox Ones']\r\n    \r\n    first_name = first_names[random.randint(0, len(first_names) - 1)]\r\n    generic_location = generic_locations[random.randint(0, len(generic_locations) - 1)]\r\n    whole_number = random.randint(0, 100)\r\n    plural_noun = nouns[random.randint(0, len(nouns) - 1)]\r\n\r\n    expected_output = first_name + ' went to ' + generic_location + ' to buy ' + str(whole_number) + ' different types of ' + plural_noun + \"\\n\"\r\n\r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn3_madlib.py\", [first_name, generic_location, whole_number, plural_noun])\r\n    \r\n    if output == expected_output:\r\n        print(\"PASSED!\")\r\n        return 100\r\n    else:\r\n        print(\"String doesn't match.\\nExpected: \" + expected_output)\r\n        return 0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 329, "problem_id": "lsn3_girlscouts", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a program that asks the user for the amount of money he/she has on\nhand, and outputs the number of girl scout cookies that he/she can purchase.\nUse the following prices:\n\n$5 per box for the \"Super Six\" (Thin Mints, Samoas, Tagalongs, Do-Si-Dos,\nTrefoils, Savannah Smiles)  \n$6 per box for the Specialty Cookies (S'mores, Toffee-tastic)\n\n**For this problem, assume that the user will buy all of one or the other. In\nother words, output the number of boxes that he/she would be able to obtain if\nhe/she bought nothing but the Super Six, and nothing but the Specialty\nCookies.**\n\n**HINT:**  \nYou can convert a number to an integer by using the int() function. For\nexample:  \n **int(2.51)** will convert the number to 2\n\nEXAMPLE:  \nIf the input is:\n\n    \n    \n    26\n\nThen the output is:\n\n    \n    \n    5 boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles  \n    4 boxes of S'mores and Toffee-tastic\n\n\n", "code": "\namount = int(input())\n\nsuper_six_price = 5\nspecialty_price = 6\n\nsuper_six_boxes = amount // super_six_price\nspecialty_boxes = amount // specialty_price\n\nprint(super_six_boxes, \"boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles\")\nprint(specialty_boxes, \"boxes of S'mores and Toffee-tastic\")\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    dollar_amount = round(random.uniform(10.00, 100.00), 2)\r\n    super_six_amount = (dollar_amount // 5)\r\n    specialty_amount = (dollar_amount // 6)\r\n    score = 0\r\n    \r\n    line_1 = str(int(super_six_amount)) + \" boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles\"\r\n    line_2 = str(int(specialty_amount)) + \" boxes of S'mores and Toffee-tastic\"\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn3_girlscouts.py\", [dollar_amount])\r\n    output_lines = output.split('\\n')\r\n    \r\n    if line_1 == output_lines[0]:\r\n        print(\"First Line is Correct\")\r\n        score += 50\r\n    else:\r\n        print(\"First Line is Incorrect.  Expected:\", line_1)\r\n    \r\n    if line_2 == output_lines[1]:\r\n        print(\"Second Line is Correct\")\r\n        score += 50\r\n    else:\r\n        print(\"Second Line is Incorrect.  Expected:\", line_2)\r\n    \r\n    return score\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 330, "problem_id": "lsn3_arrivaltime", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite an algorithm that prompts the user for a distance to travel (in miles)\nand a speed (in mph) and outputs time of arrival in hours.\n\n  \n**For Example:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 72  \n60 | 1282  \n85 | 120.5  \n59.2  \nOutput | 1.2 | 15.0823 | 2.0355  \n  \n**Note: Output needs to match the examples.**\n\n\n", "code": "\ndistance = float(input(\"Enter the distance to travel in miles: \"))\nspeed = float(input(\"Enter the speed in mph: \"))\n\ntime = distance / speed\n\nprint(round(time, 4))\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    distance = round(random.random() * 1000, 1)\r\n    speed = round(random.random() * 60, 1)\r\n    time = distance / speed\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn3_arrivaltime.py\", [distance, speed])\r\n    \r\n    if autograder.equals(output, time):\r\n        print(\"PASSED!\")\r\n        return 100\r\n    else:\r\n        print(\"Value doesn't match.\\nExpected: \" + str(time))\r\n        return 0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 331, "problem_id": "lsn24_starmap", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a table that describes a simple night sky as a\n2D list in your code template.  This list is an exact mapping to the picture\nbelow.  The 2D list (`star_map`) is populated with characters representing the\nlocations of various astronomical entities (stars, planets, etc).  For\nexample, you can see in the template that the very first item is 'M', since\nthere is a Moon in the top left corner.\n\n\n\nWrite a program that gets two values from the user in the following order:\n\n  1. The horizontal index of the cell in the star map to search (e.g. 0 for the top row)\n  2. The vertical index of the cell in the star map to search (e.g. 0 for the leftmost column)\n\n\n\nFinally, **print  ** ****out the word associated with the code in the table at\nthat particular cell.\n\n`S = Star; St = Satellite; M = Moon; P = Planet; _ = Nothing`\n\n\n\n**EXAMPLES:**\n\n\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \n**Input** |\n\n0\n\n0\n\n|\n\n0\n\n1\n\n|\n\n4\n\n1  \n  \n**Output** | Moon | Nothing | Satellite  \n  \n* * *\n\n\n\n\n# AUTOGRADER IMPORT REMOVED\n\n# ---------------------------------------------------------------------\n# Lab: Star Map\n# Course: CS110, Spring 2022\n# ---------------------------------------------------------------------\n\n# ---------------------------------------------------------------------\n# Problem Statement: Write a Python program that prints what is found \n#  at a specific location of the star map represented below.\n#  NOTE: See the Canvas Problem Statement for additional details.\n# ---------------------------------------------------------------------\n\n#DO NOT TOUCH THIS LIST!\nstar_map =   [['M', '_', '_', '_', 'S'],\n              ['S', 'M', '_', '_', 'P'],\n              ['S', '_', '_', 'P', 'M'],\n              ['P', 'P', 'S', '_', '_'],\n              ['M', 'St', '_', 'St', '_']]\n#  S = Star; St = Satellite; M = Moon; P = Planet; _ = Nothing\n\n#Your code goes here.", "code": "\n# Get the user input for horizontal and vertical indices\nhorizontal_index = int(input(\"Enter the horizontal index: \"))\nvertical_index = int(input(\"Enter the vertical index: \"))\n\n# Use the indices to access the corresponding cell in the star map\nvalue = star_map[vertical_index][horizontal_index]\n\n# Print out the value associated with the code in the table\nprint(value)\n", "testcase": "from cs110 import autograder\r\nimport random, math, traceback\r\n\r\nSTUDENT_SOLUTION_FILENAME = \"lsn24_starmap.py\"\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    test_cases = dict()\r\n    test_cases[(0,0)] = \"Moon\" \r\n    test_cases[(0,1)] = \"Nothing\"   \r\n    test_cases[(4,1)] = \"Satellite\"\r\n    test_cases[(1,4)] = \"Planet\"\r\n    test_cases[(3,1)] = \"Planet\"\r\n    test_cases[(2,4)] = \"Moon\"\r\n    test_cases[(2,2)] = \"Nothing\"\r\n    test_cases[(4,3)] = \"Satellite\"\r\n    test_cases[(0,4)] = \"Star\"\r\n    test_cases[(3,2)] = \"Star\"\r\n    \r\n    \r\n    test_case_input = list(test_cases.keys())\r\n    case_order = list(range(len(test_case_input)))\r\n    #random.shuffle(case_order)\r\n    \r\n    score = 0\r\n    i = 1\r\n    \r\n    for idx in case_order:\r\n        print('\\n' + '='*30)\r\n        print(\"Test Case:\", i)\r\n        print('='*30)\r\n        \r\n        try: \r\n            output, error = autograder.run_script(STUDENT_SOLUTION_FILENAME, test_case_input[case_order[idx]])        \r\n            expected_output = test_cases[test_case_input[case_order[idx]]]\r\n                        \r\n            test_case_score = 0\r\n            \r\n            output = output.strip()\r\n            \r\n            if len(output.split('\\n')) == 0:\r\n                print(\"No Output Detected. Expected:\")\r\n                print(expected_output)\r\n            elif len(output.split('\\n')) > 1:\r\n                print(\"Your program printed too many lines. Expected:\")\r\n                print(expected_output)\r\n            elif output.strip() == expected_output.strip():\r\n                print(\"CORRECT!\")\r\n                test_case_score = 100.0 / len(test_cases)\r\n            else:\r\n                print(\"INCORRECT. Expected:\")\r\n                print(expected_output)\r\n            \r\n            score += test_case_score\r\n            i += 1\r\n        except Exception as e:\r\n            score += 0\r\n            i += 1\r\n            \r\n            print(\"An ERROR Occured:\", e)\r\n            print(traceback.print_exc())    \r\n\r\n\r\n    return score\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':\r\n    try:\r\n        result = test_passed()\r\n    except Exception as e:\r\n        result = 0\r\n        print(\"An ERROR Occured:\", e)\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 332, "problem_id": "lsn2_printpractice", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nThe template file contains various words/phrases that you need to print out\n(exactly as written) using Python's `print()` function. For example:\n\n  1. Print the phrase \"Welcome to Computer Science 110!\"\n\n  2. Print the result to the following math expression: (640 * 480 * 24) / 8\n\n  3. etc (see the template for details)\n\nEach print statement should be written directly below the corresponding\ncomment. While you can technically \"cheat\" on this problem, we encourage you\nto practice all the various ways that you can use the `print` function. You\nwill thank us later!\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\n\r\ndef test_passed():\r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn2_printpractice.py\", [])\r\n\r\n    student_output = output.strip().split('\\n')\r\n    expected_output = ['Welcome to Computer Science 110!', '921600.0', 'Liam is 8 years old', 'F-15  Eagle', 'F-16  Fighting Falcon', 'B-2   Spirit', 'C-141 Starlifter']\r\n    num_matches = autograder.compare_strings(student_output, expected_output)\r\n    \r\n    return round(num_matches * (100 / len(expected_output)), 1)\r\n\r\n\r\n# Testbench (to be run in an IDE)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 333, "problem_id": "lsn2_parking", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nWrite a program that prints a formatted \"No parking\" sign as shown below. Note\nthe first line has two leading spaces. For ALL labs, end with newline (unless\notherwise stated).\n\n    \n    \n     NO PARKING  \n    1:00 - 5:00 a.m.  \n      \n    \n\n\n", "code": "", "testcase": "from cs110 import autograder\r\n\r\ndef test_passed():\r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn2_parking.py\", [])\r\n        \r\n    if output.startswith(\"  NO PARKING\\n\"):\r\n        if output == \"  NO PARKING\\n1:00 - 5:00 a.m.\\n\" or \"  NO PARKING\\n1:00 - 5:00 a.m.\":\r\n            print(\"Passed!\")\r\n            return 100\r\n        else:\r\n            print(\"Something is wrong with the second line.\")\r\n            return 50\r\n    else:\r\n        print(\"Something is wrong with the first line.\")\r\n        return 0\r\n\r\n# Testbench (to be run in an IDE)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 334, "problem_id": "lsn2_ascii", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a Python program that prints out a cat:\n\n    \n    \n    /\\ /\\\n     o o\n     = =\n     ---  \n      \n    \n\n_Hint: A backslash  `\\` in a string acts as an escape character, such as with\na newline_ `\\n`.  _So, to print an actual backslash, escape that backslash by\nprepending another backslash. Ex: The following prints a single backslash:_\n`print('\\\\')`\n\n\n", "code": "\nprint(\"  /\\\\  /\\\\\")\nprint(\" o  o\")\nprint(\" =  =\")\nprint(\" ---\")\n", "testcase": "from cs110 import autograder\r\n\r\ndef test_passed():\r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn2_ascii.py\", [])\r\n    \r\n    lines = output.split('\\n')\r\n    \r\n    # Checks for the Cat\r\n    if lines[0].rstrip() == '/\\\\   /\\\\':\r\n        #test_feedback.write('1')\r\n        if lines[1].rstrip() == '  o o':\r\n            #test_feedback.write('2')\r\n            if lines[2].rstrip() == ' =   =':\r\n                #test_feedback.write('3')\r\n                if lines[3].rstrip() == '  ---':\r\n                    #test_feedback.write('4')\r\n                    print('Cat Looks Good!\\n')\r\n                    return 100\r\n                else:\r\n                    print('Problem in the fourth line of the cat') \r\n            else:\r\n                print('Problem in the third line of the cat')  \r\n        else:\r\n            print('Problem in the second line of the cat')  \r\n    else:\r\n        print('Problem in the first line of the cat')\r\n    \r\n    return 0\r\n\r\n# Testbench (to be run in an IDE)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 335, "problem_id": "lsn17_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with the template code for an animation.  Study the\ncode for a minute, then perform the following tasks:\n\n  * In the `draw()` function, add one line of code that draws a circle.  \nFor the center, use the `ball_x` and `ball_y` variables defined in the\ntemplate.  \n  \n\n  * In the `update() function`, add code that modifies the value of `ball_x` and `ball_y`.  \nFor example, add 1 to the `ball_x` and subtract 1 from `ball_y` every time\n`update()` is called. What do you expect to happen? Does what actually happens\nmatch your expectations?\n\n\n\n\n", "code": "\nimport pygame\nimport sys\n\n# Initialize the game\npygame.init()\n\n# Set the width and height of the screen [width,height]\nsize = [700, 500]\nscreen = pygame.display.set_mode(size)\n\npygame.display.set_caption(\"Animated Ball\")\n\n# Set the background color\nbackground = pygame.Surface(screen.get_size())\nbackground.fill((255, 255, 255))\nbackground = background.convert()\n\n# Set up the clock for a consistent frame rate\nclock = pygame.time.Clock()\n\n# Variables for the ball's position\nball_x = 50\nball_y = 50\n\n# Function to draw the ball\ndef draw():\n    # Draw the background\n    screen.blit(background, (0, 0))\n    \n    # Draw a circle at the current ball position\n    pygame.draw.circle(screen, (0, 0, 255), (ball_x, ball_y), 10)\n    \n    # Update the screen\n    pygame.display.flip()\n\n# Function to update the ball's position\ndef update():\n    global ball_x, ball_y\n    \n    # Modify the ball's position\n    ball_x += 1\n    ball_y -= 1\n\n# -------- Main Program Loop -----------\nwhile True:\n    # --- Main event loop\n    for event in pygame.event.get(): \n        if event.type == pygame.QUIT: \n            pygame.quit()\n            sys.exit()\n\n    # --- Game logic should go here\n    \n    # Update the ball's position\n    update()\n    \n    # --- Drawing code should go here\n    \n    # Draw the ball\n    draw()\n    \n    # --- Limit to 60 frames per second\n    clock.tick(60)\n\n# Close the window and quit.\npygame.quit()\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0.0\r\n    \r\n    if autograder.code_compiles(\"lsn17_skill1.py\"):\r\n        file = open(\"lsn17_skill1.py\", \"r\")\r\n        file_contents = file.read()\r\n        \r\n        if \"draw_circle(\" in file_contents:\r\n            print(\"draw_circle called\")\r\n            score += 50\r\n        else:\r\n            print(\"draw_circle does not appear to be called.  You need to call it in the draw() function\")\r\n            \r\n        if file_contents.count(\"ball_x\") + file_contents.count(\"ball_y\") > 5:\r\n            print(\"Looks like you are using ball_x and/or ball_y\")\r\n            score += 50\r\n        else:\r\n            print(\"Make sure you are changing the value of ball_x and ball_y in update().\")\r\n            \r\n    else:\r\n        print(\"There appears to be an error in your python Script that is preventing it from running\")\r\n    \r\n    print(\"\\nThank you for your submission.  Your instructor will let you know if there is an issue.\")\r\n    return score        \r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 336, "problem_id": "lsn10_in_circle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a function that determines if a point is within a circle. You will\nname your function `in_circle()`. It has five parameters:\n\n  1. The coordinates of the point that is to be tested (x, y)\n  2. The center of a circle (cir_x, cir_y)\n  3. The radius of the circle (radius)\n\n The `in_circle()` function will return **True** if the point is on or inside\nthe circle, and **False** otherwise.\n\n**IMPORTANT:  \n** You are encouraged to write code to test your function. However, when you\ntest against the server, only include the code for the function itself (you\ncan comment out your test code).\n\n\n", "code": "", "testcase": "import lsn10_in_circle\nfrom cs110 import autograder\nimport random, math, traceback\n\nNUM_SUBTESTS = 5\n   \ndef soln(x, y, cir_x, cir_y, radius):\n    distance = math.sqrt((cir_x - x)**2 + (cir_y - y)**2)\n    return distance <= radius\n\ndef test_passed():\n    \n    passed = 0\n    for i in range(NUM_SUBTESTS):\n        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')\n        if i == 0:\n            x = 6.04\n            y = 2.43\n            cir_x = 43.4\n            cir_y = 52.2\n            radius = 74.1\n        else:\n            x = random.random() * 10.0\n            y = random.random() * 10.0\n            cir_x = random.random() * 100.0\n            cir_y = random.random() * 100.0\n            radius = random.random() * 100.0\n        #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))\n        try:\n            if lsn10_in_circle.in_circle(x, y, cir_x, cir_y, radius) == soln(x, y, cir_x, cir_y, radius):\n                print(\"CORRECT!\")\n                passed += 1\n            else:\n                print('INCORRECT:  in_circle(%f, %f, %f, %f, %f) incorrectly returned %s' % (x, y, cir_x, cir_y, radius, lsn10_in_circle.in_circle(x, y, cir_x, cir_y, radius)))\n        except Exception as e:\n            print()\n            print(\"Your program encountered an ERROR:\", e)\n            print(traceback.print_exc())        \n    \n    return (100 / NUM_SUBTESTS) * passed\n\n\n# Runs your code in an IDE (for testing purposes)\nif __name__ == '__main__':    \n    result = test_passed()\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 337, "problem_id": "lsn10_distance", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a function that computes the distance between two points. You will\nname your function `dist_points`. It has four parameters, the cordinates of\nthe two points as `x1, y1, x2, y2`. The `dist_points()` function will return\nthe distance between the two points as a floating point number.\n\n**IMPORTANT:  \n** You are encouraged to write code to test your function. However, when you\ntest against the server, only include the code for the function itself (you\ncan comment out your test code).\n\n\n", "code": "\nimport math\n\ndef dist_points(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\n# Testing the function\nprint(dist_points(0, 0, 3, 4))  # Output: 5.0\nprint(dist_points(1, 1, 5, 5))  # Output: 5.656854249492381\nprint(dist_points(0, 0, 0, 0))  # Output: 0.0\nprint(dist_points(-1, -1, -5, -5))  # Output: 5.656854249492381\n", "testcase": "import random, math, traceback\r\n\r\ntry:\r\n    from lsn10_distance import dist_points\r\nexcept ImportError:\r\n    print(\"ERROR: The dist_points() function is missing or incorrect.\")\r\n    print(\"Check your spelling of the function.\")\r\nfrom cs110 import autograder\r\n\r\n\r\n\r\nNUM_SUBTESTS = 5\r\n\r\ndef soln(x1, y1, x2, y2):\r\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\r\n\r\ndef test_passed():\r\n    \r\n    passed = 0\r\n    \r\n    print(\"Feedback:\")\r\n    \r\n    for i in range(NUM_SUBTESTS):\r\n        x1 = round(random.uniform(-10, 10), 1)\r\n        y1 = round(random.uniform(-10, 10), 1)\r\n        x2 = round(random.uniform(-10, 10), 1)\r\n        y2 = round(random.uniform(-10, 10), 1)\r\n        \r\n        print('\\n' + '-'*50)\r\n        print('Test %d of %d, dist_points(%1.1f, %1.1f, %1.1f, %1.1f): ' % (i+1 , NUM_SUBTESTS, x1, y1, x2, y2))\r\n        print('-'*50)\r\n\r\n        try:\r\n            expected_solution = soln(x1, y1, x2, y2)\r\n            \r\n            if autograder.equals(dist_points(x1, y1, x2, y2), expected_solution):\r\n                print(\"PASSED!\")\r\n                passed += 1\r\n            else:\r\n                print('FAILED: incorrectly returned %1.5f' % (dist_points(x1, y1, x2, y2)))\r\n                print('Expected value to return:  %1.5f' % expected_solution)\r\n        except Exception as e:\r\n            print(\"Your program encountered an ERROR:\", e)\r\n            print(traceback.print_exc())\r\n    \r\n        \r\n    return round(100 / NUM_SUBTESTS, 1) * passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 338, "problem_id": "lsn10_circle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a function that computes the area of a circle. You will name your\nfunction `area_circle`. It has one parameter, the radius of the circle,\n`radius`. The `area_circle()` function will return the area of the circle.\n\n**IMPORTANT:  \n** You are encouraged to write code to test your function. However, when you\ntest against the server, only include the code for the function itself (you\ncan comment out your test code).\n\n\n", "code": "\nimport math\n\ndef area_circle(radius):\n    return math.pi * radius**2\n", "testcase": "import lsn10_circle\r\nfrom cs110 import autograder\r\nimport random, math, traceback\r\n\r\nNUM_SUBTESTS = 5\r\n\r\n# Helper method to see if a numeric value is within a specified delta\r\ndef soln(radius):\r\n    return math.pi * radius * radius\r\n\r\ndef test_passed():\r\n    \r\n    passed = 0\r\n    \r\n    print(\"Feedback:\")\r\n    \r\n    for i in range(NUM_SUBTESTS):\r\n        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')\r\n        radius = random.random() * 100.0\r\n        try:\r\n            if autograder.equals(lsn10_circle.area_circle(radius), soln(radius)):\r\n                print(\"CORRECT!\")\r\n                passed += 1\r\n            else:\r\n                print('area_circle(%d) incorrectly returned' % (radius), lsn10_circle.area_circle(radius))\r\n        except Exception as e:\r\n            print()\r\n            print(\"Your program encountered an ERROR:\", e)\r\n            print(traceback.print_exc())        \r\n        \r\n    return round(100 / NUM_SUBTESTS, 1) * passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 339, "problem_id": "lsn10_asteroids", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\n\"Asteroids\" was an arcade game created in 1979 by Atari, Inc. In the game, the\nplayer is given control of a spaceship that has the ability to shoot bullets.\nThe player is then placed in a field of floating rocks, and is tasked with\ndestroying them without running into them.\n\nIn this lab, you will write a \"collision detection\" function that will be used\nby the game to determine if the player's ship has hit a rock. To make this\nsimple, assume that an imaginary circle extends from the center of the\nasteroid and the player's ship (see below image). If the two circles ever\noverlap one another, then a collision has occurred. (NOTE: There are more\naccurate ways to detect a collision. [Click here if you want to learn more\n(Links to an external site.)](https://bell0bytes.eu/basic-collision-\ndetection/)).\n\n![](https://bell0bytes.eu/content/images/2019/03/spaceShipAsteroid.png)\n\nYour function, which you will name `detect_collision()` should have six\nparameters: the (x, y) coordinates of the center of player's ship, the ship's\nradius, the (x, y) coordinates of the center of an asteroid, and the\nasteroid's radius. Your function will return `True` if the player's ship has\nhit the asteroid, and `False` otherwise.\n\n**HINT: _  \n_** _You may want to copy and paste the_  `dist_points`  _function you created\nearlier. It's almost as if we are trying to demonstrate the importance of\nreusable functions . . ._\n\n**IMPORTANT:  \n** You are encouraged to write code to test your function. However, when you\ntest against the server, only include the code for the function itself (you\ncan comment out your test code).\n\n\n", "code": "\nimport math\n\ndef detect_collision(ship_x, ship_y, ship_radius, asteroid_x, asteroid_y, asteroid_radius):\n    distance = math.sqrt((asteroid_x - ship_x)**2 + (asteroid_y - ship_y)**2)\n    if distance <= ship_radius + asteroid_radius:\n        return True\n    else:\n        return False\n", "testcase": "from cs110 import autograder\r\nimport random, math, traceback\r\nimport lsn10_asteroids\r\n\r\n\r\ndef soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):\r\n    distance = math.sqrt((ship_x - asteroid_x)**2 + (ship_y - asteroid_y)**2)\r\n    return distance < asteroid_r + ship_r\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    NUM_TESTS = 4\r\n    num_tests_passed = 0\r\n    \r\n    print(\"Feedback:\")\r\n    score = 0\r\n        \r\n    if \"dist_points\" in dir(lsn10_asteroids):\r\n        score += 20\r\n        print(\"dist_points function found.\")\r\n    else:\r\n        print(\"dist_points function not found.  Use your previous dist_points work!\")\r\n        score += 20\r\n        \r\n    for i in range(NUM_TESTS):       \r\n        if i == 0:\r\n            ship_x = 2.3\r\n            ship_y = 0.2\r\n            ship_r = 3\r\n            asteroid_x = -4\r\n            asteroid_y = 3.4\r\n            asteroid_r = 6\r\n        else:\r\n            ship_x = round(random.uniform(-50, 50), 1)\r\n            ship_y = round(random.uniform(-50, 50), 1)\r\n            ship_r = 3\r\n            asteroid_x = round(random.uniform(-50, 50), 1)\r\n            asteroid_y = round(random.uniform(-50, 50), 1)\r\n            asteroid_r = 6\r\n        \r\n        print('-'*60)\r\n        print('Test %d/%d: detect_collision(%2.1f, %2.1f, %2.1f, %2.1f, %2.1f, %2.1f)' % (i+1 , NUM_TESTS, ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r))\r\n        print('-'*60)\r\n\r\n        try:\r\n            #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))\r\n            if lsn10_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r) == soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):\r\n                print(\"CORRECT\")\r\n                score += 20\r\n            else:\r\n                print('detect_collision(%f, %f, %f, %f, %f, %f) incorrectly returned %s' % (ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r, lsn10_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r)))\r\n        except Exception as e:\r\n            print(\"Your program encountered an ERROR:\", e)\r\n            print(traceback.print_exc())\r\n    \r\n    return score\r\n            \r\n            \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 340, "problem_id": "Lists3_unpopularnames", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nThis lab makes use of the names.csv dataset, which provides a list of over\n1200+ names that were given to children in 2011. Here is a typical line from\nthe file:\n\n\n\n`FEMALE, HISPANIC, GIA, 21`\n\n\n\n  \nEach position in the line (separated by a comma) represents a different \"data\nelement\". Here is a key for your reference:\n\nGender | Ethnicity  | Name |  Count  \n(i.e., Number of Children Assigned this Name)  \n---|---|---|---  \nFEMALE | HISPANIC  | GIA | 21  \n  \n  \n  \nWrite a Python algorithm that gets a gender (all CAPs, \"MALE\" or \"FEMALE\") and\na number, `X`, from the user, and prints out the X least popular names for\nthat gender, starting with the least popular and working up.\n\nFor example, if the user types `MALE` and `2`, and you determine that the two\nleast popular names are Bill and Ted, your program should output:\n\n    \n    \n    Bill  \n    Ted  \n      \n    \n\n\n\n**HINTS (really really important):**\n\n  * Remember that you can use the `sort()` function to sort a list in ascending order. For example, if your list is named `my_list`, you can sort it by typing:  \n`my_list.sort()`\n\n  * `sort()` will work on 2D lists. It will sort by the first column, and then look at the 2nd column in the event of a tie. Think about this when you are building your 2D list.\n\n\n\n\n", "code": "\nimport csv\n\n# Read the data from the file\ndef read_data():\n    data = []\n    with open('names.csv', 'r') as file:\n        reader = csv.reader(file)\n        for row in reader:\n            data.append(row)\n    return data\n        \n# Get the X least popular names for the given gender\ndef get_least_popular_names(data, gender, x):\n    names = []\n    for row in data:\n        if row[0] == gender:\n            names.append((row[2], int(row[3])))  # (name, count)\n    names.sort(key=lambda x: x[1])  # Sort by count in ascending order\n    return [name[0] for name in names[:x]]  # Return only the names\n\n# Get user input for gender and X\ngender = input(\"Enter gender (MALE or FEMALE): \")\nx = int(input(\"Enter the number of least popular names to display: \"))\n\n# Read the data from the file\ndata = read_data()\n\n# Get the X least popular names\nleast_popular_names = get_least_popular_names(data, gender, x)\n\n# Print the least popular names\nfor name in least_popular_names:\n    print(name)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nexpected_output_male = [\"ALDO\", \"ALIJAH\", \"ALLAN\", \"ANGEL\", \"ARTURO\", \"AUGUSTUS\", \"BENNETT\", \"BERISH\", \"CADEN\", \"CHRIS\", \"CODY\", \"COREY\", \"DERRICK\", \"DEVON\", \"DONOVAN\", \"EASON\", \"EDWARD\", \"ELLIS\", \"GIOVANI\", \"HASSAN\",]\r\nexpected_output_female = [\"ABBY\", \"AIZA\", \"ALISHA\", \"ANGELICA\", \"ANGIE\", \"ARIANNY\", \"ARIELA\", \"ATARA\", \"AUBREY\", \"AUTUMN\", \"AYLA\", \"BIANCA\", \"BONNIE\", \"BRIANNY\", \"CASSANDRA\", \"CELIA\", \"CHAVY\", \"CHEYENNE\", \"CORA\", \"CRISTINA\"]\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    if (random.random() > 0.5):\r\n        gender = \"MALE\"\r\n        expected_output = expected_output_male\r\n    else:\r\n        gender = \"FEMALE\"\r\n        expected_output = expected_output_female\r\n        \r\n    num_to_print = random.randint(5, 20)\r\n    output, error = autograder.run_script(\"Lists3_unpopularnames.py\", [gender, num_to_print])\r\n    lines = output.strip().split('\\n')\r\n    num_matches = autograder.compare_strings(lines, expected_output[:num_to_print])\r\n    \r\n    print()\r\n    \r\n    if len(lines) == 0:\r\n        return 0\r\n    elif len(lines) > len(expected_output[:num_to_print]):\r\n        print(\"Your program printed more lines than we expected\")\r\n        return round(100 * num_matches / len(lines), 1)\r\n    else:\r\n        return round(100.0/len(expected_output[:num_to_print]) * num_matches, 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 341, "problem_id": "Lists3_popularnames", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a Python program that takes two inputs and produces two outputs. NOTE:\nThis problem does not require creating an additional list to solve.\n\nThe inputs from the user are:\n\n  1. A gender, a string which will be MALE or FEMALE\n  2. A threshold number for the number of times that a name was used.\n\nYour program will compare the information from the user to the names.csv\ndataset, and output two statistics as output:\n\n  1. The count of the number of names that were used above the threshold given for the provided gender\n  2. The total count of children with the high usage names and the specified gender. In other words, the sum of the number of children given names above the threshold value from input 2.\n\n\n\nThis problem makes use of the names.csv dataset, which provides a list of over\n1200+ names that were given to children in 2011. Here is a typical line from\nthe file:\n\n`FEMALE, HISPANIC, GIA, 21`\n\nEach position in the line (separated by a comma) represents a different \"data\nelement\". Here is a key for your reference:\n\nGender | Ethnicity | Name | Count  \n(i.e., Number of Children Assigned this Name)  \n---|---|---|---  \nFEMALE | HISPANIC | GIA | 21  \n  \n\n\n**EXAMPLES:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInputs |\n\nMALE\n\n190\n\n|\n\nFEMALE\n\n120\n\n|\n\nMALE\n\n80  \n  \nOutput |\n\n1\n\n224\n\n|\n\n15\n\n2670\n\n|\n\n23\n\n2740  \n  \n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math, traceback\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    test_cases = dict()\r\n    test_cases[(\"FEMALE\", 120)] = \"15\\n2670\"\r\n    test_cases[(\"FEMALE\", 98)] = \"25\\n3742\"   \r\n    test_cases[(\"MALE\", 190)] = \"1\\n224\"\r\n    test_cases[(\"MALE\", 130)] = \"7\\n1149\"\r\n\r\n    \r\n    test_case_input = list(test_cases.keys())\r\n    case_order = list(range(len(test_case_input)))\r\n    \r\n    score = 0\r\n    i = 1\r\n    \r\n    for idx in case_order:\r\n        print('\\n' + '='*30)\r\n        print(\"Test Case:\", i)\r\n        print('='*30)\r\n        \r\n        try: \r\n            output, error = autograder.run_script(\"Lists3_popularnames.py\", test_case_input[case_order[idx]])        \r\n            expected_output = test_cases[test_case_input[case_order[idx]]]\r\n            \r\n            lines = output.strip().split('\\n')\r\n            expected_line_1 = expected_output.strip().split('\\n')[0]\r\n            expected_line_2 = expected_output.strip().split('\\n')[1]\r\n            \r\n            test_case_score = 0\r\n            if len(lines) == 0:\r\n                print(\"No Output Detected. Expected:\")\r\n                print(expected_output)\r\n            elif len(lines) > len(expected_output.split('\\n')):\r\n                print(\"Your program printed too many lines. Expected:\")\r\n                print(expected_output)\r\n            elif len(lines) == 2 and expected_line_1 == lines[0] and expected_line_2 == lines[1]:\r\n                print(\"CORRECT!\")\r\n                test_case_score = 100.0 / len(test_cases)\r\n            elif expected_line_1 in lines:\r\n                print(\"PARTIALLY CORRECT! Count of names above threshold right. Expected:\")\r\n                test_case_score = 100.0 / len(test_cases) / 2\r\n                print(expected_output)\r\n            elif expected_line_2 in lines:\r\n                print(\"PARTIALLY CORRECT! Total number of children named found. Expected:\")\r\n                test_case_score = 100.0 / len(test_cases) / 2\r\n                print(expected_output)\r\n            else:\r\n                print(\"INCORRECT. Expected:\")\r\n                print(expected_output)\r\n            \r\n            score += test_case_score\r\n            i += 1\r\n        except Exception as e:\r\n            score += 0\r\n            i += 1\r\n            \r\n            print(\"An ERROR Occured:\", e)\r\n            print(traceback.print_exc())    \r\n\r\n\r\n    return score\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':\r\n    try:\r\n        result = test_passed()\r\n    except Exception as e:\r\n        result = 0\r\n        print(\"An ERROR Occured:\", e)\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 342, "problem_id": "Lists3_lowvolume", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a Python algorithm that opens the file and outputs the lowest (minimum)\ntraffic count.  Then, output the name of all streets whose traffic count is\nwithin 2500 (inclusive) of the minimum.\n\n\n\nThis program makes use of the traffic.csv dataset. Here is a typical line from\nthe file:\n\n\n\n`691,6067 North,Kimball Ave,8/15/06,15600,North Bound:7500/South Bound:8100`\n\n\n\nAs you will recall from class, each position in the line (separated by a\ncomma) represents a different \"data element\". Here is a key for your\nreference:\n\nID | Address | Street | Sample Date | Total # of Passing Vehicles | # of\nVehicles by Direction  \n---|---|---|---|---|---  \n691 | 6067 North | Kimball Ave | 8/15/06 | 15600 | North Bound:7500/South\nBound:8100  \n  \n  \n  \nOutput one street name per line.\n\n\n\nFor example, if the min traffic count is 500, and the roads within 2500 of\nthis value are \"Road A\", \"Road B\", \"Road C\", then your program should output:\n\n    \n    \n    500  \n    Road A  \n    Road B  \n    Road C\n\n\n\n\n", "code": "\nimport csv\n\ndef find_lowest_traffic(file_name):\n    with open(file_name, 'r') as file:\n        reader = csv.reader(file)\n        next(reader) # skip the header\n        traffic_data = []\n        for row in reader:\n            traffic_count = int(row[4])\n            traffic_data.append((row[2], traffic_count))\n        \n        min_traffic = min(traffic_data, key=lambda x: x[1])[1]\n        related_streets = [street for street, traffic in traffic_data if abs(traffic - min_traffic) <= 2500]\n        \n        print(min_traffic)\n        for street in related_streets:\n            print(street)\n\nfind_lowest_traffic('traffic.csv')\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nexpected_output = [\r\n\"700\",\r\n\"Harbor Ave\",\r\n\"Woodlawn Ave\",\r\n\"Root St\",\r\n\"Calumet Ave\",\r\n\"Financial PL\",\r\n\"16th St\",\r\n\"Racine Ave\",\r\n\"60th St\",\r\n\"Wentworth Ave\",\r\n\"Parnell Ave\",\r\n\"Ashland Ave\",\r\n\"Federal St\",\r\n\"Hamlin Ave\",\r\n\"Pitney Ct\",\r\n\"109th St\",\r\n\"Loomis St\",\r\n\"Harrison St\",\r\n\"24th St\",\r\n\"La Salle St\",\r\n\"83rd Pl\",\r\n\"Homan Ave\"]\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    \r\n    output, error = autograder.run_script(\"Lists3_lowvolume.py\", [])    \r\n    lines = output.split('\\n')\r\n    \r\n    if \"700\" in lines[0]:\r\n        score += 50.0\r\n    \r\n        lines = set(lines[1:])\r\n        matches = (len(lines.intersection(expected_output)))\r\n        score += round((matches/21)*50.0,1)\r\n    else:\r\n        lines = set(lines)\r\n        matches = (len(lines.intersection(expected_output)))\r\n        score += round((matches/22)*50.0,1)\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 343, "problem_id": "Lists3_averagetraffic", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nThis program makes use of the traffic.csv dataset. Here is a typical line from\nthe file:\n\n\n\n`691,6067 North,Kimball Ave,8/15/06,15600,North Bound:7500/South Bound:8100`\n\n\n\n  \nAs you will recall from class, each position in the line (separated by a\ncomma) represents a different \"data element\". Here is a key for your\nreference:\n\nID | Address | Street | Sample Date | Total # of Passing Vehicles  | # of\nVehicles by Direction  \n---|---|---|---|---|---  \n691 | 6067 North | Kimball Ave | 8/15/06 | 15600 | North Bound:7500/South\nBound:8100  \n  \n  \n  \nWrite a Python algorithm that opens the file and outputs the # of roads whose\ntraffic count is greater than (or equal to) the average.  For example, if you\ndetermine that the answer is 20, your program should output:\n\n    \n    \n    20\n\n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nexpected_output = [\"525\"]\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    output, error = autograder.run_script(\"Lists3_averagetraffic.py\", [])\r\n    lines = output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_output)\r\n       \r\n    return round(num_matches * (100.0 / len(expected_output)), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 344, "problem_id": "Lists2_population", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nYou are being provided with a simple 2D list that contains the names and\npopulations of the 10 largest cities in the world. This list (which is called\n`cities_table`) can be logicially visualized as the following:\n\n\n\n**City** |  **Population**  \n---|---  \nTokyo | 37,435,191  \nDelhi | 29,399,141  \nShanghai  | 25,647,805  \nSao Paulo  | 21,846,507  \nMexico City  | 21,671,908  \nCairo | 20,484,965  \nDhaka | 20,283,552  \nMumbai | 20,185,064  \nBeijing  | 20,035,455  \nOsaka | 19,222,665  \n  \n  \nWrite a Python program that gets a population from the user, and prints the\nnames of all the cities whose populations are at least that big (keep the same\norder as in the 2D list). Print each city's name on a separate line.\n\n\n\n**EXAMPLES:**\n\n| Example 1 | Example 2  \n---|---|---  \nInput | 25000000 | 30000000  \nOutput | Tokyo  \nDelhi  \nShanghai | Tokyo\n\n\n", "code": "\ncities_table = [\n    [\"Tokyo\", \"37,435,191\"],\n    [\"Delhi\", \"29,399,141\"],\n    [\"Shanghai\", \"25,647,805\"],\n    [\"Sao Paulo\", \"21,846,507\"],\n    [\"Mexico City\", \"21,671,908\"],\n    [\"Cairo\", \"20,484,965\"],\n    [\"Dhaka\", \"20,283,552\"],\n    [\"Mumbai\", \"20,185,064\"],\n    [\"Beijing\", \"20,035,455\"],\n    [\"Osaka\", \"19,222,665\"]\n]\n\npopulation = int(input(\"Enter a population: \"))\n\nfor city in cities_table:\n    city_population = int(city[1].replace(\",\", \"\"))\n    if city_population >= population:\n        print(city[0])\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\ndef solution(population):\r\n    result = ''\r\n    \r\n    cities_table = [\r\n        ['Tokyo', 37435191],\r\n        ['Delhi', 29399141],\r\n        ['Shanghai', 25647805],\r\n        ['Sao Paulo', 21846507],\r\n        ['Mexico City', 21671908],\r\n        ['Cairo', 20484965],\r\n        ['Dhaka', 20283552],\r\n        ['Mumbai', 20185064],\r\n        ['Beijing', 20035455],\r\n        ['Osaka', 19222665]]\r\n    \r\n    for row in cities_table:\r\n        if row[1] >= population:\r\n            result += row[0] + '\\n'\r\n    \r\n    return result.strip()\r\n\r\n\r\ndef test_passed():\r\n    \r\n    random_population_size = random.randint(19, 30) * 1000000\r\n    \r\n    output, error = autograder.run_script(\"Lists2_population.py\", [random_population_size])\r\n    answer = solution(random_population_size)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, answer.strip().split('\\n'))\r\n    \r\n    if num_matches == len(lines):\r\n        print(\"\\nCORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"\\nOne or more outputs were incorrect.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 345, "problem_id": "Lists2_movies", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nWrite a Python function called `get_movies` that takes three parameters:\n\n  * A two-dimensional list containing movie titles and other stats (see table below for an example)\n  * A rating (e.g., \"PG\", \"R\")\n  * A run time (in minutes)\n\n\n\nTitle | Release Year | Rating | Run Time (minutes)  \n---|---|---|---  \nStar Wars: A New Hope | 1977 | PG | 121  \nStar Trek: The Motion Picture | 1979 | G | 132  \nIndiana Jones: Raiders of the Lost Ark | 1989 | PG | 115  \n  \n  \nYour function should return the number of movies that have the specified\nrating, and run for at least the number of minutes specified.\n\n\n\n**EXAMPLE:**  \nIf the above table were contained within a list called `movie_table`, then\n`get_movies(movie_table, \"PG\", 100)` should return 2.\n\n\n\n\n", "code": "\ndef get_movies(movie_table, rating, run_time):\n    count = 0\n    for movie in movie_table:\n        if movie[2] == rating and movie[3] >= run_time:\n            count += 1\n    return count\n", "testcase": "from cs110 import autograder\r\nimport random\r\ntry:\r\n    import Lists2_movies\r\nexcept:\r\n    import lists2_movies as Lists2_movies\r\n\r\ndef solution(movies_table, rating, runtime):\r\n    count = 0\r\n    \r\n    for row in movies_table:\r\n        if row[2] == rating and row[3] >= runtime:\r\n            count += 1\r\n    \r\n    return count\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    ratings = ['PG', 'PG-13', 'R']\r\n    num_passed = 0\r\n    \r\n    for rating in ratings:\r\n        movies_table = [\r\n            [\"Star Wars: A New Hope\", 1977, \"PG\", 121],\r\n            [\"Star Trek: The Motion Picture\", 1979, \"G\", 132],\r\n            [\"Raiders of the Lost Ark\", 1989, \"PG\", 115],\r\n            [\"Indiana Jones and the Temple of Doom\", 1984, \"PG\", 118],\r\n            [\"Indiana Jones and the Last Crusade\", 1989, \"PG-13\", 127],\r\n            [\"Serenity\", 2005, \"PG-13\", 119],\r\n            [\"Joker\", 2019, \"R\", 122],\r\n            [\"The Terminator\", 1984, \"R\", 107]\r\n            ]\r\n        test_table = []\r\n        runtime = random.randint(90, 120)\r\n        \r\n        for j in range(random.randint(2, 5)):\r\n            index = random.randint(0, len(movies_table)-1)\r\n            test_table.append(movies_table[index])\r\n            movies_table.remove(movies_table[index])\r\n        \r\n        print(\"Testing (Rating = \" + rating + \"):\\n\" + \"  Movie Table: \" + str(test_table) + \"\\n\" + \"  Runtime: \" + str(runtime))\r\n        print(\"  Expecting: \" + str(solution(test_table, rating, runtime)) + \"\\n  Your Function's Output: \" + str(Lists2_movies.get_movies(test_table, rating, runtime)))\r\n        \r\n        if solution(test_table, rating, runtime) == Lists2_movies.get_movies(test_table, rating, runtime):\r\n            print(\"PASSED!\\n\")\r\n            num_passed += 1\r\n        else:\r\n            print(\"INCORRECT\\n\")\r\n            \r\n    \r\n    return (num_passed / len(ratings)) * 100.0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 346, "problem_id": "Lists2_golf", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nThe cadet intercollegiate golf team needs some help tracking individual\nperformance. Create a Python algorithm that inputs repeated pairs of cadet\nlast-names followed by the golfers score until the word **END** (all capital\nletters) is entered at the member last-name prompt.\n\nYour algorithm should output:\n\n  * The last name of the member with the lowest (best) score, if there are two members with the same lowest score, it should output the last name of the first person entered.\n  * The percentage of members who are within 5 strokes (inclusive) of the lowest score.\n\nThere is no bound on the number of golfers that may be entered, but you may\nassume that there will be at least one golfer and score entered.\n\n\n\n**EXAMPLES:**\n\n| **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Inputs** |  Woods  \n48  \nNicklaus  \n51  \nHogan  \n49  \nJones  \n46  \nPalmer  \n52  \nEND |  Snead  \n52  \nMickelson  \n48  \nNelson  \n48  \nEND |  Player  \n51  \nWatson  \n51  \nSingh  \n48  \nFloyd  \n49  \nNormal  \n54  \nEND  \n**Output** | Jones  \n80.0 | Mickelson  \n100.0 | Singh  \n60.0  \n  \n\n\n\n", "code": "\n# Initialize variables\nlowest_score = float('inf')\nlowest_score_count = 0\nwithin_5_count = 0\nis_end = False\n\n# Loop until 'END' is entered\nwhile not is_end:\n    # Read inputs of member last name and score\n    member_last_name = input()\n    if member_last_name == 'END':\n        break\n    score = int(input())\n    \n    # Check if the score is the lowest so far\n    if score < lowest_score:\n        lowest_score = score\n        lowest_score_member = member_last_name\n    \n    # Check if the score is within 5 strokes of the lowest score\n    if score <= lowest_score + 5:\n        within_5_count += 1\n    \n    # Increment the count of members\n    lowest_score_count += 1\n\n# Calculate the percentage of members within 5 strokes\nwithin_5_percentage = (within_5_count / lowest_score_count) * 100\n\n# Output the results\nprint(lowest_score_member)\nprint(within_5_percentage)\n", "testcase": "from cs110 import autograder\r\nimport random, statistics\r\n\r\nsolution_name = \"Lists2_golf.py\"\r\n\r\n# random_names = ['Mcllroy', 'Koepka', 'Rahm', 'Woods', 'Thomas', 'Johnson', 'Cantlay', 'Simpson']\r\n# \r\n# def get_random_name():\r\n#     global random_names\r\n#     name = random_names[random.randint(0, len(random_names)-1)]\r\n#     random_names.remove(name)\r\n#     return name\r\n# \r\n# \r\n# def solution(data):\r\n#     min_value = 99999\r\n#     min_name = \"\"\r\n#     count = 0\r\n#     \r\n#     for row in data:\r\n#         if row[1] < min_value:\r\n#             min_value = row[1]\r\n#             min_name = row[0]\r\n#     \r\n#     for row in data:\r\n#         if row[1] <= min_value + 5:\r\n#             count += 1\r\n# \r\n#     return min_name, (count / len(data) * 100.0)\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n       \r\n    test_cases = dict()\r\n    test_cases[(\"Simpson\", 70, \"Rahm\", 83, \"END\")] = \"Simpson\\n50.0\\n\"\r\n    test_cases[(\"Cantlay\", 80, \"Mcllroy\", 65, \"Rahm\", 66, \"END\")] = \"Mcllroy\\n66.7\\n\"\r\n    test_cases[(\"Koepka\", 74, \"Johnson\", 85, \"Thomas\", 84, \"Simpson\", 86, \"END\")] = \"Koepka\\n25.0\\n\"\r\n    test_cases[(\"Mcllroy\", 90, \"Koepka\", 80, \"Woods\", 84, \"Cantlay\", 72, \"Simpson\", 83, \"END\")] = \"Cantlay\\n20.0\\n\"\r\n    \r\n    test_case_input = list(test_cases.keys())\r\n    case_order = list(range(len(test_case_input)))\r\n    random.shuffle(case_order)\r\n    \r\n    score = 0\r\n\r\n    test_case_num = 1\r\n    for idx in case_order:\r\n        print('\\n' + '='*30)\r\n        print(\"Test Case:\", test_case_num)\r\n        print('='*30)\r\n        output, error_message = autograder.run_script(solution_name, test_case_input[case_order[idx]])\r\n        expected_output = test_cases[test_case_input[case_order[idx]]]  # solution(test_case_input[case_order[0]][0], test_case_input[case_order[0]][1], test_case_input[case_order[0]][2])\r\n        \r\n        lines = output.strip().split('\\n')\r\n        expected_lines = expected_output.strip().split('\\n')\r\n\r\n        if len(lines) == 1:\r\n            try:\r\n                student_output = float(lines[0])\r\n                if abs(student_output - float(expected_lines[1])) < 1.0:\r\n                    print(\"PARTIALLY CORRECT. Only Percentage Correct, Expected:\")\r\n                    score += 100.0 / len(test_cases) / 2\r\n            except:          \r\n                if lines[0] == expected_lines[0]:\r\n                    print(\"PARTIALLY CORRECT. Only Name Correct, Expected:\")\r\n                    score += 100.0 / len(test_cases) / 2               \r\n                else:\r\n                    print(\"INCORRECT: Expected the following:\")\r\n            print(expected_output)         \r\n        elif len(lines) == 2:\r\n            name_check_passed = lines[0] == expected_lines[0]\r\n            try:\r\n                percent_check_passed = abs(float(lines[1]) - float(expected_lines[1])) < 1.0\r\n            except:\r\n                percent_check_passed = False\r\n                print(\"Second Output NOT A VALID NUMBER\")\r\n            \r\n            if name_check_passed and percent_check_passed:\r\n                print(\"CORRECT Name and Percentage!\")\r\n                score += 100.0 / len(test_cases)\r\n            else:\r\n                if name_check_passed:\r\n                    print(\"PARTIALLY CORRECT. Only Name Correct, Expected:\")\r\n                    score += 100.0 / len(test_cases) / 2\r\n                elif percent_check_passed:\r\n                    print(\"PARTIALLY CORRECT. Only Percentage Correct, Expected:\")\r\n                    score += 100.0 / len(test_cases) / 2\r\n                else:\r\n                    print(\"INCORRECT: Expected the following:\")\r\n                print(expected_output)\r\n        else:\r\n            if len(lines) < 2:\r\n                print(\"Not Enough Lines. Expected:\")\r\n            else:\r\n                print(\"INCORRECT.  Expected the following:\")\r\n            print(expected_output)\r\n        \r\n        test_case_num += 1\r\n    \r\n    return score\r\n    \r\n    # Generates Random Values\r\n#     num_inputs = random.randint(2, 5)\r\n#     input_list = []\r\n#     data = []\r\n#         \r\n#     for i in range(num_inputs):\r\n#         new_row = [get_random_name(), random.randint(70, 90)]\r\n#         input_list.append(new_row[0])\r\n#         input_list.append(new_row[1])\r\n#         data.append(new_row)\r\n#     input_list.append(\"END\")\r\n#     \r\n#     lowest_name, percent = solution(data)\r\n#     \r\n#     # Runs the Script\r\n#     output, error_message = autograder.run_script(\"Lists2_golf.py\", input_list)\r\n#     lines = output.strip().split('\\n')\r\n# \r\n#     # Checks Min\r\n#     if len(lines) < 2:\r\n#         print(\"Number of output lines does not match\")\r\n#         return 0\r\n#     else:\r\n#         if not lowest_name == lines[0]:\r\n#             print(\"Incorrect Name.  Expected \" + str(lowest_name))\r\n#             return 0\r\n#         if not autograder.equals(percent, lines[1]):\r\n#             print(\"Incorrect Percent.  Expected \" + str(percent))\r\n#             return 50\r\n#         \r\n#     print(\"PASSED!\")\r\n#     return 100\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 347, "problem_id": "Lists2_credit", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nThe Air Academy Federal Credit Union wants to identify its best customers and\ncomes to you for help. To help with the accounting, create a Python program\nwhich inputs repeated pairs of member last-names followed by account balances\nuntil the word **DONE** (all capital letters) is entered at the member last-\nname prompt.\n\nYour program should output:\n\n  * The last name of the member with the highest account value, if there are two members with the same highest account value it should output the name of the first person entered.\n  * It will then output the percentage members who are within $10,000 (inclusive) of the highest account value.\n\nThere is no bound on the number of members that may be entered, but you may\nassume that there will be at least one member and balance entered.\n\n\n\n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInputs |  Rockefeller  \n120000  \nChase  \n115000  \nMorgan  \n110000  \nGates  \n90000  \nJobs  \n65000  \nDONE  |  Jobs  \n150000  \nChase  \n150000  \nKennedy  \n40000  \nDONE |  Morgan  \n145000  \nChase  \n135000  \nKennedy  \n142000  \nGates  \n145000  \nDONE  \nOutput | Rockefeller  \n60.0 | Jobs  \n66.66666666666666 | Morgan  \n100.0  \n  \n\n\n\n", "code": "\nbalance_dict = {}\ndone = False\n\nwhile not done:\n    name = input(\"Enter member last name: \")\n    if name == \"DONE\":\n        done = True\n    else:\n        balance = int(input(\"Enter account balance: \"))\n        balance_dict[name] = balance\n\nhighest_balance = max(balance_dict.values())\nhighest_name = [k for k, v in balance_dict.items() if v == highest_balance][0]\n\nwithin_10000 = 0\ntotal_members = len(balance_dict.keys())\nfor balance in balance_dict.values():\n    if highest_balance - balance <= 10000:\n        within_10000 += 1\n\npercentage_within_10000 = (within_10000 / total_members) * 100\n\nprint(highest_name)\nprint(percentage_within_10000)\n", "testcase": "from cs110 import autograder\r\nimport random, statistics\r\n\r\nrandom_names = ['Gates', 'Bezos', 'Zuckerberg', 'Ellison', 'Page', 'Brin', 'Huateng', 'Dell', 'Musk', 'Allen']\r\n\r\ndef get_random_name():\r\n    global random_names\r\n    name = random_names[random.randint(0, len(random_names)-1)]\r\n    random_names.remove(name)\r\n    return name\r\n\r\n\r\ndef solution(data):\r\n    highest_value = -99999\r\n    highest_name = \"\"\r\n    count = 0\r\n    \r\n    for row in data:\r\n        if row[1] > highest_value:\r\n            highest_value = row[1]\r\n            highest_name = row[0]\r\n    \r\n    for row in data:\r\n        if row[1] >= highest_value - 10000:\r\n            count += 1\r\n\r\n    return highest_name, (count / len(data) * 100.0)\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num_inputs = random.randint(5, 7)\r\n    input_list = []\r\n    data = []\r\n        \r\n    for i in range(num_inputs):\r\n        new_row = [get_random_name(), random.randint(5000, 35000)]\r\n        input_list.append(new_row[0])\r\n        input_list.append(new_row[1])\r\n        data.append(new_row)\r\n    input_list.append(\"DONE\")\r\n    \r\n    highest_balance, percent = solution(data)\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"Lists2_credit.py\", input_list)\r\n    lines = output.strip().split('\\n')\r\n\r\n    # Checks Min\r\n    if len(lines) < 2:\r\n        print(\"Number of output lines does not match\")\r\n        return 0\r\n    else:\r\n        if not highest_balance == lines[0]:\r\n            print(\"Incorrect Highest Balance.  Expected \" + str(highest_balance))\r\n            return 0\r\n        if not autograder.equals(percent, lines[1]):\r\n            print(\"Incorrect Percent.  Expected \" + str(percent))\r\n            return 50\r\n        \r\n    print(\"PASSED!\")\r\n    return 100\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 348, "problem_id": "Lists2_100m", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nYou have been asked by your unit to record 100m dash times for an upcoming\nUSAFA track meet. Create a Python algorithm that first asks for the number of\ncadets, and then asks for that many cadet last names, squadrons, and 100m dash\ntimes (in that order).\n\nYour program should output:\n\n  * The cadet squadron containing the cadet with the fastest 100m dash time followed by their 100m dash time. If there is a tie for fastest 100m dash times, you should output the squadron number and time for the LAST cadet entered who had that fastest time.\n  * The number of cadets whose 100m dash time was faster than the average.\n\nThere is no bound on the number of cadets that may be entered, but you may\nassume that there will be at least one cadet and track time entered.\n\n\n\n**EXAMPLES:**\n\n| **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Inputs** |  4  \nThorpe  \n13  \n10.2  \nOwens  \n22  \n9.93  \nMathias  \n19  \n9.99  \nRudolph  \n39  \n10.23  |  3  \nJohnson  \n7  \n10.3  \nTyus  \n14  \n10.02  \nLewis  \n40  \n9.67 |  2  \nJoyner  \n1  \n10.08  \nKersee  \n29  \n9.97  \n**Output** | 22  \n9.93  \n2 | 40  \n9.67  \n1 | 29  \n9.97  \n1\n\n\n", "code": "\nnum_cadets = int(input())\ncadets = {}\n\nfor i in range(num_cadets):\n    last_name = input()\n    squadron = int(input())\n    dash_time = float(input())\n    \n    cadets[squadron] = (last_name, dash_time)\n\nfastest_time = float('inf')\nfastest_squadron = None\nfaster_than_average = 0\n\nfor squadron, (last_name, dash_time) in cadets.items():\n    if dash_time < fastest_time:\n        fastest_time = dash_time\n        fastest_squadron = squadron\n    elif dash_time == fastest_time:\n        fastest_squadron = squadron\n    \n    avg_time = sum([time for _, time in cadets.values()]) / num_cadets\n    \n    if dash_time < avg_time:\n        faster_than_average += 1\n\nprint(fastest_squadron)\nprint(fastest_time)\nprint(faster_than_average)\n", "testcase": "from cs110 import autograder\r\nimport random, statistics\r\n\r\nrandom_names = ['Alice', 'Bob', 'Courtney', 'Devon', 'Frank', 'Genie']\r\n\r\ndef get_random_name():\r\n    global random_names\r\n    name = random_names[random.randint(0, len(random_names)-1)]\r\n    random_names.remove(name)\r\n    return name\r\n\r\ndef solution(data):\r\n    fastest_time = 99999\r\n    fastest_squadron = 0\r\n    total = 0\r\n    count = 0\r\n    \r\n    for row in data:\r\n        total += row[2]\r\n        if row[2] <= fastest_time:\r\n            fastest_time = row[2]\r\n            fastest_squadron = row[1]\r\n            \r\n    average = total / len(data)\r\n    \r\n    for row in data:\r\n        if row[2] <= average:\r\n            count += 1\r\n    \r\n    return fastest_squadron, fastest_time, count\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num_inputs = random.randint(2, 5)\r\n    input_list = [num_inputs]\r\n    data = []\r\n        \r\n    for i in range(num_inputs):\r\n        new_row = [get_random_name(), random.randint(1, 40), round(random.uniform(12, 18), 1)]\r\n        input_list.append(new_row[0])\r\n        input_list.append(new_row[1])\r\n        input_list.append(new_row[2])\r\n        data.append(new_row)\r\n    \r\n    fastest_squadron, fastest_time, count = solution(data)\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"Lists2_100m.py\", input_list)\r\n    lines = output.strip().split('\\n')\r\n\r\n    # Checks Min\r\n    if len(lines) != 3:\r\n        print(\"Number of output lines does not match\")\r\n        return 0\r\n    else:\r\n        if not autograder.equals(fastest_squadron, lines[0]):\r\n            print(\"Incorrect Squadron.  Expected \" + str(fastest_squadron))\r\n            return 0\r\n        if not autograder.equals(fastest_time, lines[1]):\r\n            print(\"Incorrect Time.  Expected \" + str(fastest_time))\r\n            return 33\r\n        if not autograder.equals(count, lines[2]):\r\n            print(\"Incorrect Count.  Expected \" + str(count))\r\n            return 67\r\n        \r\n    print(\"PASSED!\")\r\n    return 100\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 349, "problem_id": "Lists1_pftscores", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nYou are provided a list of PFT scores, already in the lab template, in a\nvariable `pft_scores` arranged in no particular order.\n\nWrite a Python program that obtains a new score from the user. If the score is\nvalid (above zero and no greater than 500), add it to the list and print out\nthe following two stats in this order:\n\n1\\. **average score  ** HINT: use the functions `len()` and `sum()` on your\nlist to find the average\n\n2\\. **range of scores** , the difference between the largest score and\nsmallest score. HINT: use the functions `min()` and `max()` on your list to\nfind the range\n\nIf the score is invalid (below zero or above 500), instead print:  \"Invalid\nscore provided\".\n\n\n\n**EXAMPLE:**\n\n| **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input** | -5 | 328 | 65  \n**Outputs** | Invalid score provided |\n\n291.8\n\n403\n\n|\n\n274.26666666666665\n\n408  \n  \n\n\n\n\n  \n\n\n\n\n", "code": "\npft_scores = [58, 253, 416, 98, 124, 382, 189, 101, 306, 275]\n\nscore = int(input(\"Enter the new score: \"))\n\nif score > 0 and score <= 500:\n    pft_scores.append(score)\n    avg_score = sum(pft_scores) / len(pft_scores)\n    score_range = max(pft_scores) - min(pft_scores)\n    print(avg_score)\n    print(score_range)\nelse:\n    print(\"Invalid score provided\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n#import Lists1_pftscores\r\n\r\npft_scores = [243, 394, 143, 288, 303, 473, 325, 273, 284, 198, 70, 289, 437, 329]\r\n\r\n\r\ndef solution(new_num):\r\n    result = ''\r\n    \r\n    # Append number to num_list ONLY IF IT IS A valid number > 0\r\n    if new_num >= 0 and new_num <= 500:\r\n\r\n        temp_scores = pft_scores.copy()\r\n        temp_scores.append(new_num)\r\n        \r\n        average = sum(temp_scores) / len(temp_scores)\r\n        num_range = max(temp_scores) - min(temp_scores)\r\n        \r\n        result += str(average) + '\\n'\r\n        result += str(num_range) + '\\n'\r\n    else:\r\n        result += \"Invalid score provided\"\r\n        \r\n    return result\r\n\r\ndef test_passed():\r\n    \r\n    # 5 test strategies\r\n    # 1) invalid, out of range low\r\n    # 2) invalid, out of range high\r\n    # 3) rand num that doesn't affect range\r\n    # 4) rand num lower than current lowest, but valid\r\n    # 5) rand num higher than current highest, but valid\r\n    \r\n    min_score = min(pft_scores)\r\n    max_score = max(pft_scores)\r\n    \r\n    test_vals = []\r\n    \r\n    # random_low_invalid\r\n    test_vals.append(random.randint(-1010,-1))\r\n    #random_high_invalid\r\n    test_vals.append(random.randint(501,5000))\r\n    #random_mid_num\r\n    test_vals.append(random.randint(min_score, max_score))\r\n    #random_low\r\n    test_vals.append(random.randint(0, min_score-1))\r\n    #random_high\r\n    test_vals.append(random.randint(max_score + 1, 500))\r\n    \r\n    i = 0\r\n    total_score = 0.0\r\n    \r\n    for val in test_vals:\r\n        print('-'*10 + \"Test #\" + str(i) + '-'*10)\r\n        \r\n        output, error_message = autograder.run_script(\"Lists1_pftscores.py\", [val])\r\n        expected_output = solution(val)\r\n        \r\n        lines = output.strip().split('\\n')\r\n        \r\n        if expected_output.strip() == \"Invalid score provided\":\r\n            if output.strip() == expected_output.strip():\r\n                print(\"CORRECT\")\r\n                total_score += 100 / len(test_vals)\r\n            else:\r\n                print(\"INCORRECT. Expected the following:\")\r\n                print(expected_output)\r\n        else:\r\n            expected_lines = expected_output.strip().split('\\n')\r\n            \r\n            if autograder.equals(float(expected_lines[0]), float(lines[0]), 0.99) and autograder.equals(float(expected_lines[1]), float(lines[1]), 0.99):\r\n                print(\"CORRECT\")\r\n                total_score += 100 / len(test_vals)\r\n            else:\r\n                print(\"INCORRECT. Expected the following:\")\r\n                print(expected_output)\r\n            \r\n        print()\r\n        i += 1\r\n    \r\n    return total_score\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 350, "problem_id": "Lists1_listrange", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nWrite a Python program that obtains two whole numbers that represent the start\nand stop values for a range of numbers. You may assume the second number is\nalways greater than the first.\n\nUsing these start and stop values, print the two following items in order:\n\n1.  Print a list that starts at the start value and ends at (the list contains) the stop value\n\n**HINT** : Use `range()` to accomplish this. In order to print the result from\nrange() as a list, surround it with list(), `list(range(#,#))`, like you\nsurround input() with int() or float(), `int(input())`.\n\n2.  Print the size (how many numbers are contained) of that list\n\n\n\n**EXAMPLE:**\n\n| **Example 1** | **Example 2**  \n---|---|---  \n**Inputs** |\n\n1\n\n10\n\n|\n\n1023\n\n1029  \n  \n**Outputs** | [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  \n10 |\n\n[1023, 1024, 1025, 1026, 1027, 1028, 1029]  \n7\n\n\n", "code": "\nstart = int(input())\nstop = int(input())\n\nnumbers = list(range(start, stop+1))\nprint(numbers)\nprint(len(numbers))\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef solution(test_start, test_stop):\r\n    result = []\r\n    \r\n    result.append(list(range(test_start, test_stop+1)))\r\n    result.append(len(range(test_start, test_stop+1)))\r\n        \r\n    return result\r\n\r\ndef test_passed():\r\n    \r\n    # 5 test strategies\r\n    test_vals = []\r\n    \r\n    for j in range(5):\r\n        test_val_start = random.randint(0,2048)\r\n        test_val_stop = test_val_start + random.randint(9,16)\r\n        test_vals.append((test_val_start, test_val_stop))\r\n  \r\n    i = 0\r\n    total_score = 0.0\r\n    \r\n    for val in test_vals:\r\n        print('-'*10 + \"Test #\" + str(i) + '-'*10)\r\n        \r\n        output, error_message = autograder.run_script(\"Lists1_listrange.py\", [val[0], val[1]])\r\n        expected_output = solution(val[0], val[1])\r\n        \r\n        lines = output.strip().split('\\n')\r\n        \r\n        idx = 0\r\n        count_correct_lines = 0\r\n        if len(lines) != 2:\r\n            print(\"Missing/Extra Output - Expecting a list and then its length on next line\")\r\n            \r\n        for line in lines:\r\n            if line.strip() == str(expected_output[idx]): # and autograder.equals(int(lines[1]), expected_output[1]):\r\n                total_score += 50.0 / len(test_vals)\r\n                count_correct_lines += 1\r\n            else:\r\n                print(\"INCORRECT Value:\", line)\r\n                print(\"Expecting Value:\", expected_output[idx])\r\n            \r\n            idx += 1\r\n            \r\n        if count_correct_lines == 2:\r\n            print(\"CORRECT\")\r\n        print()\r\n        i += 1\r\n    \r\n    return total_score\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 351, "problem_id": "Lists1_fastestcar", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nWrite a Python program with the definition of a new function named fastest_car\nand takes two lists of car info as parameters. The function will then\n**return** the car model name with the higher top speed or \"Same speed\" if the\ntop speeds are the same.\n\nThe two parameters to the function are both a list with the same 3 types of\nelements, as follows:\n\n  \n| **Car Model** | **Cost** | **Top Speed**  \n---|---|---|---  \n**Value** | Ford Mustang | 27205.00 | 163  \n  \n\n\n| **Car Model** | **Cost** | **Top Speed**  \n---|---|---|---  \n**Value** | Chevy Corvette | 66400.00 | 194  \n  \n\n\n**EXAMPLE** :\n\n| **Example**  \n---|---  \n**Input Parameters to** `fastest_car()` |\n\n`fastest_car([\"Ford Mustang\", 27205.00, 163], [\"Chevy Corvette\", 66400.00,\n194])`  \n  \n**Outputs** | Chevy Corvette\n\n\n", "code": "\ndef fastest_car(car1, car2):\n    if car1[2] > car2[2]:\n        return car1[0]\n    elif car1[2] < car2[2]:\n        return car2[0]\n    else:\n        return \"Same speed\"\n\nresult = fastest_car([\"Ford Mustang\", 27205.00, 163], [\"Chevy Corvette\", 66400.00, 194])\nprint(result)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\ntry:\r\n    import Lists1_fastestcar as student_module\r\nexcept:\r\n    try:\r\n        import lists1_fastestcar as student_module\r\n    except Exception as e:\r\n        print(\"Import ERROR:\", e)\r\n\r\ndef solution(car1, car2):\r\n\r\n    if car1[2] > car2[2]:\r\n        return car1[0]\r\n    elif car2[2] > car1[2]:\r\n        return car2[0]\r\n    else:\r\n        return \"Same speed\"\r\n\r\ndef test_passed():\r\n    \r\n    # 5 test strategies\r\n    cars_list = []\r\n    cars_list.append([\"Honda Civic\", 18983.20, 127])\r\n    cars_list.append([\"Acura NSX\", 157500.39, 191])\r\n    cars_list.append([\"VW Golf GTI\", 28595.83, 130])\r\n    cars_list.append([\"Ford F-150 Raptor\", 45290.82, 107])\r\n    cars_list.append([\"Subaru BRZ\", 28955.38, 140])\r\n    cars_list.append([\"Mazda Mazdaspeed3\", 17424.30, 130])\r\n    \r\n    test_vals = []\r\n    \r\n    index_permutations = []\r\n    # build all possible permutations except those with the same vehicle\r\n    for i in range(len(cars_list)):\r\n        for j in range(len(cars_list)):\r\n            if i != j:\r\n                index_permutations.append((i,j))\r\n    \r\n    # randomly choose 4 of the permutations\r\n    for i in range(4):\r\n        car_idx_pair = index_permutations[random.randint(0,len(index_permutations)-1)]\r\n        first_car_idx = car_idx_pair[0]\r\n        second_car_idx = car_idx_pair[1]\r\n        \r\n        index_permutations.remove(car_idx_pair)\r\n        \r\n        test_vals.append([cars_list[first_car_idx], cars_list[second_car_idx]])\r\n\r\n    # same speed\r\n    test_vals.append((cars_list[2], cars_list[5]))\r\n  \r\n    i = 0\r\n    total_score = 0.0\r\n    \r\n    for val in test_vals:\r\n        print('-'*10 + \"Test #\" + str(i) + '-'*10)\r\n        \r\n        try:\r\n            output = student_module.fastest_car(val[0], val[1])\r\n            expected_output = solution(val[0], val[1])\r\n\r\n            print(\"Your Program's Output:\")\r\n            print(output)\r\n\r\n            if output == None:\r\n                print(\"INCORRECT - Your function did not return anything. \\nExpected:\")\r\n                print(str(expected_output))\r\n            elif output.strip() == expected_output.strip():\r\n                print(\"CORRECT\")\r\n                total_score += 100.0 / len(test_vals)\r\n            else:\r\n                print(\"INCORRECT - Expected:\")\r\n                print(str(expected_output))\r\n        except Exception as e:\r\n            print(\"There was an error when testing your solution.\")\r\n            print(e)\r\n            \r\n        print()\r\n        i += 1\r\n    \r\n    return total_score\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 352, "problem_id": "IterLogic2_timestable", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n** Write an algorithm that asks the user for a positive number and then\noutputs the multiplication table of that number 1-10.\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2  \n---|---|---  \nInputs | 3 | 9  \nOutputs |\n\n3  \n6  \n9  \n12  \n15  \n18  \n21  \n24  \n27  \n30\n\n| 9  \n18  \n27  \n36  \n45  \n54  \n63  \n72  \n81  \n90  \n  \n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(multiple):\r\n    result = ''\r\n    i = 1\r\n    \r\n    while i <= 10:\r\n        result += str(i * multiple) + \"\\n\"\r\n        i += 1\r\n    \r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_multiple = random.randint(1, 20)\r\n\r\n    output, error_message = autograder.run_script(\"IterLogic2_timestable.py\", [random_multiple])\r\n    expected_output = solution(random_multiple)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n    \r\n    return 0\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 353, "problem_id": "IterLogic2_printchars", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Write a Python algorithm that asks the users for two ASCII characters\n(e.g., 'a', 'z'), and prints all of the characters between them (inclusive).\n\n  * If the first character has a lower ASCII value than the second (e.g., 'a' - 'z'), print out the letters in ascending order.\n  * Alternatively, if the second letter has a lower ASCII value, print out the letters in descending order.\n\n\n\n**HINTS:**\n\n  * Use the `ord()` function to convert a character into an integer:  \n`ord('a')` returns 141  \n  \n\n  * Use the `chr()` function to convert an integer back into a character:  \n`chr(142)` returns 'b'\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2  \n---|---|---  \nInputs | a  \nc | f  \na  \nOutputs |\n\na  \nb  \nc\n\n| f  \ne  \nd  \nc  \nb  \na\n\n\n", "code": "\n# Prompt the user for two ASCII characters\nchar1 = input(\"Enter the first character: \")\nchar2 = input(\"Enter the second character: \")\n\n# Convert the characters to their ASCII values\nascii1 = ord(char1)\nascii2 = ord(char2)\n\n# Determine the range of characters to print based on ASCII values\nif ascii1 < ascii2:\n    for i in range(ascii1, ascii2 + 1):\n        print(chr(i))\nelse:\n    for i in range(ascii1, ascii2 - 1, -1):\n        print(chr(i))\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(start_char, end_char):\r\n    result = ''\r\n    \r\n    start_char = ord(start_char)\r\n    end_char = ord(end_char)\r\n    \r\n    if start_char < end_char:\r\n        for i in range(start_char, end_char+1, 1):\r\n            result += chr(i) + '\\n'\r\n    else:\r\n        for i in range(start_char, end_char-1, -1):\r\n            result += chr(i) + '\\n'\r\n\r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    print(\"# ------------------------------------------\")\r\n    print(\"# Test 1:  First letter lower than second\")\r\n    print(\"# ------------------------------------------\")\r\n    start_char = chr(random.randint(65, 85))\r\n    end_char   = chr(random.randint(ord(start_char), 90))\r\n\r\n    output, error_message = autograder.run_script(\"IterLogic2_printchars.py\", [start_char, end_char])\r\n    expected_output = solution(start_char, end_char)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\\n\")\r\n        score += 50\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n        \r\n    \r\n    print(\"# ------------------------------------------\")\r\n    print(\"# Test 2:  First letter higher than second\")\r\n    print(\"# ------------------------------------------\")\r\n    start_char = chr(random.randint(85, 90))\r\n    end_char   = chr(random.randint(65, 84))\r\n\r\n    output, error_message = autograder.run_script(\"IterLogic2_printchars.py\", [start_char, end_char])\r\n    expected_output = solution(start_char, end_char)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\\n\")\r\n        score += 50\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 354, "problem_id": "IterLogic2_football", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** In, Python, write an algorithm that first asks the user how many football\nplayers they wish to enter statistics for and then gets that many yearly\npassing totals for each player. Output how many of those players that had more\nthan 5000 passing yards in a year. Also your algorithm will output the average\nyardage per year as well as the minimum yardage entered, in that order. You\ncan assume there is at least one player's yardage to input.\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2 | Example 3  \n---|---|---|---  \n**Inputs** | 6  \n4924  \n4442  \n5117  \n2700  \n1990  \n4399 | 5  \n2305  \n4209  \n5100  \n5109  \n3800 | 4  \n4200  \n2709  \n3757  \n2976  \n**Outputs** | 1  \n3928.6666666666665  \n1990 | 2  \n4104.6  \n2305 | 0  \n3410.5  \n2709\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    num_entries = random.randint(1, 6)\r\n    num_above_5000 = random.randint(0, num_entries)\r\n    list_of_values = [num_entries]\r\n    \r\n    for i in range(num_entries):\r\n        if i < num_above_5000:\r\n            list_of_values.append(random.randint(5001, 8000))\r\n        elif i == num_above_5000:\r\n            list_of_values.append(5000)\r\n        else:\r\n            list_of_values.append(random.randint(1, 5000))\r\n    \r\n    average = sum(list_of_values[1:])/num_entries\r\n    min_value = min(list_of_values[1:])\r\n    \r\n    output, error_message = autograder.run_script(\"IterLogic2_football.py\", list_of_values)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if len(lines) >= 1 and autograder.equals(lines[0], num_above_5000):\r\n        print(\"Number Above 5000 Looks Good\")\r\n        score += 33\r\n    else:\r\n        print(\"Number Above 5000 is Incorrect (or Missing)\")\r\n    \r\n    if len(lines) >= 2 and autograder.equals(lines[1], average):\r\n        print(\"Average Looks Good\")\r\n        score += 33\r\n    else:\r\n        print(\"Average is Incorrect (or Missing)\")\r\n    \r\n    if len(lines) >= 3 and autograder.equals(lines[2], min_value):\r\n        print(\"Min Value Looks Good\")\r\n        score += 34\r\n    else:\r\n        print(\"Min Value is Incorrect (or Missing)\")\r\n        \r\n    return score\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 355, "problem_id": "IterLogic2_counting", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n** Write a Python algorithm that gets three numbers from the user, X, Y, and\nZ. Then have the algorithm output all the numbers from X to Y (inclusive),\ncounting by Z. You may assume that Z is non-zero.\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2 | Example 3  \n---|---|---|---  \n**Inputs** | 1  \n5  \n1 | -5  \n-10  \n-3 | 15  \n15  \n100  \n**Outputs** | 1  \n2  \n3  \n4  \n5 | -5  \n-8 | 15\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# def solution(random_start, random_end, random_increment):\r\n#     result = ''\r\n# \r\n#     for i in range(random_start, random_end+1, random_increment):\r\n#         result += str(i) + \"\\n\"\r\n#         print(\"Result adding:\", i)\r\n# \r\n#     return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_start = random.randint(0, 10)\r\n    random_end = random.randint(50, 100)\r\n    random_increment = random.randint(2, 9)\r\n    \r\n    test_cases = dict()\r\n    test_cases[(42, 47, 1)] = \"42\\n43\\n44\\n45\\n46\\n47\\n\"\r\n    test_cases[(8, 92, 7)] = \"8\\n15\\n22\\n29\\n36\\n43\\n50\\n57\\n64\\n71\\n78\\n85\\n92\\n\"\r\n    test_cases[(5, 62, 8)] = \"5\\n13\\n21\\n29\\n37\\n45\\n53\\n61\\n\"\r\n    test_cases[(10, 64, 9)] = \"10\\n19\\n28\\n37\\n46\\n55\\n64\\n\"\r\n    test_cases[(5, -7, -2)] = \"5\\n3\\n1\\n-1\\n-3\\n-5\\n-7\\n\"\r\n    \r\n    test_case_input = list(test_cases.keys())\r\n    case_order = list(range(len(test_case_input)))\r\n    random.shuffle(case_order)\r\n    \r\n    score = 0\r\n\r\n    i = 1\r\n    for idx in case_order:\r\n        print('\\n' + '='*30)\r\n        print(\"Test Case:\", i)\r\n        print('='*30)\r\n        output, error_message = autograder.run_script(\"IterLogic2_counting.py\", test_case_input[case_order[idx]])\r\n        expected_output = test_cases[test_case_input[case_order[idx]]]  # solution(test_case_input[case_order[0]][0], test_case_input[case_order[0]][1], test_case_input[case_order[0]][2])\r\n        \r\n        lines = output.strip().split('\\n')\r\n        last_line = lines[len(lines)-1]\r\n\r\n        if output.strip() == expected_output.strip():\r\n            print(\"CORRECT\")\r\n            score += 20\r\n        else:\r\n            print(\"INCORRECT.  Expected the following:\")\r\n            print(expected_output)\r\n        \r\n        i += 1\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 356, "problem_id": "IterLogic2_coordinates", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Write a Python algorithm that prints all the coordinates in a coordinate\nplane, given two corners. Your program should get four inputs from the user:\n\n  * the starting x-coordinate,\n  * the ending x-coordinate,\n  * the starting y-coordinate, and\n  * the ending y-coordinate.\n\nYour program will then print out all of the coordinates in x y order\n(separating coordinates with a space), listing all of the coordinates in the\nx-axis before incrementing y. You may assume that the ending coordinate is\nnever less than the starting coordinate.  \n\nFor example, your algorithm would print out:  \n1 2  \n2 2  \n3 2  \n4 2  \n5 2  \n6 2  \n1 3  \n2 3  \n3 3  \n4 3  \n5 3  \n6 3  \n. . . and so on\n\n\n\n**HINTS:**\n\n  * Write a loop that first prints all of the x coordinates from start to end\n  * Use a nested loop to print all of the y coordinates from start to end\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**Inputs** | 0  \n1  \n0  \n1 | 0  \n2  \n0  \n1  \n**Outputs** | 0 0  \n1 0  \n0 1  \n1 1 | 0 0  \n1 0  \n2 0  \n0 1  \n1 1  \n2 1  \n  \n\n\n\n", "code": "\nstart_x = int(input(\"Enter the starting x-coordinate: \"))\nend_x = int(input(\"Enter the ending x-coordinate: \"))\nstart_y = int(input(\"Enter the starting y-coordinate: \"))\nend_y = int(input(\"Enter the ending y-coordinate: \"))\n\nfor x in range(start_x, end_x + 1):\n  for y in range(start_y, end_y + 1):\n    print(x, y)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(start_x, end_x, start_y, end_y):\r\n    result = ''\r\n\r\n    for y in range(start_y, end_y+1):\r\n        for x in range(start_x, end_x+1):\r\n            result += str(x) + \" \" + str(y) + \"\\n\"\r\n\r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    start_x = random.randint(-2, -1)\r\n    end_x = random.randint(1, 2)\r\n    start_y = random.randint(-3, -1)\r\n    end_y = random.randint(1, 3)\r\n\r\n    output, error_message = autograder.run_script(\"IterLogic2_coordinates.py\", [start_x, end_x, start_y, end_y])\r\n    expected_output = solution(start_x, end_x, start_y, end_y)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    num_matches = autograder.compare_strings(lines, expected_output.strip().split('\\n'))\r\n\r\n    return 100 * (num_matches / len(lines))\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 357, "problem_id": "IterLogic2_class2017", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** In Python, write an algorithm that first asks the user how many cadets to\ninput and then gets that many cadet class years from the user. Output how many\nof those cadets were in the class of 2017. You can assume there is at least\none cadet to enter.\n\n**EXAMPLES:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInputs | 4  \n2014  \n2016  \n2017  \n2017 | 5  \n2015  \n2017  \n2014  \n2014  \n2017 | 4  \n2014  \n2016  \n2014  \n2014  \nOutputs | 2 | 3 | 0\n\n\n", "code": "\nnum_cadets = int(input(\"Enter the number of cadets: \"))\ncadet_years = []\ncount = 0\n\nfor i in range(num_cadets):\n    year = int(input(\"Enter the cadet's class year: \"))\n    cadet_years.append(year)\n    if year == 2017:\n        count += 1\n\nprint(count)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    num_entries = random.randint(1, 6)\r\n    num_in_2017 = random.randint(0, num_entries)\r\n    list_of_values = [num_entries]\r\n    \r\n    for i in range(num_entries):\r\n        if i < num_in_2017:\r\n            list_of_values.append(2017)\r\n        else:\r\n            list_of_values.append(random.randint(2018, 2024))\r\n        \r\n    output, error_message = autograder.run_script(\"IterLogic2_class2017.py\", list_of_values)\r\n    \r\n    lines = output.strip().split('\\n')\r\n\r\n    if len(lines) >= 1 and autograder.equals(lines[0], num_in_2017):\r\n        print(\"CORRECT\")\r\n        score += 100\r\n    else:\r\n        print(\"Expected\", num_in_2017)\r\n        \r\n    return score\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 358, "problem_id": "IterLogic1_waittimes", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write an algorithm that lets the user input the wait times for various\nrides at an amusement park (in minutes) until he/she types the value -999.\nOutput the shortest waiting time, followed by the number of waiting times that\nare over 30 minutes.\n\n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInputs |\n\n90  \n30  \n31  \n-999\n\n|\n\n35  \n15  \n90  \n120  \n15  \n-999\n\n|\n\n15  \n15  \n10  \n5  \n-999  \n  \nOutputs | 30  \n2 | 15  \n3 | 5  \n0\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0.0\r\n    \r\n    possible_tests = [[30, 45, 15, 5, 5, -999], [15, 30, 31, 29, 120, 90, -999]]\r\n    possible_output = [[5, 1], [15, 3]]\r\n    \r\n    # Generates a Random Test\r\n    random_index = random.randint(0, len(possible_tests)-1)\r\n    random_test = possible_tests[random_index]\r\n    expected_output = possible_output[random_index]\r\n            \r\n    output, error = autograder.run_script(\"IterLogic1_waittimes.py\", random_test)\r\n    \r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):\r\n        print(\"Min Wait Time is Correct\")\r\n        score += 50\r\n    else:\r\n        print(\"Min Wait Time is Incorrect.  Expected\", expected_output[0])\r\n        \r\n    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):\r\n        print(\"Number of Lines With Over 30 Minute Wait Times is Correct\")\r\n        score += 50\r\n    else:\r\n        print(\"Number of Lines With Over 30 Minute Wait Times is Incorrect.  Expected\", expected_output[1])\r\n    \r\n    return score\r\n\r\n\r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 359, "problem_id": "IterLogic1_squadrons", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write an algorithm that asks the user for the number of squadrons to input,\nand then gets each squadron's number. Output the number  \nof squadrons from 1st, 2nd, 3rd, and 4th groups (one per line)\n\n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInputs |\n\n3  \n3  \n19  \n24\n\n|\n\n4  \n19  \n25  \n37  \n40\n\n|\n\n2  \n1  \n34  \n  \nOutputs | 1  \n1  \n1  \n0 | 0  \n1  \n1  \n2 | 1  \n0  \n0  \n1\n\n\n", "code": "\ndef count_squadrons():\n    num_squadrons = int(input(\"Enter the number of squadrons: \"))\n    squads = []\n    for i in range(num_squadrons):\n        squad_number = int(input(\"Enter the squadron's number: \"))\n        squads.append(squad_number)\n    \n    first_group = 0\n    second_group = 0\n    third_group = 0\n    fourth_group = 0\n    \n    for squad in squads:\n        if squad % 10 == 1:\n            first_group += 1\n        elif squad % 10 == 2:\n            second_group += 1\n        elif squad % 10 == 3:\n            third_group += 1\n        elif squad % 10 == 4:\n            fourth_group += 1\n    \n    print(first_group)\n    print(second_group)\n    print(third_group)\n    print(fourth_group)\n\ncount_squadrons()\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0.0\r\n    \r\n    possible_tests = [[5, 10, 20, 30, 40, 19], [8, 3, 1, 23, 37, 40, 7, 6, 25]]\r\n    possible_output = [[1, 2, 1, 1], [4, 0, 2, 2]]\r\n    \r\n    # Generates a Random Test\r\n    random_index = random.randint(0, len(possible_tests)-1)\r\n    random_test = possible_tests[random_index]\r\n    expected_output = possible_output[random_index]\r\n            \r\n    output, error = autograder.run_script(\"IterLogic1_squadrons.py\", random_test)\r\n    \r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):\r\n        print(\"Num in Group One is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Num in Group One is Incorrect.  Expected\", expected_output[0])\r\n        \r\n    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):\r\n        print(\"Num in Group Two is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Num in Group Two is Incorrect.  Expected\", expected_output[1])\r\n    \r\n    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):\r\n        print(\"Num in Group Three is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Num in Group Three is Incorrect.  Expected\", expected_output[2])\r\n    \r\n    if len(lines) > 3 and autograder.equals(lines[3], expected_output[3]):\r\n        print(\"Num in Group Four is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Num in Group Four is Incorrect.  Expected\", expected_output[3])\r\n    \r\n    return score\r\n\r\n\r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 360, "problem_id": "IterLogic1_dvc", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM NAME:  \n** IterLogic1_dvc\n\n\n\n**PROBLEM STATEMENT:  \n** The CS110Z course director, unfortunately, was tricked into purchasing a\nDisney Vacation Club timeshare. The good news about DVC is that it lets you\nreserve a room at any Disney Resort for one week! The downside, however, is\nthat members have to pay an annual \"maintenance fee\" so that the mouse can\nkeep the property looking good (EVEN when Disney World was closed due to\nCOVID-19 . . . yay).\n\nThis year, the maintenance was $623.00. If that isn't bad enough, your course\ndirector discovered that maintenance fees aren't fixed! On the contrary, it\naccues each year at a rate of approximately 1.5%.\n\nWrite a Python function called `get_years_until` that takes a  **target\nvalue**  as a parameter, and returns the number of years (assuming a fixed\ninterest rate) before the maintenance fee exceeds this value.\n\n\n\n**Example 1**  \n`get_years_until(624)` should return 1. This is because:\n\n  * The maintenance fee will increase by $9.35 (i.e., 1.5% of 623) in a year\n  * The new maintenance fee will be $623.00 + $9.35 = $632.35, which is obviously more than $624.00\n\n**  \nExample 2**  \n`get_years_until(1000)` should return 32. This is because:\n\n  * 623 * 1.015 * 1.015 * 1.015 . . . (32 times total) = $1003.23, which is obviously more than $1000.00\n\n  \n**Don't Know Where to Start?!?**  \nUse a While loop to keep calculating the new maintenance fee until the value\nis . . . (we'll let you figure out the rest).\n\n\n", "code": "", "testcase": "from IterLogic1_dvc import get_years_until\r\nfrom cs110 import autograder\r\nimport random, math\r\n\r\nNUM_SUBTESTS = 5\r\n\r\ndef soln(target_value):\r\n    maintenance_fee = 623.00\r\n    interest_rate = 0.015\r\n    count = 0\r\n\r\n    while maintenance_fee < target_value:\r\n        count += 1\r\n        maintenance_fee = maintenance_fee * (1 + interest_rate)\r\n    \r\n    return count\r\n\r\ndef test_passed():\r\n    passed = 0\r\n    for i in range(NUM_SUBTESTS):\r\n        print('Running test %d of %d:' % (i+1 , NUM_SUBTESTS), end='')\r\n        target_amount = random.randint(650, 1100)\r\n        if autograder.equals(get_years_until(target_amount), soln(target_amount)):\r\n            print(\"  It will take \" + str(get_years_until(target_amount)) + \" years until the maintenance fee exceeds $\" + str(target_amount))\r\n            passed += 1\r\n        else:\r\n            print('  get_years_until(%d) incorrectly returned %d instead of %d\\n' % (target_amount, get_years_until(target_amount), soln(target_amount)))\r\n    \r\n    return round((100 / NUM_SUBTESTS), 1) * passed\r\n\r\n\r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 361, "problem_id": "IterLogic1_countby10s", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a program whose input is two integers. Output the first integer and\nsubsequent increments of 10 as long as the value is less than or equal to the\nsecond integer.\n\nCase #1: If the input is:\n\n    \n    \n    -15\n    30\n    \n\nthe output is:\n\n    \n    \n    -15\n    -5\n    5\n    15\n    25\n    \n\nCase 2: If the second integer is less than the first as in:\n\n    \n    \n    20\n    5\n    \n\nthe output is:\n\n    \n    \n    Second integer can't be less than the first.\n    \n\nFor coding simplicity, output a space after every integer, including the last.\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(starting_value, value_to_count_to):\r\n    result = ''\r\n    \r\n    if value_to_count_to < starting_value:\r\n        return \"Second integer can't be less than the first.\"\r\n    else:\r\n        i = starting_value\r\n        \r\n        while i <= value_to_count_to:\r\n            result += str(i) + \"\\n\"\r\n            i += 10\r\n        \r\n        return result\r\n\r\ndef run_test(random_starting_number, random_ending_number):\r\n    print(\"#--------------------------------------------\")\r\n    print(\"# Testing\", random_starting_number, \"to\", random_ending_number)\r\n    print(\"#--------------------------------------------\")\r\n    \r\n    output, error_message = autograder.run_script(\"IterLogic1_countby10s.py\", [random_starting_number, random_ending_number])\r\n    expected_output = solution(random_starting_number, random_ending_number)\r\n    \r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\\n\")\r\n        return True\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n        print()\r\n    \r\n    return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    \r\n    if run_test(10 * random.randint(1, 5), 60 + 10 * random.randint(1, 20)):\r\n        score += 40\r\n        \r\n    if run_test(random.randint(0, 30), random.randint(31, 200)):\r\n        score += 40\r\n    \r\n    if run_test(random.randint(50, 100), random.randint(0, 10)):\r\n        score += 20\r\n    \r\n    \r\n    return score\r\n\r\n        \r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 362, "problem_id": "IterLogic1_count", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a Python program that gets 2 inputs from the user\n\n  * a number,  **x**\n  * an increment amount,  **y**\n\nYour program will then print out all the numbers from 0 to the user-defined\nvalue (x), counting by the increment amount (y).\n\n**EXAMPLES:**\n\n| Example 1 | Example 2  \n---|---|---  \nInputs | 10  \n2 | 14  \n3  \nOutputs | 0  \n2  \n4  \n6  \n8  \n10 | 0  \n3  \n6  \n9  \n12\n\n\n", "code": "\nx = int(input(\"Enter a number: \"))\ny = int(input(\"Enter an increment amount: \"))\n\nfor i in range(0, x+1, y):\n    print(i)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(value_to_count_to, increment):\r\n    result = ''\r\n    i = 0\r\n    \r\n    while i <= value_to_count_to:\r\n        result += str(i) + \"\\n\"\r\n        i += increment\r\n    \r\n    return result\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_ending_number = 10 + 2 * random.randint(1, 10)\r\n    random_increment = 2\r\n\r\n    output, error_message = autograder.run_script(\"IterLogic1_count.py\", [random_ending_number, random_increment])\r\n    expected_output = solution(random_ending_number, random_increment)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n    \r\n    return 0\r\n\r\n        \r\n# Testbench (to run on outside of zyBooks)\r\nif __name__ == '__main__':   \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 363, "problem_id": "IterLogic1_cargocapacity", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write an algorithm that lets the user input the cargo capacity (in lbs) of\nvarious transport aircraft until the user enters -1. Your program should\noutput the min and max cargo capacity, as well as the number of aircraft that\ncan carry at least 10000 lbs.\n\n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInputs |\n\n4500  \n11000  \n9000  \n-1\n\n|\n\n9999  \n15000  \n3500  \n17500  \n-1\n\n| 10000  \n-1  \nOutputs | 4500  \n11000  \n1 | 3500  \n17500  \n2 | 10000  \n10000  \n1\n\n\n", "code": "\ndef aircraft_cargo():\n    min_capacity = float('inf')\n    max_capacity = float('-inf')\n    count = 0\n    \n    while True:\n        capacity = int(input(\"Enter the cargo capacity (in lbs) of the aircraft: \"))\n        \n        if capacity == -1:\n            break\n            \n        min_capacity = min(min_capacity, capacity)\n        max_capacity = max(max_capacity, capacity)\n        \n        if capacity >= 10000:\n            count += 1\n    \n    print(\"Min cargo capacity:\", min_capacity)\n    print(\"Max cargo capacity:\", max_capacity)\n    print(\"Number of aircraft that can carry at least 10000 lbs:\", count)\n\naircraft_cargo()\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0.0\r\n    \r\n    possible_tests = [[8000, 12000, 25000, 10000, 7500, -1], [5000, 9000, 22000, 10000, 8700, -1], [9999, 5000, 3000, -1]]\r\n    possible_output = [[7500, 25000, 3], [5000, 22000, 2], [3000, 9999, 0]]\r\n    \r\n    # Generates a Random Test\r\n    random_index = random.randint(0, len(possible_tests)-1)\r\n    random_test = possible_tests[random_index]\r\n    expected_output = possible_output[random_index]\r\n            \r\n    output, error = autograder.run_script(\"IterLogic1_cargocapacity.py\", random_test)\r\n    \r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):\r\n        print(\"Min Value is Correct\")\r\n        score += 30\r\n    else:\r\n        print(\"Min Value is Incorrect.  Expected\", expected_output[0])\r\n    \r\n    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):\r\n        print(\"Max Value is Correct\")\r\n        score += 30\r\n    else:\r\n        print(\"Max Value is Incorrect.  Expected\", expected_output[1])\r\n        \r\n    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):\r\n        print(\"Number of Aircraft with At Least 10000 lbs is Correct\")\r\n        score += 40\r\n    else:\r\n        print(\"Number of Aircraft with At Least 10000 lbs is Incorrect.  Expected\", expected_output[2])\r\n    \r\n    return score\r\n\r\n\r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 364, "problem_id": "IterLogic1_averagerun", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** In, Python, write an algorithm that first asks the user how many PFT run\ntimes to input and then gets that many values from the user. Output the\naverage of all the run times. You can assume there is at least one run time to\ninput.\n\n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInputs | 6  \n98  \n75  \n88  \n82  \n94  \n100 | 5  \n99  \n83  \n79  \n86  \n87 | 4  \n88  \n82  \n80  \n90  \nOutputs | 89.5 | 86.8 | 85\n\n\n", "code": "\nnum_times = int(input(\"How many PFT run times do you want to input? \"))\n\nsum_times = 0\nfor _ in range(num_times):\n    time = float(input(\"Enter a run time: \"))\n    sum_times += time\n\naverage_time = sum_times / num_times\nprint(\"The average run time is:\", average_time)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    NUM_TESTS = 5\r\n    num_tests_passed = 0\r\n\r\n    for i in range(NUM_TESTS):\r\n        print(\"Running Test \" + str(i) + \":\")\r\n        \r\n        num_inputs = random.randint(2, 11)\r\n        inputs = [num_inputs]\r\n        sum = 0\r\n        \r\n        for j in range(num_inputs):\r\n            value = random.randint(70, 130)\r\n            sum += value\r\n            inputs.append(value)\r\n               \r\n        avg = sum / (len(inputs) - 1)   \r\n               \r\n        # Runs the Script\r\n        output, error_message = autograder.run_script(\"IterLogic1_averagerun.py\", inputs)\r\n        \r\n        # Extracts the Output\r\n        lines = output.split(\"\\n\")\r\n        \r\n        if (len(lines) > 0):            \r\n            if (autograder.equals(lines[0], avg)):\r\n                print(\"CORRECT\\n\")\r\n                num_tests_passed += 1\r\n            else:\r\n                print(\"INCORRECT.  Expected: \" + str(avg) + \"\\n\")\r\n\r\n    # Result\r\n    return (100 / NUM_TESTS) * num_tests_passed\r\n            \r\n\r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 365, "problem_id": "Graphics3_soundboard", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Using PythonGraph, create a \"soundboard\" application. Your program should\ndisplay a list of colored buttons (i.e., rectangles). When the user clicks\ninside of a rectangle, the program plays a different\nsound.[](https://canvas.instructure.com/courses/1762383/files/86200052/download?download_frd=1)\n\nThe provided template file comes with a single button implemented. Your job is\nto study this code and create at least 5 other buttons. Note: The buttons do\nnot have to be laid out in the same arrangement, but they should look\norganized.\n\nWhen you are finished, upload your Python code. Do NOT upload any of the sound\nfiles.\n\n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"Graphics3_soundboard.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 366, "problem_id": "Graphics3_paint", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nUsing PythonGraph, create a simple paint application. Your program should draw\ncircles on the window whenever the user presses the left mouse button. Your\nprogram should also watch for keyboard inputs, and allow the user to change\ncolors and the size of the circle by pressing on different keys of your\nchoice.\n\nThe code template of a paint program has been provided to you as a starting\npoint in paint. Use this code and make the necessary modifications in the\nAnimation while loop.\n\nWhen you are finished, upload your Python code.\n\n\n", "code": "import pygame\nimport sys\n\nfrom pygame.locals import *\nfrom pythongraph import *\n\nWIDTH = 640\nHEIGHT = 480\n\ncircle_color = (255, 0, 0)\ncircle_radius = 10\n\ndef main():\n    graph.init(GraphWin(\"Paint Program\", WIDTH, HEIGHT))\n\n    while True:\n        graph.update()\n\n        if graph.mouseClicked():\n            point = graph.getMouse()\n            draw_circle(point.getX(), point.getY())\n\n        if graph.keyPressed():\n            key = graph.getKey()\n\n            if key == 'r':\n                circle_color = (255, 0, 0)\n            elif key == 'g':\n                circle_color = (0, 255, 0)\n            elif key == 'b':\n                circle_color = (0, 0, 255)\n            elif key == 's':\n                circle_radius += 5\n            elif key == 'd':\n                circle_radius -= 5\n\n                if circle_radius < 0:\n                    circle_radius = 0\n\ndef draw_circle(x, y):\n    circle = Circle(Point(x, y), circle_radius)\n    circle.setOutline(circle_color)\n    circle.draw(graph)\n\nif __name__ == \"__main__\":\n    main()", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"Graphics3_paint.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 367, "problem_id": "Graphics2_bouncingtriangle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Using the Bouncing Ball from the previous lab as a starting point, generate\nan animation of a bouncing triangle. The triangle's vertices should start at\nrandom locations, and bounce whenever the triangle hits a wall.\n\n\n\n\n\n**HINTS** :\n\n  * Try drawing 3 bouncing balls on the screen.\n  * Once the balls are moving correctly, draw 3 lines to connect them!\n\n\n", "code": "\nimport pygame\nimport random\n\n# Initialize Pygame\npygame.init()\n\n# Set up the screen\nscreen_width = 800\nscreen_height = 600\nscreen = pygame.display.set_mode((screen_width, screen_height))\npygame.display.set_caption('Bouncing Triangle')\n\n# Set up colors\nWHITE = (255, 255, 255)\n\n# Set up triangle vertices\nvertices = [\n    [random.randint(0, screen_width), random.randint(0, screen_height)],\n    [random.randint(0, screen_width), random.randint(0, screen_height)],\n    [random.randint(0, screen_width), random.randint(0, screen_height)]\n]\n\n# Set up initial velocities for triangle vertices\nvelocities = [\n    [random.randint(1, 5), random.randint(1, 5)],\n    [random.randint(1, 5), random.randint(1, 5)],\n    [random.randint(1, 5), random.randint(1, 5)]\n]\n\n# Game loop\nrunning = True\nclock = pygame.time.Clock()\n\nwhile running:\n    # Check for events\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n\n    # Clear the screen\n    screen.fill(WHITE)\n\n    # Move triangle vertices\n    for i in range(3):\n        vertices[i][0] += velocities[i][0]\n        vertices[i][1] += velocities[i][1]\n        \n        # Bounce when hitting a wall\n        if vertices[i][0] <= 0 or vertices[i][0] >= screen_width:\n            velocities[i][0] = -velocities[i][0]\n        if vertices[i][1] <= 0 or vertices[i][1] >= screen_height:\n            velocities[i][1] = -velocities[i][1]\n\n    # Draw triangle\n    pygame.draw.polygon(screen, (0,0,0), vertices)\n\n    # Update the screen\n    pygame.display.update()\n    clock.tick(60)\n\n# Quit the program\npygame.quit()\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"Graphics2_bouncingtriangle.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 368, "problem_id": "Graphics2_bouncingball", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Using the pythonGraph animation template, create an animation of a bouncing\nball. Your ball should start at a random location, and change direction each\ntime it hits a side, top, or bottom of the window.  \n  \n\n\n\n**CHALLENGE:**\n\n  1. Try to make the ball change color every time it hits a wall.\n\n\n\n\n", "code": "\nimport random\nimport tkinter as tk\nfrom tkinter import ttk\n\n# Create a class for the bouncing ball animation\nclass BouncingBallAnimation:\n    def __init__(self, canvas, ball_radius, ball_color):\n        self.canvas = canvas\n        self.ball_radius = ball_radius\n        self.ball_color = ball_color\n        \n        # Initialize the ball position, speed, and direction\n        self.ball_x = random.randint(ball_radius, int(canvas['width']) - ball_radius)\n        self.ball_y = random.randint(ball_radius, int(canvas['height']) - ball_radius)\n        self.ball_dx = random.choice([-1, 1])\n        self.ball_dy = random.choice([-1, 1])\n        \n        # Create the ball in the canvas\n        self.ball = self.canvas.create_oval(self.ball_x - ball_radius, self.ball_y - ball_radius,\n                                            self.ball_x + ball_radius, self.ball_y + ball_radius,\n                                            fill=ball_color)\n    \n    def animate(self):\n        # Update the ball position\n        self.ball_x += self.ball_dx\n        self.ball_y += self.ball_dy\n        \n        # Check for collision with walls\n        if self.ball_x + self.ball_radius >= int(self.canvas['width']) or self.ball_x - self.ball_radius <= 0:\n            self.ball_dx *= -1\n            self.change_ball_color()\n        \n        if self.ball_y + self.ball_radius >= int(self.canvas['height']) or self.ball_y - self.ball_radius <= 0:\n            self.ball_dy *= -1\n            self.change_ball_color()\n        \n        # Move the ball in the canvas\n        self.canvas.move(self.ball, self.ball_dx, self.ball_dy)\n        \n        # Call the animate method again after a delay\n        self.canvas.after(10, self.animate)\n    \n    def change_ball_color(self):\n        # Generate a new random RGB color for the ball\n        new_color = \"#{:06x}\".format(random.randint(0, 0xFFFFFF))\n        \n        # Change the ball color in the canvas\n        self.canvas.itemconfig(self.ball, fill=new_color)\n\n# Create the main window\nwindow = tk.Tk()\nwindow.title(\"Bouncing Ball Animation\")\n\n# Create the canvas for the animation\ncanvas = tk.Canvas(window, width=500, height=500)\ncanvas.pack()\n\n# Create a bouncing ball animation object\nball_animation = BouncingBallAnimation(canvas, 25, \"red\")\n\n# Start the animation\nball_animation.animate()\n\n# Run the tkinter event loop\nwindow.mainloop()\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"Graphics2_bouncingball.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 369, "problem_id": "FileIO_echo", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite a program that asks the user to type the name of a file (e.g.,\n\"file.txt\"), and a letter. Your program should then open the file, and print\nout all of the lines where the first character starts with the letter\n\nFor example, if the user types the following filename:\n\n    \n    \n    input1.txt\n    a\n    \n\nand the contents of input1.txt are:\n\n    \n    \n    aspiration\n    classified\n    federation\n    \n\nthe output should be:\n\n    \n    \n    aspiration\n    \n\n\n\nNotes:\n\n  * Each line ends with the '\\n' character. Use `split()` to get each line.\n  * Refer to the String Functions slide to see how you can get the first character from a string\n\n\n", "code": "\nfilename = input(\"Enter the name of the file: \")\nletter = input(\"Enter a letter: \")\n\nwith open(filename, 'r') as file:\n    lines = file.readlines()\n\nfor line in lines:\n    if line[0].lower() == letter.lower():\n        print(line.strip())\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(filename, letter):\r\n    result = ''\r\n    \r\n    file = open(filename, \"r\")\r\n    contents = file.read()\r\n    lines = contents.split(\"\\n\")\r\n\r\n    for line in lines:\r\n        if line[0] == letter:\r\n            result += line + \"\\n\"\r\n\r\n    file.close()\r\n\r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_letter = chr(random.randint(97, 122))\r\n    \r\n    output, error_message = autograder.run_script(\"FileIO_echo.py\", [\"file.txt\", random_letter])\r\n    expected_output = solution(\"file.txt\", random_letter)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    expected_lines = expected_output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_lines)\r\n    \r\n    if num_matches == len(lines):\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT\")\r\n        return 0.0\r\n        \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 370, "problem_id": "a3_3_chars3", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a list called `list_of_characters`. Write a\nprogram that prints out each of the items in this list (one item per line).  \n\n\n\n**EXAMPLE:  \n** If, for example, the list was:  [\"ab\", \"cd\", \"ef\"]\n\nYour program should print:\n\n    \n    \n    ab  \n    cd  \n    ef\n\n\n\n**NOTE:**\n\n  * You must use a loop to complete this task.  \n\n\n# AUTOGRADER IMPORT REMOVED\n\n# --------------------------------------------------------------\n# Assessment #3, Problem 3\n# --------------------------------------------------------------\n\n# This list is being provided to you.  DO NOT TOUCH!\nlist_of_characters = [\"sp\",\"jm\",\"bt\",\"cv\",\"ti\",\"nn\",\"ig\",\"au\",\"hi\",\"vc\",\"om\",\"pf\",\"tk\",\"ve\",\"xd\",\"sj\",\"bg\",\"pk\",\"rk\",\"vy\",\"uz\",\"uv\",\"jp\",\"wg\",\"zi\",\"eg\",\"ov\",\"zt\",\"sb\",\"ki\",\"ua\",\"ft\",\"hq\",\"ik\",\"xq\",\"hz\",\"dh\",\"gx\",\"gg\",\"jg\",\"dm\",\"pb\",\"oq\",\"tm\",\"mx\",\"nh\",\"kv\",\"qk\",\"ml\",\"li\",\"di\",\"iy\",\"sr\",\"ps\",\"rz\",\"jl\",\"mr\",\"na\",\"ax\",\"qb\",\"xt\",\"fe\",\"ay\",\"iv\",\"kn\",\"ky\",\"uh\",\"dq\",\"ib\",\"jz\",\"vb\",\"fq\",\"je\",\"cy\",\"wy\",\"xo\",\"ex\",\"tg\",\"jw\",\"ii\",\"cd\",\"do\",\"nw\",\"zh\",\"el\",\"tu\",\"it\",\"kb\",\"wp\",\"js\",\"ei\",\"fz\",\"ea\",\"ie\",\"ts\",\"md\",\"px\",\"sq\",\"nm\",\"gi\"]\n\n#Your code goes here.", "code": "\nfor character in list_of_characters:\n    print(character)\n", "testcase": "from cs110 import autograder\r\nimport random, math, traceback\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    try:        \r\n        output, error = autograder.run_script(\"a3_3_chars3.py\", [])\r\n        expected_output = \"sp\\njm\\nbt\\ncv\\nti\\nnn\\nig\\nau\\nhi\\nvc\\nom\\npf\\ntk\\nve\\nxd\\nsj\\nbg\\npk\\nrk\\nvy\\nuz\\nuv\\njp\\nwg\\nzi\\neg\\nov\\nzt\\nsb\\nki\\nua\\nft\\nhq\\nik\\nxq\\nhz\\ndh\\ngx\\ngg\\njg\\ndm\\npb\\noq\\ntm\\nmx\\nnh\\nkv\\nqk\\nml\\nli\\ndi\\niy\\nsr\\nps\\nrz\\njl\\nmr\\nna\\nax\\nqb\\nxt\\nfe\\nay\\niv\\nkn\\nky\\nuh\\ndq\\nib\\njz\\nvb\\nfq\\nje\\ncy\\nwy\\nxo\\nex\\ntg\\njw\\nii\\ncd\\ndo\\nnw\\nzh\\nel\\ntu\\nit\\nkb\\nwp\\njs\\nei\\nfz\\nea\\nie\\nts\\nmd\\npx\\nsq\\nnm\\ngi\\n\"\r\n        \r\n        if error == \"\":\r\n            student_lines = output.strip().split('\\n')\r\n            expected_lines = expected_output.strip().split('\\n')\r\n                \r\n            for idx in range(len(student_lines)):\r\n                if idx < len(student_lines) and idx < len(expected_lines):\r\n                    if student_lines[idx] == expected_lines[idx]:\r\n                        score += 100 / len(expected_lines)\r\n            \r\n            if score < 100.0:\r\n                print(\"**** Start of Expected Output ****\")\r\n                print(expected_output)\r\n                print(\"INCORRECT: Missing Entries, Expected the above ^^\")\r\n            else:\r\n                print(\"CORRECT!\")\r\n            \r\n            return round(score, 1)\r\n        else:\r\n            print(\"INCORRECT: There was an error while running your code.\\n\")\r\n            print(error)\r\n            \r\n            return 0\r\n    \r\n    except Exception as e:\r\n        print(\"There was an error while running your code.\")\r\n        print(traceback.print_exc())\r\n        if score == 100:\r\n            return 90\r\n        else:\r\n            return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 371, "problem_id": "a3_3_chars2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a list called `list_of_characters`. Write a\nprogram that prints out each of the items in this list (one item per line).  \n\n\n\n**EXAMPLE:  \n** If, for example, the list was:  [\"ab\", \"cd\", \"ef\"]\n\nYour program should print:\n\n    \n    \n    ab  \n    cd  \n    ef\n\n\n\n**NOTE:**\n\n  * You must use a loop to complete this task.  \n\n\n# AUTOGRADER IMPORT REMOVED\n\n# --------------------------------------------------------------\n# Assessment #3, Problem 3\n# --------------------------------------------------------------\n\n# This list is being provided to you.  DO NOT TOUCH!\nlist_of_characters = [\"ao\",\"rh\",\"vs\",\"rf\",\"et\",\"sm\",\"eg\",\"wf\",\"pp\",\"mr\",\"iq\",\"ti\",\"pn\",\"pm\",\"lx\",\"ie\",\"qh\",\"ls\",\"gy\",\"zv\",\"op\",\"tc\",\"lt\",\"vb\",\"wh\",\"xk\",\"qx\",\"ud\",\"rv\",\"oa\",\"dr\",\"gk\",\"qk\",\"er\",\"mw\",\"ea\",\"dg\",\"by\",\"xa\",\"gn\",\"br\",\"ve\",\"pr\",\"oy\",\"xw\",\"wy\",\"xi\",\"bs\",\"ae\",\"lz\",\"nb\",\"iy\",\"sz\",\"yf\",\"gs\",\"jc\",\"zy\",\"xv\",\"nn\",\"vm\",\"xt\",\"up\",\"rn\",\"it\",\"yc\",\"wn\",\"hp\",\"zp\",\"ey\",\"fy\",\"ld\",\"gd\",\"is\",\"yk\",\"fi\",\"vi\",\"qq\",\"yo\",\"tj\",\"en\",\"zm\",\"rc\",\"os\",\"qz\",\"yu\",\"mv\",\"ke\",\"my\",\"qe\",\"az\",\"un\",\"ox\",\"vy\",\"ou\",\"ia\",\"yh\",\"ne\",\"wd\",\"bb\",\"dt\"]\n\n#Your code goes here.", "code": "\nfor character in list_of_characters:\n    print(character)\n", "testcase": "from cs110 import autograder\r\nimport random, math, traceback\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    try:        \r\n        output, error = autograder.run_script(\"a3_3_chars2.py\", [])\r\n        expected_output = \"ao\\nrh\\nvs\\nrf\\net\\nsm\\neg\\nwf\\npp\\nmr\\niq\\nti\\npn\\npm\\nlx\\nie\\nqh\\nls\\ngy\\nzv\\nop\\ntc\\nlt\\nvb\\nwh\\nxk\\nqx\\nud\\nrv\\noa\\ndr\\ngk\\nqk\\ner\\nmw\\nea\\ndg\\nby\\nxa\\ngn\\nbr\\nve\\npr\\noy\\nxw\\nwy\\nxi\\nbs\\nae\\nlz\\nnb\\niy\\nsz\\nyf\\ngs\\njc\\nzy\\nxv\\nnn\\nvm\\nxt\\nup\\nrn\\nit\\nyc\\nwn\\nhp\\nzp\\ney\\nfy\\nld\\ngd\\nis\\nyk\\nfi\\nvi\\nqq\\nyo\\ntj\\nen\\nzm\\nrc\\nos\\nqz\\nyu\\nmv\\nke\\nmy\\nqe\\naz\\nun\\nox\\nvy\\nou\\nia\\nyh\\nne\\nwd\\nbb\\ndt\\n\"\r\n\r\n        if error == \"\":\r\n            student_lines = output.strip().split('\\n')\r\n            expected_lines = expected_output.strip().split('\\n')\r\n            \r\n            for idx in range(len(student_lines)):\r\n                if idx < len(student_lines) and idx < len(expected_lines):\r\n                    if student_lines[idx] == expected_lines[idx]:\r\n                        score += 100 / len(expected_lines)\r\n            \r\n            if score < 100.0:\r\n                print(\"**** Start of Expected Output ****\")\r\n                print(expected_output)\r\n                print(\"INCORRECT: Missing Entries, Expected the above ^^\")\r\n            else:\r\n                print(\"CORRECT!\")\r\n            \r\n            return round(score, 1)\r\n        else:\r\n            print(\"INCORRECT: There was an error while running your code.\\n\")\r\n            print(error)\r\n            \r\n            return 0\r\n    \r\n    except Exception as e:\r\n        print(\"There was an error while running your code.\")\r\n        print(traceback.print_exc())\r\n        return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 372, "problem_id": "a3_3_chars1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a list called `list_of_characters`. Write a\nprogram that prints out each of the items in this list (one item per line).  \n\n\n\n**EXAMPLE:  \n** If, for example, the list was:  [\"ab\", \"cd\", \"ef\"]\n\nYour program should print:\n\n    \n    \n    ab  \n    cd  \n    ef\n\n\n\n**NOTE:**\n\n  * You must use a loop to complete this task.  \n\n\n# AUTOGRADER IMPORT REMOVED\n\n# --------------------------------------------------------------\n# Assessment #3, Problem 3\n# --------------------------------------------------------------\n\n# This list is being provided to you.  DO NOT TOUCH!\nlist_of_characters = [\"mz\",\"nz\",\"oe\",\"pq\",\"zy\",\"uu\",\"ir\",\"gy\",\"tl\",\"pd\",\"lb\",\"ks\",\"uf\",\"vj\",\"as\",\"kh\",\"pr\",\"am\",\"cd\",\"lh\",\"ci\",\"sg\",\"zt\",\"wn\",\"np\",\"vt\",\"me\",\"gs\",\"qs\",\"we\",\"xt\",\"rc\",\"kw\",\"xw\",\"yk\",\"in\",\"eq\",\"kt\",\"fr\",\"wi\",\"ku\",\"aj\",\"or\",\"oz\",\"po\",\"vo\",\"go\",\"xo\",\"xx\",\"ca\",\"xj\",\"cj\",\"wj\",\"xp\",\"jd\",\"fo\",\"xq\",\"nj\",\"bq\",\"lr\",\"dw\",\"my\",\"hj\",\"ve\",\"cq\",\"do\",\"jq\",\"ld\",\"kl\",\"eu\",\"gw\",\"jy\",\"vd\",\"au\",\"wq\",\"nt\",\"gd\",\"vx\",\"xz\",\"ao\",\"tu\",\"xb\",\"yd\",\"ki\",\"kj\",\"ns\",\"da\",\"pv\",\"rq\",\"vf\",\"xi\",\"lo\",\"ue\",\"aa\",\"ct\",\"xr\",\"xn\",\"mr\",\"iv\",\"mu\"]\n\n#Your code goes here.", "code": "\nfor character in list_of_characters:\n    print(character)\n", "testcase": "from cs110 import autograder\r\nimport random, math, traceback\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    try:        \r\n        output, error = autograder.run_script(\"a3_3_chars1.py\", [])\r\n        expected_output = \"mz\\nnz\\noe\\npq\\nzy\\nuu\\nir\\ngy\\ntl\\npd\\nlb\\nks\\nuf\\nvj\\nas\\nkh\\npr\\nam\\ncd\\nlh\\nci\\nsg\\nzt\\nwn\\nnp\\nvt\\nme\\ngs\\nqs\\nwe\\nxt\\nrc\\nkw\\nxw\\nyk\\nin\\neq\\nkt\\nfr\\nwi\\nku\\naj\\nor\\noz\\npo\\nvo\\ngo\\nxo\\nxx\\nca\\nxj\\ncj\\nwj\\nxp\\njd\\nfo\\nxq\\nnj\\nbq\\nlr\\ndw\\nmy\\nhj\\nve\\ncq\\ndo\\njq\\nld\\nkl\\neu\\ngw\\njy\\nvd\\nau\\nwq\\nnt\\ngd\\nvx\\nxz\\nao\\ntu\\nxb\\nyd\\nki\\nkj\\nns\\nda\\npv\\nrq\\nvf\\nxi\\nlo\\nue\\naa\\nct\\nxr\\nxn\\nmr\\niv\\nmu\\n\"\r\n        \r\n        if error == \"\":\r\n            student_lines = output.strip().split('\\n')\r\n            expected_lines = expected_output.strip().split('\\n')\r\n                \r\n            for idx in range(len(student_lines)):\r\n                if idx < len(student_lines) and idx < len(expected_lines):\r\n                    if student_lines[idx] == expected_lines[idx]:\r\n                        score += 100 / len(expected_lines)\r\n            \r\n            if score < 100.0:\r\n                print(\"**** Start of Expected Output ****\")\r\n                print(expected_output)\r\n                print(\"INCORRECT: Missing Entries, Expected the above ^^\")\r\n            else:\r\n                print(\"CORRECT!\")\r\n            \r\n            return round(score, 1)\r\n        else:\r\n            print(\"INCORRECT: There was an error while running your code.\\n\")\r\n            print(error)\r\n            \r\n            return 0\r\n    \r\n    except Exception as e:\r\n        print(\"There was an error while running your code.\")\r\n        print(traceback.print_exc())\r\n        return score\r\n    \r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 373, "problem_id": "lsn7_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a program that gets a course name and number\n(e.g., Math 243) from the user. Modify the program to do the following:\n\n  * If the course name is equal to \"CS110\", print \"You get to program!\"\n  * Otherwise, print \"Boo, no programming.\"\n\n\n", "code": "\ncourse_name = input(\"Enter the course name: \")\ncourse_number = input(\"Enter the course number: \")\n\nif course_name == \"CS110\":\n    print(\"You get to program!\")\nelse:\n    print(\"Boo, no programming.\")\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    points_earned = 0\r\n            \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 1 - CS110\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn7_skill2.py\", [\"CS110\"])\r\n    \r\n    if output.strip() == \"You get to program!\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 50\r\n    else:\r\n        print(\"Incorrect.  Expected: You get to program!\\n\")\r\n        \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 2 - Another Class\")\r\n    print(\"-------------------------------\")\r\n    classes = ['Math 151', 'English 111', 'Physics 110']\r\n    random_class = classes[random.randint(0, len(classes)-1)]\r\n    output, error_message = autograder.run_script(\"lsn7_skill2.py\", [random_class])\r\n    \r\n    if output.strip() == \"Boo, no programming.\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 50\r\n    else:\r\n        print(\"Incorrect.  Expected: Boo, no programming.\\n\")\r\n\r\n    return points_earned\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 374, "problem_id": "a2_5_virus", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou are writing a program that will help you decide if there are too many\npeople at a restaurant for you to dine safely. Your program will ask for the\nnumber of people in the restaurant. It will then ask for the distance between\nyourself and each of the people (in feet, which do not have to be whole\nnumbers). Your program will keep track of how many people are within 6 feet of\nyou (inclusive). Your program will then print one of the following statements:\n\n**# of People within 6 Feet** | **0** | **1-2** | **> 2**  \n---|---|---|---  \n**Output** | All Clear | Warning | Find Another Place  \n  \n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**INPUT** | 3  \n5.7  \n10.2  \n12.4 | 2  \n7.0  \n15.1  \n**OUTPUT** | Warning | All Clear\n\n\n", "code": "\ndef check_safety():\n    num_people = int(input(\"Enter the number of people in the restaurant: \"))\n    people_within_6_feet = 0\n    \n    for i in range(num_people):\n        distance = float(input(\"Enter the distance between yourself and person {}: \".format(i+1)))\n        if distance <= 6:\n            people_within_6_feet += 1\n    \n    if people_within_6_feet == 0:\n        print(\"All Clear\")\n    elif people_within_6_feet <= 2:\n        print(\"Warning\")\n    else:\n        print(\"Find Another Place\")\n\ncheck_safety()\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(num_violating, num_people):    \r\n    inputs = [num_people]\r\n    \r\n    for i in range(num_people):\r\n        if i < num_violating:\r\n            if (i + 1 == num_violating):\r\n                inputs.append(6)\r\n            else:\r\n                inputs.append(round(random.uniform(0, 6), 1))\r\n        else:\r\n            inputs.append(round(random.uniform(7, 20), 1))\r\n\r\n    # Generates Expected Answer\r\n    if num_violating == 0:\r\n        answer = \"All Clear\"\r\n    elif num_violating <= 2:\r\n        answer = \"Warning\"\r\n    else:\r\n        answer = \"Find Another Place\"\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"a2_5_virus.py\", inputs)\r\n    \r\n    print(\"Testing when\", num_violating, \"out of\", num_people, \"are violating . . . \")\r\n    print(\"  Inputs:\", inputs)\r\n    print(\"  Result: \", end='')\r\n    \r\n    if answer.strip() == output.strip():\r\n        print(\"CORRECT!\\n\")\r\n        return True\r\n    else:\r\n        print(\"INCORRECT. Expected: '\" + answer + \"' instead of '\" + output + \"'\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    num_passed = 0\r\n    \r\n    if (run_test(0, random.randint(1, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(1, random.randint(1, 2))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(2, random.randint(3, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(3, random.randint(3, 5))):\r\n        num_passed += 1\r\n        \r\n    return (100 / 4) * num_passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 375, "problem_id": "a2_5_gameday", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nThe Academy Athletic Director asked you are to write a program that will\ndetermine whether or not a football game in progress should be delayed based\non current weather conditions. Your program will ask for the number of\nlightning strikes occurred in the immediate area in the past thirty minutes.\nIt will then ask for the distance from Falcon Stadium to each lightning strike\n(in miles, which do not have to be whole numbers). Your program will keep\ntrack of how many lightning strikes are within 15 miles of the stadium\n(inclusive). Your program will then print one of the following statements:\n\n**# of lightning strikes in immediate area** | **0** | **1-3** | **> 3**  \n---|---|---|---  \n**Output** | All Clear | Weather Warning | Game Delay  \n  \n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**INPUT** |\n\n4\n\n15.0\n\n13.2\n\n6.5\n\n9.8\n\n|\n\n3\n\n17.8\n\n15.1\n\n19.0\n\n  \n  \n**OUTPUT** | Game Delay | All Clear  \n  \n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(num_close, num_strikes):    \r\n    inputs = [num_strikes]\r\n    \r\n    for i in range(num_strikes):\r\n        if i < num_close:\r\n            if (i + 1 == num_close):\r\n                inputs.append(15)\r\n            else:\r\n                inputs.append(round(random.uniform(0, 15), 1))\r\n        else:\r\n            inputs.append(round(random.uniform(15, 50), 1))\r\n\r\n    # Generates Expected Answer\r\n    if num_close == 0:\r\n        answer = \"All Clear\"\r\n    elif num_close <= 2:\r\n        answer = \"Weather Warning\"\r\n    else:\r\n        answer = \"Game Delay\"\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"a2_5_gameday.py\", inputs)\r\n    \r\n    print(\"Testing when\", num_close, \"out of\", num_strikes, \"\\\"strikes\\\" are are close . . . \")\r\n    print(\"  Inputs:\", inputs)\r\n    print(\"  Result: \", end='')\r\n    \r\n    if answer.strip() == output.strip():\r\n        print(\"CORRECT!\\n\")\r\n        return True\r\n    else:\r\n        print(\"INCORRECT. Expected: '\" + answer + \"' instead of '\" + output + \"'\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    num_passed = 0\r\n    \r\n    if (run_test(0, random.randint(2, 5))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(1, random.randint(1, 2))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(2, random.randint(4, 6))):\r\n        num_passed += 1\r\n    \r\n    if (run_test(4, random.randint(4, 6))):\r\n        num_passed += 1\r\n        \r\n    return (100 / 4) * num_passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 376, "problem_id": "lsn9_triangle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a function that computes the area of a triangle. You will name your\nfunction `area_triangle()`. It has two parameters, the height of the triangle,\n`height`, and the length of the base, `base`. The `area_triangle()` function\nwill print the area of the triangle.\n\n**IMPORTANT:  \n** You are encouraged to write code to test your function. However, when you\nsubmit to the server for grading, only the function will be tested.\n\n\n", "code": "\ndef area_triangle(height, base):\n    area = 0.5 * height * base\n    print(\"The area of the triangle is\", area)\n\narea_triangle(5, 8)\n```\nOutput:\nThe area of the triangle is 20.0", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport lsn9_triangle\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    base = round(random.uniform(1.0, 10.0), 1)\r\n    height = round(random.uniform(1.0, 10.0), 1)\r\n    output, error_message = autograder.run_script(\"lsn9_triangle.py\", [base, height])\r\n    \r\n    area = (base * height) / 2.0\r\n    score = 0\r\n    \r\n    if \"area_triangle\" in dir(lsn9_triangle):\r\n        print(\"Function Correctly Defined\")\r\n        score += 50\r\n    else:\r\n        print(\"Function does not exist.  Check to make sure the name matches the prompt\")\r\n    \r\n    if autograder.equals(output, area):\r\n        print(\"Function produces correct output\")\r\n        score += 50\r\n    else:\r\n        print(\"Function produces incorrect output. Expected:\", area)\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 377, "problem_id": "lsn4_projectile", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nWrite a python program that can calculate the range of a projectile when fired\nfrom an artillery on level ground. Your program will ask the user to input the\ninitial velocity (`v`) and angle in degrees (`theta`). Your program should\nthen calculate and print the range using the following formula:\n\n`range = (v^2 * sin(2 * theta)) / 9.8`  \n **WARNING: The above formula is not valid Python.**  \n  \n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 800  \n45 | 600  \n30 | 535.2  \n81.7  \nOutput | 65306.122 | 31813.178 | 8350.235  \n  \n**Hints**\n\n  * You need to use the `math` module's trig functions to solve this problem. Type `import math` at the top of your code to add it to your program.\n  * The `sin()` and `cos()` functions assume that the angle is in  **radians**\n\n\n", "code": "\nimport math\n\nv = float(input(\"Enter initial velocity: \"))\ntheta = math.radians(float(input(\"Enter angle in degrees: \")))\n\nrange = (v**2 * math.sin(2 * theta)) / 9.8\n\nprint(\"The range of the projectile is:\", range)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    NUM_TESTS = 5\r\n    num_correct = 0\r\n    \r\n    for i in range(NUM_TESTS):\r\n        # Generates Random Values\r\n        velocity = random.randint(400, 900)\r\n        theta = random.random() * 90.0\r\n        answer = (velocity**2 * math.sin(2 * theta * math.pi/180.0)) / 9.8\r\n        incorrect_degrees_answer = (velocity**2 * math.sin(2 * theta)) / 9.8\r\n            \r\n        print(\"----------------------------------------\")\r\n        print(\"TEST CASE\", i+1)\r\n        print(\"----------------------------------------\")\r\n        \r\n        # Runs the Script\r\n        output, error_message = autograder.run_script(\"lsn4_projectile.py\", [velocity, theta])\r\n\r\n        # Optional:  Displays the Error Message (if one is provided)\r\n        if error_message != '':\r\n            print(\"Error Occurred: \" + error_message)    \r\n        \r\n        lines = output.split('\\n')\r\n        \r\n        if autograder.equals(lines[0], answer, 10.0):\r\n            print(\"CORRECT.\\n\\n\")\r\n            num_correct += 1\r\n        elif autograder.equals(lines[0], incorrect_degrees_answer, 10.0):\r\n            print(\"INCORRECT BUT CLOSE: Using Degrees Instead of Radians for math.sin()\")\r\n        else:\r\n            print(\"INCORRECT (Expected: \" + str(answer) + \")\\n\\n\")\r\n    \r\n    return (100 / NUM_TESTS) * num_correct\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "timed out", "score": 0, "text": ""}, {"Unnamed: 0": 378, "problem_id": "lsn3_pointspread", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nA \"Point Spread\" is a term used to in sports (and gambling) to describe the\ndifference between two teams' scores. For example, if one team scores 20\npoints and another team scores 30 points, the point spread is 10. A point\nspread is always a positive number.\n\nWrite an algorithm that prompts the user for two sports game scores and\noutputs the point spread.  \n  \n**  \nEXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 8  \n15 | 89  \n103 | 42  \n14  \nOutput | 7 | 14 | 28  \n  \n**Note: Output must match exactly.**\n\n\n", "code": "\n# Prompt the user for the scores of two sports games\nscore1 = int(input(\"Enter the score for the first game: \"))\nscore2 = int(input(\"Enter the score for the second game: \"))\n\n# Calculate the point spread\npoint_spread = abs(score1 - score2)\n\n# Output the point spread\nprint(point_spread)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    score1 = random.randint(0, 50)\r\n    score2 = random.randint(score1, 100)\r\n    spread = abs(score1 - score2)\r\n\r\n    points_earned = 0\r\n\r\n    # Trial #1:  score 1 > score2\r\n    print(\"Testing when score 1 is bigger than score 2 . . .\")\r\n    output, error_message = autograder.run_script(\"lsn3_pointspread.py\", [score1, score2])\r\n    \r\n    if autograder.equals(output, spread):\r\n        print(\"PASSED!\\n\")\r\n        points_earned += 50\r\n    else:\r\n        print(\"Value doesn't match.\\nExpected: \" + str(spread)  + \"\\n\")\r\n        \r\n    # Trial #2:  score 2 > score1\r\n    print(\"Testing when score 2 is bigger than score 1 . . .\")\r\n    output, error_message = autograder.run_script(\"lsn3_pointspread.py\", [score2, score1])\r\n    \r\n    if autograder.equals(output, spread):\r\n        print(\"PASSED!\")\r\n        points_earned += 50\r\n    else:\r\n        print(\"Value doesn't match.\\nExpected: \" + str(spread))\r\n    \r\n    return points_earned\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "timed out", "score": 0, "text": ""}]