[{"Unnamed: 0": 0, "problem_id": "a3_3_animals", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a list called `list_of_animals`. Write a\nprogram that prints out each of the items in this list (one item per line).\n\n\n\n**EXAMPLE:  \n** If, for example, the list contained the items: \"A\", \"B\", \"C\"\n\nYour program should print:\n\n    \n    \n    A  \n    B  \n    C\n\n\n\n**NOTE:**\n\n  * You must use a loop to complete this task. \n\n\n\n\n# AUTOGRADER IMPORT REMOVED\n\n# --------------------------------------------------------------\n# Assessment #3, Problem 3\n# --------------------------------------------------------------\n\n# This list is being provided to you.  DO NOT TOUCH!\nlist_of_animals = ['Tiger', 'Deer', 'Zebra', 'Elephant', 'Swordfish', 'Giraffe', 'Sloth']\n\n#Your code goes here.", "code": "\nfor animal in list_of_animals:\n    print(animal)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nlist_of_animals = ['Tiger', 'Deer', 'Zebra', 'Elephant', 'Swordfish', 'Giraffe', 'Sloth']\r\n\r\ndef solution():\r\n    result = []\r\n    \r\n    for item in list_of_animals:\r\n        result.append(item)\r\n    \r\n    return result\r\n             \r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    output, error = autograder.run_script(\"a3_3_animals.py\", [])\r\n    expected_output = solution()\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    \r\n    return round(100 / len(expected_output) * num_matches, 1)\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "Unit Test Returned: 0.0\n"}, {"Unnamed: 0": 1, "problem_id": "a3_1_cargo", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a list called `list_of_cargo_planes`. Write a\nprogram that prints a single, specified plane from the list. Your program\nshall take a number via user input used to identify which plane to print. For\nexample, if the user types a 3, you should print out the third item.\n\n\n\n**NOTE:**\n\n  * You may assume that the user will always enter a value that \"should\" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)\n\n\n\n\n", "code": "\nlist_of_cargo_planes = [\"plane1\", \"plane2\", \"plane3\", \"plane4\", \"plane5\"]\n\n# Get user input for plane number\nplane_number = int(input(\"Enter the plane number: \"))\n\n# Print the specified plane from the list\nprint(list_of_cargo_planes[plane_number - 1])\n", "testcase": "from cs110 import autograder\nimport random, math\n\nsoln_list =  [\n                'C-2', 'C-5', 'C-9', 'C-12', 'C-17', 'UV-18', 'C-20', 'C-21', 'C-22', 'C-23', 'C-26', 'C-27',\n                'C-35', 'C-38', 'CT-39', 'C-40', 'C-130', 'C-135', 'C-141', 'ATT', 'CSA', 'NSA', 'GRA', 'CRAF'\n            ] \n             \n\n# Runs the Python script and sees if it passes the test(s)\ndef test_passed():\n    \n    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]\n    tests_passed = 0\n\n    for i in range(len(index_list)):\n        print(\"----------------------------------------------------------\")\n        print(\"Testing item #\" + str(index_list[i]) + \": \")\n        print(\"----------------------------------------------------------\")\n               \n        # Runs the Script\n        output, error_message = autograder.run_script(\"a3_1_cargo.py\", [index_list[i]])\n\n        # Test Goes Here\n        lines = output.split(\"\\n\")\n        \n        if lines[0] == soln_list[index_list[i]-1]:\n            print(\"Looks Good!\")\n            tests_passed += 1\n        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:\n            print(\"Unexpected Output (Expected \" + str(soln_list[index_list[i]-1]) + \")\")\n    \n        print()\n    \n    return (100 / len(index_list)) * tests_passed\n\n\n# ---------------------------------------------------------------------\n# Optional\n# Runs your code in an IDE (for testing purposes)\n# ---------------------------------------------------------------------\nif __name__ == '__main__':    \n    result = test_passed()\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "----------------------------------------------------------\nTesting item #1: \n----------------------------------------------------------\nUnexpected Output (Expected C-2)\n\n----------------------------------------------------------\nTesting item #20: \n----------------------------------------------------------\n\n----------------------------------------------------------\nTesting item #24: \n----------------------------------------------------------\n\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 2, "problem_id": "a3_3_games", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a list called `list_of_games`. Write a program\nthat prints out each of the items in this list (one item per line).\n\n\n\n**EXAMPLE:  \n** If, for example, the list contained the items: \"A\", \"B\", \"C\"\n\nYour program should print:\n\n    \n    \n    A  \n    B  \n    C\n\n\n\n**NOTE:**\n\n  * You must use a loop to complete this task. \n\n\n\n\n# AUTOGRADER IMPORT REMOVED\n\n# --------------------------------------------------------------\n# Assessment #3, Problem 3\n# --------------------------------------------------------------\n\n# This list is being provided to you.  DO NOT TOUCH!\nlist_of_games = ['Monopoly', 'Risk', 'Clue', 'Chess', 'Operation', 'Jenga', 'Jumanji']\n\n#Your code goes here.", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nlist_of_games = ['Monopoly', 'Risk', 'Clue', 'Chess', 'Operation', 'Jenga', 'Jumanji']\r\n\r\ndef solution():\r\n    result = []\r\n    \r\n    for item in list_of_games:\r\n        result.append(item)\r\n    \r\n    return result\r\n             \r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    output, error = autograder.run_script(\"a3_3_games.py\", [])\r\n    expected_output = solution()\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    \r\n    return round(100 / len(expected_output) * num_matches, 1)\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "Unit Test Returned: 0.0\n"}, {"Unnamed: 0": 3, "problem_id": "a3_4_heights", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a list called list_of_heights. Write a program\nthat prints out the range ( _i.e.,  _the difference between the max and min\nheight)\n\n\n\n**EXAMPLE:  \n** If, for example, the list contained the values: 53, 60, 65\n\nYour program should print:\n\n    \n    \n    12\n\n\n\n\n\n\n", "code": "\nlist_of_heights = [53, 60, 65]\n\nmax_height = max(list_of_heights)\nmin_height = min(list_of_heights)\n\nrange_of_heights = max_height - min_height\n\nprint(range_of_heights)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nSTUDENT_FILE = \"a3_4_heights.py\"\r\nANSWER = 8942\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    output, error = autograder.run_script(STUDENT_FILE, [])\r\n    lines = output.strip().split('\\n')\r\n    score = 0\r\n    \r\n    if len(lines) >= 1:           \r\n        if autograder.equals(lines[0], ANSWER):\r\n            print(\"CORRECT: Range Looks Good!\")\r\n            score += 100\r\n        else:\r\n            print(\"Incorrect range.  Remember that the range is the difference between the max and the min\")\r\n            \r\n    else:\r\n        print(\"More lines expected in your answer.  Make sure you are printing out the range.\")\r\n    \r\n    return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "failed: must be real number, not str", "score": 0, "text": ""}, {"Unnamed: 0": 4, "problem_id": "lsn9_practice4", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a program that asks the user for the area of three plots of land.\n\n  * The first area will be provided to you in ACRES\n  * The second area will be provided to you in SQUARE MILES (1 Acre = 0.0015625 Sq Miles)\n  * The third area will be provided to you in SQUARE KILOMETERS\n\nYour program will output \"Plot X is the biggest\", replacing X with either a 1,\n2, or 3 depending on if the first, second, or third plot of land is the\nbiggest, respectively. For this problem, you may assume that the plots are all\ndifferent sizes (e.g., no two plots will be the same size)\n\n**NOTES:**\n\n  * **1 acre = 0.0015625 square miles**\n  * **1 sq kilometer = 0.386102 square miles**\n\n**EXAMPLES:**\n\n**EXAMPLE 1** | **EXAMPLE 2**  \n---|---  \n**Inputs** |\n\n35  \n0.25  \n1\n\n|\n\n150  \n1  \n2.2  \n  \n**Expected Output** | Plot 3 is the biggest | Plot 2 is the biggest\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef solution(area_1, area_2, area_3):\r\n    area_1 = area_1 * 0.0015625\r\n    area_3 = area_3 * 0.386102\r\n\r\n    if area_1 > area_2 and area_1 > area_3:\r\n        return \"Plot 1 is the biggest\"\r\n    elif area_2 > area_1 and area_2 > area_3:\r\n        return \"Plot 2 is the biggest\"\r\n    elif area_3 > area_1 and area_3 > area_2:\r\n        return \"Plot 3 is the biggest\"\r\n    \r\n    return \"This should never return\"\r\n\r\ndef run_test(area1, area2, area3):\r\n    global num_tests_run, num_tests_passed\r\n    \r\n    num_tests_run += 1\r\n    expected_output = solution(area1, area2, area3)\r\n        \r\n    print(\"--------------------------------------------\")\r\n    print(\"Comparing %1.1f acres, %1.1f sq miles, and %1.1f sq km\" % (area1, area2, area3))\r\n    print(\"--------------------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn9_practice4.py\", [area1, area2, area3])\r\n    \r\n    if output.strip() == expected_output:\r\n        print(\"CORRECT!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", expected_output)\r\n        print(\"\\n\")\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))\r\n    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))\r\n    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))\r\n\r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "--------------------------------------------\nComparing 948.6 acres, 1.5 sq miles, and 2.1 sq km\n--------------------------------------------\nINCORRECT. Expected: Plot 1 is the biggest\n\n\n--------------------------------------------\nComparing 888.5 acres, 1.1 sq miles, and 4.0 sq km\n--------------------------------------------\nINCORRECT. Expected: Plot 3 is the biggest\n\n\n--------------------------------------------\nComparing 996.2 acres, 0.6 sq miles, and 3.3 sq km\n--------------------------------------------\nINCORRECT. Expected: Plot 1 is the biggest\n\n\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 5, "problem_id": "lsn9_practice3", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a program that asks the user for the price of an item in US dollars /\ncents. Then calculate and print out the equivalent price of the item in:\n\n  *     * British Pounds (1.25 USD per Pound)\n    * Korean Won (1 Won == 0.00083 USD)\n    * Mexican Pesos (1 Peso == 53.81 Won)\n\nPrint each currency on a separate line.\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    \r\n    dollar_amount = round(random.uniform(1.00, 1000.00), 2)\r\n    pound_amount = dollar_amount / 1.25\r\n    won_amount = dollar_amount / 0.00083\r\n    peso_amount = won_amount / 53.81\r\n    \r\n    output, error_message = autograder.run_script(\"lsn9_practice3.py\", [dollar_amount])   \r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) > 0 and autograder.equals(lines[0], pound_amount):\r\n        print(\"Correct Pound Conversion\")\r\n        score += 33\r\n    else:\r\n        print(\"Incorrect Pound Conversion.  Expected\", pound_amount)\r\n        \r\n    if len(lines) > 1 and autograder.equals(lines[1], won_amount):\r\n        print(\"Correct Won Conversion\")\r\n        score += 33\r\n    else:\r\n        print(\"Incorrect Won Conversion.  Expected\", won_amount)\r\n        \r\n    if len(lines) > 2 and autograder.equals(lines[2], peso_amount):\r\n        print(\"Correct Peso Conversion\")\r\n        score += 34\r\n    else:\r\n        print(\"Incorrect Peso Conversion.  Expected\", peso_amount)\r\n    \r\n    return score\r\n        \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "Incorrect Pound Conversion.  Expected 111.54400000000001\nIncorrect Won Conversion.  Expected 167987.95180722894\nIncorrect Peso Conversion.  Expected 3121.872362148837\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 6, "problem_id": "lsn9_practice2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a program that gets two (x, y) coordinates from\nthe user.  Write a program that calculates the distance between these two\npoints, and prints them out.\n\nHINT:  You will have to use the math module.\n\n\n", "code": "\nimport math\n\nx1 = float(input(\"Enter the x-coordinate of point 1: \"))\ny1 = float(input(\"Enter the y-coordinate of point 1: \"))\nx2 = float(input(\"Enter the x-coordinate of point 2: \"))\ny2 = float(input(\"Enter the y-coordinate of point 2: \"))\n\ndistance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\nprint(\"The distance between the two points is:\", distance)\n", "testcase": "from cs110 import autograder\nimport random, math\n\nnum_tests_passed = 0\nnum_tests_run = 0\n\ndef run_test():\n    global num_tests_run, num_tests_passed\n    \n    x1 = round(random.uniform(-10, 10), 1)\n    y1 = round(random.uniform(-10, 10), 1)\n    x2 = round(random.uniform(-10, 10), 1)\n    y2 = round(random.uniform(-10, 10), 1)\n    \n    num_tests_run += 1\n    solution = math.sqrt(abs(x1-x2)**2 + abs(y1-y2)**2)\n    \n    print(\"--------------------------------------------\")\n    print(\"Calculating distance between (%1.1f, %1.1f) and (%1.1f, %1.1f)\" % (x1, y1, x2, y2))\n    print(\"--------------------------------------------\")\n    output, error_message = autograder.run_script(\"lsn9_practice2.py\", [x1, y1, x2, y2], False)\n    print(\"Your Output:\", output.strip())\n    \n    if autograder.equals(output, solution):\n        print(\"CORRECT!\\n\")\n        num_tests_passed += 1\n    else:\n        print(\"INCORRECT\")    \n        print(\"Expected:\", solution)\n        print(\"\\n\")\n\n# Runs the Python script and sees if it passes the test(s)\ndef test_passed():\n    run_test()\n    run_test()\n\n    return round(num_tests_passed * (100 / num_tests_run), 1)\n\n        \n# Runs your code in an IDE (for testing purposes)\nif __name__ == '__main__':    \n    result = test_passed()\n    print(\"Unit Test Returned:\", result)\n\n\n\n\n\n\n\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "--------------------------------------------\nCalculating distance between (-9.9, 4.6) and (9.7, -1.7)\n--------------------------------------------\nYour Output: The distance between the two points is: 20.58761763779384\nINCORRECT\nExpected: 20.58761763779384\n\n\n--------------------------------------------\nCalculating distance between (3.7, 6.6) and (8.4, 3.5)\n--------------------------------------------\nYour Output: The distance between the two points is: 5.630275304103699\nINCORRECT\nExpected: 5.630275304103699\n\n\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 7, "problem_id": "lsn9_practice1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a program that prints out the class year.\nWrite the approrpriate input statement above this line to make this program\nwork.\n\n\n", "code": "\nclass_year = input(\"Enter your class year: \")\nprint(\"Class year:\", class_year)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(class_year):\r\n    global num_tests_run, num_tests_passed\r\n    \r\n    num_tests_run += 1\r\n    solution = \"Members of the class of \" + str(class_year) + \" arrived at USAFA in \" + str(class_year - 4)\r\n    \r\n    print(\"--------------------------------------------\")\r\n    print(\"Testing Class Year =\", class_year)\r\n    print(\"--------------------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn9_practice1.py\", [class_year], False)\r\n        \r\n    if output.strip() == solution:\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT\")\r\n        print(\"Your Output:\", output.strip())\r\n        print(\"Expected:\", solution)\r\n        if \".0\" in output.strip():\r\n            print(\"*** HINT:  Is year a floating point number? ***\")\r\n        print(\"\\n\")\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(random.randint(1959, 2024))\r\n    run_test(random.randint(1959, 2024))\r\n\r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "--------------------------------------------\nTesting Class Year = 1983\n--------------------------------------------\nINCORRECT\nYour Output: Class year: 1983\nExpected: Members of the class of 1983 arrived at USAFA in 1979\n\n\n--------------------------------------------\nTesting Class Year = 1983\n--------------------------------------------\nINCORRECT\nYour Output: Class year: 1983\nExpected: Members of the class of 1983 arrived at USAFA in 1979\n\n\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 8, "problem_id": "lsn8_uod", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou've been asked to develop a tool to help identify the uniform of the day,\nbased on temperature and wind speed.\n\nThe command center has provided the following table for guidance:\n\n| Temperature  \n---|---  \nWind Speed |  | <40 | 40 | >40 and <60 | 60 | >60  \n<15 | Parkas | A-Jackets | A-Jackets | A-Jackets | Blues  \n15 | ABUs | ABUs | Parkas | Parkas | Blues  \n>15 | ABUs | ABUs | Parkas | Parkas | A-Jackets  \n  \nCreate a Python program that first gets the temperature (in degrees\nFahrenheit) and then the wind speed (in knots) from the user. You may assume\nthat all inputs are non-negative numbers.\n\nIt should then output the correct response, as described above.\n\n\n", "code": "\ntemperature = int(input(\"Enter the temperature in degrees Fahrenheit: \"))\nwind_speed = int(input(\"Enter the wind speed in knots: \"))\n\nif temperature < 15:\n    if wind_speed < 40:\n        print(\"Uniform of the day: Parkas\")\n    elif wind_speed == 40:\n        print(\"Uniform of the day: A-Jackets\")\n    elif 40 < wind_speed < 60:\n        print(\"Uniform of the day: A-Jackets\")\n    elif wind_speed == 60:\n        print(\"Uniform of the day: A-Jackets\")\n    else:\n        print(\"Uniform of the day: Blues\")\nelif temperature == 15:\n    if wind_speed < 40:\n        print(\"Uniform of the day: ABUs\")\n    elif wind_speed == 40:\n        print(\"Uniform of the day: ABUs\")\n    elif 40 < wind_speed < 60:\n        print(\"Uniform of the day: Parkas\")\n    elif wind_speed == 60:\n        print(\"Uniform of the day: Parkas\")\n    else:\n        print(\"Uniform of the day: Blues\")\nelse:\n    if wind_speed < 40:\n        print(\"Uniform of the day: ABUs\")\n    elif wind_speed == 40:\n        print(\"Uniform of the day: ABUs\")\n    elif 40 < wind_speed < 60:\n        print(\"Uniform of the day: Parkas\")\n    elif wind_speed == 60:\n        print(\"Uniform of the day: Parkas\")\n    else:\n        print(\"Uniform of the day: A-Jackets\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\n\r\n# The Actual Solution\r\ndef solution(temp, wind):\r\n    if temp < 40:\r\n        if wind < 15:\r\n            return \"Parkas\"\r\n        else:\r\n            return \"ABUs\"\r\n    elif temp == 40:\r\n        if wind < 15:\r\n            return 'A-Jackets'\r\n        else:\r\n            return 'ABUs'\r\n    elif temp > 40 and temp <= 60:\r\n        if wind < 15:\r\n            return 'A-Jackets'\r\n        else:\r\n            return 'Parkas'\r\n    else:\r\n        if wind <= 15:\r\n            return 'Blues'\r\n        else:\r\n            return 'A-Jackets'\r\n\r\n\r\ndef run_test(temp, wind):\r\n    global num_tests_passed\r\n    \r\n    print(\"Testing Temp =\", temp, 'and Wind =', wind)\r\n    output, error_message = autograder.run_script(\"lsn8_uod.py\", [temp, wind], False)\r\n    \r\n    print(\"Output:\", output.strip())\r\n    \r\n    if output.strip() == solution(temp, wind):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT.  Expected:\", solution(temp, wind), \"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(39, 14)\r\n    run_test(39, 15)\r\n    run_test(39, 16)\r\n    run_test(40, 14)\r\n    run_test(40, 15)\r\n    run_test(40, 16)\r\n    run_test(50, 14)\r\n    run_test(50, 15)\r\n    run_test(50, 16)\r\n    run_test(60, 14)\r\n    run_test(60, 15)\r\n    run_test(60, 16)\r\n    run_test(61, 14)\r\n    run_test(61, 15)\r\n    run_test(61, 16)\r\n    \r\n    return round(num_tests_passed * (100 / 15), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "Testing Temp = 39 and Wind = 14\nOutput: Uniform of the day: ABUs\nINCORRECT.  Expected: Parkas \n\nTesting Temp = 39 and Wind = 15\nOutput: Uniform of the day: ABUs\nINCORRECT.  Expected: ABUs \n\nTesting Temp = 39 and Wind = 16\nOutput: Uniform of the day: ABUs\nINCORRECT.  Expected: ABUs \n\nTesting Temp = 40 and Wind = 14\nOutput: Uniform of the day: ABUs\nINCORRECT.  Expected: A-Jackets \n\nTesting Temp = 40 and Wind = 15\nOutput: Uniform of the day: ABUs\nINCORRECT.  Expected: ABUs \n\nTesting Temp = 40 and Wind = 16\nOutput: Uniform of the day: ABUs\nINCORRECT.  Expected: ABUs \n\nTesting Temp = 50 and Wind = 14\nOutput: Uniform of the day: ABUs\nINCORRECT.  Expected: A-Jackets \n\nTesting Temp = 50 and Wind = 15\nOutput: Uniform of the day: ABUs\nINCORRECT.  Expected: Parkas \n\nTesting Temp = 50 and Wind = 16\nOutput: Uniform of the day: ABUs\nINCORRECT.  Expected: Parkas \n\nTesting Temp = 60 and Wind = 14\nOutput: Uniform of the day: ABUs\nINCORRECT.  Expected: A-Jackets \n\nTesting Temp = 60 and Wind = 15\nOutput: Uniform of the day: ABUs\nINCORRECT.  Expected: Parkas \n\nTesting Temp = 60 and Wind = 16\nOutput: Uniform of the day: ABUs\nINCORRECT.  Expected: Parkas \n\nTesting Temp = 61 and Wind = 14\nOutput: Uniform of the day: ABUs\nINCORRECT.  Expected: Blues \n\nTesting Temp = 61 and Wind = 15\nOutput: Uniform of the day: ABUs\nINCORRECT.  Expected: Blues \n\nTesting Temp = 61 and Wind = 16\nOutput: Uniform of the day: ABUs\nINCORRECT.  Expected: A-Jackets \n\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 9, "problem_id": "lsn8_speeding", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a program that gets a speed (in miles per hour). You may assume that\nall inputs are non-negative numbers.\n\nIt should output the kind of ticket a police officer should give the driver\n(according to the table below).\n\nSpeed (mph) | <= 65 | >65 and <= 70 | >70 and <= 75 | > 75 and <= 80 | > 80  \n---|---|---|---|---|---  \nTicket | No Ticket | Warning | Speeding | Reckless Driving | Reckless\nEndangerment  \n  \n**EXAMPLES:**\n\n| Example 1 | Example 2 | Example 3 | Example 4 | Example 5  \n---|---|---|---|---|---  \nInput | 48 | 68 | 72 | 78 | 136  \nExpected Output  | No Ticket | Warning | Speeding | Reckless Driving |\nReckless Endangerment\n\n\n", "code": "\nspeed = int(input())\n\nif speed <= 65:\n    print(\"No Ticket\")\nelif speed <= 70:\n    print(\"Warning\")\nelif speed <= 75:\n    print(\"Speeding\")\nelif speed <= 80:\n    print(\"Reckless Driving\")\nelse:\n    print(\"Reckless Endangerment\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# The Actual Solution\r\ndef solution(speed):\r\n    # Determines what to return based on the table\r\n    if (speed <= 65):\r\n        return \"No Ticket\"\r\n    elif (speed >65 and speed <= 70):\r\n        return \"Warning\"\r\n    elif (speed > 70 and speed <= 75):\r\n        return \"Speeding\"  \r\n    elif (speed >75 and speed <= 80):\r\n        return \"Reckless Driving\"\r\n    elif (speed > 80):\r\n        return \"Reckless Endangerment\"\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    num_tests_passed = 0\r\n    \r\n    SPEEDS_TO_TEST = [random.randint(0, 65),\r\n                      65,\r\n                      random.randint(66, 70),\r\n                      70,\r\n                      random.randint(71, 75),\r\n                      75,\r\n                      random.randint(76, 80),\r\n                      80,\r\n                      random.randint(81, 100)]\r\n    \r\n    for i in range(0, len(SPEEDS_TO_TEST)):\r\n        print(\"-------------------------------\")\r\n        print(\"Test\", i+1)\r\n        print(\"-------------------------------\")\r\n        speed = SPEEDS_TO_TEST[i]\r\n        output, error_message = autograder.run_script(\"lsn8_speeding.py\", [speed])\r\n        \r\n        if output.strip() == solution(speed):\r\n            print(\"SUCCESS!\\n\")\r\n            num_tests_passed += 1\r\n        else:\r\n            print(\"INCORRECT.  Expected:\", solution(speed), \"\\n\")\r\n    \r\n    return round(num_tests_passed * (100 / len(SPEEDS_TO_TEST)), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 100.0, "text": "-------------------------------\nTest 1\n-------------------------------\nSUCCESS!\n\n-------------------------------\nTest 2\n-------------------------------\nSUCCESS!\n\n-------------------------------\nTest 3\n-------------------------------\nSUCCESS!\n\n-------------------------------\nTest 4\n-------------------------------\nSUCCESS!\n\n-------------------------------\nTest 5\n-------------------------------\nSUCCESS!\n\n-------------------------------\nTest 6\n-------------------------------\nSUCCESS!\n\n-------------------------------\nTest 7\n-------------------------------\nSUCCESS!\n\n-------------------------------\nTest 8\n-------------------------------\nSUCCESS!\n\n-------------------------------\nTest 9\n-------------------------------\nSUCCESS!\n\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 10, "problem_id": "lsn8_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a program that gets the user's body\ntemperature. If the body temperature is between 97-99 (inclusive), print\n\"Normal\". Otherwise, print \"Abnormal\"\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\n# The Actual Solution\r\ndef solution(gpa, apa, mpa):\r\n    if gpa < 2.0 or apa < 2.0 or mpa < 2.0:\r\n        return \"Probation\"\r\n    else:\r\n        return \"No Probation\"\r\n\r\n\r\ndef run_test(gpa, apa, mpa):\r\n    global num_tests_run, num_tests_passed\r\n    \r\n    num_tests_run += 1\r\n    \r\n    print(\"--------------------------------------------\")\r\n    print(\"Testing GPA =\", str(gpa) + \";\", \"APA =\", str(apa) + \";\", \"MPA =\", mpa)\r\n    print(\"--------------------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_skill2.py\", [gpa, apa, mpa], False)\r\n        \r\n    print(output.strip())\r\n        \r\n    if output.strip() == solution(gpa, apa, mpa):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT.  Expected:\", solution(gpa, apa, mpa), \"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    #round(random.uniform(0.1, 1.9),1)\r\n    #round(random.uniform(2.1, 4.0),1)\r\n    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1))\r\n    run_test(round(random.uniform(0.1, 1.9),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1))\r\n    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(0.1, 1.9),1), round(random.uniform(2.1, 4.0),1))\r\n    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(0.1, 1.9),1))\r\n\r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "--------------------------------------------\nTesting GPA = 3.0; APA = 2.2; MPA = 3.7\n--------------------------------------------\n\nINCORRECT.  Expected: No Probation \n\n--------------------------------------------\nTesting GPA = 0.4; APA = 3.5; MPA = 2.4\n--------------------------------------------\n\nINCORRECT.  Expected: Probation \n\n--------------------------------------------\nTesting GPA = 2.8; APA = 1.7; MPA = 3.5\n--------------------------------------------\n\nINCORRECT.  Expected: Probation \n\n--------------------------------------------\nTesting GPA = 2.5; APA = 2.7; MPA = 0.9\n--------------------------------------------\n\nINCORRECT.  Expected: Probation \n\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 11, "problem_id": "lsn8_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a program that gets the user's body\ntemperature. If the body temperature is between 97-99 (inclusive), print\n\"Normal\". Otherwise, print \"Abnormal\"\n\n\n", "code": "\ntemperature = float(input(\"Enter body temperature: \"))\nif temperature >= 97 and temperature <= 99:\n    print(\"Normal\")\nelse:\n    print(\"Abnormal\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\n# The Actual Solution\r\ndef solution(body_temperature):\r\n    if body_temperature >= 97 and body_temperature <= 99:\r\n        return \"Normal\"\r\n    else:\r\n        return \"Abnormal\"\r\n\r\n\r\ndef run_test(body_temperature):\r\n    global num_tests_run, num_tests_passed\r\n    \r\n    num_tests_run += 1\r\n    \r\n    print(\"--------------------------------------------\")\r\n    print(\"Testing Temperature =\", body_temperature)\r\n    print(\"--------------------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_skill1.py\", [body_temperature], False)\r\n        \r\n    if output.strip() == solution(body_temperature):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT.  Expected:\", solution(body_temperature), \"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(96.9)\r\n    run_test(97)\r\n    run_test(98.5)\r\n    run_test(99)\r\n    run_test(99.1)\r\n\r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 100.0, "text": "--------------------------------------------\nTesting Temperature = 96.9\n--------------------------------------------\nSUCCESS!\n\n--------------------------------------------\nTesting Temperature = 97\n--------------------------------------------\nSUCCESS!\n\n--------------------------------------------\nTesting Temperature = 98.5\n--------------------------------------------\nSUCCESS!\n\n--------------------------------------------\nTesting Temperature = 99\n--------------------------------------------\nSUCCESS!\n\n--------------------------------------------\nTesting Temperature = 99.1\n--------------------------------------------\nSUCCESS!\n\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 12, "problem_id": "lsn8_roundtrip", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a Python program that gets three values from the user:\n\n  * The distance to a destination (in miles)\n  * The amount of fuel in the user's car (in gallons)\n  * The # of miles the user's car can travel per gallon of gas (i.e., Miles Per Gallon)\n\nYou may assume that all inputs are non-negative numbers.\n\nCalculate the amount of fuel needed to reach the destination. Then output\nwhether or not the user needs to refuel during a round trip, using the below\ntable as a guide:\n\nFuel Consumed (One-Way) | =< 50% | > 50% and <= 100% | > 100%  \n---|---|---|---  \nOutput | No Refueling Needed | Refuel on Way Back | Refuel En Route  \n  \n**EXAMPLES:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 100  \n10  \n30 | 100  \n5  \n20 | 100  \n7  \n10  \nOutput | No Refueling Needed | Refuel on Way Back | Refuel En Route  \n  \n**NOTE: Your Output Must Match Exactly**\n\n\n", "code": "\n# Read input values\ndistance = float(input(\"Enter the distance to the destination (in miles): \"))\nfuel = float(input(\"Enter the amount of fuel in your car (in gallons): \"))\nmpg = float(input(\"Enter the miles per gallon of your car: \"))\n\n# Calculate fuel needed to reach the destination\nfuel_needed = distance / mpg\n\n# Check if refueling is needed\nif fuel_needed <= fuel/2:\n    print(\"No Refueling Needed\")\nelif fuel_needed <= fuel:\n    print(\"Refuel on Way Back\")\nelse:\n    print(\"Refuel En Route\")\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    points_earned = 0\r\n            \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 1\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_roundtrip.py\", [100,10,30])\r\n    \r\n    if output.strip() == \"No Refueling Needed\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 33\r\n    else:\r\n        print(\"Incorrect.  Expected: No Refueling Needed\\n\")\r\n        \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 2\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_roundtrip.py\", [100,5,20])\r\n    \r\n    if output.strip() == \"Refuel on Way Back\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 33\r\n    else:\r\n        print(\"Incorrect.  Expected: Refuel on Way Back\\n\")\r\n    \r\n        # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 3\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_roundtrip.py\", [100,7,10])\r\n    \r\n    if output.strip() == \"Refuel En Route\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 34\r\n    else:\r\n        print(\"Incorrect.  Expected: Refuel En Route\\n\")\r\n\r\n    return points_earned\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 100.0, "text": "-------------------------------\nTest 1\n-------------------------------\nCORRECT\n\n-------------------------------\nTest 2\n-------------------------------\nCORRECT\n\n-------------------------------\nTest 3\n-------------------------------\nCORRECT\n\nUnit Test Returned: 100\n"}, {"Unnamed: 0": 13, "problem_id": "lsn8_lists", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite an algorithm that gets a decimal GPA, APA, and MPA from the user (in\nthat order). You may assume that all inputs are non-negative whole numbers.\n\nIt then reports which meritorious list the cadet is on. If the GPA is equal to\nor above 3.0, the cadet is on the \"Dean's List\", and if the APA is equal to or\nabove 3.0, the cadet is on the \"Athletic Director's List\", and if the MPA is\nequal to or above 3.0, the cadet is on the \"Commandant's List\". Finally, if\nthe cadet qualifies for all three individual lists, then the cadet is on the\n\"Superintendent's List\". The algorithm should report all the lists the cadet\nis on (in the order defined above), unless the cadet is on the Superintendents\nList, in which case, it should report only, \"Superintendent's List\".\n\n| No List | Dean's List | Athletic Director's List | Commandant's List |\nSuperintendent's List  \n---|---|---|---|---|---  \nGPA | < 3.0 | >= 3.0 | n/a | n/a | >= 3.0  \nAPA | < 3.0 | n/a | >= 3.0 | n/a | >= 3.0  \nMPA | < 3.0 | n/a | n/a | >= 3.0 | >= 3.0  \n  \n**EXAMPLES:**\n\nExample 1 | Example 2 | Example 3 | Example 4 | Example 5  \n---|---|---|---|---  \nInput | 2.8  \n2.6  \n2.5 | 3.5  \n3.2  \n2.8 | 3.3  \n2.8  \n3.4 | 3.6  \n3.8  \n3.2 | 2.8  \n3.5  \n3.8  \nOutput | No List | Dean's List  \nAthletic Director's List | Dean's List  \nCommandant's List | Superintendent's List | Athletic Director's List  \nCommandant's List\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\n\r\n# The Actual Solution\r\ndef solution(gpa, apa, mpa):\r\n    answer = \"\"\r\n    \r\n    # Determines what output to present (note how we are using the \" character because of the 's)\r\n    if (gpa < 3.0 and apa < 3.0 and mpa < 3.0):\r\n        answer += \"No List\\n\"\r\n    elif (gpa >= 3.0 and apa >= 3.0 and mpa >= 3.0):\r\n        answer += \"Superintendent's List\\n\"\r\n    else:\r\n        # Note that these are 3 separate if statements; we do this because we don't know what list(s) the cadet is on\r\n        if (gpa >= 3.0):\r\n            answer += \"Dean's List\\n\"\r\n        \r\n        if (apa >= 3.0):\r\n            answer += \"Athletic Director's List\\n\"\r\n        \r\n        if (mpa >= 3.0):\r\n            answer += \"Commandant's List\\n\"\r\n\r\n    return answer.strip()\r\n\r\n\r\ndef run_test(gpa, apa, mpa):\r\n    global num_tests_passed\r\n    \r\n    print(\"--------------------------------------------\")\r\n    print(\"Testing GPA =\", str(gpa) + \";\", \"APA =\", str(apa) + \";\", \"MPA =\", mpa)\r\n    print(\"--------------------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_lists.py\", [gpa, apa, mpa])\r\n        \r\n    if output.strip() == solution(gpa, apa, mpa):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT.  Expected:\", solution(gpa, apa, mpa), \"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(2.8, 2.6, 2.5)\r\n    run_test(3.5, 3.2, 2.8)\r\n    run_test(3.3, 2.8, 3.4)\r\n    run_test(3.6, 3.8, 3.2)\r\n    run_test(2.8, 3.5, 3.8)\r\n    \r\n    return round(num_tests_passed * (100 / 5), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "--------------------------------------------\nTesting GPA = 2.8; APA = 2.6; MPA = 2.5\n--------------------------------------------\nINCORRECT.  Expected: No List \n\n--------------------------------------------\nTesting GPA = 3.5; APA = 3.2; MPA = 2.8\n--------------------------------------------\nINCORRECT.  Expected: Dean's List\nAthletic Director's List \n\n--------------------------------------------\nTesting GPA = 3.3; APA = 2.8; MPA = 3.4\n--------------------------------------------\nINCORRECT.  Expected: Dean's List\nCommandant's List \n\n--------------------------------------------\nTesting GPA = 3.6; APA = 3.8; MPA = 3.2\n--------------------------------------------\nINCORRECT.  Expected: Superintendent's List \n\n--------------------------------------------\nTesting GPA = 2.8; APA = 3.5; MPA = 3.8\n--------------------------------------------\nINCORRECT.  Expected: Athletic Director's List\nCommandant's List \n\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 14, "problem_id": "lsn8_fuel", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nWrite an algorithm that gets a fuel load (in lbs) and then a distance to base\n(in nautical miles). You may assume all inputs are non-negative numbers.\n\nIt then outputs what kind of action the pilot should take. If the fuel load is\nless than 50 lbs and the distance to base is less than 70 nm, report \"Return\nto base\", otherwise, report \"Resume flight\".\n\n**EXAMPLES:**\n\n| Example 1 | Example 2 | Example 3 | Example 4  \n---|---|---|---|---  \nInput | 30  \n60 | 60  \n60 | 40  \n80 | 60  \n80  \nOutput | Return to base | Resume flight | Resume flight | Resume flight  \n  \n**Note: Output must match exactly.**\n\n\n", "code": "\ndef fuel_action(fuel_load, distance_to_base):\n    if fuel_load < 50 and distance_to_base < 70:\n        return \"Return to base\"\n    else:\n        return \"Resume flight\"\n\nprint(fuel_action(30, 60))  # Return to base\nprint(fuel_action(60, 60))  # Resume flight\nprint(fuel_action(60, 40))  # Resume flight\nprint(fuel_action(80, 60))  # Resume flight\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    points_earned = 0\r\n            \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 1\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_fuel.py\", [30,60])\r\n    \r\n    if output.strip() == \"Return to base\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 25\r\n    else:\r\n        print(\"Incorrect.  Expected: Return to base\\n\")\r\n        \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 2\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_fuel.py\", [60,60])\r\n    \r\n    if output.strip() == \"Resume flight\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 25\r\n    else:\r\n        print(\"Incorrect.  Expected: Resume flight\\n\")\r\n    \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 3\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_fuel.py\", [40,80])\r\n    \r\n    if output.strip() == \"Resume flight\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 25\r\n    else:\r\n        print(\"Incorrect.  Expected: Resume flight\\n\")\r\n\r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 4\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn8_fuel.py\", [60,80])\r\n    \r\n    if output.strip() == \"Resume flight\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 25\r\n    else:\r\n        print(\"Incorrect.  Expected: Resume flight\\n\")\r\n\r\n    return points_earned\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "-------------------------------\nTest 1\n-------------------------------\nIncorrect.  Expected: Return to base\n\n-------------------------------\nTest 2\n-------------------------------\nIncorrect.  Expected: Resume flight\n\n-------------------------------\nTest 3\n-------------------------------\nIncorrect.  Expected: Resume flight\n\n-------------------------------\nTest 4\n-------------------------------\nIncorrect.  Expected: Resume flight\n\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 15, "problem_id": "lsn7_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a program that gets a course name and number\n(e.g., Math 243) from the user. Modify the program to do the following:\n\n  * If the course name is equal to \"CS110\", print \"You get to program!\"\n  * Otherwise, print \"Boo, no programming.\"\n\n\n", "code": "\ncourse_name = input(\"Enter course name: \")\ncourse_number = input(\"Enter course number: \")\n\nif course_name == \"CS110\":\n    print(\"You get to program!\")\nelse:\n    print(\"Boo, no programming.\")\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    points_earned = 0\r\n            \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 1 - CS110\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn7_skill2.py\", [\"CS110\"])\r\n    \r\n    if output.strip() == \"You get to program!\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 50\r\n    else:\r\n        print(\"Incorrect.  Expected: You get to program!\\n\")\r\n        \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 2 - Another Class\")\r\n    print(\"-------------------------------\")\r\n    classes = ['Math 151', 'English 111', 'Physics 110']\r\n    random_class = classes[random.randint(0, len(classes)-1)]\r\n    output, error_message = autograder.run_script(\"lsn7_skill2.py\", [random_class])\r\n    \r\n    if output.strip() == \"Boo, no programming.\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 50\r\n    else:\r\n        print(\"Incorrect.  Expected: Boo, no programming.\\n\")\r\n\r\n    return points_earned\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "-------------------------------\nTest 1 - CS110\n-------------------------------\nIncorrect.  Expected: You get to program!\n\n-------------------------------\nTest 2 - Another Class\n-------------------------------\nIncorrect.  Expected: Boo, no programming.\n\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 16, "problem_id": "lsn7_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a program that gets a temperature from the\nuser. Modify the program to do the following:\n\n  * If the temperature is less than or equal to 32, print \"Water Has Frozen\"\n  * Otherwise (i.e., else), print \"Above Water's Freezing Point\"\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0.0\r\n    \r\n    if autograder.code_compiles(\"lsn7_skill1.py\"):\r\n        file = open(\"lsn7_skill1.py\", \"r\")\r\n        file_contents = file.read()\r\n    \r\n        print(\"----------------------------------------------------------------------\")\r\n        print(\"*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\")\r\n        print(\"----------------------------------------------------------------------\\n\")\r\n    \r\n        if \"open_window(\" in file_contents:\r\n            print(\"open_window Called\")\r\n            score += 33\r\n        else:\r\n            print(\"open_window does not appear to be called\")\r\n        \r\n        if \"draw_circle(\" in file_contents:\r\n            print(\"draw_circle Called\")\r\n            score += 34\r\n        else:\r\n            print(\"draw_circle does not appear to be called\")\r\n            \r\n        if \"wait_for_close(\" in file_contents:\r\n            print(\"wait_for_close Called\")\r\n            score += 33\r\n        else:\r\n            print(\"wait_for_close does not appear to be called\")\r\n            \r\n    else:\r\n        print(\"There appears to be an error in your python Script that is preventing it from running\")\r\n    \r\n    return score        \r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "----------------------------------------------------------------------\n*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\n----------------------------------------------------------------------\n\nopen_window does not appear to be called\ndraw_circle does not appear to be called\nwait_for_close does not appear to be called\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 17, "problem_id": "lsn7_positive", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a Python  **program**  that gets a floating point number from the user:\n\n  * If the number is positive, print the word `POSITIVE`\n  * Otherwise, print the word `NOT POSITIVE`\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 10 | -5 | 0  \nOutput | POSITIVE | NOT POSITIVE | NOT POSITIVE\n\n\n", "code": "\nnum = float(input(\"Enter a floating point number: \"))\n\nif num > 0:\n    print(\"POSITIVE\")\nelse:\n    print(\"NOT POSITIVE\")\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    points_earned = 0\r\n    \r\n    # Generates Random Values\r\n    negative_value = random.randint(-100, -1)\r\n    positive_value = random.randint(1, 100)\r\n        \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"# Test 1 - Positive Number\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn7_positive.py\", [positive_value])\r\n    \r\n    if output.strip() == \"POSITIVE\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 33\r\n    else:\r\n        print(\"Incorrect Output:\", output)\r\n        print(\"Expected POSITIVE\\n\")\r\n        \r\n    \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"# Test 2 - Negative Number\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn7_positive.py\", [negative_value])\r\n    \r\n    if output.strip() == \"NOT POSITIVE\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 33\r\n    else:\r\n        print(\"Incorrect Output:\", output)\r\n        print(\"Expected NOT POSITIVE\\n\")\r\n        \r\n    \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"# Test 3 - Zero\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn7_positive.py\", [0])\r\n    \r\n    if output.strip() == \"NOT POSITIVE\":\r\n        print(\"CORRECT\")\r\n        points_earned += 34\r\n    else:\r\n        print(\"Incorrect Output:\", output)\r\n        print(\"Expected NOT POSITIVE\\n\")\r\n\r\n    return points_earned\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 100.0, "text": "-------------------------------\n# Test 1 - Positive Number\n-------------------------------\nCORRECT\n\n-------------------------------\n# Test 2 - Negative Number\n-------------------------------\nCORRECT\n\n-------------------------------\n# Test 3 - Zero\n-------------------------------\nCORRECT\nUnit Test Returned: 100\n"}, {"Unnamed: 0": 18, "problem_id": "lsn7_largest", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a program that takes three integers as parameters, and prints the\nlargest (i.e., highest) number.\n\nEx: If the input is:\n\n    \n    \n    7\n    15\n    3\n    \n\nYour function should return:\n\n    \n    \n    15\n    \n\n  \nIn the event that all 3 numbers are the same, output that number.\n\nEx: If the input is:\n\n    \n    \n    5\n    5\n    5\n    \n\nYour function should return:\n\n    \n    \n    5\n\n\n", "code": "\ndef find_largest(num1, num2, num3):\n    if num1 == num2 and num2 == num3:\n        return num1\n    elif num1 >= num2 and num1 >= num3:\n        return num1 \n    elif num2 >= num1 and num2 >= num3:\n        return num2\n    else:\n        return num3\n\nnum1 = int(input())\nnum2 = int(input())\nnum3 = int(input())\n\nprint(find_largest(num1, num2, num3))\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef run_test(num1, num2, num3):\r\n    print(\"-------------------------------\")\r\n    print(\"# Testing: \" + str(num1) + \" \" + str(num2) + \" \" + str(num3))\r\n    print(\"-------------------------------\")\r\n    \r\n    output, error_message = autograder.run_script(\"lsn7_largest.py\", [num1, num2, num3])\r\n    \r\n    if autograder.equals(output, max(num1, num2, num3)):\r\n        print(\"CORRECT\\n\")\r\n        return True\r\n    else:\r\n        print(\"Incorrect.  Expected\", max(num1, num2, num3))\r\n        return False\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    tests_passed = 0\r\n    \r\n    # Generate 3 Random Numbers\r\n    num1 = 0\r\n    num2 = 0\r\n    num3 = 0\r\n    \r\n    # Ensures that the 3 Numbers are Different\r\n    while num1 == num2 or num1 == num3 or num2 == num3:\r\n        num1 = random.randint(0, 100)\r\n        num2 = random.randint(0, 100)\r\n        num3 = random.randint(0, 100)\r\n    \r\n    # Sorts the numbers\r\n    # This is needed so that we can test relationships between numbers\r\n    numbers = [num1, num2, num3]\r\n    numbers.sort()\r\n    num1 = numbers[0]\r\n    num2 = numbers[1]\r\n    num3 = numbers[2]\r\n    \r\n    # Test 1:  num1, num2, num3\r\n    if run_test(num1, num2, num3):\r\n        tests_passed += 1\r\n\r\n    # Test 2:  num1, num3, num2\r\n    if run_test(num1, num3, num2):\r\n        tests_passed += 1\r\n        \r\n    # Test 3:  num2, num3, num1\r\n    if run_test(num2, num3, num1):\r\n        tests_passed += 1\r\n    \r\n    # Test 4:  num3, num1, num2\r\n    if run_test(num3, num1, num2):\r\n        tests_passed += 1\r\n\r\n    # Test 5:  num2, num1, num3\r\n    if run_test(num2, num1, num3):\r\n        tests_passed += 1\r\n    \r\n    # Test 6:  3 Equal Numbers\r\n    if run_test(num1, num1, num1):\r\n        tests_passed += 1\r\n            \r\n    print(\"Passed \" + str(tests_passed) + \" out of 6 tests\")\r\n    return round(tests_passed * (100 / 6), 1)\r\n    \r\n    \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "failed: must be real number, not str", "score": 0, "text": ""}, {"Unnamed: 0": 19, "problem_id": "lsn7_classyear", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nUsing the below table as a guide, write a Python program that takes the user's\nclass year as input, and outputs their cadet class. If the class year is\nbefore 2021, output \"Graduate\". Alternatively, if the class year is larger\nthan 2024, output \"Not a Cadet\".\n\nYou may assume that all inputs provided to your application are years\n(represented as Integers)\n\n| Example 1 | Example 2 | Example 3 | Example 4 | Example 5 | Example 6  \n---|---|---|---|---|---|---  \nInput | 2021 | 2022 | 2023 | 2024 | 2020 | 2025  \nOutput | Firstie | Two Degree | Three Degree | Four Degree | Graduate | Not a\nCadet\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef solution(class_year):\r\n    if class_year < 2021:\r\n        return \"Graduate\"\r\n    elif class_year == 2021:\r\n        return \"Firstie\"\r\n    elif class_year == 2022:\r\n        return \"Two Degree\"\r\n    elif class_year == 2023:\r\n        return \"Three Degree\"\r\n    elif class_year == 2024:\r\n        return \"Four Degree\"\r\n    else:\r\n        return \"Not a Cadet\"\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    START_YEAR = 2020\r\n    END_YEAR = 2025\r\n    number_correct = 0\r\n    \r\n    for year in range(START_YEAR, END_YEAR + 1):\r\n        print(\"------------------------------\")\r\n        print(\"Testing: \" + str(year))\r\n        print(\"------------------------------\")\r\n        \r\n        # Runs the Script\r\n        output, error_message = autograder.run_script(\"lsn7_classyear.py\", [year])\r\n                \r\n        lines = output.split(\"\\n\")\r\n               \r\n        if lines[0] == solution(year):\r\n            print(\"PASS\\n\")\r\n            number_correct += 1\r\n        else:\r\n            print(\"FAIL\\n\")\r\n    \r\n    print(\"Passed \" + str(number_correct) + \" out of \" + str(END_YEAR - START_YEAR + 1) + \" tests\")\r\n    return round(number_correct * (100 / (END_YEAR - START_YEAR + 1)), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "------------------------------\nTesting: 2020\n------------------------------\nFAIL\n\n------------------------------\nTesting: 2021\n------------------------------\nFAIL\n\n------------------------------\nTesting: 2022\n------------------------------\nFAIL\n\n------------------------------\nTesting: 2023\n------------------------------\nFAIL\n\n------------------------------\nTesting: 2024\n------------------------------\nFAIL\n\n------------------------------\nTesting: 2025\n------------------------------\nFAIL\n\nPassed 0 out of 6 tests\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 20, "problem_id": "lsn7_atmosphere", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** The Earth's atmosphere is divided into a series of layers. Write an\nalgorithm that asks the user for the altitude in kilometers. Then output the\ncorresponding layer according to the following table:\n\nAltitude | \u226410km | >10km&\u226450km | >50km&\u226485km | >85km&\u22641000km |\n>1000km&\u2264100,000km | >100,000km  \n---|---|---|---|---|---|---  \n**Layer** | Troposphere | Stratosphere | Mesosphere | Thermosphere | Exosphere\n| Space\n\n\n", "code": "\naltitude = float(input(\"Enter altitude in kilometers: \"))\n\nif altitude <= 10:\n    layer = \"Troposphere\"\nelif altitude <= 50:\n    layer = \"Stratosphere\"\nelif altitude <= 85:\n    layer = \"Mesosphere\"\nelif altitude <= 1000:\n    layer = \"Thermosphere\"\nelif altitude <= 100000:\n    layer = \"Exosphere\"\nelse:\n    layer = \"Space\"\n\nprint(f\"The corresponding layer is: {layer}\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(altitude):\r\n    if altitude >= 0:\r\n        if altitude <= 10:\r\n            return \"Troposphere\"\r\n    if altitude >= 11:\r\n        if altitude <= 50:\r\n            return \"Stratosphere\"\r\n    if altitude >= 51:\r\n        if altitude <= 85:\r\n            return \"Mesosphere\"\r\n    if altitude >= 86:\r\n        if altitude <= 1000:\r\n            return \"Thermosphere\"\r\n    if altitude >= 1001:\r\n        if altitude <= 100000:\r\n            return \"Exosphere\"\r\n        else:\r\n            return \"Space\"\r\n        \r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    TEST_VALUES = [0, 1, 10, 11, 50, 51, 85, 86, 1000, 1001, 100000, 100001]\r\n    tests_passed = 0\r\n    \r\n    for altitude in TEST_VALUES:\r\n        print(\"--------------------------\")\r\n        print(\"Testing \" + str(altitude) + \" km\")\r\n        print(\"--------------------------\")\r\n        \r\n        # Runs the Script\r\n        output, error_message = autograder.run_script(\"lsn7_atmosphere.py\", [altitude])\r\n                               \r\n        # Your Test Goes Here (Return True if Pass, False Otherwise)   \r\n        if output.strip() == solution(altitude):\r\n            print(\"Passed\\n\")\r\n            tests_passed += 1\r\n        else:\r\n            print(\"Failed (Expected: \" + solution(altitude) + \")\\n\")\r\n    \r\n    print(\"Passed\", tests_passed, \"out of\", len(TEST_VALUES), \"tests.\")\r\n    return round(tests_passed * (100 / len(TEST_VALUES)), 2)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "--------------------------\nTesting 0 km\n--------------------------\nFailed (Expected: Troposphere)\n\n--------------------------\nTesting 1 km\n--------------------------\nFailed (Expected: Troposphere)\n\n--------------------------\nTesting 10 km\n--------------------------\nFailed (Expected: Troposphere)\n\n--------------------------\nTesting 11 km\n--------------------------\nFailed (Expected: Stratosphere)\n\n--------------------------\nTesting 50 km\n--------------------------\nFailed (Expected: Stratosphere)\n\n--------------------------\nTesting 51 km\n--------------------------\nFailed (Expected: Mesosphere)\n\n--------------------------\nTesting 85 km\n--------------------------\nFailed (Expected: Mesosphere)\n\n--------------------------\nTesting 86 km\n--------------------------\nFailed (Expected: Thermosphere)\n\n--------------------------\nTesting 1000 km\n--------------------------\nFailed (Expected: Thermosphere)\n\n--------------------------\nTesting 1001 km\n--------------------------\nFailed (Expected: Exosphere)\n\n--------------------------\nTesting 100000 km\n--------------------------\nFailed (Expected: Exosphere)\n\n--------------------------\nTesting 100001 km\n--------------------------\nFailed (Expected: Space)\n\nPassed 0 out of 12 tests.\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 21, "problem_id": "lsn6_temperature", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nWrite an algorithm that prompts the user for a temperature in \u00b0F and then\noutputs K and \u00b0C in that order.\n\n**EXAMPLE:**\n\n| Example 1 | Example 2  \n---|---|---  \nInput | 32 | 0  \nOutput | 273.15  \n0 | 255.372  \n-17.778  \n  \n**Note: Output must match within a predefined tolerance.**\n\n\n", "code": "\ndef convert_temperature(fahrenheit):\n    celsius = (fahrenheit - 32) * 5 / 9\n    kelvin = celsius + 273.15\n    \n    return kelvin, celsius\n\n# Prompt the user for input\nfahrenheit = float(input(\"Enter the temperature in \u00b0F: \"))\n\n# Call the function to convert the temperature\nkelvin, celsius = convert_temperature(fahrenheit)\n\n# Output the result\nprint(\"Kelvin:\", round(kelvin, 2))\nprint(\"Celsius:\", round(celsius, 2))\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    degrees_farenheit = random.random() * 451.0\r\n    degrees_celsius = (degrees_farenheit - 32.0) * 5/9\r\n    degrees_kelvin = degrees_celsius + 273.15\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn6_temperature.py\", [degrees_farenheit])\r\n    \r\n    lines = output.split('\\n')\r\n    \r\n    if autograder.equals(lines[0], degrees_kelvin):\r\n        print(\"Conversion to Kelvin looks good.\")\r\n        if autograder.equals(lines[1], degrees_celsius):\r\n            print(\"Conversion to Celsius looks good.\")\r\n            return 100.0\r\n        else:\r\n            print(\"Conversion to Celsius incorrect.\\nYour result: \" + str(lines[1]) + \"\\nExpected: \" + str(degrees_celsius))\r\n            return 50.0\r\n    else:\r\n        if autograder.equals(lines[0], degrees_celsius):\r\n            print(\"Looks like you swapped the order of your output. Look at the Problem Statement and try again.\")\r\n        else:\r\n            print(\"Conversion to Kelvin incorrect.\\nYour result: \" + str(lines[0]) + \"\\nExpected: \" + str(degrees_kelvin))\r\n        return 0.0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "Conversion to Kelvin incorrect.\nYour result: Kelvin: 281.9\nExpected: 281.90469228035\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 22, "problem_id": "lsn6_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a template that gets a distance and speed from\nthe user, and calculates the travel time. Unfortunately, the code does not\nwork. Analyze the code (and error message) and fix the problem.\n\n\n", "code": "\n# Get input from the user\ndistance = float(input(\"Enter distance in kilometers: \"))\nspeed = float(input(\"Enter speed in kilometers per hour: \"))\n\n# Calculate travel time\ntime = distance / speed\n\n# Print the result\nprint(\"The travel time is: \", time, \" hours\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\n# The Actual Solution\r\ndef solution(gpa, apa, mpa):\r\n    if gpa < 2.0 or apa < 2.0 or mpa < 2.0:\r\n        return \"Probation\"\r\n    else:\r\n        return \"No Probation\"\r\n\r\n\r\ndef run_test(gpa, apa, mpa):\r\n    global num_tests_run, num_tests_passed\r\n    \r\n    num_tests_run += 1\r\n    \r\n    print(\"--------------------------------------------\")\r\n    print(\"Testing GPA =\", str(gpa) + \";\", \"APA =\", str(apa) + \";\", \"MPA =\", mpa)\r\n    print(\"--------------------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn6_skill2.py\", [gpa, apa, mpa])\r\n        \r\n    print(output.strip())\r\n        \r\n    if output.strip() == solution(gpa, apa, mpa):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT.  Expected:\", solution(gpa, apa, mpa), \"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    #round(random.uniform(0.1, 1.9),1)\r\n    #round(random.uniform(2.1, 4.0),1)\r\n    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1))\r\n    run_test(round(random.uniform(0.1, 1.9),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1))\r\n    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(0.1, 1.9),1), round(random.uniform(2.1, 4.0),1))\r\n    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(0.1, 1.9),1))\r\n\r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "--------------------------------------------\nTesting GPA = 2.3; APA = 3.5; MPA = 2.8\n--------------------------------------------\nThe travel time is:  0.6571428571428571  hours\nINCORRECT.  Expected: No Probation \n\n--------------------------------------------\nTesting GPA = 0.8; APA = 2.7; MPA = 3.5\n--------------------------------------------\nThe travel time is:  0.2962962962962963  hours\nINCORRECT.  Expected: Probation \n\n--------------------------------------------\nTesting GPA = 2.2; APA = 1.3; MPA = 3.0\n--------------------------------------------\nThe travel time is:  1.6923076923076923  hours\nINCORRECT.  Expected: Probation \n\n--------------------------------------------\nTesting GPA = 2.8; APA = 3.3; MPA = 1.5\n--------------------------------------------\nThe travel time is:  0.8484848484848485  hours\nINCORRECT.  Expected: Probation \n\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 23, "problem_id": "lsn6_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Prompt the user for 3 different values. Store the values in variables using\nthe names specified within the template. DO NOT include any prompts when\nasking for a value from the user.\n\n\n", "code": "\n# Prompt the user for 3 different values\nvalue1 = input()\nvalue2 = input()\nvalue3 = input()\n\n# Print the values\nprint(value1)\nprint(value2)\nprint(value3)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\n# The Actual Solution\r\ndef solution(body_temperature):\r\n    if body_temperature >= 97 and body_temperature <= 99:\r\n        return \"Normal\"\r\n    else:\r\n        return \"Abnormal\"\r\n\r\n\r\ndef run_test(body_temperature):\r\n    global num_tests_run, num_tests_passed\r\n    \r\n    num_tests_run += 1\r\n    \r\n    print(\"--------------------------------------------\")\r\n    print(\"Testing Temperature =\", body_temperature)\r\n    print(\"--------------------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn6_skill1.py\", [body_temperature])\r\n        \r\n    if output.strip() == solution(body_temperature):\r\n        print(\"SUCCESS!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT.  Expected:\", solution(body_temperature), \"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    run_test(96.9)\r\n    run_test(97)\r\n    run_test(98.5)\r\n    run_test(99)\r\n    run_test(99.1)\r\n\r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "--------------------------------------------\nTesting Temperature = 96.9\n--------------------------------------------\nINCORRECT.  Expected: Abnormal \n\n--------------------------------------------\nTesting Temperature = 97\n--------------------------------------------\nINCORRECT.  Expected: Normal \n\n--------------------------------------------\nTesting Temperature = 98.5\n--------------------------------------------\nINCORRECT.  Expected: Normal \n\n--------------------------------------------\nTesting Temperature = 99\n--------------------------------------------\nINCORRECT.  Expected: Normal \n\n--------------------------------------------\nTesting Temperature = 99.1\n--------------------------------------------\nINCORRECT.  Expected: Abnormal \n\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 24, "problem_id": "lsn6_projectile", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nWrite a python program that can calculate the range of a projectile when fired\nfrom an artillery on level ground. Your program will ask the user to input the\ninitial velocity (`v`) and angle in degrees (`theta`). Your program should\nthen calculate and print the range using the following formula:\n\n`range = (v^2 * sin(2 * theta)) / 9.8`  \n **WARNING: The above formula is not valid Python.**  \n  \n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 800  \n45 | 600  \n30 | 535.2  \n81.7  \nOutput | 65306.122 | 31813.178 | 8350.235  \n  \n**Hints**\n\n  * You need to use the `math` module's trig functions to solve this problem. Type `import math` at the top of your code to add it to your program.\n  * The `sin()` and `cos()` functions assume that the angle is in  **radians**\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    NUM_TESTS = 5\r\n    num_correct = 0\r\n    \r\n    for i in range(NUM_TESTS):\r\n        # Generates Random Values\r\n        velocity = random.randint(400, 900)\r\n        theta = random.random() * 90.0\r\n        answer = (velocity**2 * math.sin(2 * theta * math.pi/180.0)) / 9.8   \r\n            \r\n        print(\"----------------------------------------\")\r\n        print(\"TEST CASE\", i+1)\r\n        print(\"----------------------------------------\")\r\n        \r\n        # Runs the Script\r\n        output, error_message = autograder.run_script(\"lsn6_projectile.py\", [velocity, theta])\r\n\r\n        # Optional:  Displays the Error Message (if one is provided)\r\n        if error_message != '':\r\n            print(\"Error Occurred: \" + error_message)    \r\n        \r\n        lines = output.split('\\n')\r\n        \r\n        if autograder.equals(lines[0], answer):\r\n            print(\"CORRECT.\\n\\n\")\r\n            num_correct += 1\r\n        else:\r\n            print(\"INCORRECT (Expected: \" + str(answer) + \")\\n\\n\")\r\n    \r\n    return (100 / NUM_TESTS) * num_correct\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "----------------------------------------\nTEST CASE 1\n----------------------------------------\nINCORRECT (Expected: 79196.50569766476)\n\n\n----------------------------------------\nTEST CASE 2\n----------------------------------------\nINCORRECT (Expected: 66282.67447690501)\n\n\n----------------------------------------\nTEST CASE 3\n----------------------------------------\nINCORRECT (Expected: 44191.011595043245)\n\n\n----------------------------------------\nTEST CASE 4\n----------------------------------------\nINCORRECT (Expected: 15080.157663376493)\n\n\n----------------------------------------\nTEST CASE 5\n----------------------------------------\nINCORRECT (Expected: 19105.43248659193)\n\n\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 25, "problem_id": "lsn6_math", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nGiven three floating-point numbers x, y, and z, output the square root of x,\nthe absolute value of (y minus z) , and the factorial of (the ceiling of z).\nEach input should be on a new line, and rounded to a maximum of 2 decimal\nplaces.\n\n(Hint: use the [`round` (Links to an external\nsite.)](https://docs.python.org/3/library/functions.html#round) function to\nround your outputs!):\n\n`round(# to round, # of digits to round to)`\n\n**EXAMPLE:**\n\n    \n    \n    5.0\n    6.5\n    3.2\n    \n\nThen the output is:\n\n    \n    \n    2.24\n    3.30\n    24.00\n    \n\nNOTE: Decimal places may be slightly off depending on the exact numbers used.\n\n\n", "code": "\nimport math\n\nx = float(input())\ny = float(input())\nz = float(input())\n\nsqrt_x = round(math.sqrt(x), 2)\nabs_y_minus_z = round(abs(y - z), 2)\nfactorial_ceil_z = round(math.factorial(math.ceil(z)), 2)\n\nprint(sqrt_x)\nprint(abs_y_minus_z)\nprint(factorial_ceil_z)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num1 = random.random() * 100.0\r\n    num2 = random.random() * 100.0\r\n    num3 = random.random() * 10.0\r\n    \r\n    part1 = round(math.sqrt(num1), 2)\r\n    part2 = round(math.fabs(num2 - num3), 2)\r\n    part3 = round(math.factorial(math.ceil(num3)), 2)\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn6_math.py\", [num1, num2, num3])\r\n    \r\n    lines = output.split('\\n')\r\n    \r\n    if autograder.equals(lines[0], part1, 0.001) and autograder.equals(lines[1], part2, 0.001) and autograder.equals(lines[2], part3, 0.001):\r\n        print(\"Looks Good!\")\r\n        return 100\r\n    else:\r\n        print(\"One or more calculations did not work. Expected:\\n\" + str(part1) + \"\\n\" + str(part2) + \"\\n\" + str(part3))\r\n        return 0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "failed: must be real number, not str", "score": 0, "text": ""}, {"Unnamed: 0": 26, "problem_id": "lsn6_calories", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nThe following equations estimate the calories burned when exercising ([source\n(Links to an external\nsite.)](https://web.archive.org/web/20121021230025/http://fitnowtraining.com/2012/01/formula-\nfor-calories-burned/)):\n\nMen: Calories = ( (Age x 0.2017) + (Weight x 0.09036) + (Heart Rate x 0.6309)\n-- 55.0969 ) x Time / 4.184\n\nWomen: Calories = ( (Age x 0.074) -- (Weight x 0.05741) + (Heart Rate x\n0.4472) -- 20.4022 ) x Time / 4.184\n\nWrite a program using inputs age (years), weight (pounds), heart rate (beats\nper minute), and time (minutes), respectively. Output calories burned for men\nand women.\n\nOutput each floating-point value (your program will be marked correct so long\nas it outputs a value within a predefined range)\n\n**EXAMPLE:**\n\nIf the input is:\n\n    \n    \n    49\n    155\n    148\n    60\n    \n\nThen the output is:\n\n    \n    \n    891.47\n    580.94\n\n\n", "code": "\nage = int(input())\nweight = int(input())\nheart_rate = int(input())\ntime = int(input())\n\ncalories_burned_men = ((age * 0.2017) + (weight * 0.09036) + (heart_rate * 0.6309) - 55.0969) * time / 4.184\ncalories_burned_women = ((age * 0.074) - (weight * 0.05741) + (heart_rate * 0.4472) - 20.4022) * time / 4.184\n\nprint(round(calories_burned_men, 2))\nprint(round(calories_burned_women, 2))\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    age_years = random.randint(10, 99)\r\n    weight_pounds = random.randint(80, 400)\r\n    heart_bpm = random.randint(50, 140)\r\n    time_minutes = random.randint(15, 90)\r\n    \r\n    calories_man   = ( (age_years * 0.2017) + (weight_pounds * 0.09036) + (heart_bpm * 0.6309) - 55.0969 )  * time_minutes / 4.184\r\n    calories_woman = ( (age_years * 0.074)  - (weight_pounds * 0.05741) + (heart_bpm * 0.4472) - 20.4022 ) * time_minutes / 4.184\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn6_calories.py\", [age_years, weight_pounds, heart_bpm, time_minutes])\r\n      \r\n    lines = output.split('\\n')\r\n      \r\n    if autograder.equals(lines[0], calories_man):\r\n        print(\"Male Calorie Calculations Look Good.\")\r\n        if autograder.equals(lines[1], calories_woman):\r\n            print(\"Female Calorie Calculations Look Good.\")\r\n            return 100.0\r\n        else:\r\n            print(\"Female Calorie Calculation is Incorrect.\\nExpected: \" + str(calories_woman))\r\n            return 50.0\r\n    else:\r\n        print(\"Male Calorie Calculation is Incorrect.\\nExpected: \" + str(calories_man))\r\n        return 0.0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n", "exec_result": "failed: must be real number, not str", "score": 0, "text": ""}, {"Unnamed: 0": 27, "problem_id": "lsn6_bits_to_kmg", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nOne byte is comprised of 8 bits. A typical computer program has a requirement\nfor much more memory. Therefore, many bytes can be grouped together to make\nlarger memory amounts. Our convention is for computer memory is scaled in\nlogical increments of 210 = 1024.\n\nFor example:\n\n  * 1024 bytes = 1 kilobyte (KB)\n  * 1024 KB = 1 megabyte (MB)\n  * 1024 MB = 1 gigabyte (GB)\n\nWrite an algorithm that prompts the user for a number of bits and then outputs\nthe equivalent number of kilobytes, megabytes, and gigabytes.\n\n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 1000000 | 6879000 | 92445694  \nOutput | 122.07  \n0.12  \n0.00012 | 839.72  \n0.82  \n.0008 | 11,284.87  \n11.02  \n0.01  \n  \n**Note: Output must match within a predefined tolerance.**\n\n\n", "code": "\nbits = int(input(\"Enter the number of bits: \"))\n\nbytes = bits / 8\nkilobytes = bytes / 1024\nmegabytes = kilobytes / 1024\ngigabytes = megabytes / 1024\n\nprint(round(kilobytes, 2))\nprint(round(megabytes, 2))\nprint(round(gigabytes, 5))\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num_bits = random.randint(1, 1000000)\r\n    num_bytes = num_bits / 8\r\n    num_kb = num_bytes / 1024\r\n    num_mb = num_kb / 1024\r\n    num_gb = num_mb / 1024\r\n        \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn6_bits_to_kmg.py\", [num_bits])\r\n      \r\n    lines = output.split('\\n')\r\n      \r\n    if autograder.equals(lines[0], num_kb):\r\n        print(\"Kilobyte Conversion Looks Good.\")\r\n        if autograder.equals(lines[1], num_mb):\r\n            print(\"Megabyte Conversion Looks Good.\")\r\n            if autograder.equals(lines[2], num_gb):\r\n                print(\"Gigabyte Conversion Looks Good.\")\r\n                return 100.0\r\n            else:\r\n                print(\"Num GB is Incorrect.\\n  Expected: \" + str(num_gb))\r\n                return 67.0\r\n        else:\r\n            print(\"Num MB is Incorrect.\\n  Expected: \" + str(num_mb))\r\n            return 33.0\r\n    else:\r\n        print(\"Num KB is Incorrect.\\n  Expected: \" + str(num_kb))\r\n        return 0.0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n", "exec_result": "failed: must be real number, not str", "score": 0, "text": ""}, {"Unnamed: 0": 28, "problem_id": "lsn6_bits_to_bytes", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\n**PROBLEM STATEMENT:  \n**\n\nThe basic unit of computer memory is a bit. A bit can represent two values (on\nor off, 0 or 1). To represent more information, bits are grouped together in\nlarger quantities. Beyond a bit, the next logical grouping is a byte, where 1\nbyte has 8 bits. Write an algorithm that prompts the user for a number of bits\nand then outputs the equivalent number of bytes.\n\n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 8 | 800 | 7234  \nOutput | 1.0 | 100.0 | 904.25  \n  \n**Note: Output must match exactly.**\n\n\n", "code": "\nbits = int(input(\"Enter the number of bits: \"))\nbytes = bits / 8\nprint(bytes)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num_bits = random.randint(1, 1000000)\r\n    num_bytes = num_bits / 8\r\n\r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn6_bits_to_bytes.py\", [num_bits])\r\n      \r\n    if autograder.equals(output, num_bytes):\r\n        print(\"Num Bytes Looks Good.\")\r\n        return 100.0\r\n    else:\r\n        print(\"Num Bytes is Incorrect.\\nExpected: \" + str(num_bytes))\r\n        return 0.0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n", "exec_result": "failed: must be real number, not str", "score": 0, "text": ""}, {"Unnamed: 0": 29, "problem_id": "lsn6_bit_representation", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nOne way bits can hold information is computer images. Computer images are\ncomposed of a grid of small, independent colored cells known as pixels. The\nnumber of colors each pixel can hold is related to the number bits allocated\nto each pixel. A simple black and white image, for example, would have a\nsingle bit per pixel, where the value of the bit would represent black or\nwhite for that pixel. Allocating 2 bits per pixel would allow each pixel to\nhave one of four colors.\n\nGenerally speaking, the number of color options available to a particular\npixel can be described as:\n\n    \n    \n    numberofcolors = 2number of bits\n\nIn Python, write an algorithm that prompts the user for a number of bits and\nthen outputs the number of different colors that could be represented by a\nsingle pixel.\n\n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 3 | 8 | 24  \nOutput | 8 | 256 | 16777216  \n  \n**Note: Output must match exactly.**\n\n\n", "code": "\n# Prompt the user for the number of bits\nbits = int(input(\"Enter the number of bits: \"))\n\n# Calculate the number of different colors that could be represented by a single pixel\nnum_colors = 2 ** bits\n\n# Output the result\nprint(\"Number of different colors: \", num_colors)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num_bits = random.randint(1, 32)\r\n    num_colors = 2 ** num_bits\r\n\r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn6_bit_representation.py\", [num_bits])\r\n      \r\n    if autograder.equals(output, num_colors):\r\n        print(\"Num Colors Looks Good.\")\r\n        return 100.0\r\n    else:\r\n        print(\"Num Colors is Incorrect.\\nExpected: \" + str(num_colors))\r\n        return 0.0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "Num Colors is Incorrect.\nExpected: 1024\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 30, "problem_id": "lsn5_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a program that gets a cadet's age, and stores it in a variable called\n**your_age.**\n\nPrint the user's age + 4.\n\nFor example, if the user types:\n\n    \n    \n     18\n\nYour program should print:\n\n    \n    \n    22\n\n\n", "code": "\nyour_age = int(input(\"Enter your age: \"))\nprint(your_age + 4)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    points_earned = 0\r\n            \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 1 - CS110\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn5_skill2.py\", [\"CS110\"])\r\n    \r\n    if output.strip() == \"You get to program!\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 50\r\n    else:\r\n        print(\"Incorrect.  Expected: You get to program!\\n\")\r\n        \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 2 - Another Class\")\r\n    print(\"-------------------------------\")\r\n    classes = ['Math 151', 'English 111', 'Physics 110']\r\n    random_class = classes[random.randint(0, len(classes)-1)]\r\n    output, error_message = autograder.run_script(\"lsn5_skill2.py\", [random_class])\r\n    \r\n    if output.strip() == \"Boo, no programming.\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 50\r\n    else:\r\n        print(\"Incorrect.  Expected: Boo, no programming.\\n\")\r\n\r\n    return points_earned\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "-------------------------------\nTest 1 - CS110\n-------------------------------\nIncorrect.  Expected: You get to program!\n\n-------------------------------\nTest 2 - Another Class\n-------------------------------\nIncorrect.  Expected: Boo, no programming.\n\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 31, "problem_id": "lsn5_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Create a variable called  **name,  **and set it equal to your name\n(represented as a string--don't forget to use the quotation marks!).\n\n\n", "code": "\nname = \"Your Name\"\nprint(name)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    points_earned = 0\r\n    \r\n    # Generates Random Values\r\n    above_freezing = random.uniform(33, 100)\r\n    below_freezing = random.uniform(-100, 31)\r\n    at_freezing    = 32\r\n        \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 1 - Below Freezing\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn5_skill1.py\", [below_freezing])\r\n    \r\n    if output.strip() == \"Water Has Frozen\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 33\r\n    else:\r\n        print(\"Incorrect.  Expected: Water Has Frozen\\n\")\r\n        \r\n    \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 2 - Above Freezing\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn5_skill1.py\", [above_freezing])\r\n    \r\n    if output.strip() == \"Above Water's Freezing Point\":\r\n        print(\"CORRECT\\n\")\r\n        points_earned += 33\r\n    else:\r\n        print(\"Incorrect.  Expected: Above Water's Freezing Point\\n\")\r\n        \r\n    \r\n    # Runs the Script\r\n    print(\"-------------------------------\")\r\n    print(\"Test 3 - Exactly 32 Degrees\")\r\n    print(\"-------------------------------\")\r\n    output, error_message = autograder.run_script(\"lsn5_skill1.py\", [32])\r\n    \r\n    if output.strip() == \"Water Has Frozen\":\r\n        print(\"CORRECT\")\r\n        points_earned += 34\r\n    else:\r\n        print(\"Incorrect.  Expected: Water Has Frozen\\n\")\r\n\r\n    return points_earned\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "-------------------------------\nTest 1 - Below Freezing\n-------------------------------\nIncorrect.  Expected: Water Has Frozen\n\n-------------------------------\nTest 2 - Above Freezing\n-------------------------------\nIncorrect.  Expected: Above Water's Freezing Point\n\n-------------------------------\nTest 3 - Exactly 32 Degrees\n-------------------------------\nIncorrect.  Expected: Water Has Frozen\n\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 32, "problem_id": "lsn5_scoreaverage", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write an algorithm that prompts the user for three sports game scores and\noutputs the average.\n\n  \n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 8  \n15  \n12 | 89  \n103  \n63 | 14  \n42  \n36  \nOutput | 11.666666666666666 | 85.0 | 30.666666666666668  \n  \n**Note: Output must match (within a predefined tolerance).**\n\n\n", "code": "\nscore1 = float(input(\"Enter score 1: \"))\nscore2 = float(input(\"Enter score 2: \"))\nscore3 = float(input(\"Enter score 3: \"))\n\naverage = (score1 + score2 + score3) / 3\n\nprint(average)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    score1 = random.randint(0, 100)\r\n    score2 = random.randint(0, 100)\r\n    score3 = random.randint(0, 100)\r\n    average = (score1 + score2 + score3) / 3.0\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn5_scoreaverage.py\", [score1, score2, score3])\r\n    \r\n    if autograder.equals(output, average):\r\n        print(\"PASSED!\")\r\n        return 100\r\n    else:\r\n        print(\"Value doesn't match.\\nExpected: \" + str(average))\r\n        return 0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "failed: must be real number, not str", "score": 0, "text": ""}, {"Unnamed: 0": 33, "problem_id": "lsn5_pointspread", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nA \"Point Spread\" is a term used to in sports (and gambling) to describe the\ndifference between two teams' scores. For example, if one team scores 20\npoints and another team scores 30 points, the point spread is 10. A point\nspread is always a positive number.\n\nWrite an algorithm that prompts the user for two sports game scores and\noutputs the point spread.  \n  \n**  \nEXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 8  \n15 | 89  \n103 | 42  \n14  \nOutput | 7 | 14 | 28  \n  \n**Note: Output must match exactly.**\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    score1 = random.randint(0, 50)\r\n    score2 = random.randint(score1, 100)\r\n    spread = abs(score1 - score2)\r\n\r\n    points_earned = 0\r\n\r\n    # Trial #1:  score 1 > score2\r\n    print(\"Testing when score 1 is bigger than score 2 . . .\")\r\n    output, error_message = autograder.run_script(\"lsn5_pointspread.py\", [score1, score2])\r\n    \r\n    if autograder.equals(output, spread):\r\n        print(\"PASSED!\\n\")\r\n        points_earned += 50\r\n    else:\r\n        print(\"Value doesn't match.\\nExpected: \" + str(spread)  + \"\\n\")\r\n        \r\n    # Trial #2:  score 2 > score1\r\n    print(\"Testing when score 2 is bigger than score 1 . . .\")\r\n    output, error_message = autograder.run_script(\"lsn5_pointspread.py\", [score2, score1])\r\n    \r\n    if autograder.equals(output, spread):\r\n        print(\"PASSED!\")\r\n        points_earned += 50\r\n    else:\r\n        print(\"Value doesn't match.\\nExpected: \" + str(spread))\r\n    \r\n    return points_earned\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "Testing when score 1 is bigger than score 2 . . .\nValue doesn't match.\nExpected: 20\n\nTesting when score 2 is bigger than score 1 . . .\nValue doesn't match.\nExpected: 20\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 34, "problem_id": "lsn5_madlib", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Mad Libs are activities that have a person provide various words, which are\nthen used to complete a short story in unexpected (and hopefully funny) ways.\n(EDITOR'S NOTE: Do you kids even do Mad Libs anymore?)\n\nComplete the program to read the needed values from input, that the existing\noutput statement(s) can use to output a short story.\n\n**EXAMPLE:**\n\nIf the input is:\n\n    \n    \n    Eric\n    Chipotle\n    12\n    burritos\n    \n\nThen the output is:\n\n    \n    \n    Eric went to Chipotle to buy 12 different types of burritos\n\n\n", "code": "\n# Read the input values\nname = input()\nplace = input()\nnumber = input()\nfood = input()\n\n# Print the output\nprint(name + \" went to \" + place + \" to buy \" + number + \" different types of \" + food)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    first_names = ['Adrian', 'Troy', 'Dave', 'Paul', 'Kelly', 'Steve', 'Barry']\r\n    generic_locations = ['Best Buy', 'AAFES', 'Target', 'THE Walmart', 'Home Depot']\r\n    nouns = ['Video Games', 'Board Games', 'Nintendo Switches', 'Sony PS4s', 'Microsoft (Ugh) Xbox Ones']\r\n    \r\n    first_name = first_names[random.randint(0, len(first_names) - 1)]\r\n    generic_location = generic_locations[random.randint(0, len(generic_locations) - 1)]\r\n    whole_number = random.randint(0, 100)\r\n    plural_noun = nouns[random.randint(0, len(nouns) - 1)]\r\n\r\n    expected_output = first_name + ' went to ' + generic_location + ' to buy ' + str(whole_number) + ' different types of ' + plural_noun + \"\\n\"\r\n\r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn5_madlib.py\", [first_name, generic_location, whole_number, plural_noun])\r\n    \r\n    if output == expected_output:\r\n        print(\"PASSED!\")\r\n        return 100\r\n    else:\r\n        print(\"String doesn't match.\\nExpected: \" + expected_output)\r\n        return 0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "String doesn't match.\nExpected: Dave went to AAFES to buy 39 different types of Microsoft (Ugh) Xbox Ones\n\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 35, "problem_id": "lsn5_girlscouts", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a program that asks the user for the amount of money he/she has on\nhand, and outputs the number of girl scout cookies that he/she can purchase.\nUse the following prices:\n\n$5 per box for the \"Super Six\" (Thin Mints, Samoas, Tagalongs, Do-Si-Dos,\nTrefoils, Savannah Smiles)  \n$6 per box for the Specialty Cookies (S'mores, Toffee-tastic)\n\n**For this problem, assume that the user will buy all of one or the other. In\nother words, output the number of boxes that he/she would be able to obtain if\nhe/she bought nothing but the Super Six, and nothing but the Specialty\nCookies.**\n\n**HINT:**  \nYou can convert a number to an integer by using the int() function. For\nexample:  \n **int(2.51)** will convert the number to 2\n\nEXAMPLE:  \nIf the input is:\n\n    \n    \n    26\n\nThen the output is:\n\n    \n    \n    5 boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles  \n    4 boxes of S'mores and Toffee-tastic\n\n\n", "code": "\nmoney = int(input())\n\nsuper_six_price = 5\nspecialty_price = 6\n\nsuper_six_boxes = money // super_six_price\nspecialty_boxes = money // specialty_price\n\nprint(super_six_boxes, \"boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles\")\nprint(specialty_boxes, \"boxes of S'mores and Toffee-tastic\")\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    dollar_amount = round(random.uniform(10.00, 100.00), 2)\r\n    super_six_amount = (dollar_amount // 5)\r\n    specialty_amount = (dollar_amount // 6)\r\n    score = 0\r\n    \r\n    line_1 = str(int(super_six_amount)) + \" boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles\"\r\n    line_2 = str(int(specialty_amount)) + \" boxes of S'mores and Toffee-tastic\"\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn5_girlscouts.py\", [dollar_amount])\r\n    output_lines = output.split('\\n')\r\n    \r\n    if line_1 == output_lines[0]:\r\n        print(\"First Line is Correct\")\r\n        score += 50\r\n    else:\r\n        print(\"First Line is Incorrect.  Expected:\", line_1)\r\n    \r\n    if line_2 == output_lines[1]:\r\n        print(\"Second Line is Correct\")\r\n        score += 50\r\n    else:\r\n        print(\"Second Line is Incorrect.  Expected:\", line_2)\r\n    \r\n    return score\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 100.0, "text": "First Line is Correct\nSecond Line is Correct\nUnit Test Returned: 100\n"}, {"Unnamed: 0": 36, "problem_id": "lsn5_arrivaltime", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite an algorithm that prompts the user for a distance to travel (in miles)\nand a speed (in mph) and outputs time of arrival in hours.\n\n  \n**For Example:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 72  \n60 | 1282  \n85 | 120.5  \n59.2  \nOutput | 1.2 | 15.0823 | 2.0355  \n  \n**Note: Output needs to match the examples.**\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    distance = round(random.random() * 1000, 1)\r\n    speed = round(random.random() * 60, 1)\r\n    time = distance / speed\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn5_arrivaltime.py\", [distance, speed])\r\n    \r\n    if autograder.equals(output, time):\r\n        print(\"PASSED!\")\r\n        return 100\r\n    else:\r\n        print(\"Value doesn't match.\\nExpected: \" + str(time))\r\n        return 0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "Value doesn't match.\nExpected: 7.2334905660377355\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 37, "problem_id": "lsn4_printpractice", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nThe template file contains various words/phrases that you need to print out\n(exactly as written) using Python's `print()` function. For example:\n\n  1. Print the phrase \"Welcome to Computer Science 110!\"\n\n  2. Print the result to the following math expression: (640 * 480 * 24) / 8\n\n  3. etc (see the template for details)\n\nEach print statement should be written directly below the corresponding\ncomment. While you can technically \"cheat\" on this problem, we encourage you\nto practice all the various ways that you can use the `print` function. You\nwill thank us later!\n\n\n", "code": "\n# Print the phrase \"Welcome to Computer Science 110!\"\nprint(\"Welcome to Computer Science 110!\")\n\n# Print the result of the following math expression: (640 * 480 * 24) / 8\nprint((640 * 480 * 24) / 8)\n\n# Print the phrase \"Today's date is\" followed by the current date\nimport datetime\nprint(\"Today's date is\", datetime.date.today())\n\n# Print the phrase \"The answer is: \" followed by the value of 2 + 2\nprint(\"The answer is:\", 2 + 2)\n\n# Print the phrase \"Python is a powerful language\" in uppercase\nprint(\"Python is a powerful language\".upper())\n\n# Print the phrase \"This is line 1\" on one line and \"This is line 2\" on another line\nprint(\"This is line 1\")\nprint(\"This is line 2\")\n\n# Print a horizontal line using dashes (-)\nprint(\"-\" * 30)\n\n# Print a vertical line using vertical bars (|)\nprint(\"|\")\nprint(\"|\")\nprint(\"|\")\n\n# Print a box using horizontal and vertical lines\nprint(\"-\" * 5)\nprint(\"|   |\")\nprint(\"-\" * 5)\n", "testcase": "from cs110 import autograder\r\n\r\ndef test_passed():\r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn4_printpractice.py\", [])\r\n\r\n    student_output = output.strip().split('\\n')\r\n    expected_output = ['Welcome to Computer Science 110!', '921600.0', 'Liam is 8 years old', 'F-15  Eagle', 'F-16  Fighting Falcon', 'B-2   Spirit', 'C-141 Starlifter']\r\n    num_matches = autograder.compare_strings(student_output, expected_output)\r\n    \r\n    return round(num_matches * (100 / len(expected_output)), 1)\r\n\r\n\r\n# Testbench (to be run in an IDE)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n", "exec_result": "completed", "score": 28.6, "text": "Unit Test Returned: 28.6\n"}, {"Unnamed: 0": 38, "problem_id": "lsn4_parking", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:**\n\nWrite a program that prints a formatted \"No parking\" sign as shown below. Note\nthe first line has two leading spaces. For ALL labs, end with newline (unless\notherwise stated).\n\n    \n    \n     NO PARKING  \n    1:00 - 5:00 a.m.  \n      \n    \n\n\n", "code": "\nprint(\"  NO PARKING\")\nprint(\"1:00 - 5:00 a.m.\")\nprint()\n", "testcase": "from cs110 import autograder\r\n\r\ndef test_passed():\r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn4_parking.py\", [])\r\n        \r\n    if output.startswith(\"  NO PARKING\\n\"):\r\n        if output == \"  NO PARKING\\n1:00 - 5:00 a.m.\\n\":\r\n            print(\"Passed!\")\r\n            return 100\r\n        else:\r\n            print(\"Something is wrong with the second line.\")\r\n            return 50\r\n    else:\r\n        print(\"Something is wrong with the first line.\")\r\n        return 0\r\n\r\n# Testbench (to be run in an IDE)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 50.0, "text": "Something is wrong with the second line.\nUnit Test Returned: 50\n"}, {"Unnamed: 0": 39, "problem_id": "lsn4_ascii", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a Python program that prints out a cat:\n\n    \n    \n    /\\ /\\\n     o o\n     = =\n     ---  \n      \n    \n\n_Hint: A backslash  `\\` in a string acts as an escape character, such as with\na newline_ `\\n`.  _So, to print an actual backslash, escape that backslash by\nprepending another backslash. Ex: The following prints a single backslash:_\n`print('\\\\')`\n\n\n", "code": "\nprint(\"   /\\\\ /\\\\\")\nprint(\"   o o\")\nprint(\"   = =\")\nprint(\"   ---\")\n", "testcase": "from cs110 import autograder\r\n\r\ndef test_passed():\r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn4_ascii.py\", [])\r\n    \r\n    lines = output.split('\\n')\r\n    \r\n    # Checks for the Cat\r\n    if lines[0].rstrip() == '/\\\\   /\\\\':\r\n        #test_feedback.write('1')\r\n        if lines[1].rstrip() == '  o o':\r\n            #test_feedback.write('2')\r\n            if lines[2].rstrip() == ' =   =':\r\n                #test_feedback.write('3')\r\n                if lines[3].rstrip() == '  ---':\r\n                    #test_feedback.write('4')\r\n                    print('Cat Looks Good!\\n')\r\n                    return 100\r\n                else:\r\n                    print('Problem in the fourth line of the cat') \r\n            else:\r\n                print('Problem in the third line of the cat')  \r\n        else:\r\n            print('Problem in the second line of the cat')  \r\n    else:\r\n        print('Problem in the first line of the cat')\r\n    \r\n    return 0\r\n\r\n# Testbench (to be run in an IDE)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "Problem in the first line of the cat\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 40, "problem_id": "lsn33_practice8", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nYou have been provided with a file called oscar_age_male.csv, which contains\ninformation about male oscar award winners from the 1920s to 2015. Here is a\ntypical line from the file:\n\n    \n    \n    1928,44,Emil Jannings,The Last Command\n\nAs always, each data element corresponds to a different piece of information.\nHere is a table that describes how to interpret each column:\n\n**Year** | **Actor Age** | **Name** | **Film**  \n---|---|---|---  \n1928 | 44 | Emil Jannings | The Last Command  \n  \n\n\nWrite a Python program that reads this file, and gets the following inputs\nfrom the user:\n\n  *     * A start year\n    * An end year\n\nYour program should output the age of the youngest actor during that time span\n(including the start and end years), as well as the names of all actors that\nare within 5 years (inclusive) of the youngest age. For simplicity's sake,\ndon't try to calculate the current age of the actors; just go with what is in\nthe file.\n\n\n\nFor example, if the youngest actor is 25, and the names of the actors within 5\nyears of the youngest age are Bob and Tom, your program should output:  \n  \n25  \nBob  \nTom\n\n\n\n\n", "code": "\nimport csv\n\n# Get the start year and end year from the user\nstart_year = int(input(\"Enter the start year: \"))\nend_year = int(input(\"Enter the end year: \"))\n\n# Initialize variables to store the youngest actor age and their names\nyoungest_age = float('inf')\nyoungest_actors = []\n\n# Open the file and read its contents\nwith open('oscar_age_male.csv', 'r') as file:\n    csv_reader = csv.reader(file)\n    \n    # Iterate through each row in the file\n    for row in csv_reader:\n        # Get the year and actor's age from the current row\n        year = int(row[0])\n        age = int(row[1])\n        \n        # Check if the year is within the specified time span\n        if start_year <= year <= end_year:\n            # Check if the actor's age is younger than the youngest age found so far\n            if age < youngest_age:\n                # Update the youngest age and clear the list of youngest actors\n                youngest_age = age\n                youngest_actors = []\n            \n            # Check if the actor's age is within 5 years of the youngest age\n            if age <= youngest_age + 5:\n                # Add the actor's name to the list of youngest actors\n                youngest_actors.append(row[2])\n\n# Print the youngest age and the names of the youngest actors\nprint(youngest_age)\nfor actor in youngest_actors:\n    print(actor)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ninputs  = [[1994, 2010], [1955, 1979], [1960, 1969]]\r\noutputs = [['29', 'Nicolas Cage', 'Adrien Brody'],\r\n           ['30', 'Marlon Brando', 'Maximilian Schell', 'Richard Dreyfuss'],\r\n           ['31', 'Charlton Heston', 'Maximilian Schell']]\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_index = random.randint(0, len(inputs)-1)\r\n    print(random_index)\r\n    input_list = inputs[random_index]\r\n    expected_output = outputs[random_index]\r\n    \r\n    output, error = autograder.run_script(\"lsn33_practice8.py\", input_list)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_output)\r\n       \r\n    return round(num_matches * (100.0 / len(expected_output)), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "2\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 41, "problem_id": "lsn33_practice7", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**SIMPLE PIG LATIN RULES:**\n\n  *  If the word starts with a vowel, add 'way' to the end of the word. \n  *  If the word starts with a consonant, take the first letter, put it on the end of the word and ad 'ay' to the end.\n\n**PROBLEM STATEMENT:**\n\nWrite a function called **pig_latin  **take takes in a string of words and\nreturns the string converted to pig latin.\n\nExample 1 | Example 2  \n---|---  \nInput | \"Lets test this out\" | \"Rick Astley is my hero\"  \nExpected Output | \"etsLay esttay histay outway \" | \"ickRay Astleyway isway\nymay erohay\"\n\n\n", "code": "\ndef pig_latin(sentence):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    words = sentence.split()\n    pig_latin_sentence = ''\n  \n    for word in words:\n        if word[0].lower() in vowels:\n            pig_latin_sentence += word + 'way '\n        else:\n            pig_latin_sentence += word[1:] + word[0] + 'ay '\n    \n    return pig_latin_sentence.strip()\n```\n\nExample usage:\n\n", "testcase": "import webbrowser\r\n\r\nprint(\"That's it, the video is the joke. Feel free to practice this problem but there's not an actual score.\")\r\n\r\nwebbrowser.open('https://www.youtube.com/watch?v=dQw4w9WgXcQ')\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "failed: 'NoneType' object is not callable", "score": 0, "text": ""}, {"Unnamed: 0": 42, "problem_id": "lsn33_practice6", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite a python program that gets a temperature from the user, a level of\nprecipitation (rain, snow, none), and a humidity level (high, medium, low).\nUsing the following rules, print the correct output.\n\n  * If the temperature is above 84.9 degrees, and the humidity is 'high' or 'medium', print 'Walk slowly'.\n  * If the precipitation is 'snow' or 'rain', print 'Do not run!'.\n  * For all other situations, print 'Move quickly'.\n\n\n\n  | **Example 1** | **Example 1**  \n---|---|---  \n**Input(s)** |\n\n85  \nrain  \nhigh\n\n|\n\n75  \nsnow  \nlow  \n  \n**Expected Output** | Walk slowly | Do not run!  \n  \n\n\n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(temp, precip, humidity):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"--------------------------------------------------------------\")\r\n    print(\"Testing temperature =\", temp, \"precipitation =\", precip, \"humidity =\", humidity)\r\n    print(\"--------------------------------------------------------------\")\r\n    \r\n    # SOLUTION\r\n    if temp > 84.9 and (humidity == 'high' or humidity == 'medium'):\r\n        solution = 'Walk slowly'\r\n    elif precip == 'snow' or precip == 'rain':\r\n        solution = 'Do not run!'\r\n    else:\r\n        solution = 'Move quickly'\r\n    \r\n    output, error_message = autograder.run_script(\"lsn33_practice6.py\", [temp, precip, humidity])\r\n    \r\n    if output.strip() == solution:\r\n        print(\"CORRECT!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", solution)\r\n        print(\"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    # options for random test cases\r\n    humidity_list = ['high', 'medium', 'low']\r\n    precip_list = ['snow', 'rain', 'none']\r\n    \r\n    # pick random sample for each test case\r\n    for i in range(10):\r\n        humidity = random.choice(humidity_list)\r\n        precip = random.choice(precip_list)\r\n        if precip == 'snow':\r\n            temp_list = [12, 14, 20, 32, 41]\r\n        else:\r\n            temp_list = [77, 84.9, 92]\r\n        temp = random.choice(temp_list)\r\n        \r\n        # run test\r\n        run_test(temp, precip, humidity)\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "--------------------------------------------------------------\nTesting temperature = 77 precipitation = rain humidity = high\n--------------------------------------------------------------\nINCORRECT. Expected: Do not run!\n\n\n--------------------------------------------------------------\nTesting temperature = 84.9 precipitation = none humidity = medium\n--------------------------------------------------------------\nINCORRECT. Expected: Move quickly\n\n\n--------------------------------------------------------------\nTesting temperature = 84.9 precipitation = rain humidity = low\n--------------------------------------------------------------\nINCORRECT. Expected: Do not run!\n\n\n--------------------------------------------------------------\nTesting temperature = 92 precipitation = rain humidity = low\n--------------------------------------------------------------\nINCORRECT. Expected: Do not run!\n\n\n--------------------------------------------------------------\nTesting temperature = 77 precipitation = rain humidity = medium\n--------------------------------------------------------------\nINCORRECT. Expected: Do not run!\n\n\n--------------------------------------------------------------\nTesting temperature = 92 precipitation = rain humidity = low\n--------------------------------------------------------------\nINCORRECT. Expected: Do not run!\n\n\n--------------------------------------------------------------\nTesting temperature = 92 precipitation = rain humidity = low\n--------------------------------------------------------------\nINCORRECT. Expected: Do not run!\n\n\n--------------------------------------------------------------\nTesting temperature = 77 precipitation = none humidity = high\n--------------------------------------------------------------\nINCORRECT. Expected: Move quickly\n\n\n--------------------------------------------------------------\nTesting temperature = 84.9 precipitation = none humidity = medium\n--------------------------------------------------------------\nINCORRECT. Expected: Move quickly\n\n\n--------------------------------------------------------------\nTesting temperature = 84.9 precipitation = none humidity = high\n--------------------------------------------------------------\nINCORRECT. Expected: Move quickly\n\n\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 43, "problem_id": "lsn33_practice5", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nBoyle's Law states, for an ideal gas, that the pressure (p) multiplied by #\nthe volume of a container (v) is always constant. So, if we have an initial\npressure and volume (p1 * v1 = k) and we decrease the volume (v2) the pressure\n(v2) must increase. The formula for this is\n\n    \n    \n    p1 * v1 = p2 * v2\n\nWrite a python program the gets the first pressure, first volume, and second\nvolume. Calculate the new pressure and print it to the console.\n\n\n\n  | **Example 1**  \n---|---  \n**Input(s)** |\n\n25  \n100  \n150  \n  \n**Expected Output** | 16.667  \n  \n\n\n\n\n\n", "code": "\np1 = float(input())\nv1 = float(input())\nv2 = float(input())\n\np2 = (p1 * v1) / v2\n\nprint(round(p2, 3))\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\nnum_tests_passed = 0\r\nnum_tests_run = 0\r\n\r\ndef run_test(p1, v1, v2):\r\n    global num_tests_run, num_tests_passed\r\n        \r\n    num_tests_run += 1\r\n    \r\n    print(\"--------------------------------------------------------------\")\r\n    print(\"Testing pressure 1 =\", p1, \"volume 1 =\", v1, \"volume 2 =\", v2)\r\n    print(\"--------------------------------------------------------------\")\r\n    \r\n    # SOLUTION\r\n    solution = p1 * v1 / v2 \r\n    \r\n    output, error_message = autograder.run_script(\"lsn33_practice5.py\", [p1, v1, v2])\r\n    \r\n    if float(output.strip()) == solution:\r\n        print(\"CORRECT!\\n\")\r\n        num_tests_passed += 1\r\n    else:\r\n        print(\"INCORRECT. Expected:\", solution)\r\n        print(\"\\n\")\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    for i in range(5):\r\n        run_test(round(random.uniform(0, 100),2), round(random.uniform(0, 100),2), round(random.uniform(0, 100),2))\r\n    \r\n    return round(num_tests_passed * (100 / num_tests_run), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "--------------------------------------------------------------\nTesting pressure 1 = 30.67 volume 1 = 3.59 volume 2 = 90.93\n--------------------------------------------------------------\nINCORRECT. Expected: 1.2108797976465413\n\n\n--------------------------------------------------------------\nTesting pressure 1 = 22.88 volume 1 = 98.25 volume 2 = 74.16\n--------------------------------------------------------------\nINCORRECT. Expected: 30.312297734627833\n\n\n--------------------------------------------------------------\nTesting pressure 1 = 75.5 volume 1 = 95.82 volume 2 = 33.78\n--------------------------------------------------------------\nINCORRECT. Expected: 214.16252220248666\n\n\n--------------------------------------------------------------\nTesting pressure 1 = 2.69 volume 1 = 78.45 volume 2 = 76.61\n--------------------------------------------------------------\nINCORRECT. Expected: 2.754607753556977\n\n\n--------------------------------------------------------------\nTesting pressure 1 = 46.01 volume 1 = 68.12 volume 2 = 4.9\n--------------------------------------------------------------\nINCORRECT. Expected: 639.6328979591837\n\n\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 44, "problem_id": "lsn33_practice4", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou are going to be given values for a dictionary. These will be an historic\nlandmark as the key and the location of that landmark as the value. You will\ncontinue to receive input until the user types \"DONE\".\n\nAfter the dictionary is populated, get a landmark key as an input from the\nuser and print the location where the landmark is. If the landmark isn't in\nthe dictionary, print \"Landmark not found\".\n\n\n\n  | **Example 1**  \n---|---  \n**Input(s)** |\n\nPyramids  \nEgypt  \nMt Rushmore  \nSouth Dakota  \nEmpire State Building  \nNew York City  \nDONE  \nMt Rushmore  \n  \n**Expected Output** | South Dakota  \n  \n\n\n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ninput_list = [\"Statue of Liberty\",\r\n              \"New York City\",\r\n              \"Grand Canyon\",\r\n              \"Airzona\",\r\n              \"Tower of Pisa\",\r\n              \"Italy\",\r\n              \"Pikes Peak\",\r\n              \"Colorado\",\r\n              \"Liberty Bell\",\r\n              \"Pennsylvania\",\r\n              \"Sears Tower\",\r\n              \"Chicago\",\r\n              \"DONE\",\r\n              \"Statue of Liberty\"]\r\n\r\nexpected_output = [\"New York City\"]\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    output, error = autograder.run_script(\"lsn33_practice4.py\", input_list)\r\n    lines = output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_output)\r\n       \r\n    return round(num_matches * (100.0 / len(expected_output)), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "Unit Test Returned: 0.0\n"}, {"Unnamed: 0": 45, "problem_id": "lsn33_practice3", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou are being provided with three sets. Each set contains the brands of cars\nthat a car dealer is willing to sell.\n\nWrite a Python Program that gets the name of a brand from the user. Then have\nit print \"Dealer 1\", \"Dealer 2\", and/or \"Dealer 3\" (one per line) depending on\nwhether or not the dealer sells that type of car.\n\nIf all 3 dealers sell the car brand, output \"All Dealers\"\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Input(s)** | Toyota | Acura | Ford  \n**Expected Output** | Dealer 2  \nDealer 3 | All Dealers | Dealer 1  \n  \n\n\n\n\n\n", "code": "\ncar_dealer1 = {'Toyota', 'Honda', 'Nissan', 'Ford'}\ncar_dealer2 = {'Acura', 'Toyota', 'Subaru', 'Honda'}\ncar_dealer3 = {'Ford', 'Toyota', 'Audi', 'Mercedes'}\n\nbrand = input('Enter the name of a car brand: ')\n\nif brand in car_dealer1 and brand in car_dealer2 and brand in car_dealer3:\n    print('All Dealers')\nelif brand in car_dealer1:\n    print('Dealer 1')\nelif brand in car_dealer2:\n    print('Dealer 2')\nelif brand in car_dealer3:\n    print('Dealer 3')\n\n", "testcase": "from cs110 import autograder\r\nimport random, statistics\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    # Hard Coded Test Cases . . . the best\r\n    test_cases = [\r\n                    [['Audi'], [\"Dealer 3\"]],\r\n                    [['Toyota'], [\"Dealer 2\", \"Dealer 3\"]],\r\n                    [['Acura'], [\"All Dealers\"]],\r\n                 ]\r\n    \r\n    for test_case in test_cases:\r\n        print(\"----------------------\")\r\n        print(\"Test Case\", test_cases.index(test_case) + 1)\r\n        print(\"----------------------\")\r\n        \r\n        # Runs the Script\r\n        input_list = test_case[0]\r\n        expected_output = test_case[1]\r\n        output, error_message = autograder.run_script(\"lsn33_practice3.py\", input_list)\r\n        \r\n        output_list = output.split('\\n')\r\n        \r\n        if len(output_list) - 1 != len(expected_output):\r\n            print(\"Your program's output does not have the expected number of lines\")\r\n        else:\r\n            lines_correct = 0\r\n            for i in range(len(expected_output)):\r\n                if str(expected_output[i]) == output_list[i]:\r\n                    print(\"Line\", i+1, \"is correct\")\r\n                    lines_correct += 1\r\n                else:\r\n                    print(\"Line\", i+1, \"is incorrect (Expected:\" + str(expected_output[i]) + \")\")\r\n            \r\n            score += (100 / len(test_cases)) * (lines_correct / len(expected_output))\r\n        \r\n        print()\r\n        \r\n    return round(score, 1)\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 33.3, "text": "----------------------\nTest Case 1\n----------------------\nLine 1 is correct\n\n----------------------\nTest Case 2\n----------------------\nYour program's output does not have the expected number of lines\n\n----------------------\nTest Case 3\n----------------------\nLine 1 is incorrect (Expected:All Dealers)\n\nUnit Test Returned: 33.3\n"}, {"Unnamed: 0": 46, "problem_id": "lsn33_practice2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nIn Star Trek, starships travel across interstellar space at many times the\nspeed of light.  Due to the immense speeds involved, velocity in Star Trek is\ndescribed using a fictitious unit of measurement known as a \"Warp Factor\".\nFor reference, Warp Factor 1.0 is equivalent to the speed of light, whereas\nWarp Factor 9.0 is more than 700 times faster!\n\nWrite a program that asks the user for the number of starships to analyze, as\nwell as a target distance in light years.  Your program will then get the name\nof each starship (e.g., \"USS Enterprise) as well as its maximum cruise speed\n(e.g., 9.6), in that order.\n\nYour program will then output the following:\n\n  * The number of days it would take for the fastest starship to travel the target distance\n  * The names of all ships that can travel the same distance within 7 days (inclusive) of the fastest time\n\n\n\n**HINT:   We have provided you with a function called calculate_travel_time,\nwhich takes a warp factor and distance as parameters, and returns the number\nof days it would take to travel that distance.  Call this function to solve\nthe problem.**\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**Input(s)** | 2  \n1.0  \nUSS Horizon  \n2.0  \nUSS Daedalus  \n2.5 | 2  \n250  \nUSS Voyager  \n9.975  \nUSS Enterprise-E  \n9.8  \n**Expected Output** | 17.2  \nUSS Daedalus | 42.7  \nUSS Voyager  \nUSS Enterprise-E\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, statistics\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    # Hard Coded Test Cases . . . the best\r\n    test_cases = [\r\n                    [[3, 1.0, \"USS Enterprise-D\", 9.6, \"USS Voyager\", 9.975, \"USS Rubicon\", 4.0],\r\n                        [0.2, \"USS Enterprise-D\", \"USS Voyager\", \"USS Rubicon\"]],\r\n                    [[5, 100, \"USS Discovery\", 7.5, \"USS Enterprise-A\", 8, \"USS Constellation\", 9.2, \"USS Farragut\", 9.4, \"USS Stargazer\", 6.0],\r\n                        [20.8, \"USS Constellation\", \"USS Farragut\"]],\r\n                 ]\r\n    \r\n    for test_case in test_cases:\r\n        print(\"----------------------\")\r\n        print(\"Test Case\", test_cases.index(test_case) + 1)\r\n        print(\"----------------------\")\r\n        \r\n        # Runs the Script\r\n        input_list = test_case[0]\r\n        expected_output = test_case[1]\r\n        output, error_message = autograder.run_script(\"lsn33_practice2.py\", input_list)\r\n        \r\n        output_list = output.split('\\n')\r\n        \r\n        if len(output_list) - 1 != len(expected_output):\r\n            print(\"Your program's output does not have the expected number of lines\")\r\n        else:\r\n            lines_correct = 0\r\n            for i in range(len(expected_output)):\r\n                if str(expected_output[i]) == output_list[i]:\r\n                    print(\"Line\", i+1, \"is correct\")\r\n                    lines_correct += 1\r\n                else:\r\n                    print(\"Line\", i+1, \"is incorrect (Expected:\" + str(expected_output[i]) + \")\")\r\n            \r\n            score += (100 / len(test_cases)) * (lines_correct / len(expected_output))\r\n        \r\n        print()\r\n        \r\n    return round(score, 1)\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "----------------------\nTest Case 1\n----------------------\nYour program's output does not have the expected number of lines\n\n----------------------\nTest Case 2\n----------------------\nYour program's output does not have the expected number of lines\n\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 47, "problem_id": "lsn33_practice1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite a Python program that keeps asking the user for positive integers until\nthe user types -1.\n\nYour program will then output the following:\n\n  * # of even numbers\n  * Average of all the even numbers (if no even numbers were input, print 0)\n  * # of odd numbers\n  * Average of all the odd numbers (if no odd numbers were input, print 0)\n\nYou may assume that the user will type AT LEAST one number. You cannot assume,\nhowever, that the user will enter both an odd and even number.\n\n\n\nHINT:  \nUse the mod function to determine if a number is even or odd  \n  \nprint(5 % 2) will print \"1\" because there is a remainder of 1 when you divide\n5 by 2\n\nprint(4 % 2) will print \"0\" because there is no remainder when you divide 4 by\n2\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**Input(s)** | 2  \n3  \n4  \n5 | 3  \n5  \n7  \n**Expected Output** | 2  \n3  \n2  \n4 | 0  \n0  \n3  \n5\n\n\n", "code": "\neven_count = 0\neven_sum = 0\nodd_count = 0\nodd_sum = 0\n\nnum = int(input(\"Enter a positive integer (-1 to exit): \"))\n\nwhile num != -1:\n    if num % 2 == 0:\n        even_count += 1\n        even_sum += num\n    else:\n        odd_count += 1\n        odd_sum += num\n    num = int(input(\"Enter a positive integer (-1 to exit): \"))\n\nif even_count > 0:\n    even_avg = even_sum / even_count\nelse:\n    even_avg = 0\n\nif odd_count > 0:\n    odd_avg = odd_sum / odd_count\nelse:\n    odd_avg = 0\n\nprint(\"Number of even numbers:\", even_count)\nprint(\"Average of even numbers:\", even_avg)\nprint(\"Number of odd numbers:\", odd_count)\nprint(\"Average of odd numbers:\", odd_avg)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, statistics\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    # Hard Coded Test Cases . . . the best\r\n    test_cases = [ [[2, 4, 6, 8, 10, -1], [5, 6, 0, 0]],\r\n                   [[1, 3, 5, 7, 9, -1], [0, 0, 5, 5.0]],\r\n                   [[23, 45, 81, 1, 29, 35, 44, 76, 23, -1], [2, 60.0, 7, 33.857142857142854]]]\r\n    \r\n    for test_case in test_cases:\r\n        # Runs the Script\r\n        input_list = test_case[0]\r\n        expected_output = test_case[1]\r\n        output, error_message = autograder.run_script(\"lsn33_practice1.py\", input_list)\r\n        \r\n        output_list = output.split('\\n')\r\n        \r\n        if len(output_list) - 1 != len(expected_output):\r\n            print(\"Your program's output does not have the expected number of lines\")\r\n        else:\r\n            lines_correct = 0\r\n            for i in range(len(expected_output)):\r\n                if autograder.equals(str(expected_output[i]), output_list[i]):\r\n                    print(\"Line\", i+1, \"is correct\")\r\n                    lines_correct += 1\r\n                else:\r\n                    print(\"Line\", i+1, \"is incorrect (Expected:\" + str(expected_output[i]) + \")\")\r\n            \r\n            score += (100 / len(test_cases)) * (lines_correct / len(expected_output))\r\n            \r\n        \r\n    return round(score, 1)\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "Your program's output does not have the expected number of lines\nYour program's output does not have the expected number of lines\nYour program's output does not have the expected number of lines\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 48, "problem_id": "lsn26_plots", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n** In this lab, you are being given the freedom to explore `matplotlib`'s\nplotting capabilities.\n\nThe template ZIP file contains several interesting datasets that we have\ncollected from the internet (although you are free to include any other\ndataset if you wish). Examine these datasets, and generate at least 2\n\"interesting\" graphs. Each plot should use a different dataset. Additionally,\neach plot must be a different type (line and pie graph, etc)\n\nUse the `subplot` feature to make sure all of the graphs fit on one screen.\nMost importantly, make sure you label your axes, give your charts a title, use\ncolor, etc.\n\n  \n**HINT**\n\n  * Use numpy's `genfromtxt` function to read the values in the file. If you forget how to use this function, refer to the lecture video.\n\n\n\n\n", "code": "\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Read data from first dataset\ndata1 = np.genfromtxt('dataset1.csv', delimiter=',')\n\n# Read data from second dataset\ndata2 = np.genfromtxt('dataset2.csv', delimiter=',')\n\n# Create a figure with two subplots\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\n# Plot line graph for the first dataset\naxs[0].plot(data1[:, 0], data1[:, 1], color='red')\naxs[0].set_xlabel('X')\naxs[0].set_ylabel('Y')\naxs[0].set_title('Line Graph')\n\n# Plot pie chart for the second dataset\naxs[1].pie(data2[:, 1], labels=data2[:, 0], startangle=90, autopct='%1.1f%%', colors=['blue', 'green', 'orange'])\naxs[1].set_title('Pie Chart')\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn26_plots.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 100.0, "text": "Thank you for your submission. Your instructor will let you know if there is a problem.\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 49, "problem_id": "lsn26_percentile", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Write a Python program that asks the user for the number of assessment\nscores to input, and then gets that many values. Analyze the data using\nnumpy's statistics functions, and print out the following information (one per\nline):\n\n  * the average (i.e., mean)\n  * the number of scores in the 90th percentile (i.e., the number of scores that are at least as high as the 90th percentile score)\n  * the number of scores no more than one standard deviation from the mean\n\n\n", "code": "\nimport numpy as np\n\n# Ask for the number of assessment scores\nn = int(input(\"Enter the number of assessment scores: \"))\n\n# Get the assessment scores\nscores = []\nfor i in range(n):\n    score = float(input(\"Enter score {}: \".format(i+1)))\n    scores.append(score)\n\n# Calculate the average\naverage = np.mean(scores)\n\n# Calculate the 90th percentile\npercentile = np.percentile(scores, 90)\ncount90thPercentile = sum(score >= percentile for score in scores)\n\n# Calculate the number of scores within one standard deviation from the mean\nstd_dev = np.std(scores)\ncountWithinOneStdDev = sum(abs(score - average) <= std_dev for score in scores)\n\n# Print the results\nprint(\"Average: {}\".format(average))\nprint(\"Number of scores in the 90th percentile: {}\".format(count90thPercentile))\nprint(\"Number of scores within one standard deviation from the mean: {}\".format(countWithinOneStdDev))\n```\n\n**Sample Input:**\n5\n80\n90\n95\n85\n100\n\n**Sample Output:**\nAverage: 90.0\nNumber of scores in the 90th percentile: 1\nNumber of scores within one standard deviation from the mean: 4", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport numpy as np\r\n\r\ndef solution(list_of_scores):\r\n    \r\n    result = []\r\n    num_90th_percentile = 0\r\n    within_std = 0\r\n\r\n    scores_array = np.array(list_of_scores)\r\n    percentile_90 = np.percentile(scores_array, 90)\r\n    stdev = np.std(scores_array)\r\n    average = np.average(scores_array)\r\n\r\n    for s in list_of_scores:\r\n        if s >= percentile_90:\r\n            num_90th_percentile += 1\r\n        if s <= average + stdev and s >= average - stdev:\r\n            within_std += 1\r\n\r\n    result.append(str(average) + '\\n')\r\n    result.append(str(num_90th_percentile) + \"\\n\")\r\n    result.append(str(within_std) + \"\\n\")\r\n    \r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n        \r\n    num_values = random.randint(5, 10)\r\n    values = []\r\n    input_list = [ num_values ]\r\n    \r\n    for i in range(num_values):\r\n        value = random.randint(50, 100)\r\n        values.append(value)\r\n        input_list.append(value)\r\n    \r\n    output, error = autograder.run_script(\"lsn26_percentile.py\", input_list)\r\n    lines = output.strip().split('\\n')\r\n    expected_output = solution(values)\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_output)\r\n       \r\n    return round(num_matches * (100.0 / len(expected_output)), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "Unit Test Returned: 0.0\n"}, {"Unnamed: 0": 50, "problem_id": "lsn26_calculus", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nUsing the numpy module, write a Python program that does the following and\nprints (one answer per line):\n\n  1. Create (and print) the following polynomial as a poly1d: `18x^4 + 12x^2 + 3x + 1`\n\n  2. Print the value of the polynomial when `x = 2`\n\n  3. Print the roots of the polynomial\n\n  4. Print the derivative of the polynomial\n\n  5. Print the instantaneous slope of the polynomial at `x = -1` (HINT: Evaluate the derivative at x = -1)\n\n  6. Print the integral of the polynomial\n\n  7. Calculate area under the curve between `x = 5` and `x = 10` (HINT: Evaluate the integral at x=10, and subtract the integral at x=5)\n\n\n\n\n", "code": "\nimport numpy as np\n\n# Create the polynomial\npolynomial = np.poly1d([18, 12, 3, 1])\n\n# 1. Print the polynomial\nprint(polynomial)\n\n# 2. Print the value of the polynomial when x = 2\nx = 2\nprint(polynomial(x))\n\n# 3. Print the roots of the polynomial\nroots = polynomial.roots\nprint(roots)\n\n# 4. Print the derivative of the polynomial\nderivative = np.polyder(polynomial)\nprint(derivative)\n\n# 5. Print the instantaneous slope at x = -1\nslope = derivative(-1)\nprint(slope)\n\n# 6. Print the integral of the polynomial\nintegral = np.polyint(polynomial)\nprint(integral)\n\n# 7. Calculate the area under the curve between x = 5 and x = 10\narea_under_curve = integral(10) - integral(5)\nprint(area_under_curve)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nexpected_output = [\r\n\"    4      2\",\r\n\"18 x + 12 x + 3 x + 1\",\r\n\"343\",\r\n\"[ 0.14325174+0.80294311j  0.14325174-0.80294311j -0.14325174+0.25098038j\",\r\n\" -0.14325174-0.25098038j]\",\r\n\"    3\",\r\n\"72 x + 24 x + 3\",\r\n\"-93\",\r\n\"     5     3       2\",\r\n\"3.6 x + 4 x + 1.5 x + 1 x\",\r\n\"352367.5\",\r\n]\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    output, error = autograder.run_script(\"lsn26_calculus.py\", [])\r\n    lines = output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_output)\r\n       \r\n    return round(num_matches * (100.0 / len(expected_output)), 1)\r\n\r\n        \r\n# Testbench (to run on outside of zyBooks)\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "Unit Test Returned: 0.0\n"}, {"Unnamed: 0": 51, "problem_id": "lsn25_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You are being provided with a function called mini_sort that takes two\nnumbers as parameters. Modify this function so that it returns a tuple\ncontaining the numbers in ascending order.\n\n\n\n**EXAMPLES:**\n\nmini_sort(1, 2) should return the tuple:  (1, 2)\n\nmini_sort(50, 40) should return the tuple:  (40, 50)\n\n\n\n\n", "code": "\ndef mini_sort(num1, num2):\n    if num1 <= num2:\n        return (num1, num2)\n    else:\n        return (num2, num1)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport lsn25_skill2\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    a = random.randint(0, 5)\r\n    b = random.randint(6, 10)\r\n    c = random.randint(100, 200)\r\n    d = random.randint(0, 99)\r\n    \r\n    score = 0\r\n    \r\n    print(\"Test #1.  Calling mini_sort(%d, %d)\" % (a, b))\r\n    output = lsn25_skill2.mini_sort(a, b)\r\n    print(\"  Your Function Returned:\", output)\r\n    if output == (a, b):\r\n        print(\"  CORRECT\\n\")\r\n        score += 50\r\n    else:\r\n        print(\"  INCORRECT.  Expected\", (a, b), \"\\n\")\r\n        \r\n    print(\"Test #2.  Calling mini_sort(%d, %d)\" % (c, d))\r\n    output = lsn25_skill2.mini_sort(c, d)\r\n    print(\"  Your Function Returned:\", output)\r\n    if output == (d, c):\r\n        print(\"  CORRECT\\n\")\r\n        score += 50\r\n    else:\r\n        print(\"  INCORRECT.  Expected\", (d, c), \"\\n\")\r\n    \r\n    return score\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 100.0, "text": "Test #1.  Calling mini_sort(1, 10)\n  Your Function Returned: (1, 10)\n  CORRECT\n\nTest #2.  Calling mini_sort(182, 4)\n  Your Function Returned: (4, 182)\n  CORRECT\n\nUnit Test Returned: 100\n"}, {"Unnamed: 0": 52, "problem_id": "lsn25_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a dictionary that contains the designator for\nan aircraft (e.g., F-16) and its nickname (e.g., Fighting Falcon). Write a\nprogram that gets a new aircraft designator and nickname from the user, and\nadds it to the dictionary\n\n\n", "code": "\naircraft_dict = {\n    'F-16': 'Fighting Falcon',\n    'F-22': 'Raptor',\n    'A-10': 'Warthog'\n}\n\ndesignator = input('Enter aircraft designator: ')\nnickname = input('Enter aircraft nickname: ')\n\naircraft_dict[designator] = nickname\n\nprint(aircraft_dict)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    aircraft_dictionary = {\"F-16\":\"Fighting Falcon\", \"F-22\":\"Raptor\", \"B-2\":\"Spirit\", \"F-15\":\"Eagle\"}\r\n    \r\n    aircraft = [(\"C-141\", \"Starlifter\"), (\"C-5\", \"Galaxy\"), (\"MQ-9\", \"Reaper\")]\r\n    random_aircraft = aircraft[random.randint(0, len(aircraft)-1)]\r\n    aircraft_dictionary[random_aircraft[0]] = random_aircraft[1]\r\n    \r\n    output, error = autograder.run_script(\"lsn25_skill1.py\", random_aircraft)\r\n    \r\n    if output.strip() == str(aircraft_dictionary):\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT. Expected:\")\r\n        print(aircraft_dictionary)\r\n        return 0.0\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "INCORRECT. Expected:\n{'F-16': 'Fighting Falcon', 'F-22': 'Raptor', 'B-2': 'Spirit', 'F-15': 'Eagle', 'C-5': 'Galaxy'}\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 53, "problem_id": "lsn25_rectangle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite a function called `get_rectangle_info` that takes 2 values as\nparameters:\n\n  * A tuple containing the (x, y) coordinate of one corner of a box\n  * A tuple containing the (x, y) coordinate of the opposite corner of a box\n\n\n\nYour function should return a  **tuple**  containing the following information\n(in order):\n\n  * the area of the box\n  * the perimeter of the box\n  * the length of the largest side\n  * the length of the shortest side\n\n\n", "code": "\ndef get_rectangle_info(corner1, corner2):\n    x1, y1 = corner1\n    x2, y2 = corner2\n    \n    length = abs(x2 - x1)\n    width = abs(y2 - y1)\n    \n    area = length * width\n    perimeter = 2 * (length + width)\n    \n    if length >= width:\n        largest_side = length\n        shortest_side = width\n    else:\n        largest_side = width\n        shortest_side = length\n        \n    return (area, perimeter, largest_side, shortest_side)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport lsn25_rectangle\r\n\r\n# Solution\r\ndef solution(corner1, corner2):\r\n    width = abs(corner1[0] - corner2[0])\r\n    height = abs(corner1[1] - corner2[1])\r\n    largest_side = max(width, height)\r\n    shortest_side = min(width, height)\r\n    area = width * height\r\n    perimeter = width * 2 + height * 2\r\n    \r\n    return (area, perimeter, largest_side, shortest_side)\r\n\r\n\r\n# Runs the test\r\ndef run_test(corner1, corner2):\r\n    global tests_passed\r\n    \r\n    result = lsn25_rectangle.get_rectangle_info(corner1, corner2)\r\n    expected_value = solution(corner1, corner2)\r\n    \r\n    if result is None:\r\n        print(\"Failed with inputs\", corner1, corner2, \"-- Your function did not return anything\")\r\n    elif type(result) is not tuple:\r\n        print(\"Failed with inputs\", corner1, corner2, \"-- Your function did not return a tuple\")\r\n    elif len(result) != 4:\r\n        print(\"Failed with inputs\", corner1, corner2, \"-- Your function did not return a tuple with 4 items in it\")\r\n    elif result == expected_value:\r\n        print(\"Passed with inputs\", corner1, corner2, \"-- Your function correctly returned\", result)\r\n        return True\r\n    else:\r\n        print(\"Failed with inputs\", corner1, corner2, \"-- Your function returned\", result, \"instead of\", expected_value)\r\n\r\n    return False\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    NUM_TESTS = 5\r\n    tests_passed = 0\r\n    \r\n    for i in range(NUM_TESTS):\r\n        # Generate 4 Random Numbers\r\n        x1 = random.randint(-100, 100)\r\n        y1 = random.randint(-100, 100)\r\n        x2 = random.randint(-100, 100)\r\n        y2 = random.randint(-100, 100)\r\n        \r\n        # Makes sure that I didn't accidentally generate a line\r\n        while (x1 == x2):\r\n            x1 = random.randint(-100, 100)            \r\n        while (y1 == y2):\r\n            y1 = random.randint(-100, 100)\r\n    \r\n        if run_test((x1, y1), (x2, y2)):\r\n            tests_passed += 1\r\n    \r\n    return 100/NUM_TESTS * tests_passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 100.0, "text": "Passed with inputs (-42, -79) (-66, 84) -- Your function correctly returned (3912, 374, 163, 24)\nPassed with inputs (-89, 15) (-2, -22) -- Your function correctly returned (3219, 248, 87, 37)\nPassed with inputs (47, 51) (-47, 63) -- Your function correctly returned (1128, 212, 94, 12)\nPassed with inputs (-94, 16) (86, 41) -- Your function correctly returned (4500, 410, 180, 25)\nPassed with inputs (73, 85) (-14, 88) -- Your function correctly returned (261, 180, 87, 3)\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 54, "problem_id": "lsn25_midpoint", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Write a function called get_midpoint that takes four values as parameters:\n\n  * X coordinate of the first point\n  * Y coordinate of the first point\n  * X coordinate of the second point\n  * Y coordinate of the second point\n\nYour function should return a tuple containing the midpoint.\n\n\n\n\n", "code": "\ndef get_midpoint(x1, y1, x2, y2):\n    midpoint_x = (x1 + x2) / 2\n    midpoint_y = (y1 + y2) / 2\n    return (midpoint_x, midpoint_y)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport lsn25_midpoint\r\n\r\n# Runs the test\r\ndef run_test(x1, y1, x2, y2):\r\n    global tests_passed\r\n    \r\n    result = lsn25_midpoint.get_midpoint(x1, y1, x2, y2)\r\n    expected_value = ((x1+x2)/2, (y1+y2)/2)\r\n    \r\n    if result is None:\r\n        print(\"Failed with values %d, %d, %d, and %d.  Your function did not return anything.\" % (x1, y1, x2, y2))\r\n    elif type(result) is not tuple:\r\n        print(\"Failed with values %d, %d, %d, and %d.  Your function did not return a tuple.\" % (x1, y1, x2, y2))\r\n    elif len(result) != 2:\r\n        print(\"Failed with values %d, %d, %d, and %d.  Your function did not return a tuple of length 2.\" % (x1, y1, x2, y2))\r\n    elif result == expected_value:\r\n        print(\"Passed Test Using values %d, %d, %d, and %d. Received (%d, %d)\" % (x1, y1, x2, y2, result[0], result[1]))\r\n        return True\r\n    else:\r\n        print(\"Failed Test Using values %d, %d, %d, and %d. Received (%d, %d), but Expected (%d, %d)\" % (x1, y1, x2, y2, result[0], result[1], expected_value[0], expected_value[1]))\r\n\r\n    return False\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    NUM_TESTS = 5\r\n    tests_passed = 0\r\n    \r\n    for i in range(NUM_TESTS):\r\n        # Generate 4 Random Numbers\r\n        x1 = random.randint(-100, 100)\r\n        y1 = random.randint(-100, 100)\r\n        x2 = random.randint(-100, 100)\r\n        y2 = random.randint(-100, 100)\r\n        \r\n        if run_test(x1, y1, x2, y2):\r\n            tests_passed += 1\r\n    \r\n    return (100 / NUM_TESTS) * tests_passed\r\n        \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n", "exec_result": "completed", "score": 100.0, "text": "Passed Test Using values 72, -71, -40, and 14. Received (16, -28)\nPassed Test Using values 18, 62, -18, and -16. Received (0, 23)\nPassed Test Using values 83, -44, 0, and -5. Received (41, -24)\nPassed Test Using values 95, -68, -85, and -44. Received (5, -56)\nPassed Test Using values 32, -64, 73, and 96. Received (52, 16)\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 55, "problem_id": "lsn25_contactlist", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite a Python program that stores names and phone numbers for your\nclassmates. Your program will keep asking the user to input names and phone\nnumbers until he/she types \"DONE\". Your program will then store the\nnames/numbers in a dictionary, and allow the user to repeatedly type in names\nuntil he/she types \"DONE\".\n\n  * If name is in the contact list, your program will output the corresponding phone number.\n  * If the name is  **not**  in the contact list, your program will output \"NOT FOUND\"\n\n\n\n**EXAMPLES:**\n\n  | Example  \n---|---  \nInputs | Adrian  \n555-5555  \nLiam  \n666-6666  \nMichelle  \n777-7777  \nDONE  \nAdrian  \nJim  \nDONE  \nOutputs | 555-5555  \nNOT FOUND\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ninput_list = [\"Kirk\",\r\n\"555-5555\",\r\n\"Spock\",\r\n\"666-6666\",\r\n\"McCoy\",\r\n\"777-7777\",\r\n\"DONE\",\r\n\"Kirk\",\r\n\"Spock\",\r\n\"Mccoy\",\r\n\"DONE\"]\r\n\r\nexpected_output = [\r\n\"555-5555\",\r\n\"666-6666\",\r\n\"NOT FOUND\",\r\n]\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    output, error = autograder.run_script(\"lsn25_contactlist.py\", input_list)\r\n    lines = output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_output)\r\n       \r\n    return round(num_matches * (100.0 / len(expected_output)), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "Unit Test Returned: 0.0\n"}, {"Unnamed: 0": 56, "problem_id": "lsn24_nasa", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a Python program that repeatedly asks the user for names of famous NASA\nspace missions (e.g., Apollo 11) as well as the year in which the mission took\nplace, until the user types the word \"DONE\" for the mission.\n\nYour program should output:\n\n  1. Year of the **latest mission** (most recent) \n  2. Names of all missions that occurred within 3 years prior to the most recent mission (inclusive)\n\n**EXAMPLES:**\n\n\n\n| Example 1 | Example 2  \n---|---|---  \nInput | Gemini 3  \n1965  \nGemini 4  \n1965  \nGemini 12  \n1966  \nDONE |\n\nMercury 5  \n1961  \nApollo 11  \n1969  \nDONE  \n  \nOutput | 1966  \nGemini 3  \nGemini 4  \nGemini 12 | 1969  \nApollo 11\n\n\n", "code": "\ndef find_latest_mission(missions):\n    latest_year = max(missions.values())\n    \n    latest_mission = [mission for mission, year in missions.items() if year == latest_year]\n    \n    return latest_year, latest_mission\n\ndef find_missions_within_3_years(missions, latest_year):\n    missions_within_3_years = []\n    \n    for mission, year in missions.items():\n        if year >= latest_year - 3:\n            missions_within_3_years.append(mission)\n    \n    return missions_within_3_years\n\ndef main():\n    missions = {}\n    \n    while True:\n        mission = input(\"Enter the mission name: \")\n        if mission == \"DONE\":\n            break\n        \n        year = input(\"Enter the year: \")\n        missions[mission] = int(year)\n    \n    latest_year, latest_mission = find_latest_mission(missions)\n    print(\"Year of the latest mission:\", latest_year)\n    \n    missions_within_3_years = find_missions_within_3_years(missions, latest_year)\n    print(\"Missions within 3 years prior to the latest mission:\")\n    for mission in missions_within_3_years:\n        print(mission)\n\nif __name__ == \"__main__\":\n    main()\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nmission_info = [\r\n    ['Apollo 1', 1967],\r\n    ['Apollo 7', 1968],\r\n    ['Apollo 8', 1968],\r\n    ['Apollo 9', 1969],\r\n    ['Apollo 10', 1969],\r\n    ['Apollo 11', 1969],\r\n    ['Apollo 12', 1969],\r\n    ['Apollo 13', 1970],\r\n    ['Apollo 14', 1971],\r\n    ['Apollo 15', 1971],\r\n    ['Apollo 16', 1972],\r\n    ['Apollo 17', 1972],\r\n    ]\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    inputs = []\r\n    expected_outputs = []\r\n    \r\n    mission_table = []\r\n    \r\n    for mission in random.sample(mission_info, 5):\r\n        inputs.append(mission[0])\r\n        inputs.append(mission[1])\r\n        mission_table.append([int(mission[1]), mission[0]])\r\n    inputs.append(\"DONE\")\r\n    \r\n    max_row = max(mission_table)\r\n    expected_outputs.append(str(max_row[0]))\r\n    \r\n    for m in mission_table:\r\n        if (int(m[0]) >= int(max_row[0]) - 3):\r\n            expected_outputs.append(m[1])\r\n    \r\n    output, errors = autograder.run_script(\"lsn24_nasa.py\", inputs)\r\n    lines = output.strip().split('\\n')\r\n    \r\n    lines_match = autograder.compare_strings(lines, expected_outputs)\r\n    \r\n    if lines_match == len(expected_outputs):\r\n        return 100.0\r\n    else:\r\n        return 0.0\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "Unit Test Returned: 0.0\n"}, {"Unnamed: 0": 57, "problem_id": "lsn24_mitches", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a Python Program that analyzes the food at Mitchell Hall. Your program\nwill ask for the number of meals to analyze and then get both:\n\n  1. The name of the meal\n  2. The number of calories per serving\n\nYour program should output the average calorie count of all meals, as well as\nthe names of meals that are with 200 calories of the average (inclusive).\n\n\n\n| **Example 1** | **Example 2**  \n---|---|---  \nInput |\n\n3  \nShepherd's Pie  \n300  \nFoot Long Hot Dog  \n350  \nHamburger  \n960  \n  \n\n| 4  \nPizza  \n600  \nCheeseburger  \n450  \nPancakes  \n1100  \nBurrito  \n900  \nExpected Output | 536.6666666666666  \nFoot Long Hot Dog | 762.5  \nPizza  \nBurrito  \n  \n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nmeal_info = [\r\n    ['Hot Dogs', 600],\r\n    ['French Dip', 540],\r\n    ['Chicken Cordon Bleu', 300],\r\n    ['Turkey Sandwich', 350],\r\n    ['Mitch\\'s Mountain', 1100],\r\n    ['Shepherd\\'s Pie', 272],\r\n    ['Teriyaki Chicken', 250],\r\n    ]\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    inputs = []\r\n    expected_outputs = []\r\n    \r\n    meal_table = []\r\n    table_size = random.randint(3, 5)\r\n    total = 0\r\n    inputs.append(table_size)\r\n    \r\n    for meal in random.sample(meal_info, table_size):\r\n        total += meal[1]\r\n        inputs.append(meal[0])\r\n        inputs.append(meal[1])\r\n        meal_table.append([meal[0], meal[1]])\r\n    \r\n    average = total / len(meal_table)\r\n    expected_outputs.append(str(average))\r\n    \r\n    for m in meal_table:\r\n        if m[1] >= average-200 and m[1] <= average+200:\r\n            expected_outputs.append(m[0])\r\n    \r\n    output, errors = autograder.run_script(\"lsn24_mitches.py\", inputs)\r\n    lines = output.strip().split('\\n')\r\n    \r\n    lines_match = autograder.compare_strings(lines, expected_outputs)\r\n    \r\n    if lines_match == len(expected_outputs):\r\n        return 100.0\r\n    else:\r\n        return 0.0\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "Unit Test Returned: 0.0\n"}, {"Unnamed: 0": 58, "problem_id": "lsn24_education", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nNow that you are a Freshman at USAFA, it might be interesting to learn about\nhow many years men and women spend in school in different countries. In the\nproblem, we have provided you with a dataset called `education.csv` that\ncontains information from various countries about years spent in education.\nHere is a typical line from the file:\n\n\n\n`Zimbabwe,2010,M,15,64,8.04,5.92,2.09,0.03,3926`\n\n\n\nEach position in the line represents a different \"data element\". Here is a key\nfor your reference:\n\nCountry | Year | Gender | Start Age | End Age | Total Years in School |\nPrimary School | Secondary School | Tertiary School | Population (thousands)  \n---|---|---|---|---|---|---|---|---|---  \nZimbabwe | 2010 | M | 15 | 64 | 8.04 | 5.92 | 2.09 | 0.03 | 3926  \n  \n\n\n  \nWrite a Python program that asks the user for the name of country (e.g.,\n\"Zimbabwe\"), followed by a Gender (\"M\" or \"F\"). Your program should print the\naverage number of years that gender spends in school followed by the years\nthat are greater than or equal to the average.\n\n  \nFor example, if \"Zimbabwe\" and \"M\" were entered as the country and gender of\ninterest, respectively, then your program should print out:\n\n**`2.5117241379310347`  \n`1960`  \n`1965`  \n`1970`  \n`1975`  \n`1980`  \n`1985`  \n`1990`  \n`1995`  \n`2000`  \n`2005`  \n`2010`**\n\n\n", "code": "\nimport csv\n\n# Read the data from the education.csv file\ndata = []\nwith open('education.csv', 'r') as file:\n    reader = csv.reader(file)\n    next(reader)  # Skip the header row\n    for row in reader:\n        data.append(row)\n\n# Get user input for country and gender\ncountry = input(\"Enter the name of the country: \")\ngender = input(\"Enter the gender (M or F): \")\n\n# Find the rows that match the user input\nmatching_rows = []\nfor row in data:\n    if row[0] == country and row[2] == gender:\n        matching_rows.append(row)\n\n# Calculate the average number of years in school\ntotal_years = 0\nfor row in matching_rows:\n    total_years += float(row[5])  # Total Years in School\naverage_years = total_years / len(matching_rows)\n\n# Print the average years and the years that are greater than or equal to the average\nprint(average_years)\nfor row in matching_rows:\n    if float(row[5]) >= average_years:\n        print(row[1])  # Year\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ntest_inputs = [['Canada', 'M'], ['Egypt', 'F']]\r\nexpected_outputs = [['7.140344827586206', '1945', '1950', '1955', '1960', '1965', '1970', '1975', '1980', '1985', '1990', '1995', '2000', '2005', '2010'],\r\n                    ['1.1858620689655173', '1980', '1985', '1990', '1995', '2000', '2005', '2010']]\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    test_case_to_run = random.randint(0, len(test_inputs)-1)\r\n    inputs = test_inputs[test_case_to_run]\r\n    outputs = expected_outputs[test_case_to_run]\r\n    \r\n    output, errors = autograder.run_script(\"lsn24_education.py\", inputs)\r\n    lines = output.strip().split('\\n')\r\n    \r\n    lines_match = autograder.compare_strings(lines, outputs)\r\n    \r\n    if lines_match == len(outputs):\r\n        return 100.0\r\n    else:\r\n        return 0.0\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "Unit Test Returned: 0.0\n"}, {"Unnamed: 0": 59, "problem_id": "lsn24_airspeed", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou are writing a program to determine which aircraft  can fly in formation\nbased on their (min) safe cruise speed. Write a python program  \nthat asks the user for:\n\n  1. The number of aircraft to analyze\n  2. The target cruise velocity, in mph\n\n\n\nYour program will then repeatedly ask the user for the designator for each\naircraft and its cruise velocity. Once all of the values have been input, your\nprogram will output:\n\n  1. The NUMBER of aircraft whose cruise velocity is within 50mph of the target (above or below, inclusive)\n  2. The designator of each aircraft that meets the above criteria\n\n\n\n| **Example 1** | **Example 2**  \n---|---|---  \nInput |\n\n3  \n400  \nF-15  \n450  \nF-16  \n425  \nF-22  \n500\n\n| 4  \n230  \nC-130  \n250  \nF-35  \n450  \nB-52  \n390  \nC-141  \n375  \nExpected Output | 2  \nF-15  \nF-16 | 1  \nC-130  \n  \n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ntest_cases = [[3, 400, 'F-15', 450, 'F-16', 425, 'F-22', 600],\r\n              [4, 230, 'C-130', 250, 'F-35', 450, 'B-52', 390, 'C-141', 375]]\r\nanswers    = [['2', 'F-15', 'F-16'],\r\n              ['1', 'C-130']]\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    test_to_run = random.randint(0, len(test_cases)-1)\r\n    inputs = test_cases[test_to_run]\r\n    expected_output = answers[test_to_run]    \r\n    \r\n    output, errors = autograder.run_script(\"lsn24_airspeed.py\", inputs)\r\n    lines = output.strip().split('\\n')\r\n    \r\n    lines_match = autograder.compare_strings(lines, expected_output)\r\n    \r\n    if lines_match == len(expected_output):\r\n        return 100.0\r\n    else:\r\n        return 0.0\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "Unit Test Returned: 0.0\n"}, {"Unnamed: 0": 60, "problem_id": "lsn23_soundboard", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Using PythonGraph, create a \"soundboard\" application. Your program should\ndisplay a list of colored buttons (i.e., rectangles). When the user clicks\ninside of a rectangle, the program plays a different sound.\n\nThe provided template file comes with a single button implemented. Your job is\nto study this code and create at least 5 other buttons. Note: The buttons do\nnot have to be laid out in the same arrangement, but they should look\norganized.\n\nWhen you are finished, upload your python code. Do NOT upload any of the sound\nfiles.\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn23_soundboard.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 100.0, "text": "Thank you for your submission. Your instructor will let you know if there is a problem.\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 61, "problem_id": "lsn23_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM NAME:  \n** lsn23_skill1\n\n\n\n**PROBLEM STATEMENT:  \n** You have been provided with the template code for an animation.  Study the\ncode for a minute, then modify the code to do the following WHEN THE LEFT\nMOUSE BUTTON IS HELD DOWN:\n\n  1. Write the code needed to get the mouse's x and y coordinates\n  2. Draw a circle centered at the mouse's x and y coordinates\n\n\n", "code": "\nimport pygame\nfrom pygame.locals import *\n\n# Initialize Pygame\npygame.init()\n\n# Set up the screen\nscreen = pygame.display.set_mode((640, 480))\npygame.display.set_caption(\"Mouse Animation\")\n\n# Set up the colors\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\n\n# Set up the clock\nclock = pygame.time.Clock()\n\n# Set up the circle position\ncircle_x = 0\ncircle_y = 0\n\n# Set up the circle radius\ncircle_radius = 30\n\n# Set up the circle color\ncircle_color = WHITE\n\n# Set up the circle drawing flag\nmouse_down = False\n\n# Run the game loop\nrunning = True\nwhile running:\n    # Handle events\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            running = False\n        elif event.type == MOUSEBUTTONDOWN:\n            if event.button == 1:\n                mouse_down = True\n        elif event.type == MOUSEBUTTONUP:\n            if event.button == 1:\n                mouse_down = False\n\n    # Update the circle position if the mouse button is held down\n    if mouse_down:\n        circle_x, circle_y = pygame.mouse.get_pos()\n\n    # Draw the background\n    screen.fill(BLACK)\n\n    # Draw the circle\n    pygame.draw.circle(screen, circle_color, (circle_x, circle_y), circle_radius)\n\n    # Update the screen\n    pygame.display.flip()\n\n    # Limit the frame rate\n    clock.tick(60)\n\n# Quit the game\npygame.quit()\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    aircraft_dictionary = {\"F-16\":\"Fighting Falcon\", \"F-22\":\"Raptor\", \"B-2\":\"Spirit\", \"F-15\":\"Eagle\"}\r\n    \r\n    aircraft = [(\"C-141\", \"Starlifter\"), (\"C-5\", \"Galaxy\"), (\"MQ-9\", \"Reaper\")]\r\n    random_aircraft = aircraft[random.randint(0, len(aircraft)-1)]\r\n    aircraft_dictionary[random_aircraft[0]] = random_aircraft[1]\r\n    \r\n    output, error = autograder.run_script(\"lsn23_skill1.py\", random_aircraft)\r\n    \r\n    if output.strip() == str(aircraft_dictionary):\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT. Expected:\")\r\n        print(aircraft_dictionary)\r\n        return 0.0\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "INCORRECT. Expected:\n{'F-16': 'Fighting Falcon', 'F-22': 'Raptor', 'B-2': 'Spirit', 'F-15': 'Eagle', 'MQ-9': 'Reaper'}\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 62, "problem_id": "lsn23_paint", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nUsing PythonGraph, create a simple paint application. Your program should draw\ncircles on the window whenever the user presses the left mouse button. Your\nprogram should also listen for keyboard inputs, and allow the user to change\ncolors and the size of the circle by pressing on different keys.\n\nA simple paint program has been provided to you as a starting point. Study the\ncode and make the necessary modifications.\n\nWhen you are finished, upload your python code.\n\n\n", "code": "\n# import the required libraries\nimport pygame\nfrom pygame.locals import *\nfrom pythongraph import *\n\n# initialize pygame\npygame.init()\n\n# create a window\nwindow = Window(800, 600) \n\n# set the window's title\nwindow.set_caption(\"Simple Paint\")\n\n# set initial color and size\ncolor = (255, 0, 0)\nsize = 10\n\n# start the main game loop\nwhile True:\n    # check for events\n    for event in pygame.event.get():\n        # if the user clicks the close button, exit the program\n        if event.type == QUIT:\n            pygame.quit()\n            exit()\n\n        # if the user presses a key\n        elif event.type == KEYDOWN:\n            # if the 'r' key is pressed, change the color to red\n            if event.key == K_r:\n                color = (255, 0, 0)\n            # if the 'g' key is pressed, change the color to green\n            elif event.key == K_g:\n                color = (0, 255, 0)\n            # if the 'b' key is pressed, change the color to blue\n            elif event.key == K_b:\n                color = (0, 0, 255)\n            # if the 's' key is pressed, decrease the size of the circle\n            elif event.key == K_s:\n                size -= 1\n                if size <= 0:\n                    size = 1\n            # if the 'l' key is pressed, increase the size of the circle\n            elif event.key == K_l:\n                size += 1\n\n        # if the user presses the left mouse button\n        elif event.type == MOUSEBUTTONDOWN and event.button == 1:\n            # get the mouse position\n            mouse_pos = pygame.mouse.get_pos()\n            # draw a circle on the window at the mouse position with the selected color and size\n            window.draw_circle(mouse_pos[0], mouse_pos[1], size, color)\n\n    # update the window\n    window.update()\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn23_paint.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "There appears to be a syntax error in your code.\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 63, "problem_id": "lsn22_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM NAME:  \n** lsn22_skill1\n\n\n\n**PROBLEM STATEMENT:  \n** You have been provided with the template code for an animation.  Study the\ncode for a minute, then perform the following tasks:\n\n  * In the draw() function, add one line of code that draws a circle.  \nFor the center, use the ball_x and ball_y variables defined on lines 21 and 22  \n  \n\n  * In the update() function, add code that modifies the value of ball_x and ball_y.  \nFor example, add 1 to ball_x every time update() is called, and see what\nhappens.\n\n\n", "code": "\nfrom tkinter import *\n\nroot = Tk()\nmyCanvas = Canvas(root, width=500, height=500)\nmyCanvas.pack()\n\nball_x = 250\nball_y = 250\n\ndef draw():\n    myCanvas.delete(ALL)\n    myCanvas.create_oval(ball_x - 10, ball_y - 10, ball_x + 10, ball_y + 10, fill='red')\n\ndef update():\n    global ball_x, ball_y\n    ball_x += 1\n    ball_y += 1\n\ndef animation_loop():\n    draw()\n    update()\n    root.after(10, animation_loop)\n\nanimation_loop()\nroot.mainloop()\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0.0\r\n    \r\n    if autograder.code_compiles(\"lsn22_skill1.py\"):\r\n        file = open(\"lsn22_skill1.py\", \"r\")\r\n        file_contents = file.read()\r\n        \r\n        if \"get_mouse_x(\" in file_contents:\r\n            print(\"get_mouse_x called\")\r\n            score += 33\r\n        else:\r\n            print(\"get_mouse_x does not appear to be called.\")\r\n            \r\n        if \"get_mouse_y(\" in file_contents:\r\n            print(\"get_mouse_y called\")\r\n            score += 33\r\n        else:\r\n            print(\"get_mouse_y does not appear to be called.\")\r\n            \r\n        if \"draw_circle(\" in file_contents:\r\n            print(\"draw_circle called\")\r\n            score += 34\r\n        else:\r\n            print(\"draw_circle does not appear to be called.\")\r\n            \r\n    else:\r\n        print(\"There appears to be an error in your python Script that is preventing it from running\")\r\n    \r\n    print(\"\\nThank you for your submission.  Your instructor will let you know if there is an issue.\")\r\n    return score        \r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "get_mouse_x does not appear to be called.\nget_mouse_y does not appear to be called.\ndraw_circle does not appear to be called.\n\nThank you for your submission.  Your instructor will let you know if there is an issue.\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 64, "problem_id": "lsn22_bouncingtriangle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Using the Bouncing Ball from the previous lab as a starting point, generate\nan animation of a bouncing triangle. The triangle's vertices should start at\nrandom locations, and bounce whenever the triangle hits a wall.\n\n\n\n\n\n**HINTS** :\n\n  * Try drawing 3 bouncing balls on the screen.\n  * Once the balls are moving correctly, draw 3 lines to connect them!\n\n\n", "code": "\nimport pygame\nimport random\n\n# Initialize pygame\npygame.init()\n\n# Set the width and height of the screen\nwidth = 800\nheight = 600\n\n# Set the initial position and direction of the triangle\nx1 = random.randint(50, width - 50)\ny1 = random.randint(50, height - 50)\nx2 = random.randint(50, width - 50)\ny2 = random.randint(50, height - 50)\nx3 = random.randint(50, width - 50)\ny3 = random.randint(50, height - 50)\ndx1 = random.randint(-5, 5)\ndy1 = random.randint(-5, 5)\ndx2 = random.randint(-5, 5)\ndy2 = random.randint(-5, 5)\ndx3 = random.randint(-5, 5)\ndy3 = random.randint(-5, 5)\n\n# Create the screen\nscreen = pygame.display.set_mode((width, height))\npygame.display.set_caption(\"Bouncing Triangle\")\n\n# Set the colors\nwhite = (255, 255, 255)\n\n# Run the game loop\nrunning = True\nwhile running:\n    # Fill the screen with white color\n    screen.fill(white)\n    \n    # Draw the triangle\n    pygame.draw.polygon(screen, (0, 0, 0), [(x1, y1), (x2, y2), (x3, y3)])\n    \n    # Update the position of the triangle\n    x1 += dx1\n    y1 += dy1\n    x2 += dx2\n    y2 += dy2\n    x3 += dx3\n    y3 += dy3\n    \n    # Bounce the triangle when it hits a wall\n    if x1 <= 0 or x1 >= width:\n        dx1 = -dx1\n    if y1 <= 0 or y1 >= height:\n        dy1 = -dy1\n    if x2 <= 0 or x2 >= width:\n        dx2 = -dx2\n    if y2 <= 0 or y2 >= height:\n        dy2 = -dy2\n    if x3 <= 0 or x3 >= width:\n        dx3 = -dx3\n    if y3 <= 0 or y3 >= height:\n        dy3 = -dy3\n    \n    # Check for quit event\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    \n    # Update the display\n    pygame.display.update()\n\n# Quit the game\npygame.quit()\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn22_bouncingtriangle.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "There appears to be a syntax error in your code.\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 65, "problem_id": "lsn22_bouncingballs", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n** Write a python algorithm that asks the user for the number of balls to\ndraw. Then, open a pythonGraph window and draw that many bouncing balls on the\nscreen.\n\n\n\n**Challenge** :\n\n  * Try to randomize every aspect of the bouncing balls (e.g., their radius, color, speed)\n\n\n\n\n", "code": "\nimport random\nfrom pythongraph import *\nfrom pythongraph.bouncing_balls import *\n\ndef draw_bouncing_balls():\n    num_balls = int(input(\"Enter the number of balls to draw: \"))\n    \n    window = PythonGraphWindow()\n    balls = []\n    \n    for i in range(num_balls):\n        radius = random.randint(10, 50)\n        color = [random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)]\n        speed = random.uniform(0.5, 2)\n        \n        ball = BouncingBall(radius, color, speed)\n        balls.append(ball)\n    \n    while True:\n        window.clear()\n        \n        for ball in balls:\n            ball.update_position(window.width, window.height)\n            ball.draw(window)\n        \n        window.update()\n```\n\nTo run the program, you will need to install the `pythongraph` library. You can do so by running the following command: \n\n```\npip install pythongraph\n```\n\nNote: The `pythongraph` library might not be available in all Python environments, so you may need to set up a Python environment with the library installed to run the program.", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn22_bouncingballs.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "There appears to be a syntax error in your code.\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 66, "problem_id": "lsn22_bouncingball", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Using the pythonGraph animation template, create an animation of a bouncing\nball. Your ball should start at a random location, and change direction each\ntime it hits a side, top, or bottom of the window.  \n  \n\n\n\n**CHALLENGE:**\n\n  1. Try to make the ball change color every time it hits a wall.\n\n\n\n\n", "code": "Here is the Python code solution for the problem statement:\n\n```python\nimport random\nimport tkinter as tk\n\nclass Ball:\n    def __init__(self, canvas, size):\n        self.canvas = canvas\n        self.size = size\n        self.color = \"#0000FF\"\n        self.x = random.randint(size, canvas.winfo_width() - size)\n        self.y = random.randint(size, canvas.winfo_height() - size)\n        self.dx = random.choice([-1, 1])\n        self.dy = random.choice([-1, 1])\n        self.ball = canvas.create_oval(self.x-size, self.y-size, self.x+size, self.y+size, fill=self.color)\n\n    def move(self):\n        self.x += self.dx\n        self.y += self.dy\n        self.canvas.move(self.ball, self.dx, self.dy)\n\n        if self.x <= self.size or self.x >= self.canvas.winfo_width() - self.size:\n            self.dx *= -1\n            self.color = self.random_color()\n\n        if self.y <= self.size or self.y >= self.canvas.winfo_height() - self.size:\n            self.dy *= -1\n            self.color = self.random_color()\n\n        self.canvas.itemconfig(self.ball, fill=self.color)\n\n    def random_color(self):\n        return \"#%06x\" % random.randint(0, 0xFFFFFF)\n\ndef animate():\n    ball.move()\n    window.after(10, animate)\n\nwindow = tk.Tk()\ncanvas = tk.Canvas(window, width=400, height=400)\ncanvas.pack()\n\nball = Ball(canvas, 20)\n\nanimate()\n\nwindow.mainloop()\n```\n\nMake sure to install the `tkinter` module if you don't have it already. You can do this by running `pip install tk`.", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn22_bouncingball.py\", doraise=True)\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 0.0, "text": "There appears to be a syntax error in your code.\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 67, "problem_id": "lsn21_triangle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite an algorithm that asks the user for X and Y coordinates of a single\npoint (the coordinates of the top left point on the triangle), the length of\nthe base, and the height of a right triangle. Then, open a graphics window and\ndraw the triangle. The area of the triangle is should be displayed at the\nbottom center of the window in black.\n\n\n\n**HINTS:**\n\n  * Make sure you get the user input BEFORE you open the window. Otherwise, the program will freeze.\n  * The `draw_text` function will draw text on a screen. Don't worry about getting the text EXACTLY in the center (it's hard!).\n\n\n\n\n", "code": "\n\nimport graphics as gr\n\ndef draw_triangle(x, y, base, height):\n    win = gr.GraphWin(\"Triangle\", 400, 400)\n    triangle = gr.Polygon(gr.Point(x, y), gr.Point(x + base, y), gr.Point(x + base/2, y + height))\n    triangle.setFill(\"white\")\n    triangle.setOutline(\"black\")\n    triangle.draw(win)\n    \n    area = (base * height) / 2\n    area_text = gr.Text(gr.Point(200, 380), f\"Area: {area}\")\n    area_text.setTextColor(\"black\")\n    area_text.setSize(16)\n    area_text.draw(win)\n    \n    win.mainloop()\n\nx = float(input(\"Enter the X coordinate of the top left point: \"))\ny = float(input(\"Enter the Y coordinate of the top left point: \"))\nbase = float(input(\"Enter the length of the base: \"))\nheight = float(input(\"Enter the height of the triangle: \"))\n\ndraw_triangle(x, y, base, height)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn21_triangle.py\", doraise=True)\r\n        print(\"----------------------------------------------------------------------\")\r\n        print(\"*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\")\r\n        print(\"----------------------------------------------------------------------\\n\")\r\n        \r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "There appears to be a syntax error in your code.\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 68, "problem_id": "lsn21_stamp", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Create a pythonGraph function called `draw_stamp` that accepts an x and y\ncoordinate as parameters. Add code so that this function will then draw a\npicture (of your choosing) centered on that coordinate.\n\n\n\nTo test your function, create a pythonGraph window, and call your function\nseveral times (each time, passing it a different set of x and y coordinates).\n\n\n", "code": "\ndef draw_stamp(x, y):\n    # Create a canvas centered on the coordinates (x, y)\n    canvas = pythonGraph.graphics\n\n    # Draw a rectangle centered on (x, y)\n    rect_width = 100\n    rect_height = 50\n    rect_x = x - rect_width / 2\n    rect_y = y - rect_height / 2\n    canvas.drawRect(rect_x, rect_y, rect_width, rect_height)\n\n    # Draw a circle centered on (x, y)\n    circle_radius = 50\n    circle_x = x\n    circle_y = y\n    canvas.drawCircle(circle_x, circle_y, circle_radius)\n\n    # Draw a line from the top-left corner of the rectangle to the center of the circle\n    line_x1 = rect_x\n    line_y1 = rect_y\n    line_x2 = circle_x\n    line_y2 = circle_y\n    canvas.drawLine(line_x1, line_y1, line_x2, line_y2)\n\n    # Draw a line from the top-right corner of the rectangle to the center of the circle\n    line_x1 = rect_x + rect_width\n    line_y1 = rect_y\n    line_x2 = circle_x\n    line_y2 = circle_y\n    canvas.drawLine(line_x1, line_y1, line_x2, line_y2)\n\n    # Draw a line from the bottom-left corner of the rectangle to the center of the circle\n    line_x1 = rect_x\n    line_y1 = rect_y + rect_height\n    line_x2 = circle_x\n    line_y2 = circle_y\n    canvas.drawLine(line_x1, line_y1, line_x2, line_y2)\n\n    # Draw a line from the bottom-right corner of the rectangle to the center of the circle\n    line_x1 = rect_x + rect_width\n    line_y1 = rect_y + rect_height\n    line_x2 = circle_x\n    line_y2 = circle_y\n    canvas.drawLine(line_x1, line_y1, line_x2, line_y2)", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:       \r\n        py_compile.compile(\"lsn21_stamp.py\", doraise=True)\r\n        print(\"----------------------------------------------------------------------\")\r\n        print(\"*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\")\r\n        print(\"----------------------------------------------------------------------\\n\")\r\n        \r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "completed", "score": 100.0, "text": "----------------------------------------------------------------------\n*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\n----------------------------------------------------------------------\n\nThank you for your submission. Your instructor will let you know if there is a problem.\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 69, "problem_id": "lsn21_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM NAME:  \n** lsn21_skill1\n\n\n\n**PROBLEM STATEMENT:  \n** Read the pythonGraph documentation, and write the following 3 lines of\ncode:\n\n  1. Use the open_window function to create a graphics window\n  2. Use the draw_circle function to draw a circle (any size and/or color).\n  3. Call the wait_for_close function to keep the graphics window open until you click the X in the top right corner.\n\n\n", "code": "\nfrom pythonGraph import *\nopen_window()\ndraw_circle(100, (255, 0, 0))\nwait_for_close()\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0.0\r\n    \r\n    if autograder.code_compiles(\"lsn21_skill1.py\"):\r\n        file = open(\"lsn21_skill1.py\", \"r\")\r\n        file_contents = file.read()\r\n        \r\n        if \"draw_circle(\" in file_contents:\r\n            print(\"draw_circle called\")\r\n            score += 50\r\n        else:\r\n            print(\"draw_circle does not appear to be called.  You need to call it in the draw() function\")\r\n            \r\n        if file_contents.count(\"ball_x\") + file_contents.count(\"ball_y\") > 5:\r\n            print(\"Looks like you are using ball_x and/or ball_y\")\r\n            score += 50\r\n        else:\r\n            print(\"Make sure you are changing the value of ball_x and ball_y in update().\")\r\n            \r\n    else:\r\n        print(\"There appears to be an error in your python Script that is preventing it from running\")\r\n    \r\n    print(\"\\nThank you for your submission.  Your instructor will let you know if there is an issue.\")\r\n    return score        \r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "completed", "score": 50.0, "text": "draw_circle called\nMake sure you are changing the value of ball_x and ball_y in update().\n\nThank you for your submission.  Your instructor will let you know if there is an issue.\nUnit Test Returned: 50.0\n"}, {"Unnamed: 0": 70, "problem_id": "lsn21_simpledrawing", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nUsing pythonGraph (and the documentation for pythonGraph), experiment with\neach of the drawing commands listed (drawing commands begin with the keyword\n\"draw\"). Draw something interesting using at least 4 different drawing\ncommands. One of those drawing commands must be `draw_image`\n\n**NOTE:  \n** The best files will be added to our Python \"Hall of Fame\".\n\n\n", "code": "\nfrom graph import *\n\ndef main():\n    window_size(800, 400)\n    window_coordinates(-10, -10, 10, 10)\n\n    # Draw a circle\n    draw_circle(0, 0, 5, color='blue', filled=True)\n\n    # Draw a line\n    draw_line(-8, -5, 8, 5, color='red', width=2)\n\n    # Draw a rectangle\n    draw_rectangle(-4, -4, 4, 4, color='green', filled=True)\n\n    # Draw an image\n    draw_image(0, -9, 'tree.png', width=3, height=5)\n\n\nstart_graphics(main)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    drawing_functions = [\"draw_arc\", \"draw_image\", \"draw_rectangle\", \"draw_circle\", \"draw_ellipse\", \"draw_line\", \"draw_pixel\", \"draw_text\", \"write_text\"]\r\n    drawing_functions_called = []\r\n    \r\n    print(\"----------------------------------------------------------------------\")\r\n    print(\"*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\")\r\n    print(\"----------------------------------------------------------------------\\n\")\r\n    \r\n    file = open(\"lsn21_simpledrawing.py\", \"r\")\r\n    file_contents = file.read()\r\n    \r\n    for f in drawing_functions:\r\n        if f in file_contents and f not in drawing_functions_called:\r\n            drawing_functions_called.append(f)\r\n    \r\n    if len(drawing_functions_called) >= 4 and \"draw_image\" in drawing_functions_called:\r\n        print(\"Good Job!\")\r\n        return 100.0\r\n    elif len(drawing_functions_called) >= 4 and \"draw_image\" not in drawing_functions_called:\r\n        print(\"Missing at least one call of draw_image\")\r\n        return 90.0\r\n    else:\r\n        print(\"Not enough different drawing functions.  Need 4 unique (including draw_image) calls.\")\r\n        return 25 * len(drawing_functions_called)\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 100.0, "text": "----------------------------------------------------------------------\n*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\n----------------------------------------------------------------------\n\nGood Job!\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 71, "problem_id": "lsn21_randomcircles", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Create a pythonGraph that asks the user for the number of circles to draw.\nYour program should then open a pythonGraph window and then draw that many\ncircles somewhere within view.\n\n**Hints**\n\n  * Import the `random` module in order to generate random numbers. There are specifically two functions that are useful:\n  * `random.random()` returns a random number between 0.0 and 1.0\n  * `random.randint(start, end)` returns a random integer between `start` and `end`\n\n\n\n\n", "code": "\nimport random\nimport pygame\n\ndef draw_circles(num_circles):\n    pygame.init()\n    screen = pygame.display.set_mode((800, 600))\n    pygame.display.set_caption(\"Random Circles\")\n    \n    for _ in range(num_circles):\n        radius = random.randint(10, 50)\n        x = random.randint(radius, 800-radius)\n        y = random.randint(radius, 600-radius)\n        \n        pygame.draw.circle(screen, (255, 0, 0), (x, y), radius)\n    \n    pygame.display.update()\n    \n    running = True\n    while running:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                running = False\n    \n    pygame.quit()\n\nnum_circles = int(input(\"Enter the number of circles to draw: \"))\ndraw_circles(num_circles)\n", "testcase": "from cs110 import autograder\r\nimport random, math, py_compile\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    try:\r\n        py_compile.compile(\"lsn21_randomcircles.py\", doraise=True)\r\n        print(\"----------------------------------------------------------------------\")\r\n        print(\"*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\")\r\n        print(\"----------------------------------------------------------------------\\n\")\r\n        print(\"Thank you for your submission. Your instructor will let you know if there is a problem.\")\r\n        return 100.0\r\n    except:\r\n        print(\"There appears to be a syntax error in your code.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 100.0, "text": "----------------------------------------------------------------------\n*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***\n----------------------------------------------------------------------\n\nThank you for your submission. Your instructor will let you know if there is a problem.\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 72, "problem_id": "lsn20_unpopularnames", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n**\n\nThis lab makes use of the names.csv dataset, which provides a list of over\n1200+ names that were given to children in 2011. Here is a typical line from\nthe file:\n\n\n\n`FEMALE, HISPANIC, GIA, 21`\n\n\n\n  \nEach position in the line (separated by a comma) represents a different \"data\nelement\". Here is a key for your reference:\n\nGender | Ethnicity | Name | Count  \n(i.e., Number of Children Assigned this Name)  \n---|---|---|---  \nFEMALE | HISPANIC | GIA | 21  \n  \n  \n  \nWrite a Python algorithm that gets a gender (all CAPs, \"MALE\" or \"FEMALE\") and\na number, `X`, from the user, and prints out the X least popular names for\nthat gender, starting with the most popular and working down.\n\nFor example, if the user types `MALE` and `2`, and you determine that the two\nleast popular names are Bill and Ted, your program should output:\n\n    \n    \n    Bill  \n    Ted  \n      \n    \n\n\n\n**HINTS (really really important):**\n\n  * Remember that you can use the `sort()` function to sort a list in ascending order. For example, if your list is named `my_list`, you can sort it by typing:  \n`my_list.sort()`\n\n  * `sort()` will work on 2D lists. It will sort by the first column, and then look at the 2nd column in the event of a tie. Think about this when you are building your 2D list.\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nexpected_output_male = [\"ALDO\", \"ALIJAH\", \"ALLAN\", \"ANGEL\", \"ARTURO\", \"AUGUSTUS\", \"BENNETT\", \"BERISH\", \"CADEN\", \"CHRIS\", \"CODY\", \"COREY\", \"DERRICK\", \"DEVON\", \"DONOVAN\", \"EASON\", \"EDWARD\", \"ELLIS\", \"GIOVANI\", \"HASSAN\",]\r\nexpected_output_female = [\"ABBY\", \"AIZA\", \"ALISHA\", \"ANGELICA\", \"ANGIE\", \"ARIANNY\", \"ARIELA\", \"ATARA\", \"AUBREY\", \"AUTUMN\", \"AYLA\", \"BIANCA\", \"BONNIE\", \"BRIANNY\", \"CASSANDRA\", \"CELIA\", \"CHAVY\", \"CHEYENNE\", \"CORA\", \"CRISTINA\"]\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    if (random.random() > 0.5):\r\n        gender = \"MALE\"\r\n        expected_output = expected_output_male\r\n    else:\r\n        gender = \"FEMALE\"\r\n        expected_output = expected_output_female\r\n        \r\n    num_to_print = random.randint(5, 20)\r\n    output, error = autograder.run_script(\"lsn20_unpopularnames.py\", [gender, num_to_print])\r\n    lines = output.strip().split('\\n')\r\n    num_matches = autograder.compare_strings(lines, expected_output[:num_to_print])\r\n    \r\n    print()\r\n    \r\n    if len(lines) == 0:\r\n        return 0\r\n    elif len(lines) > len(expected_output[:num_to_print]):\r\n        print(\"Your program printed more lines than we expected\")\r\n        return round(100 * num_matches / len(lines), 1)\r\n    else:\r\n        return round(100.0/len(expected_output[:num_to_print]) * num_matches, 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 73, "problem_id": "lsn20_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a CSV file that contains the amount of medals\nwon by countries at the most recent Olympic games.   Here is a snippet of the\nfile:\n\n    \n    \n    USA,46,37,38  \n    Britain,27,23,17\n\n\n\nHere is how you can interpret each \"column\" in the file:\n\n**Country** | **# Gold Medals** | **# Silver Medals** | **# Bronze Medals**  \n---|---|---|---  \nUSA | 46 | 37 | 38  \nBritain | 27 | 23 | 17  \n  \n\n\nYou have also been provided with a code template that automatically reads this\nfile and extracts each line from it.\n\n  * In the provided code template, perform the following tasks: \n    * **Line 30:** Write a line of code that extracts the columns from each line. Use the split() function\n    * **Line 33:** Create a new row (i.e., a list) that contains the number of **silver** medals, followed by the name of the country\n    * **Line 36:** Append the new row to **my_table**\n\n\n", "code": "\nimport csv\n\n# Open the CSV file\nwith open('olympic_medals.csv', 'r') as file:\n    # Create a CSV reader object\n    reader = csv.reader(file)\n    \n    # Create an empty list to store the table\n    my_table = []\n    \n    # Iterate through each line in the file\n    for line in reader:\n        # Split the line by comma and extract the columns\n        columns = line[0].split(',')\n        \n        # Create a new row with the number of silver medals and the country name\n        new_row = [columns[2], columns[0]]\n        \n        # Append the new row to the table\n        my_table.append(new_row)\n        \n# Print the table\nfor row in my_table:\n    print(row)\n```\n\nThe above code reads the CSV file \"olympic_medals.csv\" and extracts the columns from each line using the split() function. It then creates a new row with the number of silver medals and the country name, and appends the new row to the table called \"my_table\". Finally, it prints the table.", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0.0\r\n    \r\n    if autograder.code_compiles(\"lsn20_skill1.py\"):\r\n        file = open(\"lsn20_skill1.py\", \"r\")\r\n        file_contents = file.read()\r\n        \r\n        if \"get_mouse_x(\" in file_contents:\r\n            print(\"get_mouse_x called\")\r\n            score += 33\r\n        else:\r\n            print(\"get_mouse_x does not appear to be called.\")\r\n            \r\n        if \"get_mouse_y(\" in file_contents:\r\n            print(\"get_mouse_y called\")\r\n            score += 33\r\n        else:\r\n            print(\"get_mouse_y does not appear to be called.\")\r\n            \r\n        if \"draw_circle(\" in file_contents:\r\n            print(\"draw_circle called\")\r\n            score += 34\r\n        else:\r\n            print(\"draw_circle does not appear to be called.\")\r\n            \r\n    else:\r\n        print(\"There appears to be an error in your python Script that is preventing it from running\")\r\n    \r\n    print(\"\\nThank you for your submission.  Your instructor will let you know if there is an issue.\")\r\n    return score        \r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "There appears to be an error in your python Script that is preventing it from running\n\nThank you for your submission.  Your instructor will let you know if there is an issue.\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 74, "problem_id": "lsn20_popularnames", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nThis program makes use of the names.csv dataset, which provides a list of over\n1200+ names that were given to children in 2011. Here is a typical line from\nthe file:\n\n\n\n`FEMALE, HISPANIC, GIA, 21`\n\n\n\n  \nEach position in the line (separated by a comma) represents a different \"data\nelement\". Here is a key for your reference:\n\nGender | Ethnicity | Name | Count  \n(i.e., Number of Children Assigned this Name)  \n---|---|---|---  \nFEMALE | HISPANIC | GIA | 21  \n  \n  \n  \nWrite a Python algorithm that gets a number, `X`, from the user, and prints\nout the X most popular names, starting with the most popular and working down.\n\nFor example, if the user types `5`, and you determine that the five most\npopular names are Adrian, David, Bob, Jane, Ulysses, your program should\noutput:  \nAdrian  \nDavid  \nBob  \nJane  \nUlysses  \n  \n\n**HINTS (really really important):**\n\n  * Remember that you can use the `sort()` function to sort a list in ascending order. For example, if your list is named `my_list`, you can sort it by typing:  \n`my_list.sort()`\n\n  * For this lab, you need to sort the list in descending order, so that the most popular items appear first. To do this, you need to tell the function to sort in reverse. You can do this by typing the following (assuming your list is named `my_list`):  \n`my_list.sort(reverse=True)`\n\n  * `sort()` will work on 2D lists. It will sort by the first column, and then look at the 2nd column in the event of a tie. Think about this when you are building your 2D list.\n\n\n", "code": "\nimport csv\n\ndef get_popular_names(X):\n    names = []\n    \n    with open('names.csv', 'r') as csvfile:\n        reader = csv.reader(csvfile)\n        for row in reader:\n            names.append(row[2])\n    \n    names.sort(reverse=True)\n    return names[:X]\n\nX = int(input(\"Enter the number of popular names to display: \"))\npopular_names = get_popular_names(X)\n\nfor name in popular_names:\n    print(name)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nexpected_output = [\r\n\"ISABELLA\",\r\n\"MIA\",\r\n\"MOSHE\",\r\n\"ESTHER\",\r\n\"SOPHIA\",\r\n\"EMMA\",\r\n\"CAMILA\",\r\n\"CHAYA\",\r\n\"ETHAN\",\r\n\"JAYDEN\",\r\n\"SOFIA\",\r\n\"AVA\",\r\n\"JEREMIAH\",\r\n\"CHAIM\",\r\n\"JOSE\",\r\n\"CHANA\",\r\n\"LUIS\",\r\n\"ELLA\",\r\n\"CHARLOTTE\",\r\n\"HAILEY\",\r\n\"LEAH\",\r\n\"MADISON\"]\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    num_to_print = random.randint(5, 15)\r\n    output, error = autograder.run_script(\"lsn20_popularnames.py\", [num_to_print])\r\n    lines = output.strip().split('\\n')\r\n    num_matches = autograder.compare_strings(lines, expected_output[:num_to_print])\r\n    \r\n    print()\r\n    \r\n    if len(lines) == 0:\r\n        return 0\r\n    elif len(lines) > len(expected_output[:num_to_print]):\r\n        print(\"Your program printed more lines than we expected\")\r\n        return round(100 * num_matches / len(lines), 1)\r\n    else:\r\n        return round(100.0/len(expected_output[:num_to_print]) * num_matches, 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 75, "problem_id": "lsn20_lowvolume", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nThis program makes use of the traffic.csv dataset. Here is a typical line from\nthe file:\n\n\n\n`691,6067 North,Kimball Ave,8/15/06,15600,North Bound:7500/South Bound:8100`\n\n\n\n  \nAs you will recall from class, each position in the line (separated by a\ncomma) represents a different \"data element\". Here is a key for your\nreference:\n\nID | Address | Street | Sample Date | Total # of Passing Vehicles | # of\nVehicles by Direction  \n---|---|---|---|---|---  \n691 | 6067 North | Kimball Ave | 8/15/06 | 15600 | North Bound:7500/South\nBound:8100  \n  \n  \n  \nWrite a Python algorithm that opens the file and outputs the lowest traffic\ncount. Then, output the name of all streets whose traffic count is within 2500\n(inclusive) of the min. Output one street name per line.\n\n\n\nFor example, if the min value is 500, and the roads within 2500 of this value\nare \"Road A\", \"Road B\", \"Road C\", then your program should output:\n\n    \n    \n    500  \n    Road A  \n    Road B  \n    Road C\n\n\n", "code": "\nimport csv\n\ndef find_min_traffic(filename):\n    with open(filename, 'r') as file:\n        reader = csv.reader(file)\n        next(reader)  # Skip header row\n        min_traffic = float('inf')\n        streets = []\n\n        for row in reader:\n            traffic_count = int(row[4])\n            if traffic_count < min_traffic:\n                min_traffic = traffic_count\n\n        file.seek(0)  # Reset file pointer to the beginning\n        next(reader)  # Skip header row\n\n        for row in reader:\n            traffic_count = int(row[4])\n            if min_traffic - 2500 <= traffic_count <= min_traffic + 2500:\n                streets.append(row[2])\n\n    streets.insert(0, str(min_traffic))\n    return streets\n\n\nfilename = 'traffic.csv'\nresult = find_min_traffic(filename)\nfor street in result:\n    print(street)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nexpected_output = [\r\n\"700\",\r\n\"Harbor Ave\",\r\n\"Woodlawn Ave\",\r\n\"Root St\",\r\n\"Calumet Ave\",\r\n\"Financial PL\",\r\n\"16th St\",\r\n\"Racine Ave\",\r\n\"60th St\",\r\n\"Wentworth Ave\",\r\n\"Parnell Ave\",\r\n\"Ashland Ave\",\r\n\"Federal St\",\r\n\"Hamlin Ave\",\r\n\"Pitney Ct\",\r\n\"109th St\",\r\n\"Loomis St\",\r\n\"Harrison St\",\r\n\"24th St\",\r\n\"La Salle St\",\r\n\"83rd Pl\",\r\n\"Homan Ave\"]\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    output, error = autograder.run_script(\"lsn20_lowvolume.py\", [])\r\n    lines = set(output.split('\\n'))\r\n    matches = (len(lines.intersection(expected_output)))\r\n    return (round((matches/22)*100,1))\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "Unit Test Returned: 0.0\n"}, {"Unnamed: 0": 76, "problem_id": "lsn20_averagetraffic", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n**\n\nThis program makes use of the traffic.csv dataset. Here is a typical line from\nthe file:\n\n\n\n`691,6067 North,Kimball Ave,8/15/06,15600,North Bound:7500/South Bound:8100`\n\n\n\n  \nAs you will recall from class, each position in the line (separated by a\ncomma) represents a different \"data element\". Here is a key for your\nreference:\n\nID | Address | Street | Sample Date | Total # of Passing Vehicles | # of\nVehicles by Direction  \n---|---|---|---|---|---  \n691 | 6067 North | Kimball Ave | 8/15/06 | 15600 | North Bound:7500/South\nBound:8100  \n  \n  \n  \nWrite a Python algorithm that opens the file and outputs the # of roads whose\ntraffic count is greater than (or equal to) the average. For example, if you\ndetermine that the answer is 20, your program should output:\n\n    \n    \n    20\n\n\n", "code": "\n# Open the file\nwith open('traffic.csv', 'r') as file:\n    # Read the lines of the file\n    lines = file.readlines()\n\n# Initialize a variable to store the total traffic count\ntotal_traffic_count = 0\n# Initialize a variable to store the number of roads with traffic count greater than or equal to the average\nroads_above_average = 0\n\n# Iterate over the lines of the file\nfor line in lines:\n    # Remove the trailing newline character\n    line = line.strip()\n    # Split the line into its data elements\n    data = line.split(',')\n\n    # Extract the traffic count from the data element\n    traffic_count = int(data[4])\n    # Add the traffic count to the total\n    total_traffic_count += traffic_count\n\n# Calculate the average traffic count\naverage_traffic_count = total_traffic_count / len(lines)\n\n# Iterate over the lines of the file again\nfor line in lines:\n    # Remove the trailing newline character\n    line = line.strip()\n    # Split the line into its data elements\n    data = line.split(',')\n\n    # Extract the traffic count from the data element\n    traffic_count = int(data[4])\n\n    # Check if the traffic count is greater than or equal to the average\n    if traffic_count >= average_traffic_count:\n        # Increment the count of roads above average\n        roads_above_average += 1\n\n# Output the number of roads above average\nprint(roads_above_average)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nexpected_output = [\"525\"]\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    output, error = autograder.run_script(\"lsn20_averagetraffic.py\", [])\r\n    lines = output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_output)\r\n       \r\n    return round(num_matches * (100.0 / len(expected_output)), 1)\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "Unit Test Returned: 0.0\n"}, {"Unnamed: 0": 77, "problem_id": "lsn19_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You are being provided with an empty table that contains information about\nUSAF Academy Squadrons. The columns of the table are organized as follows:\n\n**Squadron Name** | **Squadron Number**  \n---|---  \nName Goes Here (string) | # Goes Here (integer)  \n  \n\n\nAdd the following two rows to the table:\n\nDogs of War | 3  \n---|---  \nWolverines | 19  \n  \n  \n  \n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\nfrom lsn19_skill2 import *\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    if len(squadron_table) >= 2:\r\n        print(\"Squadron Table has at least 2 things in them.  Let's see what's inside!\")\r\n        score += 20\r\n        \r\n        if (squadron_table[0][0] == \"Dogs of War\" and squadron_table[0][1] == 3):\r\n            print(\"First Row Added Correctly\")\r\n            score += 40\r\n        else:\r\n            print(\"Something is wrong with the first row.  Make sure you are appending a list!\")\r\n        \r\n        if (squadron_table[1][0] == \"Wolverines\" and squadron_table[1][1] == 19):\r\n            print(\"Second Row Added Correctly\")\r\n            score += 40\r\n        else:\r\n            print(\"Something is wrong with the second row.  Make sure you are appending a list!\")\r\n    else:\r\n        print(\"Squadron Table does not appear to have (at least) 2 rows\")\r\n        \r\n    return score\r\n        \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "failed: name 'squadron_table' is not defined", "score": 0, "text": ""}, {"Unnamed: 0": 78, "problem_id": "lsn19_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You are being provided with a table  that describes various starship\nclasses from the Star Trek universe (I'm a nerd . . . go with it), as well as\ntwo input statements that get a row and column from the user.  \n\nPrint out the corresponding row/column value from the table.\n\n\n\n\n", "code": "\nstarship_table = [\n    [\"Starship\", \"Crew Size\", \"Length (m)\", \"Max Warp\"],\n    [\"Enterprise NX-01\", \"82\", \"225.56\", \"5.06\"],\n    [\"USS Enterprise NCC-1701\", \"430\", \"289.10\", \"8.20\"],\n    [\"USS Enterprise NCC-1701-D\", \"1014\", \"641.75\", \"9.21\"],\n    [\"Deep Space 9\", \"300\", \"1454.22\", \"N/A\"],\n    [\"Voyager\", \"141\", \"344.98\", \"9.975\"]\n]\n\nrow = int(input(\"Enter the row number: \"))\ncol = int(input(\"Enter the column number: \"))\n\nprint(starship_table[row][col])\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nfrom lsn19_skill1 import *\r\n\r\nanswer= [[37, 'USA'],\r\n        [23, 'Britain'],\r\n        [18, 'China'],\r\n        [17, 'Russia'],\r\n        [10, 'Germany'],\r\n        [8, 'Japan'],\r\n        [18, 'France'],\r\n        [3, 'South Korea'],\r\n        [12, 'Italy'],\r\n        [11, 'Australia']]\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    num_matches = 0\r\n    count_vals_as_str = 0\r\n    \r\n    for i in range(len(my_table)):\r\n        print(\"Row \" + str(i+1) + \": \", end='')\r\n        if i < len(answer):\r\n            if my_table[i] == answer[i]:\r\n                print(\"CORRECT\")\r\n                num_matches += 1\r\n            else:\r\n                if type(my_table[i][0]) is str:\r\n                    count_vals_as_str += 1\r\n                print(\"INCORRECT (Expected: \" + str(answer[i]) + \" instead of \" + str(my_table[i]) + \")\")\r\n        else:\r\n            print(\"INCORRECT (Unexpected Row: '\" + str(my_table[i]) + \"')\")\r\n    \r\n    print()\r\n    print(num_matches, \"out of\", len(answer), \"rows match\")\r\n    if count_vals_as_str > 0:\r\n        print(\"Looks like your medal numbers are strings not integers.\")\r\n    \r\n    if len(answer) < num_matches:\r\n        return 100 * num_matches / len(answer)\r\n    else:\r\n        return num_matches * (100 / len(answer))\r\n    \r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "failed: invalid syntax (lsn19_skill1.py, line 15)", "score": 0, "text": ""}, {"Unnamed: 0": 79, "problem_id": "lsn19_population", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nYou are being provided with a simple 2D list that contains the names and\npopulations of the 10 largest cities in the world. This list (which is called\n`cities_table`) can be logicially visualized as the following:\n\n\n\n**City** | **Population**  \n---|---  \nTokyo | 37,435,191  \nDelhi | 29,399,141  \nShanghai | 29,399,141  \nSao Paulo | 21,846,507  \nMexico City | 21,671,908  \nCairo | 20,484,965  \nDhaka | 20,283,552  \nMumbai | 20,185,064  \nBeijing | 20,035,455  \nOsaka | 19,222,665  \n  \n  \nWrite a Python program that gets a population from the user, and prints the\nnames of all the cities whose populations are at least that big (starting with\nthe most populated city). Print each city's name on a separate line.\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2  \n---|---|---  \nInput | 28000000 | 30000000  \nOutput | Tokyo  \nDelhi  \nShanghai | Tokyo\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\ndef solution(population):\r\n    result = ''\r\n    \r\n    cities_table = [\r\n        ['Tokyo', 37435191],\r\n        ['Delhi', 29399141],\r\n        ['Shanghai', 25647805],\r\n        ['Sao Paulo', 21846507],\r\n        ['Mexico City', 21671908],\r\n        ['Cairo', 20484965],\r\n        ['Dhaka', 20283552],\r\n        ['Mumbai', 20185064],\r\n        ['Beijing', 20035455],\r\n        ['Osaka', 19222665]]\r\n    \r\n    for row in cities_table:\r\n        if row[1] >= population:\r\n            result += row[0] + '\\n'\r\n    \r\n    return result.strip()\r\n\r\n\r\ndef test_passed():\r\n    \r\n    random_population_size = random.randint(19, 30) * 1000000\r\n    \r\n    output, error = autograder.run_script(\"lsn19_population.py\", [random_population_size])\r\n    answer = solution(random_population_size)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, answer.strip().split('\\n'))\r\n    \r\n    if num_matches == len(lines):\r\n        print(\"\\nCORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"\\nOne or more outputs were incorrect.\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "\nOne or more outputs were incorrect.\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 80, "problem_id": "lsn19_movies", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:**\n\nWrite a Python function called `get_movies` that takes three parameters:\n\n  * A two-dimensional list containing movie titles and other stats (see table below for an example)\n  * A rating (e.g., \"PG\", \"R\")\n  * A run time (in minutes)\n\n\n\nTitle | Release Year | Rating | Run Time (minutes)  \n---|---|---|---  \nStar Wars: A New Hope | 1977 | PG | 121  \nStar Trek: The Motion Picture | 1979 | G | 132  \nIndiana Jones: Raiders of the Lost Ark | 1989 | PG | 115  \n  \n  \nYour function should return the number of movies that have the specified\nrating, and run for at least the number of minutes specified.\n\n\n\n**EXAMPLE:**  \nIf the above table were contained within a list called `movie_table`, then\n`get_movies(movie_table, \"PG\", 100)` should return 2\n\n\n", "code": "\ndef get_movies(movie_table, rating, run_time):\n    count = 0\n    for movie in movie_table:\n        if movie[2] == rating and movie[3] >= run_time:\n            count += 1\n    return count\n", "testcase": "from cs110 import autograder\r\nimport random\r\nimport lsn19_movies\r\n\r\ndef solution(movies_table, rating, runtime):\r\n    count = 0\r\n    \r\n    for row in movies_table:\r\n        if row[2] == rating and row[3] >= runtime:\r\n            count += 1\r\n    \r\n    return count\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    ratings = ['PG', 'PG-13', 'R']\r\n    num_passed = 0\r\n    \r\n    for rating in ratings:\r\n        movies_table = [\r\n            [\"Star Wars: A New Hope\", 1977, \"PG\", 121],\r\n            [\"Star Trek: The Motion Picture\", 1979, \"G\", 132],\r\n            [\"Raiders of the Lost Ark\", 1989, \"PG\", 115],\r\n            [\"Indiana Jones and the Temple of Doom\", 1984, \"PG\", 118],\r\n            [\"Indiana Jones and the Last Crusade\", 1989, \"PG-13\", 127],\r\n            [\"Serenity\", 2005, \"PG-13\", 119],\r\n            [\"Joker\", 2019, \"R\", 122],\r\n            [\"The Terminator\", 1984, \"R\", 107]\r\n            ]\r\n        test_table = []\r\n        runtime = random.randint(90, 120)\r\n        \r\n        for j in range(random.randint(2, 5)):\r\n            index = random.randint(0, len(movies_table)-1)\r\n            test_table.append(movies_table[index])\r\n            movies_table.remove(movies_table[index])\r\n        \r\n        print(\"Testing (Rating = \" + rating + \"):\\n\" + \"  Movie Table: \" + str(test_table) + \"\\n\" + \"  Runtime: \" + str(runtime))\r\n        print(\"  Expecting: \" + str(solution(test_table, rating, runtime)) + \"\\n  Your Function's Output: \" + str(lsn19_movies.get_movies(test_table, rating, runtime)))\r\n        \r\n        if solution(test_table, rating, runtime) == lsn19_movies.get_movies(test_table, rating, runtime):\r\n            print(\"PASSED!\\n\")\r\n            num_passed += 1\r\n        else:\r\n            print(\"INCORRECT\\n\")\r\n            \r\n    \r\n    return (num_passed / len(ratings)) * 100.0\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 100.0, "text": "Testing (Rating = PG):\n  Movie Table: [['Joker', 2019, 'R', 122], ['The Terminator', 1984, 'R', 107], ['Star Trek: The Motion Picture', 1979, 'G', 132], ['Star Wars: A New Hope', 1977, 'PG', 121]]\n  Runtime: 95\n  Expecting: 1\n  Your Function's Output: 1\nPASSED!\n\nTesting (Rating = PG-13):\n  Movie Table: [['Indiana Jones and the Last Crusade', 1989, 'PG-13', 127], ['The Terminator', 1984, 'R', 107]]\n  Runtime: 97\n  Expecting: 1\n  Your Function's Output: 1\nPASSED!\n\nTesting (Rating = R):\n  Movie Table: [['The Terminator', 1984, 'R', 107], ['Star Trek: The Motion Picture', 1979, 'G', 132], ['Raiders of the Lost Ark', 1989, 'PG', 115], ['Indiana Jones and the Last Crusade', 1989, 'PG-13', 127], ['Indiana Jones and the Temple of Doom', 1984, 'PG', 118]]\n  Runtime: 115\n  Expecting: 0\n  Your Function's Output: 0\nPASSED!\n\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 81, "problem_id": "lsn19_golf", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** In, Python, write an algorithm that first asks the user how many football\nplayers they wish to enter statistics for and then gets that many yearly\npassing totals for each player. Output how many of those players that had more\nthan 5000 passing yards in a year. Also your algorithm will output the average\nyardage per year as well as the minimum yardage entered, in that order. You\ncan assume there is at least one player's yardage to input.\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2 | Example 3  \n---|---|---|---  \n**Inputs** | 6  \n4924  \n4442  \n5117  \n2700  \n1990  \n4399 | 5  \n2305  \n4209  \n5100  \n5109  \n3800 | 4  \n4200  \n2709  \n3757  \n2976  \n**Outputs** | 1  \n3928.6666666666665  \n1990 | 2  \n4104.6  \n2305 | 0  \n3410.5  \n2709\n\n\n", "code": "\n# get the number of players from the user\nnum_players = int(input(\"How many football players do you want to enter statistics for? \"))\n\n# initialize variables for counting players with more than 5000 passing yards,\n# calculating the total yardage, and finding the minimum yardage\ncount = 0\ntotal_yardage = 0\nmin_yardage = float('inf')\n\n# iterate through each player\nfor i in range(num_players):\n    # get the passing yardage for the current player from the user\n    yardage = int(input(\"Enter passing yardage for player {}: \".format(i+1)))\n    \n    # check if the yardage is more than 5000\n    if yardage > 5000:\n        count += 1\n    \n    # add the yardage to the total\n    total_yardage += yardage\n    \n    # update the minimum yardage if necessary\n    if yardage < min_yardage:\n        min_yardage = yardage\n\n# calculate the average yardage\naverage_yardage = total_yardage / num_players\n\n# print the number of players with more than 5000 passing yards,\n# the average yardage, and the minimum yardage\nprint(count)\nprint(average_yardage)\nprint(min_yardage)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, statistics\r\n\r\nrandom_names = ['Mcllroy', 'Koepka', 'Rahm', 'Woods', 'Thomas', 'Johnson', 'Cantlay', 'Simpson']\r\n\r\ndef get_random_name():\r\n    global random_names\r\n    name = random_names[random.randint(0, len(random_names)-1)]\r\n    random_names.remove(name)\r\n    return name\r\n\r\n\r\ndef solution(data):\r\n    min_value = 99999\r\n    min_name = \"\"\r\n    count = 0\r\n    \r\n    for row in data:\r\n        if row[1] < min_value:\r\n            min_value = row[1]\r\n            min_name = row[0]\r\n    \r\n    for row in data:\r\n        if row[1] <= min_value + 5:\r\n            count += 1\r\n\r\n    return min_name, (count / len(data) * 100.0)\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num_inputs = random.randint(2, 5)\r\n    input_list = []\r\n    data = []\r\n        \r\n    for i in range(num_inputs):\r\n        new_row = [get_random_name(), random.randint(70, 90)]\r\n        input_list.append(new_row[0])\r\n        input_list.append(new_row[1])\r\n        data.append(new_row)\r\n    input_list.append(\"END\")\r\n    \r\n    lowest_name, percent = solution(data)\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn19_golf.py\", input_list)\r\n    lines = output.strip().split('\\n')\r\n\r\n    # Checks Min\r\n    if len(lines) < 2:\r\n        print(\"Number of output lines does not match\")\r\n        return 0\r\n    else:\r\n        if not lowest_name == lines[0]:\r\n            print(\"Incorrect Name.  Expected \" + str(lowest_name))\r\n            return 0\r\n        if not autograder.equals(percent, lines[1]):\r\n            print(\"Incorrect Percent.  Expected \" + str(percent))\r\n            return 50\r\n        \r\n    print(\"PASSED!\")\r\n    return 100\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "Number of output lines does not match\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 82, "problem_id": "lsn19_credit", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:**\n\nThe Air Academy Federal Credit Union wants to identify its best customers and\ncomes to you for help. To help with the accounting, create a Python program\nwhich inputs repeated pairs of member last-names followed by account balances\nuntil the word \" **DONE** \" (all capital letters) is entered at the member\nlast-name prompt.\n\nYour program should output:\n\n  * The last name of the member the highest account value, if there are two members with the same highest account value it should output the name of the first person entered.\n  * It will then output the percentage members who are within $10,000 (inclusive) of the highest account value.\n\nThere is no bound on the number of members that may be entered, but you may\nassume that there will be at least one member and balance entered.\n\n\n\n**EXAMPLE:**\n\n  | Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInputs | Rockefeller  \n120000  \nChase  \n115000  \nMorgan  \n110000  \nGates  \n90000  \nJobs  \n65000  \nDONE | Jobs  \n150000  \nChase  \n150000  \nKennedy  \n40000  \nDONE | Morgan  \n145000  \nChase  \n135000  \nKennedy  \n142000  \nGates  \n145000  \nDONE  \nOutput | Rockefeller  \n60.0 | Jobs  \n66.66666666666666 | Morgan  \n100.0  \n  \n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, statistics\r\n\r\nrandom_names = ['Gates', 'Bezos', 'Zuckerberg', 'Ellison', 'Page', 'Brin', 'Huateng', 'Dell', 'Musk', 'Allen']\r\n\r\ndef get_random_name():\r\n    global random_names\r\n    name = random_names[random.randint(0, len(random_names)-1)]\r\n    random_names.remove(name)\r\n    return name\r\n\r\n\r\ndef solution(data):\r\n    highest_value = -99999\r\n    highest_name = \"\"\r\n    count = 0\r\n    \r\n    for row in data:\r\n        if row[1] > highest_value:\r\n            highest_value = row[1]\r\n            highest_name = row[0]\r\n    \r\n    for row in data:\r\n        if row[1] >= highest_value - 10000:\r\n            count += 1\r\n\r\n    return highest_name, (count / len(data) * 100.0)\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num_inputs = random.randint(5, 7)\r\n    input_list = []\r\n    data = []\r\n        \r\n    for i in range(num_inputs):\r\n        new_row = [get_random_name(), random.randint(5000, 35000)]\r\n        input_list.append(new_row[0])\r\n        input_list.append(new_row[1])\r\n        data.append(new_row)\r\n    input_list.append(\"DONE\")\r\n    \r\n    highest_balance, percent = solution(data)\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn19_credit.py\", input_list)\r\n    lines = output.strip().split('\\n')\r\n\r\n    # Checks Min\r\n    if len(lines) < 2:\r\n        print(\"Number of output lines does not match\")\r\n        return 0\r\n    else:\r\n        if not highest_balance == lines[0]:\r\n            print(\"Incorrect Highest Balance.  Expected \" + str(highest_balance))\r\n            return 0\r\n        if not autograder.equals(percent, lines[1]):\r\n            print(\"Incorrect Percent.  Expected \" + str(percent))\r\n            return 50\r\n        \r\n    print(\"PASSED!\")\r\n    return 100\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "Number of output lines does not match\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 83, "problem_id": "lsn19_100m", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nYou have been asked by your unit to record 100m dash times for an upcoming\nUSAFA track meet. Create a Python algorithm that first asks for the number of\ncadets, and then asks for that many cadet last names, squadrons, and 100m dash\ntimes (in that order).\n\nYour program should output:\n\n  * The cadet squadron containing the cadet with the fastest 100m dash time followed by their 100m dash time. If there is a tie for fastest 100m dash times, you should output the squadron number and time for the LAST cadet entered who had that fastest time.\n  * The number of cadets whose 100m dash time was faster than the average.\n\nThere is no bound on the number of cadet that may be entered, but you may\nassume that there will be at least one cadet and track time entered.\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \n**Inputs** | 4  \nThorpe  \n13  \n10.2  \nOwens  \n22  \n9.93  \nMathias  \n19  \n9.99  \nRudolph  \n39  \n10.23 | 3  \nJohnson  \n7  \n10.3  \nTyus  \n14  \n10.02  \nLewis  \n40  \n9.67 | 2  \nJoyner  \n1  \n10.08  \nKersee  \n29  \n9.97  \n**Output** | 22  \n9.93  \n2 | 40  \n9.67  \n1 | 29  \n9.97  \n1  \n  \n\n\n\n", "code": "\ndef cadet_dash_time():\n    num_cadets = int(input(\"Enter the number of cadets: \"))\n    cadet_data = []\n    for _ in range(num_cadets):\n        cadet_last_name = input(\"Enter cadet last name: \")\n        cadet_squadron = int(input(\"Enter cadet squadron: \"))\n        dash_time = float(input(\"Enter 100m dash time: \"))\n        cadet_data.append((cadet_last_name, cadet_squadron, dash_time))\n    \n    fastest_time = float(\"inf\")\n    fastest_squadron = None\n    faster_than_avg = 0\n    total_time = 0\n\n    for data in cadet_data:\n        cadet_squadron = data[1]\n        dash_time = data[2]\n        total_time += dash_time\n        \n        if dash_time < fastest_time or (dash_time == fastest_time and cadet_squadron > fastest_squadron):\n            fastest_time = dash_time\n            fastest_squadron = cadet_squadron\n        \n    avg_time = total_time / num_cadets\n\n    for data in cadet_data:\n        dash_time = data[2]\n        if dash_time < avg_time:\n            faster_than_avg += 1\n\n    print(fastest_squadron)\n    print(fastest_time)\n    print(faster_than_avg)\n\ncadet_dash_time()\n```\n", "testcase": "from cs110 import autograder\r\nimport random, statistics\r\n\r\nrandom_names = ['Alice', 'Bob', 'Courtney', 'Devon', 'Frank', 'Genie']\r\n\r\ndef get_random_name():\r\n    global random_names\r\n    name = random_names[random.randint(0, len(random_names)-1)]\r\n    random_names.remove(name)\r\n    return name\r\n\r\ndef solution(data):\r\n    fastest_time = 99999\r\n    fastest_squadron = 0\r\n    total = 0\r\n    count = 0\r\n    \r\n    for row in data:\r\n        total += row[2]\r\n        if row[2] <= fastest_time:\r\n            fastest_time = row[2]\r\n            fastest_squadron = row[1]\r\n            \r\n    average = total / len(data)\r\n    \r\n    for row in data:\r\n        if row[2] <= average:\r\n            count += 1\r\n    \r\n    return fastest_squadron, fastest_time, count\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    num_inputs = random.randint(2, 5)\r\n    input_list = [num_inputs]\r\n    data = []\r\n        \r\n    for i in range(num_inputs):\r\n        new_row = [get_random_name(), random.randint(1, 40), round(random.uniform(12, 18), 1)]\r\n        input_list.append(new_row[0])\r\n        input_list.append(new_row[1])\r\n        input_list.append(new_row[2])\r\n        data.append(new_row)\r\n    \r\n    fastest_squadron, fastest_time, count = solution(data)\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn19_100m.py\", input_list)\r\n    lines = output.strip().split('\\n')\r\n\r\n    # Checks Min\r\n    if len(lines) != 3:\r\n        print(\"Number of output lines does not match\")\r\n        return 0\r\n    else:\r\n        if not autograder.equals(fastest_squadron, lines[0]):\r\n            print(\"Incorrect Squadron.  Expected \" + str(fastest_squadron))\r\n            return 0\r\n        if not autograder.equals(fastest_time, lines[1]):\r\n            print(\"Incorrect Time.  Expected \" + str(fastest_time))\r\n            return 33\r\n        if not autograder.equals(count, lines[2]):\r\n            print(\"Incorrect Count.  Expected \" + str(count))\r\n            return 67\r\n        \r\n    print(\"PASSED!\")\r\n    return 100\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "Number of output lines does not match\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 84, "problem_id": "lsn18_swimstats", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nWrite a Python algorithm that keeps asking the user for swim times (in\nseconds) until the user types -1. Your program will print the following values\n(in order, one per line):\n\n  * Average time\n  * Range (i.e., the difference between the min and max time)\n  * Standard Deviation (hint: like many things in Python you can find how to accomplish this with a quick web search, stdev() should show up on top)\n\n\n\n  | Example 1 | Example 2  \n---|---|---  \nInputs | 62  \n71  \n83  \n-1 | 45  \n47  \n51  \n46  \n44  \n-1  \nOutputs | 72.0  \n21  \n8.602 | 46.6  \n7  \n2.417  \n  \n** **\n\n\n", "code": "\nimport statistics\n\ntimes = []\ntime = int(input(\"Enter swim time in seconds, or -1 to exit: \"))\n\nwhile time != -1:\n    times.append(time)\n    time = int(input(\"Enter swim time in seconds, or -1 to exit: \"))\n\naverage_time = statistics.mean(times)\ntime_range = max(times) - min(times)\nstd_deviation = statistics.stdev(times)\n\nprint(average_time)\nprint(time_range)\nprint(std_deviation)\n", "testcase": "from cs110 import autograder\r\nimport random, statistics\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    list_of_swim_times = []\r\n    for i in range(6):\r\n        list_of_swim_times.append(random.randint(40, 60))\r\n    min_time = min(list_of_swim_times)\r\n    max_time = max(list_of_swim_times)\r\n    range_time = max_time - min_time\r\n    average = sum(list_of_swim_times) / len(list_of_swim_times)\r\n    \r\n    # There are multiple standard deviations; this unit test accepts either one\r\n    stdev = statistics.stdev(list_of_swim_times)\r\n    pstdev = statistics.pstdev(list_of_swim_times)\r\n    \r\n    list_of_swim_times.append(-1)\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn18_swimstats.py\", list_of_swim_times)\r\n    lines = output.split('\\n')\r\n\r\n    # Checks Min\r\n    if len(lines) != 4:\r\n        print(\"Number of output lines does not match\")\r\n        return 0\r\n    else:\r\n        if not autograder.equals(average, lines[0]):\r\n            print(\"Invalid Average.  Expected \" + str(average))\r\n            return 0\r\n        if not autograder.equals(range_time, lines[1]):\r\n            print(\"Invalid Range.  Expected \" + str(range_time))\r\n            return 33\r\n        if not (autograder.equals(stdev, lines[2]) or equals(pstdev, lines[2])):\r\n            print(\"Invalid Std Dev.  Expected \" + str(stdev))\r\n            return 67\r\n        \r\n    print(\"PASSED!\")\r\n    return 100\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "failed: must be real number, not str", "score": 0, "text": ""}, {"Unnamed: 0": 85, "problem_id": "lsn18_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM NAME:  \n** lsn18_skill2\n\n\n\n**PROBLEM STATEMENT:  \n** You are being provided with a list containing 5 random numbers. Create a\nvariable called **my_value** , and assign it the value of the 3rd item in the\nlist.\n\n\n\n**NOTES:**\n\n  * You do not need to print my_value OR the list\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\nfrom lsn18_skill2 import *\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    if len(squadron_table) >= 2:\r\n        print(\"Squadron Table has at least 2 things in them.  Let's see what's inside!\")\r\n        score += 20\r\n        \r\n        if (squadron_table[0][0] == \"Dogs of War\" and squadron_table[0][1] == 3):\r\n            print(\"First Row Added Correctly\")\r\n            score += 40\r\n        else:\r\n            print(\"Something is wrong with the first row.  Make sure you are appending a list!\")\r\n        \r\n        if (squadron_table[1][0] == \"Wolverines\" and squadron_table[1][1] == 19):\r\n            print(\"Second Row Added Correctly\")\r\n            score += 40\r\n        else:\r\n            print(\"Something is wrong with the second row.  Make sure you are appending a list!\")\r\n    else:\r\n        print(\"Squadron Table does not appear to have (at least) 2 rows\")\r\n        \r\n    return score\r\n        \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "failed: name 'squadron_table' is not defined", "score": 0, "text": ""}, {"Unnamed: 0": 86, "problem_id": "lsn18_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Create a list called my_list. Put 3 items inside the list (they can be\nanything you want)\n\n\n\n**HINTS:  \n** Look at the quick reference guide! ****\n\n\n\n\n", "code": "\nmy_list = [\"apple\", 10, True]\nprint(my_list)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nstarship_table = [['Constitution', 288.6,  127.1,  72.6],\r\n                  ['Galaxy',       642.5,  463.73, 135.26],\r\n                  ['Intrepid',     343.0,  133.0,  66],\r\n                  ['Sovereign',   685.3,  250.6,  88.2]]\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    row_to_print = random.randint(0, len(starship_table) - 1)\r\n    col_to_print = random.randint(0, len(starship_table[0]) - 1)\r\n    value_from_table = str(starship_table[row_to_print][col_to_print])\r\n    value_from_table_flipped = str(starship_table[col_to_print][row_to_print])\r\n    output, error = autograder.run_script(\"lsn18_skill1.py\", [row_to_print, col_to_print])\r\n    \r\n    if output.strip() == value_from_table:\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    elif output.strip() == value_from_table_flipped:\r\n        print(\"INCORRECT. Expected\", value_from_table)\r\n        print(\"It looks like you flipped columns and rows.  Remember that the format is list_name[row][col]\")\r\n        return 25.0\r\n    else:\r\n        print(\"INCORRECT. Expected\", value_from_table)\r\n        print(\"Try again.  Remember that the format is list_name[row][col]\")\r\n        return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "INCORRECT. Expected 288.6\nTry again.  Remember that the format is list_name[row][col]\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 87, "problem_id": "lsn18_namesreverse", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:**\n\nAllow the user to enter names one at a time until they type the word 'END'\n(without quotes). This keyword is called a  **sentinel value,**  and it marks\nthe end of the input. The user entered names (not counting 'END') are to be\nstored in a Python list. The user will enter the names one at a time. After\nentering all the names, your algorithm will print the names in the reverse\norder that they were entered.\n\n\n\n  | Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInputs | Adrian  \nLiam  \nMichelle  \nEND | Rick  \nMorty  \nEND | Spock  \nData  \nDax  \nBurnham  \nEND  \nOutputs | Michelle  \nLiam  \nAdrian | Morty  \nRick | Burnham  \nDax  \nData  \nSpock  \n  \nYou may assume that the user types at least one name.\n\n\n\n**HINTS:**\n\n  * Remember that the range() function can have up to 3 parameters. The first is the starting value, the second is the ending value, and the third is the increment amount.\n  * Don't forget that the index of a list starts at 0, and goes to the length of the list - 1. For example, a list with 5 elements has indices 0, 1, 2, 3, and 4.\n  * To get the length of a list, use the `len()` function\n\n\n", "code": "\nnames = []\nname = input(\"Enter a name: \")\nwhile name != \"END\":\n    names.append(name)\n    name = input(\"Enter a name: \")\n\nfor i in range(len(names)-1, -1, -1):\n    print(names[i])\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\ndef solution(name_list):\r\n    result = ''\r\n    \r\n    for i in range(len(name_list) - 1, -1, -1):\r\n        result += name_list[i] + \"\\n\"\r\n\r\n    return result.strip()\r\n\r\n\r\ndef test_passed():\r\n    \r\n    name_list = [\"Alice\", \"Bob\", \"Catrina\", \"Dennis\", \"Felix\", \"Garfield\", \"Henry\", \"Ignis\", \"Jack\", \"Kelly\"]\r\n    num_names = random.randint(3, len(name_list))\r\n    input_list = []\r\n    random_names = []\r\n    \r\n    for i in range(num_names):\r\n        random_name = name_list[random.randint(0, len(name_list)-1)]\r\n        input_list.append(random_name)\r\n        random_names.append(random_name)\r\n        name_list.remove(random_name)\r\n    \r\n    input_list.append(\"END\")\r\n    \r\n    output, error = autograder.run_script(\"lsn18_namesreverse.py\", input_list)\r\n    expected_output = solution(random_names)\r\n    \r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT.  Expected:\")\r\n        print(expected_output)\r\n    \r\n    return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n", "exec_result": "completed", "score": 100.0, "text": "CORRECT\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 88, "problem_id": "lsn18_names", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nWrite a Python algorithm that asks the user for the number of names to\nprocess, and then gets that many values. Print out the names in alphabetical\norder, with each name starting on a line.\n\n  | Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInputs | 3  \nAlice  \nJane  \nBob | 3  \nBailey  \nPaul  \nAdrian | 5  \nDavid  \nDave  \nSteve  \nBarry  \nTroy  \nOutputs | Alice  \nBob  \nJane | Adrian  \nBailey  \nPaul | Barry  \nDave  \nDavid  \nSteve  \nTroy  \n  \n\n\nYou may assume that the user will enter at least one name.\n\n\n\n**NOTES:**\n\n  * Python has a built-in function called `sort()` that can be used to sort a list. Here is an example to show you how to use it:  \n`# Declare a list and put some stuff in it`  \n`my_list = ['b', 'c', 'a', 'd']`  \n  \n`# Sort the list alphabetically (a-z)`  \n`my_list.sort()`\n\n** **\n\n\n", "code": "\n# Ask the user for the number of names to process\nnum_names = int(input(\"Enter the number of names to process: \"))\n\n# Declare an empty list to store the names\nnames = []\n\n# Loop through the range of num_names and get the names from the user\nfor i in range(num_names):\n    name = input(\"Enter name \" + str(i+1) + \": \")\n    names.append(name)\n\n# Sort the list of names alphabetically\nnames.sort()\n\n# Print each name on a new line\nfor name in names:\n    print(name)\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\ndef solution(name_list):\r\n    result = ''\r\n    \r\n    name_list.sort()\r\n    \r\n    for name in name_list:\r\n        result += name + \"\\n\"\r\n    \r\n    return result.strip()\r\n\r\n\r\ndef test_passed():\r\n    \r\n    name_list = [\"Alice\", \"Bob\", \"Catrina\", \"Dennis\", \"Felix\", \"Garfield\", \"Henry\", \"Ignis\", \"Jack\", \"Kelly\"]\r\n    num_names = random.randint(3, len(name_list))\r\n    input_list = [num_names]\r\n    random_names = []\r\n    \r\n    for i in range(num_names):\r\n        random_name = name_list[random.randint(0, len(name_list)-1)]\r\n        input_list.append(random_name)\r\n        random_names.append(random_name)\r\n        name_list.remove(random_name)\r\n    \r\n    output, error = autograder.run_script(\"lsn18_names.py\", input_list)\r\n    expected_output = solution(random_names)\r\n    \r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT.  Expected:\")\r\n        print(expected_output)\r\n    \r\n    return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n", "exec_result": "completed", "score": 100.0, "text": "CORRECT\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 89, "problem_id": "lsn18_grades", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:**\n\nCreate a Python program that asks how many students are in a class, then\nprompts the user for each student's grade. Then output the grades that are\n**at least 10 points above the average.**\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInput | 3  \n10  \n100  \n70 | 3  \n30  \n40  \n60 | 4  \n10  \n20  \n60  \n90  \nOutput | 100 | 70 | 60  \n90\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\ndef solution(grade_list):\r\n    result = ''\r\n    \r\n    average = sum(grade_list) / len(grade_list)\r\n    \r\n    for grade in grade_list:\r\n        if (grade >= (average + 10)):\r\n            result += str(grade) + \"\\n\"\r\n    \r\n    return result.strip()\r\n\r\n\r\ndef test_passed():\r\n    \r\n    num_grades = random.randint(3, 7)\r\n    input_list = [num_grades]\r\n    random_grades = []\r\n    \r\n    for i in range(num_grades):\r\n        random_grade = random.randint(0, 100)\r\n        input_list.append(random_grade)\r\n        random_grades.append(random_grade)\r\n    \r\n    output, error = autograder.run_script(\"lsn18_grades.py\", input_list)\r\n    expected_output = solution(random_grades)\r\n    \r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT.  Expected:\")\r\n        print(expected_output)\r\n    \r\n    return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n", "exec_result": "completed", "score": 0.0, "text": "INCORRECT.  Expected:\n72\n91\n86\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 90, "problem_id": "lsn18_combinations", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nWrite a Python function called `get_combinations` that takes a list of\ndistinct characters as a parameter, and returns a list containing all of the\n2-letter combinations of said characters.\n\nFor example, given the following list:  \n`my_list = ['a', 'b']`\n\n`get_combinations(my_list)` should return a list containing the following\nelements:  \n['aa', 'ab', 'ba', 'bb']\n\nNotes:\n\n  * The ordering of the elements in the list does not matter, so long as all of the 2-letter combinations are contained within the list\n\n\n", "code": "\ndef get_combinations(characters):\n    combinations = []\n    for i in characters:\n        for j in characters:\n            combinations.append(i + j)\n    return combinations\n", "testcase": "from cs110 import autograder\r\nimport random, lsn18_combinations\r\n\r\nSTUDENT_SCRIPT = \"lsn18_combinations.py\"\r\n\r\n\r\ndef solution(list_of_characters):\r\n    result = []\r\n    \r\n    for character1 in list_of_characters:\r\n        for character2 in list_of_characters:\r\n            result.append(character2 + character1)\r\n    \r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Generates Random Values\r\n    possible_characters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\r\n    list_size = random.randint(2, len(possible_characters))\r\n    test_input = []\r\n    \r\n    for i in range(list_size):\r\n        random_index = int(random.random() * len(possible_characters))\r\n        random_character = possible_characters[random_index]\r\n        test_input.append(random_character)\r\n        possible_characters.remove(random_character)\r\n\r\n    # Runs the Script\r\n    answer = solution(test_input)\r\n    student_answer = lsn18_combinations.get_combinations(test_input)\r\n    \r\n    print(\"Letters Provided:\\n\", test_input, \"\\n\")\r\n    print(\"Expected:\\n\" + str(answer) + \"\\n\")\r\n    print(\"Your List:\\n\" + str(student_answer) + \"\\n\")\r\n\r\n    if len(answer) == len(student_answer):\r\n        for combo in answer:\r\n            if student_answer.count(combo) != 1:\r\n                print(\"Missing Combo Value: \" + combo)\r\n                return 0\r\n    else:\r\n        print(\"Lists are not the same size\")\r\n        return 0\r\n    \r\n    print(\"CORRECT\")\r\n    return 100\r\n    \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "completed", "score": 100.0, "text": "Letters Provided:\n ['b', 'c', 'e'] \n\nExpected:\n['bb', 'cb', 'eb', 'bc', 'cc', 'ec', 'be', 'ce', 'ee']\n\nYour List:\n['bb', 'bc', 'be', 'cb', 'cc', 'ce', 'eb', 'ec', 'ee']\n\nCORRECT\nUnit Test Returned: 100\n"}, {"Unnamed: 0": 91, "problem_id": "lsn16_practice4", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a dataset called `fuelprices.csv` that contains\nmonthly gasoline prices from 2006 - 2012. Here is a typical line from the\ndataset (each line ends with the newline \"\\n\" character):\n\n`1/1/2006 0:00,Regular,2.314`\n\n\n\nEach position in the line (separated by a comma) represents a different \"data\nelement,\" or \"column.\" The following table shows how the above line can be\ninterpreted:\n\n  | Day | Gas Type | Price (in Dollars)  \n---|---|---|---  \nValue | 1/1/2006 0:00 | Regular | 2.314  \n  \n\n\nWrite a Python program that asks the user for:\n\n  * A Gas Type (e.g., \"Regular\")\n\n\n\nYour program should then read the file and output:\n\n  * The average price of gas for that gas type\n\n\n\n\n\n\n", "code": "\nimport csv\n\ndef calculate_average_gas_price(gas_type):\n    total_price = 0\n    count = 0\n\n    with open('fuelprices.csv', 'r') as file:\n        reader = csv.reader(file)\n\n        for row in reader:\n            if row[1] == gas_type:\n                price = float(row[2])\n                total_price += price\n                count += 1\n\n    if count > 0:\n        average_price = total_price / count\n        return average_price\n    else:\n        return None\n\n# Ask the user for input\ngas_type = input(\"Enter a Gas Type: \")\n\n# Calculate and print the average gas price\naverage_price = calculate_average_gas_price(gas_type)\nif average_price:\n    print(\"Average price of gas for\", gas_type, \"is\", average_price)\nelse:\n    print(\"No data available for\", gas_type)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef test_passed():\r\n\r\n    num_tests_passed = 0\r\n    test_cases = [(\"Regular\", 37, 2.938), (\"Midgrade\", 37, 3.098), (\"Premium\", 37, 3.208), (\"Diesel\", 32, 3.242)]\r\n\r\n    for test_case in test_cases:\r\n        print(\"# -----------------------------------\")\r\n        print(\"# Testing\", test_case[0])\r\n        print(\"# -----------------------------------\")\r\n        output, error = autograder.run_script(\"lsn16_practice4.py\", [test_case[0]])\r\n    \r\n        lines = output.strip().split('\\n')\r\n        \r\n        if len(lines) > 0:\r\n            if autograder.equals(lines[0], test_case[2]):\r\n                print(\"CORRECT\")\r\n                num_tests_passed += 1\r\n            elif len(lines) > 1 and autograder.equals(lines[0], test_case[1]) and autograder.equals(lines[1], test_case[2]):\r\n                print(\"CORRECT\")\r\n                num_tests_passed += 1\r\n            else:\r\n                print(\"INCORRECT\")\r\n            print()\r\n                    \r\n    return round(100 / len(test_cases), 1) * num_tests_passed\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "# -----------------------------------\n# Testing Regular\n# -----------------------------------\nINCORRECT\n\n# -----------------------------------\n# Testing Midgrade\n# -----------------------------------\nINCORRECT\n\n# -----------------------------------\n# Testing Premium\n# -----------------------------------\nINCORRECT\n\n# -----------------------------------\n# Testing Diesel\n# -----------------------------------\nINCORRECT\n\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 92, "problem_id": "lsn16_practice3", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You are writing a program to analyze the BMI of cadets. Write a program\nthat asks for the number of cadets, and then gets that many weights and\nheights (alternating, a weight then the corresponding height, in that order).\nYour program should then output the number of thin, healthy, overweight, and\nobese cadets (based on their BMI), using the following formula and table as a\nguide:\n\n\n\n**BMI = 703 * (weight / height 2)**\n\n\n\n**Rating** | **BMI**  \n---|---  \nThin | less than 18.5  \nHealthy | at least 18.5 but less than 25  \nOverweight | at least 25 but less than 30  \nObese | 30 or more  \n  \n\n\n\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(weights, heights):\r\n    num_thin = 0\r\n    num_healthy = 0\r\n    num_overweight = 0\r\n    num_obese = 0\r\n    \r\n    for i in range(len(weights)):\r\n        bmi = 703 * (weights[i] / heights[i]**2)\r\n\r\n        if bmi <= 18.5:\r\n            num_thin += 1\r\n        elif bmi <= 25:\r\n            num_healthy += 1\r\n        elif bmi <= 30:\r\n            num_overweight += 1\r\n        else:\r\n            num_obese += 1\r\n    \r\n    return (num_thin, num_healthy, num_overweight, num_obese)\r\n\r\n\r\ndef test_passed():\r\n\r\n    score = 0\r\n\r\n    # Generates the Test Set\r\n    num_students = random.randint(5, 10)\r\n    inputs = [num_students]\r\n    weights = []\r\n    heights = []\r\n    \r\n    for i in range(num_students):\r\n        random_weight = random.randint(120, 200)\r\n        random_height = random.randint(55, 76)\r\n        \r\n        weights.append(random_weight)\r\n        heights.append(random_height)\r\n        \r\n        inputs.append(random_weight)\r\n        inputs.append(random_height)\r\n    \r\n    output, error = autograder.run_script(\"lsn16_practice3.py\", inputs)\r\n    expected_output = solution(weights, heights)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    \r\n    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):\r\n        print(\"Thin is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Thin is Incorrect.  Expected\", expected_output[0])\r\n\r\n    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):\r\n        print(\"Healthy is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Healthy is Incorrect.  Expected\", expected_output[1])\r\n    \r\n    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):\r\n        print(\"Overweight is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Overweight is Incorrect.  Expected\", expected_output[2])\r\n    \r\n    if len(lines) > 3 and autograder.equals(lines[3], expected_output[3]):\r\n        print(\"Obese is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Obese is Incorrect.  Expected\", expected_output[0])\r\n        \r\n    return score\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "Thin is Incorrect.  Expected 1\nHealthy is Incorrect.  Expected 3\nOverweight is Incorrect.  Expected 3\nObese is Incorrect.  Expected 1\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 93, "problem_id": "lsn16_practice2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a function that returns the nth value in a\nsequence (i.e., pattern). Get a number from the user (x), and print the xth to\nthe x+5th value in that sequence (6 numbers total).\n\n\n\n**HINTS:**\n\n  * To get the 8th value in a sequence, you would call `get_value(8)`\n\n\n\n\n", "code": "\ndef get_value(n):\n    # Assume this function is already provided\n    # It returns the nth value in a sequence\n\n    # Your code here\n    for i in range(n, n + 6):\n        print(get_value(i))\n    \n# Get input from user\nx = int(input(\"Enter a number: \"))\n\n# Print the xth to the x+5th value in the sequence\nget_value(x)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n\r\ndef get_value(n):\r\n    return (2 * n) + 1\r\n\r\n\r\ndef solution(x):\r\n    result = ''\r\n    \r\n    for i in range(x, x+6):\r\n        result += str(get_value(i)) + \"\\n\"\r\n    \r\n    return result\r\n\r\n\r\ndef test_passed():\r\n    random_value = random.randint(5, 15)\r\n    output, error = autograder.run_script(\"lsn16_practice2.py\", [random_value])\r\n    expected_output = solution(random_value)\r\n    \r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT.  Expected:\")\r\n        print(expected_output)\r\n    \r\n    return 0.0\r\n    \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "INCORRECT.  Expected:\n19\n21\n23\n25\n27\n29\n\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 94, "problem_id": "lsn16_practice1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Define a function called add_values. The function should take 3 parameters\n(x, y, z), and return the sum of these values.\n\n\n\n**NOTES:**\n\n  * You do not need to call the function. Simple define it.\n\n\n\n\n", "code": "\ndef add_values(x, y, z):\n    return x + y + z\n", "testcase": "from cs110 import autograder\r\nimport lsn16_practice1\r\n\r\ndef add_values(x, y, z):\r\n    return x + y + z\r\n\r\ndef test_passed():\r\n    \r\n    if 'add_values' in dir(lsn16_practice1) and add_values(1, 2, 3) == lsn16_practice1.add_values(1, 2, 3):\r\n        print(\"PASSED\")\r\n        return 100.0\r\n    elif 'add_values' not in dir(lsn16_practice1):\r\n        print(\"FAILED.  Could not find function 'add_values'\")\r\n    elif result != solution:\r\n        print(\"FAILED.  Function 'add_values' did not return the correct value\")\r\n    else:\r\n        print(\"FAILED.  Something unexpected happened.\")\r\n    \r\n    return 0.0\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 100.0, "text": "PASSED\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 95, "problem_id": "lsn15_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a python program that creates a file called \"output.txt\" and prints a\nmessage of your choosing.\n\n**HINTS:  \n** Look at the quick reference guide!\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math, os\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0.0\r\n    \r\n    # Deletes Result.txt if it already exists\r\n    if (os.path.exists(\"output.txt\")):\r\n        os.remove(\"output.txt\")\r\n    \r\n    output, error_message = autograder.run_script(\"lsn15_skill2.py\", [])\r\n    \r\n    if (os.path.exists(\"output.txt\")):\r\n        print(\"File Found!\")\r\n        score += 50\r\n        file = open(\"output.txt\", \"r\")\r\n        file_contents = file.read()\r\n        if (len(file_contents) > 0):\r\n            print(\"File has Something in it!\")\r\n            score += 50\r\n        else:\r\n            print(\"output.txt appears to be empty.  Did you forget to close the file or write to it?\")\r\n    else:\r\n        print(\"File output.txt does not appear to exist\")\r\n    \r\n    return score\r\n        \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "File output.txt does not appear to exist\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 96, "problem_id": "lsn15_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a file called sample.txt. Write a python\nprogram that opens this file and prints all of its contents as a single\nstring.\n\n\n\n**HINTS:  \n** Look at the quick reference guide!\n\n\n\n\n", "code": "\nfile = open(\"sample.txt\", \"r\")\ncontents = file.read()\nprint(contents)\nfile.close()\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    expected_output = \"Lorem ipsum dolor sit amet, qui at luptatum efficiantur, ne autem offendit expetendis mel. Nec augue assentior ea, ne debet virtute mel. Integre vivendo id usu, ne primis repudiandae ullamcorper cum. Harum prompta appellantur vix ut. Ius voluptatibus definitiones te, eius scribentur referrentur mei at. Suas tota velit in usu, ex has complectitur signiferumque, sale lorem dolore ei ius. Perpetua scriptorem mei ex, ex est illum summo consul.\"\r\n    \r\n    output, error_message = autograder.run_script(\"lsn15_skill1.py\", [])\r\n        \r\n    lines = output.strip().split('\\n')\r\n    expected_lines = expected_output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_lines)\r\n    \r\n    if num_matches == len(lines):\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT\")\r\n        return 0.0\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "INCORRECT\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 97, "problem_id": "lsn15_echo", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite a program that asks the user to type the name of a file (e.g.,\n\"file.txt\"), and a letter. Your program should then open the file, and print\nout all of the lines where the first character starts with the letter\n\nFor example, if the user types the following filename:\n\n    \n    \n    input1.txt\n    a\n    \n\nand the contents of input1.txt are:\n\n    \n    \n    aspiration\n    classified\n    federation\n    \n\nthe output should be:\n\n    \n    \n    aspiration\n    \n\n\n\nNotes:\n\n  * Each line ends with the '\\n' character. Use `split()` to get each line.\n  * Refer to the String Functions slide to see how you can get the first character from a string\n\n\n", "code": "\nfile_name = input(\"Enter the name of the file: \")\nletter = input(\"Enter the letter: \")\n\nwith open(file_name, 'r') as file:\n    lines = file.readlines()\n    \nfor line in lines:\n    if line[0] == letter:\n        print(line.strip())\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(filename, letter):\r\n    result = ''\r\n    \r\n    file = open(filename, \"r\")\r\n    contents = file.read()\r\n    lines = contents.split(\"\\n\")\r\n\r\n    for line in lines:\r\n        if line[0] == letter:\r\n            result += line + \"\\n\"\r\n\r\n    file.close()\r\n\r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_letter = chr(random.randint(97, 122))\r\n    \r\n    output, error_message = autograder.run_script(\"lsn15_echo.py\", [\"file.txt\", random_letter])\r\n    expected_output = solution(\"file.txt\", random_letter)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    expected_lines = expected_output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_lines)\r\n    \r\n    if num_matches == len(lines):\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT\")\r\n        return 0.0\r\n        \r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "failed: [Errno 2] No such file or directory: 'file.txt'", "score": 0, "text": ""}, {"Unnamed: 0": 98, "problem_id": "lsn14_timestable", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n** Write an algorithm that asks the user for a positive number and then\noutputs the multiplication table of that number 1-10.\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2  \n---|---|---  \nInputs | 3 | 9  \nOutputs |\n\n3  \n6  \n9  \n12  \n15  \n18  \n21  \n24  \n27  \n30\n\n| 9  \n18  \n27  \n36  \n45  \n54  \n63  \n72  \n81  \n90  \n  \n\n\n\n", "code": "\nnum = int(input(\"Enter a positive number: \"))\n\nfor i in range(1, 11):\n    print(num * i)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(multiple):\r\n    result = ''\r\n    i = 1\r\n    \r\n    while i <= 10:\r\n        result += str(i * multiple) + \"\\n\"\r\n        i += 1\r\n    \r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_multiple = random.randint(1, 20)\r\n\r\n    output, error_message = autograder.run_script(\"lsn14_timestable.py\", [random_multiple])\r\n    expected_output = solution(random_multiple)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n    \r\n    return 0\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 100.0, "text": "CORRECT\nUnit Test Returned: 100\n"}, {"Unnamed: 0": 99, "problem_id": "lsn14_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You are trying to use a for loop to print all of the powers of 2 from 1024\n(210) to 1 (20). Unfortunately, for some reason, the loop does not work.\nReview the code and make the necessary corrections.\n\n\n", "code": "\nfor i in range(10, -1, -1):\n    print(2 ** i)\n", "testcase": "from cs110 import autograder\r\nimport random, math, os\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0.0\r\n    \r\n    # Deletes Result.txt if it already exists\r\n    if (os.path.exists(\"output.txt\")):\r\n        os.remove(\"output.txt\")\r\n    \r\n    output, error_message = autograder.run_script(\"lsn14_skill2.py\", [])\r\n    \r\n    if (os.path.exists(\"output.txt\")):\r\n        print(\"File Found!\")\r\n        score += 50\r\n        file = open(\"output.txt\", \"r\")\r\n        file_contents = file.read()\r\n        if (len(file_contents) > 0):\r\n            print(\"File has Something in it!\")\r\n            score += 50\r\n        else:\r\n            print(\"output.txt appears to be empty.  Did you forget to close the file or write to it?\")\r\n    else:\r\n        print(\"File output.txt does not appear to exist\")\r\n    \r\n    return score\r\n        \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "File output.txt does not appear to exist\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 100, "problem_id": "lsn14_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a variable that asks the user for the number of\ntimes to loop. Construct a FOR loop that loops this many times printing out a\nmessage each time (the message can be whatever you want)\n\n\n", "code": "\nnum_loops = int(input(\"Enter the number of times to loop: \"))\n\nfor i in range(num_loops):\n    print(\"Loop number\", i+1)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    expected_output = \"Lorem ipsum dolor sit amet, qui at luptatum efficiantur, ne autem offendit expetendis mel. Nec augue assentior ea, ne debet virtute mel. Integre vivendo id usu, ne primis repudiandae ullamcorper cum. Harum prompta appellantur vix ut. Ius voluptatibus definitiones te, eius scribentur referrentur mei at. Suas tota velit in usu, ex has complectitur signiferumque, sale lorem dolore ei ius. Perpetua scriptorem mei ex, ex est illum summo consul.\"\r\n    \r\n    output, error_message = autograder.run_script(\"lsn14_skill1.py\", [])\r\n        \r\n    lines = output.strip().split('\\n')\r\n    expected_lines = expected_output.strip().split('\\n')\r\n    \r\n    num_matches = autograder.compare_strings(lines, expected_lines)\r\n    \r\n    if num_matches == len(lines):\r\n        print(\"CORRECT\")\r\n        return 100.0\r\n    else:\r\n        print(\"INCORRECT\")\r\n        return 0.0\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "INCORRECT\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 101, "problem_id": "lsn14_printchars", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** Write a Python algorithm that asks the users for two ASCII characters\n(e.g., 'a', 'z'), and prints all of the characters between them (inclusive).\n\n  * If the first character has a lower ASCII value than the second (e.g., 'a' - 'z'), print out the letters in ascending order.\n  * Alternatively, if the second letter has a lower ASCII value, print out the letters in descending order.\n\n\n\n**HINTS:**\n\n  * Use the `ord()` function to convert a character into an integer:  \n`ord('a')` returns 141  \n  \n\n  * Use the `chr()` function to convert an integer back into a character:  \n`chr(142)` returns 'b'\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2  \n---|---|---  \nInputs | a  \nc | f  \na  \nOutputs |\n\na  \nb  \nc\n\n| f  \ne  \nd  \nc  \nb  \na\n\n\n", "code": "Here is the solution to the problem:\n\n```python\ndef print_characters(char1, char2):\n    if ord(char1) <= ord(char2):\n        for i in range(ord(char1), ord(char2) + 1):\n            print(chr(i))\n    else:\n        for i in range(ord(char1), ord(char2) - 1, -1):\n            print(chr(i))\n\nchar1 = input(\"Enter the first character: \")\nchar2 = input(\"Enter the second character: \")\n\nprint_characters(char1, char2)\n```\n\nYou can input the characters when prompted and the program will print all the characters between them as per the given conditions.", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(start_char, end_char):\r\n    result = ''\r\n    \r\n    start_char = ord(start_char)\r\n    end_char = ord(end_char)\r\n    \r\n    if start_char < end_char:\r\n        for i in range(start_char, end_char+1, 1):\r\n            result += chr(i) + '\\n'\r\n    else:\r\n        for i in range(start_char, end_char-1, -1):\r\n            result += chr(i) + '\\n'\r\n\r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    print(\"# ------------------------------------------\")\r\n    print(\"# Test 1:  First letter lower than second\")\r\n    print(\"# ------------------------------------------\")\r\n    start_char = chr(random.randint(65, 85))\r\n    end_char   = chr(random.randint(ord(start_char), 90))\r\n\r\n    output, error_message = autograder.run_script(\"lsn14_printchars.py\", [start_char, end_char])\r\n    expected_output = solution(start_char, end_char)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\\n\")\r\n        score += 50\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n        \r\n    \r\n    print(\"# ------------------------------------------\")\r\n    print(\"# Test 2:  First letter higher than second\")\r\n    print(\"# ------------------------------------------\")\r\n    start_char = chr(random.randint(85, 90))\r\n    end_char   = chr(random.randint(65, 84))\r\n\r\n    output, error_message = autograder.run_script(\"lsn14_printchars.py\", [start_char, end_char])\r\n    expected_output = solution(start_char, end_char)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\\n\")\r\n        score += 50\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "# ------------------------------------------\n# Test 1:  First letter lower than second\n# ------------------------------------------\nINCORRECT.  Expected the following:\nD\nE\nF\nG\nH\nI\nJ\nK\n\n# ------------------------------------------\n# Test 2:  First letter higher than second\n# ------------------------------------------\nINCORRECT.  Expected the following:\nY\nX\nW\nV\nU\nT\nS\nR\nQ\nP\nO\nN\nM\nL\nK\nJ\nI\n\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 102, "problem_id": "lsn14_football", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** In, Python, write an algorithm that first asks the user how many football\nplayers they wish to enter statistics for and then gets that many yearly\npassing totals for each player. Output how many of those players that had more\nthan 5000 passing yards in a year. Also your algorithm will output the average\nyardage per year as well as the minimum yardage entered, in that order. You\ncan assume there is at least one player's yardage to input.\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2 | Example 3  \n---|---|---|---  \n**Inputs** | 6  \n4924  \n4442  \n5117  \n2700  \n1990  \n4399 | 5  \n2305  \n4209  \n5100  \n5109  \n3800 | 4  \n4200  \n2709  \n3757  \n2976  \n**Outputs** | 1  \n3928.6666666666665  \n1990 | 2  \n4104.6  \n2305 | 0  \n3410.5  \n2709\n\n\n", "code": "\nnum_players = int(input(\"How many football players do you wish to enter statistics for? \"))\npassing_totals = []\n\nfor player in range(num_players):\n    passing_yards = int(input(\"Enter yearly passing total for player: \"))\n    passing_totals.append(passing_yards)\n\nnum_players_over_5000 = 0\ntotal_yards = 0\nmin_yards = passing_totals[0]\n\nfor yards in passing_totals:\n    total_yards += yards\n    if yards > 5000:\n        num_players_over_5000 += 1\n    if yards < min_yards:\n        min_yards = yards\n\naverage_yards = total_yards / num_players\n\nprint(num_players_over_5000)\nprint(average_yards)\nprint(min_yards)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    num_entries = random.randint(1, 6)\r\n    num_above_5000 = random.randint(0, num_entries)\r\n    list_of_values = [num_entries]\r\n    \r\n    for i in range(num_entries):\r\n        if i < num_above_5000:\r\n            list_of_values.append(random.randint(5001, 8000))\r\n        elif i == num_above_5000:\r\n            list_of_values.append(5000)\r\n        else:\r\n            list_of_values.append(random.randint(1, 5000))\r\n    \r\n    average = sum(list_of_values[1:])/num_entries\r\n    min_value = min(list_of_values[1:])\r\n    \r\n    output, error_message = autograder.run_script(\"lsn14_football.py\", list_of_values)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if len(lines) >= 1 and autograder.equals(lines[0], num_above_5000):\r\n        print(\"Number Above 5000 Looks Good\")\r\n        score += 33\r\n    else:\r\n        print(\"Number Above 5000 is Incorrect (or Missing)\")\r\n    \r\n    if len(lines) >= 2 and autograder.equals(lines[1], average):\r\n        print(\"Average Looks Good\")\r\n        score += 33\r\n    else:\r\n        print(\"Average is Incorrect (or Missing)\")\r\n    \r\n    if len(lines) >= 3 and autograder.equals(lines[2], min_value):\r\n        print(\"Min Value Looks Good\")\r\n        score += 34\r\n    else:\r\n        print(\"Min Value is Incorrect (or Missing)\")\r\n        \r\n    return score\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "failed: must be real number, not str", "score": 0, "text": ""}, {"Unnamed: 0": 103, "problem_id": "lsn14_counting", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n** Write a Python algorithm that gets three numbers from the user, X, Y, and\nZ. Then have the algorithm output all the numbers from X to Y (inclusive),\ncounting by Z. You may assume that Z is non-zero.\n\n\n\n**EXAMPLES:**\n\n  | Example 1 | Example 2 | Example 3  \n---|---|---|---  \n**Inputs** | 1  \n5  \n1 | -5  \n-10  \n-3 | 15  \n15  \n100  \n**Outputs** | 1  \n2  \n3  \n4  \n5 | -5  \n-8 | 15\n\n\n", "code": "\ndef number_range():\n    X = int(input(\"Enter the starting number: \"))\n    Y = int(input(\"Enter the ending number: \"))\n    Z = int(input(\"Enter the counting number: \"))\n\n    if Z > 0:\n        for num in range(X, Y+1, Z):\n            print(num)\n    elif Z < 0:\n        for num in range(X, Y-1, Z):\n            print(num)\n    else:\n        print(\"Z should be non-zero.\")\n\nnumber_range()\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(random_start, random_end, random_increment):\r\n    result = ''\r\n\r\n    for i in range(random_start, random_end+1, random_increment):\r\n        result += str(i) + \"\\n\"\r\n\r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_start = random.randint(0, 10)\r\n    random_end = random.randint(50, 100)\r\n    random_increment = random.randint(2, 9)\r\n\r\n    output, error_message = autograder.run_script(\"lsn14_counting.py\", [random_start, random_end, random_increment])\r\n    expected_output = solution(random_start, random_end, random_increment)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n    \r\n    return 0\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 100.0, "text": "CORRECT\nUnit Test Returned: 100\n"}, {"Unnamed: 0": 104, "problem_id": "lsn14_coordinates", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a Python algorithm that prints all the coordinates in a coordinate\nplane, given two corners. Your program should get four inputs from the user:\n\n  * the starting x-coordinate,\n  * the ending x-coordinate,\n  * the starting y-coordinate, and\n  * the ending y-coordinate.\n\nYour program will then print out all of the coordinates in x y order\n(separating coordinates with a space), listing all of the coordinates in the\nx-axis before incrementing y. You may assume that the ending coordinate is\nnever less than the starting coordinate.  \n\nFor example, your algorithm would print out:  \n1 2  \n2 2  \n3 2  \n4 2  \n5 2  \n6 2  \n1 3  \n2 3  \n3 3  \n4 3  \n5 3  \n6 3  \n. . . and so on\n\n\n\n**HINTS:**\n\n  * Write a loop that first prints all of the x coordinates from start to end\n  * Use a nested loop to print all of the y coordinates from start to end\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**Inputs** | 0  \n1  \n0  \n1 | 0  \n2  \n0  \n1  \n**Outputs** | 0 0  \n1 0  \n0 1  \n1 1 | 0 0  \n1 0  \n2 0  \n0 1  \n1 1  \n2 1  \n  \n\n\n\n", "code": "\nstart_x = int(input())\nend_x = int(input())\nstart_y = int(input())\nend_y = int(input())\n\nfor x in range(start_x, end_x + 1):\n    for y in range(start_y, end_y + 1):\n        print(x, y)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(start_x, end_x, start_y, end_y):\r\n    result = ''\r\n\r\n    for y in range(start_y, end_y+1):\r\n        for x in range(start_x, end_x+1):\r\n            result += str(x) + \" \" + str(y) + \"\\n\"\r\n\r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    start_x = random.randint(-2, -1)\r\n    end_x = random.randint(1, 2)\r\n    start_y = random.randint(-3, -1)\r\n    end_y = random.randint(1, 3)\r\n\r\n    output, error_message = autograder.run_script(\"lsn14_coordinates.py\", [start_x, end_x, start_y, end_y])\r\n    expected_output = solution(start_x, end_x, start_y, end_y)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    num_matches = autograder.compare_strings(lines, expected_output.strip().split('\\n'))\r\n\r\n    return 100 * (num_matches / len(lines))\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 25.0, "text": "Unit Test Returned: 25.0\n"}, {"Unnamed: 0": 105, "problem_id": "lsn14_class2017", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** In Python, write an algorithm that first asks the user how many cadets to\ninput and then gets that many cadet class years from the user. Output how many\nof those cadets were in the class of 2017. You can assume there is at least\none cadet to enter.\n\n**EXAMPLES:**\n\nExample 1 | Example 2 | Example 3  \n---|---|---  \nInputs | 4  \n2014  \n2016  \n2017  \n2017 | 5  \n2015  \n2017  \n2014  \n2014  \n2017 | 4  \n2014  \n2016  \n2014  \n2014  \nOutputs | 2 | 3 | 0\n\n\n", "code": "\nnum_of_cadets = int(input(\"How many cadets? \"))\ncadet_years = []\nfor i in range(num_of_cadets):\n    year = int(input(\"Enter cadet class year: \"))\n    cadet_years.append(year)\n\ncount = 0\nfor year in cadet_years:\n    if year == 2017:\n        count += 1\n\nprint(count)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0\r\n    \r\n    num_entries = random.randint(1, 6)\r\n    num_in_2017 = random.randint(0, num_entries)\r\n    list_of_values = [num_entries]\r\n    \r\n    for i in range(num_entries):\r\n        if i < num_in_2017:\r\n            list_of_values.append(2017)\r\n        else:\r\n            list_of_values.append(random.randint(2018, 2024))\r\n        \r\n    output, error_message = autograder.run_script(\"lsn14_class2017.py\", list_of_values)\r\n    \r\n    lines = output.strip().split('\\n')\r\n\r\n    if len(lines) >= 1 and autograder.equals(lines[0], num_in_2017):\r\n        print(\"CORRECT\")\r\n        score += 100\r\n    else:\r\n        print(\"Expected\", num_in_2017)\r\n        \r\n    return score\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "failed: must be real number, not str", "score": 0, "text": ""}, {"Unnamed: 0": 106, "problem_id": "lsn13_waittimes", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write an algorithm that lets the user input the wait times for various\nrides at an amusement park (in minutes) until he/she types the value -999.\nOutput the shortest waiting time, followed by the number of waiting times that\nare over 30 minutes.\n\n**EXAMPLE:**\n\nExample 1 | Example 2 | Example 3  \n---|---|---  \nInputs |\n\n90  \n30  \n31  \n-999\n\n|\n\n35  \n15  \n90  \n120  \n15  \n-999\n\n|\n\n15  \n15  \n10  \n5  \n-999  \n  \nOutputs | 30  \n2 | 15  \n3 | 5  \n0\n\n\n", "code": "\ndef amusement_park_wait_times():\n    times = []\n    wait_time = int(input())\n    while wait_time != -999:\n        times.append(wait_time)\n        wait_time = int(input())\n    \n    shortest_time = min(times)\n    over_30_minutes = sum(1 for time in times if time > 30)\n    \n    print(shortest_time)\n    print(over_30_minutes)\n\namusement_park_wait_times()\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0.0\r\n    \r\n    possible_tests = [[30, 45, 15, 5, 5, -999], [15, 30, 31, 29, 120, 90, -999]]\r\n    possible_output = [[5, 1], [15, 3]]\r\n    \r\n    # Generates a Random Test\r\n    random_index = random.randint(0, len(possible_tests)-1)\r\n    random_test = possible_tests[random_index]\r\n    expected_output = possible_output[random_index]\r\n            \r\n    output, error = autograder.run_script(\"lsn13_waittimes.py\", random_test)\r\n    \r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):\r\n        print(\"Min Wait Time is Correct\")\r\n        score += 50\r\n    else:\r\n        print(\"Min Wait Time is Incorrect.  Expected\", expected_output[0])\r\n        \r\n    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):\r\n        print(\"Number of Lines With Over 30 Minute Wait Times is Correct\")\r\n        score += 50\r\n    else:\r\n        print(\"Number of Lines With Over 30 Minute Wait Times is Incorrect.  Expected\", expected_output[1])\r\n    \r\n    return score\r\n\r\n\r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "failed: must be real number, not str", "score": 0, "text": ""}, {"Unnamed: 0": 107, "problem_id": "lsn13_squadrons", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write an algorithm that asks the user for the number of squadrons to input,\nand then gets each squadron's number. Output the number  \nof squadrons from 1st, 2nd, 3rd, and 4th groups (one per line)\n\n**EXAMPLE:**\n\nExample 1 | Example 2 | Example 3  \n---|---|---  \nInputs |\n\n3  \n3  \n19  \n24\n\n|\n\n4  \n19  \n25  \n37  \n40\n\n|\n\n2  \n1  \n34  \n  \nOutputs | 1  \n1  \n1  \n0 | 0  \n1  \n1  \n2 | 1  \n0  \n0  \n1\n\n\n", "code": "\nsquadrons = int(input(\"Enter the number of squadrons: \"))\n\nfirst_group = 0\nsecond_group = 0\nthird_group = 0\nfourth_group = 0\n\nfor i in range(squadrons):\n    number = int(input(\"Enter squadron number: \"))\n    \n    if number <= 10:\n        first_group += 1\n    elif number <= 20:\n        second_group += 1\n    elif number <= 30:\n        third_group += 1\n    else:\n        fourth_group += 1\n\nprint(first_group)\nprint(second_group)\nprint(third_group)\nprint(fourth_group)\n```\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0.0\r\n    \r\n    possible_tests = [[5, 10, 20, 30, 40, 19], [8, 3, 1, 23, 37, 40, 7, 6, 25]]\r\n    possible_output = [[1, 2, 1, 1], [4, 0, 2, 2]]\r\n    \r\n    # Generates a Random Test\r\n    random_index = random.randint(0, len(possible_tests)-1)\r\n    random_test = possible_tests[random_index]\r\n    expected_output = possible_output[random_index]\r\n            \r\n    output, error = autograder.run_script(\"lsn13_squadrons.py\", random_test)\r\n    \r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):\r\n        print(\"Num in Group One is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Num in Group One is Incorrect.  Expected\", expected_output[0])\r\n        \r\n    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):\r\n        print(\"Num in Group Two is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Num in Group Two is Incorrect.  Expected\", expected_output[1])\r\n    \r\n    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):\r\n        print(\"Num in Group Three is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Num in Group Three is Incorrect.  Expected\", expected_output[2])\r\n    \r\n    if len(lines) > 3 and autograder.equals(lines[3], expected_output[3]):\r\n        print(\"Num in Group Four is Correct\")\r\n        score += 25\r\n    else:\r\n        print(\"Num in Group Four is Incorrect.  Expected\", expected_output[3])\r\n    \r\n    return score\r\n\r\n\r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "Num in Group One is Incorrect.  Expected 1\nNum in Group Two is Incorrect.  Expected 2\nNum in Group Three is Incorrect.  Expected 1\nNum in Group Four is Incorrect.  Expected 1\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 108, "problem_id": "lsn13_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a WHILE loop that prints values from 0 to 10.\nModify the code so that it counts from 10 to 0.\n\n\n", "code": "\n# Modified code to count from 10 to 0\nx = 10\nwhile x >= 0:\n    print(x)\n    x -= 1\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution():\r\n    result = ''\r\n    i = 10\r\n    \r\n    while i >= 0:\r\n        result += str(2 ** i) + \"\\n\"\r\n        i -= 1\r\n    \r\n    return result\r\n\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    output, error_message = autograder.run_script(\"lsn13_skill2.py\", [])\r\n    expected_output = solution()\r\n    \r\n    lines = output.strip().split('\\n')\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n    \r\n    return 0\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "INCORRECT.  Expected the following:\n1024\n512\n256\n128\n64\n32\n16\n8\n4\n2\n1\n\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 109, "problem_id": "lsn13_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You are trying to use a for loop to print all of the powers of 2 from 1024\n(210) to 1 (20). Unfortunately, for some reason, the loop does not work.\nReview the code and make the necessary corrections.\n\n\n", "code": "\nfor i in range(10, -1, -1):\n    power = i - 10\n    result = 2 ** power\n    print(result)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_multiple = random.randint(1, 10)\r\n\r\n    output, error_message = autograder.run_script(\"lsn13_skill1.py\", [random_multiple])\r\n    \r\n    lines = output.strip().split('\\n')\r\n\r\n    if len(lines) == random_multiple:\r\n        print(\"CORRECT\")\r\n        return 100\r\n    else:\r\n        print(\"INCORRECT.  Make sure your loop is repeating num_times_to_loop times\")\r\n    \r\n    return 0\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "INCORRECT.  Make sure your loop is repeating num_times_to_loop times\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 110, "problem_id": "lsn13_dvc", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** The CS110Z course director, unfortunately, was tricked into purchasing a\nDisney Vacation Club timeshare. The good news about DVC is that it lets you\nreserve a room at any Disney Resort for one week! The downside, however, is\nthat members have to pay an annual \"maintenance fee\" so that the mouse can\nkeep the property looking good (EVEN when Disney World was closed due to\nCOVID-19 . . . yay).\n\nThis year, the maintenance was $623.00. If that isn't bad enough, your course\ndirector discovered that maintenance fees aren't fixed! On the contrary, it\naccues each year at a rate of approximately 1.5%.\n\nWrite a Python function called `get_years_until` that takes a  **target\nvalue**  as a parameter, and returns the number of years (assuming a fixed\ninterest rate) before the maintenance fee exceeds this value.\n\n**Example 1**  \n`get_years_until(624)` should return 1. This is because:\n\n  * The maintenance fee will increase by $9.35 (i.e., 1.5% of 623) in a year\n  * The new maintenance fee will be $623.00 + $9.35 = $632.35, which is obviously more than $624.00\n\n**  \nExample 2**  \n`get_years_until(1000)` should return 32. This is because:\n\n  * 623 * 1.015 * 1.015 * 1.015 . . . (32 times total) = $1003.23, which is obviously more than $1000.00\n\n  \n**Don't Know Where to Start?!?**  \nUse a While loop to keep calculating the new maintenance fee until the value\nis . . . (we'll let you figure out the rest).\n\n\n", "code": "", "testcase": "from lsn13_dvc import get_years_until\r\nfrom cs110 import autograder\r\nimport random, math\r\n\r\nNUM_SUBTESTS = 5\r\n\r\ndef soln(target_value):\r\n    maintenance_fee = 623.00\r\n    interest_rate = 0.015\r\n    count = 0\r\n\r\n    while maintenance_fee < target_value:\r\n        count += 1\r\n        maintenance_fee = maintenance_fee * (1 + interest_rate)\r\n    \r\n    return count\r\n\r\ndef test_passed():\r\n    passed = 0\r\n    for i in range(NUM_SUBTESTS):\r\n        print('Running test %d of %d:' % (i+1 , NUM_SUBTESTS), end='')\r\n        target_amount = random.randint(650, 1100)\r\n        if autograder.equals(get_years_until(target_amount), soln(target_amount)):\r\n            print(\"  It will take \" + str(get_years_until(target_amount)) + \" years until the maintenance fee exceeds $\" + str(target_amount))\r\n            passed += 1\r\n        else:\r\n            print('  get_years_until(%d) incorrectly returned %d instead of %d\\n' % (target_amount, get_years_until(target_amount), soln(target_amount)))\r\n    \r\n    return round((100 / NUM_SUBTESTS), 1) * passed\r\n\r\n\r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n", "exec_result": "failed: cannot import name 'get_years_until' from 'lsn13_dvc' (/tmp/tmpllw7yrcx/./lsn13_dvc.py)", "score": 0, "text": ""}, {"Unnamed: 0": 111, "problem_id": "lsn13_countby10s", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nWrite a program whose input is two integers. Output the first integer and\nsubsequent increments of 10 as long as the value is less than or equal to the\nsecond integer.\n\nCase #1: If the input is:\n\n    \n    \n    -15\n    30\n    \n\nthe output is:\n\n    \n    \n    -15\n    -5\n    5\n    15\n    25\n    \n\nCase 2: If the second integer is less than the first as in:\n\n    \n    \n    20\n    5\n    \n\nthe output is:\n\n    \n    \n    Second integer can't be less than the first.\n    \n\nFor coding simplicity, output a space after every integer, including the last.\n\n\n", "code": "\nfirst = int(input())\nsecond = int(input())\n\nif second < first:\n    print(\"Second integer can't be less than the first.\")\nelse:\n    num = first\n    while num <= second:\n        print(num)\n        num += 10\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(starting_value, value_to_count_to):\r\n    result = ''\r\n    \r\n    if value_to_count_to < starting_value:\r\n        return \"Second integer can't be less than the first.\"\r\n    else:\r\n        i = starting_value\r\n        \r\n        while i <= value_to_count_to:\r\n            result += str(i) + \"\\n\"\r\n            i += 10\r\n        \r\n        return result\r\n\r\ndef run_test(random_starting_number, random_ending_number):\r\n    print(\"#--------------------------------------------\")\r\n    print(\"# Testing\", random_starting_number, \"to\", random_ending_number)\r\n    print(\"#--------------------------------------------\")\r\n    \r\n    output, error_message = autograder.run_script(\"lsn13_countby10s.py\", [random_starting_number, random_ending_number])\r\n    expected_output = solution(random_starting_number, random_ending_number)\r\n    \r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\\n\")\r\n        return True\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n        print()\r\n    \r\n    return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    \r\n    if run_test(10 * random.randint(1, 5), 60 + 10 * random.randint(1, 20)):\r\n        score += 40\r\n        \r\n    if run_test(random.randint(0, 30), random.randint(31, 200)):\r\n        score += 40\r\n    \r\n    if run_test(random.randint(50, 100), random.randint(0, 10)):\r\n        score += 20\r\n    \r\n    \r\n    return score\r\n\r\n        \r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 100.0, "text": "#--------------------------------------------\n# Testing 10 to 230\n#--------------------------------------------\nCORRECT\n\n#--------------------------------------------\n# Testing 16 to 200\n#--------------------------------------------\nCORRECT\n\n#--------------------------------------------\n# Testing 98 to 10\n#--------------------------------------------\nCORRECT\n\nUnit Test Returned: 100\n"}, {"Unnamed: 0": 112, "problem_id": "lsn13_count", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a Python program that gets 2 inputs from the user\n\n  * a number,  **x**\n  * an increment amount,  **y**\n\nYour program will then print out all the numbers from 0 to the user-defined\nvalue (x), counting by the increment amount (y).\n\n**EXAMPLES:**\n\n| Example 1 | Example 2  \n---|---|---  \nInputs | 10  \n2 | 14  \n3  \nOutputs | 0  \n2  \n4  \n6  \n8  \n10 | 0  \n3  \n6  \n9  \n12\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(value_to_count_to, increment):\r\n    result = ''\r\n    i = 0\r\n    \r\n    while i <= value_to_count_to:\r\n        result += str(i) + \"\\n\"\r\n        i += increment\r\n    \r\n    return result\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_ending_number = 10 + 2 * random.randint(1, 10)\r\n    random_increment = 2\r\n\r\n    output, error_message = autograder.run_script(\"lsn13_count.py\", [random_ending_number, random_increment])\r\n    expected_output = solution(random_ending_number, random_increment)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n    \r\n    return 0\r\n\r\n        \r\n# Testbench (to run on outside of zyBooks)\r\nif __name__ == '__main__':   \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "INCORRECT.  Expected the following:\n0\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n22\n24\n26\n28\n\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 113, "problem_id": "lsn13_cargocapacity", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write an algorithm that lets the user input the cargo capacity (in lbs) of\nvarious transport aircraft until the user enters -1. Your program should\noutput the min and max cargo capacity, as well as the number of aircraft that\ncan carry at least 10000 lbs.\n\n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInputs |\n\n4500  \n11000  \n9000  \n-1\n\n|\n\n9999  \n15000  \n3500  \n17500  \n-1\n\n| 10000  \n-1  \nOutputs | 4500  \n11000  \n1 | 3500  \n17500  \n2 | 10000  \n10000  \n1\n\n\n", "code": "\n# Initialize variables\nmin_capacity = float('inf')\nmax_capacity = float('-inf')\ncount = 0\n\n# Get input from user\ncapacity = float(input(\"Enter the cargo capacity (in lbs): \"))\n\n# Process input until user enters -1\nwhile capacity != -1:\n    # Update min and max capacity\n    min_capacity = min(min_capacity, capacity)\n    max_capacity = max(max_capacity, capacity)\n    \n    # Check if capacity is at least 10000 lbs\n    if capacity >= 10000:\n        count += 1\n    \n    # Get next input from user\n    capacity = float(input(\"Enter the cargo capacity (in lbs): \"))\n\n# Print outputs\nprint(\"Min capacity:\", min_capacity)\nprint(\"Max capacity:\", max_capacity)\nprint(\"Number of aircraft that can carry at least 10000 lbs:\", count)\n```\n", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    score = 0.0\r\n    \r\n    possible_tests = [[8000, 12000, 25000, 10000, 7500, -1], [5000, 9000, 22000, 10000, 8700, -1], [9999, 5000, 3000, -1]]\r\n    possible_output = [[7500, 25000, 3], [5000, 22000, 2], [3000, 9999, 0]]\r\n    \r\n    # Generates a Random Test\r\n    random_index = random.randint(0, len(possible_tests)-1)\r\n    random_test = possible_tests[random_index]\r\n    expected_output = possible_output[random_index]\r\n            \r\n    output, error = autograder.run_script(\"lsn13_cargocapacity.py\", random_test)\r\n    \r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):\r\n        print(\"Min Value is Correct\")\r\n        score += 30\r\n    else:\r\n        print(\"Min Value is Incorrect.  Expected\", expected_output[0])\r\n    \r\n    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):\r\n        print(\"Max Value is Correct\")\r\n        score += 30\r\n    else:\r\n        print(\"Max Value is Incorrect.  Expected\", expected_output[1])\r\n        \r\n    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):\r\n        print(\"Number of Aircraft with At Least 10000 lbs is Correct\")\r\n        score += 40\r\n    else:\r\n        print(\"Number of Aircraft with At Least 10000 lbs is Incorrect.  Expected\", expected_output[2])\r\n    \r\n    return score\r\n\r\n\r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "Min Value is Incorrect.  Expected 5000\nMax Value is Incorrect.  Expected 22000\nNumber of Aircraft with At Least 10000 lbs is Incorrect.  Expected 2\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 114, "problem_id": "lsn13_averagerun", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** In, Python, write an algorithm that first asks the user how many PFT run\ntimes to input and then gets that many values from the user. Output the\naverage of all the run times. You can assume there is at least one run time to\ninput.\n\n**EXAMPLE:**\n\n| Example 1 | Example 2 | Example 3  \n---|---|---|---  \nInputs | 6  \n98  \n75  \n88  \n82  \n94  \n100 | 5  \n99  \n83  \n79  \n86  \n87 | 4  \n88  \n82  \n80  \n90  \nOutputs | 89.5 | 86.8 | 85\n\n\n", "code": "", "testcase": "from cs110 import autograder\r\nimport random\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    NUM_TESTS = 5\r\n    num_tests_passed = 0\r\n\r\n    for i in range(NUM_TESTS):\r\n        print(\"Running Test \" + str(i) + \":\")\r\n        \r\n        num_inputs = random.randint(2, 11)\r\n        inputs = [num_inputs]\r\n        sum = 0\r\n        \r\n        for j in range(num_inputs):\r\n            value = random.randint(70, 130)\r\n            sum += value\r\n            inputs.append(value)\r\n               \r\n        avg = sum / (len(inputs) - 1)   \r\n               \r\n        # Runs the Script\r\n        output, error_message = autograder.run_script(\"lsn13_averagerun.py\", inputs)\r\n        \r\n        # Extracts the Output\r\n        lines = output.split(\"\\n\")\r\n        \r\n        if (len(lines) > 0):            \r\n            if (autograder.equals(lines[0], avg)):\r\n                print(\"CORRECT\\n\")\r\n                num_tests_passed += 1\r\n            else:\r\n                print(\"INCORRECT.  Expected: \" + str(avg) + \"\\n\")\r\n\r\n    # Result\r\n    return (100 / NUM_TESTS) * num_tests_passed\r\n            \r\n\r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "Running Test 0:\nINCORRECT.  Expected: 105.57142857142857\n\nRunning Test 1:\nINCORRECT.  Expected: 92.66666666666667\n\nRunning Test 2:\nINCORRECT.  Expected: 97.6\n\nRunning Test 3:\nINCORRECT.  Expected: 110.6\n\nRunning Test 4:\nINCORRECT.  Expected: 96.0\n\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 115, "problem_id": "lsn12_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a function called `fahrenheit_to_kelvin()`. Your function should take\na temperature (in Fahrenheit) as a parameter, and RETURN (NOT PRINT) the\nequivalent temperature in Kelvin.\n\n**NOTE:  \n** The formula for converting between Fahrenheit and Kelvin is\n\n**K = ((F - 32) / 1.8) + 273.15**\n\n\n", "code": "\ndef fahrenheit_to_kelvin(temp_f):\n    temp_k = ((temp_f - 32) / 1.8) + 273.15\n    return temp_k\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(value_to_count_to, increment):\r\n    result = ''\r\n    i = 10\r\n    \r\n    while i >= value_to_count_to:\r\n        result += str(i) + \"\\n\"\r\n        i += increment\r\n    \r\n    return result\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_ending_number = 0\r\n    random_increment = -1\r\n\r\n    output, error_message = autograder.run_script(\"lsn12_skill2.py\", [])\r\n    expected_output = solution(random_ending_number, random_increment)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n    \r\n    return 0\r\n\r\n        \r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "INCORRECT.  Expected the following:\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 116, "problem_id": "lsn12_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a function called get_fuel_consumption() that\ntakes a distance in kilometers as a parameter, and calculates the fuel\nconsumed (in gallons) by a 747 aircraft to travel this distance.\n\nCall this function to determine how much fuel is consumed by a 747 when\ntraveling 1500 kilometers. Store the returned result in a variable called\nfuel_consumed\n\nRemember, \"Calling a function\" simply means typing in the name of the function\n(and providing it with any parameters that it needs--in this case, there are\nno parameters since there is nothing in the parenthesis).\n\n\n", "code": "\ndef get_fuel_consumption(distance):\n    fuel_consumed = distance * 0.2\n    return fuel_consumed\n\nfuel_consumed = get_fuel_consumption(1500)\nprint(fuel_consumed)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef solution(value_to_count_to, increment):\r\n    result = ''\r\n    i = 0\r\n    \r\n    while i <= value_to_count_to:\r\n        result += str(i) + \"\\n\"\r\n        i += increment\r\n    \r\n    return result\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    random_ending_number = 10\r\n    random_increment = 2\r\n\r\n    output, error_message = autograder.run_script(\"lsn12_skill1.py\", [])\r\n    expected_output = solution(random_ending_number, random_increment)\r\n    \r\n    lines = output.strip().split('\\n')\r\n    last_line = lines[len(lines)-1]\r\n\r\n    if output.strip() == expected_output.strip():\r\n        print(\"CORRECT\")\r\n        return 100\r\n    else:\r\n        print(\"INCORRECT.  Expected the following:\")\r\n        print(expected_output)\r\n    \r\n    return 0\r\n\r\n        \r\n# Testbench (to be run on windows)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "INCORRECT.  Expected the following:\n0\n2\n4\n6\n8\n10\n\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 117, "problem_id": "lsn12_in_circle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a function that determines if a point is within a circle. You will\nname your function `in_circle()`. It has five parameters:\n\n  1. The coordinates of the point that is to be tested (x, y)\n  2. The center of a circle (cir_x, cir_y)\n  3. The radius of the circle (radius)\n\n The `in_circle()` function will return **True** if the point is on or inside\nthe circle, and **False** otherwise.\n\n**IMPORTANT:  \n** You are encouraged to write code to test your function. However, when you\ntest against the server, only include the code for the function itself (you\ncan comment out your test code).\n\n\n", "code": "\nimport math\n\ndef in_circle(x, y, cir_x, cir_y, radius):\n    distance = math.sqrt((x - cir_x)**2 + (y - cir_y)**2)\n    if distance <= radius:\n        return True\n    else:\n        return False\n\n# Testing the function\nprint(in_circle(0, 0, 0, 0, 5))    # True\nprint(in_circle(0, 10, 0, 0, 5))   # True\nprint(in_circle(6, 0, 0, 0, 5))    # False\nprint(in_circle(10, 10, 0, 0, 5))  # False\n", "testcase": "import lsn12_in_circle\nfrom cs110 import autograder\nimport random, math\n\nNUM_SUBTESTS = 5\n   \ndef soln(x, y, cir_x, cir_y, radius):\n    distance = math.sqrt((cir_x - x)**2 + (cir_y - y)**2)\n    return distance <= radius\n\ndef test_passed():\n    \n    passed = 0\n    for i in range(NUM_SUBTESTS):\n        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')\n        if i == 0:\n            x = 6.04\n            y = 2.43\n            cir_x = 43.4\n            cir_y = 52.2\n            radius = 74.1\n        else:\n            x = random.random() * 10.0\n            y = random.random() * 10.0\n            cir_x = random.random() * 100.0\n            cir_y = random.random() * 100.0\n            radius = random.random() * 100.0\n        #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))\n        if lsn12_in_circle.in_circle(x, y, cir_x, cir_y, radius) == soln(x, y, cir_x, cir_y, radius):\n            print(\"CORRECT!\")\n            passed += 1\n        else:\n            print('INCORRECT:  in_circle(%f, %f, %f, %f, %f) incorrectly returned %s' % (x, y, cir_x, cir_y, radius, lsn12_in_circle.in_circle(x, y, cir_x, cir_y, radius)))\n    \n    return (100 / NUM_SUBTESTS) * passed\n\n\n# Runs your code in an IDE (for testing purposes)\nif __name__ == '__main__':    \n    result = test_passed()\n    print(\"Unit Test Returned:\", result)\n\n\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 100.0, "text": "True\nFalse\nFalse\nFalse\nRunning sub test 1 of 5: CORRECT!\nRunning sub test 2 of 5: CORRECT!\nRunning sub test 3 of 5: CORRECT!\nRunning sub test 4 of 5: CORRECT!\nRunning sub test 5 of 5: CORRECT!\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 118, "problem_id": "lsn12_distance", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a function that computes the distance between two points. You will\nname your function `dist_points`. It has four parameters, the cordinates of\nthe two points as `x1, y1, x2, y2`. The `dist_points()` function will return\nthe distance between the two points as a floating point number.\n\n**IMPORTANT:  \n** You are encouraged to write code to test your function. However, when you\ntest against the server, only include the code for the function itself (you\ncan comment out your test code).\n\n\n", "code": "\nimport math\n\ndef dist_points(x1, y1, x2, y2):\n    distance = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n    return distance\n", "testcase": "from lsn12_distance import dist_points\r\nfrom cs110 import autograder\r\nimport random, math\r\n\r\nNUM_SUBTESTS = 5\r\n\r\ndef soln(x1, y1, x2, y2):\r\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\r\n\r\ndef test_passed():\r\n    \r\n    passed = 0\r\n    \r\n    print(\"Feedback:\")\r\n    \r\n    for i in range(NUM_SUBTESTS):\r\n        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')\r\n        x1 = round(random.uniform(-10, 10), 1)\r\n        y1 = round(random.uniform(-10, 10), 1)\r\n        x2 = round(random.uniform(-10, 10), 1)\r\n        y2 = round(random.uniform(-10, 10), 1)\r\n        if autograder.equals(dist_points(x1, y1, x2, y2), soln(x1, y1, x2, y2)):\r\n            print(\"PASSED!\")\r\n            passed += 1\r\n        else:\r\n            print('FAILED: dist_point(%1.1f, %1.1f, %1.1f, %1.1f) incorrectly returned' % (x1, y1, x2, y2), dist_points(x1, y1, x2, y2))\r\n    \r\n    return round(100 / NUM_SUBTESTS, 1) * passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 100.0, "text": "Feedback:\nRunning sub test 1 of 5: PASSED!\nRunning sub test 2 of 5: PASSED!\nRunning sub test 3 of 5: PASSED!\nRunning sub test 4 of 5: PASSED!\nRunning sub test 5 of 5: PASSED!\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 119, "problem_id": "lsn12_circle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a function that computes the area of a circle. You will name your\nfunction `area_circle`. It has one parameter, the radius of the circle,\n`radius`. The `area_circle()` function will return the area of the circle.\n\n**IMPORTANT:  \n** You are encouraged to write code to test your function. However, when you\ntest against the server, only include the code for the function itself (you\ncan comment out your test code).\n\n\n", "code": "\ndef area_circle(radius):\n    pi = 3.141592653589793\n    area = pi * (radius ** 2)\n    return area\n", "testcase": "import lsn12_circle\r\nfrom cs110 import autograder\r\nimport random, math\r\n\r\nNUM_SUBTESTS = 5\r\n\r\n# Helper method to see if a numeric value is within a specified delta\r\ndef soln(radius):\r\n    return math.pi * radius * radius\r\n\r\ndef test_passed():\r\n    \r\n    passed = 0\r\n    \r\n    print(\"Feedback:\")\r\n    \r\n    for i in range(NUM_SUBTESTS):\r\n        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')\r\n        radius = random.random() * 100.0\r\n        if autograder.equals(lsn12_circle.area_circle(radius), soln(radius)):\r\n            print(\"CORRECT!\")\r\n            passed += 1\r\n        else:\r\n            print('area_circle(%d) incorrectly returned' % (radius), lsn12_circle.area_circle(radius))\r\n        \r\n    return round(100 / NUM_SUBTESTS, 1) * passed\r\n\r\n\r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n", "exec_result": "completed", "score": 100.0, "text": "Feedback:\nRunning sub test 1 of 5: CORRECT!\nRunning sub test 2 of 5: CORRECT!\nRunning sub test 3 of 5: CORRECT!\nRunning sub test 4 of 5: CORRECT!\nRunning sub test 5 of 5: CORRECT!\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 120, "problem_id": "lsn12_asteroids", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n**\n\n\"Asteroids\" was an arcade game created in 1979 by Atari, Inc. In the game, the\nplayer is given control of a spaceship that has the ability to shoot bullets.\nThe player is then placed in a field of floating rocks, and is tasked with\ndestroying them without running into them.\n\nIn this lab, you will write a \"collision detection\" function that will be used\nby the game to determine if the player's ship has hit a rock. To make this\nsimple, assume that an imaginary circle extends from the center of the\nasteroid and the player's ship (see below image). If the two circles ever\noverlap one another, then a collision has occurred. (NOTE: There are more\naccurate ways to detect a collision. [Click here if you want to learn more\n(Links to an external site.)](https://bell0bytes.eu/basic-collision-\ndetection/)).\n\n![](https://bell0bytes.eu/content/images/2019/03/spaceShipAsteroid.png)\n\nYour function, which you will name `detect_collision()` should have six\nparameters: the (x, y) coordinates of the center of player's ship, the ship's\nradius, the (x, y) coordinates of the center of an asteroid, and the\nasteroid's radius. Your function will return `True` if the player's ship has\nhit the asteroid, and `False` otherwise.\n\n**HINT: _  \n_** _You may want to copy and paste the_  `dist_points`  _function you created\nearlier. It's almost as if we are trying to demonstrate the importance of\nreusable functions . . ._\n\n**IMPORTANT:  \n** You are encouraged to write code to test your function. However, when you\ntest against the server, only include the code for the function itself (you\ncan comment out your test code).\n\n\n", "code": "\nimport math\n\ndef detect_collision(ship_x, ship_y, ship_radius, asteroid_x, asteroid_y, asteroid_radius):\n    distance = math.sqrt((ship_x - asteroid_x)**2 + (ship_y - asteroid_y)**2)\n    \n    if distance <= ship_radius + asteroid_radius:\n        return True\n    else:\n        return False\n```\n\nHere is an example of how you can test your function:\n\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport lsn12_asteroids \r\n\r\ndef soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):\r\n    distance = math.sqrt((ship_x - asteroid_x)**2 + (ship_y - asteroid_y)**2)\r\n    return distance < asteroid_r + ship_r\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    NUM_TESTS = 4\r\n    num_tests_passed = 0\r\n    \r\n    print(\"Feedback:\")\r\n    score = 0\r\n        \r\n    if \"dist_points\" in dir(lsn12_asteroids):\r\n        score += 20\r\n        print(\"dist_points function found\")\r\n    else:\r\n        print(\"dist_points function not being utilized.  Don't reinvent the wheel!\")\r\n        #score += 20\r\n        \r\n    for i in range(NUM_TESTS):\r\n        print('Running test %d of %d: ' % (i+1 , NUM_TESTS), end='')\r\n        \r\n        if i == 0:\r\n            ship_x = 2.3\r\n            ship_y = 0.2\r\n            ship_r = 3\r\n            asteroid_x = -4\r\n            asteroid_y = 3.4\r\n            asteroid_r = 6\r\n        else:\r\n            ship_x = round(random.uniform(-50, 50), 1)\r\n            ship_y = round(random.uniform(-50, 50), 1)\r\n            ship_r = 3\r\n            asteroid_x = round(random.uniform(-50, 50), 1)\r\n            asteroid_y = round(random.uniform(-50, 50), 1)\r\n            asteroid_r = 6\r\n        \r\n        #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))\r\n        if lsn12_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r) == soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):\r\n            print(\"CORRECT\")\r\n            score += 20\r\n        else:\r\n            print('detect_collision(%f, %f, %f, %f, %f, %f) incorrectly returned %s' % (ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r, lsn12_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r)))\r\n    \r\n    return score\r\n            \r\n            \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "failed: invalid syntax (lsn12_asteroids.py, line 11)", "score": 0, "text": ""}, {"Unnamed: 0": 121, "problem_id": "lsn11_triangle", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Write a function that computes the area of a triangle. You will name your\nfunction `area_triangle()`. It has two parameters, the height of the triangle,\n`height`, and the length of the base, `base`. The `area_triangle()` function\nwill print the area of the triangle.\n\n**IMPORTANT:  \n** You are encouraged to write code to test your function. However, when you\nsubmit to the server for grading, only the function will be tested.\n\n\n", "code": "\ndef area_triangle(height, base):\n    area = (height * base) / 2\n    print(area)\n\narea_triangle(4, 6)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport lsn11_triangle\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    base = round(random.uniform(1.0, 10.0), 1)\r\n    height = round(random.uniform(1.0, 10.0), 1)\r\n    output, error_message = autograder.run_script(\"lsn11_triangle.py\", [base, height])\r\n    \r\n    area = (base * height) / 2.0\r\n    score = 0\r\n    \r\n    if \"area_triangle\" in dir(lsn11_triangle):\r\n        print(\"Function Correctly Defined\")\r\n        score += 50\r\n    else:\r\n        print(\"Function does not exist.  Check to make sure the name matches the prompt\")\r\n    \r\n    if autograder.equals(output, area):\r\n        print(\"Function produces correct output\")\r\n        score += 50\r\n    else:\r\n        print(\"Function produces incorrect output. Expected:\", area)\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "failed: must be real number, not str", "score": 0, "text": ""}, {"Unnamed: 0": 122, "problem_id": "lsn11_skill3", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** Define a function called `print_hello()`. Your function should, when\ncalled, simply print out a message of your choosing that would be a greeting\nto someone.\n\n**IMPORTANT NOTE:**  \nFunctions only run when a program calls them. For the purposes of this\nexercise, you do not need to call the function. If you don't, however, nothing\nwill appear on the screen when you run it in Thonny.\n\n\n", "code": "\ndef print_hello():\n    print(\"Hello! How are you today?\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport lsn11_skill3\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    output, error = autograder.run_script(\"lsn11_skill3.py\", [])\r\n    score = 0\r\n    \r\n    if \"print_hello\" in dir(lsn11_skill3):\r\n        print(\"Function found!\")\r\n        score += 50\r\n        \r\n        if len(output) > 0:\r\n            print(\"Output Found!\")\r\n            score += 50\r\n        else:\r\n            print(\"Function does not appear to be printing out anything\")\r\n    else:\r\n        print(\"Function does not appear to be defined.  Check the name and make sure it matches the prompt\")\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 50.0, "text": "Function found!\nFunction does not appear to be printing out anything\nUnit Test Returned: 50\n"}, {"Unnamed: 0": 123, "problem_id": "lsn11_skill2", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a function called `draw_multiple_trees()` that\noutputs a tree using ASCII art. Unlike the previous problem, this function\naccepts a parameter that tells it how many trees to draw.\n\nWrite a program that:\n\n  1. Gets an integer from the user and stores it in a variable. You can name this variable whatever you want.\n  2. Call the function, and passes the variable to it. \n\nRemember that \"passing a value\" to a function simply means putting the number\ninside the parenthesis when you call it.\n\n\n", "code": "\ndef draw_multiple_trees(num_trees):\n    for _ in range(num_trees):\n        print(\"   *\")\n        print(\"  ***\")\n        print(\" *****\")\n        print(\"*******\")\n        print(\"   |\")\n    \nnum_trees = int(input(\"Enter the number of trees to draw: \"))\ndraw_multiple_trees(num_trees)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nfrom lsn11_skill2 import *\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    if 'my_value' in globals():\r\n        print(\"Looking for my_value . . . FOUND!\")\r\n        if my_value == my_list[2]:\r\n            print(\"Looking inside my_value . . . VALUE MATCHES THE 3rd VALUE IN THE LIST\")\r\n            return 100\r\n        elif my_value == my_list[3]:\r\n            print(\"Looking inside my_value . . . VALUE MATCHES THE 4th VALUE INSTEAD OF THE THIRD!\")\r\n            print(\"** HINT:  The index starts at 0 **\")\r\n            return 50\r\n        else:\r\n            print(\"Looking inside my_value . . . VALUE DOES NOT MATCH.  EXPECTED\", my_list[2])\r\n            return 50\r\n    else:\r\n        print(\"Looking for my_value . . . NOT FOUND!\")\r\n        return 0\r\n        \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "failed: EOF when reading a line", "score": 0, "text": ""}, {"Unnamed: 0": 124, "problem_id": "lsn11_skill1", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with a function called `draw_tree()` that prints a\ntree using ASCII art:\n\n    \n    \n     *  \n     ***  \n    *****  \n     |\n\nCall this function\n\n\n", "code": "\ndef draw_tree():\n    spaces = 4\n    stars = 1\n    \n    for i in range(3):\n        print(\" \" * spaces + \"*\" * stars)\n        spaces -= 1\n        stars += 2\n    \n    print(\" \" * 3 + \"|\")\n\ndraw_tree()\n", "testcase": "from cs110 import autograder\r\nimport random\r\nfrom lsn11_skill1 import *\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    if 'my_list' in globals():\r\n        print(\"Looking for my_list . . . FOUND!\")\r\n        if len(my_list) == 3:\r\n            print(\"Looking inside my_list . . . FOUND 3 ITEMS!\")\r\n            return 100\r\n        else:\r\n            print(\"Looking inside my_list . . . FOUND\", len(my_list), \"INSTEAD OF 3 ITEMS\")\r\n            return 50\r\n    else:\r\n        print(\"Looking for my_list . . . NOT FOUND!\")\r\n        return0\r\n        \r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "failed: name 'return0' is not defined", "score": 0, "text": ""}, {"Unnamed: 0": 125, "problem_id": "lsn11_imagesize", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \nPROBLEM STATEMENT:  \nWrite a function that computes the size of an uncompressed image. You will\nname your function calculate_size_of_image(), and it will have three\nparameters: the width of the image, the height of the image, and the bit depth\n(i.e., # of bits per pixel).\n\nThe function should print the size of the image in kilobytes.\n\n\n", "code": "\ndef calculate_size_of_image(width, height, bit_depth):\n    size = width * height * bit_depth / 8 / 1024\n    print(\"Size of the image: {} kilobytes\".format(size))\n", "testcase": "from cs110 import autograder\r\nimport lsn11_imagesize, random, math\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    base = random.randint(1024, 1980)\r\n    height = random.randint(1024, 1980)\r\n    bd = 2**random.randint(3, 7)\r\n    output, error_message = autograder.run_script(\"lsn11_imagesize.py\", [base, height, bd])\r\n    \r\n    filesize = (base * height * bd) / 8 / 1024\r\n    score = 0\r\n    \r\n    if \"calculate_size_of_image\" in dir(lsn11_imagesize):\r\n        print(\"Function Correctly Defined\")\r\n        score += 50\r\n    else:\r\n        print(\"Function does not exist.  Check to make sure the name matches the prompt\")\r\n    \r\n    if autograder.equals(output, filesize):\r\n        print(\"Function produces correct output\")\r\n        score += 50\r\n    else:\r\n        print(\"Function produces incorrect output. Expected:\", filesize)\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "exec_result": "completed", "score": 50.0, "text": "Function Correctly Defined\nFunction produces incorrect output. Expected: 13942.21875\nUnit Test Returned: 50\n"}, {"Unnamed: 0": 126, "problem_id": "lsn11_callme", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n**PROBLEM STATEMENT:  \n** You have been provided with three functions. Open the template file, and\nperform the following tasks: **  \n**\n\n  * **Task 1:** Ask the user to enter a width and height. Do **NOT** assume they are whole numbers. Call area_rectangle and give it the user values\n  * **Task 2:** Ask the user to enter a string. Call print_backwards and give it the user value\n  * **Task 3:** You have been provided with a variable called my_number. Call positive_or_negative and give it the variable\n\n\n", "code": "\ndef area_rectangle(width, height):\n    area = width * height\n    return area\n\ndef print_backwards(string):\n    backwards = string[::-1]\n    return backwards\n\ndef positive_or_negative(number):\n    if number > 0:\n        return \"positive\"\n    elif number < 0:\n        return \"negative\"\n    else:\n        return \"zero\"\n\nif __name__ == \"__main__\":\n    width = float(input(\"Enter width: \"))\n    height = float(input(\"Enter height: \"))\n    my_number = 5\n\n    area = area_rectangle(width, height)\n    print(\"Area of rectangle:\", area)\n\n    string = input(\"Enter a string: \")\n    backward_string = print_backwards(string)\n    print(\"Backwards string:\", backward_string)\n\n    result = positive_or_negative(my_number)\n    print(\"Number is:\", result)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\n# This function takes a string and prints it backwards\r\ndef get_reverse(s):\r\n    result = ''\r\n    for i in range(len(s)-1, -1, -1):\r\n        result += s[i]\r\n    return result\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    base = round(random.uniform(1.0, 100.0), 1)\r\n    height = round(random.uniform(1.0, 100.0), 1)\r\n\r\n    string_list = ['abcde', 'defgh', 'xzy', 'abba']\r\n    test_string = string_list[random.randint(0, len(string_list)-1)]\r\n\r\n    file = open(\"lsn11_callme.py\", \"r\")\r\n    file_contents = file.read()\r\n    num_calls_area_rectangle = file_contents.count(\"area_rectangle\")\r\n    num_calls_print_backwards = file_contents.count(\"print_backwards\")\r\n    num_calls_positive = file_contents.count(\"positive_or_negative\")\r\n\r\n    output, error_message = autograder.run_script(\"lsn11_callme.py\", [base, height, test_string])\r\n    \r\n    area = (base * height)\r\n    score = 0\r\n    \r\n    lines = output.split(\"\\n\")\r\n    \r\n    if autograder.equals(lines[0], area) and num_calls_area_rectangle > 1:\r\n        print(\"area_rectangle called successfully\")\r\n        score += 33\r\n    else:\r\n        print(\"area_rectangle was not called successfully\")\r\n    \r\n    if len(lines) > 1 and lines[1].strip() == get_reverse(test_string) and num_calls_print_backwards > 1:\r\n        print(\"print_backwards called successfully\")\r\n        score += 33\r\n    else:\r\n        print(\"print_backwards was not called successfully\")\r\n    \r\n    if len(lines) > 2 and lines[2].strip() == \"Positive\" and num_calls_positive > 1:\r\n        print(\"positive_or_negative called successfully\")\r\n        score += 34\r\n    else:\r\n        print(\"positive_or_negative was not called successfully\")\r\n    \r\n    return score\r\n\r\n        \r\n# Runs your code in an IDE (for testing purposes)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "area_rectangle was not called successfully\nprint_backwards was not called successfully\npositive_or_negative was not called successfully\nUnit Test Returned: 0\n"}, {"Unnamed: 0": 127, "problem_id": "lsn1_helloworld", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n  1. Download the template file below and save it somewhere you will remember.  Do not rename the file!  \n  \n\n  2. Open the file in Thonny.  You should be able to double click on it.  \n  \n\n  3. Press the play button.  It looks like a Green button  \n  \n  \n\n  4. You will see the following prompt in the Console.  Type 'y' (without the quotes) and press ENTER.  \n  \n  \n\n  5. The test program will automatically run and print a result.  If you see the following, you are good to go.  Otherwise, contact your instructor:  \n\n\n", "code": "Sorry, but I'm unable to provide the solution you're looking for.", "testcase": "import sys, subprocess, random\r\nfrom cs110 import autograder\r\n\r\n# ---------------------------------------------------------------------\r\n# Hello World Unit Test\r\n# ---------------------------------------------------------------------\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    # Runs the Script\r\n    output, error_message = autograder.run_script(\"lsn1_helloworld.py\", [])\r\n    \r\n    # Checks to See if the Program Passed the Test\r\n    if output.strip() == \"Hello World\":\r\n        print(\"SUCCESS!\")\r\n        return 100.0\r\n    else:\r\n        print(\"Try Again.  Just have it print the words 'Hello World'!\")\r\n        return 0.0\r\n    \r\n    \r\n# Testbench (to be run in an IDE)\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------\n\n\n# --------------------------------------------------\n# Downloaded from https://www.autograder.net\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "Try Again.  Just have it print the words 'Hello World'!\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 128, "problem_id": "a4_7_fit_u", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a dataset called `afpft_v2.csv` that describes how\nvarious Air Force personnel performed on their most recent fitness test. Do\nNOT ask the user for the file name--just open and read this specific file.\nHere is a typical line from the dataset (each line ends with the newline \"\\n\"\ncharacter):\n\n\n\n`38, 52, 29, 568`\n\n\n\nEach position in the line (separated by a comma) represents a different \"data\nelement,\" or \"column.\" The following table shows how the above line can be\ninterpreted:  \n  \n\n  | Sit Ups  \n(Reps) | Push Ups  \n(Reps) | Waist  \n(inches) | 1.5 Mile Run Time  \n(seconds)  \n---|---|---|---|---  \nValue | 45 | 65 | 32 | 630  \n  \n\n\n**Write a Python program that analyzes this file and prints the # of\n_unsatisfactory_ (less than 75) scores. **\n\n\n\nTo assist you, we have provided you with a module called `fitness_calculator`\nthat contains four functions:\n\n  * calculate_waist_score\n  * calculate_pushup_score\n  * calculate_situp_score\n  * calculate_run_score\n\n\n\nEach function takes a single number as a parameter, and **returns** the score\nfor that category. For example, to get the score for an Airman who did 45\npushups, you could import the module and call it, as follows:\n\n    \n    \n    pushup_score = fitness_calculator.calculate_pushup_score(45)\n\n\n\nTo get a single Airman's total score, simply calculate the score for each\ncategory and add them up.\n\n    \n    \n    score = waist_score + pushup_score + situp_score + run_score\n\n\n\n**EXAMPLES:**\n\nIf, for example, the number of unsatisfactory scores is 10, your program\nshould print:\n\n    \n    \n    **10**\n\n*** Your answer will be different.**\n\n\n", "code": "\nimport fitness_calculator\n\n# Open the file and read its contents\nwith open('afpft_v2.csv', 'r') as file:\n    # Initialize a variable to keep track of the number of unsatisfactory scores\n    unsatisfactory_count = 0\n    \n    # Iterate over each line in the file\n    for line in file:\n        # Split the line by commas to extract the data elements\n        situps, pushups, waist, run_time = map(int, line.strip().split(','))\n        \n        # Calculate the score for each category\n        situp_score = fitness_calculator.calculate_situp_score(situps)\n        pushup_score = fitness_calculator.calculate_pushup_score(pushups)\n        waist_score = fitness_calculator.calculate_waist_score(waist)\n        run_score = fitness_calculator.calculate_run_score(run_time)\n        \n        # Calculate the total score\n        total_score = situp_score + pushup_score + waist_score + run_score\n        \n        # Check if the total score is less than 75\n        if total_score < 75:\n            # Increment the unsatisfactory count\n            unsatisfactory_count += 1\n    \n    # Print the number of unsatisfactory scores\n    print(unsatisfactory_count)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nfilename = \"a4_7_fit_u.py\"\r\nexpected_output = [\"39\"]\r\n\r\n# Function checks for known shortcuts\r\ndef shortcut_detected():\r\n    file = open(filename, \"r\")\r\n    contents = file.read()\r\n    file.close()\r\n\r\n    # Looks for a short\r\n    if \"print('39')\" in contents or 'print(\"39\")' in contents or 'print(39)' in contents:\r\n        print(\"WARNING:  You cannot just print out the answer.\")\r\n        return True\r\n    \r\n    return False\r\n\r\n# Unit Test Function\r\ndef test_passed():    \r\n    output, error = autograder.run_script(filename, [])\r\n    lines = output.strip().split('\\n')\r\n    \r\n    if shortcut_detected() == True:\r\n        print(\"Invalid Code Detected.  Contact your instructor.\")\r\n    elif len(lines) == 1:\r\n        if autograder.equals(lines[0], expected_output[0]):\r\n            print(\"Count of Unsatisfactory scores is Correct\")\r\n            return 100.0\r\n        else:\r\n            print(\"Count of Unsatisfactory scores is Incorrect\")\r\n    else:\r\n        print(\"Missing Output (or too many lines)\")\r\n\r\n    return 0.0\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "completed", "score": 0.0, "text": "Count of Unsatisfactory scores is Incorrect\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 129, "problem_id": "a4_7_fit_e", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nYou have been provided with a dataset called `afpft_v1.csv` that describes how\nvarious Air Force personnel performed on their most recent fitness test. Do\nNOT ask the user for the file name--just open and read this specific file.\nHere is a typical line from the dataset (each line ends with the newline \"\\n\"\ncharacter):\n\n\n\n`38, 52, 29, 568`\n\n\n\nEach position in the line (separated by a comma) represents a different \"data\nelement,\" or \"column.\" The following table shows how the above line can be\ninterpreted:  \n  \n\n  | Waist  \n(inches) | Push Ups  \n(Reps) | Sit Ups  \n(Reps) | 1.5 Mile Run Time  \n(seconds)  \n---|---|---|---|---  \nValue | 38 | 52 | 29 | 568  \n  \n\n\n**Write a Python program that analyzes this file and prints the # of excellent\n(90 or higher) scores.**\n\n\n\nTo assist you, we have provided you with a module called `fitness_calculator`\nthat contains four functions:\n\n  * calculate_waist_score\n  * calculate_pushup_score\n  * calculate_situp_score\n  * calculate_run_score\n\n\n\nEach function takes a single number as a parameter, and **returns** the score\nfor that category. For example, to get the score for an Airman who did 45\npushups, you could import the module and call it, as follows:\n\n    \n    \n    pushup_score = fitness_calculator.calculate_pushup_score(45)\n\n\n\nTo get a single Airman's total score, simply calculate the score for each\ncategory and add them up.\n\n    \n    \n    score = waist_score + pushup_score + situp_score + run_score\n\n\n\n**EXAMPLES:**\n\nIf, for example, the number of excellent scores is 4, your program should\nprint:\n\n    \n    \n    **4  \n    **\n\n*** Your answers will be different.**\n\n\n", "code": "\nimport csv\nimport fitness_calculator\n\nexcellent_count = 0\n\nwith open('afpft_v1.csv', 'r') as file:\n    reader = csv.reader(file)\n    next(reader)  # skip header row\n    \n    for row in reader:\n        waist = int(row[0])\n        pushups = int(row[1])\n        situps = int(row[2])\n        run_time = int(row[3])\n        \n        waist_score = fitness_calculator.calculate_waist_score(waist)\n        pushup_score = fitness_calculator.calculate_pushup_score(pushups)\n        situp_score = fitness_calculator.calculate_situp_score(situps)\n        run_score = fitness_calculator.calculate_run_score(run_time)\n        \n        total_score = waist_score + pushup_score + situp_score + run_score\n        \n        if total_score >= 90:\n            excellent_count += 1\n\nprint(excellent_count)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\nfilename = \"a4_7_fit_e.py\"\r\nexpected_output = [\"9\"]\r\n\r\n# Function checks for known shortcuts\r\ndef shortcut_detected():\r\n    file = open(filename, \"r\")\r\n    contents = file.read()\r\n    file.close()\r\n\r\n    # Looks for a short\r\n    if \"print('9')\" in contents or 'print(\"9\")' in contents or 'print(9)' in contents:\r\n        print(\"WARNING:  You cannot just print out the answer.\")\r\n        return True\r\n    \r\n    return False\r\n\r\n# Unit Test Function\r\ndef test_passed():    \r\n    output, error = autograder.run_script(filename, [])\r\n    lines = output.strip().split('\\n')\r\n    \r\n    if shortcut_detected() == True:\r\n        print(\"Invalid Code Detected.  Contact your instructor.\")\r\n    elif len(lines) == 1:\r\n        if autograder.equals(lines[0], expected_output[0]):\r\n            print(\"# of Excellents is Correct\")\r\n            return 100.0\r\n        else:\r\n            print(\"# of Excellents is Incorrect\")\r\n    else:\r\n        print(\"Missing Output (or too many lines)\")\r\n    \r\n    return 0.0\r\n    \r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "# of Excellents is Incorrect\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 130, "problem_id": "a4_6_scores", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nYou have been asked to write a program to assess student's performance on a\nrecent test. Write a Python program that asks the user to repeatedly type in\nthe name of a cadet, followed by their test score (between 0 and 100) until\nthe user types the word \"DONE\". Your program then analyze the values and\nprint:\n\n  * The highest overall test score (just score, not the name)\n  * The names of all cadets who scored within 10 points of the highest score. \n    * Comparison to the target score should be exclusive.\n    * The names should be output in the same order of input.\n\n\n\n**EXAMPLES:**\n\n  | **Example 1**  \n---|---  \n**Input(s)** | Paul  \n95  \nAndrew  \n86  \nJoel  \n57  \nDONE  \n**Output(s)** | 95  \nPaul  \nAndrew\n\n\n", "code": "\n# Initialize variables\nhighest_score = 0\ntarget_score = 0\nnames_within_10_points = []\n\n# Take user input\nwhile True:\n    name = input(\"Enter cadet's name (or 'DONE' to finish): \")\n    if name == 'DONE':\n        break\n    score = int(input(\"Enter cadet's test score: \"))\n\n    # Update highest score\n    if score > highest_score:\n        highest_score = score\n\n    # Update names within 10 points\n    if highest_score - score <= 10:\n        names_within_10_points.append(name)\n\n# Print results\nprint(highest_score)\nfor name in names_within_10_points:\n    print(name)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nfrom itertools import combinations\r\n\r\nrandom_names = [\"Marvel\", \"Bucky\", \"Mouse\",\r\n                \"Goose\", \"Jimmy\", \"Dice\",\r\n                \"Upshot\", \"Twain\", \"Ballpark\",\r\n                \"Hammer\", \"Pixel\", \"Billy\",\r\n                \"Lance\",\"Bong\",\"Eddie\",\r\n                \"Patton\",\"Tooey\",\"Gus\",\r\n                \"Karl\",\"Hub\",\"Luke\",\r\n                \"Olds\",\"Hap\",\"Zeamer\"]\r\n\r\nnum_names = random.randint(3,6)\r\n\r\n\r\n\r\ndef same_case():\r\n    print(\"Test Case 1\")\r\n    table = []\r\n    input_list = []\r\n    random_score = int(random.uniform(25, 100))\r\n    for name in random.choice(list(combinations(random_names,num_names))):\r\n        input_list.append(name)\r\n        input_list.append(random_score)\r\n        table.append([random_score, name])\r\n    \r\n    input_list.append(\"DONE\")\r\n    \r\n    output, error = autograder.run_script(\"a4_6_scores.py\", input_list)\r\n    \r\n    max_time = max(table)[0] \r\n    expected_output = [str(max_time)]\r\n    \r\n    for row in table:\r\n        if row[0] > max_time-10:\r\n            expected_output.append(row[1])\r\n\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    \r\n    if len(expected_output) != len(output.strip().split(\"\\n\")):\r\n        print(\"Too many or too few outputs\")\r\n        return 0.0\r\n    elif num_matches == len(expected_output):\r\n        print(\"Test Case 1 Correct\\n\")\r\n        return 100.0\r\n    else:\r\n        print(\"One or more lines in your output is incorrect\")\r\n        return 0.0\r\n\r\ndef random_case():\r\n    print(\"Test Case 2\")\r\n    table = []\r\n    input_list = []\r\n    \r\n    for name in random.choice(list(combinations(random_names,num_names))):\r\n        random_score = int(random.uniform(25, 100))\r\n        input_list.append(name)\r\n        input_list.append(random_score)\r\n        table.append([random_score, name])\r\n    \r\n    input_list.append(\"DONE\")\r\n    \r\n    output, error = autograder.run_script(\"a4_6_scores.py\", input_list)\r\n    \r\n    max_time = max(table)[0] \r\n    expected_output = [str(max_time)]\r\n    \r\n    for row in table:\r\n        if row[0] > max_time-10:\r\n            expected_output.append(row[1])\r\n\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    if len(expected_output) != len(output.strip().split(\"\\n\")):\r\n        print(\"Too many or too few outputs\")\r\n        return 0.0\r\n    elif num_matches == len(expected_output):\r\n        print(\"Test Case 2 Correct\\n\")\r\n        return 100.0\r\n    else:\r\n        print(\"One or more lines in your output is incorrect\")\r\n        return 0.0\r\n\r\ndef test_passed():\r\n    return same_case()*.1+random_case()*.9\r\n\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 10.0, "text": "Test Case 1\nTest Case 1 Correct\n\nTest Case 2\nToo many or too few outputs\nUnit Test Returned: 10.0\n"}, {"Unnamed: 0": 131, "problem_id": "a4_6_flighthours", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nYou have been asked to write a program to get flying hours from a squadron of\npilots for the month. Write a Python program that asks the user to repeatedly\ntype in the name of a pilot, followed by their flying hours until the user\ntypes the word \"DONE\". Your program then analyze the values and print:\n\n  * The average number of flying hours (as a whole number)\n  * The names of all pilots who flew less than the average number of flight hours. \n    * Comparison to the average should be exclusive.\n    * Names should be output in the same order as input\n\n\n\n**EXAMPLES:**\n\n  | **Example 1**  \n---|---  \n**Input(s)** | Polo  \n95  \nRenegade  \n78  \nHeadphones  \n70  \nDONE  \n**Output(s)** |\n\n81  \nRenegade  \nHeadphones\n\n\n", "code": "\npilots = []\nhours = []\n\nwhile True:\n    pilot = input(\"Enter pilot's name: \")\n    if pilot == \"DONE\":\n        break\n    hour = int(input(\"Enter number of flying hours: \"))\n    pilots.append(pilot)\n    hours.append(hour)\n\naverage_hours = sum(hours) // len(hours)\n\nprint(average_hours)\n\nfor i in range(len(hours)):\n    if hours[i] < average_hours:\n        print(pilots[i])\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nfrom itertools import combinations\r\n\r\n\r\nrandom_names = [\"Marvel\", \"Bucky\", \"Mouse\",\r\n                \"Goose\", \"Jimmy\", \"Dice\",\r\n                \"Upshot\", \"Twain\", \"Ballpark\",\r\n                \"Hammer\", \"Pixel\", \"Billy\",\r\n                \"Lance\",\"Bong\",\"Eddie\",\r\n                \"Patton\",\"Tooey\",\"Gus\",\r\n                \"Karl\",\"Hub\",\"Luke\",\r\n                \"Olds\",\"Hap\",\"Zeamer\"]\r\nnum_names = random.randint(3,6)\r\n\r\ndef same_case():\r\n    print(\"Test Case 1\")\r\n    table = []\r\n    input_list = []\r\n    random_score = int(random.uniform(60, 100))\r\n    for name in random.choice(list(combinations(random_names,num_names))):\r\n        \r\n        input_list.append(name)\r\n        input_list.append(random_score)\r\n        table.append([random_score, name])\r\n    \r\n    input_list.append(\"DONE\")\r\n    \r\n    output, error = autograder.run_script(\"a4_6_flighthours.py\", input_list)\r\n    \r\n    avg_hours = int(sum([x[0] for x in table])/len(table))\r\n    expected_output = [str(avg_hours)]\r\n    \r\n    for row in table:\r\n        if row[0] < avg_hours:\r\n            expected_output.append(row[1])\r\n\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    \r\n    if len(expected_output) != len(output.strip().split(\"\\n\")):\r\n        print(\"Too many or too few outputs\")\r\n        return 0.0\r\n    elif num_matches == len(expected_output):\r\n        print(\"Test Case 1 Correct\\n\")\r\n        return 100.0\r\n    else:\r\n        print(\"One or more lines in your output is incorrect\")\r\n        return 0.0\r\n\r\ndef random_case():\r\n    print(\"Test Case 2\")\r\n    table = []\r\n    input_list = []\r\n    \r\n    for name in random.choice(list(combinations(random_names,num_names))):\r\n        random_score = int(random.uniform(60, 100))\r\n        input_list.append(name)\r\n        input_list.append(random_score)\r\n        table.append([random_score, name])\r\n    \r\n    input_list.append(\"DONE\")\r\n    \r\n    output, error = autograder.run_script(\"a4_6_flighthours.py\", input_list)\r\n    \r\n    avg_hours = int(sum([x[0] for x in table])/len(table))\r\n    expected_output = [str(avg_hours)]\r\n    \r\n    for row in table:\r\n        if row[0] < avg_hours:\r\n            expected_output.append(row[1])\r\n\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    \r\n    if len(expected_output) != len(output.strip().split(\"\\n\")):\r\n        print(\"Too many or too few outputs\")\r\n        return 0.0\r\n    elif num_matches == len(expected_output):\r\n        print(\"Test Case 2 Correct\\n\")\r\n        return 100.0\r\n    else:\r\n        print(\"One or more lines in your output is incorrect\")\r\n        return 0.0\r\n\r\ndef test_passed():\r\n    return same_case()*.1+random_case()*.9\r\n    \r\n    \r\n        \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 100.0, "text": "Test Case 1\nTest Case 1 Correct\n\nTest Case 2\nTest Case 2 Correct\n\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 132, "problem_id": "a4_6_aft", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nYou have been asked to write a program to assess student's performance on the\nAFT. Write a Python program that asks the user to repeatedly type in the name\nof a cadet, followed by their run time (in whole seconds) until the user types\nthe word \"DONE\". Your program then analyze the values and print:\n\n  * The fastest (lowest) AFT time.\n  * The names of all cadets who were within 30 seconds of the fastest time. \n    * Comparison to the target time should be exclusive.\n    * Names should be output in the same order as input\n\n\n\n**EXAMPLES:**\n\n  | **Example 1**  \n---|---  \n**Input(s)** | Paul  \n545  \nAndrew  \n661  \nJoel  \n575  \nDONE  \n**Output(s)** | 545  \nPaul  \nJoel\n\n\n", "code": "\nfastest_time = float('inf')\nwithin_30_seconds = []\ncadets = []\n\nwhile True:\n    name = input(\"Enter the name of the cadet: \")\n    if name == \"DONE\":\n        break\n    time = int(input(\"Enter the run time of the cadet (in seconds): \"))\n    if time < fastest_time:\n        fastest_time = time\n        within_30_seconds = [name]\n    elif time == fastest_time:\n        within_30_seconds.append(name)\n    cadets.append(name)\n\nprint(fastest_time)\nfor name in cadets:\n    if name in within_30_seconds:\n        print(name)\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nfrom itertools import combinations\r\n\r\nrandom_names = [\"Marvel\", \"Bucky\", \"Mouse\",\r\n                \"Goose\", \"Jimmy\", \"Dice\",\r\n                \"Upshot\", \"Twain\", \"Ballpark\",\r\n                \"Hammer\", \"Pixel\", \"Billy\",\r\n                \"Lance\",\"Bong\",\"Eddie\",\r\n                \"Patton\",\"Tooey\",\"Gus\",\r\n                \"Karl\",\"Hub\",\"Luke\",\r\n                \"Olds\",\"Hap\",\"Zeamer\"]\r\n\r\nnum_names = random.randint(3,6)\r\n\r\ndef same_case():\r\n    print(\"Test Case 1\")\r\n    table = []\r\n    input_list = []\r\n    random_score = int(random.uniform(540.0, 720.0))\r\n    for name in random.choice(list(combinations(random_names,num_names))):\r\n        input_list.append(name)\r\n        input_list.append(random_score)\r\n        table.append([random_score, name])\r\n    \r\n    input_list.append(\"DONE\")\r\n    \r\n    output, error = autograder.run_script(\"a4_6_aft.py\", input_list)\r\n    \r\n    min_time = min(table)[0] \r\n    expected_output = [str(min_time)]\r\n    \r\n    for row in table:\r\n        if row[0] < min_time+30:\r\n            expected_output.append(row[1])\r\n\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    \r\n    if len(expected_output) != len(output.strip().split(\"\\n\")):\r\n        print(\"Too many or too few outputs\")\r\n        return 0.0\r\n    elif num_matches == len(expected_output):\r\n        print(\"Test Case 1 Correct\\n\")\r\n        return 100.0\r\n    else:\r\n        print(\"One or more lines in your output is incorrect\")\r\n        return 0.0\r\n\r\ndef random_case():\r\n    print(\"Test Case 2\")\r\n    table = []\r\n    input_list = []\r\n    \r\n    for name in random.choice(list(combinations(random_names,num_names))):\r\n        random_score = int(random.uniform(540.0, 720.0))\r\n        input_list.append(name)\r\n        input_list.append(random_score)\r\n        table.append([random_score, name])\r\n    \r\n    input_list.append(\"DONE\")\r\n    \r\n    output, error = autograder.run_script(\"a4_6_aft.py\", input_list)\r\n    \r\n    min_time = min(table)[0] \r\n    expected_output = [str(min_time)]\r\n    \r\n    for row in table:\r\n        if row[0] < min_time+30:\r\n            expected_output.append(row[1])\r\n\r\n    num_matches = autograder.compare_strings(output.strip().split('\\n'), expected_output)\r\n    \r\n    if len(expected_output) != len(output.strip().split(\"\\n\")):\r\n        print(\"Too many or too few outputs\")\r\n        return 0.0\r\n    elif num_matches == len(expected_output):\r\n        print(\"Test Case 2 Correct\\n\")\r\n        return 100.0\r\n    else:\r\n        print(\"One or more lines in your output is incorrect\")\r\n        return 0.0\r\n\r\ndef test_passed():\r\n    return same_case()*.1+random_case()*.9\r\n\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 10.0, "text": "Test Case 1\nTest Case 1 Correct\n\nTest Case 2\nToo many or too few outputs\nUnit Test Returned: 10.0\n"}, {"Unnamed: 0": 133, "problem_id": "a4_5_translate", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nWrite a function called get_english_word that **returns** the English\ntranslation for a Spanish word. Your function will take the following two\nparameters:\n\n  1. The spanish word (e.g., \"Hola\").\n  2. A dictionary containing a list of Spanish / English pairs. \n\nHere is an example of what the dictionary might look like:\n\n\n\n**Key** | **Value**  \n---|---  \nHola | Hello  \nAdios | Goodbye  \nAeronave | Aircraft  \n  \n\n\nYour function should **return** the English translation of the Spanish word\ncontained within the dictionary.\n\n\n\n**HINT:**\n\nUsing parameters and return with functions is in the Lessons 11/12 block on\nyour Python Quick Reference guide.\n\n\n", "code": "\ndef get_english_word(spanish_word, dictionary):\n    if spanish_word in dictionary:\n        return dictionary[spanish_word]\n    else:\n        return \"Translation not found\"\n", "testcase": "from cs110 import autograder\r\nimport random, math, ast\r\nfrom a4_5_translate import get_english_word\r\n\r\nbad_key = \"\"\r\n\r\ndef create_dictionary(size):\r\n    global bad_key\r\n    \r\n    values = [(\"Militar\", \"Military\"), (\"cadete\", \"Cadet\"), (\"Universidad\", \"University\"),\r\n              (\"Halcon\", \"Falcon\"), (\"montana\", \"Mountain\"), (\"computadora\", \"computer\"), (\"piton\", \"python\"),\r\n              (\"graduado\", \"graduated\")]\r\n    spanish_dictionary = {}\r\n    \r\n    print(\"Test Dictionary Contains the Following Words:\")\r\n    \r\n    for i in range(size):\r\n        random_value = values[random.randint(0, len(values)-1)]\r\n        values.remove(random_value)\r\n        spanish_dictionary[random_value[0]] = random_value[1]\r\n        print(random_value[0], \"(Translation\", str(random_value[1]) + \")\")\r\n    \r\n    bad_key = values[0][0]\r\n    \r\n    return spanish_dictionary\r\n\r\n\r\ndef test_passed():\r\n    tests = 5\r\n    \r\n    num_passed = 0\r\n    \r\n    spanish_dictionary = create_dictionary(tests)\r\n    \r\n    print()\r\n    \r\n    # Checking All of the Keys in our Dictionary\r\n    for key in spanish_dictionary.keys():\r\n        print(\"Using Function to get Translation for:\", key, \". . . \", end=\"\")\r\n        returned_value = get_english_word(key, spanish_dictionary)\r\n        print(\"Your Function Returned\", returned_value, \". . . \", end=\"\")\r\n        if returned_value == spanish_dictionary[key]:\r\n            print(\"Correct!\")\r\n            num_passed += 1\r\n        else:\r\n            print(\"Incorrect.  Returned\", returned_value, \"instead of\", spanish_dictionary[key])\r\n    \r\n#     print(\"Using Function to get Translation for a Word Not in the Dictionary:\", bad_key, \". . . \", end=\"\")\r\n#     \r\n#     try:\r\n#         returned_value = get_english_word(bad_key, spanish_dictionary)\r\n#         if returned_value == \"Unknown\":\r\n#             print(\"Correctly Handled\")\r\n#             num_passed += 1\r\n#         else:\r\n#             print(\"Incorrect.  Returned\", returned_value, \"instead of 'Unknown'\")\r\n#     except:\r\n#         print(\"Program crashed trying to access a key that does not exist in the dictionary\")\r\n        \r\n    return (100/tests) * num_passed;\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "completed", "score": 100.0, "text": "Test Dictionary Contains the Following Words:\nHalcon (Translation Falcon)\nMilitar (Translation Military)\npiton (Translation python)\ngraduado (Translation graduated)\ncadete (Translation Cadet)\n\nUsing Function to get Translation for: Halcon . . . Your Function Returned Falcon . . . Correct!\nUsing Function to get Translation for: Militar . . . Your Function Returned Military . . . Correct!\nUsing Function to get Translation for: piton . . . Your Function Returned python . . . Correct!\nUsing Function to get Translation for: graduado . . . Your Function Returned graduated . . . Correct!\nUsing Function to get Translation for: cadete . . . Your Function Returned Cadet . . . Correct!\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 134, "problem_id": "a4_5_password", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nWrite a function called get_password that **returns** the password for a\nspecified website. Your function will take the following two parameters in\nthis order:\n\n  1. The website (e.g., \"Amazon\").\n  2. A dictionary containing a list of website/password pairs. \n\nHere is an example of what the dictionary might look like:\n\n\n\n**Key** | **Value**  \n---|---  \nAmazon | password1234  \nFacebook | aardvark  \nTwitter | AirPower!  \n  \n\n\nYour function should return the password of the website contained within the\ndictionary.\n\n\n\n**HINT:**\n\nUsing parameters and **return** with functions is in the Lessons 11/12 block\non your Python Quick Reference guide.\n\n\n", "code": "\ndef get_password(website, password_dict):\n    return password_dict[website]\n", "testcase": "from cs110 import autograder\r\nimport random, math, ast\r\nfrom a4_5_password import get_password\r\n\r\nbad_key = \"\"\r\n\r\ndef create_dictionary(size):\r\n    global bad_key\r\n    \r\n    values = [(\"CarMax\", \"B-1IsBest\"), (\"YouTube\", \"MyCatisthecoolest\"), (\"Gmail\", \"thisIsMyPassword\"),\r\n              (\"Outlook\", \"MSDOSwasBAD!\"), (\"Blackboard\", \"SkoolRulez\"), (\"Canvas\", \"beststudentEvA\"), (\"REI\", \"MountainClimber\"),\r\n              (\"UnitedAirlines\", \"gimmeDemMiles\")]\r\n    dictionary = {}\r\n    \r\n    print(\"Test Dictionary Contains the Following Words:\")\r\n    \r\n    for i in range(size):\r\n        random_value = values[random.randint(0, len(values)-1)]\r\n        values.remove(random_value)\r\n        dictionary[random_value[0]] = random_value[1]\r\n        print(random_value[0], \"(Password\", str(random_value[1]) + \")\")\r\n    \r\n    bad_key = values[0][0]\r\n    \r\n    return dictionary\r\n\r\n\r\ndef test_passed():\r\n    tests = 5\r\n    num_passed = 0\r\n    \r\n    dictionary = create_dictionary(tests)\r\n    \r\n    print()\r\n    \r\n    # Checking All of the Keys in our Dictionary\r\n    for key in dictionary.keys():\r\n        print(\"Using Function to get Password for:\", key, \". . . \", end=\"\")\r\n        returned_value = get_password(key, dictionary)\r\n        print(\"Your Function Returned\", returned_value, \". . . \", end=\"\")\r\n        if returned_value == dictionary[key]:\r\n            print(\"Correct!\")\r\n            num_passed += 1\r\n        else:\r\n            print(\"Incorrect.  Returned\", returned_value, \"instead of\", dictionary[key])\r\n    \r\n#     print(\"Using Function to get Password for a Website Not in the Dictionary:\", bad_key, \". . . \", end=\"\")\r\n#     \r\n#     try:\r\n#         returned_value = get_password(bad_key, dictionary)\r\n#         if returned_value == \"Unknown\":\r\n#             print(\"Correctly Handled\")\r\n#             num_passed += 1\r\n#         else:\r\n#             print(\"Incorrect.  Returned\", returned_value, \"instead of 'Unknown'\")\r\n#     except:\r\n#         print(\"Program crashed trying to access a key that does not exist in the dictionary\")\r\n        \r\n    return (100/tests) * num_passed;\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "completed", "score": 100.0, "text": "Test Dictionary Contains the Following Words:\nCanvas (Password beststudentEvA)\nYouTube (Password MyCatisthecoolest)\nGmail (Password thisIsMyPassword)\nCarMax (Password B-1IsBest)\nBlackboard (Password SkoolRulez)\n\nUsing Function to get Password for: Canvas . . . Your Function Returned beststudentEvA . . . Correct!\nUsing Function to get Password for: YouTube . . . Your Function Returned MyCatisthecoolest . . . Correct!\nUsing Function to get Password for: Gmail . . . Your Function Returned thisIsMyPassword . . . Correct!\nUsing Function to get Password for: CarMax . . . Your Function Returned B-1IsBest . . . Correct!\nUsing Function to get Password for: Blackboard . . . Your Function Returned SkoolRulez . . . Correct!\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 135, "problem_id": "a4_5_areacode", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:**\n\nWrite a function called get_area_code that **returns** the area code for a\nspecific state. Your function will take the following two parameters in this\norder:\n\n  1. The name of the state (e.g., \"California\").\n  2. A dictionary containing a list of State / Area Code Pairs. \n\nHere is an example of what the dictionary might look like:\n\n\n\n**Key** | **Value**  \n---|---  \nCalifornia | 209  \nMichigan | 234  \nColorado | 719  \n  \n\n\nYour function should **return** the area code for the specified state\ncontained within the dictionary.\n\n\n\n**HINT:**\n\nUsing parameters and return with functions is in the Lessons 11/12 block on\nyour Python Quick Reference guide.\n\n\n", "code": "\ndef get_area_code(state, area_codes):\n    return area_codes[state]\n", "testcase": "from cs110 import autograder\r\nimport random, math, ast\r\nfrom a4_5_areacode import get_area_code\r\n\r\nbad_key = \"\"\r\n\r\ndef create_dictionary(size):\r\n    global bad_key\r\n    \r\n    values = [(\"California\", 209), (\"Texas\", 214), (\"Michigan\", 248), (\"Iowa\", 319), (\"Utah\", 358), (\"Colorado\", 719), (\"Alabama\", 334), (\"Alaska\", 907)]\r\n    area_code_dictionary = {}\r\n    \r\n    print(\"Test Dictionary Contains Area Codes for the Following States:\")\r\n    \r\n    for i in range(size):\r\n        random_value = values[random.randint(0, len(values)-1)]\r\n        values.remove(random_value)\r\n        area_code_dictionary[random_value[0]] = random_value[1]\r\n        print(random_value[0], \"(Area Code:\", str(random_value[1]) + \")\")\r\n    \r\n    bad_key = values[0][0]\r\n    \r\n    return area_code_dictionary\r\n\r\n\r\ndef test_passed():\r\n    tests = 5\r\n\r\n    num_passed = 0\r\n    area_code_dictionary = create_dictionary(tests)\r\n    \r\n    print()\r\n    output, error = autograder.run_script(\"a4_5_areacode.py\", [])\r\n    output_lines = output.strip().split('\\n')\r\n\r\n    # Checking All of the Keys in our Dictionary\r\n    for key in area_code_dictionary.keys():\r\n        print(\"Using Function to get Area Code for:\", key, \". . . \", end=\"\")\r\n        returned_value = get_area_code(key, area_code_dictionary)\r\n        print(\"Your Function Returned\", returned_value, \". . . \", end=\"\")\r\n        if returned_value == area_code_dictionary[key]:\r\n            print(\"Correct!\")\r\n            num_passed += 1\r\n        else:\r\n            print(\"Incorrect.  Returned\", returned_value, \"instead of\", area_code_dictionary[key])\r\n    \r\n#     print(\"Using Function to get Area Code for a State Not in the Dictionary:\", bad_key, \". . . \", end=\"\")\r\n#     \r\n#     try:\r\n#         returned_value = get_area_code(bad_key, area_code_dictionary)\r\n#         if returned_value == \"Unknown\":\r\n#             print(\"Correctly Handled\")\r\n#             num_passed += 1\r\n#         else:\r\n#             print(\"Incorrect.  Returned\", returned_value, \"instead of 'Unknown'\")\r\n#     except:\r\n#         print(\"Program crashed trying to access a key that does not exist in the dictionary\")\r\n        \r\n    return (100/tests) * num_passed;\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "completed", "score": 100.0, "text": "Test Dictionary Contains Area Codes for the Following States:\nCalifornia (Area Code: 209)\nColorado (Area Code: 719)\nUtah (Area Code: 358)\nTexas (Area Code: 214)\nMichigan (Area Code: 248)\n\nUsing Function to get Area Code for: California . . . Your Function Returned 209 . . . Correct!\nUsing Function to get Area Code for: Colorado . . . Your Function Returned 719 . . . Correct!\nUsing Function to get Area Code for: Utah . . . Your Function Returned 358 . . . Correct!\nUsing Function to get Area Code for: Texas . . . Your Function Returned 214 . . . Correct!\nUsing Function to get Area Code for: Michigan . . . Your Function Returned 248 . . . Correct!\nUnit Test Returned: 100.0\n"}, {"Unnamed: 0": 136, "problem_id": "a4_3_parks", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a table called `amusement_parks` that contains\ninformation about various amusement parks in the United States. Logically, the\ntable can be represented as follows:\n\n\n\n**Price Per Day** | **Name of Park** | **State**  \n---|---|---  \n$154.00 | Disneyland | California  \n$169.34 | Disney World | Florida  \n$79.99 | Great America | California  \n$73.00 | Cedar Point | Ohio  \n  \n\n\nWrite code that gets 1) the name of the park, 2) the state where the park is\nlocated, and 3) the price of a single day of admission from the user. Your\nprogram should then add a new row to the table containing these values.\n\n\n\nHINT:\n\n  * When you are creating your row, make sure you are adding the columns in the correct order!\n\n\n\n\n", "code": "\nimport sqlite3\n\n# Connect to the database\nconn = sqlite3.connect('amusement_parks.db')\ncursor = conn.cursor()\n\n# Get user input\nname = input(\"Enter the name of the park: \")\nstate = input(\"Enter the state where the park is located: \")\nprice = float(input(\"Enter the price of a single day of admission: \"))\n\n# Add new row to the table\ncursor.execute(\"INSERT INTO amusement_parks ('Price Per Day', 'Name of Park', 'State') VALUES (?, ?, ?)\", (price, name, state))\n\n# Commit the changes and close the connection\nconn.commit()\nconn.close()\n", "testcase": "from cs110 import autograder\r\nimport random, math, ast\r\n\r\ndef script_name():\r\n    return \"a4_3_parks.py\"\r\n\r\n\r\n'''\r\nitem = [a,b,c] (what should be in this entry)\r\nentry = [d,e,f] (what is in this entry)\r\n\r\nFor each value in item, if it is in entry:\r\n   Of the right type in the right place: 100\r\n   Of the wrong type in the right place: 80\r\n   Of the right type but in the wrong place: 80\r\n   Of the wrong type in the wrong place: 64\r\nIf entry and item are not the same length, 20% penalty\r\n\r\nNote that this has issues if there are duplicate values in the correct item.\r\n'''\r\ndef score_value_against_value(v1, v2):\r\n    score = 0\r\n    if v1 == v2:\r\n        return 100\r\n    try:\r\n        if float(v1) == float(v2):\r\n            score = 80\r\n    except:\r\n        pass\r\n    return score\r\n\r\ndef score_list_against_list(correct, scored):\r\n    score = 0\r\n    for i in range(len(correct)):\r\n        col_score = []\r\n        for j in range(len(scored)):\r\n            t_score = score_value_against_value(correct[i], scored[j])\r\n            if i != j:\r\n                t_score *= 0.80\r\n            col_score.append(t_score)\r\n        score += max(col_score)\r\n    score /= len(correct)\r\n\r\n    if len(correct) != len(scored):\r\n        score *= 0.80\r\n    return score\r\n\r\ndef score_list_against_table(item_list, table):\r\n    score_list = []\r\n    for entry in table:\r\n        score = 0\r\n        if item_list == entry:\r\n            score = 100\r\n        else:\r\n            score = score_list_against_list(item_list, entry)\r\n        score_list.append(score)\r\n    return score_list\r\n\r\ndef score_correct_against_scored(correct_table, scored_table, weights):\r\n    # normalize weights\r\n    norm_wt = []\r\n    sum_of_weights = sum(weights)\r\n    for weight in weights:\r\n        norm_wt.append(weight / sum_of_weights)\r\n        \r\n    # score each item separately against table\r\n    cum_score = 0\r\n    for i in range(len(correct_table)):\r\n        # Check if this item is in the table correctly and in the correct position\r\n        if (i < len(scored_table)) and (correct_table[i] == scored_table[i]):\r\n            score = 100\r\n        # Score this item against each item in the table\r\n        else:\r\n            score_list = score_list_against_table(correct_table[i], scored_table)\r\n            if len(score_list) > 0:\r\n                score = 0.50 * max(score_list)\r\n            else:\r\n                score = 0\r\n            if i < len(score_list):\r\n                score = max([score, score_list[i]])\r\n        cum_score += score * norm_wt[i]\r\n    \r\n    # penalty for wrong number of items in table.\r\n    if len(correct_table) != len(scored_table):\r\n        cum_score = max([cum_score - 20, 0])\r\n    return cum_score\r\n    \r\ndef item_in_table(item, table):\r\n    if item in table:\r\n        print(\"Item Found\")\r\n        return 100\r\n    print(item, \"not found in\", table)\r\n    return 50\r\n\r\ndef given_table():\r\n    if script_name() == \"a4_3_aircraft.py\":\r\n        return [[218, \"C-17 Globemaster\", \"Boeing\"],\r\n                [14.6, \"F-16 Falcon\", \"General Dynamics\"],\r\n                [16.9, \"MQ-9 Reaper\", \"General Atomics\"],\r\n                [737, \"B-2 Spirit\", \"Northrop Grumman\"]]\r\n    if script_name() == \"a4_3_new_cars.py\":\r\n        return [[26660, \"Bronco\", \"Ford\"],\r\n                [36340, \"4Runner\", \"Toyota\"],\r\n                [68200, \"Q8\", \"Audi\"],\r\n                [48475, \"Silverado\", \"Cheverolet\"]]\r\n    if script_name() == \"a4_3_parks.py\":\r\n        return [[154.0, \"Disneyland\", \"California\"],\r\n                [169.34, \"Disney World\", \"Florida\"],\r\n                [79.99, \"Six Flags Great America\", \"California\"],\r\n                [73.00, \"Cedar Point\", \"Ohio\"]]\r\n    return []\r\n\r\ndef user_inputs():\r\n    if script_name() == \"a4_3_aircraft.py\":\r\n        return [ ['B-52 Stratofortress', 'Boeing', 14.4], ['T-6 Texan', 'North American Aviation', 4] ]\r\n    if script_name() == \"a4_3_new_cars.py\":\r\n        return [ ['Model 3', 'Tesla', 34999.99], ['Cayenne', 'Porche', 67500] ]\r\n    if script_name() == \"a4_3_parks.py\":\r\n        return [ ['Elitch Gardens', 'Colorado', 69.99], ['Euro Disney', 'France', 189] ]\r\n    return []\r\n\r\ndef get_correct_output(inputs):\r\n    table = given_table()\r\n    weights = []\r\n    for i in range(len(table)):\r\n        weights.append(0.1)\r\n    table.append([inputs[2], inputs[0], inputs[1]])\r\n    for i in range(len(table)-len(weights)):\r\n        weights.append(1)\r\n    return (table, weights)\r\n\r\ndef test_passed():    \r\n    \r\n    # Template-only check\r\n    print(\"-------------------------------------------------\")\r\n    print(\"Test #\" + str(0))\r\n    print(\"-------------------------------------------------\")\r\n    output, error = autograder.run_script(script_name(), [])\r\n    if len(error) == 0:\r\n        print(\"Be sure that you are not running just the template file.\")\r\n        return 0.2\r\n    else:\r\n        print(\"Ignore the errors for this run.\")\r\n        \r\n    # Run Data Sets\r\n    run_data = user_inputs()\r\n    \r\n    # Set the weights for the individual runs\r\n    relative_weights = []\r\n    for i in range(len(run_data)):         \r\n        relative_weights.append(1)\r\n    relative_weights = [1,19] #(override evenly weighted)\r\n    sum_of_relative_weights = sum(relative_weights)\r\n    run_weight = []\r\n    for weight in relative_weights:\r\n        run_weight.append(weight / sum_of_relative_weights)\r\n    \r\n    # Runs the Script for each data set\r\n    cum_score = 0\r\n    for run in range(len(run_data)):\r\n        print(\"-------------------------------------------------\")\r\n        print(\"Test #\" + str(run + 1))\r\n        print(\"-------------------------------------------------\")\r\n\r\n        inputs_for_this_run = run_data[run]\r\n\r\n        input_list = []\r\n        (correct, weights) = get_correct_output(inputs_for_this_run)\r\n        \r\n        output, error = autograder.run_script(script_name(), inputs_for_this_run)\r\n        \r\n        score = 0\r\n        # Deal with the case of errors occuring during run\r\n        if (run == 1): # Cost is a float\r\n            if len(error) > 0:\r\n                print(\"Error when handling a float cost\")\r\n                score = 0\r\n                \r\n        if (run == 2): # Cost is an integer\r\n            if len(error) > 0:\r\n                print(\"Error when handling an integer cost\")\r\n                score = 0\r\n\r\n        # Deal with case of no errors occurring during run\r\n        if len(error) == 0:\r\n            lines = output.strip().split('\\n')\r\n\r\n            if len(lines) >= 1 and len(lines[0]) > 0:                    \r\n                output_table = ast.literal_eval(lines[0])\r\n            \r\n                score = score_correct_against_scored(correct, output_table, weights)\r\n\r\n            else:\r\n                score = 0\r\n                \r\n\r\n        print(\"This test score:\", round(score,1), \"% (weight =\", round(100*run_weight[run],1), \"%)\")\r\n        cum_score += score * run_weight[run]\r\n        print()\r\n        \r\n    return max([round(cum_score, 1), 0.1])\r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.2, "text": "-------------------------------------------------\nTest #0\n-------------------------------------------------\nBe sure that you are not running just the template file.\nUnit Test Returned: 0.2\n"}, {"Unnamed: 0": 137, "problem_id": "a4_3_new_cars", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a table called `new_cars` that contains\ninformation about various automobiles for sale in the United States.\nLogically, the table can be represented as follows:\n\n\n\n**Unit Price  ** | **Model Name** | **Make**  \n---|---|---  \n$26,660 | Bronco | Ford  \n$36,340 | 4Runner | Toyota  \n$68,199.99 | Q8 | Audi  \n$48,475 | Silverado | Chevrolet  \n  \n\n\nWrite code that gets 1) Model Name of the car, 2) Make, and 3) the unit price.\nYour program should then add a new row to the table containing these values.\n\n\n\nHINT:\n\n  * When you are creating your row, make sure you are adding the columns in the correct order!\n\n\n", "code": "\nimport pandas as pd\n\n# Create the original dataframe with existing data\ndata = {'Unit Price': ['$26,660', '$36,340', '$68,199.99', '$48,475'],\n        'Model Name': ['Bronco', '4Runner', 'Q8', 'Silverado'],\n        'Make': ['Ford', 'Toyota', 'Audi', 'Chevrolet']}\ndf = pd.DataFrame(data)\n\n# Get the input from the user\nmodel_name = input(\"Enter the Model Name of the car: \")\nmake = input(\"Enter the Make of the car: \")\nunit_price = input(\"Enter the Unit Price of the car: \")\n\n# Add a new row with the user input values\nnew_row = {'Unit Price': unit_price,\n           'Model Name': model_name,\n           'Make': make}\ndf = df.append(new_row, ignore_index=True)\n\nprint(df)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math, ast\r\n\r\ndef script_name():\r\n    return \"a4_3_new_cars.py\"\r\n\r\n\r\n'''\r\nitem = [a,b,c] (what should be in this entry)\r\nentry = [d,e,f] (what is in this entry)\r\n\r\nFor each value in item, if it is in entry:\r\n   Of the right type in the right place: 100\r\n   Of the wrong type in the right place: 80\r\n   Of the right type but in the wrong place: 80\r\n   Of the wrong type in the wrong place: 64\r\nIf entry and item are not the same length, 20% penalty\r\n\r\nNote that this has issues if there are duplicate values in the correct item.\r\n'''\r\ndef score_value_against_value(v1, v2):\r\n    score = 0\r\n    if v1 == v2:\r\n        return 100\r\n    try:\r\n        if float(v1) == float(v2):\r\n            score = 80\r\n    except:\r\n        pass\r\n    return score\r\n\r\ndef score_list_against_list(correct, scored):\r\n    score = 0\r\n    for i in range(len(correct)):\r\n        col_score = []\r\n        for j in range(len(scored)):\r\n            t_score = score_value_against_value(correct[i], scored[j])\r\n            if i != j:\r\n                t_score *= 0.80\r\n            col_score.append(t_score)\r\n        score += max(col_score)\r\n    score /= len(correct)\r\n\r\n    if len(correct) != len(scored):\r\n        score *= 0.80\r\n    return score\r\n\r\ndef score_list_against_table(item_list, table):\r\n    score_list = []\r\n    for entry in table:\r\n        score = 0\r\n        if item_list == entry:\r\n            score = 100\r\n        else:\r\n            score = score_list_against_list(item_list, entry)\r\n        score_list.append(score)\r\n    return score_list\r\n\r\ndef score_correct_against_scored(correct_table, scored_table, weights):\r\n    # normalize weights\r\n    norm_wt = []\r\n    sum_of_weights = sum(weights)\r\n    for weight in weights:\r\n        norm_wt.append(weight / sum_of_weights)\r\n        \r\n    # score each item separately against table\r\n    cum_score = 0\r\n    for i in range(len(correct_table)):\r\n        # Check if this item is in the table correctly and in the correct position\r\n        if (i < len(scored_table)) and (correct_table[i] == scored_table[i]):\r\n            score = 100\r\n        # Score this item against each item in the table\r\n        else:\r\n            score_list = score_list_against_table(correct_table[i], scored_table)\r\n            if len(score_list) > 0:\r\n                score = 0.50 * max(score_list)\r\n            else:\r\n                score = 0\r\n            if i < len(score_list):\r\n                score = max([score, score_list[i]])\r\n        cum_score += score * norm_wt[i]\r\n    \r\n    # penalty for wrong number of items in table.\r\n    if len(correct_table) != len(scored_table):\r\n        cum_score = max([cum_score - 20, 0])\r\n    return cum_score\r\n    \r\ndef item_in_table(item, table):\r\n    if item in table:\r\n        print(\"Item Found\")\r\n        return 100\r\n    print(item, \"not found in\", table)\r\n    return 50\r\n\r\ndef given_table():\r\n    if script_name() == \"a4_3_aircraft.py\":\r\n        return [[218, \"C-17 Globemaster\", \"Boeing\"],\r\n                [14.6, \"F-16 Falcon\", \"General Dynamics\"],\r\n                [16.9, \"MQ-9 Reaper\", \"General Atomics\"],\r\n                [737, \"B-2 Spirit\", \"Northrop Grumman\"]]\r\n    if script_name() == \"a4_3_new_cars.py\":\r\n        return [[26660, \"Bronco\", \"Ford\"],\r\n                [36340, \"4Runner\", \"Toyota\"],\r\n                [68200, \"Q8\", \"Audi\"],\r\n                [48475, \"Silverado\", \"Cheverolet\"]]\r\n    if script_name() == \"a4_3_parks.py\":\r\n        return [[154.0, \"Disneyland\", \"California\"],\r\n                [169.34, \"Disney World\", \"Florida\"],\r\n                [79.99, \"Six Flags Great America\", \"California\"],\r\n                [73.00, \"Cedar Point\", \"Ohio\"]]\r\n    return []\r\n\r\ndef user_inputs():\r\n    if script_name() == \"a4_3_aircraft.py\":\r\n        return [ ['B-52 Stratofortress', 'Boeing', 14.4], ['T-6 Texan', 'North American Aviation', 4] ]\r\n    if script_name() == \"a4_3_new_cars.py\":\r\n        return [ ['Model 3', 'Tesla', 34999.99], ['Cayenne', 'Porche', 67500] ]\r\n    if script_name() == \"a4_3_parks.py\":\r\n        return [ ['Elitch Gardens', 'Colorado', 69.99], ['Euro Disney', 'France', 189] ]\r\n    return []\r\n\r\ndef get_correct_output(inputs):\r\n    table = given_table()\r\n    weights = []\r\n    for i in range(len(table)):\r\n        weights.append(0.1)\r\n    table.append([inputs[2], inputs[0], inputs[1]])\r\n    for i in range(len(table)-len(weights)):\r\n        weights.append(1)\r\n    return (table, weights)\r\n\r\ndef test_passed():    \r\n    \r\n    # Template-only check\r\n    print(\"-------------------------------------------------\")\r\n    print(\"Test #\" + str(0))\r\n    print(\"-------------------------------------------------\")\r\n    output, error = autograder.run_script(script_name(), [])\r\n    if len(error) == 0:\r\n        print(\"Be sure that you are not running just the template file.\")\r\n        return 0.2\r\n    else:\r\n        print(\"Ignore the errors for this run.\")\r\n        \r\n    # Run Data Sets\r\n    run_data = user_inputs()\r\n    \r\n    # Set the weights for the individual runs\r\n    relative_weights = []\r\n    for i in range(len(run_data)):         \r\n        relative_weights.append(1)\r\n    relative_weights = [1,19] #(override evenly weighted)\r\n    sum_of_relative_weights = sum(relative_weights)\r\n    run_weight = []\r\n    for weight in relative_weights:\r\n        run_weight.append(weight / sum_of_relative_weights)\r\n    \r\n    # Runs the Script for each data set\r\n    cum_score = 0\r\n    for run in range(len(run_data)):\r\n        print(\"-------------------------------------------------\")\r\n        print(\"Test #\" + str(run + 1))\r\n        print(\"-------------------------------------------------\")\r\n\r\n        inputs_for_this_run = run_data[run]\r\n\r\n        input_list = []\r\n        (correct, weights) = get_correct_output(inputs_for_this_run)\r\n        \r\n        output, error = autograder.run_script(script_name(), inputs_for_this_run)\r\n        \r\n        score = 0\r\n        # Deal with the case of errors occuring during run\r\n        if (run == 1): # Cost is a float\r\n            if len(error) > 0:\r\n                print(\"Error when handling a float cost\")\r\n                score = 0\r\n                \r\n        if (run == 2): # Cost is an integer\r\n            if len(error) > 0:\r\n                print(\"Error when handling an integer cost\")\r\n                score = 0\r\n\r\n        # Deal with case of no errors occurring during run\r\n        if len(error) == 0:\r\n            lines = output.strip().split('\\n')\r\n\r\n            if len(lines) >= 1 and len(lines[0]) > 0:                    \r\n                output_table = ast.literal_eval(lines[0])\r\n            \r\n                score = score_correct_against_scored(correct, output_table, weights)\r\n\r\n            else:\r\n                score = 0\r\n                \r\n\r\n        print(\"This test score:\", round(score,1), \"% (weight =\", round(100*run_weight[run],1), \"%)\")\r\n        cum_score += score * run_weight[run]\r\n        print()\r\n        \r\n    return max([round(cum_score, 1), 0.1])\r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.1, "text": "-------------------------------------------------\nTest #0\n-------------------------------------------------\nIgnore the errors for this run.\n-------------------------------------------------\nTest #1\n-------------------------------------------------\nThis test score: 0 % (weight = 5.0 %)\n\n-------------------------------------------------\nTest #2\n-------------------------------------------------\nError when handling a float cost\nThis test score: 0 % (weight = 95.0 %)\n\nUnit Test Returned: 0.1\n"}, {"Unnamed: 0": 138, "problem_id": "a4_3_aircraft", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a table called `usaf_aircraft` that contains\ninformation about various aircraft in the United States Air Force inventory.\nLogically, the table can be represented as follows:\n\n\n\n**Unit Price in Millions** | **Aircraft Name** | **Manufacturer**  \n---|---|---  \n$218 | C-17 Globemaster | Boeing  \n$14.6 | F-16 Falcon | General Dynamics  \n$16.9 | MQ-9 Reaper | General Atomics  \n$737 | B-2 Spirit | Northrop Grumman  \n  \n\n\nWrite code that gets 1) Name of the Aircraft, 2) Manufacturer, and 3) the unit\nprice in millions. Your program should then add a new row to the table\ncontaining these values.\n\n\n\nHINT:\n\n  * When you are creating your row, make sure you are adding the columns in the correct order!\n\n\n", "code": "\n\nimport sqlite3\n\n# Connect to the database\nconn = sqlite3.connect('aircraft.db')\nc = conn.cursor()\n\n# Get user input for aircraft information\nname = input(\"Enter the name of the aircraft: \")\nmanufacturer = input(\"Enter the manufacturer: \")\nprice = float(input(\"Enter the unit price in millions: \"))\n\n# Insert new row into the table\nc.execute(\"INSERT INTO usaf_aircraft (Aircraft_Name, Manufacturer, Unit_Price_in_Millions) VALUES (?, ?, ?)\",\n          (name, manufacturer, price))\n\n# Save changes and close the connection\nconn.commit()\nconn.close()\n", "testcase": "from cs110 import autograder\r\nimport random, math, ast\r\n\r\ndef script_name():\r\n    return \"a4_3_aircraft.py\"\r\n\r\n\r\n'''\r\nitem = [a,b,c] (what should be in this entry)\r\nentry = [d,e,f] (what is in this entry)\r\n\r\nFor each value in item, if it is in entry:\r\n   Of the right type in the right place: 100\r\n   Of the wrong type in the right place: 80\r\n   Of the right type but in the wrong place: 80\r\n   Of the wrong type in the wrong place: 64\r\nIf entry and item are not the same length, 20% penalty\r\n\r\nNote that this has issues if there are duplicate values in the correct item.\r\n'''\r\ndef score_value_against_value(v1, v2):\r\n    score = 0\r\n    if v1 == v2:\r\n        return 100\r\n    try:\r\n        if float(v1) == float(v2):\r\n            score = 80\r\n    except:\r\n        pass\r\n    return score\r\n\r\ndef score_list_against_list(correct, scored):\r\n    score = 0\r\n    for i in range(len(correct)):\r\n        col_score = []\r\n        for j in range(len(scored)):\r\n            t_score = score_value_against_value(correct[i], scored[j])\r\n            if i != j:\r\n                t_score *= 0.80\r\n            col_score.append(t_score)\r\n        score += max(col_score)\r\n    score /= len(correct)\r\n\r\n    if len(correct) != len(scored):\r\n        score *= 0.80\r\n    return score\r\n\r\ndef score_list_against_table(item_list, table):\r\n    score_list = []\r\n    for entry in table:\r\n        score = 0\r\n        if item_list == entry:\r\n            score = 100\r\n        else:\r\n            score = score_list_against_list(item_list, entry)\r\n        score_list.append(score)\r\n    return score_list\r\n\r\ndef score_correct_against_scored(correct_table, scored_table, weights):\r\n    # normalize weights\r\n    norm_wt = []\r\n    sum_of_weights = sum(weights)\r\n    for weight in weights:\r\n        norm_wt.append(weight / sum_of_weights)\r\n        \r\n    # score each item separately against table\r\n    cum_score = 0\r\n    for i in range(len(correct_table)):\r\n        # Check if this item is in the table correctly and in the correct position\r\n        if (i < len(scored_table)) and (correct_table[i] == scored_table[i]):\r\n            score = 100\r\n        # Score this item against each item in the table\r\n        else:\r\n            score_list = score_list_against_table(correct_table[i], scored_table)\r\n            if len(score_list) > 0:\r\n                score = 0.50 * max(score_list)\r\n            else:\r\n                score = 0\r\n            if i < len(score_list):\r\n                score = max([score, score_list[i]])\r\n        cum_score += score * norm_wt[i]\r\n    \r\n    # penalty for wrong number of items in table.\r\n    if len(correct_table) != len(scored_table):\r\n        cum_score = max([cum_score - 20, 0])\r\n    return cum_score\r\n    \r\ndef item_in_table(item, table):\r\n    if item in table:\r\n        print(\"Item Found\")\r\n        return 100\r\n    print(item, \"not found in\", table)\r\n    return 50\r\n\r\ndef given_table():\r\n    if script_name() == \"a4_3_aircraft.py\":\r\n        return [[218, \"C-17 Globemaster\", \"Boeing\"],\r\n                [14.6, \"F-16 Falcon\", \"General Dynamics\"],\r\n                [16.9, \"MQ-9 Reaper\", \"General Atomics\"],\r\n                [737, \"B-2 Spirit\", \"Northrop Grumman\"]]\r\n    if script_name() == \"a4_3_new_cars.py\":\r\n        return [[26660, \"Bronco\", \"Ford\"],\r\n                [36340, \"4Runner\", \"Toyota\"],\r\n                [68200, \"Q8\", \"Audi\"],\r\n                [48475, \"Silverado\", \"Cheverolet\"]]\r\n    if script_name() == \"a4_3_parks.py\":\r\n        return [[154.0, \"Disneyland\", \"California\"],\r\n                [169.34, \"Disney World\", \"Florida\"],\r\n                [79.99, \"Six Flags Great America\", \"California\"],\r\n                [73.00, \"Cedar Point\", \"Ohio\"]]\r\n    return []\r\n\r\ndef user_inputs():\r\n    if script_name() == \"a4_3_aircraft.py\":\r\n        return [ ['B-52 Stratofortress', 'Boeing', 14.4], ['T-6 Texan', 'North American Aviation', 4] ]\r\n    if script_name() == \"a4_3_new_cars.py\":\r\n        return [ ['Model 3', 'Tesla', 34999.99], ['Cayenne', 'Porche', 67500] ]\r\n    if script_name() == \"a4_3_parks.py\":\r\n        return [ ['Elitch Gardens', 'Colorado', 69.99], ['Euro Disney', 'France', 189] ]\r\n    return []\r\n\r\ndef get_correct_output(inputs):\r\n    table = given_table()\r\n    weights = []\r\n    for i in range(len(table)):\r\n        weights.append(0.1)\r\n    table.append([inputs[2], inputs[0], inputs[1]])\r\n    for i in range(len(table)-len(weights)):\r\n        weights.append(1)\r\n    return (table, weights)\r\n\r\ndef test_passed():    \r\n    \r\n    # Template-only check\r\n    print(\"-------------------------------------------------\")\r\n    print(\"Test #\" + str(0))\r\n    print(\"-------------------------------------------------\")\r\n    output, error = autograder.run_script(script_name(), [])\r\n    if len(error) == 0:\r\n        print(\"Be sure that you are not running just the template file.\")\r\n        return 0.2\r\n    else:\r\n        print(\"Ignore the errors for this run.\")\r\n        \r\n    # Run Data Sets\r\n    run_data = user_inputs()\r\n    \r\n    # Set the weights for the individual runs\r\n    relative_weights = []\r\n    for i in range(len(run_data)):         \r\n        relative_weights.append(1)\r\n    relative_weights = [1,19] #(override evenly weighted)\r\n    sum_of_relative_weights = sum(relative_weights)\r\n    run_weight = []\r\n    for weight in relative_weights:\r\n        run_weight.append(weight / sum_of_relative_weights)\r\n    \r\n    # Runs the Script for each data set\r\n    cum_score = 0\r\n    for run in range(len(run_data)):\r\n        print(\"-------------------------------------------------\")\r\n        print(\"Test #\" + str(run + 1))\r\n        print(\"-------------------------------------------------\")\r\n\r\n        inputs_for_this_run = run_data[run]\r\n\r\n        input_list = []\r\n        (correct, weights) = get_correct_output(inputs_for_this_run)\r\n        \r\n        output, error = autograder.run_script(script_name(), inputs_for_this_run)\r\n        \r\n        score = 0\r\n        # Deal with the case of errors occuring during run\r\n        if (run == 1): # Cost is a float\r\n            if len(error) > 0:\r\n                print(\"Error when handling a float cost\")\r\n                score = 0\r\n                \r\n        if (run == 2): # Cost is an integer\r\n            if len(error) > 0:\r\n                print(\"Error when handling an integer cost\")\r\n                score = 0\r\n\r\n        # Deal with case of no errors occurring during run\r\n        if len(error) == 0:\r\n            lines = output.strip().split('\\n')\r\n\r\n            if len(lines) >= 1 and len(lines[0]) > 0:                    \r\n                output_table = ast.literal_eval(lines[0])\r\n            \r\n                score = score_correct_against_scored(correct, output_table, weights)\r\n\r\n            else:\r\n                score = 0\r\n                \r\n\r\n        print(\"This test score:\", round(score,1), \"% (weight =\", round(100*run_weight[run],1), \"%)\")\r\n        cum_score += score * run_weight[run]\r\n        print()\r\n        \r\n    return max([round(cum_score, 1), 0.1])\r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.2, "text": "-------------------------------------------------\nTest #0\n-------------------------------------------------\nBe sure that you are not running just the template file.\nUnit Test Returned: 0.2\n"}, {"Unnamed: 0": 139, "problem_id": "a4_2_sickness", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a template that gets the following values from\nthe user:\n\n  * Body temperature (in Fahrenheit)\n  * Body aches (a string, which will be either \"yes\" or \"no\")\n  * Loss of smell (a string, which will be either \"yes\" or \"no\")\n\n\n\nUsing the following rules as a guide, have your program determine a person's\nrisk of having an infectious disease:\n\n  1. If the person's temperature is above 100.4 degrees, print \"High Risk\"\n  2. If the person is experiencing both body aches and loss of smell, print \"High Risk\"\n  3. For all other situations, print \"Low Risk\"\n\n\n\n**EXAMPLE:  \n**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \nInput |\n\n99.0  \nyes  \nyes  \n  \n\n| 100.4  \nno  \nyes  \nOutput | High Risk | Low Risk  \n  \n\n\n\n", "code": "\ntemperature = float(input(\"Body temperature (in Fahrenheit): \"))\nbody_aches = input(\"Body aches (yes/no): \")\nloss_of_smell = input(\"Loss of smell (yes/no): \")\n\nif temperature > 100.4:\n    print(\"High Risk\")\nelif body_aches == \"yes\" and loss_of_smell == \"yes\":\n    print(\"High Risk\")\nelse:\n    print(\"Low Risk\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(temperature, body_aches, loss_of_smell, expected_output):\r\n    output, error = autograder.run_script(\"a4_2_sickness.py\", [temperature, body_aches, loss_of_smell])\r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) >= 4:\r\n        if lines[3] == expected_output:\r\n            print(\"Correct Output\\n\")\r\n            return True\r\n        else:\r\n            print(\"Incorrect Output.  Expected\", expected_output, '\\n')\r\n            return False\r\n    else:\r\n        print(\"No Output Found\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    num_tests_passed = 0\r\n    \r\n    testcase_library = [(round(random.uniform(98.0, 99.9), 1), \"yes\", \"no\", \"Low Risk\"),\r\n                        (round(random.uniform(100.5, 102.0), 1), \"yes\", \"yes\", \"High Risk\"),\r\n                        (round(random.uniform(98.0, 99.9), 1), \"yes\", \"yes\", \"High Risk\"),\r\n                        (round(random.uniform(100.5, 102.0), 1), \"no\", \"no\", \"High Risk\")]\r\n    \r\n    for i in range(len(testcase_library)):\r\n        print(\"-------------------\")\r\n        print(\"Test\", i+1, \"of\", len(testcase_library))\r\n        print(\"-------------------\")\r\n        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):\r\n            num_tests_passed += 1\r\n    \r\n    return round(100 / len(testcase_library) * num_tests_passed, 1)\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "-------------------\nTest 1 of 4\n-------------------\nNo Output Found\n\n-------------------\nTest 2 of 4\n-------------------\nNo Output Found\n\n-------------------\nTest 3 of 4\n-------------------\nNo Output Found\n\n-------------------\nTest 4 of 4\n-------------------\nNo Output Found\n\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 140, "problem_id": "a4_2_pt", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a template that gets the following values from\nthe user:\n\n  * Outside Temperature (in Fahrenheit)\n  * Lightning within 5?(a string, which will be either \"yes\" or \"no\")\n  * Winds over 20 knots? (a string, which will be either \"yes\" or \"no\")\n\n\n\nUsing the following rules as a guide, have your program determine if PT is\ncancelled or a go:\n\n  1. If the outside temperature is above 90 degrees, print \"PT Cancelled\"\n  2. If there is lightning within 5 or winds over 20 knots print \"PT Cancelled\"\n  3. For all other situations, print \"PT is a Go\"\n\n\n\n**EXAMPLE:  \n**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \nInput |\n\n99.0  \nno  \nno  \n  \n\n| 85  \nno  \nyes |\n\n85\n\nno\n\nno  \n  \nOutput | PT Cancelled | PT Cancelled | PT is a Go  \n  \n\n\n\n", "code": "\n# get input from user\ntemperature = float(input(\"Outside Temperature (in Fahrenheit): \"))\nlightning = input(\"Lightning within 5? (yes/no): \")\nwinds = input(\"Winds over 20 knots? (yes/no): \")\n\n# check conditions and print result\nif temperature > 90:\n    print(\"PT Cancelled\")\nelif lightning == \"yes\" or winds == \"yes\":\n    print(\"PT Cancelled\")\nelse:\n    print(\"PT is a Go\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(temperature, lightning, winds, expected_output):\r\n    output, error = autograder.run_script(\"a4_2_pt.py\", [temperature, lightning, winds])\r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) >= 4:\r\n        if lines[3] == expected_output:\r\n            print(\"Correct Output\\n\")\r\n            return True\r\n        else:\r\n            print(\"Incorrect Output.  Expected\", expected_output, '\\n')\r\n            return False\r\n    else:\r\n        print(\"No Output Found\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    num_tests_passed = 0\r\n    \r\n    testcase_library = [(round(random.uniform(72.0, 90), 1), \"no\", \"no\", \"PT is a Go\"),\r\n                        (round(random.uniform(100.5, 102.0), 1), \"yes\", \"yes\", \"PT Cancelled\"),\r\n                        (round(random.uniform(72.0, 90), 1), \"yes\", \"no\", \"PT Cancelled\"),\r\n                        (round(random.uniform(100.5, 102.0), 1), \"no\", \"no\", \"PT Cancelled\")]\r\n    \r\n    for i in range(len(testcase_library)):\r\n        print(\"-------------------\")\r\n        print(\"Test\", i+1, \"of\", len(testcase_library))\r\n        print(\"-------------------\")\r\n        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):\r\n            num_tests_passed += 1\r\n    \r\n    return round(100 / len(testcase_library) * num_tests_passed, 1)\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "-------------------\nTest 1 of 4\n-------------------\nNo Output Found\n\n-------------------\nTest 2 of 4\n-------------------\nNo Output Found\n\n-------------------\nTest 3 of 4\n-------------------\nNo Output Found\n\n-------------------\nTest 4 of 4\n-------------------\nNo Output Found\n\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 141, "problem_id": "a4_2_dog", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been provided with a template that gets the following values from\nthe user:\n\n  * Outside Temperature (in Fahrenheit)\n  * Is it raining? (a string that will be either \"yes\" or \"no\")\n  * Is it daytime? (a string that will be either \"yes\" or \"no\")\n\n\n\nUsing the following rules as a guide, have your program determine if the dog\nis outside:\n\n  1. If the outside temperature is above 85 degrees, print \"Dog Inside\"\n  2. If it is raining outside print \"Dog Inside\"\n  3. If it is NOT daytime, print \"Dog Inside\"\n  4. For all other situations, print \"Dog Outside\"\n\n\n\n**EXAMPLE:  \n**\n\n  | **Example 1** | **Example 2** | **Example 3**  \n---|---|---|---  \nInput |\n\n99.0  \nno  \nyes  \n  \n\n| 80  \nyes  \nyes |\n\n75\n\nno\n\nyes  \n  \nOutput | Dog Inside | Dog Inside | Dog Outside  \n  \n\n\n\n", "code": "\ntemperature = float(input(\"Outside Temperature (in Fahrenheit): \"))\nraining = input(\"Is it raining? (yes or no): \")\ndaytime = input(\"Is it daytime? (yes or no): \")\n\nif temperature > 85:\n    print(\"Dog Inside\")\nelif raining == \"yes\":\n    print(\"Dog Inside\")\nelif daytime == \"no\":\n    print(\"Dog Inside\")\nelse:\n    print(\"Dog Outside\")\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef run_test(temperature, raining, daytime, expected_output):\r\n    output, error = autograder.run_script(\"a4_2_dog.py\", [temperature, raining, daytime])\r\n    lines = output.split('\\n')\r\n    \r\n    if len(lines) >= 4:\r\n        if lines[3] == expected_output:\r\n            print(\"Correct Output\\n\")\r\n            return True\r\n        else:\r\n            print(\"Incorrect Output.  Expected\", expected_output, '\\n')\r\n            return False\r\n    else:\r\n        print(\"No Output Found\\n\")\r\n        return False\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    num_tests_passed = 0\r\n    \r\n    testcase_library = [(round(random.uniform(83.0, 84.9), 1), \"no\", \"yes\", \"Dog Outside\"),\r\n                        (round(random.uniform(83.0, 84.9), 1), \"yes\", \"yes\", \"Dog Inside\"),\r\n                        (round(random.uniform(83.0, 84.9), 1), \"no\", \"no\", \"Dog Inside\"),\r\n                        (round(random.uniform(100.5, 102.0), 1), \"no\", \"yes\", \"Dog Inside\")]\r\n    \r\n    for i in range(len(testcase_library)):\r\n        print(\"-------------------\")\r\n        print(\"Test\", i+1, \"of\", len(testcase_library))\r\n        print(\"-------------------\")\r\n        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):\r\n            num_tests_passed += 1\r\n    \r\n    return round(100 / len(testcase_library) * num_tests_passed, 1)\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 0.0, "text": "-------------------\nTest 1 of 4\n-------------------\nNo Output Found\n\n-------------------\nTest 2 of 4\n-------------------\nNo Output Found\n\n-------------------\nTest 3 of 4\n-------------------\nNo Output Found\n\n-------------------\nTest 4 of 4\n-------------------\nNo Output Found\n\nUnit Test Returned: 0.0\n"}, {"Unnamed: 0": 142, "problem_id": "a4_1_lift", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite a Python function that calculates the lift for an aircraft. You will\nname your function `calculate_lift`, and it will have the following parameters\n(in this order):\n\n  * Lift coefficient\n  * Density\n  * Velocity\n  * Area\n\nYour function will **return** the lift, which can be computed using the\nfollowing equation:\n\n\n\n![Principles of Flying](https://www.thaitechnics.com/fly/tg4/lift_equa.gif)\n\n\n\nNOTE: You do NOT need to call the function.\n\n\n", "code": "\ndef calculate_lift(lift_coefficient, density, velocity, area):\n    return lift_coefficient * density * velocity**2 * area / 2\n\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport a4_1_lift\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    \r\n    if \"calculate_lift\" in dir(a4_1_lift):\r\n        print(\"Function Defined\")\r\n        score += 20\r\n        \r\n        lift_coefficient = round(random.uniform(3, 5), 1)\r\n        density = round(random.uniform(2, 3), 1)\r\n        velocity = round(random.uniform(50, 200), 1)\r\n        area = round(random.uniform(400, 1000), 1)\r\n        lift = lift_coefficient * area * 0.5 * density * velocity ** 2.0\r\n        \r\n        if autograder.equals(lift, a4_1_lift.calculate_lift(lift_coefficient, density, velocity, area)):\r\n            print(\"Function Returned the Correct Value\")\r\n            score += 80\r\n        else:\r\n            print(\"calculate_lift(%1.1f, %1.1f, %1.1f, %1.1f) return %f instead of %f\" %\r\n                  (lift_coefficient, density, velocity, area, a4_1_lift.calculate_lift(lift_coefficient, density, velocity, area), lift))\r\n        \r\n    else:\r\n        print(\"Function Not Defined\")\r\n    \r\n    return score\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 100.0, "text": "Function Defined\nFunction Returned the Correct Value\nUnit Test Returned: 100\n"}, {"Unnamed: 0": 143, "problem_id": "a4_1_buoyancy", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite a Python function that calculates the buoyancy force for an object. You\nwill name your function `calculate_buoyancy`, and it will have the following\nparameters (in this order):\n\n  * Submerged Volume\n  * Density\n  * Gravity\n\nOur function will  **return**  the buoyancy force, which can be computed using\nthe following equation:\n\n**Fb = Vs \u00d7 D \u00d7 g **where Fb is the buoyancy force, Vs is the submerged\nvolume, D is the density of the fluid the object is submerged in, and g is the\nforce of gravity.\n\nNOTE: You do NOT need to call the function.\n\n\n", "code": "\ndef calculate_buoyancy(Vs, D, g):\n    return Vs * D * g\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport a4_1_buoyancy\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    \r\n    if \"calculate_buoyancy\" in dir(a4_1_buoyancy):\r\n        print(\"Function Defined\")\r\n        score += 20\r\n        \r\n        volume = round(random.uniform(3, 5), 1)\r\n        density = round(random.uniform(2, 3), 1)\r\n        gravity = round(random.uniform(50, 200), 1)\r\n        buoyancy = volume * density * gravity\r\n        \r\n        if autograder.equals(buoyancy, a4_1_buoyancy.calculate_buoyancy(volume, density, gravity)):\r\n            print(\"Function Returned the Correct Value\")\r\n            score += 80\r\n        else:\r\n            print(\"calculate_buoyancy(%1.1f, %1.1f, %1.1f) returned %f instead of %f\" %\r\n                  (volume, density, gravity, a4_1_buoyancy.calculate_buoyancy(volume, density, gravity), buoyancy))\r\n        \r\n    else:\r\n        print(\"Function Not Defined\")\r\n    \r\n    return score\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 100.0, "text": "Function Defined\nFunction Returned the Correct Value\nUnit Test Returned: 100\n"}, {"Unnamed: 0": 144, "problem_id": "a4_1_area", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n**\n\nWrite a Python function that calculates the area of a trapazoid. You will name\nyour function `calculate_area`, and it will have the following parameters (in\nthis order):\n\n  * Side_A\n  * Side_B\n  * Height\n\nOur function will  **return**  the area, which can be computed using the\nfollowing equation:\n\nA = (a + b) h\n\nNOTE: You do NOT need to call the function.\n\n\n\n\n\n\n", "code": "\ndef calculate_area(Side_A, Side_B, Height):\n    return ((Side_A + Side_B) * Height) / 2\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\nimport a4_1_area\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    score = 0\r\n    \r\n    if \"calculate_area\" in dir(a4_1_area):\r\n        print(\"Function Defined\")\r\n        score += 20\r\n        \r\n        Side_A = round(random.uniform(3, 5), 1)\r\n        Side_B = round(random.uniform(2, 3), 1)\r\n        Height = round(random.uniform(50, 200), 1)\r\n        area = ((Side_A + Side_B) / 2) * Height\r\n        \r\n        if autograder.equals(area, a4_1_area.calculate_area(Side_A,Side_B,Height)):\r\n            print(\"Function Returned the Correct Value\")\r\n            score += 80\r\n        else:\r\n            print(\"calculate_area(%1.1f, %1.1f, %1.1f) return %f instead of %f\" %\r\n                  (Side_A, Side_B, Height, a4_1_area.calculate_area(Side_A,Side_B,Height), area))\r\n        \r\n    else:\r\n        print(\"Function Not Defined\")\r\n    \r\n    return score\r\n    \r\n    \r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)", "exec_result": "completed", "score": 100.0, "text": "Function Defined\nFunction Returned the Correct Value\nUnit Test Returned: 100\n"}, {"Unnamed: 0": 145, "problem_id": "a3_6_tests", "prompts": "Bellow is a problem statement, write a program in Python that solves the problem.Put your code solution within fenced code blocks, and do not provide explanations for your solution. \n\n\n**PROBLEM STATEMENT:  \n** You have been asked to write a program that analyzes scores of a recent\ntest given to a class. Write a program that gets from the user the number of\ntests scored, and gets that many test scores (which you may assume are whole\nnumbers) from the user. Your program must print out:\n\n  * The average score of all tests.\n  * The count of tests that scored lower than the average.\n\n\n\n**EXAMPLES:**\n\n  | **Example 1** | **Example 2**  \n---|---|---  \n**Input** | 3  \n75  \n90  \n88  \n  \n  \n| 5  \n86  \n79  \n90  \n90  \n100  \n**Output** | 84.3  \n1 | 89.0  \n2  \n  \n\n\n\n", "code": "```\nn = int(input(\"Enter the number of tests scored: \"))\n\n# Get the scores from the user\nscores = []\nfor _ in range(n):\n    score = int(input(\"Enter a test score: \"))\n    scores.append(score)\n\n# Calculate the average score\ntotal = sum(scores)\naverage = total / n\n\n# Count the number of scores lower than the average\nlower_count = 0\nfor score in scores:\n    if score < average:\n        lower_count += 1\n\n# Print the average score and count of lower scores\nprint(\"The average score of all tests:\", average)\nprint(\"The count of tests that scored lower than the average:\", lower_count)\n```\n", "testcase": "from cs110 import autograder\r\nimport random, math\r\n\r\ndef script_name():\r\n    return \"a3_6_tests.py\"\r\n\r\n# There should be two outputs:\r\n#    The average followed by a count.\r\n# The test cases should be constructed so that:\r\n#    The average is >= 30\r\n#    The count   is <= 20\r\n\r\n# AUTOGRADER RUBRIC for scoring one test:\r\n\r\n# Number of outputs (10 pt):\r\n# 10 pt Output consists of exactly two values\r\n#  5 pt Output consists of one value or more than two values\r\n#  0 pt Output consists of either zero\r\n\r\n# Output of average (45 pt):\r\n# 45 pt Exactly correct and is first value in list\r\n# 30 pt Within 0.1 and is first value in list\r\n# 30 pt Exactly correct but is not first value in list\r\n# 15 pt Within 0.1 but is not first value in list\r\n\r\n# Output of count (45 pt):\r\n# 45 pt Exactly correct and is first value in list\r\n# 30 pt Within 1 and is first value in list\r\n# 30 pt Exactly correct but is not first value in list\r\n# 15 pt Within 1 but is not first value in list\r\n\r\ndef base_name(name_of_script):\r\n    return (name_of_script.split('.')[0]).split('_')[2]\r\n\r\ndef solution(input_list):\r\n\r\n    # Input is a count followed by that many values\r\n    # Create a list of just the values\r\n    items_list = input_list[1:]\r\n    \r\n    # Determine the average of the values\r\n    average = sum(items_list) / len(items_list)\r\n    \r\n    # Count the number of items that meet the criteria\r\n    # This depends on the specific variant of the problem\r\n    base_script = base_name(script_name())\r\n    count = 0\r\n    for score in items_list:\r\n        if base_script == \"pushups\" and score > average:\r\n            count += 1\r\n        if base_script == \"sami\" and score > average:\r\n            count += 1\r\n        if base_script == \"tests\" and score < average:\r\n            count += 1\r\n    \r\n    # Output is average (rounded to 1 decimal place) and count \r\n    return [str(round(average,1)), str(count)]\r\n\r\ndef is_value(s):\r\n    try:\r\n        float(s)\r\n        return True\r\n    except ValueError:\r\n        return False\r\n    \r\n# Returns the position and distance of the closes user value from the solution value.\r\n# Returns found=False if list from user contains no numeric values\r\ndef matchup_numeric(value, from_user):\r\n    value = float(value)\r\n    found = False\r\n    position = -1\r\n    within = 1E10\r\n    for i in range(len(from_user)):\r\n        item = from_user[i]\r\n        if is_value(item):\r\n            found = True\r\n            user_value = float(item)\r\n            distance = abs(value - user_value)\r\n            if  distance < within:\r\n                within = distance\r\n                position = i \r\n                \r\n    return (found, position, within)\r\n\r\ndef decimal_places(float_string):\r\n    if is_value(float_string):\r\n        decimal_point_index = float_string.find('.')\r\n        if decimal_point_index == -1:\r\n            return 0\r\n        else:\r\n            return len(float_string) - (decimal_point_index + 1)\r\n    else:\r\n        return -1\r\n    \r\ndef grade_item(name, correct_position, places, tolerance, from_soln, from_user):\r\n    score = 0\r\n    \r\n    value_from_soln = from_soln[correct_position]\r\n    \r\n    (found, position, within) = matchup_numeric(value_from_soln, from_user)\r\n    if not found:\r\n        print(name, \"not found.  Expected: \", value_from_soln)\r\n        score += 0\r\n    else:\r\n        place_penalty = 0\r\n        if   (position == correct_position) and (within <= tolerance[0]):\r\n            print(name, \"appears correct.\")\r\n            score += 45 - place_penalty\r\n        elif (position == correct_position) and (within <= tolerance[1]):\r\n            print(name, \"is close.  Expected: \", value_from_soln)\r\n            score += 30 - place_penalty\r\n        elif (position != correct_position) and (within <= tolerance[0]):\r\n            print(name, \"appears correct, but in wrong position.\")\r\n            score += 30 - place_penalty\r\n        elif  (position != correct_position) and (within <= tolerance[1]):\r\n            print(name, \"is close, but in wrong position.  Expected: \", value_from_soln)\r\n            score += 15 - place_penalty\r\n        else:\r\n            print(name, \"is not close and probably in wrong position.  Expected: \", value_from_soln)\r\n            score += 0\r\n    return score            \r\n\r\ndef run_1_test(script_being_tested, input_list):\r\n\r\n    (output, error) = autograder.run_script(script_being_tested, input_list)\r\n    lines = output.strip().split('\\n')\r\n    expected_output = solution(input_list)\r\n    \r\n    score = 0\r\n\r\n    # Number of outputs\r\n    if len(lines) == 2:\r\n        print(\"Number of output lines is correct.\")\r\n        score += 10\r\n    elif len(lines) == 1:\r\n        print(\"Number of output lines is not quite correct.\")\r\n        score += 5\r\n    else:\r\n        print(\"Number of output lines is not correct.\")\r\n        score += 0\r\n\r\n    score += grade_item(\"Average\", 0, 1, [0.1, 10], expected_output, lines)\r\n    score += grade_item(\"Count\", 1, 0, [0, 1], expected_output, lines)\r\n\r\n    print('-----------------------------')\r\n\r\n    return score\r\n\r\n# Runs the Python script and sees if it passes the test(s)\r\ndef test_passed():\r\n    \r\n    script_being_tested = script_name()\r\n    score = 0\r\n    cum_weight = 0.0\r\n\r\n    # Corner Case #1 (5%) -- only a single score\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n    \r\n    random_people = 1\r\n    input_list = [random_people]\r\n        \r\n    for i in range(random_people):\r\n        random_score = random.randint(30, 100)\r\n        input_list.append(random_score)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n\r\n    # Corner Case #2 (5%) -- multiple all scores that are all the same\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n\r\n    random_people = random.randint(5, 10)\r\n    input_list = [random_people]\r\n        \r\n    random_score = random.randint(30, 100)\r\n    for i in range(random_people):\r\n        input_list.append(random_score)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n\r\n    # Corner Case #3 (5%) -- scores exist that exactly match average\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100.0\r\n\r\n    random_people = random.randint(7,15)\r\n    input_list = [random_people]\r\n        \r\n    random_mean = random.randint(50, 70)\r\n    \r\n    for i in range(random_people % 3):\r\n        input_list.append(random_mean)\r\n        \r\n    for i in range(random_people // 3):\r\n        random_step = random.randint(3,20)\r\n        input_list.append(random_mean)\r\n        input_list.append(random_mean + random_step)\r\n        input_list.append(random_mean - random_step)\r\n    \r\n    score += weight * run_1_test(script_being_tested, input_list)\r\n    \r\n    #Corner Case # 4 makes sure students are rounding to one decimal place\r\n    weight = 5.0\r\n    runs = 1\r\n    cum_weight += runs * weight\r\n    weight /= runs * 100\r\n    \r\n    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]\r\n    rounding_score = run_1_test(script_being_tested, input_list)\r\n    score += weight * rounding_score\r\n    \r\n    # General Case (80%) -- 4 runs @ 20% each\r\n    runs = 2\r\n    weight = (100.0 - cum_weight)\r\n    weight /= runs * 100.0\r\n\r\n    \r\n    for run in range(runs):\r\n        random_people = random.randint(2, 20)\r\n        input_list = [random_people]\r\n            \r\n        for i in range(random_people):\r\n            random_score = random.randint(30, 100)\r\n            input_list.append(random_score)\r\n        \r\n        score += weight * run_1_test(script_being_tested, input_list)\r\n    score = min([score,rounding_score])\r\n    return score\r\n\r\n# ---------------------------------------------------------------------\r\n# Optional\r\n# Runs your code in an IDE (for testing purposes)\r\n# ---------------------------------------------------------------------\r\nif __name__ == '__main__':    \r\n    result = test_passed()\r\n    print(\"Unit Test Returned:\", result)\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------\r\n\r\n\r\n# --------------------------------------------------\r\n# Downloaded from https://www.autograder.net\r\n# --------------------------------------------------", "exec_result": "completed", "score": 5.0, "text": "Number of output lines is not quite correct.\nAverage not found.  Expected:  49.0\nCount not found.  Expected:  0\n-----------------------------\nNumber of output lines is not quite correct.\nAverage not found.  Expected:  100.0\nCount not found.  Expected:  0\n-----------------------------\nNumber of output lines is not quite correct.\nAverage not found.  Expected:  56.0\nCount not found.  Expected:  4\n-----------------------------\nNumber of output lines is not quite correct.\nAverage not found.  Expected:  70.2\nCount not found.  Expected:  8\n-----------------------------\nNumber of output lines is not quite correct.\nAverage not found.  Expected:  69.9\nCount not found.  Expected:  5\n-----------------------------\nNumber of output lines is not quite correct.\nAverage not found.  Expected:  65.0\nCount not found.  Expected:  9\n-----------------------------\nUnit Test Returned: 5.0\n"}]