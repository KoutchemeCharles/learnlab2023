,id,course_id,type,exam,prompt,testcase,max_score,input_str,input_cast,output,assignment,conditional,function_call,function_def,function_return,loop_counting,loop_until,loop_elements,loop_nested,stat_calculate,file_read,file_write,list,list_2d,dictionary,item_set,tuple,skeleton
0,a3_3_animals,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called&nbsp;<code>list_of_animals</code>. Write a program that prints out each of the items in this list (one item per line). </p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the items: ""A"", ""B"", ""C""</p>
<p>Your program should print:</p>
<pre>A<br />B<br />C</pre>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You must use a loop to complete this task. </li>
</ul>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

list_of_animals = ['Tiger', 'Deer', 'Zebra', 'Elephant', 'Swordfish', 'Giraffe', 'Sloth']

def solution():
    result = []
    
    for item in list_of_animals:
        result.append(item)
    
    return result
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""a3_3_animals.py"", [])
    expected_output = solution()
    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    return round(100 / len(expected_output) * num_matches, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_animals = ['Tiger', 'Deer', 'Zebra', 'Elephant', 'Swordfish', 'Giraffe', 'Sloth']

#Your code goes here."
1,a3_1_cargo,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called&nbsp;<code>list_of_cargo_planes</code>. Write a program that prints a single, specified plane from the list. Your program shall take a number via user input used to identify which plane to print. For example, if the user types a 3, you should print out the third item.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)</li>
</ul>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, math

soln_list =  [
                'C-2', 'C-5', 'C-9', 'C-12', 'C-17', 'UV-18', 'C-20', 'C-21', 'C-22', 'C-23', 'C-26', 'C-27',
                'C-35', 'C-38', 'CT-39', 'C-40', 'C-130', 'C-135', 'C-141', 'ATT', 'CSA', 'NSA', 'GRA', 'CRAF'
            ] 
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_cargo.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == soln_list[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(soln_list[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
2,a3_3_games,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called&nbsp;<code>list_of_games</code>. Write a program that prints out each of the items in this list (one item per line). </p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the items: ""A"", ""B"", ""C""</p>
<p>Your program should print:</p>
<pre>A<br />B<br />C</pre>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You must use a loop to complete this task. </li>
</ul>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

list_of_games = ['Monopoly', 'Risk', 'Clue', 'Chess', 'Operation', 'Jenga', 'Jumanji']

def solution():
    result = []
    
    for item in list_of_games:
        result.append(item)
    
    return result
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""a3_3_games.py"", [])
    expected_output = solution()
    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    return round(100 / len(expected_output) * num_matches, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_games = ['Monopoly', 'Risk', 'Clue', 'Chess', 'Operation', 'Jenga', 'Jumanji']

#Your code goes here."
3,a3_4_heights,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called list_of_heights. Write a program that prints out the range (<em>i.e.,&nbsp;</em>the difference between the max and min height)</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the values: 53, 60, 65</p>
<p>Your program should print:</p>
<pre>12</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_heights.py""

list_of_heights = [74, 75, 63, 59, 81, 76, 79, 61, 58, 70,
                   61, 53, 82, 67, 73, 50, 59, 73, 57, 75,
                   78, 64, 69, 57, 79, 74, 48, 51, 48, 64]

max_value = max(list_of_heights) 
min_value = min(list_of_heights)

def verify_code():
    print(""Test 1:  Scanning your solution . . . "", end='')
    
    file = open(STUDENT_FILE, ""r"")
    contents = file.read()
        
    if ""for"" not in contents and ""while"" not in contents and ""max"" not in contents and ""min"" not in contents and ""sort"" not in contents:
        print(""Could not find code that gets the tallest and shortest heights . . ."")
        return False
    
    print(""Good. You are actually computing the answer."")
    return True



# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if verify_code():
        print(""Test 2:  Checking Output . . . "", end='')
        score += 60
        
        if len(lines) >= 1:           
            if autograder.equals(lines[0], max_value - min_value):
                print(""Range Look Good!"")
                score += 40
            else:
                print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
                
        else:
            print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
4,pex3,2,project,0,"<div>
    <h2 style=""text-align: center;"">Comp Sci 110 Spring 2021 Programming Exercise (PEX 3)</h2>
    <p>Objective:  Create a simple mars rover graphical simulation, complete with basic AI algorithms.</p>
    <p>Instructions: Read writeup (pex3-writeup.pdf) and use the template file to begin work.</p>
    <br>
</div>","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
        print(""Thank you for your submission. Your instructor will manually grade your scene."")
        print(""Remember to try your program against both the 5x5 and 10x10 mars_map's."")
        return 0.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,0,1,1,0,0,0,
5,pex1,2,project,0,"<div>
    <h2 style=""text-align: center;"">Comp Sci 110 Spring 2021 Programming Exercise (PEX 1)</h2>
    <p>Objective:  Create a retirement calculation tool to compare the difference between the traditional and blended military retirement systems.</p>
    <p>Instructions: Read writeup (pex1-writeup.pdf) and use the template file to begin work.</p>
    <br>
</div>","from cs110 import autograder
from itertools import permutations

import sys
import subprocess
import random

# ---------------------------------------------------------------------
# PEX1 Unit Test
# ---------------------------------------------------------------------
#list of dictionaries corresponding to the tests contained in test tuples
answers = [
    {
     '00 Enter your age upon commissioning:':"""",
     '01 Enter the number of years you expect to serve:':"""",
     '02 Enter your life expectancy (age):':"""",
     '03 Enter percentage of base pay contributed to TSP (as decimal):':"""",
     '04 Enter estimated annual return interest rate (as decimal):':"""",
     '05 Total paid months in retirement:':444,
     '06 TSP government contribution percent for BRS:':0.05,
     '07 TSP value at retirement for BRS plan:':605892.71,
     '08 TSP value after growth throughout retirement for BRS plan:':5547881.1,
     '09 TSP value at retirement for Legacy plan:':454419.53,
     '10 TSP value after growth throughout retirement for Legacy plan:':4160910.83,
     '11 BRS Retirement Totals':"""",
     '12 TSP Savings Total:':5547881.1,
     '13 Fed Pension Annuity Total:':1692528.0,
     '14 Total Retirement:':7240409.1,
     '15 Legacy Retirement Totals':"""",
     '16 TSP Savings Total:':4160910.83,
     '17 Fed Pension Annuity Total:':2115660.0,
     '18 Total Retirement:':6276570.83,
     '19 BRS Retirement Total greater by' : 963838.28
    },
    # 2nd output
    {
     '00 Enter your age upon commissioning:':"""",
     '01 Enter the number of years you expect to serve:':"""",
     '02 Enter your life expectancy (age):':"""",
     '03 Enter percentage of base pay contributed to TSP (as decimal):':"""",
     '04 Enter estimated annual return interest rate (as decimal):':"""",
     '05 Total paid months in retirement:':444,
     '06 TSP government contribution percent for BRS:':0.02,
     '07 TSP value at retirement for BRS plan:':90883.91,
     '08 TSP value after growth throughout retirement for BRS plan:':832182.17,
     '09 TSP value at retirement for Legacy plan:':30294.64,
     '10 TSP value after growth throughout retirement for Legacy plan:':277394.06,
     '11 BRS Retirement Totals':"""",
     '12 TSP Savings Total:':832182.17,
     '13 Fed Pension Annuity Total:':1692528.0,
     '14 Total Retirement:':2524710.17,
     '15 Legacy Retirement Totals':"""",
     '16 TSP Savings Total:':277394.06,
     '17 Fed Pension Annuity Total:':2115660.0,
     '18 Total Retirement:':2393054.06,
     '19 BRS Retirement Total greater by':131656.11
    },
    # 3rd output
    {
     '00 Enter your age upon commissioning:':"""",
     '01 Enter the number of years you expect to serve:':"""",
     '02 Enter your life expectancy (age):':"""",
     '03 Enter percentage of base pay contributed to TSP (as decimal):':"""",
     '04 Enter estimated annual return interest rate (as decimal):':"""",
     '05 Total paid months in retirement:': 288,
     '06 TSP government contribution percent for BRS:': 0.02,
     '07 TSP value at retirement for BRS plan:':117137.36,
     '08 TSP value after growth throughout retirement for BRS plan:':387941.34,
     '09 TSP value at retirement for Legacy plan:':39045.79,
     '10 TSP value after growth throughout retirement for Legacy plan:':129313.78,
     '11 BRS Retirement Totals':"""",
     '12 TSP Savings Total:':387941.34,
     '13 Fed Pension Annuity Total:':1372320.0,
     '14 Total Retirement:':1760261.34,
     '15 Legacy Retirement Totals':"""",
     '16 TSP Savings Total:':129313.78,
     '17 Fed Pension Annuity Total:':1715400.0,
     '18 Total Retirement:':1844713.78,
     '19 Legacy Retirement Total greater by' :84452.44
    },
    #4th test case
    {'00 Enter your age upon commissioning:': '',
     '01 Enter the number of years you expect to serve:': '',
     '02 Enter your life expectancy (age):': '',
     '03 Enter percentage of base pay contributed to TSP (as decimal):': '',
     '04 Enter estimated annual return interest rate (as decimal):': '',
     '05 Total paid months in retirement:': 204.0,
     '06 TSP government contribution percent for BRS:': 0.03,
     '07 TSP value at retirement for BRS plan:': 120241.56,
     '08 TSP value after growth throughout retirement for BRS plan:': 237073.9,
     '09 TSP value at retirement for Legacy plan:': 48096.62,
     '10 TSP value after growth throughout retirement for Legacy plan:': 94829.56,
     '11 BRS Retirement Totals': '',
     '12 TSP Savings Total:': 237073.9,
     '13 Fed Pension Annuity Total:': 777648.0,
     '14 Total Retirement:': 1014721.9,
     '15 Legacy Retirement Totals': '',
     '16 TSP Savings Total:': 94829.56,
     '17 Fed Pension Annuity Total:': 972060.0,
     '18 Total Retirement:': 1066889.56,
     '19 Legacy Retirement Total greater by': 52167.66
     },
    #5th test case
    {
     '00 Enter your age upon commissioning:': '',
     '01 Enter the number of years you expect to serve:': '',
     '02 Enter your life expectancy (age):': '',
     '03 Enter percentage of base pay contributed to TSP (as decimal):': '',
     '04 Enter estimated annual return interest rate (as decimal):': '',
     '05 Total paid months in retirement:': 540.0,
     '06 TSP government contribution percent for BRS:': 0.02,
     '07 TSP value at retirement for BRS plan:': 52576.0,
     '08 TSP value after growth throughout retirement for BRS plan:': 496500.89,
     '09 TSP value at retirement for Legacy plan:': 17525.33,
     '10 TSP value after growth throughout retirement for Legacy plan:': 165500.3,
     '11 BRS Retirement Totals': '',
     '12 TSP Savings Total:': 496500.89,
     '13 Fed Pension Annuity Total:': 1543860.0,
     '14 Total Retirement:': 2040360.89,
     '15 Legacy Retirement Totals': '',
     '16 TSP Savings Total:': 165500.3,
     '17 Fed Pension Annuity Total:': 1929825.0,
     '18 Total Retirement:': 2095325.3,
     '19 Legacy Retirement Total greater by': 54964.41
    },
    #6th test case
    {'00 Enter your age upon commissioning:': '',
     '01 Enter the number of years you expect to serve:': '',
     '02 Enter your life expectancy (age):': '',
     '03 Enter percentage of base pay contributed to TSP (as decimal):': '',
     '04 Enter estimated annual return interest rate (as decimal):': '',
     '05 Total paid months in retirement:': 216.0,
     '06 TSP government contribution percent for BRS:': 0.05,
     '07 TSP value at retirement for BRS plan:': 206924.5,
     '08 TSP value after growth throughout retirement for BRS plan:': 424603.87,
     '09 TSP value at retirement for Legacy plan:': 103462.25,
     '10 TSP value after growth throughout retirement for Legacy plan:': 212301.93,
     '11 BRS Retirement Totals': '',
     '12 TSP Savings Total:': 424603.87,
     '13 Fed Pension Annuity Total:': 741052.8,
     '14 Total Retirement:': 1165656.67,
     '15 Legacy Retirement Totals': '',
     '16 TSP Savings Total:': 212301.93,
     '17 Fed Pension Annuity Total:': 926316.0,
     '18 Total Retirement:': 1138617.93,
     '19 BRS Retirement Total greater by': 27038.73
     }
    
]

#helper function to check for numbers
def has_number(_str):
    return any((x.isdigit() for x in _str))

#takes a student output and returns a dictionary
def parse_student_output(_list):
    ret_dict = {}
    sort_str = """"
    counter = 0
    for line_num, line in enumerate(_list):
        #make a unique key for the start of every line
        sort_str = ""{} "".format(line_num-counter)
        if line_num-counter < 10:
            sort_str = ""0""+sort_str
        #ignore blank lines
        if line.strip() == """":
            counter+=1
        # If there is a number in the line it
        # is either a line with a dollar amount or
        # one of the calculated inputs
        elif has_number(line):
            if ""$"" in line:
                _spl = line.split(""$"")
                try:
                    val = float(_spl[1].strip())
                except:
                    val = _spl[1].strip() + "" Could not be converted to float""
                ret_dict[sort_str+_spl[0].strip()] = val
            # One of the calculated inputs
            else:
                if ""greater by"" in line and ""$"" not in line:
                    val = ""Error (Missing a '$' )""
                    ret_dict[sort_str+line.strip()] = val
                # catches if a student simply prints out a number
                # which is incorrect
                else:
                    try:
                        idx = line.index("":"")+1
                        val = float(line[idx:].strip())
                        ret_dict[sort_str+line[:idx].strip()] = val
                    #Catches if a student forgot a : a $ or has something that cannot be converted to a float
                    except:
                        val = ""Error (Missing a ':' or '$' or Could not Convert to Float)""
                        ret_dict[sort_str+line.strip()] = val
            #The input lines and some of the spacing need empty strings
        # as their keys
        else:
            ret_dict[sort_str+line.strip()] = """"
    return ret_dict

# Helper function to compare two sets of strings
def compare_strings(student_output_list, expected_output_list):
    num_matches = 0
    #Make a lookup table for the expected lines based on the
    #    number output that they should be ignoring spaces
    expected_lines = sorted(expected_output_list)
    #Iterate through the student output
    for num,line in enumerate(sorted(student_output_list)):
        # Make an expected output from the expected output dictionary
        exp = expected_lines[num][3:]+str(expected_output_list[expected_lines[num]])
        print(""Line {}"".format(num),end=' ')
        #check if the line is in the output list
        if line in expected_output_list:
            
            # if the key is a float do a number comparison
            if isinstance(student_output_list[line],float):
                if ""contrib"" in line:
                    contr_diff = abs(expected_output_list[line] - student_output_list[line])
                    if contr_diff > 0.001:
                        print(""INCORRECT the value for {} {} does not match"".format(line[3:],student_output_list[line]))
                        print(""Expected: ""+ exp)
                    else:
                        print(""CORRECT"")
                        num_matches +=1
                elif ""greater"" in line:
                    if expected_output_list[line]-1 <= student_output_list[line] <= expected_output_list[line]+1:
                        print(""CORRECT"")
                        num_matches += 1
                    else:
                        print(""INCORRECT the value for {} $ {} is off by more than 1"".format(line[3:],student_output_list[line]))
                        print(""Expected: ""+ expected_lines[num][3:]+ "" $ "" +str(expected_output_list[expected_lines[num]]))
                elif expected_output_list[line]-1 <= student_output_list[line] <= expected_output_list[line]+1:
                    print(""CORRECT"")
                    num_matches +=1
                else:
                    print(""INCORRECT the value for {} {} is off by more than 1"".format(line[3:],student_output_list[line]))
                    print(""Expected: ""+ exp)
            #string matching
            elif student_output_list[line] == expected_output_list[line]:
                    print(""CORRECT"")
                    num_matches += 1
            else:
                print(""INCORRECT (Expected: '{}')"".format(exp))
                print(""Is there a mispelling?       (Saw: '{} {}')"".format(line[3:],student_output_list[line]))
        #Found a line that should not be included in the output
        else:          
            print(""INCORRECT (Unexpected Line: '{} {}')"".format(line[3:],student_output_list[line]))
            if ""greater"" in exp:
                print(""Expected: ""+ expected_lines[num][3:]+ "" $ "" +str(expected_output_list[expected_lines[num]]))
            else:
                print(""Expected: ""+ exp)
    
    print(num_matches, ""out of"", len(expected_output_list), ""lines match"")
    return num_matches


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    #the input values for each of the 6 possible test cases
    test_tuples = ((21,20,78,.15,.06),(21,20,78,.01,.06),(21,25,70,.01,.05),(27,20,64,0.02,0.04),(25,15,85,0.01,0.05),(24,18,60,.05,.04))
    
    # Chooses the first four items from a random permutation
    # of the six test cases
    test_order = random.choice(tuple(permutations(range(len(test_tuples)))))[0:4]
    score = 0
    
    for i in test_order:
        print(""--------------------------"")
        print(""Test {} of {}"".format((i+1),len(test_tuples)))
        print(""--------------------------"")
        
        # Runs the Script
        output, error_message = autograder.run_script(""pex1.py"",
                                                      [
                                                       test_tuples[i][0],
                                                       test_tuples[i][1],
                                                       test_tuples[i][2],
                                                       test_tuples[i][3],
                                                       test_tuples[i][4]
                                                      ])
        _parsed_output = parse_student_output(output.strip().split(""\n""))
        # Checks to See if the Program Passed the Test
        num_lines_match = compare_strings(_parsed_output,
                                          answers[i])
        num_lines_expected = len(answers[i])
        #Adds a static 25% for each of the 4 test cases
        if num_lines_match == num_lines_expected:
            score += 25
            print(""\nCORRECT\n"")
        else:
            score += round((num_lines_match / num_lines_expected) * 25, 1)
            print(
'''
Try Again
One or more lines is incorrect for the following test case:
Commission Age: {},
Years Served: {},
Death Age: {},
TSP Contribution: {},
Average Return: {}'''.format(test_tuples[i][0],
                                 test_tuples[i][1],
                                 test_tuples[i][2],
                                 test_tuples[i][3],
                                 test_tuples[i][4]))
    
    return score



# Testbench (to be run in an IDE)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result, ""of 100 points."")

#   Optional code for generating more test cases
#     output, error_message = autograder.run_script(""pex1.py"",(24,18,60,.05,.04))
#     _parsed_output = parse_student_output(output.strip().split(""\n""))
#     print(_parsed_output)
#     for k,v in _parsed_output.items():
#         print(k,v)
#


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
6,lsn9_practice4,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a program that asks the user for the area of three plots of land.</p>
<ul>
<li>The first area will be provided to you in ACRES</li>
<li>The second area will be provided to you in SQUARE MILES (1 Acre = 0.0015625 Sq Miles)</li>
<li>The third area will be provided to you in SQUARE KILOMETERS</li>
</ul>
<p>Your program will output ""Plot X is the biggest"", replacing X with either a 1, 2, or 3 depending on if the first, second, or third plot of land is the biggest, respectively. For this problem, you may assume that the plots are all different sizes (e.g., no two plots will be the same size)</p>
<p><strong>NOTES:</strong></p>
<ul>
<li><strong>1 acre = 0.0015625 square miles</strong></li>
<li><strong>1 sq kilometer = 0.386102 square miles</strong></li>
</ul>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td><strong>EXAMPLE 1</strong></td>
<td><strong>EXAMPLE 2</strong></td>
</tr>
<tr>
<td><strong>Inputs</strong></td>
<td>
<p>35<br />0.25<br />1</p>
</td>
<td>
<p>150<br />1<br />2.2</p>
</td>
</tr>
<tr>
<td><strong>Expected Output</strong></td>
<td>Plot 3 is the biggest</td>
<td>Plot 2 is the biggest</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def solution(area_1, area_2, area_3):
    area_1 = area_1 * 0.0015625
    area_3 = area_3 * 0.386102

    if area_1 > area_2 and area_1 > area_3:
        return ""Plot 1 is the biggest""
    elif area_2 > area_1 and area_2 > area_3:
        return ""Plot 2 is the biggest""
    elif area_3 > area_1 and area_3 > area_2:
        return ""Plot 3 is the biggest""
    
    return ""This should never return""

def run_test(area1, area2, area3):
    global num_tests_run, num_tests_passed
    
    num_tests_run += 1
    expected_output = solution(area1, area2, area3)
        
    print(""--------------------------------------------"")
    print(""Comparing %1.1f acres, %1.1f sq miles, and %1.1f sq km"" % (area1, area2, area3))
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn9_practice4.py"", [area1, area2, area3])
    
    if output.strip() == expected_output:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", expected_output)
        print(""\n"")

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))
    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))
    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)








",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
7,lsn9_practice3,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a program that asks the user for the price of an item in US dollars / cents. Then calculate and print out the equivalent price of the item in:</p>
<ul>
<li>
<ul>
<li>British Pounds (1.25 USD per Pound)</li>
<li>Korean Won (1 Won == 0.00083 USD)</li>
<li>Mexican Pesos (1 Peso == 53.81 Won)</li>
</ul>
</li>
</ul>
<p>Print each currency on a separate line.</p>
</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    
    dollar_amount = round(random.uniform(1.00, 1000.00), 2)
    pound_amount = dollar_amount / 1.25
    won_amount = dollar_amount / 0.00083
    peso_amount = won_amount / 53.81
    
    output, error_message = autograder.run_script(""lsn9_practice3.py"", [dollar_amount])   
    lines = output.split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], pound_amount):
        print(""Correct Pound Conversion"")
        score += 33
    else:
        print(""Incorrect Pound Conversion.  Expected"", pound_amount)
        
    if len(lines) > 1 and autograder.equals(lines[1], won_amount):
        print(""Correct Won Conversion"")
        score += 33
    else:
        print(""Incorrect Won Conversion.  Expected"", won_amount)
        
    if len(lines) > 2 and autograder.equals(lines[2], peso_amount):
        print(""Correct Peso Conversion"")
        score += 34
    else:
        print(""Incorrect Peso Conversion.  Expected"", peso_amount)
    
    return score
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
8,lsn9_practice2,2,lab,0,"<p><strong>PROBLEM STATEMENT:<br></strong>You have been provided with a program that gets two (x, y) coordinates from the user.&nbsp; Write a program that calculates the distance between these two points, and prints them out.</p>
<p>HINT:&nbsp; You will have to use the math module.</p>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
    
    x1 = round(random.uniform(-10, 10), 1)
    y1 = round(random.uniform(-10, 10), 1)
    x2 = round(random.uniform(-10, 10), 1)
    y2 = round(random.uniform(-10, 10), 1)
    
    num_tests_run += 1
    solution = math.sqrt(abs(x1-x2)**2 + abs(y1-y2)**2)
    
    print(""--------------------------------------------"")
    print(""Calculating distance between (%1.1f, %1.1f) and (%1.1f, %1.1f)"" % (x1, y1, x2, y2))
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn9_practice2.py"", [x1, y1, x2, y2], False)
    print(""Your Output:"", output.strip())
    
    if autograder.equals(output, solution):
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT"")    
        print(""Expected:"", solution)
        print(""\n"")

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    run_test()

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)










# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
9,lsn9_practice1,2,lab,0,<p><strong>PROBLEM STATEMENT:<br></strong>You have been provided with a program that prints out the class year.&nbsp; Write the approrpriate input statement above this line to make this program work.</p>,"from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(class_year):
    global num_tests_run, num_tests_passed
    
    num_tests_run += 1
    solution = ""Members of the class of "" + str(class_year) + "" arrived at USAFA in "" + str(class_year - 4)
    
    print(""--------------------------------------------"")
    print(""Testing Class Year ="", class_year)
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn9_practice1.py"", [class_year], False)
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT"")
        print(""Your Output:"", output.strip())
        print(""Expected:"", solution)
        if "".0"" in output.strip():
            print(""*** HINT:  Is year a floating point number? ***"")
        print(""\n"")

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(random.randint(1959, 2024))
    run_test(random.randint(1959, 2024))

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
10,lsn8_uod,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You&rsquo;ve been asked to develop a tool to help identify the uniform of the day, based on temperature and wind speed.</p>
<p>The command center has provided the following table for guidance:</p>
<table>
<tbody>
<tr>
<td></td>
<td colspan=""6"">Temperature</td>
</tr>
<tr>
<td rowspan=""4"">Wind Speed</td>
<td></td>
<td>&lt;40</td>
<td>40</td>
<td>&gt;40 and &lt;60</td>
<td>60</td>
<td>&gt;60</td>
</tr>
<tr>
<td>&lt;15</td>
<td>Parkas</td>
<td>A-Jackets</td>
<td>A-Jackets</td>
<td>A-Jackets</td>
<td>Blues</td>
</tr>
<tr>
<td>15</td>
<td>ABUs</td>
<td>ABUs</td>
<td>Parkas</td>
<td>Parkas</td>
<td>Blues</td>
</tr>
<tr>
<td>&gt;15</td>
<td>ABUs</td>
<td>ABUs</td>
<td>Parkas</td>
<td>Parkas</td>
<td>A-Jackets</td>
</tr>
</tbody>
</table>
<p>Create a Python program that first gets the temperature (in degrees Fahrenheit) and then the wind speed (in knots) from the user. You may assume that all inputs are non-negative numbers.</p>
<p>It should then output the correct response, as described above.</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0

# The Actual Solution
def solution(temp, wind):
    if temp < 40:
        if wind < 15:
            return ""Parkas""
        else:
            return ""ABUs""
    elif temp == 40:
        if wind < 15:
            return 'A-Jackets'
        else:
            return 'ABUs'
    elif temp > 40 and temp <= 60:
        if wind < 15:
            return 'A-Jackets'
        else:
            return 'Parkas'
    else:
        if wind <= 15:
            return 'Blues'
        else:
            return 'A-Jackets'


def run_test(temp, wind):
    global num_tests_passed
    
    print(""Testing Temp ="", temp, 'and Wind =', wind)
    output, error_message = autograder.run_script(""lsn8_uod.py"", [temp, wind], False)
    
    print(""Output:"", output.strip())
    
    if output.strip() == solution(temp, wind):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT.  Expected:"", solution(temp, wind), ""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(39, 14)
    run_test(39, 15)
    run_test(39, 16)
    run_test(40, 14)
    run_test(40, 15)
    run_test(40, 16)
    run_test(50, 14)
    run_test(50, 15)
    run_test(50, 16)
    run_test(60, 14)
    run_test(60, 15)
    run_test(60, 16)
    run_test(61, 14)
    run_test(61, 15)
    run_test(61, 16)
    
    return round(num_tests_passed * (100 / 15), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)






",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
11,lsn8_speeding,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a program that gets a speed (in miles per hour). You may assume that all inputs are non-negative numbers.</p>
<p>It should output the kind of ticket a police officer should give the driver (according to the table below).</p>
<table>
<thead>
<tr>
<th>Speed (mph)</th>
<th>&lt;= 65</th>
<th>&gt;65 and &lt;= 70</th>
<th>&gt;70 and &lt;= 75</th>
<th>&gt; 75 and &lt;= 80</th>
<th>&gt; 80</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ticket</td>
<td>No Ticket</td>
<td>Warning</td>
<td>Speeding</td>
<td>Reckless Driving</td>
<td>Reckless Endangerment</td>
</tr>
</tbody>
</table>
<p><strong>EXAMPLES:</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
<th>Example 4</th>
<th>Example 5</th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>48</td>
<td>68</td>
<td>72</td>
<td>78</td>
<td>136</td>
</tr>
<tr>
<td>Expected Output </td>
<td>No Ticket</td>
<td>Warning</td>
<td>Speeding</td>
<td>Reckless Driving</td>
<td>Reckless Endangerment</td>
</tr>
</tbody>
</table>
<p></p>
</div>","from cs110 import autograder
import random, math

# The Actual Solution
def solution(speed):
    # Determines what to return based on the table
    if (speed <= 65):
        return ""No Ticket""
    elif (speed >65 and speed <= 70):
        return ""Warning""
    elif (speed > 70 and speed <= 75):
        return ""Speeding""  
    elif (speed >75 and speed <= 80):
        return ""Reckless Driving""
    elif (speed > 80):
        return ""Reckless Endangerment""

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    num_tests_passed = 0
    
    SPEEDS_TO_TEST = [random.randint(0, 65),
                      65,
                      random.randint(66, 70),
                      70,
                      random.randint(71, 75),
                      75,
                      random.randint(76, 80),
                      80,
                      random.randint(81, 100)]
    
    for i in range(0, len(SPEEDS_TO_TEST)):
        print(""-------------------------------"")
        print(""Test"", i+1)
        print(""-------------------------------"")
        speed = SPEEDS_TO_TEST[i]
        output, error_message = autograder.run_script(""lsn8_speeding.py"", [speed])
        
        if output.strip() == solution(speed):
            print(""SUCCESS!\n"")
            num_tests_passed += 1
        else:
            print(""INCORRECT.  Expected:"", solution(speed), ""\n"")
    
    return round(num_tests_passed * (100 / len(SPEEDS_TO_TEST)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
12,lsn8_skill2,2,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a program that gets the user's body temperature. If the body temperature is between 97-99 (inclusive), print ""Normal"". Otherwise, print&nbsp;""Abnormal""</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

# The Actual Solution
def solution(gpa, apa, mpa):
    if gpa < 2.0 or apa < 2.0 or mpa < 2.0:
        return ""Probation""
    else:
        return ""No Probation""


def run_test(gpa, apa, mpa):
    global num_tests_run, num_tests_passed
    
    num_tests_run += 1
    
    print(""--------------------------------------------"")
    print(""Testing GPA ="", str(gpa) + "";"", ""APA ="", str(apa) + "";"", ""MPA ="", mpa)
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn8_skill2.py"", [gpa, apa, mpa], False)
        
    print(output.strip())
        
    if output.strip() == solution(gpa, apa, mpa):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT.  Expected:"", solution(gpa, apa, mpa), ""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    #round(random.uniform(0.1, 1.9),1)
    #round(random.uniform(2.1, 4.0),1)
    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1))
    run_test(round(random.uniform(0.1, 1.9),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1))
    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(0.1, 1.9),1), round(random.uniform(2.1, 4.0),1))
    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(0.1, 1.9),1))

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
13,lsn8_skill1,2,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a program that gets the user's body temperature. If the body temperature is between 97-99 (inclusive), print ""Normal"". Otherwise, print&nbsp;""Abnormal""</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

# The Actual Solution
def solution(body_temperature):
    if body_temperature >= 97 and body_temperature <= 99:
        return ""Normal""
    else:
        return ""Abnormal""


def run_test(body_temperature):
    global num_tests_run, num_tests_passed
    
    num_tests_run += 1
    
    print(""--------------------------------------------"")
    print(""Testing Temperature ="", body_temperature)
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn8_skill1.py"", [body_temperature], False)
        
    if output.strip() == solution(body_temperature):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT.  Expected:"", solution(body_temperature), ""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(96.9)
    run_test(97)
    run_test(98.5)
    run_test(99)
    run_test(99.1)

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
14,lsn8_roundtrip,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a Python program that gets three values from the user:</p>
<ul>
<li>The distance to a destination (in miles)</li>
<li>The amount of fuel in the user's car (in gallons)</li>
<li>The # of miles the user's car can travel per gallon of gas (i.e., Miles Per Gallon)</li>
</ul>
<p>You may assume that all inputs are non-negative numbers.</p>
<p>Calculate the amount of fuel needed to reach the destination. Then output whether or not the user needs to refuel during a round trip, using the below table as a guide:</p>
<table>
<thead>
<tr>
<td>Fuel Consumed (One-Way)</td>
<td>=&lt; 50%</td>
<td>&gt; 50% and &lt;= 100%</td>
<td>&gt; 100%</td>
</tr>
</thead>
<tbody>
<tr>
<td>Output</td>
<td>No Refueling Needed</td>
<td>Refuel on Way Back</td>
<td>Refuel En Route</td>
</tr>
</tbody>
</table>
<p><strong>EXAMPLES:</strong></p>
<table>
<thead>
<tr>
    <th></th>
<td>Example 1</td>
<td>Example 2</td>
<td>Example 3</td>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>100<br />10<br />30</td>
<td>100<br />5<br />20</td>
<td>100<br />7<br />10</td>
</tr>
<tr>
<td>Output</td>
<td>No Refueling Needed</td>
<td>Refuel on Way Back</td>
<td>Refuel En Route</td>
</tr>
</tbody>
</table>
<p><strong>NOTE: Your Output Must Match Exactly</strong></p>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
            
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 1"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn8_roundtrip.py"", [100,10,30])
    
    if output.strip() == ""No Refueling Needed"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect.  Expected: No Refueling Needed\n"")
        
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 2"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn8_roundtrip.py"", [100,5,20])
    
    if output.strip() == ""Refuel on Way Back"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect.  Expected: Refuel on Way Back\n"")
    
        # Runs the Script
    print(""-------------------------------"")
    print(""Test 3"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn8_roundtrip.py"", [100,7,10])
    
    if output.strip() == ""Refuel En Route"":
        print(""CORRECT\n"")
        points_earned += 34
    else:
        print(""Incorrect.  Expected: Refuel En Route\n"")

    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)






",100,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
15,lsn8_lists,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write an algorithm that gets a decimal GPA, APA, and MPA from the user (in that order). You may assume that all inputs are non-negative whole numbers.</p>
<p>It then reports which meritorious list the cadet is on. If the GPA is equal to or above 3.0, the cadet is on the &ldquo;Dean&rsquo;s List&rdquo;, and if the APA is equal to or above 3.0, the cadet is on the &ldquo;Athletic Director&rsquo;s List&rdquo;, and if the MPA is equal to or above 3.0, the cadet is on the &ldquo;Commandant&rsquo;s List&rdquo;. Finally, if the cadet qualifies for all three individual lists, then the cadet is on the &ldquo;Superintendent&rsquo;s List&rdquo;. The algorithm should report all the lists the cadet is on (in the order defined above), unless the cadet is on the Superintendents List, in which case, it should report only, &ldquo;Superintendent&rsquo;s List&rdquo;.</p>
<table width=""1"">
<thead>
<tr>
    <th></th>
<th>No List</th>
<th>Dean's List</th>
<th>Athletic Director's List</th>
<th>Commandant's List</th>
<th>Superintendent's List</th>
</tr>
</thead>
<tbody>
<tr>
<td>GPA</td>
<td>&lt; 3.0</td>
<td>&gt;= 3.0</td>
<td>n/a</td>
<td>n/a</td>
<td>&gt;= 3.0</td>
</tr>
<tr>
<td>APA</td>
<td>&lt; 3.0</td>
<td>n/a</td>
<td>&gt;= 3.0</td>
<td>n/a</td>
<td>&gt;= 3.0</td>
</tr>
<tr>
<td>MPA</td>
<td>&lt; 3.0</td>
<td>n/a</td>
<td>n/a</td>
<td>&gt;= 3.0</td>
<td>&gt;= 3.0</td>
</tr>
</tbody>
</table>
<p><strong>EXAMPLES:</strong></p>
<table>
<thead>
<tr>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
<th>Example 4</th>
<th>Example 5</th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>2.8<br />2.6<br />2.5</td>
<td>3.5<br />3.2<br />2.8</td>
<td>3.3<br />2.8<br />3.4</td>
<td>3.6<br />3.8<br />3.2</td>
<td>2.8<br />3.5<br />3.8</td>
</tr>
<tr>
<td>Output</td>
<td>No List</td>
<td>Dean's List<br />Athletic Director's List</td>
<td>Dean's List<br />Commandant's List</td>
<td>Superintendent's List</td>
<td>Athletic Director's List<br />Commandant's List</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0

# The Actual Solution
def solution(gpa, apa, mpa):
    answer = """"
    
    # Determines what output to present (note how we are using the "" character because of the 's)
    if (gpa < 3.0 and apa < 3.0 and mpa < 3.0):
        answer += ""No List\n""
    elif (gpa >= 3.0 and apa >= 3.0 and mpa >= 3.0):
        answer += ""Superintendent's List\n""
    else:
        # Note that these are 3 separate if statements; we do this because we don't know what list(s) the cadet is on
        if (gpa >= 3.0):
            answer += ""Dean's List\n""
        
        if (apa >= 3.0):
            answer += ""Athletic Director's List\n""
        
        if (mpa >= 3.0):
            answer += ""Commandant's List\n""

    return answer.strip()


def run_test(gpa, apa, mpa):
    global num_tests_passed
    
    print(""--------------------------------------------"")
    print(""Testing GPA ="", str(gpa) + "";"", ""APA ="", str(apa) + "";"", ""MPA ="", mpa)
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn8_lists.py"", [gpa, apa, mpa])
        
    if output.strip() == solution(gpa, apa, mpa):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT.  Expected:"", solution(gpa, apa, mpa), ""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(2.8, 2.6, 2.5)
    run_test(3.5, 3.2, 2.8)
    run_test(3.3, 2.8, 3.4)
    run_test(3.6, 3.8, 3.2)
    run_test(2.8, 3.5, 3.8)
    
    return round(num_tests_passed * (100 / 5), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)






",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
16,lsn8_fuel,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Write an algorithm that gets a fuel load (in lbs) and then a distance to base (in nautical miles). You may assume all inputs are non-negative numbers.</p>
<p>It then outputs what kind of action the pilot should take. If the fuel load is less than 50 lbs and the distance to base is less than 70 nm, report &ldquo;Return to base&rdquo;, otherwise, report &ldquo;Resume flight&rdquo;.&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table>
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
<th>Example 4</th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>30<br />60</td>
<td>60<br />60</td>
<td>40<br />80</td>
<td>60<br />80</td>
</tr>
<tr>
<td>Output</td>
<td>Return to base</td>
<td>Resume flight</td>
<td>Resume flight</td>
<td>Resume flight</td>
</tr>
</tbody>
</table>
<p><strong>Note: Output must match exactly.</strong></p>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
            
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 1"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn8_fuel.py"", [30,60])
    
    if output.strip() == ""Return to base"":
        print(""CORRECT\n"")
        points_earned += 25
    else:
        print(""Incorrect.  Expected: Return to base\n"")
        
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 2"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn8_fuel.py"", [60,60])
    
    if output.strip() == ""Resume flight"":
        print(""CORRECT\n"")
        points_earned += 25
    else:
        print(""Incorrect.  Expected: Resume flight\n"")
    
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 3"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn8_fuel.py"", [40,80])
    
    if output.strip() == ""Resume flight"":
        print(""CORRECT\n"")
        points_earned += 25
    else:
        print(""Incorrect.  Expected: Resume flight\n"")

    # Runs the Script
    print(""-------------------------------"")
    print(""Test 4"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn8_fuel.py"", [60,80])
    
    if output.strip() == ""Resume flight"":
        print(""CORRECT\n"")
        points_earned += 25
    else:
        print(""Incorrect.  Expected: Resume flight\n"")

    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
17,lsn7_skill2,2,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a program that gets a course name and number (e.g., Math 243) from the user. Modify the program to do the following:</p>
<ul>
<li>If the course name is equal to ""CS110"", print ""You get to program!""</li>
<li>Otherwise, print ""Boo, no programming.""</li>
</ul>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
            
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 1 - CS110"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn7_skill2.py"", [""CS110""])
    
    if output.strip() == ""You get to program!"":
        print(""CORRECT\n"")
        points_earned += 50
    else:
        print(""Incorrect.  Expected: You get to program!\n"")
        
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 2 - Another Class"")
    print(""-------------------------------"")
    classes = ['Math 151', 'English 111', 'Physics 110']
    random_class = classes[random.randint(0, len(classes)-1)]
    output, error_message = autograder.run_script(""lsn7_skill2.py"", [random_class])
    
    if output.strip() == ""Boo, no programming."":
        print(""CORRECT\n"")
        points_earned += 50
    else:
        print(""Incorrect.  Expected: Boo, no programming.\n"")

    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)






",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
18,lsn7_skill1,2,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a program that gets a temperature from the user. Modify the program to do the following:</p>
<ul>
<li>If the temperature is less than or equal to 32, print ""Water Has Frozen""</li>
<li>Otherwise (i.e., else), print ""Above Water's Freezing Point""</li>
</ul>
</div>","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
    
    # Generates Random Values
    above_freezing = random.uniform(33, 100)
    below_freezing = random.uniform(-100, 31)
    at_freezing    = 32
        
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 1 - Below Freezing"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn7_skill1.py"", [below_freezing])
    
    if output.strip() == ""Water Has Frozen"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect.  Expected: Water Has Frozen\n"")
        
    
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 2 - Above Freezing"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn7_skill1.py"", [above_freezing])
    
    if output.strip() == ""Above Water's Freezing Point"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect.  Expected: Above Water's Freezing Point\n"")
        
    
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 3 - Exactly 32 Degrees"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn7_skill1.py"", [32])
    
    if output.strip() == ""Water Has Frozen"":
        print(""CORRECT"")
        points_earned += 34
    else:
        print(""Incorrect.  Expected: Water Has Frozen\n"")

    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)









# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
19,lsn7_positive,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a Python&nbsp;<strong>program</strong>&nbsp;that gets a floating point number from the user:</p>
<ul>
<li>If the number is positive, print the word&nbsp;<code>POSITIVE</code></li>
<li>Otherwise, print the word&nbsp;<code>NOT POSITIVE</code></li>
</ul>
<table>
<thead>
<tr>
    <th></th>
<td>Example 1</td>
<td>Example 2</td>
<td>Example 3</td>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>10</td>
<td>-5</td>
<td>0</td>
</tr>
<tr>
<td>Output</td>
<td>POSITIVE</td>
<td>NOT POSITIVE</td>
<td>NOT POSITIVE</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
    
    # Generates Random Values
    negative_value = random.randint(-100, -1)
    positive_value = random.randint(1, 100)
        
    # Runs the Script
    print(""-------------------------------"")
    print(""# Test 1 - Positive Number"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn7_positive.py"", [positive_value])
    
    if output.strip() == ""POSITIVE"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect Output:"", output)
        print(""Expected POSITIVE\n"")
        
    
    # Runs the Script
    print(""-------------------------------"")
    print(""# Test 2 - Negative Number"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn7_positive.py"", [negative_value])
    
    if output.strip() == ""NOT POSITIVE"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect Output:"", output)
        print(""Expected NOT POSITIVE\n"")
        
    
    # Runs the Script
    print(""-------------------------------"")
    print(""# Test 3 - Zero"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn7_positive.py"", [0])
    
    if output.strip() == ""NOT POSITIVE"":
        print(""CORRECT"")
        points_earned += 34
    else:
        print(""Incorrect Output:"", output)
        print(""Expected NOT POSITIVE\n"")

    return points_earned

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
20,lsn7_largest,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a program that takes three integers as parameters, and prints the largest (i.e., highest) number.</p>
<p>Ex: If the input is:</p>
<pre><code>7
15
3
</code></pre>
<p>Your function should return:</p>
<pre><code>15
</code></pre>
<p><br />In the event that all 3 numbers are the same, output that number.</p>
<p>Ex: If the input is:</p>
<pre><code>5
5
5
</code></pre>
<p>Your function should return:</p>
<pre><code>5</code></pre>
<p></p>
</div>","from cs110 import autograder
import random, math


def run_test(num1, num2, num3):
    print(""-------------------------------"")
    print(""# Testing: "" + str(num1) + "" "" + str(num2) + "" "" + str(num3))
    print(""-------------------------------"")
    
    output, error_message = autograder.run_script(""lsn7_largest.py"", [num1, num2, num3])
    
    if autograder.equals(output, max(num1, num2, num3)):
        print(""CORRECT\n"")
        return True
    else:
        print(""Incorrect.  Expected"", max(num1, num2, num3))
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    tests_passed = 0
    
    # Generate 3 Random Numbers
    num1 = 0
    num2 = 0
    num3 = 0
    
    # Ensures that the 3 Numbers are Different
    while num1 == num2 or num1 == num3 or num2 == num3:
        num1 = random.randint(0, 100)
        num2 = random.randint(0, 100)
        num3 = random.randint(0, 100)
    
    # Sorts the numbers
    # This is needed so that we can test relationships between numbers
    numbers = [num1, num2, num3]
    numbers.sort()
    num1 = numbers[0]
    num2 = numbers[1]
    num3 = numbers[2]
    
    # Test 1:  num1, num2, num3
    if run_test(num1, num2, num3):
        tests_passed += 1

    # Test 2:  num1, num3, num2
    if run_test(num1, num3, num2):
        tests_passed += 1
        
    # Test 3:  num2, num3, num1
    if run_test(num2, num3, num1):
        tests_passed += 1
    
    # Test 4:  num3, num1, num2
    if run_test(num3, num1, num2):
        tests_passed += 1

    # Test 5:  num2, num1, num3
    if run_test(num2, num1, num3):
        tests_passed += 1
    
    # Test 6:  3 Equal Numbers
    if run_test(num1, num1, num1):
        tests_passed += 1
            
    print(""Passed "" + str(tests_passed) + "" out of 6 tests"")
    return round(tests_passed * (100 / 6), 1)
    
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
21,lsn7_classyear,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Using the below table as a guide, write a Python program that takes the user's class year as input, and outputs their cadet class. If the class year is before 2021, output ""Graduate"". Alternatively, if the class year is larger than 2024, output ""Not a Cadet"".</p>
<p>You may assume that all inputs provided to your application are years (represented as Integers)</p>
<table>
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
<th>Example 4</th>
<th>Example 5</th>
<th>Example 6</th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>2021</td>
<td>2022</td>
<td>2023</td>
<td>2024</td>
<td>2020</td>
<td>2025</td>
</tr>
<tr>
<td>Output</td>
<td>Firstie</td>
<td>Two Degree</td>
<td>Three Degree</td>
<td>Four Degree</td>
<td>Graduate</td>
<td>Not a Cadet</td>
</tr>
</tbody>
</table>
<p></p>
</div>","from cs110 import autograder
import random, math


def solution(class_year):
    if class_year < 2021:
        return ""Graduate""
    elif class_year == 2021:
        return ""Firstie""
    elif class_year == 2022:
        return ""Two Degree""
    elif class_year == 2023:
        return ""Three Degree""
    elif class_year == 2024:
        return ""Four Degree""
    else:
        return ""Not a Cadet""

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    START_YEAR = 2020
    END_YEAR = 2025
    number_correct = 0
    
    for year in range(START_YEAR, END_YEAR + 1):
        print(""------------------------------"")
        print(""Testing: "" + str(year))
        print(""------------------------------"")
        
        # Runs the Script
        output, error_message = autograder.run_script(""lsn7_classyear.py"", [year])
                
        lines = output.split(""\n"")
               
        if lines[0] == solution(year):
            print(""PASS\n"")
            number_correct += 1
        else:
            print(""FAIL\n"")
    
    print(""Passed "" + str(number_correct) + "" out of "" + str(END_YEAR - START_YEAR + 1) + "" tests"")
    return round(number_correct * (100 / (END_YEAR - START_YEAR + 1)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
22,lsn7_atmosphere,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>The Earth's atmosphere is divided into a series of layers. Write an algorithm that asks the user for the altitude in kilometers. Then output the corresponding layer according to the following table:</p>
<table width="""">
<thead>
<tr>
<th>Altitude</th>
<th>&le;10km</th>
<th>&gt;10km&amp;&le;50km</th>
<th>&gt;50km&amp;&le;85km</th>
<th>&gt;85km&amp;&le;1000km</th>
<th>&gt;1000km&amp;&le;100,000km</th>
<th>&gt;100,000km</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Layer</strong></td>
<td>Troposphere</td>
<td>Stratosphere</td>
<td>Mesosphere</td>
<td>Thermosphere</td>
<td>Exosphere</td>
<td>Space</td>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random, math

def solution(altitude):
    if altitude >= 0:
        if altitude <= 10:
            return ""Troposphere""
    if altitude >= 11:
        if altitude <= 50:
            return ""Stratosphere""
    if altitude >= 51:
        if altitude <= 85:
            return ""Mesosphere""
    if altitude >= 86:
        if altitude <= 1000:
            return ""Thermosphere""
    if altitude >= 1001:
        if altitude <= 100000:
            return ""Exosphere""
        else:
            return ""Space""
        
# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    TEST_VALUES = [0, 1, 10, 11, 50, 51, 85, 86, 1000, 1001, 100000, 100001]
    tests_passed = 0
    
    for altitude in TEST_VALUES:
        print(""--------------------------"")
        print(""Testing "" + str(altitude) + "" km"")
        print(""--------------------------"")
        
        # Runs the Script
        output, error_message = autograder.run_script(""lsn7_atmosphere.py"", [altitude])
                               
        # Your Test Goes Here (Return True if Pass, False Otherwise)   
        if output.strip() == solution(altitude):
            print(""Passed\n"")
            tests_passed += 1
        else:
            print(""Failed (Expected: "" + solution(altitude) + "")\n"")
    
    print(""Passed"", tests_passed, ""out of"", len(TEST_VALUES), ""tests."")
    return round(tests_passed * (100 / len(TEST_VALUES)), 2)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
23,lsn6_temperature,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Write an algorithm that prompts the user for a temperature in &deg;F and then outputs K and &deg;C in that order.</p>
<p><strong>EXAMPLE:</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>Example 1</th>
<th>Example 2</th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>32</td>
<td>0</td>
</tr>
<tr>
<td>Output</td>
<td>273.15<br />0</td>
<td>255.372<br />-17.778</td>
</tr>
</tbody>
</table>
<p><strong>Note: Output must match within a predefined tolerance.</strong></p>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    degrees_farenheit = random.random() * 451.0
    degrees_celsius = (degrees_farenheit - 32.0) * 5/9
    degrees_kelvin = degrees_celsius + 273.15
        
    # Runs the Script
    output, error_message = autograder.run_script(""lsn6_temperature.py"", [degrees_farenheit])
    
    lines = output.split('\n')
    
    if autograder.equals(lines[0], degrees_kelvin):
        print(""Conversion to Kelvin looks good."")
        if autograder.equals(lines[1], degrees_celsius):
            print(""Conversion to Celsius looks good."")
            return 100.0
        else:
            print(""Conversion to Celsius incorrect.\nYour result: "" + str(lines[1]) + ""\nExpected: "" + str(degrees_celsius))
            return 50.0
    else:
        if autograder.equals(lines[0], degrees_celsius):
            print(""Looks like you swapped the order of your output. Look at the Problem Statement and try again."")
        else:
            print(""Conversion to Kelvin incorrect.\nYour result: "" + str(lines[0]) + ""\nExpected: "" + str(degrees_kelvin))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)










# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
24,lsn6_skill2,2,skill,0,"<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a template that gets a distance and speed from the user, and calculates the travel time. Unfortunately, the code&nbsp;does not work. Analyze the code (and error message) and fix the problem.</p>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    # Generates Random Values
    distance = random.uniform(100, 200)
    speed = random.uniform(20, 50)
    time = distance / speed
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn6_skill2.py"", [distance, speed])
    
    if autograder.equals(output, time):
        print(""PASSED"")
        return 100
    else:
        print(""Incorrect Output, Expected"", time)
        return 0


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
25,lsn6_skill1,2,skill,0,<p><strong>PROBLEM STATEMENT:<br /></strong>Prompt the user for 3 different values. Store the values in variables using the names specified within the template. DO NOT include any prompts when asking for a value from the user.</p>,"from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    points_earned = 0   
    
    output, error = autograder.run_script(""lsn6_skill1.py"", ['abc', 123, 123.45])
    
    lines = output.split(""\n"")
    
    if (lines[0] == ""<class 'str'>""):
        points_earned += 33
        print(""my_string correct!"")
    else:
        print(""my_string is either not present, or is not the correct data type"")
    
    if (lines[1] == ""<class 'int'>""):
        points_earned += 33
        print(""my_integer correct!"")
    else:
        print(""my_integer is either not present, or is not the correct data type"")
        
    if (lines[2] == ""<class 'float'>""):
        points_earned += 34
        print(""my_float correct!"")
    else:
        print(""my_float is either not present, or is not the correct data type"")
        
    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
26,lsn6_projectile,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Write a python program that can calculate the range of a projectile when fired from an artillery on level ground. Your program will ask the user to input the initial velocity (<code>v</code>) and angle in degrees (<code>theta</code>). Your program should then calculate and print the range using the following formula:</p>
<p><code>range = (v^2 * sin(2 * theta)) / 9.8</code><br /><strong>WARNING: The above formula is not valid Python.</strong><br /><br /></p>
<table>
<thead>
<tr>
<th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Input</th>
<th>800<br />45</th>
<th>600<br />30</th>
<th>535.2<br />81.7</th>
</tr>
<tr>
<th>Output</th>
<th>65306.122</th>
<th>31813.178</th>
<th>8350.235</th>
</tr>
</tbody>
</table>
<p><strong>Hints</strong></p>
<ul>
<li>You need to use the&nbsp;<code>math</code>&nbsp;module's trig functions to solve this problem. Type&nbsp;<code>import math</code>&nbsp;at the top of your code to add it to your program.</li>
<li>The&nbsp;<code>sin()</code>&nbsp;and&nbsp;<code>cos()</code>&nbsp;functions assume that the angle is in&nbsp;<strong>radians</strong></li>
</ul>
</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 5
    num_correct = 0
    
    for i in range(NUM_TESTS):
        # Generates Random Values
        velocity = random.randint(400, 900)
        theta = random.random() * 90.0
        answer = (velocity**2 * math.sin(2 * theta * math.pi/180.0)) / 9.8   
            
        print(""----------------------------------------"")
        print(""TEST CASE"", i+1)
        print(""----------------------------------------"")
        
        # Runs the Script
        output, error_message = autograder.run_script(""lsn6_projectile.py"", [velocity, theta])

        # Optional:  Displays the Error Message (if one is provided)
        if error_message != '':
            print(""Error Occurred: "" + error_message)    
        
        lines = output.split('\n')
        
        if autograder.equals(lines[0], answer):
            print(""CORRECT.\n\n"")
            num_correct += 1
        else:
            print(""INCORRECT (Expected: "" + str(answer) + "")\n\n"")
    
    return (100 / NUM_TESTS) * num_correct
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
27,lsn6_math,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Given three floating-point numbers x, y, and z, output the square root of x, the absolute value of (y minus z) , and the factorial of (the ceiling of z). Each input should be on a new line, and rounded to a maximum of 2 decimal places.</p>
<p>(Hint: use the&nbsp;<a href=""https://docs.python.org/3/library/functions.html#round"" target=""_blank"" rel=""noreferrer noopener""><code>round</code>&nbsp;(Links to an external site.)</a>&nbsp;function to round your outputs!):</p>
<p><code>round(# to round, # of digits to round to)</code></p>
<p><strong>EXAMPLE:</strong></p>
<pre><code>5.0
6.5
3.2
</code></pre>
<p>Then the output is:</p>
<pre><code>2.24
3.30
24.00
</code></pre>
<p>NOTE: Decimal places may be slightly off depending on the exact numbers used.</p>
</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num1 = random.random() * 100.0
    num2 = random.random() * 100.0
    num3 = random.random() * 10.0
    
    part1 = round(math.sqrt(num1), 2)
    part2 = round(math.fabs(num2 - num3), 2)
    part3 = round(math.factorial(math.ceil(num3)), 2)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn6_math.py"", [num1, num2, num3])
    
    lines = output.split('\n')
    
    if autograder.equals(lines[0], part1, 0.001) and autograder.equals(lines[1], part2, 0.001) and autograder.equals(lines[2], part3, 0.001):
        print(""Looks Good!"")
        return 100
    else:
        print(""One or more calculations did not work. Expected:\n"" + str(part1) + ""\n"" + str(part2) + ""\n"" + str(part3))
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
28,lsn6_calories,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>The following equations estimate the calories burned when exercising (<a href=""https://web.archive.org/web/20121021230025/http://fitnowtraining.com/2012/01/formula-for-calories-burned/"" target=""_blank"" rel=""noreferrer noopener"">source&nbsp;(Links to an external site.)</a>):</p>
<p>Men: Calories = ( (Age x 0.2017) + (Weight x 0.09036) + (Heart Rate x 0.6309) &mdash; 55.0969 ) x Time / 4.184</p>
<p>Women: Calories = ( (Age x 0.074) &mdash; (Weight x 0.05741) + (Heart Rate x 0.4472) &mdash; 20.4022 ) x Time / 4.184</p>
<p>Write a program using inputs age (years), weight (pounds), heart rate (beats per minute), and time (minutes), respectively. Output calories burned for men and women.</p>
<p>Output each floating-point value (your program will be marked correct so long as it outputs a value within a predefined range)</p>
<p><strong>EXAMPLE: </strong></p>
<p>If the input is:</p>
<pre><code>49
155
148
60
</code></pre>
<p>Then the output is:</p>
<pre><code>891.47
580.94</code></pre>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    age_years = random.randint(10, 99)
    weight_pounds = random.randint(80, 400)
    heart_bpm = random.randint(50, 140)
    time_minutes = random.randint(15, 90)
    
    calories_man   = ( (age_years * 0.2017) + (weight_pounds * 0.09036) + (heart_bpm * 0.6309) - 55.0969 )  * time_minutes / 4.184
    calories_woman = ( (age_years * 0.074)  - (weight_pounds * 0.05741) + (heart_bpm * 0.4472) - 20.4022 ) * time_minutes / 4.184
        
    # Runs the Script
    output, error_message = autograder.run_script(""lsn6_calories.py"", [age_years, weight_pounds, heart_bpm, time_minutes])
      
    lines = output.split('\n')
      
    if autograder.equals(lines[0], calories_man):
        print(""Male Calorie Calculations Look Good."")
        if autograder.equals(lines[1], calories_woman):
            print(""Female Calorie Calculations Look Good."")
            return 100.0
        else:
            print(""Female Calorie Calculation is Incorrect.\nExpected: "" + str(calories_woman))
            return 50.0
    else:
        print(""Male Calorie Calculation is Incorrect.\nExpected: "" + str(calories_man))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
29,lsn6_bits_to_kmg,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>One byte is comprised of 8 bits. A typical computer program has a requirement for much more memory. Therefore, many bytes can be grouped together to make larger memory amounts. Our convention is for computer memory is scaled in logical increments of 2<sup>10</sup>&nbsp;= 1024.</p>
<p>For example:</p>
<ul>
<li>1024 bytes = 1 kilobyte (KB)</li>
<li>1024 KB = 1 megabyte (MB)</li>
<li>1024 MB = 1 gigabyte (GB)</li>
</ul>
<p>Write an algorithm that prompts the user for a number of bits and then outputs the equivalent number of kilobytes, megabytes, and gigabytes.</p>
<p><strong>EXAMPLE:</strong></p>
<table>
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>1000000</td>
<td>6879000</td>
<td>92445694</td>
</tr>
<tr>
<td>Output</td>
<td>122.07<br />0.12<br />0.00012</td>
<td>839.72<br />0.82<br />.0008</td>
<td>11,284.87<br />11.02<br />0.01</td>
</tr>
</tbody>
</table>
<p><strong>Note: Output must match within a predefined tolerance.</strong></p>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_bits = random.randint(1, 1000000)
    num_bytes = num_bits / 8
    num_kb = num_bytes / 1024
    num_mb = num_kb / 1024
    num_gb = num_mb / 1024
        
    # Runs the Script
    output, error_message = autograder.run_script(""lsn6_bits_to_kmg.py"", [num_bits])
      
    lines = output.split('\n')
      
    if autograder.equals(lines[0], num_kb):
        print(""Kilobyte Conversion Looks Good."")
        if autograder.equals(lines[1], num_mb):
            print(""Megabyte Conversion Looks Good."")
            if autograder.equals(lines[2], num_gb):
                print(""Gigabyte Conversion Looks Good."")
                return 100.0
            else:
                print(""Num GB is Incorrect.\n  Expected: "" + str(num_gb))
                return 67.0
        else:
            print(""Num MB is Incorrect.\n  Expected: "" + str(num_mb))
            return 33.0
    else:
        print(""Num KB is Incorrect.\n  Expected: "" + str(num_kb))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
30,lsn6_bits_to_bytes,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>The basic unit of computer memory is a bit. A bit can represent two values (on or off, 0 or 1). To represent more information, bits are grouped together in larger quantities. Beyond a bit, the next logical grouping is a byte, where 1 byte has 8 bits. Write an algorithm that prompts the user for a number of bits and then outputs the equivalent number of bytes.</p>
<p><strong>EXAMPLE:</strong></p>
<table width="""">
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>8</td>
<td>800</td>
<td>7234</td>
</tr>
<tr>
<td>Output</td>
<td>1.0</td>
<td>100.0</td>
<td>904.25</td>
</tr>
</tbody>
</table>
<p><strong>Note: Output must match exactly.</strong></p>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_bits = random.randint(1, 1000000)
    num_bytes = num_bits / 8

    # Runs the Script
    output, error_message = autograder.run_script(""lsn6_bits_to_bytes.py"", [num_bits])
      
    if autograder.equals(output, num_bytes):
        print(""Num Bytes Looks Good."")
        return 100.0
    else:
        print(""Num Bytes is Incorrect.\nExpected: "" + str(num_bytes))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
31,lsn6_bit_representation,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>One way bits can hold information is computer images. Computer images are composed of a grid of small, independent colored cells known as pixels. The number of colors each pixel can hold is related to the number bits allocated to each pixel. A simple black and white image, for example, would have a single bit per pixel, where the value of the bit would represent black or white for that pixel. Allocating 2 bits per pixel would allow each pixel to have one of four colors.</p>
<p>Generally speaking, the number of color options available to a particular pixel can be described as:</p>
<pre>numberofcolors = 2<sup>number of bits</sup></pre>
<p>In Python, write an algorithm that prompts the user for a number of bits and then outputs the number of different colors that could be represented by a single pixel.</p>
<p><strong>EXAMPLE:</strong></p>
<table width="""">
<thead>
<tr>
<th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>3</td>
<td>8</td>
<td>24</td>
</tr>
<tr>
<td>Output</td>
<td>8</td>
<td>256</td>
<td>16777216</td>
</tr>
</tbody>
</table>
<p><strong>Note: Output must match exactly.</strong></p>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_bits = random.randint(1, 32)
    num_colors = 2 ** num_bits

    # Runs the Script
    output, error_message = autograder.run_script(""lsn6_bit_representation.py"", [num_bits])
      
    if autograder.equals(output, num_colors):
        print(""Num Colors Looks Good."")
        return 100.0
    else:
        print(""Num Colors is Incorrect.\nExpected: "" + str(num_colors))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
32,lsn5_skill2,2,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a program that gets a cadet's age, and stores it in a variable called&nbsp;<strong>your_age.</strong></p>
<p>Print the user's age + 4.&nbsp;</p>
<p>For example, if the user types:</p>
<pre> 18</pre>
<p>Your program should print:</p>
<pre>22</pre>
</div>","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    # Generates Random Values
    age = random.randint(18, 30)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn5_skill2.py"", [age])
    
    if autograder.equals(output, age+4):
        print(""PASSED"")
        return 100
    elif autograder.equals(output, age):
        print(""Close!  You forgot to add 4 to the age before printing it out"")
        return 50
    else:
        print(""Incorrect Output, Expected"", age+4)
        return 0


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
33,lsn5_skill1,2,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Create a variable called&nbsp;<strong>name,&nbsp;</strong>and set it equal to your name (represented as a string--don't forget to use the quotation marks!).</p>
</div>","from cs110 import autograder
import random

from lsn5_skill1 import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    points_earned = 0   
    
    print(""Looking for a variable called 'name' . . . "", end='')
    
    if 'name' in globals():
        points_earned += 50
        print(""FOUND!"")
        print(""Now, checking to make sure your name is a string"")
        
        if type(name).__name__ == 'str':
            points_earned += 50
            print(""Good Job"", name + ""!"")
        else:
            print(""Make sure you are surrounding your name with quotation marks"")
    else:
        print(""NOT FOUND :("")
        
    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
34,lsn5_scoreaverage,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write an algorithm that prompts the user for three sports game scores and outputs the average.</p>
<p><br /><strong>EXAMPLE:</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>8<br />15<br />12</td>
<td>89<br />103<br />63</td>
<td>14<br />42<br />36</td>
</tr>
<tr>
<td>Output</td>
<td>11.666666666666666</td>
<td>85.0</td>
<td>30.666666666666668</td>
</tr>
</tbody>
</table>
<p><strong>Note: Output must match (within a predefined tolerance).</strong></p>
</div>","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    score1 = random.randint(0, 100)
    score2 = random.randint(0, 100)
    score3 = random.randint(0, 100)
    average = (score1 + score2 + score3) / 3.0
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn5_scoreaverage.py"", [score1, score2, score3])
    
    if autograder.equals(output, average):
        print(""PASSED!"")
        return 100
    else:
        print(""Value doesn't match.\nExpected: "" + str(average))
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
35,lsn5_pointspread,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>A ""Point Spread"" is a term used to in sports (and gambling) to describe the difference between two teams' scores. For example, if one team scores 20 points and another team scores 30 points, the point spread is 10. A point spread is always a positive number.</p>
<p>Write an algorithm that prompts the user for two sports game scores and outputs the point spread. <br /><br /><strong><br />EXAMPLE:</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Input</th>
<th>8<br />15</th>
<th>89<br />103</th>
<th>42<br />14</th>
</tr>
<tr>
<th>Output</th>
<th>7</th>
<th>14</th>
<th>28</th>
</tr>
</tbody>
</table>
<p><strong>Note: Output must match exactly.</strong></p>
</div>","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    score1 = random.randint(0, 50)
    score2 = random.randint(score1, 100)
    spread = abs(score1 - score2)

    points_earned = 0

    # Trial #1:  score 1 > score2
    print(""Testing when score 1 is bigger than score 2 . . ."")
    output, error_message = autograder.run_script(""lsn5_pointspread.py"", [score1, score2])
    
    if autograder.equals(output, spread):
        print(""PASSED!\n"")
        points_earned += 50
    else:
        print(""Value doesn't match.\nExpected: "" + str(spread)  + ""\n"")
        
    # Trial #2:  score 2 > score1
    print(""Testing when score 2 is bigger than score 1 . . ."")
    output, error_message = autograder.run_script(""lsn5_pointspread.py"", [score2, score1])
    
    if autograder.equals(output, spread):
        print(""PASSED!"")
        points_earned += 50
    else:
        print(""Value doesn't match.\nExpected: "" + str(spread))
    
    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
36,lsn5_madlib,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Mad Libs are activities that have a person provide various words, which are then used to complete a short story in unexpected (and hopefully funny) ways. (EDITOR'S NOTE: Do you kids even do Mad Libs anymore?)</p>
<p>Complete the program to read the needed values from input, that the existing output statement(s) can use to output a short story.</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the input is:</p>
<pre><code>Eric
Chipotle
12
burritos
</code></pre>
<p>Then the output is:</p>
<pre><code>Eric went to Chipotle to buy 12 different types of burritos</code></pre>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    first_names = ['Adrian', 'Troy', 'Dave', 'Paul', 'Kelly', 'Steve', 'Barry']
    generic_locations = ['Best Buy', 'AAFES', 'Target', 'THE Walmart', 'Home Depot']
    nouns = ['Video Games', 'Board Games', 'Nintendo Switches', 'Sony PS4s', 'Microsoft (Ugh) Xbox Ones']
    
    first_name = first_names[random.randint(0, len(first_names) - 1)]
    generic_location = generic_locations[random.randint(0, len(generic_locations) - 1)]
    whole_number = random.randint(0, 100)
    plural_noun = nouns[random.randint(0, len(nouns) - 1)]

    expected_output = first_name + ' went to ' + generic_location + ' to buy ' + str(whole_number) + ' different types of ' + plural_noun + ""\n""

    # Runs the Script
    output, error_message = autograder.run_script(""lsn5_madlib.py"", [first_name, generic_location, whole_number, plural_noun])
    
    if output == expected_output:
        print(""PASSED!"")
        return 100
    else:
        print(""String doesn't match.\nExpected: "" + expected_output)
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


",100,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
37,lsn5_girlscouts,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a program that asks the user for the amount of money he/she has on hand, and outputs the number of girl scout cookies that he/she can purchase. Use the following prices:</p>
<p>$5 per box for the ""Super Six"" (Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, Savannah Smiles)<br />$6 per box for the Specialty Cookies (S'mores, Toffee-tastic)</p>
<p><strong>For this problem, assume that the user will buy all of one or the other. In other words, output the number of boxes that he/she would be able to obtain if he/she bought nothing but the Super Six, and nothing but the Specialty Cookies.</strong></p>
<p><strong>HINT:</strong><br />You can convert a number to an integer by using the int() function. For example:<br /><strong>int(2.51)</strong> will convert the number to 2</p>
<p>EXAMPLE:<br />If the input is:</p>
<pre>26</pre>
<p>Then the output is:</p>
<pre>5 boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles<br />4 boxes of S'mores and Toffee-tastic</pre>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    dollar_amount = round(random.uniform(10.00, 100.00), 2)
    super_six_amount = (dollar_amount // 5)
    specialty_amount = (dollar_amount // 6)
    score = 0
    
    line_1 = str(int(super_six_amount)) + "" boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles""
    line_2 = str(int(specialty_amount)) + "" boxes of S'mores and Toffee-tastic""
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn5_girlscouts.py"", [dollar_amount])
    output_lines = output.split('\n')
    
    if line_1 == output_lines[0]:
        print(""First Line is Correct"")
        score += 50
    else:
        print(""First Line is Incorrect.  Expected:"", line_1)
    
    if line_2 == output_lines[1]:
        print(""Second Line is Correct"")
        score += 50
    else:
        print(""Second Line is Incorrect.  Expected:"", line_2)
    
    return score
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
38,lsn5_arrivaltime,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write an algorithm that prompts the user for a distance to travel (in miles) and a speed (in mph) and outputs time of arrival in hours.</p>
<p><br /><strong>For Example:</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Input</th>
<th>72<br />60</th>
<th>1282<br />85</th>
<th>120.5<br />59.2</th>
</tr>
<tr>
<th>Output</th>
<th>1.2</th>
<th>15.0823</th>
<th>2.0355</th>
</tr>
</tbody>
</table>
<p><strong>Note: Output needs to match the examples.</strong></p>
</div>
","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    distance = round(random.random() * 1000, 1)
    speed = round(random.random() * 60, 1)
    time = distance / speed
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn5_arrivaltime.py"", [distance, speed])
    
    if autograder.equals(output, time):
        print(""PASSED!"")
        return 100
    else:
        print(""Value doesn't match.\nExpected: "" + str(time))
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
39,lsn4_printpractice,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:</strong></p>
<div>
<div>
<p>The template file contains various words/phrases that you need to print out (exactly as written) using Python's&nbsp;<code>print()</code>&nbsp;function. For example:</p>
<ol>
<li>
<p>Print the phrase ""Welcome to Computer Science 110!""</p>
</li>
<li>
<p>Print the result to the following math expression: (640 * 480 * 24) / 8</p>
</li>
<li>
<p>etc (see the template for details)</p>
</li>
</ol>
<p>Each print statement should be written directly below the corresponding comment. While you can technically ""cheat"" on this problem, we encourage you to practice all the various ways that you can use the&nbsp;<code>print</code>&nbsp;function. You will thank us later!</p>
</div>
</div>
</div>","from cs110 import autograder

def test_passed():
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_printpractice.py"", [])

    student_output = output.strip().split('\n')
    expected_output = ['Welcome to Computer Science 110!', '921600.0', 'Liam is 8 years old', 'F-15  Eagle', 'F-16  Fighting Falcon', 'B-2   Spirit', 'C-141 Starlifter']
    num_matches = autograder.compare_strings(student_output, expected_output)
    
    return round(num_matches * (100 / len(expected_output)), 1)


# Testbench (to be run in an IDE)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
40,lsn4_parking,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Write a program that prints a formatted ""No parking"" sign as shown below. Note the first line has two leading spaces. For ALL labs, end with newline (unless otherwise stated).</p>
<pre> NO PARKING<br />1:00 - 5:00 a.m.<br /><br /></pre>
</div>

","from cs110 import autograder

def test_passed():
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_parking.py"", [])
        
    if output.startswith(""  NO PARKING\n""):
        if output == ""  NO PARKING\n1:00 - 5:00 a.m.\n"":
            print(""Passed!"")
            return 100
        else:
            print(""Something is wrong with the second line."")
            return 50
    else:
        print(""Something is wrong with the first line."")
        return 0

# Testbench (to be run in an IDE)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
41,lsn4_ascii,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a Python program that prints out a cat:</p>
<pre>/\ /\
 o o
 = =
 ---<br /><br /></pre>
<p><em>Hint: A backslash&nbsp;<code>\</code>&nbsp;in a string acts as an escape character, such as with a newline</em>&nbsp;<code>\n</code>.&nbsp;<em>So, to print an actual backslash, escape that backslash by prepending another backslash. Ex: The following prints a single backslash:</em>&nbsp;<code>print('\\')</code></p>
</div>
","from cs110 import autograder

def test_passed():
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_ascii.py"", [])
    
    lines = output.split('\n')
    
    # Checks for the Cat
    if lines[0].rstrip() == '/\\   /\\':
        #test_feedback.write('1')
        if lines[1].rstrip() == '  o o':
            #test_feedback.write('2')
            if lines[2].rstrip() == ' =   =':
                #test_feedback.write('3')
                if lines[3].rstrip() == '  ---':
                    #test_feedback.write('4')
                    print('Cat Looks Good!\n')
                    return 100
                else:
                    print('Problem in the fourth line of the cat') 
            else:
                print('Problem in the third line of the cat')  
        else:
            print('Problem in the second line of the cat')  
    else:
        print('Problem in the first line of the cat')
    
    return 0

# Testbench (to be run in an IDE)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
42,lsn33_practice8,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>You have been provided with a file called oscar_age_male.csv, which contains information about male oscar award winners from the 1920s to 2015. Here is a typical line from the file:</p>
<pre>1928,44,Emil Jannings,The Last Command</pre>
<p>As always, each data element corresponds to a different piece of information. Here is a table that describes how to interpret each column:</p>
<table border=""1"">
<tbody>
<tr>
<td><strong>Year</strong></td>
<td><strong>Actor Age</strong></td>
<td><strong>Name</strong></td>
<td><strong>Film</strong></td>
</tr>
<tr>
<td>1928</td>
<td>44</td>
<td>Emil Jannings</td>
<td>The Last Command</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python program that reads this file, and gets the following inputs from the user:</p>
<ul>
<li>
<ul>
<li>A start year</li>
<li>An end year</li>
</ul>
</li>
</ul>
<p>Your program should output the age of the youngest actor during that time span (including the start and end years), as well as the names of all actors that are within 5 years (inclusive) of the youngest age. For simplicity's sake, don't try to calculate the current age of the actors; just go with what is in the file.</p>
<p>&nbsp;</p>
<p>For example, if the youngest actor is 25, and the names of the actors within 5 years of the youngest age are Bob and Tom, your program should output:<br /><br />25<br />Bob<br />Tom</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

inputs  = [[1994, 2010], [1955, 1979], [1960, 1969]]
outputs = [['29', 'Nicolas Cage', 'Adrien Brody'],
           ['30', 'Marlon Brando', 'Maximilian Schell', 'Richard Dreyfuss'],
           ['31', 'Charlton Heston', 'Maximilian Schell']]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_index = random.randint(0, len(inputs)-1)
    print(random_index)
    input_list = inputs[random_index]
    expected_output = outputs[random_index]
    
    output, error = autograder.run_script(""lsn33_practice8.py"", input_list)
    
    lines = output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_output)
       
    return round(num_matches * (100.0 / len(expected_output)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,
43,lsn33_practice7,2,lab,0,"<p><strong>SIMPLE PIG LATIN RULES:</strong></p>
<ul>
<li>&nbsp;If the word starts with a vowel, add 'way' to the end of the word.&nbsp;</li>
<li>&nbsp;If the word starts with a consonant, take the first letter, put it on the end of the word and ad 'ay' to the end.</li>
</ul>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Write a function called <strong>pig_latin&nbsp;</strong>take takes in a string of words and returns the string converted to pig latin.</p>
<table border=""1"">
<tbody>
<tr>
<td>Example 1</td>
<td>Example 2</td>
</tr>
<tr>
<td>Input</td>
<td>""Lets test this out""</td>
<td>""Rick Astley is my hero""</td>
</tr>
<tr>
<td>Expected Output</td>
<td>""etsLay esttay histay outway ""</td>
<td>""ickRay Astleyway isway ymay erohay""</td>
</tr>
</tbody>
</table>","import webbrowser

print(""That's it, the video is the joke. Feel free to practice this problem but there's not an actual score."")

webbrowser.open('https://www.youtube.com/watch?v=dQw4w9WgXcQ')


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
44,lsn33_practice6,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a python program that gets a temperature from the user, a level of precipitation (rain, snow, none), and a humidity level (high, medium, low). Using the following rules, print the correct output.</p>
<ul>
<li>If the temperature is above 84.9 degrees, and the humidity is 'high' or 'medium', print 'Walk slowly'.</li>
<li>If the precipitation is 'snow' or 'rain',&nbsp;print 'Do not run!'.</li>
<li>For all other situations, print 'Move quickly'.</li>
</ul>
<p>&nbsp;</p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td><strong>Input(s)</strong></td>
<td>
<p>85<br />rain<br />high</p>
</td>
<td>
<p>75<br />snow<br />low</p>
</td>
</tr>
<tr>
<td><strong>Expected Output</strong></td>
<td>Walk slowly</td>
<td>Do not run!</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random

num_tests_passed = 0
num_tests_run = 0

def run_test(temp, precip, humidity):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""--------------------------------------------------------------"")
    print(""Testing temperature ="", temp, ""precipitation ="", precip, ""humidity ="", humidity)
    print(""--------------------------------------------------------------"")
    
    # SOLUTION
    if temp > 84.9 and (humidity == 'high' or humidity == 'medium'):
        solution = 'Walk slowly'
    elif precip == 'snow' or precip == 'rain':
        solution = 'Do not run!'
    else:
        solution = 'Move quickly'
    
    output, error_message = autograder.run_script(""lsn33_practice6.py"", [temp, precip, humidity])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    # options for random test cases
    humidity_list = ['high', 'medium', 'low']
    precip_list = ['snow', 'rain', 'none']
    
    # pick random sample for each test case
    for i in range(10):
        humidity = random.choice(humidity_list)
        precip = random.choice(precip_list)
        if precip == 'snow':
            temp_list = [12, 14, 20, 32, 41]
        else:
            temp_list = [77, 84.9, 92]
        temp = random.choice(temp_list)
        
        # run test
        run_test(temp, precip, humidity)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
45,lsn33_practice5,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Boyle&rsquo;s Law states, for an ideal gas, that the pressure (p) multiplied by # the volume of a container (v) is always constant. So, if we have an initial pressure and volume (p1 * v1 = k) and we decrease the volume (v2) the pressure (v2) must increase. The formula for this is</p>
<pre>p1 * v1 = p2 * v2</pre>
<p>Write a python program the gets the first pressure, first volume, and second volume. Calculate the new pressure and print it to the console.</p>
<p>&nbsp;</p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td><strong>Input(s)</strong></td>
<td>
<p>25<br />100<br />150</p>
</td>
</tr>
<tr>
<td><strong>Expected Output</strong></td>
<td>16.667</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random

num_tests_passed = 0
num_tests_run = 0

def run_test(p1, v1, v2):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""--------------------------------------------------------------"")
    print(""Testing pressure 1 ="", p1, ""volume 1 ="", v1, ""volume 2 ="", v2)
    print(""--------------------------------------------------------------"")
    
    # SOLUTION
    solution = p1 * v1 / v2 
    
    output, error_message = autograder.run_script(""lsn33_practice5.py"", [p1, v1, v2])
    
    if float(output.strip()) == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    for i in range(5):
        run_test(round(random.uniform(0, 100),2), round(random.uniform(0, 100),2), round(random.uniform(0, 100),2))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
46,lsn33_practice4,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You are going to be given values for a dictionary. These will be an historic landmark as the key and the location of that landmark as the value. You will continue to receive input until the user types ""DONE"". </p>
<p>After the dictionary is populated, get a landmark key as an input from the user and print the location where the landmark is. If the landmark isn't in the dictionary, print ""Landmark not found"".</p>
<p>&nbsp;</p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td><strong>Input(s)</strong></td>
<td>
<p>Pyramids<br />Egypt<br />Mt Rushmore<br />South Dakota<br />Empire State Building<br />New York City<br />DONE<br />Mt Rushmore</p>
</td>
</tr>
<tr>
<td><strong>Expected Output</strong></td>
<td>South Dakota</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, math

input_list = [""Statue of Liberty"",
              ""New York City"",
              ""Grand Canyon"",
              ""Airzona"",
              ""Tower of Pisa"",
              ""Italy"",
              ""Pikes Peak"",
              ""Colorado"",
              ""Liberty Bell"",
              ""Pennsylvania"",
              ""Sears Tower"",
              ""Chicago"",
              ""DONE"",
              ""Statue of Liberty""]

expected_output = [""New York City""]
# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(""lsn33_practice4.py"", input_list)
    lines = output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_output)
       
    return round(num_matches * (100.0 / len(expected_output)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,
47,lsn33_practice3,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You are being provided with three sets. Each set contains the brands of cars that a car dealer is willing to sell.</p>
<p>Write a Python Program that gets the name of a brand from the user. Then have it print ""Dealer 1"", ""Dealer 2"", and/or ""Dealer 3"" (one per line) depending on whether or not the dealer sells that type of car.</p>
<p>If all 3 dealers sell the car brand, output ""All Dealers""</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input(s)</strong></td>
<td>Toyota</td>
<td>Acura</td>
<td>Ford</td>
</tr>
<tr>
<td><strong>Expected Output</strong></td>
<td>Dealer 2<br />Dealer 3</td>
<td>All Dealers</td>
<td>Dealer 1</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, statistics

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    # Hard Coded Test Cases . . . the best
    test_cases = [
                    [['Audi'], [""Dealer 3""]],
                    [['Toyota'], [""Dealer 2"", ""Dealer 3""]],
                    [['Acura'], [""All Dealers""]],
                 ]
    
    for test_case in test_cases:
        print(""----------------------"")
        print(""Test Case"", test_cases.index(test_case) + 1)
        print(""----------------------"")
        
        # Runs the Script
        input_list = test_case[0]
        expected_output = test_case[1]
        output, error_message = autograder.run_script(""lsn33_practice3.py"", input_list)
        
        output_list = output.split('\n')
        
        if len(output_list) - 1 != len(expected_output):
            print(""Your program's output does not have the expected number of lines"")
        else:
            lines_correct = 0
            for i in range(len(expected_output)):
                if str(expected_output[i]) == output_list[i]:
                    print(""Line"", i+1, ""is correct"")
                    lines_correct += 1
                else:
                    print(""Line"", i+1, ""is incorrect (Expected:"" + str(expected_output[i]) + "")"")
            
            score += (100 / len(test_cases)) * (lines_correct / len(expected_output))
        
        print()
        
    return round(score, 1)
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
48,lsn33_practice2,2,lab,0,"<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>In Star Trek, starships travel across interstellar space at many times the speed of light.&nbsp; Due to the immense speeds involved, velocity in Star Trek is described using a fictitious unit of measurement known as a &ldquo;Warp Factor&rdquo;.&nbsp; For reference, Warp Factor 1.0 is equivalent to the speed of light, whereas Warp Factor 9.0 is more than 700 times faster!</p>
<p>Write a program that asks the user for the number of starships to analyze, as well as a target distance in light years.&nbsp; Your program will then get the name of each starship (e.g., ""USS Enterprise) as well as its maximum cruise speed (e.g., 9.6), in that order.</p>
<p>Your program will then output the following:</p>
<ul>
<li>The number of days it would take for the fastest starship to travel the target distance</li>
<li>The names of all ships that can travel the same distance within 7 days (inclusive) of the fastest time</li>
</ul>
<p>&nbsp;</p>
<p><strong>HINT:&nbsp; We have provided you with a function called calculate_travel_time, which takes a warp factor and distance as parameters, and returns the number of days it would take to travel that distance.&nbsp; Call this function to solve the problem.</strong></p>
<p>&nbsp;</p>
<p style=""text-align: left;""><strong>EXAMPLES:</strong></p>
<table style=""border-collapse: collapse; width: 88.8658%; height: 190px; margin-left: auto; margin-right: auto;"" border=""1"">
<tbody>
<tr>
<td style=""width: 33.3333%;"">&nbsp;</td>
<td style=""width: 24.4282%; text-align: center;""><strong>Example 1</strong></td>
<td style=""width: 22.6521%; text-align: center;""><strong>Example 2</strong></td>
</tr>
<tr>
<td style=""width: 33.3333%;""><strong>Input(s)</strong></td>
<td style=""width: 24.4282%; text-align: center;"">2<br />1.0<br />USS Horizon<br />2.0<br />USS Daedalus<br />2.5</td>
<td style=""width: 22.6521%; text-align: center;"">2<br />250<br />USS Voyager<br />9.975<br />USS Enterprise-E<br />9.8</td>
</tr>
<tr>
<td style=""width: 33.3333%;""><strong>Expected Output</strong></td>
<td style=""width: 24.4282%; text-align: center;"">17.2<br />USS Daedalus</td>
<td style=""width: 22.6521%; text-align: center;"">42.7<br />USS Voyager<br />USS Enterprise-E</td>
</tr>
</tbody>
</table>","from cs110 import autograder
import random, statistics

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    # Hard Coded Test Cases . . . the best
    test_cases = [
                    [[3, 1.0, ""USS Enterprise-D"", 9.6, ""USS Voyager"", 9.975, ""USS Rubicon"", 4.0],
                        [0.2, ""USS Enterprise-D"", ""USS Voyager"", ""USS Rubicon""]],
                    [[5, 100, ""USS Discovery"", 7.5, ""USS Enterprise-A"", 8, ""USS Constellation"", 9.2, ""USS Farragut"", 9.4, ""USS Stargazer"", 6.0],
                        [20.8, ""USS Constellation"", ""USS Farragut""]],
                 ]
    
    for test_case in test_cases:
        print(""----------------------"")
        print(""Test Case"", test_cases.index(test_case) + 1)
        print(""----------------------"")
        
        # Runs the Script
        input_list = test_case[0]
        expected_output = test_case[1]
        output, error_message = autograder.run_script(""lsn33_practice2.py"", input_list)
        
        output_list = output.split('\n')
        
        if len(output_list) - 1 != len(expected_output):
            print(""Your program's output does not have the expected number of lines"")
        else:
            lines_correct = 0
            for i in range(len(expected_output)):
                if str(expected_output[i]) == output_list[i]:
                    print(""Line"", i+1, ""is correct"")
                    lines_correct += 1
                else:
                    print(""Line"", i+1, ""is incorrect (Expected:"" + str(expected_output[i]) + "")"")
            
            score += (100 / len(test_cases)) * (lines_correct / len(expected_output))
        
        print()
        
    return round(score, 1)
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,
49,lsn33_practice1,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a Python program that keeps asking the user for positive integers until the user types -1.</p>
<p>Your program will then output the following:</p>
<ul>
<li># of even numbers</li>
<li>Average of all the even numbers (if no even numbers were input, print 0)</li>
<li># of odd numbers</li>
<li>Average of all the odd numbers (if no odd numbers were input, print 0)</li>
</ul>
<p>You may assume that the user will type AT LEAST one number. You cannot assume, however, that the user will enter both an odd and even number.</p>
<p>&nbsp;</p>
<p>HINT:<br />Use the mod function to determine if a number is even or odd<br /><br />print(5 % 2) will print ""1"" because there is a remainder of 1 when you divide 5 by 2</p>
<p>print(4 % 2) will print ""0"" because there is no remainder when you divide 4 by 2</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input(s)</strong></td>
<td>2<br />3<br />4<br />5</td>
<td>3<br />5<br />7</td>
</tr>
<tr>
<td><strong>Expected Output</strong></td>
<td>2<br />3<br />2<br />4</td>
<td>0<br />0<br />3<br />5</td>
</tr>
</tbody>
</table>
</div>

","from cs110 import autograder
import random, statistics

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    # Hard Coded Test Cases . . . the best
    test_cases = [ [[2, 4, 6, 8, 10, -1], [5, 6, 0, 0]],
                   [[1, 3, 5, 7, 9, -1], [0, 0, 5, 5.0]],
                   [[23, 45, 81, 1, 29, 35, 44, 76, 23, -1], [2, 60.0, 7, 33.857142857142854]]]
    
    for test_case in test_cases:
        # Runs the Script
        input_list = test_case[0]
        expected_output = test_case[1]
        output, error_message = autograder.run_script(""lsn33_practice1.py"", input_list)
        
        output_list = output.split('\n')
        
        if len(output_list) - 1 != len(expected_output):
            print(""Your program's output does not have the expected number of lines"")
        else:
            lines_correct = 0
            for i in range(len(expected_output)):
                if autograder.equals(str(expected_output[i]), output_list[i]):
                    print(""Line"", i+1, ""is correct"")
                    lines_correct += 1
                else:
                    print(""Line"", i+1, ""is incorrect (Expected:"" + str(expected_output[i]) + "")"")
            
            score += (100 / len(test_cases)) * (lines_correct / len(expected_output))
            
        
    return round(score, 1)
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,
50,lsn26_plots,2,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>In this lab, you are being given the freedom to explore&nbsp;<code>matplotlib</code>'s plotting capabilities.</p>
<p>The template ZIP file contains several interesting datasets that we have collected from the internet (although you are free to include any other dataset if you wish). Examine these datasets, and generate at least 2 ""interesting"" graphs. Each plot should use a different dataset. Additionally, each plot must be a different type (line and pie graph, etc)</p>
<p>Use the&nbsp;<code>subplot</code>&nbsp;feature to make sure all of the graphs fit on one screen. Most importantly, make sure you label your axes, give your charts a title, use color, etc.</p>
<p><br /><strong>HINT</strong></p>
<ul>
<li>Use numpy's&nbsp;<code>genfromtxt</code>&nbsp;function to read the values in the file. If you forget how to use this function, refer to the lecture video.</li>
</ul>
<div>&nbsp;</div>
</div>","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn26_plots.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













",100,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,
51,lsn26_percentile,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a Python program that asks the user for the number of assessment scores to input, and then gets that many values. Analyze the data using numpy's statistics functions, and print out the following information (one per line):</p>
<div>
<div>
<ul>
<li>the average (i.e., mean)</li>
<li>the number of scores in the 90th percentile (i.e., the number of scores that are at least as high as the 90th percentile score)</li>
<li>the number of scores no more than one standard deviation from the mean</li>
</ul>
</div>
</div>
</div>","from cs110 import autograder
import random, math
import numpy as np

def solution(list_of_scores):
    
    result = []
    num_90th_percentile = 0
    within_std = 0

    scores_array = np.array(list_of_scores)
    percentile_90 = np.percentile(scores_array, 90)
    stdev = np.std(scores_array)
    average = np.average(scores_array)

    for s in list_of_scores:
        if s >= percentile_90:
            num_90th_percentile += 1
        if s <= average + stdev and s >= average - stdev:
            within_std += 1

    result.append(str(average) + '\n')
    result.append(str(num_90th_percentile) + ""\n"")
    result.append(str(within_std) + ""\n"")
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
        
    num_values = random.randint(5, 10)
    values = []
    input_list = [ num_values ]
    
    for i in range(num_values):
        value = random.randint(50, 100)
        values.append(value)
        input_list.append(value)
    
    output, error = autograder.run_script(""lsn26_percentile.py"", input_list)
    lines = output.strip().split('\n')
    expected_output = solution(values)
    
    num_matches = autograder.compare_strings(lines, expected_output)
       
    return round(num_matches * (100.0 / len(expected_output)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)











",100,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,
52,lsn26_calculus,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Using the numpy module, write a Python program that does the following and prints (one answer per line):</p>
<ol>
<li>
<p>Create (and print) the following polynomial as a poly1d:&nbsp;<code>18x^4 + 12x^2 + 3x + 1</code></p>
</li>
<li>
<p>Print the value of the polynomial when&nbsp;<code>x = 2</code></p>
</li>
<li>
<p>Print the roots of the polynomial</p>
</li>
<li>
<p>Print the derivative of the polynomial</p>
</li>
<li>
<p>Print the instantaneous slope of the polynomial at&nbsp;<code>x = -1</code>&nbsp;(HINT: Evaluate the derivative at x = -1)</p>
</li>
<li>
<p>Print the integral of the polynomial</p>
</li>
<li>
<p>Calculate area under the curve between&nbsp;<code>x = 5</code>&nbsp;and&nbsp;<code>x = 10</code>&nbsp;(HINT: Evaluate the integral at x=10, and subtract the integral at x=5)</p>
</li>
</ol>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

expected_output = [
""    4      2"",
""18 x + 12 x + 3 x + 1"",
""343"",
""[ 0.14325174+0.80294311j  0.14325174-0.80294311j -0.14325174+0.25098038j"",
"" -0.14325174-0.25098038j]"",
""    3"",
""72 x + 24 x + 3"",
""-93"",
""     5     3       2"",
""3.6 x + 4 x + 1.5 x + 1 x"",
""352367.5"",
]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(""lsn26_calculus.py"", [])
    lines = output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_output)
       
    return round(num_matches * (100.0 / len(expected_output)), 1)

        
# Testbench (to run on outside of zyBooks)
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)











",100,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
53,lsn25_tokens,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a Python program that asks the user for the name of a file. Your program should then read this file and counts how many times each token (i.e., word) appears (NOTE: keep it simple, and split on the &ldquo; &ldquo;). Finally, let the user type a token, and print how many times that token appears (if a word is not in your dictionary, print 0).</p>
<p>&nbsp;</p>
<p><strong>HINTS:</strong></p>
<ul>
<li>You have been provided with the file review.txt to test your code.</li>
</ul>
</div>
","from cs110 import autograder
import random, math

def solution(filename, t):
    # Opens the file
    file = open(filename, ""r"")

    # Extracts ALL of the text as one big string
    file_contents = file.read()

    # Splits the entire document into tokens
    list_of_tokens = file_contents.split(' ')

    # Creates a Dictionary to Store All Tokens
    token_dictionary = {}

    for token in list_of_tokens:
        if token not in token_dictionary:
            token_dictionary[token] = 1
        else:
            token_dictionary[token] = token_dictionary[token] + 1
    
    if t in token_dictionary:
        return token_dictionary[t]
    else:
        return 0
    

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_correct = 0
    
    # Test #1:
    print(""------------------------------------------"")
    print(""Test 1"")
    print(""------------------------------------------"")
    answer, error = autograder.run_script(""lsn25_tokens.py"", [""review.txt"", ""Fit""])
    expected_answer = solution(""review.txt"", ""Fit"")
    
    if autograder.equals(answer, expected_answer):
        print(""CORRECT\n"")
        num_correct += 1
    else:
        print(""INCORRECT, Expected:"", expected_answer, ""\n"")
    
    
    # Test #2:
    print(""------------------------------------------"")
    print(""Test 2"")
    print(""------------------------------------------"")
    answer, error = autograder.run_script(""lsn25_tokens.py"", [""article.txt"", ""plastic""])
    expected_answer = solution(""article.txt"", ""plastic"")
    
    if autograder.equals(answer, expected_answer):
        print(""CORRECT\n"")
        num_correct += 1
    else:
        print(""INCORRECT, Expected:"", expected_answer, ""\n"")
        
    # Test #3:
    print(""------------------------------------------"")
    print(""Test 3"")
    print(""------------------------------------------"")
    answer, error = autograder.run_script(""lsn25_tokens.py"", [""article2.txt"", ""environment""])
    expected_answer = solution(""article2.txt"", ""environment"")
    
    if autograder.equals(answer, expected_answer):
        print(""CORRECT"")
        num_correct += 1
    else:
        print(""INCORRECT, Expected:"", expected_answer)
    
    return round(100 / 3 * num_correct, 1)
    
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
54,lsn25_skill2,2,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You are being provided with a function called mini_sort that takes two numbers as parameters. Modify this function so that it returns a tuple containing the numbers in ascending order.</p>
    <p>&nbsp;</p>
    <p><strong>EXAMPLES:</strong></p>
    <p>mini_sort(1, 2) should return the tuple:&nbsp; (1, 2)</p>
    <p>mini_sort(50, 40) should return the tuple:&nbsp; (40, 50)</p>
    <p>&nbsp;</p>
    
          </div>","from cs110 import autograder
import random, math
import lsn25_skill2

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    a = random.randint(0, 5)
    b = random.randint(6, 10)
    c = random.randint(100, 200)
    d = random.randint(0, 99)
    
    score = 0
    
    print(""Test #1.  Calling mini_sort(%d, %d)"" % (a, b))
    output = lsn25_skill2.mini_sort(a, b)
    print(""  Your Function Returned:"", output)
    if output == (a, b):
        print(""  CORRECT\n"")
        score += 50
    else:
        print(""  INCORRECT.  Expected"", (a, b), ""\n"")
        
    print(""Test #2.  Calling mini_sort(%d, %d)"" % (c, d))
    output = lsn25_skill2.mini_sort(c, d)
    print(""  Your Function Returned:"", output)
    if output == (d, c):
        print(""  CORRECT\n"")
        score += 50
    else:
        print(""  INCORRECT.  Expected"", (d, c), ""\n"")
    
    return score

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
55,lsn25_skill1,2,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You have been provided with a dictionary that contains the designator for an
    aircraft (e.g., F-16) and its nickname (e.g., Fighting Falcon). Write a program that&nbsp;gets a new aircraft
    designator and nickname from the user, and adds it to the dictionary</p>

</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    aircraft_dictionary = {""F-16"":""Fighting Falcon"", ""F-22"":""Raptor"", ""B-2"":""Spirit"", ""F-15"":""Eagle""}
    
    aircraft = [(""C-141"", ""Starlifter""), (""C-5"", ""Galaxy""), (""MQ-9"", ""Reaper"")]
    random_aircraft = aircraft[random.randint(0, len(aircraft)-1)]
    aircraft_dictionary[random_aircraft[0]] = random_aircraft[1]
    
    output, error = autograder.run_script(""lsn25_skill1.py"", random_aircraft)
    
    if output.strip() == str(aircraft_dictionary):
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT. Expected:"")
        print(aircraft_dictionary)
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
56,lsn25_rectangle,2,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a function called&nbsp;<code>get_rectangle_info</code>&nbsp;that takes 2 values as parameters:</p>
<ul>
<li>A tuple containing the (x, y) coordinate of one corner of a box</li>
<li>A tuple containing the (x, y) coordinate of the opposite corner of a box</li>
</ul>
<p>&nbsp;</p>
<p>Your function should return a&nbsp;<strong>tuple</strong>&nbsp;containing the following information (in order):</p>
<ul>
<li>the area of the box</li>
<li>the perimeter of the box</li>
<li>the length of the largest side</li>
<li>the length of the shortest side</li>
</ul>
</div>
","from cs110 import autograder
import random, math
import lsn25_rectangle

# Solution
def solution(corner1, corner2):
    width = abs(corner1[0] - corner2[0])
    height = abs(corner1[1] - corner2[1])
    largest_side = max(width, height)
    shortest_side = min(width, height)
    area = width * height
    perimeter = width * 2 + height * 2
    
    return (area, perimeter, largest_side, shortest_side)


# Runs the test
def run_test(corner1, corner2):
    global tests_passed
    
    result = lsn25_rectangle.get_rectangle_info(corner1, corner2)
    expected_value = solution(corner1, corner2)
    
    if result is None:
        print(""Failed with inputs"", corner1, corner2, ""-- Your function did not return anything"")
    elif type(result) is not tuple:
        print(""Failed with inputs"", corner1, corner2, ""-- Your function did not return a tuple"")
    elif len(result) != 4:
        print(""Failed with inputs"", corner1, corner2, ""-- Your function did not return a tuple with 4 items in it"")
    elif result == expected_value:
        print(""Passed with inputs"", corner1, corner2, ""-- Your function correctly returned"", result)
        return True
    else:
        print(""Failed with inputs"", corner1, corner2, ""-- Your function returned"", result, ""instead of"", expected_value)

    return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 5
    tests_passed = 0
    
    for i in range(NUM_TESTS):
        # Generate 4 Random Numbers
        x1 = random.randint(-100, 100)
        y1 = random.randint(-100, 100)
        x2 = random.randint(-100, 100)
        y2 = random.randint(-100, 100)
        
        # Makes sure that I didn't accidentally generate a line
        while (x1 == x2):
            x1 = random.randint(-100, 100)            
        while (y1 == y2):
            y1 = random.randint(-100, 100)
    
        if run_test((x1, y1), (x2, y2)):
            tests_passed += 1
    
    return 100/NUM_TESTS * tests_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



",100,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,
57,lsn25_midpoint,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a function called get_midpoint that takes four values as parameters:</p>
<ul>
<li>X coordinate of the first point</li>
<li>Y coordinate of the first point</li>
<li>X coordinate of the second point</li>
<li>Y coordinate of the second point</li>
</ul>
<p>Your function should return a tuple containing the midpoint.</p>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math
import lsn25_midpoint

# Runs the test
def run_test(x1, y1, x2, y2):
    global tests_passed
    
    result = lsn25_midpoint.get_midpoint(x1, y1, x2, y2)
    expected_value = ((x1+x2)/2, (y1+y2)/2)
    
    if result is None:
        print(""Failed with values %d, %d, %d, and %d.  Your function did not return anything."" % (x1, y1, x2, y2))
    elif type(result) is not tuple:
        print(""Failed with values %d, %d, %d, and %d.  Your function did not return a tuple."" % (x1, y1, x2, y2))
    elif len(result) != 2:
        print(""Failed with values %d, %d, %d, and %d.  Your function did not return a tuple of length 2."" % (x1, y1, x2, y2))
    elif result == expected_value:
        print(""Passed Test Using values %d, %d, %d, and %d. Received (%d, %d)"" % (x1, y1, x2, y2, result[0], result[1]))
        return True
    else:
        print(""Failed Test Using values %d, %d, %d, and %d. Received (%d, %d), but Expected (%d, %d)"" % (x1, y1, x2, y2, result[0], result[1], expected_value[0], expected_value[1]))

    return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 5
    tests_passed = 0
    
    for i in range(NUM_TESTS):
        # Generate 4 Random Numbers
        x1 = random.randint(-100, 100)
        y1 = random.randint(-100, 100)
        x2 = random.randint(-100, 100)
        y2 = random.randint(-100, 100)
        
        if run_test(x1, y1, x2, y2):
            tests_passed += 1
    
    return (100 / NUM_TESTS) * tests_passed
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,
58,lsn25_crashes,2,lab,0,"<html><head/><body><p><span style="" font-weight:600;"">PROBLEM STATEMENT:<br/></span></p><p>You have been provided with crashdata_subset1.csv file. Here is a typical line from the file:</p><p align=""center""><span style="" font-family:'Courier New';"">2015, 1, 5, 0, 2-Car, No Injury, Following Too Closely, W 3rd</span></p><p>Each position in the line represents a different &quot;data element&quot;. Here is a key for your reference:</p><table border=""0.5"" style="" margin-top:0px; margin-bottom:0px; margin-left:36px; margin-right:36px;"" cellspacing=""3"" cellpadding=""0""><thead><tr><td/><td><p align=""center""><span style="" font-weight:600;"">Year</span></p></td><td><p align=""center""><span style="" font-weight:600;"">Month</span></p></td><td><p align=""center""><span style="" font-weight:600;"">Day</span></p></td><td><p align=""center""><span style="" font-weight:600;"">Hour</span></p></td><td><p align=""center""><span style="" font-weight:600;"">Accident Type</span></p></td><td><p align=""center""><span style="" font-weight:600;"">Injury Type</span></p></td><td><p align=""center""><span style="" font-weight:600;"">Reason</span></p></td><td><p align=""center""><span style="" font-weight:600;"">Location</span></p></td></tr></thead><tr><td><p align=""center""><span style="" font-weight:600;"">Value</span></p></td><td><p align=""center""><span style="" font-weight:600;"">2015</span></p></td><td><p align=""center""><span style="" font-weight:600;"">1</span></p></td><td><p align=""center""><span style="" font-weight:600;"">5</span></p></td><td><p align=""center""><span style="" font-weight:600;"">0</span></p></td><td><p align=""center""><span style="" font-weight:600;"">2-Car</span></p></td><td><p align=""center""><span style="" font-weight:600;"">No Injury</span></p></td><td><p align=""center""><span style="" font-weight:600;"">Following Too Closely</span></p></td><td><p align=""center""><span style="" font-weight:600;"">W 3rd</span></p></td></tr></table><p><br/>Create a Python function called <span style="" font-family:'Courier New';"">get_accident_types</span> that takes the name of a file as a parameter. Your function should open the file, read its contents, and return a <span style="" font-weight:600;"">set</span> containing all of the unique accident types.</p><p><br/></p></body></html>","from cs110 import autograder
import random, math
import lsn25_crashes

def solution(filename):
    # Opens the file
    file = open(filename, ""r"")

    # Extracts ALL of the text as one big string
    file_contents = file.read()

    # Splits the big string into individual lines
    lines = file_contents.split('\n')

    # Creates a Set
    collision_types = set()

    # Looks at every row, and adds the collision type to the set
    # The set automagically prevents duplicates from being added!
    for line in lines:
        columns = line.split(',')
        collision_types.add(columns[4])

    # Returns the set
    return collision_types

# Runs the test
def run_test(filename):
    global tests_passed
    
    result = lsn25_crashes.get_accident_types(filename)
    expected_value = solution(filename)
    
    if result is None:
        print(""Failed on file %s.  Your function did not return anything."" % (filename))
    elif type(result) is not set:
        print(""Failed on file %s.  Your function did not return a set."" % (filename))
    elif result == expected_value:
        print(""Passed Test on file"", filename, ""-- set ="", result)
        return 100.0
    else:
        print(""Passed Test on file"", filename, ""-- Your function returned "", result, "", but the answer is"", expected_value)

    return 0.0


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    return run_test(""crashdata_2003.csv"") and run_test(""crashdata_2011.csv"") and run_test(""crashdata_2015.csv"")
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



",100,1,0,0,1,1,0,1,1,0,0,0,0,0,1,0,1,0,0,1,0,
59,lsn25_crashanalysis,2,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Write a Python function called&nbsp;<code>get_common_accidents</code>&nbsp;that accepts the following parameters:</p>
<ul>
<li>the name of a file containing crash data (e.g., crashdata_2015.csv)</li>
<li>the name of&nbsp;<strong>another</strong>&nbsp;file containing crash data (e.g., crashdata_2003.csv)</li>
</ul>
<p>Your function should return a set that only contains the accident_types that are common to both files</p>
<p><br />As a reminder, here is a sample entry from the crash data file. You can assume that every file is formatted the exact same way.</p>
<p><strong><code>2015, 1, 5, 0, 2-Car, No Injury, Following Too Closely, W 3rd</code></strong></p>
<p>&nbsp;</p>
<p>Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Year</th>
<th>Month</th>
<th>Day</th>
<th>Hour</th>
<th>Accident Type</th>
<th>Injury Type</th>
<th>Reason</th>
<th>Location</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>2015</th>
<th>1</th>
<th>5</th>
<th>0</th>
<th>2-Car</th>
<th>No Injury</th>
<th>Following Too Closely</th>
<th>W 3rd</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><strong>HINT</strong></p>
<ul>
<li>Here is some example code to see if a word (""Bus"") is included in set&nbsp;<code>s</code><br /><code>if ""Bus"" in s:</code><br /> <code>print(""Bus is in set s"")</code><br /><code>else:</code><br /> <code>print(""Bus is NOT in set s"")</code></li>
</ul>
<p><strong><br /><br /></strong></p>
</div>
","from cs110 import autograder
import random, math
import lsn25_crashanalysis

def get_accident_types(filename):
    # Opens the file
    file = open(filename, ""r"")

    # Extracts ALL of the text as one big string
    file_contents = file.read()

    # Splits the big string into individual lines
    lines = file_contents.split('\n')

    # Creates a Set
    collision_types = set()

    # Looks at every row, and adds the collision type to the set
    # The set automagically prevents duplicates from being added!
    for line in lines:
        columns = line.split(',')
        collision_types.add(columns[4])

    # Returns the set
    return collision_types

def solution(filename1, filename2):
    accident_types_1 = get_accident_types(filename1)
    accident_types_2 = get_accident_types(filename2)
    result = set()
    
    for accident_type in accident_types_1:
        if accident_type in accident_types_2:
            result.add(accident_type)
    
    return result

# Runs the test
def run_test(filename1, filename2):
    global tests_passed
    
    result = lsn25_crashanalysis.get_common_accidents(filename1, filename2)
    expected_value = solution(filename1, filename2)
    
    if result is None:
        print(""Failed on files %s and %s.  Your function did not return anything."" % (filename1, filename2))
    elif type(result) is not set:
        print(""Failed on files %s and %s.  Your function did not return a set."" % (filename1, filename2))
    elif result == expected_value:
        print(""Passed Test on file"", filename1, ""and"", filename2, ""-- set ="", result)
        return 100
    else:
        print(""Passed Test on file"", filename1, ""and"", filename2, ""-- Your function returned "", result, "", but the answer is"", expected_value)

    return 0


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    return (run_test(""crashdata_2003.csv"", ""crashdata_2011.csv"") and
            run_test(""crashdata_2008.csv"", ""crashdata_2003.csv"") and
            run_test(""crashdata_2003.csv"", ""crashdata_2015.csv""))
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




",100,1,0,0,1,1,0,1,1,0,0,0,0,0,1,0,1,0,0,1,0,
60,lsn25_contactlist,2,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a Python program that stores names and phone numbers for your classmates. Your program will keep asking the user to input names and phone numbers until he/she types ""DONE"". Your program will then store the names/numbers in a dictionary, and allow the user to repeatedly type in names until he/she types ""DONE"".</p>
<ul>
<li>If name is in the contact list, your program will output the corresponding phone number.</li>
<li>If the name is&nbsp;<strong>not</strong>&nbsp;in the contact list, your program will output ""NOT FOUND""</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table>
<thead>
<tr>
<td>&nbsp;</td>
<td>Example</td>
</tr>
</thead>
<tbody>
<tr>
<td>Inputs</td>
<td>Adrian<br />555-5555<br />Liam<br />666-6666<br />Michelle<br />777-7777<br />DONE<br />Adrian<br />Jim<br />DONE</td>
</tr>
<tr>
<td>Outputs</td>
<td>555-5555<br />NOT FOUND</td>
</tr>
</tbody>
</table>
</div>



","from cs110 import autograder
import random, math

input_list = [""Kirk"",
""555-5555"",
""Spock"",
""666-6666"",
""McCoy"",
""777-7777"",
""DONE"",
""Kirk"",
""Spock"",
""Mccoy"",
""DONE""]

expected_output = [
""555-5555"",
""666-6666"",
""NOT FOUND"",
]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(""lsn25_contactlist.py"", input_list)
    lines = output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_output)
       
    return round(num_matches * (100.0 / len(expected_output)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,1,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,
61,lsn24_nasa,2,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Write a Python program that repeatedly asks the user for names of famous NASA space missions (e.g., Apollo 11) as
        well as the year in which the mission took place, until the user types the word ""DONE"" for the mission.</p>
    <p>Your program should output:</p>
    <ol>
        <li>Year of the <span style=""text-decoration: underline;""><strong>latest mission</strong></span> (most recent)
        </li>
        <li>Names of all missions that occurred within 3 years prior to the most recent mission (inclusive)</li>
    </ol>
    <p><strong>EXAMPLES:</strong></p>
    <p>&nbsp;</p>
    <table style=""margin-left: auto; margin-right: auto; width: 331px; height: 148px;"">
        <thead>
            <tr>
                <td style=""border-style: solid; text-align: center; width: 77px;""></td>
                <td style=""border-style: solid; text-align: center; width: 104px;"">Example 1</td>
                <td style=""border-style: solid; text-align: center; width: 140px;"">Example 2</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style=""border-style: solid; text-align: center; width: 77px;"">Input</td>
                <td style=""border-style: solid; text-align: center; width: 104px;"">Gemini 3<br>1965<br>Gemini
                    4<br>1965<br>Gemini 12<br>1966<br>DONE</td>
                <td style=""border-style: solid; text-align: center; width: 140px;"">
                    <p>Mercury 5<br>1961<br>Apollo 11<br>1969<br>DONE</p>
                </td>
            </tr>
            <tr>
                <td style=""border-style: solid; text-align: center; width: 77px;"">Output</td>
                <td style=""border-style: solid; text-align: center; width: 104px;"">1966<br>Gemini 3<br>Gemini
                    4<br>Gemini 12</td>
                <td style=""border-style: solid; text-align: center; width: 140px;"">1969<br>Apollo 11</td>
            </tr>
        </tbody>
    </table>
</div>","from cs110 import autograder
import random, math

mission_info = [
    ['Apollo 1', 1967],
    ['Apollo 7', 1968],
    ['Apollo 8', 1968],
    ['Apollo 9', 1969],
    ['Apollo 10', 1969],
    ['Apollo 11', 1969],
    ['Apollo 12', 1969],
    ['Apollo 13', 1970],
    ['Apollo 14', 1971],
    ['Apollo 15', 1971],
    ['Apollo 16', 1972],
    ['Apollo 17', 1972],
    ]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    inputs = []
    expected_outputs = []
    
    mission_table = []
    
    for mission in random.sample(mission_info, 5):
        inputs.append(mission[0])
        inputs.append(mission[1])
        mission_table.append([int(mission[1]), mission[0]])
    inputs.append(""DONE"")
    
    max_row = max(mission_table)
    expected_outputs.append(str(max_row[0]))
    
    for m in mission_table:
        if (int(m[0]) >= int(max_row[0]) - 3):
            expected_outputs.append(m[1])
    
    output, errors = autograder.run_script(""lsn24_nasa.py"", inputs)
    lines = output.strip().split('\n')
    
    lines_match = autograder.compare_strings(lines, expected_outputs)
    
    if lines_match == len(expected_outputs):
        return 100.0
    else:
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,1,1,1,0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,
62,lsn24_mitches,2,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Write a Python Program that analyzes the food at Mitchell Hall. Your program will ask for the number of meals to analyze and then get both:</p>
    <ol>
    <li>The name of the meal</li>
    <li>The number of calories per serving</li>
    </ol>
    <p>Your program should output the average calorie count of all meals, as well as the names of meals that are with 200 calories of the average (inclusive).</p>
    <p style=""text-align: center;"">&nbsp;</p>
    <table style=""border-collapse: collapse; width: 88.535%; height: 325px; margin-left: auto; margin-right: auto;"" border=""1"">
    <tbody>
    <tr>
    <td style=""width: 33.3333%;""></td>
    <td style=""width: 33.3333%; text-align: center;""><strong>Example 1</strong></td>
    <td style=""width: 33.3333%; text-align: center;""><strong>Example 2</strong></td>
    </tr>
    <tr>
    <td style=""width: 33.3333%;"">Input</td>
    <td style=""width: 33.3333%; text-align: center;"">
    <p>3<br>Shepherd's Pie<br>300<br>Foot Long Hot Dog<br>350<br>Hamburger<br>960<br><br></p>
    </td>
    <td style=""width: 33.3333%; text-align: center;"">4<br>Pizza<br>600<br>Cheeseburger<br>450<br>Pancakes<br>1100<br>Burrito<br>900</td>
    </tr>
    <tr>
    <td style=""width: 33.3333%;"">Expected Output</td>
    <td style=""width: 33.3333%; text-align: center;"">536.6666666666666<br>Foot Long Hot Dog</td>
    <td style=""width: 33.3333%; text-align: center;"">762.5<br>Pizza<br>Burrito</td>
    </tr>
    </tbody>
    </table>
    <p style=""text-align: center;"">&nbsp;</p>
    
          </div>","from cs110 import autograder
import random, math

meal_info = [
    ['Hot Dogs', 600],
    ['French Dip', 540],
    ['Chicken Cordon Bleu', 300],
    ['Turkey Sandwich', 350],
    ['Mitch\'s Mountain', 1100],
    ['Shepherd\'s Pie', 272],
    ['Teriyaki Chicken', 250],
    ]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    inputs = []
    expected_outputs = []
    
    meal_table = []
    table_size = random.randint(3, 5)
    total = 0
    inputs.append(table_size)
    
    for meal in random.sample(meal_info, table_size):
        total += meal[1]
        inputs.append(meal[0])
        inputs.append(meal[1])
        meal_table.append([meal[0], meal[1]])
    
    average = total / len(meal_table)
    expected_outputs.append(str(average))
    
    for m in meal_table:
        if m[1] >= average-200 and m[1] <= average+200:
            expected_outputs.append(m[0])
    
    output, errors = autograder.run_script(""lsn24_mitches.py"", inputs)
    lines = output.strip().split('\n')
    
    lines_match = autograder.compare_strings(lines, expected_outputs)
    
    if lines_match == len(expected_outputs):
        return 100.0
    else:
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,
63,lsn24_education,2,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Now that you are a Freshman at USAFA, it might be interesting to learn about how many years men and women spend in school in different countries. In the problem, we have provided you with a dataset called<span>&nbsp;</span><code>education.csv</code><span>&nbsp;</span>that contains information from various countries about years spent in education. Here is a typical line from the file:</p>
    <p>&nbsp;</p>
    <p style=""text-align: center;""><code>Zimbabwe,2010,M,15,64,8.04,5.92,2.09,0.03,3926</code></p>
    <p>&nbsp;</p>
    <p><span>Each position in the line represents a different ""data element"". Here is a key for your reference:</span></p>
    <table style=""border-collapse: collapse; width: 100%;"" border=""1"">
    <tbody>
    <tr>
    <td style=""width: 10%; text-align: center;"">Country</td>
    <td style=""width: 10%; text-align: center;"">Year</td>
    <td style=""width: 10%; text-align: center;"">Gender</td>
    <td style=""width: 10%; text-align: center;"">Start Age</td>
    <td style=""width: 10%; text-align: center;"">End Age</td>
    <td style=""width: 10%; text-align: center;"">Total Years in School</td>
    <td style=""width: 10%; text-align: center;"">Primary School</td>
    <td style=""width: 10%; text-align: center;"">Secondary School</td>
    <td style=""width: 10%; text-align: center;"">Tertiary School</td>
    <td style=""width: 10%; text-align: center;"">Population (thousands)</td>
    </tr>
    <tr>
    <td style=""width: 10%; text-align: center;"">Zimbabwe</td>
    <td style=""width: 10%; text-align: center;"">2010</td>
    <td style=""width: 10%; text-align: center;"">M</td>
    <td style=""width: 10%; text-align: center;"">15</td>
    <td style=""width: 10%; text-align: center;"">64</td>
    <td style=""width: 10%; text-align: center;"">8.04</td>
    <td style=""width: 10%; text-align: center;"">5.92</td>
    <td style=""width: 10%; text-align: center;"">2.09</td>
    <td style=""width: 10%; text-align: center;"">0.03</td>
    <td style=""width: 10%; text-align: center;"">3926</td>
    </tr>
    </tbody>
    </table>
    <p>&nbsp;</p>
    <p><br>Write a Python program that asks the user for the name of country (e.g., ""Zimbabwe""), followed by a Gender (""M"" or ""F""). Your program should print the average number of years that gender spends in school followed by the years that are greater than or equal to the average.</p>
    <p><br>For example, if ""Zimbabwe"" and ""M"" were entered as the country and gender of interest, respectively, then your program should print out:</p>
    <p><strong><code>2.5117241379310347</code><br><code>1960</code><br><code>1965</code><br><code>1970</code><br><code>1975</code><br><code>1980</code><br><code>1985</code><br><code>1990</code><br><code>1995</code><br><code>2000</code><br><code>2005</code><br><code>2010</code></strong></p>
    
          </div>","from cs110 import autograder
import random, math

test_inputs = [['Canada', 'M'], ['Egypt', 'F']]
expected_outputs = [['7.140344827586206', '1945', '1950', '1955', '1960', '1965', '1970', '1975', '1980', '1985', '1990', '1995', '2000', '2005', '2010'],
                    ['1.1858620689655173', '1980', '1985', '1990', '1995', '2000', '2005', '2010']]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    test_case_to_run = random.randint(0, len(test_inputs)-1)
    inputs = test_inputs[test_case_to_run]
    outputs = expected_outputs[test_case_to_run]
    
    output, errors = autograder.run_script(""lsn24_education.py"", inputs)
    lines = output.strip().split('\n')
    
    lines_match = autograder.compare_strings(lines, outputs)
    
    if lines_match == len(outputs):
        return 100.0
    else:
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
64,lsn24_airspeed,2,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>You are writing a program to determine which aircraft &nbsp;can fly in formation based on their (min) safe cruise speed. Write a python program<br>that asks the user for:</p>
    <ol>
    <li>The number of aircraft to analyze</li>
    <li>The target cruise velocity, in mph</li>
    </ol>
    <p>&nbsp;</p>
    <p>Your program will then repeatedly ask the user for the designator for each aircraft and its cruise velocity. Once all of the values have been input, your&nbsp;program will output:</p>
    <ol>
    <li>The NUMBER of aircraft whose cruise velocity is within 50mph of the target (above or below, inclusive)</li>
    <li>The designator of each aircraft that meets the above criteria</li>
    </ol>
    <p style=""text-align: center;"">&nbsp;</p>
    <table style=""border-collapse: collapse; width: 88.535%; height: 325px; margin-left: auto; margin-right: auto;"" border=""1"">
    <tbody>
    <tr>
    <td style=""width: 33.3333%;""></td>
    <td style=""width: 33.3333%; text-align: center;""><strong>Example 1</strong></td>
    <td style=""width: 33.3333%; text-align: center;""><strong>Example 2</strong></td>
    </tr>
    <tr>
    <td style=""width: 33.3333%;"">Input</td>
    <td style=""width: 33.3333%; text-align: center;"">
    <p>3<br>400<br>F-15<br>450<br>F-16<br>425<br>F-22<br>500</p>
    </td>
    <td style=""width: 33.3333%; text-align: center;"">4<br>230<br>C-130<br>250<br>F-35<br>450<br>B-52<br>390<br>C-141<br>375</td>
    </tr>
    <tr>
    <td style=""width: 33.3333%;"">Expected Output</td>
    <td style=""width: 33.3333%; text-align: center;"">2<br>F-15<br>F-16</td>
    <td style=""width: 33.3333%; text-align: center;"">1<br>C-130</td>
    </tr>
    </tbody>
    </table>
    <p style=""text-align: center;"">&nbsp;</p>
    
          </div>","from cs110 import autograder
import random, math

test_cases = [[3, 400, 'F-15', 450, 'F-16', 425, 'F-22', 600],
              [4, 230, 'C-130', 250, 'F-35', 450, 'B-52', 390, 'C-141', 375]]
answers    = [['2', 'F-15', 'F-16'],
              ['1', 'C-130']]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    test_to_run = random.randint(0, len(test_cases)-1)
    inputs = test_cases[test_to_run]
    expected_output = answers[test_to_run]    
    
    output, errors = autograder.run_script(""lsn24_airspeed.py"", inputs)
    lines = output.strip().split('\n')
    
    lines_match = autograder.compare_strings(lines, expected_output)
    
    if lines_match == len(expected_output):
        return 100.0
    else:
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
65,lsn23_soundboard,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Using PythonGraph, create a ""soundboard"" application. Your program should display a list of colored buttons (i.e., rectangles). When the user clicks inside of a rectangle, the program plays a different sound.</p>
<p>The provided template file comes with a single button implemented. Your job is to study this code and create at least 5 other buttons. Note: The buttons do not have to be laid out in the same arrangement, but they should look organized.</p>
<p>When you are finished, upload your python code. Do NOT upload any of the sound files.</p>
</div>


","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn23_soundboard.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













",100,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
66,lsn23_skill1,2,skill,0,"<div id=""question_99944807_question_text"" class=""question_text user_content enhanced"">
          
    <p><strong>PROBLEM NAME:<br></strong>lsn23_skill1</p>
    <p>&nbsp;</p>
    <p><strong>PROBLEM STATEMENT:<br></strong>You have been provided with the template code for an animation.&nbsp; Study the code for a minute, then modify the code to do the following WHEN THE LEFT MOUSE BUTTON IS HELD DOWN:</p>
    <ol>
    <li>Write the code needed to get the mouse's x and y coordinates</li>
    <li>Draw a circle centered at the mouse's x and y coordinates</li>
    </ol>
    
          </div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0.0
    
    if autograder.code_compiles(""lsn23_skill1.py""):
        file = open(""lsn23_skill1.py"", ""r"")
        file_contents = file.read()
        
        if ""get_mouse_x("" in file_contents:
            print(""get_mouse_x called"")
            score += 33
        else:
            print(""get_mouse_x does not appear to be called."")
            
        if ""get_mouse_y("" in file_contents:
            print(""get_mouse_y called"")
            score += 33
        else:
            print(""get_mouse_y does not appear to be called."")
            
        if ""draw_circle("" in file_contents:
            print(""draw_circle called"")
            score += 34
        else:
            print(""draw_circle does not appear to be called."")
            
    else:
        print(""There appears to be an error in your python Script that is preventing it from running"")
    
    print(""\nThank you for your submission.  Your instructor will let you know if there is an issue."")
    return score        
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
67,lsn23_paint,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Using PythonGraph, create a simple paint application. Your program should draw circles on the window whenever the user presses the left mouse button. Your program should also listen for keyboard inputs, and allow the user to change colors and the size of the circle by pressing on different keys.</p>
<p>A simple paint program has been provided to you as a starting point. Study the code and make the necessary modifications.</p>
<p>When you are finished, upload your python code.</p>
</div>

","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn23_paint.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













",100,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
68,lsn22_skill1,2,skill,0,"<div><strong>PROBLEM NAME:<br></strong>lsn22_skill1</p>
    <p>&nbsp;</p>
    <p><strong>PROBLEM STATEMENT:<br></strong>You have been provided with the template code for an animation. &nbsp;Study the code for a minute, then perform the following tasks:</p>
    <ul>
    <li>In the draw() function, add one line of code that draws a circle.<br>For the center, use the ball_x and ball_y variables defined on lines 21 and 22<br><br>
    </li>
    <li>In the update() function, add code that modifies the value of ball_x and ball_y.<br>For example, add 1 to ball_x every time update() is called, and see what happens.</li>
    </ul>
    
          </div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0.0
    
    if autograder.code_compiles(""lsn22_skill1.py""):
        file = open(""lsn22_skill1.py"", ""r"")
        file_contents = file.read()
        
        if ""draw_circle("" in file_contents:
            print(""draw_circle called"")
            score += 50
        else:
            print(""draw_circle does not appear to be called.  You need to call it in the draw() function"")
            
        if file_contents.count(""ball_x"") + file_contents.count(""ball_y"") > 5:
            print(""Looks like you are using ball_x and/or ball_y"")
            score += 50
        else:
            print(""Make sure you are changing the value of ball_x and ball_y in update()."")
            
    else:
        print(""There appears to be an error in your python Script that is preventing it from running"")
    
    print(""\nThank you for your submission.  Your instructor will let you know if there is an issue."")
    return score        
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
69,lsn22_bouncingtriangle,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Using the Bouncing Ball from the previous lab as a starting point, generate an animation of a bouncing triangle. The triangle's vertices should start at random locations, and bounce whenever the triangle hits a wall.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>HINTS</strong>:</p>
<ul>
<li>Try drawing 3 bouncing balls on the screen.</li>
<li>Once the balls are moving correctly, draw 3 lines to connect them!</li>
</ul>
</div>
","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn22_bouncingtriangle.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













",100,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,
70,lsn22_bouncingballs,2,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a python algorithm that asks the user for the number of balls to draw. Then, open a pythonGraph window and draw that many bouncing balls on the screen.</p>
<p>&nbsp;</p>
<p><strong>Challenge</strong>:</p>
<ul>
<li>Try to randomize every aspect of the bouncing balls (e.g., their radius, color, speed)</li>
</ul>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn22_bouncingballs.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













",100,0,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,
71,lsn22_bouncingball,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Using the pythonGraph animation template, create an animation of a bouncing ball. Your ball should start at a random location, and change direction each time it hits a side, top, or bottom of the window.<br /><br /></p>
<p>&nbsp;</p>
<p><strong>CHALLENGE:</strong></p>
<ol>
<li>Try to make the ball change color every time it hits a wall.</li>
</ol>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn22_bouncingball.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













",100,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,
72,lsn21_triangle,2,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write an algorithm that asks the user for X and Y coordinates of a single point (the coordinates of the top left point on the triangle), the length of the base, and the height of a right triangle. Then, open a graphics window and draw the triangle. The area of the triangle is should be displayed at the bottom center of the window in black.</p>
<p>&nbsp;</p>
<p><strong>HINTS:</strong></p>
<ul>
<li>Make sure you get the user input BEFORE you open the window. Otherwise, the program will freeze.</li>
<li>The&nbsp;<code>draw_text</code>&nbsp;function will draw text on a screen. Don't worry about getting the text EXACTLY in the center (it's hard!).</li>
</ul>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn21_triangle.py"", doraise=True)
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
        
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
73,lsn21_stamp,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Create a pythonGraph function called&nbsp;<code>draw_stamp</code>&nbsp;that accepts an x and y coordinate as parameters. Add code so that this function will then draw a picture (of your choosing) centered on that coordinate. </p>
<p>&nbsp;</p>
<p>To test your function, create a pythonGraph window, and call your function several times (each time, passing it a different set of x and y coordinates).</p>
</div>

","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn21_stamp.py"", doraise=True)
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
        
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
74,lsn21_skill1,2,skill,0,"<div><strong>PROBLEM NAME:<br></strong>lsn21_skill1</p>
    <p>&nbsp;</p>
    <p><strong>PROBLEM STATEMENT:<br></strong>Read the pythonGraph documentation, and write the following 3 lines of code:</p>
    <ol>
    <li>Use the open_window function to create a graphics window</li>
    <li>Use the draw_circle function to draw a circle (any size and/or color).</li>
    <li>Call the wait_for_close function to keep the graphics window open until you click the X in the top right corner.</li>
    </ol>
    
          </div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0.0
    
    if autograder.code_compiles(""lsn21_skill1.py""):
        file = open(""lsn21_skill1.py"", ""r"")
        file_contents = file.read()
    
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
    
        if ""open_window("" in file_contents:
            print(""open_window Called"")
            score += 33
        else:
            print(""open_window does not appear to be called"")
        
        if ""draw_circle("" in file_contents:
            print(""draw_circle Called"")
            score += 34
        else:
            print(""draw_circle does not appear to be called"")
            
        if ""wait_for_close("" in file_contents:
            print(""wait_for_close Called"")
            score += 33
        else:
            print(""wait_for_close does not appear to be called"")
            
    else:
        print(""There appears to be an error in your python Script that is preventing it from running"")
    
    return score        
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
75,lsn21_simpledrawing,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Using pythonGraph (and the documentation for pythonGraph), experiment with each of the drawing commands listed (drawing commands begin with the keyword &ldquo;draw&rdquo;). Draw something interesting using at least 4 different drawing commands. One of those drawing commands must be&nbsp;<code>draw_image</code></p>
<p><strong>NOTE: <br /></strong>The best files will be added to our Python ""Hall of Fame"".</p>
</div>

","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    drawing_functions = [""draw_arc"", ""draw_image"", ""draw_rectangle"", ""draw_circle"", ""draw_ellipse"", ""draw_line"", ""draw_pixel"", ""draw_text"", ""write_text""]
    drawing_functions_called = []
    
    print(""----------------------------------------------------------------------"")
    print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
    print(""----------------------------------------------------------------------\n"")
    
    file = open(""lsn21_simpledrawing.py"", ""r"")
    file_contents = file.read()
    
    for f in drawing_functions:
        if f in file_contents and f not in drawing_functions_called:
            drawing_functions_called.append(f)
    
    if len(drawing_functions_called) >= 4 and ""draw_image"" in drawing_functions_called:
        print(""Good Job!"")
        return 100.0
    elif len(drawing_functions_called) >= 4 and ""draw_image"" not in drawing_functions_called:
        print(""Missing at least one call of draw_image"")
        return 90.0
    else:
        print(""Not enough different drawing functions.  Need 4 unique (including draw_image) calls."")
        return 25 * len(drawing_functions_called)
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
76,lsn21_randomcircles,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Create a pythonGraph that asks the user for the number of circles to draw. Your program should then open a pythonGraph window and then draw that many circles somewhere within view.</p>
<p><strong>Hints</strong></p>
<ul>
<li>Import the&nbsp;<code>random</code>&nbsp;module in order to generate random numbers. There are specifically two functions that are useful:</li>
<li><code>random.random()</code>&nbsp;returns a random number between 0.0 and 1.0</li>
<li><code>random.randint(start, end)</code>&nbsp;returns a random integer between&nbsp;<code>start</code>&nbsp;and&nbsp;<code>end</code></li>
</ul>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:
        py_compile.compile(""lsn21_randomcircles.py"", doraise=True)
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
77,lsn20_unpopularnames,2,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>This lab makes use of the names.csv dataset, which provides a list of over 1200+ names that were given to children in 2011. Here is a typical line from the file:</p>
<p>&nbsp;</p>
<p><code>FEMALE, HISPANIC, GIA, 21</code></p>
<p>&nbsp;</p>
<p><br />Each position in the line (separated by a comma) represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<th>Gender</th>
<th>Ethnicity</th>
<th>Name</th>
<th>Count<br />(i.e., Number of Children Assigned this Name)</th>
</tr>
</thead>
<tbody>
<tr>
<th>FEMALE</th>
<th>HISPANIC</th>
<th>GIA</th>
<th>21</th>
</tr>
</tbody>
</table>
<p><br /><br />Write a Python algorithm that gets a gender (all CAPs, ""MALE"" or ""FEMALE"") and a number,&nbsp;<code>X</code>, from the user, and prints out the X least popular names for that gender, starting with the most popular and working down.</p>
<p>For example, if the user types&nbsp;<code>MALE</code>&nbsp;and&nbsp;<code>2</code>, and you determine that the two least popular names are Bill and Ted, your program should output:</p>
<pre>Bill<br />Ted<br /><br /></pre>
<p>&nbsp;</p>
<p><strong>HINTS (really really important):</strong></p>
<ul>
<li>Remember that you can use the&nbsp;<code>sort()</code>&nbsp;function to sort a list in ascending order. For example, if your list is named&nbsp;<code>my_list</code>, you can sort it by typing:<br /><code>my_list.sort()</code></li>
<li><code>sort()</code>&nbsp;will work on 2D lists. It will sort by the first column, and then look at the 2nd column in the event of a tie. Think about this when you are building your 2D list.</li>
</ul>
</div>","from cs110 import autograder
import random, math

expected_output_male = [""ALDO"", ""ALIJAH"", ""ALLAN"", ""ANGEL"", ""ARTURO"", ""AUGUSTUS"", ""BENNETT"", ""BERISH"", ""CADEN"", ""CHRIS"", ""CODY"", ""COREY"", ""DERRICK"", ""DEVON"", ""DONOVAN"", ""EASON"", ""EDWARD"", ""ELLIS"", ""GIOVANI"", ""HASSAN"",]
expected_output_female = [""ABBY"", ""AIZA"", ""ALISHA"", ""ANGELICA"", ""ANGIE"", ""ARIANNY"", ""ARIELA"", ""ATARA"", ""AUBREY"", ""AUTUMN"", ""AYLA"", ""BIANCA"", ""BONNIE"", ""BRIANNY"", ""CASSANDRA"", ""CELIA"", ""CHAVY"", ""CHEYENNE"", ""CORA"", ""CRISTINA""]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    if (random.random() > 0.5):
        gender = ""MALE""
        expected_output = expected_output_male
    else:
        gender = ""FEMALE""
        expected_output = expected_output_female
        
    num_to_print = random.randint(5, 20)
    output, error = autograder.run_script(""lsn20_unpopularnames.py"", [gender, num_to_print])
    lines = output.strip().split('\n')
    num_matches = autograder.compare_strings(lines, expected_output[:num_to_print])
    
    print()
    
    if len(lines) == 0:
        return 0
    elif len(lines) > len(expected_output[:num_to_print]):
        print(""Your program printed more lines than we expected"")
        return round(100 * num_matches / len(lines), 1)
    else:
        return round(100.0/len(expected_output[:num_to_print]) * num_matches, 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,1,1,1,1,1,1,0,0,1,0,1,0,1,1,0,0,1,0,0,0,
78,lsn20_skill1,2,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You have been provided with a CSV file that contains the amount of medals won by countries at the most recent Olympic games.&nbsp; &nbsp;Here is a snippet of the file:</p>
    <pre>USA,46,37,38<br>Britain,27,23,17</pre>
    <p>&nbsp;</p>
    <p>Here is how you can interpret each ""column"" in the file:</p>
    <table style=""border-collapse: collapse; width: 100%;"" border=""1"">
    <tbody>
    <tr>
    <td style=""width: 25%; text-align: center;""><strong>Country</strong></td>
    <td style=""width: 25%; text-align: center;""><strong># Gold Medals</strong></td>
    <td style=""width: 25%; text-align: center;""><strong># Silver Medals</strong></td>
    <td style=""width: 25%; text-align: center;""><strong># Bronze Medals</strong></td>
    </tr>
    <tr>
    <td style=""width: 25%; text-align: center;"">USA</td>
    <td style=""width: 25%; text-align: center;"">46</td>
    <td style=""width: 25%; text-align: center;"">37</td>
    <td style=""width: 25%; text-align: center;"">38</td>
    </tr>
    <tr>
    <td style=""width: 25%; text-align: center;"">Britain</td>
    <td style=""width: 25%; text-align: center;"">27</td>
    <td style=""width: 25%; text-align: center;"">23</td>
    <td style=""width: 25%; text-align: center;"">17</td>
    </tr>
    </tbody>
    </table>
    <p>&nbsp;</p>
    <p>You have also been provided with a code template that automatically reads this file and extracts each line from it.</p>
    <ul>
    <li>In the provided code template, perform the following tasks:
    <ul>
    <li>
    <strong>Line 30:</strong> Write a line of code that extracts the columns from each line. Use the split() function</li>
    <li>
    <strong>Line 33:</strong> Create a new row (i.e., a list) that contains the number of <span style=""text-decoration: underline;""><strong>silver</strong> </span>medals, followed by the name of the country</li>
    <li>
    <strong>Line 36:</strong> Append the new row to <span style=""color: #3366ff;""><strong>my_table</strong></span>
    </li>
    </ul>
    </li>
    </ul>
    
          </div>","from cs110 import autograder
import random, math
from lsn20_skill1 import *

answer= [[37, 'USA'],
        [23, 'Britain'],
        [18, 'China'],
        [17, 'Russia'],
        [10, 'Germany'],
        [8, 'Japan'],
        [18, 'France'],
        [3, 'South Korea'],
        [12, 'Italy'],
        [11, 'Australia']]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_matches = 0
    
    for i in range(len(my_table)):
        print(""Row "" + str(i+1) + "": "", end='')
        if i < len(answer):
            if my_table[i] == answer[i]:
                print(""CORRECT"")
                num_matches += 1
            else:
                print(""INCORRECT (Expected: "" + str(answer[i]) + "" instead of "" + str(my_table[i]) + "")"")
        else:
            print(""INCORRECT (Unexpected Row: '"" + str(my_table[i]) + ""')"")
    
    print()
    print(num_matches, ""out of"", len(answer), ""rows match"")
    
    if len(answer) < num_matches:
        return 100 * num_matches / len(answer)
    else:
        return num_matches * (100 / len(answer))
    
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,
79,lsn20_sat,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>This lab makes use of the sat.csv dataset, which describes the average SAT performance for students attending 350+ schools. Here is a typical line from the file:</p>
<p>&nbsp;</p>
<p><code>Henry Street School for International Studies, 391, 425, 385</code></p>
<p>&nbsp;</p>
<p><br />Each position in the line (separated by a comma) represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<th>School Name</th>
<th>Critical Reading Mean</th>
<th>Mathematics Mean</th>
<th>Writing Mean</th>
</tr>
</thead>
<tbody>
<tr>
<th>Henry Street School for International Studies</th>
<th>391</th>
<th>425</th>
<th>385</th>
</tr>
</tbody>
</table>
<p><br /><br />Write a Python algorithm that calculates the average SAT score across all schools, and outputs the names of every school that is below the average.</p>
<p>&nbsp;</p>
<p><strong>NOTES (really really important):</strong></p>
<ul>
<li>You can get a school's average score by adding up the critical reading, mathematics, and writing composite scores.</li>
</ul>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def solution():  
    result = ''
    file = open(""sat.csv"", ""r"")
    contents = file.read()
    lines = contents.split(""\n"")

    sat_table = []
    total = 0

    for line in lines:
        line_components = line.split(',')
        
        school = line_components[0]
        sat_score = int(line_components[1]) + int(line_components[2]) + int(line_components[3])
        total += sat_score
        row = [school, sat_score]
        sat_table.append(row)

    average = total / len(sat_table)

    for row in sat_table:
        if row[1] < average:
            result += str(row[0]) + ""\n""

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    expected_output = solution().strip().split('\n')
    output, error = autograder.run_script(""lsn20_sat.py"", [])
    lines = output.strip().split('\n')
    num_matches = autograder.compare_strings(lines, expected_output)
    
    print()
    
    if len(lines) == 0:
        return 0
    elif len(lines) > len(expected_output):
        print(""Your program printed more lines than we expected"")
        return round(100 * num_matches / len(lines), 1)
    else:
        return round(100.0/len(expected_output) * num_matches, 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
80,lsn20_popularnames,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>This program makes use of the names.csv dataset, which provides a list of over 1200+ names that were given to children in 2011. Here is a typical line from the file:</p>
<p>&nbsp;</p>
<p><code>FEMALE, HISPANIC, GIA, 21</code></p>
<p>&nbsp;</p>
<p><br />Each position in the line (separated by a comma) represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<th>Gender</th>
<th>Ethnicity</th>
<th>Name</th>
<th>Count<br />(i.e., Number of Children Assigned this Name)</th>
</tr>
</thead>
<tbody>
<tr>
<th>FEMALE</th>
<th>HISPANIC</th>
<th>GIA</th>
<th>21</th>
</tr>
</tbody>
</table>
<p><br /><br />Write a Python algorithm that gets a number,&nbsp;<code>X</code>, from the user, and prints out the X most popular names, starting with the most popular and working down.</p>
<p>For example, if the user types&nbsp;<code>5</code>, and you determine that the five most popular names are Adrian, David, Bob, Jane, Ulysses, your program should output:<br />Adrian<br />David<br />Bob<br />Jane<br />Ulysses<br /><br /></p>
<p><strong>HINTS (really really important):</strong></p>
<ul>
<li>Remember that you can use the&nbsp;<code>sort()</code>&nbsp;function to sort a list in ascending order. For example, if your list is named&nbsp;<code>my_list</code>, you can sort it by typing:<br /><code>my_list.sort()</code></li>
<li>For this lab, you need to sort the list in descending order, so that the most popular items appear first. To do this, you need to tell the function to sort in reverse. You can do this by typing the following (assuming your list is named&nbsp;<code>my_list</code>):<br /><code>my_list.sort(reverse=True)</code></li>
<li><code>sort()</code>&nbsp;will work on 2D lists. It will sort by the first column, and then look at the 2nd column in the event of a tie. Think about this when you are building your 2D list.</li>
</ul>
</div>","from cs110 import autograder
import random, math

expected_output = [
""ISABELLA"",
""MIA"",
""MOSHE"",
""ESTHER"",
""SOPHIA"",
""EMMA"",
""CAMILA"",
""CHAYA"",
""ETHAN"",
""JAYDEN"",
""SOFIA"",
""AVA"",
""JEREMIAH"",
""CHAIM"",
""JOSE"",
""CHANA"",
""LUIS"",
""ELLA"",
""CHARLOTTE"",
""HAILEY"",
""LEAH"",
""MADISON""]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    num_to_print = random.randint(5, 15)
    output, error = autograder.run_script(""lsn20_popularnames.py"", [num_to_print])
    lines = output.strip().split('\n')
    num_matches = autograder.compare_strings(lines, expected_output[:num_to_print])
    
    print()
    
    if len(lines) == 0:
        return 0
    elif len(lines) > len(expected_output[:num_to_print]):
        print(""Your program printed more lines than we expected"")
        return round(100 * num_matches / len(lines), 1)
    else:
        return round(100.0/len(expected_output[:num_to_print]) * num_matches, 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,1,1,1,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,
81,lsn20_lowvolume,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>This program makes use of the traffic.csv dataset. Here is a typical line from the file:</p>
<p>&nbsp;</p>
<p><code>691,6067 North,Kimball Ave,8/15/06,15600,North Bound:7500/South Bound:8100</code></p>
<p>&nbsp;</p>
<p><br />As you will recall from class, each position in the line (separated by a comma) represents a different ""data element"". Here is a key for your reference:</p>
<table width="""">
<thead>
<tr>
<th>ID</th>
<th>Address</th>
<th>Street</th>
<th>Sample Date</th>
<th>Total # of Passing Vehicles</th>
<th># of Vehicles by Direction</th>
</tr>
</thead>
<tbody>
<tr>
<th>691</th>
<th>6067 North</th>
<th>Kimball Ave</th>
<th>8/15/06</th>
<th>15600</th>
<th>North Bound:7500/South Bound:8100</th>
</tr>
</tbody>
</table>
<p><br /><br />Write a Python algorithm that opens the file and outputs the lowest traffic count. Then, output the name of all streets whose traffic count is within 2500 (inclusive) of the min. Output one street name per line.</p>
<p>&nbsp;</p>
<p>For example, if the min value is 500, and the roads within 2500 of this value are ""Road A"", ""Road B"", ""Road C"", then your program should output:</p>
<pre>500<br />Road A<br />Road B<br />Road C</pre>
</div>","from cs110 import autograder
import random, math

expected_output = [
""700"",
""Harbor Ave"",
""Woodlawn Ave"",
""Root St"",
""Calumet Ave"",
""Financial PL"",
""16th St"",
""Racine Ave"",
""60th St"",
""Wentworth Ave"",
""Parnell Ave"",
""Ashland Ave"",
""Federal St"",
""Hamlin Ave"",
""Pitney Ct"",
""109th St"",
""Loomis St"",
""Harrison St"",
""24th St"",
""La Salle St"",
""83rd Pl"",
""Homan Ave""]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""lsn20_lowvolume.py"", [])
    lines = set(output.split('\n'))
    matches = (len(lines.intersection(expected_output)))
    return (round((matches/22)*100,1))

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,1,0,0,0,
82,lsn20_averagetraffic,2,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>This program makes use of the traffic.csv dataset. Here is a typical line from the file:</p>
<p>&nbsp;</p>
<p><code>691,6067 North,Kimball Ave,8/15/06,15600,North Bound:7500/South Bound:8100</code></p>
<p>&nbsp;</p>
<p><br />As you will recall from class, each position in the line (separated by a comma) represents a different ""data element"". Here is a key for your reference:</p>
<table width=""1"">
<thead>
<tr>
<th>ID</th>
<th>Address</th>
<th>Street</th>
<th>Sample Date</th>
<th>Total # of Passing Vehicles</th>
<th># of Vehicles by Direction</th>
</tr>
</thead>
<tbody>
<tr>
<th>691</th>
<th>6067 North</th>
<th>Kimball Ave</th>
<th>8/15/06</th>
<th>15600</th>
<th>North Bound:7500/South Bound:8100</th>
</tr>
</tbody>
</table>
<p><br /><br />Write a Python algorithm that opens the file and outputs the # of roads whose traffic count is greater than (or equal to) the average. For example, if you determine that the answer is 20, your program should output:</p>
<pre>20</pre>
</div>
","from cs110 import autograder
import random, math

expected_output = [""525""]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(""lsn20_averagetraffic.py"", [])
    lines = output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_output)
       
    return round(num_matches * (100.0 / len(expected_output)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













",100,0,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
83,lsn19_skill2,2,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You are being provided with an empty table that contains information about
    USAF Academy Squadrons. The columns of the table are organized as follows:</p>
    <table style=""border-collapse: collapse; width: 42.3358%; height: 25px; margin-left: auto; margin-right: auto;""
        border=""1"">
        <tbody>
            <tr>
                <td style=""width: 50%; text-align: center;""><strong>Squadron Name</strong></td>
                <td style=""width: 50%; text-align: center;""><strong>Squadron Number</strong></td>
            </tr>
            <tr>
                <td style=""width: 50%; text-align: center;"">Name Goes Here (string)</td>
                <td style=""width: 50%; text-align: center;""># Goes Here (integer)</td>
            </tr>
        </tbody>
    </table>
    <p style=""text-align: center;"">&nbsp;</p>
    <p style=""text-align: left;"">Add the following two rows to the table:</p>
    <table style=""border-collapse: collapse; width: 41.3304%; height: 17px;"" border=""1"">
        <tbody>
            <tr>
                <td style=""width: 50%;"">Dogs of War</td>
                <td style=""width: 50%;"">3</td>
            </tr>
            <tr>
                <td style=""width: 50%;"">Wolverines</td>
                <td style=""width: 50%;"">19</td>
            </tr>
        </tbody>
    </table>
    <p><br><br></p>

</div>","from cs110 import autograder
import random, math
from lsn19_skill2 import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    if len(squadron_table) >= 2:
        print(""Squadron Table has at least 2 things in them.  Let's see what's inside!"")
        score += 20
        
        if (squadron_table[0][0] == ""Dogs of War"" and squadron_table[0][1] == 3):
            print(""First Row Added Correctly"")
            score += 40
        else:
            print(""Something is wrong with the first row.  Make sure you are appending a list!"")
        
        if (squadron_table[1][0] == ""Wolverines"" and squadron_table[1][1] == 19):
            print(""Second Row Added Correctly"")
            score += 40
        else:
            print(""Something is wrong with the second row.  Make sure you are appending a list!"")
    else:
        print(""Squadron Table does not appear to have (at least) 2 rows"")
        
    return score
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
84,lsn19_skill1,2,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You are being provided with a table&nbsp; that describes various starship classes from the Star Trek universe (I'm a nerd . . . go with it), as well as two input statements that get a row and column from the user. &nbsp;</p>
    <p>Print out the corresponding row/column value from the table.</p>
    <p>&nbsp;</p>
    
          </div>","from cs110 import autograder
import random, math

starship_table = [['Constitution', 288.6,  127.1,  72.6],
                  ['Galaxy',       642.5,  463.73, 135.26],
                  ['Intrepid',     343.0,  133.0,  66],
                  ['Sovereign',   685.3,  250.6,  88.2]]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    row_to_print = random.randint(0, len(starship_table) - 1)
    col_to_print = random.randint(0, len(starship_table[0]) - 1)
    value_from_table = str(starship_table[row_to_print][col_to_print])
    value_from_table_flipped = str(starship_table[col_to_print][row_to_print])
    output, error = autograder.run_script(""lsn19_skill1.py"", [row_to_print, col_to_print])
    
    if output.strip() == value_from_table:
        print(""CORRECT"")
        return 100.0
    elif output.strip() == value_from_table_flipped:
        print(""INCORRECT. Expected"", value_from_table)
        print(""It looks like you flipped columns and rows.  Remember that the format is list_name[row][col]"")
        return 25.0
    else:
        print(""INCORRECT. Expected"", value_from_table)
        print(""Try again.  Remember that the format is list_name[row][col]"")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
85,lsn19_population,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>You are being provided with a simple 2D list that contains the names and populations of the 10 largest cities in the world. This list (which is called&nbsp;<code>cities_table</code>) can be logicially visualized as the following:</p>
<p>&nbsp;</p>
<table>
<thead>
<tr>
<td><strong>City</strong></td>
<td><strong>Population</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td>Tokyo</td>
<td>37,435,191</td>
</tr>
<tr>
<td>Delhi</td>
<td>29,399,141</td>
</tr>
<tr>
<td>Shanghai</td>
<td>29,399,141</td>
</tr>
<tr>
<td>Sao Paulo</td>
<td>21,846,507</td>
</tr>
<tr>
<td>Mexico City</td>
<td>21,671,908</td>
</tr>
<tr>
<td>Cairo</td>
<td>20,484,965</td>
</tr>
<tr>
<td>Dhaka</td>
<td>20,283,552</td>
</tr>
<tr>
<td>Mumbai</td>
<td>20,185,064</td>
</tr>
<tr>
<td>Beijing</td>
<td>20,035,455</td>
</tr>
<tr>
<td>Osaka</td>
<td>19,222,665</td>
</tr>
</tbody>
</table>
<p><br />Write a Python program that gets a population from the user, and prints the names of all the cities whose populations are at least that big (starting with the most populated city). Print each city's name on a separate line.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Example 1</th>
<th>Example 2</th>
</tr>
</thead>
<tbody>
<tr>
<th>Input</th>
<th>28000000</th>
<th>30000000</th>
</tr>
<tr>
<th>Output</th>
<th>Tokyo<br />Delhi<br />Shanghai</th>
<th>Tokyo</th>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random

def solution(population):
    result = ''
    
    cities_table = [
        ['Tokyo', 37435191],
        ['Delhi', 29399141],
        ['Shanghai', 25647805],
        ['Sao Paulo', 21846507],
        ['Mexico City', 21671908],
        ['Cairo', 20484965],
        ['Dhaka', 20283552],
        ['Mumbai', 20185064],
        ['Beijing', 20035455],
        ['Osaka', 19222665]]
    
    for row in cities_table:
        if row[1] >= population:
            result += row[0] + '\n'
    
    return result.strip()


def test_passed():
    
    random_population_size = random.randint(19, 30) * 1000000
    
    output, error = autograder.run_script(""lsn19_population.py"", [random_population_size])
    answer = solution(random_population_size)
    
    lines = output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, answer.strip().split('\n'))
    
    if num_matches == len(lines):
        print(""\nCORRECT"")
        return 100.0
    else:
        print(""\nOne or more outputs were incorrect."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,
86,lsn19_movies,2,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<div>
<div>
<p>Write a Python function called&nbsp;<code>get_movies</code>&nbsp;that takes three parameters:</p>
<ul>
<li>A two-dimensional list containing movie titles and other stats (see table below for an example)</li>
<li>A rating (e.g., ""PG"", ""R"")</li>
<li>A run time (in minutes)</li>
</ul>
<p>&nbsp;</p>
<table width="""">
<thead>
<tr>
<th>Title</th>
<th>Release Year</th>
<th>Rating</th>
<th>Run Time (minutes)</th>
</tr>
</thead>
<tbody>
<tr>
<th>Star Wars: A New Hope</th>
<th>1977</th>
<th>PG</th>
<th>121</th>
</tr>
<tr>
<th>Star Trek: The Motion Picture</th>
<th>1979</th>
<th>G</th>
<th>132</th>
</tr>
<tr>
<th>Indiana Jones: Raiders of the Lost Ark</th>
<th>1989</th>
<th>PG</th>
<th>115</th>
</tr>
</tbody>
</table>
<p><br />Your function should return the number of movies that have the specified rating, and run for at least the number of minutes specified.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong><br />If the above table were contained within a list called&nbsp;<code>movie_table</code>, then&nbsp;<code>get_movies(movie_table, ""PG"", 100)</code>&nbsp;should return 2</p>
</div>
</div>
</div>
","from cs110 import autograder
import random
import lsn19_movies

def solution(movies_table, rating, runtime):
    count = 0
    
    for row in movies_table:
        if row[2] == rating and row[3] >= runtime:
            count += 1
    
    return count

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    ratings = ['PG', 'PG-13', 'R']
    num_passed = 0
    
    for rating in ratings:
        movies_table = [
            [""Star Wars: A New Hope"", 1977, ""PG"", 121],
            [""Star Trek: The Motion Picture"", 1979, ""G"", 132],
            [""Raiders of the Lost Ark"", 1989, ""PG"", 115],
            [""Indiana Jones and the Temple of Doom"", 1984, ""PG"", 118],
            [""Indiana Jones and the Last Crusade"", 1989, ""PG-13"", 127],
            [""Serenity"", 2005, ""PG-13"", 119],
            [""Joker"", 2019, ""R"", 122],
            [""The Terminator"", 1984, ""R"", 107]
            ]
        test_table = []
        runtime = random.randint(90, 120)
        
        for j in range(random.randint(2, 5)):
            index = random.randint(0, len(movies_table)-1)
            test_table.append(movies_table[index])
            movies_table.remove(movies_table[index])
        
        print(""Testing (Rating = "" + rating + ""):\n"" + ""  Movie Table: "" + str(test_table) + ""\n"" + ""  Runtime: "" + str(runtime))
        print(""  Expecting: "" + str(solution(test_table, rating, runtime)) + ""\n  Your Function's Output: "" + str(lsn19_movies.get_movies(test_table, rating, runtime)))
        
        if solution(test_table, rating, runtime) == lsn19_movies.get_movies(test_table, rating, runtime):
            print(""PASSED!\n"")
            num_passed += 1
        else:
            print(""INCORRECT\n"")
            
    
    return (num_passed / len(ratings)) * 100.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,
87,lsn19_golf,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>In, Python, write an algorithm that first asks the user how many football players they wish to enter statistics for and then gets that many yearly passing totals for each player. Output how many of those players that had more than 5000 passing yards in a year. Also your algorithm will output the average yardage per year as well as the minimum yardage entered, in that order. You can assume there is at least one player's yardage to input.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table width="""">
<thead>
<tr>
<td>&nbsp;</td>
<td>Example 1</td>
<td>Example 2</td>
<td>Example 3</td>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Inputs</strong></td>
<td>6<br />4924<br />4442<br />5117<br />2700<br />1990<br />4399</td>
<td>5<br />2305<br />4209<br />5100<br />5109<br />3800</td>
<td>4<br />4200<br />2709<br />3757<br />2976</td>
</tr>
<tr>
<td><strong>Outputs</strong></td>
<td>1<br />3928.6666666666665<br />1990</td>
<td>2<br />4104.6<br />2305</td>
<td>0<br />3410.5<br />2709</td>
</tr>
</tbody>
</table>
</div>

","from cs110 import autograder
import random, statistics

random_names = ['Mcllroy', 'Koepka', 'Rahm', 'Woods', 'Thomas', 'Johnson', 'Cantlay', 'Simpson']

def get_random_name():
    global random_names
    name = random_names[random.randint(0, len(random_names)-1)]
    random_names.remove(name)
    return name


def solution(data):
    min_value = 99999
    min_name = """"
    count = 0
    
    for row in data:
        if row[1] < min_value:
            min_value = row[1]
            min_name = row[0]
    
    for row in data:
        if row[1] <= min_value + 5:
            count += 1

    return min_name, (count / len(data) * 100.0)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_inputs = random.randint(2, 5)
    input_list = []
    data = []
        
    for i in range(num_inputs):
        new_row = [get_random_name(), random.randint(70, 90)]
        input_list.append(new_row[0])
        input_list.append(new_row[1])
        data.append(new_row)
    input_list.append(""END"")
    
    lowest_name, percent = solution(data)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn19_golf.py"", input_list)
    lines = output.strip().split('\n')

    # Checks Min
    if len(lines) < 2:
        print(""Number of output lines does not match"")
        return 0
    else:
        if not lowest_name == lines[0]:
            print(""Incorrect Name.  Expected "" + str(lowest_name))
            return 0
        if not autograder.equals(percent, lines[1]):
            print(""Incorrect Percent.  Expected "" + str(percent))
            return 50
        
    print(""PASSED!"")
    return 100
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,1,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
88,lsn19_credit,2,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<div>
<div>
<p>The Air Academy Federal Credit Union wants to identify its best customers and comes to you for help. To help with the accounting, create a Python program which inputs repeated pairs of member last-names followed by account balances until the word &ldquo;<strong>DONE</strong>&rdquo; (all capital letters) is entered at the member last-name prompt.</p>
<p>Your program should output:</p>
<ul>
<li>The last name of the member the highest account value, if there are two members with the same highest account value it should output the name of the first person entered.</li>
<li>It will then output the percentage members who are within $10,000 (inclusive) of the highest account value.</li>
</ul>
<p>There is no bound on the number of members that may be entered, but you may assume that there will be at least one member and balance entered.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong></p>
<table width="""">
<thead>
<tr>
<th>&nbsp;</th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>Rockefeller<br />120000<br />Chase<br />115000<br />Morgan<br />110000<br />Gates<br />90000<br />Jobs<br />65000<br />DONE</th>
<th>Jobs<br />150000<br />Chase<br />150000<br />Kennedy<br />40000<br />DONE</th>
<th>Morgan<br />145000<br />Chase<br />135000<br />Kennedy<br />142000<br />Gates<br />145000<br />DONE</th>
</tr>
<tr>
<th>Output</th>
<th>Rockefeller<br />60.0</th>
<th>Jobs<br />66.66666666666666</th>
<th>Morgan<br />100.0</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>
</div>
</div>
","from cs110 import autograder
import random, statistics

random_names = ['Gates', 'Bezos', 'Zuckerberg', 'Ellison', 'Page', 'Brin', 'Huateng', 'Dell', 'Musk', 'Allen']

def get_random_name():
    global random_names
    name = random_names[random.randint(0, len(random_names)-1)]
    random_names.remove(name)
    return name


def solution(data):
    highest_value = -99999
    highest_name = """"
    count = 0
    
    for row in data:
        if row[1] > highest_value:
            highest_value = row[1]
            highest_name = row[0]
    
    for row in data:
        if row[1] >= highest_value - 10000:
            count += 1

    return highest_name, (count / len(data) * 100.0)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_inputs = random.randint(5, 7)
    input_list = []
    data = []
        
    for i in range(num_inputs):
        new_row = [get_random_name(), random.randint(5000, 35000)]
        input_list.append(new_row[0])
        input_list.append(new_row[1])
        data.append(new_row)
    input_list.append(""DONE"")
    
    highest_balance, percent = solution(data)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn19_credit.py"", input_list)
    lines = output.strip().split('\n')

    # Checks Min
    if len(lines) < 2:
        print(""Number of output lines does not match"")
        return 0
    else:
        if not highest_balance == lines[0]:
            print(""Incorrect Highest Balance.  Expected "" + str(highest_balance))
            return 0
        if not autograder.equals(percent, lines[1]):
            print(""Incorrect Percent.  Expected "" + str(percent))
            return 50
        
    print(""PASSED!"")
    return 100
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,1,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,
89,lsn19_100m,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>You have been asked by your unit to record 100m dash times for an upcoming USAFA track meet. Create a Python algorithm that first asks for the number of cadets, and then asks for that many cadet last names, squadrons, and 100m dash times (in that order).</p>
<p>Your program should output:</p>
<ul>
<li>The cadet squadron containing the cadet with the fastest 100m dash time followed by their 100m dash time. If there is a tie for fastest 100m dash times, you should output the squadron number and time for the LAST cadet entered who had that fastest time.</li>
<li>The number of cadets whose 100m dash time was faster than the average.</li>
</ul>
<p>There is no bound on the number of cadet that may be entered, but you may assume that there will be at least one cadet and track time entered.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table width="""">
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Inputs</strong></td>
<td>4<br />Thorpe<br />13<br />10.2<br />Owens<br />22<br />9.93<br />Mathias<br />19<br />9.99<br />Rudolph<br />39<br />10.23</td>
<td>3<br />Johnson<br />7<br />10.3<br />Tyus<br />14<br />10.02<br />Lewis<br />40<br />9.67</td>
<td>2<br />Joyner<br />1<br />10.08<br />Kersee<br />29<br />9.97</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>22<br />9.93<br />2</td>
<td>40<br />9.67<br />1</td>
<td>29<br />9.97<br />1</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, statistics

random_names = ['Alice', 'Bob', 'Courtney', 'Devon', 'Frank', 'Genie']

def get_random_name():
    global random_names
    name = random_names[random.randint(0, len(random_names)-1)]
    random_names.remove(name)
    return name

def solution(data):
    fastest_time = 99999
    fastest_squadron = 0
    total = 0
    count = 0
    
    for row in data:
        total += row[2]
        if row[2] <= fastest_time:
            fastest_time = row[2]
            fastest_squadron = row[1]
            
    average = total / len(data)
    
    for row in data:
        if row[2] <= average:
            count += 1
    
    return fastest_squadron, fastest_time, count


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_inputs = random.randint(2, 5)
    input_list = [num_inputs]
    data = []
        
    for i in range(num_inputs):
        new_row = [get_random_name(), random.randint(1, 40), round(random.uniform(12, 18), 1)]
        input_list.append(new_row[0])
        input_list.append(new_row[1])
        input_list.append(new_row[2])
        data.append(new_row)
    
    fastest_squadron, fastest_time, count = solution(data)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn19_100m.py"", input_list)
    lines = output.strip().split('\n')

    # Checks Min
    if len(lines) != 3:
        print(""Number of output lines does not match"")
        return 0
    else:
        if not autograder.equals(fastest_squadron, lines[0]):
            print(""Incorrect Squadron.  Expected "" + str(fastest_squadron))
            return 0
        if not autograder.equals(fastest_time, lines[1]):
            print(""Incorrect Time.  Expected "" + str(fastest_time))
            return 33
        if not autograder.equals(count, lines[2]):
            print(""Incorrect Count.  Expected "" + str(count))
            return 67
        
    print(""PASSED!"")
    return 100
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
90,lsn18_swimstats,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Write a Python algorithm that keeps asking the user for swim times (in seconds) until the user types -1. Your program will print the following values (in order, one per line):</p>
<ul>
<li>Average time</li>
<li>Range (i.e., the difference between the min and max time)</li>
<li>Standard Deviation (hint: like many things in Python you can find how to accomplish this with a quick web search, stdev() should show up on top)</li>
</ul>
<p>&nbsp;</p>
<table width="""">
<thead>
<tr>
<th>&nbsp;</th>
<th>Example 1</th>
<th>Example 2</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>62<br />71<br />83<br />-1</th>
<th>45<br />47<br />51<br />46<br />44<br />-1</th>
</tr>
<tr>
<th>Outputs</th>
<th>72.0<br />21<br />8.602</th>
<th>46.6<br />7<br />2.417</th>
</tr>
</tbody>
</table>
<p><strong>&nbsp;</strong></p>
</div>

","from cs110 import autograder
import random, statistics

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    list_of_swim_times = []
    for i in range(6):
        list_of_swim_times.append(random.randint(40, 60))
    min_time = min(list_of_swim_times)
    max_time = max(list_of_swim_times)
    range_time = max_time - min_time
    average = sum(list_of_swim_times) / len(list_of_swim_times)
    
    # There are multiple standard deviations; this unit test accepts either one
    stdev = statistics.stdev(list_of_swim_times)
    pstdev = statistics.pstdev(list_of_swim_times)
    
    list_of_swim_times.append(-1)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn18_swimstats.py"", list_of_swim_times)
    lines = output.split('\n')

    # Checks Min
    if len(lines) != 4:
        print(""Number of output lines does not match"")
        return 0
    else:
        if not autograder.equals(average, lines[0]):
            print(""Invalid Average.  Expected "" + str(average))
            return 0
        if not autograder.equals(range_time, lines[1]):
            print(""Invalid Range.  Expected "" + str(range_time))
            return 33
        if not (autograder.equals(stdev, lines[2]) or equals(pstdev, lines[2])):
            print(""Invalid Std Dev.  Expected "" + str(stdev))
            return 67
        
    print(""PASSED!"")
    return 100


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,0,0,0,1,1,0,0,1,0,0,1,0,0,0,0,
91,lsn18_skill2,2,skill,0,"<p><strong>PROBLEM NAME:<br /></strong>lsn18_skill2</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You are being provided with a list containing 5 random numbers. Create a variable called <span style=""color: #ff0000;""><strong>my_value</strong></span>, and assign it the value of the 3rd item in&nbsp;the list.</p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li>You do not need to print my_value OR the list</li>
</ul>","from cs110 import autograder
import random, math
from lsn18_skill2 import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    if 'my_value' in globals():
        print(""Looking for my_value . . . FOUND!"")
        if my_value == my_list[2]:
            print(""Looking inside my_value . . . VALUE MATCHES THE 3rd VALUE IN THE LIST"")
            return 100
        elif my_value == my_list[3]:
            print(""Looking inside my_value . . . VALUE MATCHES THE 4th VALUE INSTEAD OF THE THIRD!"")
            print(""** HINT:  The index starts at 0 **"")
            return 50
        else:
            print(""Looking inside my_value . . . VALUE DOES NOT MATCH.  EXPECTED"", my_list[2])
            return 50
    else:
        print(""Looking for my_value . . . NOT FOUND!"")
        return 0
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
92,lsn18_skill1,2,skill,0,"<p><strong>PROBLEM STATEMENT:<br /></strong>Create a list called my_list. Put 3 items inside the list (they can be anything you want)</p>
<p>&nbsp;</p>
<p><strong>HINTS:<br /></strong>Look at the quick reference guide!<strong></strong></p>
<p>&nbsp;</p>","from cs110 import autograder
import random
from lsn18_skill1 import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    if 'my_list' in globals():
        print(""Looking for my_list . . . FOUND!"")
        if len(my_list) == 3:
            print(""Looking inside my_list . . . FOUND 3 ITEMS!"")
            return 100
        else:
            print(""Looking inside my_list . . . FOUND"", len(my_list), ""INSTEAD OF 3 ITEMS"")
            return 50
    else:
        print(""Looking for my_list . . . NOT FOUND!"")
        return0
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
93,lsn18_namesreverse,2,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Allow the user to enter names one at a time until they type the word 'END' (without quotes). This keyword is called a&nbsp;<strong>sentinel value,</strong>&nbsp;and it marks the end of the input. The user entered names (not counting 'END') are to be stored in a Python list. The user will enter the names one at a time. After entering all the names, your algorithm will print the names in the reverse order that they were entered.</p>
<p>&nbsp;</p>
<table width="""">
<thead>
<tr>
<th>&nbsp;</th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>Adrian<br />Liam<br />Michelle<br />END</th>
<th>Rick<br />Morty<br />END</th>
<th>Spock<br />Data<br />Dax<br />Burnham<br />END</th>
</tr>
<tr>
<th>Outputs</th>
<th>Michelle<br />Liam<br />Adrian</th>
<th>Morty<br />Rick</th>
<th>Burnham<br />Dax<br />Data<br />Spock</th>
</tr>
</tbody>
</table>
<p>You may assume that the user types at least one name.</p>
<p>&nbsp;</p>
<p><strong>HINTS:</strong></p>
<ul>
<li>Remember that the range() function can have up to 3 parameters. The first is the starting value, the second is the ending value, and the third is the increment amount.</li>
<li>Don't forget that the index of a list starts at 0, and goes to the length of the list - 1. For example, a list with 5 elements has indices 0, 1, 2, 3, and 4.</li>
<li>To get the length of a list, use the&nbsp;<code>len()</code>&nbsp;function</li>
</ul>
</div>","from cs110 import autograder
import random

def solution(name_list):
    result = ''
    
    for i in range(len(name_list) - 1, -1, -1):
        result += name_list[i] + ""\n""

    return result.strip()


def test_passed():
    
    name_list = [""Alice"", ""Bob"", ""Catrina"", ""Dennis"", ""Felix"", ""Garfield"", ""Henry"", ""Ignis"", ""Jack"", ""Kelly""]
    num_names = random.randint(3, len(name_list))
    input_list = []
    random_names = []
    
    for i in range(num_names):
        random_name = name_list[random.randint(0, len(name_list)-1)]
        input_list.append(random_name)
        random_names.append(random_name)
        name_list.remove(random_name)
    
    input_list.append(""END"")
    
    output, error = autograder.run_script(""lsn18_namesreverse.py"", input_list)
    expected_output = solution(random_names)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT.  Expected:"")
        print(expected_output)
    
    return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,1,0,1,0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,0,
94,lsn18_names,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Write a Python algorithm that asks the user for the number of names to process, and then gets that many values. Print out the names in alphabetical order, with each name starting on a line.</p>
<table>
<thead>
<tr>
<td>&nbsp;</td>
<td>Example 1</td>
<td>Example 2</td>
<td>Example 3</td>
</tr>
</thead>
<tbody>
<tr>
<td>Inputs</td>
<td>3<br />Alice<br />Jane<br />Bob</td>
<td>3<br />Bailey<br />Paul<br />Adrian</td>
<td>5<br />David<br />Dave<br />Steve<br />Barry<br />Troy</td>
</tr>
<tr>
<td>Outputs</td>
<td>Alice<br />Bob<br />Jane</td>
<td>Adrian<br />Bailey<br />Paul</td>
<td>Barry<br />Dave<br />David<br />Steve<br />Troy</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>You may assume that the user will enter at least one name.</p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li>Python has a built-in function called&nbsp;<code>sort()</code>&nbsp;that can be used to sort a list. Here is an example to show you how to use it:<br /><code># Declare a list and put some stuff in it</code><br /><code>my_list = ['b', 'c', 'a', 'd']</code><br /><br /><code># Sort the list alphabetically (a-z)</code><br /><code>my_list.sort()</code></li>
</ul>
<p><strong>&nbsp;</strong></p>
</div>
","from cs110 import autograder
import random

def solution(name_list):
    result = ''
    
    name_list.sort()
    
    for name in name_list:
        result += name + ""\n""
    
    return result.strip()


def test_passed():
    
    name_list = [""Alice"", ""Bob"", ""Catrina"", ""Dennis"", ""Felix"", ""Garfield"", ""Henry"", ""Ignis"", ""Jack"", ""Kelly""]
    num_names = random.randint(3, len(name_list))
    input_list = [num_names]
    random_names = []
    
    for i in range(num_names):
        random_name = name_list[random.randint(0, len(name_list)-1)]
        input_list.append(random_name)
        random_names.append(random_name)
        name_list.remove(random_name)
    
    output, error = autograder.run_script(""lsn18_names.py"", input_list)
    expected_output = solution(random_names)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT.  Expected:"")
        print(expected_output)
    
    return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,1,1,1,0,0,1,0,0,1,0,1,0,0,0,0,1,0,0,0,0,
95,lsn18_grades,2,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Create a Python program that asks how many students are in a class, then prompts the user for each student&rsquo;s grade. Then output the grades that are&nbsp;<strong>at least 10 points above the average.</strong></p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table width="""">
<thead>
<tr>
<th>&nbsp;</th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Input</th>
<th>3<br />10<br />100<br />70</th>
<th>3<br />30<br />40<br />60</th>
<th>4<br />10<br />20<br />60<br />90</th>
</tr>
<tr>
<th>Output</th>
<th>100</th>
<th>70</th>
<th>60<br />90</th>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random

def solution(grade_list):
    result = ''
    
    average = sum(grade_list) / len(grade_list)
    
    for grade in grade_list:
        if (grade >= (average + 10)):
            result += str(grade) + ""\n""
    
    return result.strip()


def test_passed():
    
    num_grades = random.randint(3, 7)
    input_list = [num_grades]
    random_grades = []
    
    for i in range(num_grades):
        random_grade = random.randint(0, 100)
        input_list.append(random_grade)
        random_grades.append(random_grade)
    
    output, error = autograder.run_script(""lsn18_grades.py"", input_list)
    expected_output = solution(random_grades)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT.  Expected:"")
        print(expected_output)
    
    return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
96,lsn18_combinations,2,lab,0,"<div id=""question_132367051_question_text"" class=""question_text user_content enhanced"">
          

<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Write a Python function called<span>&nbsp;</span><code>get_combinations</code><span>&nbsp;</span>that takes a list of distinct characters as a parameter, and returns a list containing all of the 2-letter combinations of said characters.</p>
<p>For example, given the following list:<br><code>my_list = ['a', 'b']</code></p>
<p><code>get_combinations(my_list)</code><span>&nbsp;</span>should return a list containing the following elements:<br>['aa', 'ab', 'ba', 'bb']</p>
<p>Notes:</p>
<ul>
<li>The ordering of the elements in the list does not matter, so long as all of the 2-letter combinations are contained within the list</li>
</ul>

      </div>
","from cs110 import autograder
import random, lsn18_combinations

STUDENT_SCRIPT = ""lsn18_combinations.py""


def solution(list_of_characters):
    result = []
    
    for character1 in list_of_characters:
        for character2 in list_of_characters:
            result.append(character2 + character1)
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    possible_characters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
    list_size = random.randint(2, len(possible_characters))
    test_input = []
    
    for i in range(list_size):
        random_index = int(random.random() * len(possible_characters))
        random_character = possible_characters[random_index]
        test_input.append(random_character)
        possible_characters.remove(random_character)

    # Runs the Script
    answer = solution(test_input)
    student_answer = lsn18_combinations.get_combinations(test_input)
    
    print(""Letters Provided:\n"", test_input, ""\n"")
    print(""Expected:\n"" + str(answer) + ""\n"")
    print(""Your List:\n"" + str(student_answer) + ""\n"")

    if len(answer) == len(student_answer):
        for combo in answer:
            if student_answer.count(combo) != 1:
                print(""Missing Combo Value: "" + combo)
                return 0
    else:
        print(""Lists are not the same size"")
        return 0
    
    print(""CORRECT"")
    return 100
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,
97,lsn16_practice4,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset called&nbsp;<code>fuelprices.csv</code>&nbsp;that contains monthly gasoline prices from 2006 - 2012. Here is a typical line from the dataset (each line ends with the newline &ldquo;\n&rdquo; character):</p>
<p><code>1/1/2006 0:00,Regular,2.314</code></p>
<p>&nbsp;</p>
<p>Each position in the line (separated by a comma) represents a different &ldquo;data element,&rdquo; or &ldquo;column.&rdquo; The following table shows how the above line can be interpreted:</p>
<table>
<thead>
<tr>
<td>&nbsp;</td>
<td>Day</td>
<td>Gas Type</td>
<td>Price (in Dollars)</td>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td>1/1/2006 0:00</td>
<td>Regular</td>
<td>2.314</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python program that asks the user for:</p>
<ul>
<li>A Gas Type (e.g., &ldquo;Regular&rdquo;)</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then read the file and output:</p>
<ul>
<li>The average price of gas for that gas type</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math


def test_passed():

    num_tests_passed = 0
    test_cases = [(""Regular"", 37, 2.938), (""Midgrade"", 37, 3.098), (""Premium"", 37, 3.208), (""Diesel"", 32, 3.242)]

    for test_case in test_cases:
        print(""# -----------------------------------"")
        print(""# Testing"", test_case[0])
        print(""# -----------------------------------"")
        output, error = autograder.run_script(""lsn16_practice4.py"", [test_case[0]])
    
        lines = output.strip().split('\n')
        
        if len(lines) > 0:
            if autograder.equals(lines[0], test_case[2]):
                print(""CORRECT"")
                num_tests_passed += 1
            elif len(lines) > 1 and autograder.equals(lines[0], test_case[1]) and autograder.equals(lines[1], test_case[2]):
                print(""CORRECT"")
                num_tests_passed += 1
            else:
                print(""INCORRECT"")
            print()
                    
    return round(100 / len(test_cases), 1) * num_tests_passed
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
98,lsn16_practice3,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You are writing a program to analyze the BMI of cadets. Write a program that asks for the number of cadets, and then gets that many weights and heights (alternating, a weight then the corresponding height, in that order). Your program should then output the number of thin, healthy, overweight, and obese cadets (based on their BMI), using the following formula and table as a guide:</p>
<p>&nbsp;</p>
<p><strong>BMI = 703 * (weight / height<sup>2</sup>)</strong></p>
<p>&nbsp;</p>
<table border=""1"">
<tbody>
<tr>
<td><strong>Rating</strong></td>
<td><strong>BMI</strong></td>
</tr>
<tr>
<td>Thin</td>
<td>less than 18.5</td>
</tr>
<tr>
<td>Healthy</td>
<td>at least 18.5 but less than 25</td>
</tr>
<tr>
<td>Overweight</td>
<td>at least 25 but less than 30</td>
</tr>
<tr>
<td>Obese</td>
<td>30 or more</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def solution(weights, heights):
    num_thin = 0
    num_healthy = 0
    num_overweight = 0
    num_obese = 0
    
    for i in range(len(weights)):
        bmi = 703 * (weights[i] / heights[i]**2)

        if bmi <= 18.5:
            num_thin += 1
        elif bmi <= 25:
            num_healthy += 1
        elif bmi <= 30:
            num_overweight += 1
        else:
            num_obese += 1
    
    return (num_thin, num_healthy, num_overweight, num_obese)


def test_passed():

    score = 0

    # Generates the Test Set
    num_students = random.randint(5, 10)
    inputs = [num_students]
    weights = []
    heights = []
    
    for i in range(num_students):
        random_weight = random.randint(120, 200)
        random_height = random.randint(55, 76)
        
        weights.append(random_weight)
        heights.append(random_height)
        
        inputs.append(random_weight)
        inputs.append(random_height)
    
    output, error = autograder.run_script(""lsn16_practice3.py"", inputs)
    expected_output = solution(weights, heights)
    
    lines = output.strip().split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Thin is Correct"")
        score += 25
    else:
        print(""Thin is Incorrect.  Expected"", expected_output[0])

    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Healthy is Correct"")
        score += 25
    else:
        print(""Healthy is Incorrect.  Expected"", expected_output[1])
    
    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):
        print(""Overweight is Correct"")
        score += 25
    else:
        print(""Overweight is Incorrect.  Expected"", expected_output[2])
    
    if len(lines) > 3 and autograder.equals(lines[3], expected_output[3]):
        print(""Obese is Correct"")
        score += 25
    else:
        print(""Obese is Incorrect.  Expected"", expected_output[0])
        
    return score


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
99,lsn16_practice2,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a function that returns the n<sup>th</sup> value in a sequence (<sup>i.e.,</sup> pattern). Get a number from the user (x), and print the x<sup>th</sup> to the x+5th value in that sequence (6 numbers total).</p>
<p>&nbsp;</p>
<p><strong>HINTS:</strong></p>
<ul>
<li>To get the 8th value in a sequence, you would call <code>get_value(8)</code></li>
</ul>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, math


def get_value(n):
    return (2 * n) + 1


def solution(x):
    result = ''
    
    for i in range(x, x+6):
        result += str(get_value(i)) + ""\n""
    
    return result


def test_passed():
    random_value = random.randint(5, 15)
    output, error = autograder.run_script(""lsn16_practice2.py"", [random_value])
    expected_output = solution(random_value)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT.  Expected:"")
        print(expected_output)
    
    return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
100,lsn16_practice1,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Define a function called add_values. The function&nbsp;should take 3 parameters (x, y, z), and return the sum of these values.</p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li>You do not need to call the function. Simple define it.</li>
</ul>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import lsn16_practice1

def add_values(x, y, z):
    return x + y + z

def test_passed():
    
    if 'add_values' in dir(lsn16_practice1) and add_values(1, 2, 3) == lsn16_practice1.add_values(1, 2, 3):
        print(""PASSED"")
        return 100.0
    elif 'add_values' not in dir(lsn16_practice1):
        print(""FAILED.  Could not find function 'add_values'"")
    elif result != solution:
        print(""FAILED.  Function 'add_values' did not return the correct value"")
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
101,lsn15_titanicsurvivor,2,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>This program makes use of the Titanic dataset. Here is a typical line from the file:</p>
<p><code>0,3,Mr. Owen Harris Braund,male,22,1,0,7.25</code></p>
<p><br />As you will undoubtedly recall from class, each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Survived<br />(0=False; 1=True)</th>
<th>Class</th>
<th>Name</th>
<th>Gender</th>
<th>Age</th>
<th>Siblings/Spouses Aboard<br />(0=False; 1=True)</th>
<th>Parents/Children Aboard<br />(0=False; 1=True)</th>
<th>Fare</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>0</th>
<th>3</th>
<th>Mr. Owen Harris Braund</th>
<th>male</th>
<th>22</th>
<th>1</th>
<th>0</th>
<th>7.25</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python algorithm that asks the user for the name of the file containing the titanic dataset. Your program will output the name of the survivor with the lowest fare. Print that person's name in a separate file (named ""result.txt"")</p>
<p>For example, if the survivor's name is Mr. Owen Harris Braund, result.txt should contain the following:</p>
<pre>Mr. Owen Harris Braund<br />7.25</pre>
<p><br /><strong>NOTES:</strong></p>
<ul>
<li>The values used in the above example are purely hypothetical. Your answers will be different.</li>
<li>To thoroughly test your code, we created several subsets of the titanic dataset. Use them when developing/troubleshooting your code.</li>
</ul>
</div>","from cs110 import autograder
import random, math, os.path

lowest_fare = 9999999
lowest_fare_name = ''

def solution(filename):
    global lowest_fare, lowest_fare_name

    file = open(filename, 'r')
    file_contents = file.read()
    lines_in_file = file_contents.split('\n')
    result = ''

    for line in lines_in_file:
        line_components = line.split(',')
        
        survived = line_components[0] == '1'
        name = line_components[2]
        fare = float(line_components[7])
        
        if survived == True:
            if fare < lowest_fare:
                lowest_fare = fare
                lowest_fare_name = name

    file.close()


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
   
    
    # Deletes Result.txt if it already exists
    if (os.path.exists(""result.txt"")):
        os.remove(""result.txt"")
    
    output, error_message = autograder.run_script(""lsn15_titanicsurvivor.py"", [""titanic2.csv""])
    
    # Checks to see if the file was created by the program
    if (not os.path.exists(""result.txt"")):
        print(""result.txt is missing"")
    else:
        solution(""titanic2.csv"")
        
        file = open(""result.txt"", ""r"")
        file_contents = file.read()
        lines = file_contents.strip().split('\n')
        
        if lines[0] == lowest_fare_name:
            print(""Correct Passenger"")
            score += 50
        else:
            print(""Incorrect Passenger"", lowest_fare_name)
        
        if autograder.equals(lines[1], lowest_fare):
            print(""Correct Lowest Fare"")
            score += 50
        else:
            print(""Incorrect Lowest Fare."", lowest_fare)
    
    return score
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,
102,lsn15_titanicfares,2,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>This program makes use of the Titanic dataset. Here is a typical line from the file:</p>
<p><code>0,3,Mr. Owen Harris Braund,male,22,1,0,7.25</code></p>
<p><br />As you will undoubtedly recall from class, each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Survived<br />(0=False; 1=True)</th>
<th>Class</th>
<th>Name</th>
<th>Gender</th>
<th>Age</th>
<th>Siblings/Spouses Aboard<br />(0=False; 1=True)</th>
<th>Parents/Children Aboard<br />(0=False; 1=True)</th>
<th>Fare</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>0</th>
<th>3</th>
<th>Mr. Owen Harris Braund</th>
<th>male</th>
<th>22</th>
<th>1</th>
<th>0</th>
<th>7.25</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python algorithm that asks the user for the name of the file containing some or all of the Titanic dataset, as well as a passenger class (an integer between the values of 1 and 3). Your program should calculate the highest and lowest fare for that passenger class, and print out the result to a file called ""result.txt"".</p>
<p>For example, if the highest and lowest fare for 2nd class is $20 and $8, respectively, your output file should contain:</p>
<pre>20<br />8</pre>
<p><br /><strong>NOTES:</strong></p>
<ul>
<li>The values used in the above example are purely hypothetical. Your answers will be different.</li>
<li>Some passengers in the real dataset (like Jack in the movie Titanic--yes, I've seen it . . . don't judge me) have a fare of $0. To thoroughly test your code, we made a separate dataset (titanic2.csv) that removes these values.</li>
</ul>
</div>","from cs110 import autograder
import random, math, os.path

highest_fare = 0
lowest_fare = 9999999

def solution(filename, passenger_class):
    global highest_fare, lowest_fare

    file = open(filename, 'r')
    file_contents = file.read()
    lines_in_file = file_contents.split('\n')
    result = ''

    for line in lines_in_file:
        line_components = line.split(',')
        
        p_class = int(line_components[1])
        fare = float(line_components[7])
        
        if passenger_class == p_class:
            if fare > highest_fare:
                highest_fare = fare
            if fare < lowest_fare:
                lowest_fare = fare

    file.close()


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    random_passenger_class = random.randint(1, 3)
    
    # Deletes Result.txt if it already exists
    if (os.path.exists(""result.txt"")):
        os.remove(""result.txt"")
    
    output, error_message = autograder.run_script(""lsn15_titanicfares.py"", [""titanic2.csv"", random_passenger_class])
    
    # Checks to see if the file was created by the program
    if (not os.path.exists(""result.txt"")):
        print(""result.txt is missing"")
    else:
        solution(""titanic2.csv"", random_passenger_class)
        
        file = open(""result.txt"", ""r"")
        file_contents = file.read()
        lines = file_contents.strip().split('\n')
        if len(lines) < 2:
            print(""Not enough lines in result.txt"")
        
        if autograder.equals(lines[0], highest_fare):
            print(""Correct Highest Fare"")
            score += 50
        else:
            print(""Incorrect Highest Fare.  Expected:"", highest_fare)
        
        if autograder.equals(lines[1], lowest_fare):
            print(""Correct Lowest Fare"")
            score += 50
        else:
            print(""Incorrect Lowest Fare.  Expected:"", lowest_fare)
    
    return score
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)














# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,
103,lsn15_survivors_by_gender,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>This program makes use of the Titanic dataset. Here is a typical line from the file:</p>
<p><code>0,3,Mr. Owen Harris Braund,male,22,1,0,7.25</code></p>
<p><br />As you will undoubtedly recall from class, each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Survived<br />(0=False; 1=True)</th>
<th>Class</th>
<th>Name</th>
<th>Gender</th>
<th>Age</th>
<th>Siblings/Spouses Aboard<br />(0=False; 1=True)</th>
<th>Parents/Children Aboard<br />(0=False; 1=True)</th>
<th>Fare</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>0</th>
<th>3</th>
<th>Mr. Owen Harris Braund</th>
<th>male</th>
<th>22</th>
<th>1</th>
<th>0</th>
<th>7.25</th>
</tr>
</tbody>
</table>
<p><br /><br />Write a Python algorithm that asks the user for the name of the file containing the titanic dataset, and counts how many males/females survived. Your program should print out each answer to a file called ""result.txt"".</p>
<p>For example, if 400 men, and 700 women survived, your output file should contain:<br />400<br />700</p>
<p>&nbsp;</p>
<p><strong>NOTE: When you print to a file, make sure you put a new line at the end of each answer!</strong></p>
</div>","from cs110 import autograder
import random, math, os.path

num_males = 0
num_females = 0

def solution(filename):
    global num_males, num_females

    input_file = open(filename, ""r"")
    contents = input_file.read()
    lines = contents.split(""\n"")

    for line in lines:
        line_components = line.split(',')
        
        if line_components[0] == '1' and line_components[3] == 'male':
            num_males += 1
        if line_components[0] == '1' and line_components[3] == 'female':
            num_females += 1

    input_file.close()


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    # Deletes Result.txt if it already exists
    if (os.path.exists(""result.txt"")):
        os.remove(""result.txt"")
    
    output, error_message = autograder.run_script(""lsn15_survivors_by_gender.py"", [""titanic.csv""])
    
    # Checks to see if the file was created by the program
    if (not os.path.exists(""result.txt"")):
        print(""result.txt is missing"")
    else:
        solution(""titanic.csv"")
        
        file = open(""result.txt"", ""r"")
        file_contents = file.read()
        lines = file_contents.strip().split('\n')
        if len(lines) < 2:
            print(""Not enough lines in result.txt"")
        else:    
            if autograder.equals(lines[0], num_males):
                print(""Correct Number of Males:"")
                score += 50
            else:
                print(""Incorrect Number of Males"")
            
            if autograder.equals(lines[1], num_females):
                print(""Correct Number of Females"")
                score += 50
            else:
                print(""Incorrect Number of Females"")
    
    return score
    
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,0,
104,lsn15_skill2,2,skill,0,"
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a python program that creates a file called ""output.txt"" and prints a message of your choosing.</p>
<p><strong>HINTS:<br /></strong>Look at the quick reference guide!</p>
","from cs110 import autograder
import random, math, os

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0.0
    
    # Deletes Result.txt if it already exists
    if (os.path.exists(""output.txt"")):
        os.remove(""output.txt"")
    
    output, error_message = autograder.run_script(""lsn15_skill2.py"", [])
    
    if (os.path.exists(""output.txt"")):
        print(""File Found!"")
        score += 50
        file = open(""output.txt"", ""r"")
        file_contents = file.read()
        if (len(file_contents) > 0):
            print(""File has Something in it!"")
            score += 50
        else:
            print(""output.txt appears to be empty.  Did you forget to close the file or write to it?"")
    else:
        print(""File output.txt does not appear to exist"")
    
    return score
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
105,lsn15_skill1,2,skill,0,"
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a file called sample.txt. Write a python program that opens this file and prints all of its contents as a single string.</p>
<p>&nbsp;</p>
<p><strong>HINTS:<br /></strong><span>Look at the quick reference guide!</span></p>
<p>&nbsp;</p>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    expected_output = ""Lorem ipsum dolor sit amet, qui at luptatum efficiantur, ne autem offendit expetendis mel. Nec augue assentior ea, ne debet virtute mel. Integre vivendo id usu, ne primis repudiandae ullamcorper cum. Harum prompta appellantur vix ut. Ius voluptatibus definitiones te, eius scribentur referrentur mei at. Suas tota velit in usu, ex has complectitur signiferumque, sale lorem dolore ei ius. Perpetua scriptorem mei ex, ex est illum summo consul.""
    
    output, error_message = autograder.run_script(""lsn15_skill1.py"", [])
        
    lines = output.strip().split('\n')
    expected_lines = expected_output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_lines)
    
    if num_matches == len(lines):
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT"")
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












",100,0,0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
106,lsn15_runways,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>This program makes use of the Runways dataset. Here is a typical line from the file:</p>
<p>&nbsp;</p>
<p><code>17245.8*A ND17/35, RICKETYBACK FIELD, 2600, 100, TURF</code></p>
<p>&nbsp;</p>
<p><br />Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Location ID</th>
<th>Name</th>
<th>Runway Length (in feet)</th>
<th>Runway Width (in feet)</th>
<th>Runway Type</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>17245.8*A ND17/35</th>
<th>RICKETYBACK FIELD</th>
<th>2600</th>
<th>100</th>
<th>TURF</th>
</tr>
</tbody>
</table>
<p><br /><br />Write a Python program that asks the user for the name of the file containing the Runways dataset, as well as the length and width of the runway. Your program should print the Location ID of every runway whose length and width meets or exceeds the specified values.</p>
<p>For example, if the user types 4000 and 100 for length and width, respectively, your program should output:</p>
<pre>17265.<em>A ND03/21<br />17265.</em>A ND13/31<br />17302.<em>A ND13/31<br />17304.</em>A ND14/32<br />17367.<em>A ND13/31<br />17417.5</em>A ND11/29<br />17418.<em>A ND08/26<br />17418.</em>A ND13/31<br />17328.<em>A ND09/27<br />17328.</em>A ND18/36<br />17347.<em>A ND08/26<br />17349.1</em>A ND08/26<br />17349.1<em>A ND17R/3<br />17496.1</em>A ND11/29</pre>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def solution(filename, length, width):
    file = open(filename, 'r')
    file_contents = file.read()
    lines_in_file = file_contents.split('\n')
    result = ''

    for line in lines_in_file:
        columns = line.split(',')
        if length <= float(columns[2]) and width <= float(columns[3]):
            result += columns[0] + ""\n""

    file.close()
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_length = random.randint(3000, 4000)
    random_width = random.randint(100, 200)
    
    output, error_message = autograder.run_script(""lsn15_runways.py"", [""runways.csv"", random_length, random_width])
    expected_output = solution(""runways.csv"", random_length, random_width)
    
    lines = output.strip().split('\n')
    expected_lines = expected_output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_lines)
    
    if num_matches == len(lines):
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT"")
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)











",100,1,0,1,0,1,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,
107,lsn15_echo,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a program that asks the user to type the name of a file (e.g., ""file.txt""), and a letter. Your program should then open the file, and print out all of the lines where the first character starts with the letter</p>
<p>For example, if the user types the following filename:</p>
<pre><code>input1.txt
a
</code></pre>
<p>and the contents of input1.txt are:</p>
<pre><code>aspiration
classified
federation
</code></pre>
<p>the output should be:</p>
<pre><code>aspiration
</code></pre>
<p>&nbsp;</p>
<p>Notes:</p>
<ul>
<li>Each line ends with the '\n' character. Use&nbsp;<code>split()</code>&nbsp;to get each line.</li>
<li>Refer to the String Functions slide to see how you can get the first character from a string</li>
</ul>
</div>","from cs110 import autograder
import random, math

def solution(filename, letter):
    result = ''
    
    file = open(filename, ""r"")
    contents = file.read()
    lines = contents.split(""\n"")

    for line in lines:
        if line[0] == letter:
            result += line + ""\n""

    file.close()

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_letter = chr(random.randint(97, 122))
    
    output, error_message = autograder.run_script(""lsn15_echo.py"", [""file.txt"", random_letter])
    expected_output = solution(""file.txt"", random_letter)
    
    lines = output.strip().split('\n')
    expected_lines = expected_output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_lines)
    
    if num_matches == len(lines):
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT"")
        return 0.0
        

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)











",100,1,0,1,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,
108,lsn14_timestable,2,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write an algorithm that asks the user for a positive&nbsp;number and then outputs the multiplication table of that number 1-10.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Example 1</th>
<th>Example 2</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>3</th>
<th>9</th>
</tr>
<tr>
<th>Outputs</th>
<th>
<p>3<br />6<br />9<br />12<br />15<br />18<br />21<br />24<br />27<br />30</p>
</th>
<th>9<br />18<br />27<br />36<br />45<br />54<br />63<br />72<br />81<br />90</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def solution(multiple):
    result = ''
    i = 1
    
    while i <= 10:
        result += str(i * multiple) + ""\n""
        i += 1
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_multiple = random.randint(1, 20)

    output, error_message = autograder.run_script(""lsn14_timestable.py"", [random_multiple])
    expected_output = solution(random_multiple)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)








",100,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
109,lsn14_skill2,2,skill,0,"
<p><strong>PROBLEM STATEMENT:<br /></strong>You are trying to use a for loop to print all of the powers of 2 from 1024 (2<sup>10</sup>) to 1 (2<sup>0</sup>). Unfortunately, for some reason, the loop does not work. Review the code and make the necessary corrections.</p>","from cs110 import autograder
import random, math

def solution():
    result = ''
    i = 10
    
    while i >= 0:
        result += str(2 ** i) + ""\n""
        i -= 1
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error_message = autograder.run_script(""lsn14_skill2.py"", [])
    expected_output = solution()
    
    lines = output.strip().split('\n')

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)









",100,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
110,lsn14_skill1,2,skill,0,"
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a variable that asks the user for the number of times to loop. Construct a FOR loop that loops this many times&nbsp;printing out a message each time (the message can be whatever you want)</p>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_multiple = random.randint(1, 10)

    output, error_message = autograder.run_script(""lsn14_skill1.py"", [random_multiple])
    
    lines = output.strip().split('\n')

    if len(lines) == random_multiple:
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Make sure your loop is repeating num_times_to_loop times"")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)








",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
111,lsn14_printchars,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a Python algorithm that asks the users for two ASCII characters (e.g., 'a', 'z'), and prints all of the characters between them (inclusive).</p>
<ul>
<li>If the first character has a lower ASCII value than the second (e.g., 'a' - 'z'), print out the letters in ascending order.</li>
<li>Alternatively, if the second letter has a lower ASCII value, print out the letters in descending order.</li>
</ul>
<p>&nbsp;</p>
<p><strong>HINTS:</strong></p>
<ul>
<li>Use the&nbsp;<code>ord()</code>&nbsp;function to convert a character into an integer:<br /><code>ord('a')</code>&nbsp;returns 141<br /><br /></li>
<li>Use the&nbsp;<code>chr()</code>&nbsp;function to convert an integer back into a character:<br /><code>chr(142)</code>&nbsp;returns 'b'</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Example 1</th>
<th>Example 2</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>a<br />c</th>
<th>f<br />a</th>
</tr>
<tr>
<th>Outputs</th>
<th>
<p>a<br />b<br />c</p>
</th>
<th>f<br />e<br />d<br />c<br />b<br />a</th>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

def solution(start_char, end_char):
    result = ''
    
    start_char = ord(start_char)
    end_char = ord(end_char)
    
    if start_char < end_char:
        for i in range(start_char, end_char+1, 1):
            result += chr(i) + '\n'
    else:
        for i in range(start_char, end_char-1, -1):
            result += chr(i) + '\n'

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    print(""# ------------------------------------------"")
    print(""# Test 1:  First letter lower than second"")
    print(""# ------------------------------------------"")
    start_char = chr(random.randint(65, 85))
    end_char   = chr(random.randint(ord(start_char), 90))

    output, error_message = autograder.run_script(""lsn14_printchars.py"", [start_char, end_char])
    expected_output = solution(start_char, end_char)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT\n"")
        score += 50
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
        
    
    print(""# ------------------------------------------"")
    print(""# Test 2:  First letter higher than second"")
    print(""# ------------------------------------------"")
    start_char = chr(random.randint(85, 90))
    end_char   = chr(random.randint(65, 84))

    output, error_message = autograder.run_script(""lsn14_printchars.py"", [start_char, end_char])
    expected_output = solution(start_char, end_char)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT\n"")
        score += 50
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)









",100,1,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
112,lsn14_football,2,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>In, Python, write an algorithm that first asks the user how many football players they wish to enter statistics for and then gets that many yearly passing totals for each player. Output how many of those players that had more than 5000 passing yards in a year. Also your algorithm will output the average yardage per year as well as the minimum yardage entered, in that order. You can assume there is at least one player's yardage to input.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table width=""400"">
<thead>
<tr>
<td>&nbsp;</td>
<td>Example 1</td>
<td>Example 2</td>
<td>Example 3</td>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Inputs</strong></td>
<td>6<br />4924<br />4442<br />5117<br />2700<br />1990<br />4399</td>
<td>5<br />2305<br />4209<br />5100<br />5109<br />3800</td>
<td>4<br />4200<br />2709<br />3757<br />2976</td>
</tr>
<tr>
<td><strong>Outputs</strong></td>
<td>1<br />3928.6666666666665<br />1990</td>
<td>2<br />4104.6<br />2305</td>
<td>0<br />3410.5<br />2709</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    num_entries = random.randint(1, 6)
    num_above_5000 = random.randint(0, num_entries)
    list_of_values = [num_entries]
    
    for i in range(num_entries):
        if i < num_above_5000:
            list_of_values.append(random.randint(5001, 8000))
        elif i == num_above_5000:
            list_of_values.append(5000)
        else:
            list_of_values.append(random.randint(1, 5000))
    
    average = sum(list_of_values[1:])/num_entries
    min_value = min(list_of_values[1:])
    
    output, error_message = autograder.run_script(""lsn14_football.py"", list_of_values)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if len(lines) >= 1 and autograder.equals(lines[0], num_above_5000):
        print(""Number Above 5000 Looks Good"")
        score += 33
    else:
        print(""Number Above 5000 is Incorrect (or Missing)"")
    
    if len(lines) >= 2 and autograder.equals(lines[1], average):
        print(""Average Looks Good"")
        score += 33
    else:
        print(""Average is Incorrect (or Missing)"")
    
    if len(lines) >= 3 and autograder.equals(lines[2], min_value):
        print(""Min Value Looks Good"")
        score += 34
    else:
        print(""Min Value is Incorrect (or Missing)"")
        
    return score
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
113,lsn14_counting,2,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a Python algorithm that gets three numbers from the user, X, Y, and Z. Then have the algorithm output all the numbers from X to Y (inclusive), counting by Z. You may assume that Z is non-zero.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table width="""">
<thead>
<tr>
<td>&nbsp;</td>
<td>Example 1</td>
<td>Example 2</td>
<td>Example 3</td>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Inputs</strong></td>
<td>1<br />5<br />1</td>
<td>-5<br />-10<br />-3</td>
<td>15<br />15<br />100</td>
</tr>
<tr>
<td><strong>Outputs</strong></td>
<td>1<br />2<br />3<br />4<br />5</td>
<td>-5<br />-8</td>
<td>15</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

def solution(random_start, random_end, random_increment):
    result = ''

    for i in range(random_start, random_end+1, random_increment):
        result += str(i) + ""\n""

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_start = random.randint(0, 10)
    random_end = random.randint(50, 100)
    random_increment = random.randint(2, 9)

    output, error_message = autograder.run_script(""lsn14_counting.py"", [random_start, random_end, random_increment])
    expected_output = solution(random_start, random_end, random_increment)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
114,lsn14_coordinates,2,lab,0,"<div>
    <p><strong>PROBLEM STATEMENT:<br /></strong>Write a Python algorithm that prints all the coordinates in a coordinate plane, given two corners. Your program should get four inputs from the user:</p>
    <ul>
    <li>the starting x-coordinate,</li>
    <li>the ending x-coordinate,</li>
    <li>the starting y-coordinate, and</li>
    <li>the ending y-coordinate.</li>
    </ul>
    <p>Your program will then print out all of the coordinates in x y order (separating coordinates with a space), listing all of the coordinates in the x-axis before incrementing y. You may assume that the ending coordinate is never less than the starting coordinate.<br /></p>
    <p>For example, your algorithm would print out:<br />1 2<br />2 2<br />3 2<br />4 2<br />5 2<br />6 2<br />1 3<br />2 3<br />3 3<br />4 3<br />5 3<br />6 3<br />. . . and so on</p>
    <p>&nbsp;</p>
    <p><strong>HINTS:</strong></p>
    <ul>
    <li>Write a loop that first prints all of the x coordinates from start to end</li>
    <li>Use a nested loop to print all of the y coordinates from start to end</li>
    </ul>
    <p>&nbsp;</p>
    <p><strong>EXAMPLES:</strong></p>
    <table width=""300"">
    <thead>
    <tr>
    <td>&nbsp;</td>
    <td><strong>Example 1</strong></td>
    <td><strong>Example 2</strong></td>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td><strong>Inputs</strong></td>
    <td>0<br />1<br />0<br />1</td>
    <td>0<br />2<br />0<br />1</td>
    </tr>
    <tr>
    <td><strong>Outputs</strong></td>
    <td>0 0<br />1 0<br />0 1<br />1 1</td>
    <td>0 0<br />1 0<br />2 0<br />0 1<br />1 1<br />2 1</td>
    </tr>
    </tbody>
    </table>
    <p>&nbsp;</p>
    </div>","from cs110 import autograder
import random, math

def solution(start_x, end_x, start_y, end_y):
    result = ''

    for y in range(start_y, end_y+1):
        for x in range(start_x, end_x+1):
            result += str(x) + "" "" + str(y) + ""\n""

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    start_x = random.randint(-2, -1)
    end_x = random.randint(1, 2)
    start_y = random.randint(-3, -1)
    end_y = random.randint(1, 3)

    output, error_message = autograder.run_script(""lsn14_coordinates.py"", [start_x, end_x, start_y, end_y])
    expected_output = solution(start_x, end_x, start_y, end_y)
    
    lines = output.strip().split('\n')
    num_matches = autograder.compare_strings(lines, expected_output.strip().split('\n'))

    return 100 * (num_matches / len(lines))

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)










",100,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
115,lsn14_class2017,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>In Python, write an algorithm that first asks the user how many cadets to input and then gets that many cadet class years from the user. Output how many of those cadets were in the class of 2017. You can assume there is at least one cadet to enter.</p>
<p><strong>EXAMPLES:</strong></p>
<table width=""300"">
<thead>
<tr>
<td>Example 1</td>
<td>Example 2</td>
<td>Example 3</td>
</tr>
</thead>
<tbody>
<tr>
<td>Inputs</td>
<td>4<br />2014<br />2016<br />2017<br />2017</td>
<td>5<br />2015<br />2017<br />2014<br />2014<br />2017</td>
<td>4<br />2014<br />2016<br />2014<br />2014</td>
</tr>
<tr>
<td>Outputs</td>
<td>2</td>
<td>3</td>
<td>0</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    num_entries = random.randint(1, 6)
    num_in_2017 = random.randint(0, num_entries)
    list_of_values = [num_entries]
    
    for i in range(num_entries):
        if i < num_in_2017:
            list_of_values.append(2017)
        else:
            list_of_values.append(random.randint(2018, 2024))
        
    output, error_message = autograder.run_script(""lsn14_class2017.py"", list_of_values)
    
    lines = output.strip().split('\n')

    if len(lines) >= 1 and autograder.equals(lines[0], num_in_2017):
        print(""CORRECT"")
        score += 100
    else:
        print(""Expected"", num_in_2017)
        
    return score
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
116,lsn13_waittimes,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write an algorithm that lets the user input the wait times for various rides at an amusement park (in minutes) until he/she types the value -999. Output the shortest waiting time, followed by the number of waiting times that are over 30 minutes.</p>
<p><strong>EXAMPLE:</strong></p>
<table width=""400"">
<thead>
<tr>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>
<p>90<br />30<br />31<br />-999</p>
</th>
<th>
<p>35<br />15<br />90<br />120<br />15<br />-999</p>
</th>
<th>
<p>15<br />15<br />10<br />5<br />-999</p>
</th>
</tr>
<tr>
<th>Outputs</th>
<th>30<br />2</th>
<th>15<br />3</th>
<th>5<br />0</th>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0.0
    
    possible_tests = [[30, 45, 15, 5, 5, -999], [15, 30, 31, 29, 120, 90, -999]]
    possible_output = [[5, 1], [15, 3]]
    
    # Generates a Random Test
    random_index = random.randint(0, len(possible_tests)-1)
    random_test = possible_tests[random_index]
    expected_output = possible_output[random_index]
            
    output, error = autograder.run_script(""lsn13_waittimes.py"", random_test)
    
    lines = output.split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Min Wait Time is Correct"")
        score += 50
    else:
        print(""Min Wait Time is Incorrect.  Expected"", expected_output[0])
        
    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Number of Lines With Over 30 Minute Wait Times is Correct"")
        score += 50
    else:
        print(""Number of Lines With Over 30 Minute Wait Times is Incorrect.  Expected"", expected_output[1])
    
    return score


# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,
117,lsn13_squadrons,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write an algorithm that asks the user for the number of&nbsp;squadrons to input, and then gets each squadron's number. Output the number<br />of squadrons from 1st, 2nd, 3rd, and 4th groups (one per line)</p>
<p><strong>EXAMPLE:</strong></p>
<table width=""400"">
<thead>
<tr>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>
<p>3<br />3<br />19<br />24</p>
</th>
<th>
<p>4<br />19<br />25<br />37<br />40</p>
</th>
<th>
<p>2<br />1<br />34</p>
</th>
</tr>
<tr>
<th>Outputs</th>
<th>1<br />1<br />1<br />0</th>
<th>0<br />1<br />1<br />2</th>
<th>1<br />0<br />0<br />1</th>
</tr>
</tbody>
</table>
</div>

","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0.0
    
    possible_tests = [[5, 10, 20, 30, 40, 19], [8, 3, 1, 23, 37, 40, 7, 6, 25]]
    possible_output = [[1, 2, 1, 1], [4, 0, 2, 2]]
    
    # Generates a Random Test
    random_index = random.randint(0, len(possible_tests)-1)
    random_test = possible_tests[random_index]
    expected_output = possible_output[random_index]
            
    output, error = autograder.run_script(""lsn13_squadrons.py"", random_test)
    
    lines = output.split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Num in Group One is Correct"")
        score += 25
    else:
        print(""Num in Group One is Incorrect.  Expected"", expected_output[0])
        
    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Num in Group Two is Correct"")
        score += 25
    else:
        print(""Num in Group Two is Incorrect.  Expected"", expected_output[1])
    
    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):
        print(""Num in Group Three is Correct"")
        score += 25
    else:
        print(""Num in Group Three is Incorrect.  Expected"", expected_output[2])
    
    if len(lines) > 3 and autograder.equals(lines[3], expected_output[3]):
        print(""Num in Group Four is Correct"")
        score += 25
    else:
        print(""Num in Group Four is Incorrect.  Expected"", expected_output[3])
    
    return score


# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
118,lsn13_skill2,2,skill,0,<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a WHILE loop that prints values from 0 to 10. Modify the code so that it counts from 10 to 0.</p>,"from cs110 import autograder
import random, math

def solution(value_to_count_to, increment):
    result = ''
    i = 10
    
    while i >= value_to_count_to:
        result += str(i) + ""\n""
        i += increment
    
    return result

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_ending_number = 0
    random_increment = -1

    output, error_message = autograder.run_script(""lsn13_skill2.py"", [])
    expected_output = solution(random_ending_number, random_increment)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)










",100,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
119,lsn13_skill1,2,skill,0,"
<p><strong>PROBLEM STATEMENT:<br /></strong>You are trying to use a for loop to print all of the powers of 2 from 1024 (2<sup>10</sup>) to 1 (2<sup>0</sup>). Unfortunately, for some reason, the loop does not work. Review the code and make the necessary corrections.</p>","from cs110 import autograder
import random, math

def solution(value_to_count_to, increment):
    result = ''
    i = 0
    
    while i <= value_to_count_to:
        result += str(i) + ""\n""
        i += increment
    
    return result

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_ending_number = 10
    random_increment = 2

    output, error_message = autograder.run_script(""lsn13_skill1.py"", [])
    expected_output = solution(random_ending_number, random_increment)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)










",100,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
120,lsn13_dvc,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>The CS110Z course director, unfortunately, was tricked into purchasing a Disney Vacation Club timeshare. The good news about DVC is that it lets you reserve a room at any Disney Resort for one week! The downside, however, is that members have to pay an annual ""maintenance fee"" so that the mouse can keep the property looking good (EVEN when Disney World was closed due to COVID-19 . . . yay).</p>
<p>This year, the maintenance was $623.00. If that isn't bad enough, your course director discovered that maintenance fees aren't fixed! On the contrary, it accues each year at a rate of approximately 1.5%.</p>
<p>Write a Python function called&nbsp;<code>get_years_until</code>&nbsp;that takes a&nbsp;<strong>target value</strong>&nbsp;as a parameter, and returns the number of years (assuming a fixed interest rate) before the maintenance fee exceeds this value.</p>
<p><strong>Example 1</strong><br /><code>get_years_until(624)</code>&nbsp;should return 1. This is because:</p>
<ul>
<li>The maintenance fee will increase by $9.35 (i.e., 1.5% of 623) in a year</li>
<li>The new maintenance fee will be $623.00 + $9.35 = $632.35, which is obviously more than $624.00</li>
</ul>
<p><strong><br />Example 2</strong><br /><code>get_years_until(1000)</code>&nbsp;should return 32. This is because:</p>
<ul>
<li>623 * 1.015 * 1.015 * 1.015 . . . (32 times total) = $1003.23, which is obviously more than $1000.00</li>
</ul>
<p><br /><strong>Don't Know Where to Start?!?</strong><br />Use a While loop to keep calculating the new maintenance fee until the value is . . . (we'll let you figure out the rest).</p>
</div>","from lsn13_dvc import get_years_until
from cs110 import autograder
import random, math

NUM_SUBTESTS = 5

def soln(target_value):
    maintenance_fee = 623.00
    interest_rate = 0.015
    count = 0

    while maintenance_fee < target_value:
        count += 1
        maintenance_fee = maintenance_fee * (1 + interest_rate)
    
    return count

def test_passed():
    passed = 0
    for i in range(NUM_SUBTESTS):
        print('Running test %d of %d:' % (i+1 , NUM_SUBTESTS), end='')
        target_amount = random.randint(650, 1100)
        if autograder.equals(get_years_until(target_amount), soln(target_amount)):
            print(""  It will take "" + str(get_years_until(target_amount)) + "" years until the maintenance fee exceeds $"" + str(target_amount))
            passed += 1
        else:
            print('  get_years_until(%d) incorrectly returned %d instead of %d\n' % (target_amount, get_years_until(target_amount), soln(target_amount)))
    
    return round((100 / NUM_SUBTESTS), 1) * passed


# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


",100,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,
121,lsn13_countby10s,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a program whose input is two integers. Output the first integer and subsequent increments of 10 as long as the value is less than or equal to the second integer.</p>
<p>Case #1: If the input is:</p>
<pre><code>-15
30
</code></pre>
<p>the output is:</p>
<pre><code>-15
-5
5
15
25
</code></pre>
<p>Case 2: If the second integer is less than the first as in:</p>
<pre><code>20
5
</code></pre>
<p>the output is:</p>
<pre><code>Second integer can't be less than the first.
</code></pre>
<p>For coding simplicity, output a space after every integer, including the last.</p>
</div>


","from cs110 import autograder
import random, math

def solution(starting_value, value_to_count_to):
    result = ''
    
    if value_to_count_to < starting_value:
        return ""Second integer can't be less than the first.""
    else:
        i = starting_value
        
        while i <= value_to_count_to:
            result += str(i) + ""\n""
            i += 10
        
        return result

def run_test(random_starting_number, random_ending_number):
    print(""#--------------------------------------------"")
    print(""# Testing"", random_starting_number, ""to"", random_ending_number)
    print(""#--------------------------------------------"")
    
    output, error_message = autograder.run_script(""lsn13_countby10s.py"", [random_starting_number, random_ending_number])
    expected_output = solution(random_starting_number, random_ending_number)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT\n"")
        return True
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
        print()
    
    return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    
    if run_test(10 * random.randint(1, 5), 60 + 10 * random.randint(1, 20)):
        score += 40
        
    if run_test(random.randint(0, 30), random.randint(31, 200)):
        score += 40
    
    if run_test(random.randint(50, 100), random.randint(0, 10)):
        score += 20
    
    
    return score

        
# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)










",100,0,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
122,lsn13_count,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a Python program that gets 2 inputs from the user</p>
<ul>
<li>a number,&nbsp;<strong>x</strong></li>
<li>an increment amount,&nbsp;<strong>y</strong></li>
</ul>
<p>Your program will then print out all the numbers from 0 to the user-defined value (x), counting by the increment amount (y).</p>
<p><strong>EXAMPLES:</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>Example 1</th>
<th>Example 2</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>10<br />2</th>
<th>14<br />3</th>
</tr>
<tr>
<th>Outputs</th>
<th>0<br />2<br />4<br />6<br />8<br />10</th>
<th>0<br />3<br />6<br />9<br />12</th>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

def solution(value_to_count_to, increment):
    result = ''
    i = 0
    
    while i <= value_to_count_to:
        result += str(i) + ""\n""
        i += increment
    
    return result

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_ending_number = 10 + 2 * random.randint(1, 10)
    random_increment = 2

    output, error_message = autograder.run_script(""lsn13_count.py"", [random_ending_number, random_increment])
    expected_output = solution(random_ending_number, random_increment)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':   
    result = test_passed()
    print(""Unit Test Returned:"", result)








",100,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
123,lsn13_cargocapacity,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write an algorithm that lets the user input the cargo capacity (in lbs) of various transport aircraft until the user enters -1. Your program should output the min and max cargo capacity, as well as the number of aircraft that can carry at least 10000 lbs.</p>
<p><strong>EXAMPLE:</strong></p>
<table width=""400"">
<thead>
<tr>
<th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>
<p>4500<br />11000<br />9000<br />-1</p>
</th>
<th>
<p>9999<br />15000<br />3500<br />17500<br />-1</p>
</th>
<th>10000<br />-1</th>
</tr>
<tr>
<th>Outputs</th>
<th>4500<br />11000<br />1</th>
<th>3500<br />17500<br />2</th>
<th>10000<br />10000<br />1</th>
</tr>
</tbody>
</table>
</div>

","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0.0
    
    possible_tests = [[8000, 12000, 25000, 10000, 7500, -1], [5000, 9000, 22000, 10000, 8700, -1], [9999, 5000, 3000, -1]]
    possible_output = [[7500, 25000, 3], [5000, 22000, 2], [3000, 9999, 0]]
    
    # Generates a Random Test
    random_index = random.randint(0, len(possible_tests)-1)
    random_test = possible_tests[random_index]
    expected_output = possible_output[random_index]
            
    output, error = autograder.run_script(""lsn13_cargocapacity.py"", random_test)
    
    lines = output.split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Min Value is Correct"")
        score += 30
    else:
        print(""Min Value is Incorrect.  Expected"", expected_output[0])
    
    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Max Value is Correct"")
        score += 30
    else:
        print(""Max Value is Incorrect.  Expected"", expected_output[1])
        
    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):
        print(""Number of Aircraft with At Least 10000 lbs is Correct"")
        score += 40
    else:
        print(""Number of Aircraft with At Least 10000 lbs is Incorrect.  Expected"", expected_output[2])
    
    return score


# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,
124,lsn13_averagerun,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>In, Python, write an algorithm that first asks the user how many PFT run times to input and then gets that many values from the user. Output the average of all the run times. You can assume there is at least one run time to input.</p>
<p><strong>EXAMPLE:</strong></p>
<table width=""400"">
<thead>
<tr>
<th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>6<br />98<br />75<br />88<br />82<br />94<br />100</th>
<th>5<br />99<br />83<br />79<br />86<br />87</th>
<th>4<br />88<br />82<br />80<br />90</th>
</tr>
<tr>
<th>Outputs</th>
<th>89.5</th>
<th>86.8</th>
<th>85</th>
</tr>
</tbody>
</table>
</div>

","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 5
    num_tests_passed = 0

    for i in range(NUM_TESTS):
        print(""Running Test "" + str(i) + "":"")
        
        num_inputs = random.randint(2, 11)
        inputs = [num_inputs]
        sum = 0
        
        for j in range(num_inputs):
            value = random.randint(70, 130)
            sum += value
            inputs.append(value)
               
        avg = sum / (len(inputs) - 1)   
               
        # Runs the Script
        output, error_message = autograder.run_script(""lsn13_averagerun.py"", inputs)
        
        # Extracts the Output
        lines = output.split(""\n"")
        
        if (len(lines) > 0):            
            if (autograder.equals(lines[0], avg)):
                print(""CORRECT\n"")
                num_tests_passed += 1
            else:
                print(""INCORRECT.  Expected: "" + str(avg) + ""\n"")

    # Result
    return (100 / NUM_TESTS) * num_tests_passed
            

# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
125,lsn12_skill2,2,skill,0,"
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a function called&nbsp;<code>fahrenheit_to_kelvin()</code>. Your function should take a temperature (in Fahrenheit) as a parameter, and RETURN (NOT PRINT) the&nbsp;equivalent temperature in Kelvin.</p>
<p><strong>NOTE:<br /></strong>The formula for converting between Fahrenheit and Kelvin is</p>
<p><strong>K = ((F - 32) / 1.8) + 273.15</strong></p>","from cs110 import autograder
import random, math
from lsn12_skill2 import *

def solution(temp_in_f):
    temp_in_k = ((temp_in_f - 32) / 1.8) + 273.15
    return temp_in_k

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    print(""Feedback:"")
    print(""Looking for a function called fahrenheit_to_kelvin . . ."", end="""")
    
    if ""fahrenheit_to_kelvin"" in globals():
        print(""FOUND!"")
        score += 50
    else:
        print(""NOT FOUND"")
    
    random_temp = round(random.uniform(0, 100), 1)
    
    print(""Testing function when temperature ="", random_temp, ""F . . . "", end="""")
    if ""fahrenheit_to_kelvin"" in globals() and fahrenheit_to_kelvin(random_temp) == solution(random_temp):
        print(""CORRECT!"")
        score += 50
    elif ""fahrenheit_to_kelvin"" in globals() and fahrenheit_to_kelvin(random_temp) != solution(random_temp):
        print(""INCORRECT.  Expected"", solution(random_temp), ""instead of"", fahrenheit_to_kelvin(random_temp))
    else:
        print(""Could not evaluate the function's returned value because the function does not exist"")
        
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)








",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
126,lsn12_skill1,2,skill,0,"
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a function called get_fuel_consumption() that takes a distance in kilometers as a parameter, and calculates the fuel consumed (in gallons) by a 747 aircraft to travel this distance.</p>
<p>Call this function to determine how much fuel is consumed by a 747 when traveling 1500 kilometers. Store the returned result in a variable&nbsp;called fuel_consumed</p>
<p>Remember, ""Calling a function"" simply means typing in the name of the function (and providing it with any parameters that it needs--in this case, there are no parameters since there is nothing in the parenthesis).</p>","from cs110 import autograder
import random, math
from lsn12_skill1 import *

def get_fuel_consumption(distance_in_kilometers):
    distance_in_miles = distance_in_kilometers * 0.621
    return 5 * distance_in_miles

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    file = open(""lsn12_skill1.py"", ""r"")
    file_contents = file.read()
    num_calls_function1 = file_contents.count(""get_fuel_consumption(1500"")
    num_calls_function2 = file_contents.count(""get_fuel_consumption( 1500"")
    num_calls_function3 = file_contents.count(""get_fuel_consumption (1500"")
    num_calls_function4 = file_contents.count(""get_fuel_consumption ( 1500"")
    num_calls = num_calls_function1 + num_calls_function2 + num_calls_function3 + num_calls_function4

    output, error_message = autograder.run_script(""lsn12_skill1.py"", [])
    
    if num_calls >= 1:
        print(""get_fuel_consumption called successfully"")
        score += 33
    else:
        print(""get_fuel_consumption was not called successfully"")
    
    if ""fuel_consumed"" in globals():
        print(""fuel_consumed variable successfully created"")
        score += 33
    else:
        print(""Did not find a variable called fuel_consumed"")
        
    if ""fuel_consumed"" in globals() and fuel_consumed == get_fuel_consumption(1500):
        print(""fuel_consumed contains the correct value"")
        score += 34
    elif ""fuel_consumed"" in globals() and fuel_consumed != get_fuel_consumption(1500):
        print(""fuel_consumed contains"", fuel_consumed, ""instead of"", get_fuel_consumption(1500))
    else:
        print(""Cannot check the value of fuel_consumed because it does not exist"")
        
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)








",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
127,lsn12_in_circle,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a function that determines if a point is within a circle. You will name your function <code>in_circle()</code>. It has five parameters:</p>
<ol>
<li>The coordinates of the point that is to be tested (x, y)</li>
<li>The center of a circle (cir_x, cir_y)</li>
<li>The radius of the circle (radius)</li>
</ol>
<p>&nbsp;The <code>in_circle()</code> function will return <strong>True</strong> if the point is on or inside the circle, and <strong>False</strong> otherwise.</p>
<p><strong>IMPORTANT:<br /></strong>You are encouraged to write code to test your function. However, when you test against the server, only include the code for the function itself (you can comment out your test code).</p>
</div>

","import lsn12_in_circle
from cs110 import autograder
import random, math

NUM_SUBTESTS = 5
   
def soln(x, y, cir_x, cir_y, radius):
    distance = math.sqrt((cir_x - x)**2 + (cir_y - y)**2)
    return distance <= radius

def test_passed():
    
    passed = 0
    for i in range(NUM_SUBTESTS):
        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')
        if i == 0:
            x = 6.04
            y = 2.43
            cir_x = 43.4
            cir_y = 52.2
            radius = 74.1
        else:
            x = random.random() * 10.0
            y = random.random() * 10.0
            cir_x = random.random() * 100.0
            cir_y = random.random() * 100.0
            radius = random.random() * 100.0
        #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))
        if lsn12_in_circle.in_circle(x, y, cir_x, cir_y, radius) == soln(x, y, cir_x, cir_y, radius):
            print(""CORRECT!"")
            passed += 1
        else:
            print('INCORRECT:  in_circle(%f, %f, %f, %f, %f) incorrectly returned %s' % (x, y, cir_x, cir_y, radius, lsn12_in_circle.in_circle(x, y, cir_x, cir_y, radius)))
    
    return (100 / NUM_SUBTESTS) * passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
128,lsn12_distance,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a function that computes the distance between two points. You will name your function&nbsp;<code>dist_points</code>. It has four parameters, the cordinates of the two points as&nbsp;<code>x1, y1, x2, y2</code>. The&nbsp;<code>dist_points()</code>&nbsp;function will return the distance between the two points as a floating point number.</p>
<p><strong>IMPORTANT:<br /></strong>You are encouraged to write code to test your function. However, when you test against the server, only include the code for the function itself (you can comment out your test code).</p>
</div>


","from lsn12_distance import dist_points
from cs110 import autograder
import random, math

NUM_SUBTESTS = 5

def soln(x1, y1, x2, y2):
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)

def test_passed():
    
    passed = 0
    
    print(""Feedback:"")
    
    for i in range(NUM_SUBTESTS):
        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')
        x1 = round(random.uniform(-10, 10), 1)
        y1 = round(random.uniform(-10, 10), 1)
        x2 = round(random.uniform(-10, 10), 1)
        y2 = round(random.uniform(-10, 10), 1)
        if autograder.equals(dist_points(x1, y1, x2, y2), soln(x1, y1, x2, y2)):
            print(""PASSED!"")
            passed += 1
        else:
            print('FAILED: dist_point(%1.1f, %1.1f, %1.1f, %1.1f) incorrectly returned' % (x1, y1, x2, y2), dist_points(x1, y1, x2, y2))
    
    return round(100 / NUM_SUBTESTS, 1) * passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
129,lsn12_circle,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a function that computes the area of a circle. You will name your function&nbsp;<code>area_circle</code>. It has one parameter, the radius of the circle,&nbsp;<code>radius</code>. The&nbsp;<code>area_circle()</code>&nbsp;function will return the area of the circle.</p>
<p><strong>IMPORTANT: <br /></strong>You are encouraged to write code to test your function. However, when you test against the server, only include the code for the function itself (you can comment out your test code).</p>
</div>","import lsn12_circle
from cs110 import autograder
import random, math

NUM_SUBTESTS = 5

# Helper method to see if a numeric value is within a specified delta
def soln(radius):
    return math.pi * radius * radius

def test_passed():
    
    passed = 0
    
    print(""Feedback:"")
    
    for i in range(NUM_SUBTESTS):
        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')
        radius = random.random() * 100.0
        if autograder.equals(lsn12_circle.area_circle(radius), soln(radius)):
            print(""CORRECT!"")
            passed += 1
        else:
            print('area_circle(%d) incorrectly returned' % (radius), lsn12_circle.area_circle(radius))
        
    return round(100 / NUM_SUBTESTS, 1) * passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
130,lsn12_asteroids,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>""Asteroids"" was an arcade game created in 1979 by Atari, Inc. In the game, the player is given control of a spaceship that has the ability to shoot bullets. The player is then placed in a field of floating rocks, and is tasked with destroying them without running into them.</p>
<p>In this lab, you will write a ""collision detection"" function that will be used by the game to determine if the player's ship has hit a rock. To make this simple, assume that an imaginary circle extends from the center of the asteroid and the player's ship (see below image). If the two circles ever overlap one another, then a collision has occurred. (NOTE: There are more accurate ways to detect a collision.&nbsp;<a href=""https://bell0bytes.eu/basic-collision-detection/"" target=""_blank"" rel=""noreferrer noopener"">Click here if you want to learn more&nbsp;(Links to an external site.)</a>).</p>
<p><img src=""https://bell0bytes.eu/content/images/2019/03/spaceShipAsteroid.png"" alt="""" width="""" height=""462"" /></p>
<p>Your function, which you will name&nbsp;<code>detect_collision()</code>&nbsp;should have six parameters: the (x, y) coordinates of the center of player's ship, the ship's radius, the (x, y) coordinates of the center of an asteroid, and the asteroid's radius. Your function will return&nbsp;<code>True</code>&nbsp;if the player's ship has hit the asteroid, and&nbsp;<code>False</code>&nbsp;otherwise.</p>
<p><strong>HINT: <em><br /></em></strong><em>You may want to copy and paste the</em>&nbsp;<code>dist_points</code>&nbsp;<em>function you created earlier. It's almost as if we are trying to demonstrate the importance of reusable functions . . .</em></p>
<p><strong>IMPORTANT:<br /></strong>You are encouraged to write code to test your function. However, when you test against the server, only include the code for the function itself (you can comment out your test code).</p>
</div>
","from cs110 import autograder
import random, math
import lsn12_asteroids 

def soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):
    distance = math.sqrt((ship_x - asteroid_x)**2 + (ship_y - asteroid_y)**2)
    return distance < asteroid_r + ship_r

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 4
    num_tests_passed = 0
    
    print(""Feedback:"")
    score = 0
        
    if ""dist_points"" in dir(lsn12_asteroids):
        score += 20
        print(""dist_points function found"")
    else:
        print(""dist_points function not being utilized.  Don't reinvent the wheel!"")
        #score += 20
        
    for i in range(NUM_TESTS):
        print('Running test %d of %d: ' % (i+1 , NUM_TESTS), end='')
        
        if i == 0:
            ship_x = 2.3
            ship_y = 0.2
            ship_r = 3
            asteroid_x = -4
            asteroid_y = 3.4
            asteroid_r = 6
        else:
            ship_x = round(random.uniform(-50, 50), 1)
            ship_y = round(random.uniform(-50, 50), 1)
            ship_r = 3
            asteroid_x = round(random.uniform(-50, 50), 1)
            asteroid_y = round(random.uniform(-50, 50), 1)
            asteroid_r = 6
        
        #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))
        if lsn12_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r) == soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):
            print(""CORRECT"")
            score += 20
        else:
            print('detect_collision(%f, %f, %f, %f, %f, %f) incorrectly returned %s' % (ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r, lsn12_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r)))
    
    return score
            
            
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
131,lsn11_triangle,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a function that computes the area of a triangle. You will name your function&nbsp;<code>area_triangle()</code>. It has two parameters, the height of the triangle,&nbsp;<code>height</code>, and the length of the base,&nbsp;<code>base</code>. The&nbsp;<code>area_triangle()</code> function will print the area of the triangle.</p>
<p><strong>IMPORTANT: <br /></strong>You are encouraged to write code to test your function. However, when you submit to the server for grading, only the function will be tested.</p>
</div>
","from cs110 import autograder
import random, math
import lsn11_triangle

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    base = round(random.uniform(1.0, 10.0), 1)
    height = round(random.uniform(1.0, 10.0), 1)
    output, error_message = autograder.run_script(""lsn11_triangle.py"", [base, height])
    
    area = (base * height) / 2.0
    score = 0
    
    if ""area_triangle"" in dir(lsn11_triangle):
        print(""Function Correctly Defined"")
        score += 50
    else:
        print(""Function does not exist.  Check to make sure the name matches the prompt"")
    
    if autograder.equals(output, area):
        print(""Function produces correct output"")
        score += 50
    else:
        print(""Function produces incorrect output. Expected:"", area)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
132,lsn11_skill3,2,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Define a function called <code>print_hello()</code>. Your function should, when called, simply print out a message of your choosing that would be a greeting to someone.</p>
<p><strong>IMPORTANT NOTE:</strong><br />Functions only run when a program calls them. For the purposes of this exercise, you do not need to call the function. If you don't, however, nothing will appear on the screen when you run it in Thonny.</p>
</div>","from cs110 import autograder
import random, math
import lsn11_skill3

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""lsn11_skill3.py"", [])
    score = 0
    
    if ""print_hello"" in dir(lsn11_skill3):
        print(""Function found!"")
        score += 50
        
        if len(output) > 0:
            print(""Output Found!"")
            score += 50
        else:
            print(""Function does not appear to be printing out anything"")
    else:
        print(""Function does not appear to be defined.  Check the name and make sure it matches the prompt"")
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
133,lsn11_skill2,2,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a function called <code>draw_multiple_trees()</code> that outputs a tree using ASCII art. Unlike the previous problem, this function accepts a parameter that tells it how many trees to draw.</p>
<p>Write a program that:</p>
<ol>
<li>Gets an integer from the user and stores it in a variable. You can name this variable whatever you want.</li>
<li>Call the function, and passes the variable to it. </li>
</ol>
<p>Remember that ""passing a value"" to a function simply means putting the number inside the parenthesis when you call it.&nbsp;</p>
</div>","from cs110 import autograder
import random, math

# The Actual Solution
def draw_tree(num_times):
    result = """"
    for i in range(num_times):
        result += ""  *  \n""
        result += "" *** \n""
        result += ""*****\n""
        result += ""  |  \n""
    return result;


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    num_passed = 0
    num_tests = 3
    
    for i in range(num_tests):
        print(""-------------------------------------------"")
        print(""Test"", i+1)
        print(""-------------------------------------------"")
        num_trees = random.randint(0, 5)
        output, error_message = autograder.run_script(""lsn11_skill2.py"", [num_trees])
        expected_output = draw_tree(num_trees)
        
        if output == expected_output:
            print(""Good Job!\n"")
            num_passed += 1
        else:
            print(""Incorrect Output. Expected the following:"")
            print(expected_output, ""\n"")
    
    return round((100 / num_tests) * num_passed, 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
134,lsn11_skill1,2,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a function called <code>draw_tree()</code> that prints a tree using ASCII art:</p>
<pre> *<br /> ***<br />*****<br /> |</pre>
<p>Call this function</p>
</div>","from cs110 import autograder
import random, math

# The Actual Solution
def draw_tree():
    result =  ""  *  \n""
    result += "" *** \n""
    result += ""*****\n""
    result += ""  |  \n""
    return result;


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error_message = autograder.run_script(""lsn11_skill1.py"", [])
    
    expected_output = draw_tree() + draw_tree () + draw_tree()
    
    if output == expected_output:
        print(""Good Job!"")
        return 100
    else:
        print(""Incorrect Output. Expected the following:"")
        print(expected_output)
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
135,lsn11_imagesize,2,lab,0,"<html><head/><body><p><span style="" font-weight:600;"">PROBLEM STATEMENT:<br/></span>Write a function that computes the size of an uncompressed image. You will name your function calculate_size_of_image(), and it will have three parameters: the width of the image, the height of the image, and the bit depth (i.e., # of bits per pixel).</p><p>The function should print the size of the image <span style="" font-weight:600; text-decoration: underline;"">in kilobytes</span>.</p></body></html>","from cs110 import autograder
import lsn11_imagesize, random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    base = random.randint(1024, 1980)
    height = random.randint(1024, 1980)
    bd = 2**random.randint(3, 7)
    output, error_message = autograder.run_script(""lsn11_imagesize.py"", [base, height, bd])
    
    filesize = (base * height * bd) / 8 / 1024
    score = 0
    
    if ""calculate_size_of_image"" in dir(lsn11_imagesize):
        print(""Function Correctly Defined"")
        score += 50
    else:
        print(""Function does not exist.  Check to make sure the name matches the prompt"")
    
    if autograder.equals(output, filesize):
        print(""Function produces correct output"")
        score += 50
    else:
        print(""Function produces incorrect output. Expected:"", filesize)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
136,lsn11_callme,2,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with three functions. Open the template file, and perform the following tasks:<strong><br /></strong></p>
<ul>
<li><strong>Task 1:</strong> Ask the user to enter a width and height. Do <strong>NOT </strong>assume they are whole numbers. Call area_rectangle and give it the user values</li>
<li><strong>Task 2:</strong> Ask the user to enter a string. Call print_backwards and give it the user value</li>
<li><strong>Task 3:</strong> You have been provided with a variable called my_number. Call positive_or_negative and give it the variable</li>
</ul>
</div>
","from cs110 import autograder
import random, math

# This function takes a string and prints it backwards
def get_reverse(s):
    result = ''
    for i in range(len(s)-1, -1, -1):
        result += s[i]
    return result

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    base = round(random.uniform(1.0, 100.0), 1)
    height = round(random.uniform(1.0, 100.0), 1)

    string_list = ['abcde', 'defgh', 'xzy', 'abba']
    test_string = string_list[random.randint(0, len(string_list)-1)]

    file = open(""lsn11_callme.py"", ""r"")
    file_contents = file.read()
    num_calls_area_rectangle = file_contents.count(""area_rectangle"")
    num_calls_print_backwards = file_contents.count(""print_backwards"")
    num_calls_positive = file_contents.count(""positive_or_negative"")

    output, error_message = autograder.run_script(""lsn11_callme.py"", [base, height, test_string])
    
    area = (base * height)
    score = 0
    
    lines = output.split(""\n"")
    
    if autograder.equals(lines[0], area) and num_calls_area_rectangle > 1:
        print(""area_rectangle called successfully"")
        score += 33
    else:
        print(""area_rectangle was not called successfully"")
    
    if len(lines) > 1 and lines[1].strip() == get_reverse(test_string) and num_calls_print_backwards > 1:
        print(""print_backwards called successfully"")
        score += 33
    else:
        print(""print_backwards was not called successfully"")
    
    if len(lines) > 2 and lines[2].strip() == ""Positive"" and num_calls_positive > 1:
        print(""positive_or_negative called successfully"")
        score += 34
    else:
        print(""positive_or_negative was not called successfully"")
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
137,lsn1_helloworld,2,lab,0,"<ol>

<li>Download the template file below and save it somewhere you will remember.&nbsp; Do not rename the file!<br><br>

</li>

<li>Open the file in Thonny.&nbsp; You should be able to double click on it.<br><br>

</li>

<li>Press the play button.&nbsp; It looks like a Green button<br><br><br>

</li>

<li>You will see the following prompt in the Console.&nbsp; Type 'y' (without the quotes) and press ENTER.<br><br><br>

</li>

<li>The test program will automatically run and print a result.&nbsp; If you see the following, you are good to go.&nbsp; Otherwise, contact your instructor:<br>

</li>

</ol>","import sys, subprocess, random
from cs110 import autograder

# ---------------------------------------------------------------------
# Hello World Unit Test
# ---------------------------------------------------------------------

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn1_helloworld.py"", [])
    
    # Checks to See if the Program Passed the Test
    if output.strip() == ""Hello World"":
        print(""SUCCESS!"")
        return 100.0
    else:
        print(""Try Again.  Just have it print the words 'Hello World'!"")
        return 0.0
    
    
# Testbench (to be run in an IDE)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)

",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
138,caesar,2,project,0,"<div>
    <h2 style=""text-align: center;"">Comp Sci 110 Fall 2022 Programming Exercise (PEX 2)</h2>
    <p>Objective:  Create a caesar cipher library that can convert text to and from plaintext/ciphertext.</p>
    <p>Instructions: Read writeup (pex2-writeup.pdf) and use the template files to begin work.</p>
    <br>
</div>","from cs110 import autograder
import os
import random

test_name = 'caesar'

#-------------------------------------------------------------------------
# Helper functions
#-------------------------------------------------------------------------

ELF = [ 0.08200, 0.01500, # A, B
    0.02800, 0.04300, 0.12581, 0.02200, 0.02000, # C, D, E, F, G
    0.06100, 0.07000, 0.00150, 0.00770, 0.04000, # H, I, J, K, L
    0.02400, 0.06700, 0.07500, 0.01900, 0.00095, # M, N, O, P, Q
    0.06000, 0.06300, 0.09100, 0.02800, 0.00980, # R, S, T, U, V
    0.02400, 0.00150, 0.02000, 0.00074]          # W, X, Y, Z
AS = len(ELF)
def ch(i): return chr(i + ord('A'))
def ind(l): return ord(l) - ord('A')
def sh(l, sa):
    if l.isupper(): return ch((ind(l) + sa) % AS)
    return ch((ind(l.upper()) + sa) % AS).lower()
def en(s, k):
    sa = ind(k); ct = """"
    for sy in s:
        if not sy.isalpha(): ct += sy
        else: ct += sh(sy, sa)
    return ct
def de(s, k):
    sa = -ind(k); pt = """"
    for sy in s:
        if not sy.isalpha(): pt += sy
        else: pt += sh(sy, sa)
    return pt
def ef(pfn, k, cfn):
    pf = open(pfn, ""r""); pt = pf.read(); pf.close()
    ct = en(pt, key)
    cf = open(cfn, ""w""); cf.write(ct); cf.close()
def df(cfn, key, pfn):
    cf = open(cfn, ""r""); ct = cf.read(); cf.close()
    pt = de(ct, key)
    pf = open(pfn, ""w""); pf.write(pt); pf.close()
def ds(s):
    fl = []
    for i in range(AS): fl.append(0)
    tlc = 0
    for l in s:
        if l.isalpha(): fl[ind(l.upper())] += 1; tlc += 1
    for i in range(AS): fl[i] /= tlc
    return fl
def ce(fd):
    c = 0.0
    for i in range(AS): c += fd[i] * ELF[i]
    return c
def fk(fd):
    mc = 0; ki = 0
    for ls in range(AS):
        c = ce(fd)
        if c > mc: ki = ls; mc = c
        fd = fd[1:] + fd[:1]
    k = ch(ki)
    return k
def cr(ct): fd = ds(ct); k = fk(fd); return k
def cf(cfn):
    cf = open(cfn, ""r"")
    ct = cf.read()
    cf.close()
    return cr(ct)

def cumulative_elf():
    cdf = []
    for i in range(AS):
        if i == 0:
            cum = 0
        else:
            cum = cdf[i-1]
        cdf.append(cum + ELF[i])
    cdf[AS-1] = 1.0
    return cdf

cum_elf = cumulative_elf()

#-------------------------------------------------------------------------
# Test Functions for caesar_gc
#-------------------------------------------------------------------------

def test_gc_character():
    print(""Testing character()"")
    
    upper_bad = 0
    exceptions = 0
    exception_set = set()
    
    tests = 0
    correct = 0
    for test_input in range(0,26):

        tests += 1
        try:
            result = caesar_gc.character(test_input)
            answer = ch(test_input)
            
            if result == answer:
                correct += 1
            else:
                upper_bad += 1
        except BaseException as e:
            if print_exceptions:
                exception_set.add(str(e))
            exceptions += 1

    
    
    if upper_bad > 0:
        print(""        *** ERROR *** Returned incorrect value"", upper_bad, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        print(""\n"".join([str(i) for i in exception_set]))
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score


def test_gc_index():

    print(""Testing index()"")
    
    upper_bad = 0
    exceptions = 0
    exception_set = set()
    
    tests = 0
    correct = 0
    for code in range(ord('A'),ord('Z')+1):
        
        test_input = chr(code)
        
        tests += 1
        try:
            result = caesar_gc.index(test_input)
            answer = ind(test_input)
            
            if result == answer:
                correct += 1
            else:
                upper_bad += 1
        except BaseException as e:
            if print_exceptions:
                exception_set.add(str(e))
            exceptions += 1

    
    
    if upper_bad > 0:
        print(""        *** ERROR *** Returned incorrect value"", upper_bad, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        print(""\n"".join([str(i) for i in exception_set]))
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_gc_shift():

    print(""Testing shift()"")
    
    upper_bad = 0
    lower_bad = 0
    exceptions = 0
    exception_set = set()    
    
    tests = 0
    correct = 0
    for code in range(0,26):
        test_input = ch(code)
        
        for shift_amount in range(-25, 26):
            
            tests += 1
            try:
                response = caesar_gc.shift(test_input, shift_amount)
                answer = sh(test_input, shift_amount)
                if response == answer:
                    correct += 1
                else:
                    upper_bad += 1
            except BaseException as e:
                if print_exceptions:
                    exception_set.add(str(e))
                exceptions += 1

            tests += 1
            try:
                response = caesar_gc.shift(test_input.lower(), shift_amount)
                answer = sh(test_input.lower(), shift_amount)
                if response == answer:
                    correct += 1
                else:
                    lower_bad += 1
            except BaseException as e:
                if print_exceptions:
                    exception_set.add(str(e))
                exceptions += 1

    
    
    if upper_bad > 0:
        print(""        *** ERROR *** Returned incorrect value for uppercase letters"", upper_bad, ""time(s)."")
    if lower_bad > 0:
        print(""        *** ERROR *** Returned incorrect value for lowercase letters"", lower_bad, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        print(""\n"".join([str(i) for i in exception_set]))
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_gc_encrypt():
    
    print(""Testing encrypt()"")

    string = """"
    
    for c in range(0,128):
        string += chr(c)
    
    exceptions = 0
    exception_set = set()
    wrong_length = 0
    upper_bad = 0
    lower_bad = 0
    other_bad = 0
    tests = 0
    correct = 0
    
    for k in range(0,26):
        key = ch(k)

        answer = en(string, key)
        try:
            response = caesar_gc.encrypt(string, key)
        except BaseException as e:
            if print_exceptions:
                exception_set.add(str(e))
            tests += len(answer)
            exceptions += 1
            continue
        
        if response == None or (len(response) != len(answer)):
            tests += len(answer)
            wrong_length += 1
            continue
    
        for i in range(len(answer)):
            tests += 1
            if response[i] == answer[i]:
                correct += 1
            else:
                if answer[i].isupper():
                    upper_bad += 1
                elif answer[i].islower():
                    lower_bad += 1
                else:
                    other_bad += 1
                    
    
    
    if upper_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted upper case letters"", upper_bad, ""time(s)."")
    if lower_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted lower case letters"", lower_bad, ""time(s)."")
    if other_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted non-letters"", other_bad, ""time(s)."")
    if wrong_length > 0:
        print(""        *** ERROR *** Returned wrong length string"", wrong_length, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        print(""\n"".join([str(i) for i in exception_set]))

    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_gc_decrypt():
    
    print(""Testing decrypt()"")

    string = """"
    
    for c in range(0,128):
        string += chr(c)
    
    exceptions = 0
    exception_set = set()
    wrong_length = 0
    upper_bad = 0
    lower_bad = 0
    other_bad = 0
    tests = 0
    correct = 0
    
    for k in range(0,26):
        key = ch(k)

        answer = de(string, key)
        try:
            response = caesar_gc.decrypt(string, key)
        except BaseException as e:
            if print_exceptions:
                exception_set.add(str(e))
            tests += len(answer)
            exceptions += 1
            continue
        
        if response == None or (len(response) != len(answer)):
            tests += len(answer)
            wrong_length += 1
            continue
    
        for i in range(len(answer)):
            tests += 1
            if response[i] == answer[i]:
                correct += 1
            else:
                if answer[i].isupper():
                    upper_bad += 1
                elif answer[i].islower():
                    lower_bad += 1
                else:
                    other_bad += 1
                    
    
    
    if upper_bad > 0:
        print(""        *** ERROR *** Incorrectly decrypted upper case letters"", upper_bad, ""time(s)."")
    if lower_bad > 0:
        print(""        *** ERROR *** Incorrectly decrypted lower case letters"", lower_bad, ""time(s)."")
    if other_bad > 0:
        print(""        *** ERROR *** Incorrectly decrypted non-letters"", other_bad, ""time(s)."")
    if wrong_length > 0:
        print(""        *** ERROR *** Returned wrong length string"", wrong_length, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        print(""\n"".join([str(i) for i in exception_set]))

    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_gc_encrypt_file():
    
    print(""Testing encrypt_file()"")

    pt_file = ""xkiwjd""
    ct_file = ""ekvuim""

    string = """"
    for c in range(32,128):
        string += chr(c)
    plaintext = string + '\n' + string + '\n'
    
    fp = open(pt_file, ""w""); fp.write(plaintext); fp.close()

    exceptions = 0
    exception_set = set()
    wrong_length = 0
    upper_bad = 0
    lower_bad = 0
    other_bad = 0
    tests = 0
    correct = 0
    
    for k in range(0,26):
        key = ch(k)
        
        answer = en(plaintext, key)
        try:
            caesar_gc.encrypt_file(pt_file, key, ct_file)
            fp = open(ct_file, ""r""); response = fp.read(); fp.close()
        except BaseException as e:
            if print_exceptions:
                exception_set.add(str(e))
            tests += len(answer)
            exceptions += 1
            continue
        
        if response == None or (len(response) != len(answer)):
            tests += len(answer)
            wrong_length += 1
            continue
        
        for i in range(len(answer)):
            tests += 1
            if response[i] == answer[i]:
                correct += 1
            else:
                if answer[i].isupper():
                    upper_bad += 1
                elif answer[i].islower():
                    lower_bad += 1
                else:
                    other_bad += 1

    
    
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        print(""\n"".join([str(i) for i in exception_set]))
    if wrong_length > 0:
        print(""        *** ERROR *** Returned wrong length string"", wrong_length, ""time(s)."")
    if upper_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted upper case letters"", upper_bad, ""time(s)."")
    if lower_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted lower case letters"", lower_bad, ""time(s)."")
    if other_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted non-letters"", other_bad, ""time(s)."")

    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    if os.path.exists(pt_file):
        os.remove(pt_file)
    if os.path.exists(ct_file):
        os.remove(ct_file)
    
    return score

def test_gc_decrypt_file():
    
    print(""Testing decrypt_file()"")

    pt_file = ""kgbjw45df""
    ct_file = ""iuwmndfuh""

    string = """"
    for c in range(32,128):
        string += chr(c)
    ciphertext = string + '\n' + string + '\n'
    
    fp = open(ct_file, ""w""); fp.write(ciphertext); fp.close()

    exceptions = 0
    exception_set = set()
    tests = 0
    correct = 0
    bad_length = 0
    bad_upper = 0
    bad_lower = 0
    bad_other = 0

    for k in range(0,26):
        key = ch(k)
        
        answer = de(ciphertext, key)
        try:
            caesar_gc.decrypt_file(ct_file, key, pt_file)
            fp = open(pt_file, ""r""); response = fp.read(); fp.close()
        except BaseException as e:
            if print_exceptions:
                exception_set.add(str(e))
            tests += len(answer)
            exceptions += 1
            continue
        
        if response == None or (len(response) != len(answer)):
            tests += len(answer)
            bad_length += 1
            continue
        
        for i in range(len(answer)):
            tests += 1
            if response[i] == answer[i]:
                correct += 1
            else:
                if answer[i].isupper():
                    bad_upper += 1
                elif answer[i].islower():
                    bad_lower += 1
                else:
                    bad_other += 1

    
    
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        print(""\n"".join([str(i) for i in exception_set]))
    if bad_length > 0:
        print(""        *** ERROR *** Returned wrong length string"", bad_length, ""time(s)."")
    if bad_upper > 0:
        print(""        *** ERROR *** Incorrectly encrypted upper case letters"", bad_upper, ""time(s)."")
    if bad_lower > 0:
        print(""        *** ERROR *** Incorrectly encrypted lower case letters"", bad_lower, ""time(s)."")
    if bad_other > 0:
        print(""        *** ERROR *** Incorrectly encrypted non-letters"", bad_other, ""time(s)."")

    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    if os.path.exists(pt_file):
        os.remove(pt_file)
    if os.path.exists(ct_file):
        os.remove(ct_file)
    
    return score

#-------------------------------------------------------------------------
# Test Functions for caesar
#-------------------------------------------------------------------------

def test_character():
    print(""Testing character()"")
    
    upper_bad = 0
    exceptions = 0
    exception_set = set()
    
    tests = 0
    correct = 0
    for test_input in range(0,26):

        tests += 1
        try:
            result = caesar.character(test_input)
            answer = ch(test_input)
            
            if result == answer:
                correct += 1
            else:
                upper_bad += 1
        except BaseException as e:
            if print_exceptions:
                exception_set.add(str(e))
            exceptions += 1

    
    
    if upper_bad > 0:
        print(""        *** ERROR *** Returned incorrect value"", upper_bad, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        print(""\n"".join([str(i) for i in exception_set]))
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score


def test_index():

    print(""Testing index()"")
    
    upper_bad = 0
    exceptions = 0
    exception_set = set()
    
    tests = 0
    correct = 0
    for code in range(ord('A'),ord('Z')+1):
        
        test_input = chr(code)
        
        tests += 1
        try:
            result = caesar.index(test_input)
            answer = ind(test_input)
            
            if result == answer:
                correct += 1
            else:
                upper_bad += 1
        except BaseException as e:
            if print_exceptions:
                exception_set.add(str(e))
            exceptions += 1

    
    
    if upper_bad > 0:
        print(""        *** ERROR *** Returned incorrect value"", upper_bad, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        print(""\n"".join([str(i) for i in exception_set]))
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_shift():

    print(""Testing shift()"")
    
    upper_bad = 0
    lower_bad = 0
    exceptions = 0
    exception_set = set()
    
    tests = 0
    correct = 0
    for code in range(0,26):
        test_input = ch(code)
        
        for shift_amount in range(-25, 26):
            
            tests += 1
            try:
                response = caesar.shift(test_input, shift_amount)
                answer = sh(test_input, shift_amount)
                if response == response:
                    correct += 1
                else:
                    upper_bad += 1
            except BaseException as e:
                if print_exceptions:
                    exception_set.add(str(e))
                exceptions += 1

            tests += 1
            try:
                response = caesar.shift(test_input.lower(), shift_amount)
                answer = sh(test_input.lower(), shift_amount)
                if response == answer:
                    correct += 1
                else:
                    lower_bad += 1
            except BaseException as e:
                if print_exceptions:
                    exception_set.add(str(e))
                exceptions += 1

    
    
    if upper_bad > 0:
        print(""        *** ERROR *** Returned incorrect value for uppercase letters"", upper_bad, ""time(s)."")
    if lower_bad > 0:
        print(""        *** ERROR *** Returned incorrect value for lowercase letters"", lower_bad, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        print(""\n"".join([str(i) for i in exception_set]))
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_encrypt():
    
    print(""Testing encrypt()"")

    string = """"
    
    for c in range(0,128):
        string += chr(c)
    
    exceptions = 0
    exception_set = set()
    wrong_length = 0
    upper_bad = 0
    lower_bad = 0
    other_bad = 0
    tests = 0
    correct = 0
    
    for k in range(0,26):
        key = ch(k)

        answer = en(string, key)
        try:
            response = caesar.encrypt(string, key)
        except BaseException as e:
            if print_exceptions:
                exception_set.add(str(e))
            tests += len(answer)
            exceptions += 1
            continue
        
        if response == None or (len(response) != len(answer)):
            tests += len(answer)
            wrong_length += 1
            continue
    
        for i in range(len(answer)):
            tests += 1
            if response[i] == answer[i]:
                correct += 1
            else:
                if answer[i].isupper():
                    upper_bad += 1
                elif answer[i].islower():
                    lower_bad += 1
                else:
                    other_bad += 1
                    
    
    
    if upper_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted upper case letters"", upper_bad, ""time(s)."")
    if lower_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted lower case letters"", lower_bad, ""time(s)."")
    if other_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted non-letters"", other_bad, ""time(s)."")
    if wrong_length > 0:
        print(""        *** ERROR *** Returned wrong length string"", wrong_length, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        print(""\n"".join([str(i) for i in exception_set]))

    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_decrypt():
    
    print(""Testing decrypt()"")

    string = """"
    
    for c in range(0,128):
        string += chr(c)
    
    exceptions = 0
    exception_set = set()
    wrong_length = 0
    upper_bad = 0
    lower_bad = 0
    other_bad = 0
    tests = 0
    correct = 0
    
    for k in range(0,26):
        key = ch(k)

        answer = de(string, key)
        try:
            response = caesar.decrypt(string, key)
        except BaseException as e:
            if print_exceptions:
                exception_set.add(str(e))
            tests += len(answer)
            exceptions += 1
            continue
        
        if response == None or (len(response) != len(answer)):
            tests += len(answer)
            wrong_length += 1
            continue
    
        for i in range(len(answer)):
            tests += 1
            if response[i] == answer[i]:
                correct += 1
            else:
                if answer[i].isupper():
                    upper_bad += 1
                elif answer[i].islower():
                    lower_bad += 1
                else:
                    other_bad += 1
                    
    
    
    if upper_bad > 0:
        print(""        *** ERROR *** Incorrectly decrypted upper case letters"", upper_bad, ""time(s)."")
    if lower_bad > 0:
        print(""        *** ERROR *** Incorrectly decrypted lower case letters"", lower_bad, ""time(s)."")
    if other_bad > 0:
        print(""        *** ERROR *** Incorrectly decrypted non-letters"", other_bad, ""time(s)."")
    if wrong_length > 0:
        print(""        *** ERROR *** Returned wrong length string"", wrong_length, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        print(""\n"".join([str(i) for i in exception_set]))

    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_encrypt_file():
    
    print(""Testing encrypt_file()"")

    pt_file = ""xkiwjd""
    ct_file = ""ekvuim""

    string = """"
    for c in range(32,128):
        string += chr(c)
    plaintext = string + '\n' + string + '\n'
    
    fp = open(pt_file, ""w""); fp.write(plaintext); fp.close()

    exceptions = 0
    exception_set = set()
    wrong_length = 0
    upper_bad = 0
    lower_bad = 0
    other_bad = 0
    tests = 0
    correct = 0
    
    for k in range(0,26):
        key = ch(k)
        
        answer = en(plaintext, key)
        try:
            caesar.encrypt_file(pt_file, key, ct_file)
            fp = open(ct_file, ""r""); response = fp.read(); fp.close()
        except BaseException as e:
            if print_exceptions:
                exception_set.add(str(e))
            tests += len(answer)
            exceptions += 1
            continue
        
        if response == None or (len(response) != len(answer)):
            tests += len(answer)
            wrong_length += 1
            continue
        
        for i in range(len(answer)):
            tests += 1
            if response[i] == answer[i]:
                correct += 1
            else:
                if answer[i].isupper():
                    upper_bad += 1
                elif answer[i].islower():
                    lower_bad += 1
                else:
                    other_bad += 1

    
    
    if exceptions > 0:
        print(""\n"".join([str(i) for i in exception_set]))
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
    if wrong_length > 0:
        print(""        *** ERROR *** Returned wrong length string"", wrong_length, ""time(s)."")
    if upper_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted upper case letters"", upper_bad, ""time(s)."")
    if lower_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted lower case letters"", lower_bad, ""time(s)."")
    if other_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted non-letters"", other_bad, ""time(s)."")

    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    if os.path.exists(pt_file):
        os.remove(pt_file)
    if os.path.exists(ct_file):
        os.remove(ct_file)
    
    return score

def test_decrypt_file():
    
    print(""Testing decrypt_file()"")

    pt_file = ""kgbjw45df""
    ct_file = ""iuwmndfuh""

    string = """"
    for c in range(32,128):
        string += chr(c)
    ciphertext = string + '\n' + string + '\n'
    
    fp = open(ct_file, ""w""); fp.write(ciphertext); fp.close()

    exceptions = 0
    exception_set = set()
    tests = 0
    correct = 0
    bad_length = 0
    bad_upper = 0
    bad_lower = 0
    bad_other = 0

    for k in range(0,26):
        key = ch(k)
        
        answer = de(ciphertext, key)
        try:
            caesar.decrypt_file(ct_file, key, pt_file)
            fp = open(pt_file, ""r""); response = fp.read(); fp.close()
        except BaseException as e:
            if print_exceptions:
                exception_set.add(str(e))
            tests += len(answer)
            exceptions += 1
            continue
        
        if response == None or (len(response) != len(answer)):
            tests += len(answer)
            bad_length += 1
            continue
        
        for i in range(len(answer)):
            tests += 1
            if response[i] == answer[i]:
                correct += 1
            else:
                if answer[i].isupper():
                    bad_upper += 1
                elif answer[i].islower():
                    bad_lower += 1
                else:
                    bad_other += 1

    
    
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        print(""\n"".join([str(i) for i in exception_set]))
    if bad_length > 0:
        print(""        *** ERROR *** Returned wrong length string"", bad_length, ""time(s)."")
    if bad_upper > 0:
        print(""        *** ERROR *** Incorrectly encrypted upper case letters"", bad_upper, ""time(s)."")
    if bad_lower > 0:
        print(""        *** ERROR *** Incorrectly encrypted lower case letters"", bad_lower, ""time(s)."")
    if bad_other > 0:
        print(""        *** ERROR *** Incorrectly encrypted non-letters"", bad_other, ""time(s)."")

    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    if os.path.exists(pt_file):
        os.remove(pt_file)
    if os.path.exists(ct_file):
        os.remove(ct_file)
    
    return score

def random_ptchar():
    
    if random.random() < 1/80:
        return '\n'
    
    x = random.random()
    
    i = 0
    while cum_elf[i] < x:
        i += 1
    c = ch(i)
    if random.random() < 0.5:
        c = c.lower()
        
    return c

def random_pt(length):
    
    pt = """"
    for i in range(length):
        pt += random_ptchar()
    return pt
        
def test_distribution():
    
    print(""Testing distribution()"")

    exceptions = 0
    exception_set = set()
    tests = 0
    correct = 0
    bad_length = 0
    bad_value = 0

    for i in range(100):
        
        big_pt = random_pt(1000)
        answer = ds(big_pt)

        try:
            response = caesar.distribution(big_pt)
            
            if response == None or (len(response) != len(answer)):
                tests += len(answer)
                bad_length += 1
            else:
                for i in range(len(answer)):
                    if abs(answer[i] - response[i]) > 0.001*answer[i]:
                        bad_value += 1
                    else:
                        correct += 1
                    tests += 1

        except BaseException as e:
            if print_exceptions:
                exception_set.add(str(e))
            tests += len(answer)
            exceptions += 1
    
    
    
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        print(""\n"".join([str(i) for i in exception_set]))
    if bad_length > 0:
        print(""        *** ERROR *** Returned wrong length of distribution"", bad_length, ""time(s)."")
    if bad_value > 0:
        print(""        *** ERROR *** Returned incorrect value"", bad_value, ""time(s)."")
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_compare_to_english():

    print(""Testing compare_to_english()"")

    exceptions = 0
    exception_set = set()
    tests = 0
    correct = 0
    bad_length = 0
    bad_value = 0

    for i in range(50):
        
        big_pt = random_pt(100)
        
        for k in range(AS):
            ct = en(big_pt, ch(k))
            answer = ce(ds(ct))

            try:
                resp_dist = caesar.distribution(ct)
                response = caesar.compare_to_english(resp_dist)
            except BaseException as e:
                if print_exceptions:
                    exception_set.add(str(e))
                tests += 1
                exceptions += 1
                continue

            if response == None or (abs(answer - response) > 0.001*answer):
                bad_value += 1
            else:
                correct += 1
            tests += 1


    
    
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        print(""\n"".join([str(i) for i in exception_set]))
    if bad_value > 0:
        print(""        *** ERROR *** Returned incorrect value"", bad_value, ""time(s)."")
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_find_key():
    
    print(""Testing find_key()"")

    exceptions = 0
    exception_set = set()
    tests = 0
    correct = 0
    bad_value = 0
    
    for i in range(50):
        
        big_pt = random_pt(100)
        
        for k in range(AS):
            ct = en(big_pt, ch(k))
            answer = fk(ds(ct))

            try:
                resp_dist = caesar.distribution(ct)
                response = caesar.find_key(resp_dist)
            except BaseException as e:
                if print_exceptions:
                    exception_set.add(str(e))
                tests += 1
                exceptions += 1
                continue

            if answer != response:
                bad_value += 1
            else:
                correct += 1
            tests += 1


    
    
    if exceptions > 0:        
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        print(""\n"".join([str(i) for i in exception_set]))
    if bad_value > 0:
        print(""        *** ERROR *** Returned incorrect value"", bad_value, ""time(s)."")
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_crack():
    
    print(""Testing crack()"")

    exceptions = 0
    exception_set = set()
    tests = 0
    correct = 0
    bad_value = 0

    for i in range(50):
        
        big_pt = random_pt(100)
        
        for k in range(AS):
            ct = en(big_pt, ch(k))
            answer = cr(ct)

            try:
                response = caesar.crack(ct)
            except BaseException as e:
                if print_exceptions:
                    exception_set.add(str(e))
                tests += 1
                exceptions += 1
                continue

            if answer != response:
                bad_value += 1
            else:
                correct += 1
            tests += 1

    
    
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        print(""\n"".join([str(i) for i in exception_set]))
    if bad_value > 0:
        print(""        *** ERROR *** Returned incorrect value"", bad_value, ""time(s)."")
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_crack_file():

    print(""Testing crack_file()"")

    pt_file = ""in5842p""
    ct_file = ""Pw7vj2R""

    exceptions = 0
    exception_set = set()
    tests = 0
    correct = 0
    bad_value = 0

    for i in range(10):
        
        big_pt = random_pt(1000)

        for k in range(AS):
            key = ch(k)
            
            ct = en(big_pt, key)
            fp = open(ct_file, ""w""); fp.write(ct); fp.close()

            answer = cr(ct)
            
            try:
                response = caesar.crack_file(ct_file)
            except BaseException as e:
                if print_exceptions:
                    exception_set.add(str(e))
                tests += 1
                exceptions += 1
                continue
            
            if response != answer:
                tests += 1
                bad_value += 1
                continue
            
            correct += 1
            tests += 1
        
    
    
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        print(""\n"".join([str(i) for i in exception_set]))
    if bad_value > 0:
        print(""        *** ERROR *** Returned wrong key"", bad_value, ""time(s)."")

    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    if os.path.exists(ct_file):
        os.remove(ct_file)
    
    return score

#-------------------------------------------------------------------------
# Main test driver function
#-------------------------------------------------------------------------

if test_name == 'caesar_gc':
    import caesar_gc

if test_name == 'caesar':
    import caesar

print_exceptions = True;

def test_passed():

    overall_score = 0.0

    if test_name == 'caesar_gc':
        tests = [[test_gc_character,       ""character()"",               0.05],
                 [test_gc_index,           ""index()"",                   0.20],
                 [test_gc_shift,           ""test_shift()"",              0.20],
                 [test_gc_encrypt,         ""test_encrypt()"",            0.05],
                 [test_gc_decrypt,         ""test_decrypt()"",            0.20],
                 [test_gc_encrypt_file,    ""test_encrypt_file()"",       0.20],
                 [test_gc_decrypt_file,    ""test_decrypt_file()"",       0.10]]
    
    if test_name == 'caesar':
        tests = [[test_character,          ""character()"",               0.01],
                 [test_index,              ""index()"",                   0.03],
                 [test_shift,              ""test_shift()"",              0.03],
                 [test_encrypt,            ""test_encrypt()"",            0.01],
                 [test_decrypt,            ""test_decrypt()"",            0.03],
                 [test_encrypt_file,       ""test_encrypt_file()"",       0.03],
                 [test_decrypt_file,       ""test_decrypt_file()"",       0.01],
                 [test_distribution,       ""test_distribution()"",       0.20],
                 [test_compare_to_english, ""test_compare_to_english()"", 0.20],
                 [test_find_key,           ""test_find_key()"",           0.20],
                 [test_crack,              ""test_crack()"",              0.20],
                 [test_crack_file,         ""test_crack_file()"",         0.05]]
    
    if test_name in ['caesar', 'caesar_gc']:
        for test in tests:
            print(""-------------------------------------------------------"")
            print(""Test: "", test[1])
            print(""-------------------------------------------------------"")
            overall_score += test[2] * test[0]()

    if test_name == 'pex2_gc':
        print(""******************************************************************************"")
        print(""**  To run the tests against the Autograder, run the 'caesar_gc.py' file.  ***"")
        print(""****  ----- See the Errata tab on the PEX 2 Write Up for details. ------  ****"")
        print(""******************************************************************************"")

    if test_name == 'pex2':
        print(""******************************************************************************"")
        print(""****  To run the tests against the Autograder, run the 'caesar.py' file.  ****"")
        print(""****  ----- See the Errata tab on the PEX 2 Write Up for details. ------  ****"")
        print(""******************************************************************************"")
    
    return round(overall_score, 1)
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,1,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,
139,caesar_gc,2,project,0,"<div>
    <h2 style=""text-align: center;"">Comp Sci 110 Fall 2022 Programming Exercise (PEX 2)</h2>
    <p>Objective:  Create a caesar cipher library that can convert text to and from plaintext/ciphertext.</p>
    <p>Instructions: Read writeup (pex2-writeup.pdf) and use the template files to begin work.</p>
    <br>
</div>","from cs110 import autograder
import os
import random

test_name = 'caesar_gc'

#-------------------------------------------------------------------------
# Helper functions
#-------------------------------------------------------------------------

ELF = [ 0.08200, 0.01500, # A, B
    0.02800, 0.04300, 0.12581, 0.02200, 0.02000, # C, D, E, F, G
    0.06100, 0.07000, 0.00150, 0.00770, 0.04000, # H, I, J, K, L
    0.02400, 0.06700, 0.07500, 0.01900, 0.00095, # M, N, O, P, Q
    0.06000, 0.06300, 0.09100, 0.02800, 0.00980, # R, S, T, U, V
    0.02400, 0.00150, 0.02000, 0.00074]          # W, X, Y, Z
AS = len(ELF)
def ch(i): return chr(i + ord('A'))
def ind(l): return ord(l) - ord('A')
def sh(l, sa):
    if l.isupper(): return ch((ind(l) + sa) % AS)
    return ch((ind(l.upper()) + sa) % AS).lower()
def en(s, k):
    sa = ind(k); ct = """"
    for sy in s:
        if not sy.isalpha(): ct += sy
        else: ct += sh(sy, sa)
    return ct
def de(s, k):
    sa = -ind(k); pt = """"
    for sy in s:
        if not sy.isalpha(): pt += sy
        else: pt += sh(sy, sa)
    return pt
def ef(pfn, k, cfn):
    pf = open(pfn, ""r""); pt = pf.read(); pf.close()
    ct = en(pt, key)
    cf = open(cfn, ""w""); cf.write(ct); cf.close()
def df(cfn, key, pfn):
    cf = open(cfn, ""r""); ct = cf.read(); cf.close()
    pt = de(ct, key)
    pf = open(pfn, ""w""); pf.write(pt); pf.close()
def ds(s):
    fl = []
    for i in range(AS): fl.append(0)
    tlc = 0
    for l in s:
        if l.isalpha(): fl[ind(l.upper())] += 1; tlc += 1
    for i in range(AS): fl[i] /= tlc
    return fl
def ce(fd):
    c = 0.0
    for i in range(AS): c += fd[i] * ELF[i]
    return c
def fk(fd):
    mc = 0; ki = 0
    for ls in range(AS):
        c = ce(fd)
        if c > mc: ki = ls; mc = c
        fd = fd[1:] + fd[:1]
    k = ch(ki)
    return k
def cr(ct): fd = ds(ct); k = fk(fd); return k
def cf(cfn):
    cf = open(cfn, ""r"")
    ct = cf.read()
    cf.close()
    return cr(ct)

def cumulative_elf():
    cdf = []
    for i in range(AS):
        if i == 0:
            cum = 0
        else:
            cum = cdf[i-1]
        cdf.append(cum + ELF[i])
    cdf[AS-1] = 1.0
    return cdf

cum_elf = cumulative_elf()

#-------------------------------------------------------------------------
# Test Functions for caesar_gc
#-------------------------------------------------------------------------

def test_gc_character():
    print(""Testing character()"")
    
    upper_bad = 0
    exceptions = 0
    
    tests = 0
    correct = 0
    for test_input in range(0,26):

        tests += 1
        try:
            result = caesar_gc.character(test_input)
            answer = ch(test_input)
            
            if result == answer:
                correct += 1
            else:
                upper_bad += 1
        except BaseException as e:
            if print_exceptions:
                print(e)
            exceptions += 1

    #print(""    Feedback:"")
    
    if upper_bad > 0:
        print(""        *** ERROR *** Returned incorrect value"", upper_bad, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score


def test_gc_index():

    print(""Testing index()"")
    
    upper_bad = 0
    exceptions = 0
    
    tests = 0
    correct = 0
    for code in range(ord('A'),ord('Z')+1):
        
        test_input = chr(code)
        
        tests += 1
        try:
            result = caesar_gc.index(test_input)
            answer = ind(test_input)
            
            if result == answer:
                correct += 1
            else:
                upper_bad += 1
        except BaseException as e:
            if print_exceptions:
                print(e)
            exceptions += 1

    #print(""    Feedback:"")
    
    if upper_bad > 0:
        print(""        *** ERROR *** Returned incorrect value"", upper_bad, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_gc_shift():

    print(""Testing shift()"")
    
    upper_bad = 0
    lower_bad = 0
    exceptions = 0
    
    tests = 0
    correct = 0
    for code in range(0,26):
        test_input = ch(code)
        
        for shift_amount in range(-25, 26):
            
            tests += 1
            try:
                response = caesar_gc.shift(test_input, shift_amount)
                answer = sh(test_input, shift_amount)
                if response == answer:
                    correct += 1
                else:
                    upper_bad += 1
            except BaseException as e:
                if print_exceptions:
                    print(e)
                exceptions += 1

            tests += 1
            try:
                response = caesar_gc.shift(test_input.lower(), shift_amount)
                answer = sh(test_input.lower(), shift_amount)
                if response == answer:
                    correct += 1
                else:
                    lower_bad += 1
            except BaseException as e:
                if print_exceptions:
                    print(e)
                exceptions += 1

    #print(""    Feedback:"")
    
    if upper_bad > 0:
        print(""        *** ERROR *** Returned incorrect value for uppercase letters"", upper_bad, ""time(s)."")
    if lower_bad > 0:
        print(""        *** ERROR *** Returned incorrect value for lowercase letters"", lower_bad, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_gc_encrypt():
    
    print(""Testing encrypt()"")

    string = """"
    
    for c in range(0,128):
        string += chr(c)
    
    exceptions = 0
    wrong_length = 0
    upper_bad = 0
    lower_bad = 0
    other_bad = 0
    tests = 0
    correct = 0
    
    for k in range(0,26):
        key = ch(k)

        answer = en(string, key)
        try:
            response = caesar_gc.encrypt(string, key)
        except BaseException as e:
            if print_exceptions:
                print(e)
            tests += len(answer)
            exceptions += 1
            continue
        
        if response == None or (len(response) != len(answer)):
            tests += len(answer)
            wrong_length += 1
            continue
    
        for i in range(len(answer)):
            tests += 1
            if response[i] == answer[i]:
                correct += 1
            else:
                if answer[i].isupper():
                    upper_bad += 1
                elif answer[i].islower():
                    lower_bad += 1
                else:
                    other_bad += 1
                    
    #print(""    Feedback:"")
    
    if upper_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted upper case letters"", upper_bad, ""time(s)."")
    if lower_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted lower case letters"", lower_bad, ""time(s)."")
    if other_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted non-letters"", other_bad, ""time(s)."")
    if wrong_length > 0:
        print(""        *** ERROR *** Returned wrong length string"", wrong_length, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")

    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_gc_decrypt():
    
    print(""Testing decrypt()"")

    string = """"
    
    for c in range(0,128):
        string += chr(c)
    
    exceptions = 0
    wrong_length = 0
    upper_bad = 0
    lower_bad = 0
    other_bad = 0
    tests = 0
    correct = 0
    
    for k in range(0,26):
        key = ch(k)

        answer = de(string, key)
        try:
            response = caesar_gc.decrypt(string, key)
        except BaseException as e:
            if print_exceptions:
                print(e)
            tests += len(answer)
            exceptions += 1
            continue
        
        if response == None or (len(response) != len(answer)):
            tests += len(answer)
            wrong_length += 1
            continue
    
        for i in range(len(answer)):
            tests += 1
            if response[i] == answer[i]:
                correct += 1
            else:
                if answer[i].isupper():
                    upper_bad += 1
                elif answer[i].islower():
                    lower_bad += 1
                else:
                    other_bad += 1
                    
    #print(""    Feedback:"")
    
    if upper_bad > 0:
        print(""        *** ERROR *** Incorrectly decrypted upper case letters"", upper_bad, ""time(s)."")
    if lower_bad > 0:
        print(""        *** ERROR *** Incorrectly decrypted lower case letters"", lower_bad, ""time(s)."")
    if other_bad > 0:
        print(""        *** ERROR *** Incorrectly decrypted non-letters"", other_bad, ""time(s)."")
    if wrong_length > 0:
        print(""        *** ERROR *** Returned wrong length string"", wrong_length, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")

    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_gc_encrypt_file():
    
    print(""Testing encrypt_file()"")

    pt_file = ""xkiwjd""
    ct_file = ""ekvuim""

    string = """"
    for c in range(32,128):
        string += chr(c)
    plaintext = string + '\n' + string + '\n'
    
    fp = open(pt_file, ""w""); fp.write(plaintext); fp.close()

    exceptions = 0
    wrong_length = 0
    upper_bad = 0
    lower_bad = 0
    other_bad = 0
    tests = 0
    correct = 0
    
    for k in range(0,26):
        key = ch(k)
        
        answer = en(plaintext, key)
        try:
            caesar_gc.encrypt_file(pt_file, key, ct_file)
            fp = open(ct_file, ""r""); response = fp.read(); fp.close()
        except BaseException as e:
            if print_exceptions:
                print(e)
            tests += len(answer)
            exceptions += 1
            continue
        
        if response == None or (len(response) != len(answer)):
            tests += len(answer)
            wrong_length += 1
            continue
        
        for i in range(len(answer)):
            tests += 1
            if response[i] == answer[i]:
                correct += 1
            else:
                if answer[i].isupper():
                    upper_bad += 1
                elif answer[i].islower():
                    lower_bad += 1
                else:
                    other_bad += 1

    #print(""    Feedback:"")
    
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
    if wrong_length > 0:
        print(""        *** ERROR *** Returned wrong length string"", wrong_length, ""time(s)."")
    if upper_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted upper case letters"", upper_bad, ""time(s)."")
    if lower_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted lower case letters"", lower_bad, ""time(s)."")
    if other_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted non-letters"", other_bad, ""time(s)."")

    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    if os.path.exists(pt_file):
        os.remove(pt_file)
    if os.path.exists(ct_file):
        os.remove(ct_file)
    
    return score

def test_gc_decrypt_file():
    
    print(""Testing decrypt_file()"")

    pt_file = ""kgbjw45df""
    ct_file = ""iuwmndfuh""

    string = """"
    for c in range(32,128):
        string += chr(c)
    ciphertext = string + '\n' + string + '\n'
    
    fp = open(ct_file, ""w""); fp.write(ciphertext); fp.close()

    exceptions = 0
    tests = 0
    correct = 0
    bad_length = 0
    bad_upper = 0
    bad_lower = 0
    bad_other = 0

    for k in range(0,26):
        key = ch(k)
        
        answer = de(ciphertext, key)
        try:
            caesar_gc.decrypt_file(ct_file, key, pt_file)
            fp = open(pt_file, ""r""); response = fp.read(); fp.close()
        except BaseException as e:
            if print_exceptions:
                print(e)
            tests += len(answer)
            exceptions += 1
            continue
        
        if response == None or (len(response) != len(answer)):
            tests += len(answer)
            bad_length += 1
            continue
        
        for i in range(len(answer)):
            tests += 1
            if response[i] == answer[i]:
                correct += 1
            else:
                if answer[i].isupper():
                    bad_upper += 1
                elif answer[i].islower():
                    bad_lower += 1
                else:
                    bad_other += 1

    #print(""    Feedback:"")
    
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
    if bad_length > 0:
        print(""        *** ERROR *** Returned wrong length string"", bad_length, ""time(s)."")
    if bad_upper > 0:
        print(""        *** ERROR *** Incorrectly encrypted upper case letters"", bad_upper, ""time(s)."")
    if bad_lower > 0:
        print(""        *** ERROR *** Incorrectly encrypted lower case letters"", bad_lower, ""time(s)."")
    if bad_other > 0:
        print(""        *** ERROR *** Incorrectly encrypted non-letters"", bad_other, ""time(s)."")

    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    if os.path.exists(pt_file):
        os.remove(pt_file)
    if os.path.exists(ct_file):
        os.remove(ct_file)
    
    return score

#-------------------------------------------------------------------------
# Test Functions for caesar
#-------------------------------------------------------------------------

def test_character():
    print(""Testing character()"")
    
    upper_bad = 0
    exceptions = 0
    
    tests = 0
    correct = 0
    for test_input in range(0,26):

        tests += 1
        try:
            result = caesar.character(test_input)
            answer = ch(test_input)
            
            if result == answer:
                correct += 1
            else:
                upper_bad += 1
        except BaseException as e:
            if print_exceptions:
                print(e)
            exceptions += 1

    #print(""    Feedback:"")
    
    if upper_bad > 0:
        print(""        *** ERROR *** Returned incorrect value"", upper_bad, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score


def test_index():

    print(""Testing index()"")
    
    upper_bad = 0
    exceptions = 0
    
    tests = 0
    correct = 0
    for code in range(ord('A'),ord('Z')+1):
        
        test_input = chr(code)
        
        tests += 1
        try:
            result = caesar.index(test_input)
            answer = ind(test_input)
            
            if result == answer:
                correct += 1
            else:
                upper_bad += 1
        except BaseException as e:
            if print_exceptions:
                print(e)
            exceptions += 1

    #print(""    Feedback:"")
    
    if upper_bad > 0:
        print(""        *** ERROR *** Returned incorrect value"", upper_bad, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_shift():

    print(""Testing shift()"")
    
    upper_bad = 0
    lower_bad = 0
    exceptions = 0
    
    tests = 0
    correct = 0
    for code in range(0,26):
        test_input = ch(code)
        
        for shift_amount in range(-25, 26):
            
            tests += 1
            try:
                response = caesar.shift(test_input, shift_amount)
                answer = sh(test_input, shift_amount)
                if response == response:
                    correct += 1
                else:
                    upper_bad += 1
            except BaseException as e:
                if print_exceptions:
                    print(e)
                exceptions += 1

            tests += 1
            try:
                response = caesar.shift(test_input.lower(), shift_amount)
                answer = sh(test_input.lower(), shift_amount)
                if response == answer:
                    correct += 1
                else:
                    lower_bad += 1
            except BaseException as e:
                if print_exceptions:
                    print(e)
                exceptions += 1

    #print(""    Feedback:"")
    
    if upper_bad > 0:
        print(""        *** ERROR *** Returned incorrect value for uppercase letters"", upper_bad, ""time(s)."")
    if lower_bad > 0:
        print(""        *** ERROR *** Returned incorrect value for lowercase letters"", lower_bad, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_encrypt():
    
    print(""Testing encrypt()"")

    string = """"
    
    for c in range(0,128):
        string += chr(c)
    
    exceptions = 0
    wrong_length = 0
    upper_bad = 0
    lower_bad = 0
    other_bad = 0
    tests = 0
    correct = 0
    
    for k in range(0,26):
        key = ch(k)

        answer = en(string, key)
        try:
            response = caesar.encrypt(string, key)
        except BaseException as e:
            if print_exceptions:
                print(e)
            tests += len(answer)
            exceptions += 1
            continue
        
        if response == None or (len(response) != len(answer)):
            tests += len(answer)
            wrong_length += 1
            continue
    
        for i in range(len(answer)):
            tests += 1
            if response[i] == answer[i]:
                correct += 1
            else:
                if answer[i].isupper():
                    upper_bad += 1
                elif answer[i].islower():
                    lower_bad += 1
                else:
                    other_bad += 1
                    
    #print(""    Feedback:"")
    
    if upper_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted upper case letters"", upper_bad, ""time(s)."")
    if lower_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted lower case letters"", lower_bad, ""time(s)."")
    if other_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted non-letters"", other_bad, ""time(s)."")
    if wrong_length > 0:
        print(""        *** ERROR *** Returned wrong length string"", wrong_length, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")

    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_decrypt():
    
    print(""Testing decrypt()"")

    string = """"
    
    for c in range(0,128):
        string += chr(c)
    
    exceptions = 0
    wrong_length = 0
    upper_bad = 0
    lower_bad = 0
    other_bad = 0
    tests = 0
    correct = 0
    
    for k in range(0,26):
        key = ch(k)

        answer = de(string, key)
        try:
            response = caesar.decrypt(string, key)
        except BaseException as e:
            if print_exceptions:
                print(e)
            tests += len(answer)
            exceptions += 1
            continue
        
        if response == None or (len(response) != len(answer)):
            tests += len(answer)
            wrong_length += 1
            continue
    
        for i in range(len(answer)):
            tests += 1
            if response[i] == answer[i]:
                correct += 1
            else:
                if answer[i].isupper():
                    upper_bad += 1
                elif answer[i].islower():
                    lower_bad += 1
                else:
                    other_bad += 1
                    
    #print(""    Feedback:"")
    
    if upper_bad > 0:
        print(""        *** ERROR *** Incorrectly decrypted upper case letters"", upper_bad, ""time(s)."")
    if lower_bad > 0:
        print(""        *** ERROR *** Incorrectly decrypted lower case letters"", lower_bad, ""time(s)."")
    if other_bad > 0:
        print(""        *** ERROR *** Incorrectly decrypted non-letters"", other_bad, ""time(s)."")
    if wrong_length > 0:
        print(""        *** ERROR *** Returned wrong length string"", wrong_length, ""time(s)."")
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")

    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_encrypt_file():
    
    print(""Testing encrypt_file()"")

    pt_file = ""xkiwjd""
    ct_file = ""ekvuim""

    string = """"
    for c in range(32,128):
        string += chr(c)
    plaintext = string + '\n' + string + '\n'
    
    fp = open(pt_file, ""w""); fp.write(plaintext); fp.close()

    exceptions = 0
    wrong_length = 0
    upper_bad = 0
    lower_bad = 0
    other_bad = 0
    tests = 0
    correct = 0
    
    for k in range(0,26):
        key = ch(k)
        
        answer = en(plaintext, key)
        try:
            caesar.encrypt_file(pt_file, key, ct_file)
            fp = open(ct_file, ""r""); response = fp.read(); fp.close()
        except BaseException as e:
            if print_exceptions:
                print(e)
            tests += len(answer)
            exceptions += 1
            continue
        
        if response == None or (len(response) != len(answer)):
            tests += len(answer)
            wrong_length += 1
            continue
        
        for i in range(len(answer)):
            tests += 1
            if response[i] == answer[i]:
                correct += 1
            else:
                if answer[i].isupper():
                    upper_bad += 1
                elif answer[i].islower():
                    lower_bad += 1
                else:
                    other_bad += 1

    #print(""    Feedback:"")
    
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
    if wrong_length > 0:
        print(""        *** ERROR *** Returned wrong length string"", wrong_length, ""time(s)."")
    if upper_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted upper case letters"", upper_bad, ""time(s)."")
    if lower_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted lower case letters"", lower_bad, ""time(s)."")
    if other_bad > 0:
        print(""        *** ERROR *** Incorrectly encrypted non-letters"", other_bad, ""time(s)."")

    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    if os.path.exists(pt_file):
        os.remove(pt_file)
    if os.path.exists(ct_file):
        os.remove(ct_file)
    
    return score

def test_decrypt_file():
    
    print(""Testing decrypt_file()"")

    pt_file = ""kgbjw45df""
    ct_file = ""iuwmndfuh""

    string = """"
    for c in range(32,128):
        string += chr(c)
    ciphertext = string + '\n' + string + '\n'
    
    fp = open(ct_file, ""w""); fp.write(ciphertext); fp.close()

    exceptions = 0
    tests = 0
    correct = 0
    bad_length = 0
    bad_upper = 0
    bad_lower = 0
    bad_other = 0

    for k in range(0,26):
        key = ch(k)
        
        answer = de(ciphertext, key)
        try:
            caesar.decrypt_file(ct_file, key, pt_file)
            fp = open(pt_file, ""r""); response = fp.read(); fp.close()
        except BaseException as e:
            if print_exceptions:
                print(e)
            tests += len(answer)
            exceptions += 1
            continue
        
        if response == None or (len(response) != len(answer)):
            tests += len(answer)
            bad_length += 1
            continue
        
        for i in range(len(answer)):
            tests += 1
            if response[i] == answer[i]:
                correct += 1
            else:
                if answer[i].isupper():
                    bad_upper += 1
                elif answer[i].islower():
                    bad_lower += 1
                else:
                    bad_other += 1

    #print(""    Feedback:"")
    
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
    if bad_length > 0:
        print(""        *** ERROR *** Returned wrong length string"", bad_length, ""time(s)."")
    if bad_upper > 0:
        print(""        *** ERROR *** Incorrectly encrypted upper case letters"", bad_upper, ""time(s)."")
    if bad_lower > 0:
        print(""        *** ERROR *** Incorrectly encrypted lower case letters"", bad_lower, ""time(s)."")
    if bad_other > 0:
        print(""        *** ERROR *** Incorrectly encrypted non-letters"", bad_other, ""time(s)."")

    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    if os.path.exists(pt_file):
        os.remove(pt_file)
    if os.path.exists(ct_file):
        os.remove(ct_file)
    
    return score

def random_ptchar():
    
    if random.random() < 1/80:
        return '\n'
    
    x = random.random()
    
    i = 0
    while cum_elf[i] < x:
        i += 1
    c = ch(i)
    if random.random() < 0.5:
        c = c.lower()
        
    return c

def random_pt(length):
    
    pt = """"
    for i in range(length):
        pt += random_ptchar()
    return pt
        
def test_distribution():
    
    print(""Testing distribution()"")

    exceptions = 0
    tests = 0
    correct = 0
    bad_length = 0
    bad_value = 0

    for i in range(100):
        
        big_pt = random_pt(1000)
        answer = ds(big_pt)

        try:
            response = caesar.distribution(big_pt)
            
            if response == None or (len(response) != len(answer)):
                tests += len(answer)
                bad_length += 1
            else:
                for i in range(len(answer)):
                    if abs(answer[i] - response[i]) > 0.001*answer[i]:
                        bad_value += 1
                    else:
                        correct += 1
                    tests += 1

        except BaseException as e:
            if print_exceptions:
                print(e)
            tests += len(answer)
            exceptions += 1
    
    #print(""    Feedback:"")
    
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
    if bad_length > 0:
        print(""        *** ERROR *** Returned wrong length of distribution"", bad_length, ""time(s)."")
    if bad_value > 0:
        print(""        *** ERROR *** Returned incorrect value"", bad_value, ""time(s)."")
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_compare_to_english():

    print(""Testing compare_to_english()"")

    exceptions = 0
    tests = 0
    correct = 0
    bad_length = 0
    bad_value = 0

    for i in range(50):
        
        big_pt = random_pt(100)
        
        for k in range(AS):
            ct = en(big_pt, ch(k))
            answer = ce(ds(ct))

            try:
                resp_dist = caesar.distribution(ct)
                response = caesar.compare_to_english(resp_dist)
            except BaseException as e:
                if print_exceptions:
                    print(e)
                tests += 1
                exceptions += 1
                continue

            if response == None or (abs(answer - response) > 0.001*answer):
                bad_value += 1
            else:
                correct += 1
            tests += 1


    #print(""    Feedback:"")
    
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
    if bad_value > 0:
        print(""        *** ERROR *** Returned incorrect value"", bad_value, ""time(s)."")
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_find_key():
    
    print(""Testing find_key()"")

    exceptions = 0
    tests = 0
    correct = 0
    bad_value = 0
    
    for i in range(50):
        
        big_pt = random_pt(100)
        
        for k in range(AS):
            ct = en(big_pt, ch(k))
            answer = fk(ds(ct))

            try:
                resp_dist = caesar.distribution(ct)
                response = caesar.find_key(resp_dist)
            except BaseException as e:
                if print_exceptions:
                    print(e)
                tests += 1
                exceptions += 1
                continue

            if answer != response:
                bad_value += 1
            else:
                correct += 1
            tests += 1


    #print(""    Feedback:"")
    
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
    if bad_value > 0:
        print(""        *** ERROR *** Returned incorrect value"", bad_value, ""time(s)."")
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_crack():
    
    print(""Testing crack()"")

    exceptions = 0
    tests = 0
    correct = 0
    bad_value = 0

    for i in range(50):
        
        big_pt = random_pt(100)
        
        for k in range(AS):
            ct = en(big_pt, ch(k))
            answer = cr(ct)

            try:
                response = caesar.crack(ct)
            except BaseException as e:
                if print_exceptions:
                    print(e)
                tests += 1
                exceptions += 1
                continue

            if answer != response:
                bad_value += 1
            else:
                correct += 1
            tests += 1

    #print(""    Feedback:"")
    
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
    if bad_value > 0:
        print(""        *** ERROR *** Returned incorrect value"", bad_value, ""time(s)."")
        
    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    return score

def test_crack_file():

    print(""Testing crack_file()"")

    pt_file = ""in5842p""
    ct_file = ""Pw7vj2R""

    exceptions = 0
    tests = 0
    correct = 0
    bad_value = 0

    for i in range(10):
        
        big_pt = random_pt(1000)

        for k in range(AS):
            key = ch(k)
            
            ct = en(big_pt, key)
            fp = open(ct_file, ""w""); fp.write(ct); fp.close()

            answer = cr(ct)
            
            try:
                response = caesar.crack_file(ct_file)
            except BaseException as e:
                if print_exceptions:
                    print(e)
                tests += 1
                exceptions += 1
                continue
            
            if response != answer:
                tests += 1
                bad_value += 1
                continue
            
            correct += 1
            tests += 1
        
    #print(""    Feedback:"")
    
    if exceptions > 0:
        print(""        *** ERROR *** Threw an exception"", exceptions, ""time(s)."")
    if bad_value > 0:
        print(""        *** ERROR *** Returned wrong key"", bad_value, ""time(s)."")

    score = round(100 * correct / tests, 1)
    print(""    Function score = %.1f%% (passed %d out of %d)"" % (score, correct, tests))
    
    if os.path.exists(ct_file):
        os.remove(ct_file)
    
    return score

#-------------------------------------------------------------------------
# Main test driver function
#-------------------------------------------------------------------------

if test_name == 'caesar_gc':
    import caesar_gc

if test_name == 'caesar':
    import caesar

print_exceptions = True;

def test_passed():

    overall_score = 0.0

    if test_name == 'caesar_gc':
        tests = [[test_gc_character,       ""character()"",          0.05],
                 [test_gc_index,           ""index()"",              0.20],
                 [test_gc_shift,           ""shift()"",              0.20],
                 [test_gc_encrypt,         ""encrypt()"",            0.05],
                 [test_gc_decrypt,         ""decrypt()"",            0.20],
                 [test_gc_encrypt_file,    ""encrypt_file()"",       0.20],
                 [test_gc_decrypt_file,    ""decrypt_file()"",       0.10]]
    
    if test_name == 'caesar':
        tests = [[test_character,          ""character()"",          0.01],
                 [test_index,              ""index()"",              0.03],
                 [test_shift,              ""shift()"",              0.03],
                 [test_encrypt,            ""encrypt()"",            0.01],
                 [test_decrypt,            ""decrypt()"",            0.03],
                 [test_encrypt_file,       ""encrypt_file()"",       0.03],
                 [test_decrypt_file,       ""decrypt_file()"",       0.01],
                 [test_distribution,       ""distribution()"",       0.20],
                 [test_compare_to_english, ""compare_to_english()"", 0.20],
                 [test_find_key,           ""find_key()"",           0.20],
                 [test_crack,              ""crack()"",              0.20],
                 [test_crack_file,         ""crack_file()"",         0.05]]
    
    if test_name in ['caesar', 'caesar_gc']:
        for test in tests:
            print(""-------------------------------------------------------"")
            print(""Test: "", test[1])
            print(""-------------------------------------------------------"")
            overall_score += test[2] * test[0]()

    if test_name == 'pex2_gc':
        print(""******************************************************************************"")
        print(""**  To run the tests against the Autograder, run the 'caesar_gc.py' file.  ***"")
        print(""****  ----- See the Errata tab on the PEX 2 Write Up for details. ------  ****"")
        print(""******************************************************************************"")

    if test_name == 'pex2':
        print(""******************************************************************************"")
        print(""****  To run the tests against the Autograder, run the 'caesar.py' file.  ****"")
        print(""****  ----- See the Errata tab on the PEX 2 Write Up for details. ------  ****"")
        print(""******************************************************************************"")
    
    return round(overall_score, 1)
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,
140,a4_7_fit_u,2,lab,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset called&nbsp;<code>afpft_v2.csv</code>&nbsp;that describes how various Air Force personnel performed on their most recent fitness test. Do NOT ask the user for the file name--just open and read this specific file. Here is a typical line from the dataset (each line ends with the newline &ldquo;\n&rdquo; character):</p>
<p>&nbsp;</p>
<p><code>38, 52, 29, 568</code></p>
<p>&nbsp;</p>
<p>Each position in the line (separated by a comma) represents a different &ldquo;data element,&rdquo; or &ldquo;column.&rdquo; The following table shows how the above line can be interpreted:<br /><br /></p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Sit Ups<br />(Reps)</th>
<th>Push Ups<br />(Reps)</th>
<th>Waist<br />(inches)</th>
<th>1.5 Mile Run Time<br />(seconds)</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>45</th>
<th>65</th>
<th>32</th>
<th>630</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><strong>Write a Python program that analyzes this file and prints the # of <u>unsatisfactory</u> (less than 75) scores. </strong></p>
<p>&nbsp;</p>
<p>To assist you, we have provided you with a module called <code>fitness_calculator</code>&nbsp;that contains four functions:</p>
<ul>
<li>calculate_waist_score</li>
<li>calculate_pushup_score</li>
<li>calculate_situp_score</li>
<li>calculate_run_score</li>
</ul>
<p>&nbsp;</p>
<p>Each function takes a single number as a parameter, and <strong>returns</strong> the score for that category. For example, to get the score for an Airman who did 45 pushups, you could import the module and call it, as follows:</p>
<pre>pushup_score = fitness_calculator.calculate_pushup_score(45)</pre>
<p>&nbsp;</p>
<p>To get a single Airman's total score, simply calculate the score for each category and add them up.</p>
<pre>score = waist_score + pushup_score + situp_score + run_score</pre>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<p>If, for example, the number of unsatisfactory scores is 10, your program should print:</p>
<pre><strong>10</strong></pre>
<p><strong>* Your answer will be different.</strong></p>
</div>
","from cs110 import autograder
import random, math

filename = ""a4_7_fit_u.py""
expected_output = [""39""]

# Function checks for known shortcuts
def shortcut_detected():
    file = open(filename, ""r"")
    contents = file.read()
    file.close()

    # Looks for a short
    if ""print('39')"" in contents or 'print(""39"")' in contents or 'print(39)' in contents:
        print(""WARNING:  You cannot just print out the answer."")
        return True
    
    return False

# Unit Test Function
def test_passed():    
    output, error = autograder.run_script(filename, [])
    lines = output.strip().split('\n')
    
    if shortcut_detected() == True:
        print(""Invalid Code Detected.  Contact your instructor."")
    elif len(lines) == 1:
        if autograder.equals(lines[0], expected_output[0]):
            print(""Count of Unsatisfactory scores is Correct"")
            return 100.0
        else:
            print(""Count of Unsatisfactory scores is Incorrect"")
    else:
        print(""Missing Output (or too many lines)"")

    return 0.0

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
141,a4_7_fit_e,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset called&nbsp;<code>afpft_v1.csv</code>&nbsp;that describes how various Air Force personnel performed on their most recent fitness test. Do NOT ask the user for the file name--just open and read this specific file. Here is a typical line from the dataset (each line ends with the newline &ldquo;\n&rdquo; character):</p>
<p>&nbsp;</p>
<p><code>38, 52, 29, 568</code></p>
<p>&nbsp;</p>
<p>Each position in the line (separated by a comma) represents a different &ldquo;data element,&rdquo; or &ldquo;column.&rdquo; The following table shows how the above line can be interpreted:<br /><br /></p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Waist <br />(inches)</th>
<th>Push Ups<br />(Reps)</th>
<th>Sit Ups<br />(Reps)</th>
<th>1.5 Mile Run Time<br />(seconds)</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>38</th>
<th>52</th>
<th>29</th>
<th>568</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><strong>Write a Python program that analyzes this file and prints the # of excellent (90 or higher) scores. </strong></p>
<p>&nbsp;</p>
<p>To assist you, we have provided you with a module called <code>fitness_calculator</code>&nbsp;that contains four functions:</p>
<ul>
<li>calculate_waist_score</li>
<li>calculate_pushup_score</li>
<li>calculate_situp_score</li>
<li>calculate_run_score</li>
</ul>
<p>&nbsp;</p>
<p>Each function takes a single number as a parameter, and <strong>returns</strong> the score for that category. For example, to get the score for an Airman who did 45 pushups, you could import the module and call it, as follows:</p>
<pre>pushup_score = fitness_calculator.calculate_pushup_score(45)</pre>
<p>&nbsp;</p>
<p>To get a single Airman's total score, simply calculate the score for each category and add them up.</p>
<pre>score = waist_score + pushup_score + situp_score + run_score</pre>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<p>If, for example, the number of excellent scores is 4, your program should print:</p>
<pre><strong>4<br /></strong></pre>
<p><strong>* Your answers will be different.</strong></p>
</div>
","from cs110 import autograder
import random, math

filename = ""a4_7_fit_e.py""
expected_output = [""9""]

# Function checks for known shortcuts
def shortcut_detected():
    file = open(filename, ""r"")
    contents = file.read()
    file.close()

    # Looks for a short
    if ""print('9')"" in contents or 'print(""9"")' in contents or 'print(9)' in contents:
        print(""WARNING:  You cannot just print out the answer."")
        return True
    
    return False

# Unit Test Function
def test_passed():    
    output, error = autograder.run_script(filename, [])
    lines = output.strip().split('\n')
    
    if shortcut_detected() == True:
        print(""Invalid Code Detected.  Contact your instructor."")
    elif len(lines) == 1:
        if autograder.equals(lines[0], expected_output[0]):
            print(""# of Excellents is Correct"")
            return 100.0
        else:
            print(""# of Excellents is Incorrect"")
    else:
        print(""Missing Output (or too many lines)"")
    
    return 0.0
    
# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
142,a4_6_scores,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>You have been asked to write a program to assess student's performance on a recent test. Write a Python program that asks the user to repeatedly type in the name of a cadet, followed by their test score (between 0 and 100) until the user types the word ""DONE"". Your program then analyze the values and print:</p>
<ul>
<li>The highest overall test score (just score, not the name)</li>
<li>The names of all cadets who scored within 10 points of the highest score.
<ul>
<li>Comparison to the target score should be exclusive.</li>
<li>The names should be output in the same order of input.</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td><strong>Input(s)</strong></td>
<td>Paul<br />95<br />Andrew<br />86<br />Joel<br />57<br />DONE</td>
</tr>
<tr>
<td><strong>Output(s)</strong></td>
<td>95<br />Paul<br />Andrew</td>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random, math
from itertools import combinations

random_names = [""Marvel"", ""Bucky"", ""Mouse"",
                ""Goose"", ""Jimmy"", ""Dice"",
                ""Upshot"", ""Twain"", ""Ballpark"",
                ""Hammer"", ""Pixel"", ""Billy"",
                ""Lance"",""Bong"",""Eddie"",
                ""Patton"",""Tooey"",""Gus"",
                ""Karl"",""Hub"",""Luke"",
                ""Olds"",""Hap"",""Zeamer""]

num_names = random.randint(3,6)



def same_case():
    print(""Test Case 1"")
    table = []
    input_list = []
    random_score = int(random.uniform(25, 100))
    for name in random.choice(list(combinations(random_names,num_names))):
        input_list.append(name)
        input_list.append(random_score)
        table.append([random_score, name])
    
    input_list.append(""DONE"")
    
    output, error = autograder.run_script(""a4_6_scores.py"", input_list)
    
    max_time = max(table)[0] 
    expected_output = [str(max_time)]
    
    for row in table:
        if row[0] > max_time-10:
            expected_output.append(row[1])

    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    if len(expected_output) != len(output.strip().split(""\n"")):
        print(""Too many or too few outputs"")
        return 0.0
    elif num_matches == len(expected_output):
        print(""Test Case 1 Correct\n"")
        return 100.0
    else:
        print(""One or more lines in your output is incorrect"")
        return 0.0

def random_case():
    print(""Test Case 2"")
    table = []
    input_list = []
    
    for name in random.choice(list(combinations(random_names,num_names))):
        random_score = int(random.uniform(25, 100))
        input_list.append(name)
        input_list.append(random_score)
        table.append([random_score, name])
    
    input_list.append(""DONE"")
    
    output, error = autograder.run_script(""a4_6_scores.py"", input_list)
    
    max_time = max(table)[0] 
    expected_output = [str(max_time)]
    
    for row in table:
        if row[0] > max_time-10:
            expected_output.append(row[1])

    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    if len(expected_output) != len(output.strip().split(""\n"")):
        print(""Too many or too few outputs"")
        return 0.0
    elif num_matches == len(expected_output):
        print(""Test Case 2 Correct\n"")
        return 100.0
    else:
        print(""One or more lines in your output is incorrect"")
        return 0.0

def test_passed():
    return same_case()*.1+random_case()*.9


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,1,1,1,1,0,0,0,1,1,0,1,0,0,0,1,0,0,0,
143,a4_6_flighthours,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>You have been asked to write a program to get flying hours from a squadron of pilots for the month. Write a Python program that asks the user to repeatedly type in the name of a pilot, followed by their flying hours until the user types the word ""DONE"". Your program then analyze the values and print:</p>
<ul>
<li>The average number of flying hours (as a whole number)</li>
<li>The names of all pilots who flew less than the average number of flight hours.
<ul>
<li>Comparison to the average should be exclusive.</li>
<li>Names should be output in the same order as input</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td><strong>Input(s)</strong></td>
<td>Polo<br />95<br />Renegade<br />78<br />Headphones<br />70<br />DONE</td>
</tr>
<tr>
<td><strong>Output(s)</strong></td>
<td>
<p>81<br />Renegade<br />Headphones</p>
</td>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random, math
from itertools import combinations


random_names = [""Marvel"", ""Bucky"", ""Mouse"",
                ""Goose"", ""Jimmy"", ""Dice"",
                ""Upshot"", ""Twain"", ""Ballpark"",
                ""Hammer"", ""Pixel"", ""Billy"",
                ""Lance"",""Bong"",""Eddie"",
                ""Patton"",""Tooey"",""Gus"",
                ""Karl"",""Hub"",""Luke"",
                ""Olds"",""Hap"",""Zeamer""]
num_names = random.randint(3,6)

def same_case():
    print(""Test Case 1"")
    table = []
    input_list = []
    random_score = int(random.uniform(60, 100))
    for name in random.choice(list(combinations(random_names,num_names))):
        
        input_list.append(name)
        input_list.append(random_score)
        table.append([random_score, name])
    
    input_list.append(""DONE"")
    
    output, error = autograder.run_script(""a4_6_flighthours.py"", input_list)
    
    avg_hours = int(sum([x[0] for x in table])/len(table))
    expected_output = [str(avg_hours)]
    
    for row in table:
        if row[0] < avg_hours:
            expected_output.append(row[1])

    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    if len(expected_output) != len(output.strip().split(""\n"")):
        print(""Too many or too few outputs"")
        return 0.0
    elif num_matches == len(expected_output):
        print(""Test Case 1 Correct\n"")
        return 100.0
    else:
        print(""One or more lines in your output is incorrect"")
        return 0.0

def random_case():
    print(""Test Case 2"")
    table = []
    input_list = []
    
    for name in random.choice(list(combinations(random_names,num_names))):
        random_score = int(random.uniform(60, 100))
        input_list.append(name)
        input_list.append(random_score)
        table.append([random_score, name])
    
    input_list.append(""DONE"")
    
    output, error = autograder.run_script(""a4_6_flighthours.py"", input_list)
    
    avg_hours = int(sum([x[0] for x in table])/len(table))
    expected_output = [str(avg_hours)]
    
    for row in table:
        if row[0] < avg_hours:
            expected_output.append(row[1])

    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    if len(expected_output) != len(output.strip().split(""\n"")):
        print(""Too many or too few outputs"")
        return 0.0
    elif num_matches == len(expected_output):
        print(""Test Case 2 Correct\n"")
        return 100.0
    else:
        print(""One or more lines in your output is incorrect"")
        return 0.0

def test_passed():
    return same_case()*.1+random_case()*.9
    
    
        

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,1,1,1,1,0,0,0,1,1,0,1,0,0,0,1,0,0,0,
144,a4_6_aft,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>You have been asked to write a program to assess student's performance on the AFT. Write a Python program that asks the user to repeatedly type in the name of a cadet, followed by their run time (in whole seconds) until the user types the word ""DONE"". Your program then analyze the values and print:</p>
<ul>
<li>The fastest (lowest) AFT time.</li>
<li>The names of all cadets who were within 30 seconds of the fastest time.
<ul>
<li>Comparison to the target time should be exclusive.</li>
<li>Names should be output in the same order as input</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td><strong>Input(s)</strong></td>
<td>Paul<br />545<br />Andrew<br />661<br />Joel<br />575<br />DONE</td>
</tr>
<tr>
<td><strong>Output(s)</strong></td>
<td>545<br />Paul<br />Joel</td>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random, math
from itertools import combinations

random_names = [""Marvel"", ""Bucky"", ""Mouse"",
                ""Goose"", ""Jimmy"", ""Dice"",
                ""Upshot"", ""Twain"", ""Ballpark"",
                ""Hammer"", ""Pixel"", ""Billy"",
                ""Lance"",""Bong"",""Eddie"",
                ""Patton"",""Tooey"",""Gus"",
                ""Karl"",""Hub"",""Luke"",
                ""Olds"",""Hap"",""Zeamer""]

num_names = random.randint(3,6)

def same_case():
    print(""Test Case 1"")
    table = []
    input_list = []
    random_score = int(random.uniform(540.0, 720.0))
    for name in random.choice(list(combinations(random_names,num_names))):
        input_list.append(name)
        input_list.append(random_score)
        table.append([random_score, name])
    
    input_list.append(""DONE"")
    
    output, error = autograder.run_script(""a4_6_aft.py"", input_list)
    
    min_time = min(table)[0] 
    expected_output = [str(min_time)]
    
    for row in table:
        if row[0] < min_time+30:
            expected_output.append(row[1])

    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    if len(expected_output) != len(output.strip().split(""\n"")):
        print(""Too many or too few outputs"")
        return 0.0
    elif num_matches == len(expected_output):
        print(""Test Case 1 Correct\n"")
        return 100.0
    else:
        print(""One or more lines in your output is incorrect"")
        return 0.0

def random_case():
    print(""Test Case 2"")
    table = []
    input_list = []
    
    for name in random.choice(list(combinations(random_names,num_names))):
        random_score = int(random.uniform(540.0, 720.0))
        input_list.append(name)
        input_list.append(random_score)
        table.append([random_score, name])
    
    input_list.append(""DONE"")
    
    output, error = autograder.run_script(""a4_6_aft.py"", input_list)
    
    min_time = min(table)[0] 
    expected_output = [str(min_time)]
    
    for row in table:
        if row[0] < min_time+30:
            expected_output.append(row[1])

    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    if len(expected_output) != len(output.strip().split(""\n"")):
        print(""Too many or too few outputs"")
        return 0.0
    elif num_matches == len(expected_output):
        print(""Test Case 2 Correct\n"")
        return 100.0
    else:
        print(""One or more lines in your output is incorrect"")
        return 0.0

def test_passed():
    return same_case()*.1+random_case()*.9


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,1,1,1,1,0,0,0,1,1,0,1,0,0,0,1,0,0,0,
145,a4_5_translate,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Write&nbsp;a function called get_english_word that <strong>returns </strong>the English translation for a Spanish word. Your function will take the following two parameters:</p>
<ol>
<li>The spanish word (e.g., ""Hola"").</li>
<li>A dictionary containing a list of Spanish / English pairs.&nbsp;</li>
</ol>
<p>Here is an example of what the dictionary might look like:</p>
<p>&nbsp;</p>
<table border=""1"">
<tbody>
<tr>
<td><strong>Key</strong></td>
<td><strong>Value</strong></td>
</tr>
<tr>
<td>Hola</td>
<td>Hello</td>
</tr>
<tr>
<td>Adios</td>
<td>Goodbye</td>
</tr>
<tr>
<td>Aeronave</td>
<td>Aircraft</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Your function should <strong>return </strong>the English translation of the Spanish word contained within the dictionary.</p>
<p>&nbsp;</p>
<p><strong>HINT:</strong></p>
<p>Using parameters and return with functions is in the Lessons 11/12 block on your Python Quick Reference guide.</p>
</div>
","from cs110 import autograder
import random, math, ast
from a4_5_translate import get_english_word

bad_key = """"

def create_dictionary(size):
    global bad_key
    
    values = [(""Militar"", ""Military""), (""cadete"", ""Cadet""), (""Universidad"", ""University""),
              (""Halcon"", ""Falcon""), (""montana"", ""Mountain""), (""computadora"", ""computer""), (""piton"", ""python""),
              (""graduado"", ""graduated"")]
    spanish_dictionary = {}
    
    print(""Test Dictionary Contains the Following Words:"")
    
    for i in range(size):
        random_value = values[random.randint(0, len(values)-1)]
        values.remove(random_value)
        spanish_dictionary[random_value[0]] = random_value[1]
        print(random_value[0], ""(Translation"", str(random_value[1]) + "")"")
    
    bad_key = values[0][0]
    
    return spanish_dictionary


def test_passed():
    tests = 5
    
    num_passed = 0
    
    spanish_dictionary = create_dictionary(tests)
    
    print()
    
    # Checking All of the Keys in our Dictionary
    for key in spanish_dictionary.keys():
        print(""Using Function to get Translation for:"", key, "". . . "", end="""")
        returned_value = get_english_word(key, spanish_dictionary)
        print(""Your Function Returned"", returned_value, "". . . "", end="""")
        if returned_value == spanish_dictionary[key]:
            print(""Correct!"")
            num_passed += 1
        else:
            print(""Incorrect.  Returned"", returned_value, ""instead of"", spanish_dictionary[key])
    
#     print(""Using Function to get Translation for a Word Not in the Dictionary:"", bad_key, "". . . "", end="""")
#     
#     try:
#         returned_value = get_english_word(bad_key, spanish_dictionary)
#         if returned_value == ""Unknown"":
#             print(""Correctly Handled"")
#             num_passed += 1
#         else:
#             print(""Incorrect.  Returned"", returned_value, ""instead of 'Unknown'"")
#     except:
#         print(""Program crashed trying to access a key that does not exist in the dictionary"")
        
    return (100/tests) * num_passed;

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,
146,a4_5_password,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Write a function called&nbsp;get_password that <strong>returns </strong>the password for a specified website. Your function will take the following two parameters in this order:</p>
<ol>
<li>The website (e.g., ""Amazon"").</li>
<li>A dictionary containing a list of website/password pairs.&nbsp;</li>
</ol>
<p>Here is an example of what the dictionary might look like:</p>
<p>&nbsp;</p>
<table border=""1"">
<tbody>
<tr>
<td><strong>Key</strong></td>
<td><strong>Value</strong></td>
</tr>
<tr>
<td>Amazon</td>
<td>password1234</td>
</tr>
<tr>
<td>Facebook</td>
<td>aardvark</td>
</tr>
<tr>
<td>Twitter</td>
<td>AirPower!</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Your function should return the password of the website contained within the dictionary.</p>
<p>&nbsp;</p>
<p><strong>HINT:</strong></p>
<p>Using parameters and <strong>return </strong>with functions is in the Lessons 11/12 block on your Python Quick Reference guide.</p>
</div>
","from cs110 import autograder
import random, math, ast
from a4_5_password import get_password

bad_key = """"

def create_dictionary(size):
    global bad_key
    
    values = [(""CarMax"", ""B-1IsBest""), (""YouTube"", ""MyCatisthecoolest""), (""Gmail"", ""thisIsMyPassword""),
              (""Outlook"", ""MSDOSwasBAD!""), (""Blackboard"", ""SkoolRulez""), (""Canvas"", ""beststudentEvA""), (""REI"", ""MountainClimber""),
              (""UnitedAirlines"", ""gimmeDemMiles"")]
    dictionary = {}
    
    print(""Test Dictionary Contains the Following Words:"")
    
    for i in range(size):
        random_value = values[random.randint(0, len(values)-1)]
        values.remove(random_value)
        dictionary[random_value[0]] = random_value[1]
        print(random_value[0], ""(Password"", str(random_value[1]) + "")"")
    
    bad_key = values[0][0]
    
    return dictionary


def test_passed():
    tests = 5
    num_passed = 0
    
    dictionary = create_dictionary(tests)
    
    print()
    
    # Checking All of the Keys in our Dictionary
    for key in dictionary.keys():
        print(""Using Function to get Password for:"", key, "". . . "", end="""")
        returned_value = get_password(key, dictionary)
        print(""Your Function Returned"", returned_value, "". . . "", end="""")
        if returned_value == dictionary[key]:
            print(""Correct!"")
            num_passed += 1
        else:
            print(""Incorrect.  Returned"", returned_value, ""instead of"", dictionary[key])
    
#     print(""Using Function to get Password for a Website Not in the Dictionary:"", bad_key, "". . . "", end="""")
#     
#     try:
#         returned_value = get_password(bad_key, dictionary)
#         if returned_value == ""Unknown"":
#             print(""Correctly Handled"")
#             num_passed += 1
#         else:
#             print(""Incorrect.  Returned"", returned_value, ""instead of 'Unknown'"")
#     except:
#         print(""Program crashed trying to access a key that does not exist in the dictionary"")
        
    return (100/tests) * num_passed;

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,
147,a4_5_areacode,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Write a function called get_area_code that <strong>returns </strong>the area code for a specific state. Your function will take the following two parameters in this order:</p>
<ol>
<li>The name of the state (e.g., ""California"").</li>
<li>A dictionary containing a list of State / Area Code Pairs. </li>
</ol>
<p>Here is an example of what the dictionary might look like:</p>
<p>&nbsp;</p>
<table border=""1"">
<tbody>
<tr>
<td><strong>Key</strong></td>
<td><strong>Value</strong></td>
</tr>
<tr>
<td>California</td>
<td>209</td>
</tr>
<tr>
<td>Michigan</td>
<td>234</td>
</tr>
<tr>
<td>Colorado</td>
<td>719</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Your function should <strong>return </strong>the area code for the specified state contained within the dictionary.</p>
<p>&nbsp;</p>
<p><strong>HINT:</strong></p>
<p>Using parameters and return with functions is in the Lessons 11/12 block on your Python Quick Reference guide.</p>
</div>
","from cs110 import autograder
import random, math, ast
from a4_5_areacode import get_area_code

bad_key = """"

def create_dictionary(size):
    global bad_key
    
    values = [(""California"", 209), (""Texas"", 214), (""Michigan"", 248), (""Iowa"", 319), (""Utah"", 358), (""Colorado"", 719), (""Alabama"", 334), (""Alaska"", 907)]
    area_code_dictionary = {}
    
    print(""Test Dictionary Contains Area Codes for the Following States:"")
    
    for i in range(size):
        random_value = values[random.randint(0, len(values)-1)]
        values.remove(random_value)
        area_code_dictionary[random_value[0]] = random_value[1]
        print(random_value[0], ""(Area Code:"", str(random_value[1]) + "")"")
    
    bad_key = values[0][0]
    
    return area_code_dictionary


def test_passed():
    tests = 5

    num_passed = 0
    area_code_dictionary = create_dictionary(tests)
    
    print()
    output, error = autograder.run_script(""a4_5_areacode.py"", [])
    output_lines = output.strip().split('\n')

    # Checking All of the Keys in our Dictionary
    for key in area_code_dictionary.keys():
        print(""Using Function to get Area Code for:"", key, "". . . "", end="""")
        returned_value = get_area_code(key, area_code_dictionary)
        print(""Your Function Returned"", returned_value, "". . . "", end="""")
        if returned_value == area_code_dictionary[key]:
            print(""Correct!"")
            num_passed += 1
        else:
            print(""Incorrect.  Returned"", returned_value, ""instead of"", area_code_dictionary[key])
    
#     print(""Using Function to get Area Code for a State Not in the Dictionary:"", bad_key, "". . . "", end="""")
#     
#     try:
#         returned_value = get_area_code(bad_key, area_code_dictionary)
#         if returned_value == ""Unknown"":
#             print(""Correctly Handled"")
#             num_passed += 1
#         else:
#             print(""Incorrect.  Returned"", returned_value, ""instead of 'Unknown'"")
#     except:
#         print(""Program crashed trying to access a key that does not exist in the dictionary"")
        
    return (100/tests) * num_passed;

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,
148,a4_4_year,2,skill,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>You have been provided with a file named ""cadets.csv"" that contains information about (fake) cadets. Here is a line from the file:</p>
<p>&nbsp;</p>
<p><strong><code>Karla Webber, Female, CS-17, 2020</code></strong></p>
<p>&nbsp;</p>
<p><br />Each position in the line represents a different ""data element."" Here is a key for your reference:</p>
<p>&nbsp;</p>
<table width="""">
<thead>
<tr>
<th>&nbsp;</th>
<th>Name</th>
<th>Gender</th>
<th>Squadron</th>
<th>Class Year</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>Karla Webber</th>
<th>Female</th>
<th>CS-17</th>
<th>2020</th>
</tr>
</tbody>
</table>
<p><strong>&nbsp;</strong></p>
<p>Write a Python program that opens the file and prints out the Class Year of each cadet. For example, if the first three cadets come from 2020, 2019, 2020, the first three lines of output should be:</p>
<pre>2020<br />2019<br />2020</pre>
<p><strong>NOTES:</strong></p>
<ul>
<li>Your solution should print out the years in the order that they were read from the file.</li>
<li>Your solution may print out the same year (e.g., 2020) multiple times.</li>
</ul>
</div>
","from cs110 import autograder
import random, math, ast

# Flag scores
# 0.1 Template only (not always detectable)
# 0.2 Error thrown during run
# 0.3 Floor when scoring a run that appears to complete

def script_name():
    #return ""a4_4_names.py""
    #return ""a4_4_squadrons.py""
    return ""a4_4_year.py""
    #return ""a4_4_template.py""


'''
item = [a,b,c] (what should be in this entry)
entry = [d,e,f] (what is in this entry)

For each value in item, if it is in entry:
   Of the right type in the right place: 100
   Of the wrong type in the right place: 80
   Of the right type but in the wrong place: 80
   Of the wrong type in the wrong place: 64
If entry and item are not the same length, 20% penalty

Note that this has issues if there are duplicate values in the correct item.
'''
def score_value_against_value(v1, v2):
    score = 0
    if v1 == v2:
        return 100
    try:
        if float(v1) == float(v2):
            score = 80
    except:
        pass
    return score

def score_list_against_list(correct, scored):
    score = 0
    for i in range(len(correct)):
        col_score = []
        for j in range(len(scored)):
            t_score = score_value_against_value(correct[i], scored[j])
            if i != j:
                t_score *= 0.80
            col_score.append(t_score)
        score += max(col_score)
    score /= len(correct)

    if len(correct) != len(scored):
        score *= 0.80
    return score

def score_list_against_table(item_list, table):
    score_list = []
    for entry in table:
        score = 0
        if item_list == entry:
            score = 100
        else:
            score = score_list_against_list(item_list, entry)
        score_list.append(score)
    return score_list

def score_correct_against_scored(correct_table, scored_table, weights):
    # normalize weights
    norm_wt = []
    sum_of_weights = sum(weights)
    for weight in weights:
        norm_wt.append(weight / sum_of_weights)
        
    # score each item separately againt table
    cum_score = 0
    for i in range(len(correct_table)):
        # Check if this item is in the table correctly and in the correct position
        if (i < len(scored_table)) and (correct_table[i] == scored_table[i]):
            score = 100
        # Score this item against each item in the table
        else:
            score_list = score_list_against_table(correct_table[i], scored_table)
            if len(score_list) > 0:
                score = 0.50 * max(score_list)
            else:
                score = 0
            if i < len(score_list):
                score = max([score, score_list[i]])
        cum_score += score * norm_wt[i]
        
    return cum_score
    
def item_in_table(item, table):
    if item in table:
        print(""Item Found"")
        return 100
    print(item, ""not found in"", table)
    return 50

def given_table():
    return []

def user_inputs():
    return [[]]

def get_correct_output(inputs):

    if script_name() == ""a4_4_names.py"":
        file_name = ""cadets.csv""
    if script_name() == ""a4_4_squadrons.py"":
        file_name = ""cadets.csv""
    if script_name() == ""a4_4_year.py"":
        file_name = ""cadets.csv""
        
    file = open(file_name, ""r"")
    file_contents = file.read()
    file_lines = file_contents.split('\n')

    if script_name() == ""a4_4_names.py"":
        index = 0
    if script_name() == ""a4_4_squadrons.py"":
        index = 2
    if script_name() == ""a4_4_year.py"":
        index = 3
        
    output_list = []
    weights = []
    for line in file_lines:
        col = line.split(',')
        output_list.append(col[index])
        weights.append(1)
    return (output_list, weights)

def test_passed():    
    '''
    # Template-only check
    output, error = autograder.run_script(script_name(), [])
    if len(error) == 0:
        print(""Be sure that you are not running just the template file"")
        return 0.1
    '''
    # Run Data Sets
    run_data = user_inputs()
    
    # Set the weights for the individual runs
    relative_weights = []
    for i in range(len(run_data)):         
        relative_weights.append(1)
    sum_of_relative_weights = sum(relative_weights)
    run_weight = []
    for weight in relative_weights:
        run_weight.append(weight / sum_of_relative_weights)
    
    # Runs the Script for each data set
    cum_score = 0
    for run in range(1):
        print(""-------------------------------------------------"")
        print(""Test #"" + str(run + 1))
        print(""-------------------------------------------------"")

        input_lists = run_data[run]
        score = 0
        
        input_list_for_this_run = []
        (correct, weights) = get_correct_output(input_list_for_this_run)

        output, error = autograder.run_script(script_name(), input_list_for_this_run)
        output_lines = output.strip().split('\n')
        
        output_is_right_length = len(output_lines) == len(correct)
        print(len(output_lines), len(correct))
        
        done = False
        # Deal with the case of errors occuring during run
        if len(error) > 0:
            print(""Error during run"")
            score = 0.02
            done = True
        
        # Attempt to detect running just the template code
        if not done and len(output_lines) == 0:
            print(""Be sure that you are not running just the template file"")
            score = 0.01
            done = True
            
        # Deal with case of no errors occurring during run
        if not done:
            score = score_list_against_list(correct, output_lines)
            if score == 100:
                done = True
        
        if not done:
            # If the number of output lines is more than the number of lines in the file, the
            # file was likely parsed on something other than \n (probably the comma)
            if len(output_lines) > len(correct):
                score = 40
                done = True
        
        if not done:
            if len(output_lines) == 1:
                if ',' in output_lines[0]:
                    score = 20
                    done = True
                elif score > 0:
                    score = max([score, 40])
                    done = True
                
        if not done:
            # If they split each line on the comma, then the individual lines will not contain commas.
            # If this is the case, then it will be assumed that they did everything except print
            # the correct information provided the number of lines is correct.
            if output_is_right_length:
                if ',' in output_lines[0]:
                    score = 20
                else:
                    score = 80
                done = True
                
        if not done:
            score = 0.3            
            
        print(""This test score:"", round(score,1), ""% (weight ="", round(100*run_weight[run],1), ""%)"")
        cum_score += score * run_weight[run]
        print()
        
    return max([round(cum_score, 1), 0.1])
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,
149,a4_4_squadrons,2,skill,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>You have been provided with a file named ""cadets.csv"" that contains information about (fake) cadets. Here is a line from the file:</p>
<p>&nbsp;</p>
<p><strong><code>Karla Webber, Female, CS-17, 2020</code></strong></p>
<p>&nbsp;</p>
<p><br />Each position in the line represents a different ""data element."" Here is a key for your reference:</p>
<p>&nbsp;</p>
<table width="""">
<thead>
<tr>
<th>&nbsp;</th>
<th>Name</th>
<th>Gender</th>
<th>Squadron</th>
<th>Class Year</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>Karla Webber</th>
<th>Female</th>
<th>CS-17</th>
<th>2020</th>
</tr>
</tbody>
</table>
<p><strong>&nbsp;</strong></p>
<p>Write a Python program that opens the file and prints out the squadron number of each cadet. For example, if the first three cadets come from CS-03, CS-04, and CS-09, the first three lines of output should be:</p>
<pre>CS-03<br />CS-04<br />CS-09</pre>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li>Your solution should print out the squadrons in the order that they were read from the file.</li>
<li>Your solution may print out the same squadron (e.g., CS-03) multiple times.</li>
</ul>
</div>
","from cs110 import autograder
import random, math, ast

# Flag scores
# 0.1 Template only (not always detectable)
# 0.2 Error thrown during run
# 0.3 Floor when scoring a run that appears to complete

def script_name():
    #return ""a4_4_names.py""
    return ""a4_4_squadrons.py""
    #return ""a4_4_year.py""
    #return ""a4_4_template.py""


'''
item = [a,b,c] (what should be in this entry)
entry = [d,e,f] (what is in this entry)

For each value in item, if it is in entry:
   Of the right type in the right place: 100
   Of the wrong type in the right place: 80
   Of the right type but in the wrong place: 80
   Of the wrong type in the wrong place: 64
If entry and item are not the same length, 20% penalty

Note that this has issues if there are duplicate values in the correct item.
'''
def score_value_against_value(v1, v2):
    score = 0
    if v1 == v2:
        return 100
    try:
        if float(v1) == float(v2):
            score = 80
    except:
        pass
    return score

def score_list_against_list(correct, scored):
    score = 0
    for i in range(len(correct)):
        col_score = []
        for j in range(len(scored)):
            t_score = score_value_against_value(correct[i], scored[j])
            if i != j:
                t_score *= 0.80
            col_score.append(t_score)
        score += max(col_score)
    score /= len(correct)

    if len(correct) != len(scored):
        score *= 0.80
    return score

def score_list_against_table(item_list, table):
    score_list = []
    for entry in table:
        score = 0
        if item_list == entry:
            score = 100
        else:
            score = score_list_against_list(item_list, entry)
        score_list.append(score)
    return score_list

def score_correct_against_scored(correct_table, scored_table, weights):
    # normalize weights
    norm_wt = []
    sum_of_weights = sum(weights)
    for weight in weights:
        norm_wt.append(weight / sum_of_weights)
        
    # score each item separately againt table
    cum_score = 0
    for i in range(len(correct_table)):
        # Check if this item is in the table correctly and in the correct position
        if (i < len(scored_table)) and (correct_table[i] == scored_table[i]):
            score = 100
        # Score this item against each item in the table
        else:
            score_list = score_list_against_table(correct_table[i], scored_table)
            if len(score_list) > 0:
                score = 0.50 * max(score_list)
            else:
                score = 0
            if i < len(score_list):
                score = max([score, score_list[i]])
        cum_score += score * norm_wt[i]
        
    return cum_score
    
def item_in_table(item, table):
    if item in table:
        print(""Item Found"")
        return 100
    print(item, ""not found in"", table)
    return 50

def given_table():
    return []

def user_inputs():
    return [[]]

def get_correct_output(inputs):

    if script_name() == ""a4_4_names.py"":
        file_name = ""cadets.csv""
    if script_name() == ""a4_4_squadrons.py"":
        file_name = ""cadets.csv""
    if script_name() == ""a4_4_year.py"":
        file_name = ""cadets.csv""
        
    file = open(file_name, ""r"")
    file_contents = file.read()
    file_lines = file_contents.split('\n')

    if script_name() == ""a4_4_names.py"":
        index = 0
    if script_name() == ""a4_4_squadrons.py"":
        index = 2
    if script_name() == ""a4_4_year.py"":
        index = 3
        
    output_list = []
    weights = []
    for line in file_lines:
        col = line.split(',')
        output_list.append(col[index])
        weights.append(1)
    return (output_list, weights)

def test_passed():    
    '''
    # Template-only check
    output, error = autograder.run_script(script_name(), [])
    if len(error) == 0:
        print(""Be sure that you are not running just the template file"")
        return 0.1
    '''
    # Run Data Sets
    run_data = user_inputs()
    
    # Set the weights for the individual runs
    relative_weights = []
    for i in range(len(run_data)):         
        relative_weights.append(1)
    sum_of_relative_weights = sum(relative_weights)
    run_weight = []
    for weight in relative_weights:
        run_weight.append(weight / sum_of_relative_weights)
    
    # Runs the Script for each data set
    cum_score = 0
    for run in range(1):
        print(""-------------------------------------------------"")
        print(""Test #"" + str(run + 1))
        print(""-------------------------------------------------"")

        input_lists = run_data[run]
        score = 0
        
        input_list_for_this_run = []
        (correct, weights) = get_correct_output(input_list_for_this_run)

        output, error = autograder.run_script(script_name(), input_list_for_this_run)
        output_lines = output.strip().split('\n')
        
        output_is_right_length = len(output_lines) == len(correct)
        print(len(output_lines), len(correct))
        
        done = False
        # Deal with the case of errors occuring during run
        if len(error) > 0:
            print(""Error during run"")
            score = 0.02
            done = True
        
        # Attempt to detect running just the template code
        if not done and len(output_lines) == 0:
            print(""Be sure that you are not running just the template file"")
            score = 0.01
            done = True
            
        # Deal with case of no errors occurring during run
        if not done:
            score = score_list_against_list(correct, output_lines)
            if score == 100:
                done = True
        
        if not done:
            # If the number of output lines is more than the number of lines in the file, the
            # file was likely parsed on something other than \n (probably the comma)
            if len(output_lines) > len(correct):
                score = 40
                done = True
        
        if not done:
            if len(output_lines) == 1:
                if ',' in output_lines[0]:
                    score = 20
                    done = True
                elif score > 0:
                    score = max([score, 40])
                    done = True
                
        if not done:
            # If they split each line on the comma, then the individual lines will not contain commas.
            # If this is the case, then it will be assumed that they did everything except print
            # the correct information provided the number of lines is correct.
            if output_is_right_length:
                if ',' in output_lines[0]:
                    score = 20
                else:
                    score = 80
                done = True
                
        if not done:
            score = 0.3            
            
        print(""This test score:"", round(score,1), ""% (weight ="", round(100*run_weight[run],1), ""%)"")
        cum_score += score * run_weight[run]
        print()
        
    return max([round(cum_score, 1), 0.1])
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,
150,a4_4_names,2,skill,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>You have been provided with a file named ""cadets.csv"" that contains information about (fake) cadets. Here is a line from the file:</p>
<p>&nbsp;</p>
<p><strong><code>Karla Webber, Female, CS-17, 2020</code></strong></p>
<p>&nbsp;</p>
<p><br />Each position in the line represents a different ""data element."" Here is a key for your reference:</p>
<p>&nbsp;</p>
<table width="""">
<thead>
<tr>
<th>&nbsp;</th>
<th>Name</th>
<th>Gender</th>
<th>Squadron</th>
<th>Class Year</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>Karla Webber</th>
<th>Female</th>
<th>CS-17</th>
<th>2020</th>
</tr>
</tbody>
</table>
<p><strong>&nbsp;</strong></p>
<p>Write a Python program that opens the file and prints out the name of each cadet. For example, if the first three cadets are named Karla Webber, Kelsea Hood, Nicolle Terry the first three lines of output should be:</p>
<pre>Karla Webber<br />Kelsea Hood<br />Nicolle Terry</pre>
<p><strong>NOTES:</strong></p>
<ul>
<li>Your solution should print out the names in the order that they were read from the file.</li>
<li>Your solution may print out the same name (e.g., John Smith) multiple times.</li>
</ul>
</div>
","from cs110 import autograder
import random, math, ast

# Flag scores
# 0.1 Template only (not always detectable)
# 0.2 Error thrown during run
# 0.3 Floor when scoring a run that appears to complete

def script_name():
    return ""a4_4_names.py""
    #return ""a4_4_squadrons.py""
    #return ""a4_4_year.py""
    #return ""a4_4_template.py""


'''
item = [a,b,c] (what should be in this entry)
entry = [d,e,f] (what is in this entry)

For each value in item, if it is in entry:
   Of the right type in the right place: 100
   Of the wrong type in the right place: 80
   Of the right type but in the wrong place: 80
   Of the wrong type in the wrong place: 64
If entry and item are not the same length, 20% penalty

Note that this has issues if there are duplicate values in the correct item.
'''
def score_value_against_value(v1, v2):
    score = 0
    if v1 == v2:
        return 100
    try:
        if float(v1) == float(v2):
            score = 80
    except:
        pass
    return score

def score_list_against_list(correct, scored):
    score = 0
    for i in range(len(correct)):
        col_score = []
        for j in range(len(scored)):
            t_score = score_value_against_value(correct[i], scored[j])
            if i != j:
                t_score *= 0.80
            col_score.append(t_score)
        score += max(col_score)
    score /= len(correct)

    if len(correct) != len(scored):
        score *= 0.80
    return score

def score_list_against_table(item_list, table):
    score_list = []
    for entry in table:
        score = 0
        if item_list == entry:
            score = 100
        else:
            score = score_list_against_list(item_list, entry)
        score_list.append(score)
    return score_list

def score_correct_against_scored(correct_table, scored_table, weights):
    # normalize weights
    norm_wt = []
    sum_of_weights = sum(weights)
    for weight in weights:
        norm_wt.append(weight / sum_of_weights)
        
    # score each item separately againt table
    cum_score = 0
    for i in range(len(correct_table)):
        # Check if this item is in the table correctly and in the correct position
        if (i < len(scored_table)) and (correct_table[i] == scored_table[i]):
            score = 100
        # Score this item against each item in the table
        else:
            score_list = score_list_against_table(correct_table[i], scored_table)
            if len(score_list) > 0:
                score = 0.50 * max(score_list)
            else:
                score = 0
            if i < len(score_list):
                score = max([score, score_list[i]])
        cum_score += score * norm_wt[i]
        
    return cum_score
    
def item_in_table(item, table):
    if item in table:
        print(""Item Found"")
        return 100
    print(item, ""not found in"", table)
    return 50

def given_table():
    return []

def user_inputs():
    return [[]]

def get_correct_output(inputs):

    if script_name() == ""a4_4_names.py"":
        file_name = ""cadets.csv""
    if script_name() == ""a4_4_squadrons.py"":
        file_name = ""cadets.csv""
    if script_name() == ""a4_4_year.py"":
        file_name = ""cadets.csv""
        
    file = open(file_name, ""r"")
    file_contents = file.read()
    file_lines = file_contents.split('\n')

    if script_name() == ""a4_4_names.py"":
        index = 0
    if script_name() == ""a4_4_squadrons.py"":
        index = 2
    if script_name() == ""a4_4_year.py"":
        index = 3
        
    output_list = []
    weights = []
    for line in file_lines:
        col = line.split(',')
        output_list.append(col[index])
        weights.append(1)
    return (output_list, weights)

def test_passed():    
    '''
    # Template-only check
    output, error = autograder.run_script(script_name(), [])
    if len(error) == 0:
        print(""Be sure that you are not running just the template file"")
        return 0.1
    '''
    # Run Data Sets
    run_data = user_inputs()
    
    # Set the weights for the individual runs
    relative_weights = []
    for i in range(len(run_data)):         
        relative_weights.append(1)
    sum_of_relative_weights = sum(relative_weights)
    run_weight = []
    for weight in relative_weights:
        run_weight.append(weight / sum_of_relative_weights)
    
    # Runs the Script for each data set
    cum_score = 0
    for run in range(1):
        print(""-------------------------------------------------"")
        print(""Test #"" + str(run + 1))
        print(""-------------------------------------------------"")

        input_lists = run_data[run]
        score = 0
        
        input_list_for_this_run = []
        (correct, weights) = get_correct_output(input_list_for_this_run)

        output, error = autograder.run_script(script_name(), input_list_for_this_run)
        output_lines = output.strip().split('\n')
        
        output_is_right_length = len(output_lines) == len(correct)
        print(len(output_lines), len(correct))
        
        done = False
        # Deal with the case of errors occuring during run
        if len(error) > 0:
            print(""Error during run"")
            score = 0.02
            done = True
        
        # Attempt to detect running just the template code
        if not done and len(output_lines) == 0:
            print(""Be sure that you are not running just the template file"")
            score = 0.01
            done = True
            
        # Deal with case of no errors occurring during run
        if not done:
            score = score_list_against_list(correct, output_lines)
            if score == 100:
                done = True
        
        if not done:
            # If the number of output lines is more than the number of lines in the file, the
            # file was likely parsed on something other than \n (probably the comma)
            if len(output_lines) > len(correct):
                score = 40
                done = True
        
        if not done:
            if len(output_lines) == 1:
                if ',' in output_lines[0]:
                    score = 20
                    done = True
                elif score > 0:
                    score = max([score, 40])
                    done = True
                
        if not done:
            # If they split each line on the comma, then the individual lines will not contain commas.
            # If this is the case, then it will be assumed that they did everything except print
            # the correct information provided the number of lines is correct.
            if output_is_right_length:
                if ',' in output_lines[0]:
                    score = 20
                else:
                    score = 80
                done = True
                
        if not done:
            score = 0.3            
            
        print(""This test score:"", round(score,1), ""% (weight ="", round(100*run_weight[run],1), ""%)"")
        cum_score += score * run_weight[run]
        print()
        
    return max([round(cum_score, 1), 0.1])
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,
151,a4_3_parks,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a table called <code>amusement_parks</code> that contains information about various amusement parks in the United States. Logically, the table can be represented as follows:</p>
<p>&nbsp;</p>
<table border=""1"">
<tbody>
<tr>
<td><strong>Price Per Day</strong></td>
<td><strong>Name of Park</strong></td>
<td><strong>State</strong></td>
</tr>
<tr>
<td>$154.00</td>
<td>Disneyland</td>
<td>California</td>
</tr>
<tr>
<td>$169.34</td>
<td>Disney World</td>
<td>Florida</td>
</tr>
<tr>
<td>$79.99</td>
<td>Great America</td>
<td>California</td>
</tr>
<tr>
<td>$73.00</td>
<td>Cedar Point</td>
<td>Ohio</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write code that gets 1) the name of the park, 2) the state where the park is located, and 3) the price of a single day of admission from the user. Your program should then add a new row to the table containing these values.</p>
<p>&nbsp;</p>
<p>HINT:</p>
<ul>
<li>When you are creating your row, make sure you are adding the columns in the correct order!</li>
</ul>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math, ast

def script_name():
    return ""a4_3_parks.py""


'''
item = [a,b,c] (what should be in this entry)
entry = [d,e,f] (what is in this entry)

For each value in item, if it is in entry:
   Of the right type in the right place: 100
   Of the wrong type in the right place: 80
   Of the right type but in the wrong place: 80
   Of the wrong type in the wrong place: 64
If entry and item are not the same length, 20% penalty

Note that this has issues if there are duplicate values in the correct item.
'''
def score_value_against_value(v1, v2):
    score = 0
    if v1 == v2:
        return 100
    try:
        if float(v1) == float(v2):
            score = 80
    except:
        pass
    return score

def score_list_against_list(correct, scored):
    score = 0
    for i in range(len(correct)):
        col_score = []
        for j in range(len(scored)):
            t_score = score_value_against_value(correct[i], scored[j])
            if i != j:
                t_score *= 0.80
            col_score.append(t_score)
        score += max(col_score)
    score /= len(correct)

    if len(correct) != len(scored):
        score *= 0.80
    return score

def score_list_against_table(item_list, table):
    score_list = []
    for entry in table:
        score = 0
        if item_list == entry:
            score = 100
        else:
            score = score_list_against_list(item_list, entry)
        score_list.append(score)
    return score_list

def score_correct_against_scored(correct_table, scored_table, weights):
    # normalize weights
    norm_wt = []
    sum_of_weights = sum(weights)
    for weight in weights:
        norm_wt.append(weight / sum_of_weights)
        
    # score each item separately against table
    cum_score = 0
    for i in range(len(correct_table)):
        # Check if this item is in the table correctly and in the correct position
        if (i < len(scored_table)) and (correct_table[i] == scored_table[i]):
            score = 100
        # Score this item against each item in the table
        else:
            score_list = score_list_against_table(correct_table[i], scored_table)
            if len(score_list) > 0:
                score = 0.50 * max(score_list)
            else:
                score = 0
            if i < len(score_list):
                score = max([score, score_list[i]])
        cum_score += score * norm_wt[i]
    
    # penalty for wrong number of items in table.
    if len(correct_table) != len(scored_table):
        cum_score = max([cum_score - 20, 0])
    return cum_score
    
def item_in_table(item, table):
    if item in table:
        print(""Item Found"")
        return 100
    print(item, ""not found in"", table)
    return 50

def given_table():
    if script_name() == ""a4_3_aircraft.py"":
        return [[218, ""C-17 Globemaster"", ""Boeing""],
                [14.6, ""F-16 Falcon"", ""General Dynamics""],
                [16.9, ""MQ-9 Reaper"", ""General Atomics""],
                [737, ""B-2 Spirit"", ""Northrop Grumman""]]
    if script_name() == ""a4_3_new_cars.py"":
        return [[26660, ""Bronco"", ""Ford""],
                [36340, ""4Runner"", ""Toyota""],
                [68200, ""Q8"", ""Audi""],
                [48475, ""Silverado"", ""Cheverolet""]]
    if script_name() == ""a4_3_parks.py"":
        return [[154.0, ""Disneyland"", ""California""],
                [169.34, ""Disney World"", ""Florida""],
                [79.99, ""Six Flags Great America"", ""California""],
                [73.00, ""Cedar Point"", ""Ohio""]]
    return []

def user_inputs():
    if script_name() == ""a4_3_aircraft.py"":
        return [ ['B-52 Stratofortress', 'Boeing', 14.4], ['T-6 Texan', 'North American Aviation', 4] ]
    if script_name() == ""a4_3_new_cars.py"":
        return [ ['Model 3', 'Tesla', 34999.99], ['Cayenne', 'Porche', 67500] ]
    if script_name() == ""a4_3_parks.py"":
        return [ ['Elitch Gardens', 'Colorado', 69.99], ['Euro Disney', 'France', 189] ]
    return []

def get_correct_output(inputs):
    table = given_table()
    weights = []
    for i in range(len(table)):
        weights.append(0.1)
    table.append([inputs[2], inputs[0], inputs[1]])
    for i in range(len(table)-len(weights)):
        weights.append(1)
    return (table, weights)

def test_passed():    
    
    # Template-only check
    print(""-------------------------------------------------"")
    print(""Test #"" + str(0))
    print(""-------------------------------------------------"")
    output, error = autograder.run_script(script_name(), [])
    if len(error) == 0:
        print(""Be sure that you are not running just the template file."")
        return 0.2
    else:
        print(""Ignore the errors for this run."")
        
    # Run Data Sets
    run_data = user_inputs()
    
    # Set the weights for the individual runs
    relative_weights = []
    for i in range(len(run_data)):         
        relative_weights.append(1)
    relative_weights = [1,19] #(override evenly weighted)
    sum_of_relative_weights = sum(relative_weights)
    run_weight = []
    for weight in relative_weights:
        run_weight.append(weight / sum_of_relative_weights)
    
    # Runs the Script for each data set
    cum_score = 0
    for run in range(len(run_data)):
        print(""-------------------------------------------------"")
        print(""Test #"" + str(run + 1))
        print(""-------------------------------------------------"")

        inputs_for_this_run = run_data[run]

        input_list = []
        (correct, weights) = get_correct_output(inputs_for_this_run)
        
        output, error = autograder.run_script(script_name(), inputs_for_this_run)
        
        score = 0
        # Deal with the case of errors occuring during run
        if (run == 1): # Cost is a float
            if len(error) > 0:
                print(""Error when handling a float cost"")
                score = 0
                
        if (run == 2): # Cost is an integer
            if len(error) > 0:
                print(""Error when handling an integer cost"")
                score = 0

        # Deal with case of no errors occurring during run
        if len(error) == 0:
            lines = output.strip().split('\n')

            if len(lines) >= 1 and len(lines[0]) > 0:                    
                output_table = ast.literal_eval(lines[0])
            
                score = score_correct_against_scored(correct, output_table, weights)

            else:
                score = 0
                

        print(""This test score:"", round(score,1), ""% (weight ="", round(100*run_weight[run],1), ""%)"")
        cum_score += score * run_weight[run]
        print()
        
    return max([round(cum_score, 1), 0.1])
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
152,a4_3_new_cars,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a table called <code>new_cars</code> that contains information about various automobiles for sale in the United States. Logically, the table can be represented as follows:</p>
<p>&nbsp;</p>
<table border=""1"">
<tbody>
<tr>
<td><strong>Unit Price&nbsp;</strong></td>
<td><strong>Model Name</strong></td>
<td><strong>Make</strong></td>
</tr>
<tr>
<td>$26,660</td>
<td>Bronco</td>
<td>Ford</td>
</tr>
<tr>
<td>$36,340</td>
<td>4Runner</td>
<td>Toyota</td>
</tr>
<tr>
<td>$68,199.99</td>
<td>Q8</td>
<td>Audi</td>
</tr>
<tr>
<td>$48,475</td>
<td>Silverado</td>
<td>Chevrolet</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write code that gets 1) Model Name of the car, 2) Make, and 3) the unit price. Your program should then add a new row to the table containing these values.</p>
<p>&nbsp;</p>
<p>HINT:</p>
<ul>
<li>When you are creating your row, make sure you are adding the columns in the correct order!</li>
</ul>
</div>
","from cs110 import autograder
import random, math, ast

def script_name():
    return ""a4_3_new_cars.py""


'''
item = [a,b,c] (what should be in this entry)
entry = [d,e,f] (what is in this entry)

For each value in item, if it is in entry:
   Of the right type in the right place: 100
   Of the wrong type in the right place: 80
   Of the right type but in the wrong place: 80
   Of the wrong type in the wrong place: 64
If entry and item are not the same length, 20% penalty

Note that this has issues if there are duplicate values in the correct item.
'''
def score_value_against_value(v1, v2):
    score = 0
    if v1 == v2:
        return 100
    try:
        if float(v1) == float(v2):
            score = 80
    except:
        pass
    return score

def score_list_against_list(correct, scored):
    score = 0
    for i in range(len(correct)):
        col_score = []
        for j in range(len(scored)):
            t_score = score_value_against_value(correct[i], scored[j])
            if i != j:
                t_score *= 0.80
            col_score.append(t_score)
        score += max(col_score)
    score /= len(correct)

    if len(correct) != len(scored):
        score *= 0.80
    return score

def score_list_against_table(item_list, table):
    score_list = []
    for entry in table:
        score = 0
        if item_list == entry:
            score = 100
        else:
            score = score_list_against_list(item_list, entry)
        score_list.append(score)
    return score_list

def score_correct_against_scored(correct_table, scored_table, weights):
    # normalize weights
    norm_wt = []
    sum_of_weights = sum(weights)
    for weight in weights:
        norm_wt.append(weight / sum_of_weights)
        
    # score each item separately against table
    cum_score = 0
    for i in range(len(correct_table)):
        # Check if this item is in the table correctly and in the correct position
        if (i < len(scored_table)) and (correct_table[i] == scored_table[i]):
            score = 100
        # Score this item against each item in the table
        else:
            score_list = score_list_against_table(correct_table[i], scored_table)
            if len(score_list) > 0:
                score = 0.50 * max(score_list)
            else:
                score = 0
            if i < len(score_list):
                score = max([score, score_list[i]])
        cum_score += score * norm_wt[i]
    
    # penalty for wrong number of items in table.
    if len(correct_table) != len(scored_table):
        cum_score = max([cum_score - 20, 0])
    return cum_score
    
def item_in_table(item, table):
    if item in table:
        print(""Item Found"")
        return 100
    print(item, ""not found in"", table)
    return 50

def given_table():
    if script_name() == ""a4_3_aircraft.py"":
        return [[218, ""C-17 Globemaster"", ""Boeing""],
                [14.6, ""F-16 Falcon"", ""General Dynamics""],
                [16.9, ""MQ-9 Reaper"", ""General Atomics""],
                [737, ""B-2 Spirit"", ""Northrop Grumman""]]
    if script_name() == ""a4_3_new_cars.py"":
        return [[26660, ""Bronco"", ""Ford""],
                [36340, ""4Runner"", ""Toyota""],
                [68200, ""Q8"", ""Audi""],
                [48475, ""Silverado"", ""Cheverolet""]]
    if script_name() == ""a4_3_parks.py"":
        return [[154.0, ""Disneyland"", ""California""],
                [169.34, ""Disney World"", ""Florida""],
                [79.99, ""Six Flags Great America"", ""California""],
                [73.00, ""Cedar Point"", ""Ohio""]]
    return []

def user_inputs():
    if script_name() == ""a4_3_aircraft.py"":
        return [ ['B-52 Stratofortress', 'Boeing', 14.4], ['T-6 Texan', 'North American Aviation', 4] ]
    if script_name() == ""a4_3_new_cars.py"":
        return [ ['Model 3', 'Tesla', 34999.99], ['Cayenne', 'Porche', 67500] ]
    if script_name() == ""a4_3_parks.py"":
        return [ ['Elitch Gardens', 'Colorado', 69.99], ['Euro Disney', 'France', 189] ]
    return []

def get_correct_output(inputs):
    table = given_table()
    weights = []
    for i in range(len(table)):
        weights.append(0.1)
    table.append([inputs[2], inputs[0], inputs[1]])
    for i in range(len(table)-len(weights)):
        weights.append(1)
    return (table, weights)

def test_passed():    
    
    # Template-only check
    print(""-------------------------------------------------"")
    print(""Test #"" + str(0))
    print(""-------------------------------------------------"")
    output, error = autograder.run_script(script_name(), [])
    if len(error) == 0:
        print(""Be sure that you are not running just the template file."")
        return 0.2
    else:
        print(""Ignore the errors for this run."")
        
    # Run Data Sets
    run_data = user_inputs()
    
    # Set the weights for the individual runs
    relative_weights = []
    for i in range(len(run_data)):         
        relative_weights.append(1)
    relative_weights = [1,19] #(override evenly weighted)
    sum_of_relative_weights = sum(relative_weights)
    run_weight = []
    for weight in relative_weights:
        run_weight.append(weight / sum_of_relative_weights)
    
    # Runs the Script for each data set
    cum_score = 0
    for run in range(len(run_data)):
        print(""-------------------------------------------------"")
        print(""Test #"" + str(run + 1))
        print(""-------------------------------------------------"")

        inputs_for_this_run = run_data[run]

        input_list = []
        (correct, weights) = get_correct_output(inputs_for_this_run)
        
        output, error = autograder.run_script(script_name(), inputs_for_this_run)
        
        score = 0
        # Deal with the case of errors occuring during run
        if (run == 1): # Cost is a float
            if len(error) > 0:
                print(""Error when handling a float cost"")
                score = 0
                
        if (run == 2): # Cost is an integer
            if len(error) > 0:
                print(""Error when handling an integer cost"")
                score = 0

        # Deal with case of no errors occurring during run
        if len(error) == 0:
            lines = output.strip().split('\n')

            if len(lines) >= 1 and len(lines[0]) > 0:                    
                output_table = ast.literal_eval(lines[0])
            
                score = score_correct_against_scored(correct, output_table, weights)

            else:
                score = 0
                

        print(""This test score:"", round(score,1), ""% (weight ="", round(100*run_weight[run],1), ""%)"")
        cum_score += score * run_weight[run]
        print()
        
    return max([round(cum_score, 1), 0.1])
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
153,a4_3_aircraft,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a table called <code>usaf_aircraft</code> that contains information about various aircraft in the United States Air Force inventory. Logically, the table can be represented as follows:</p>
<p>&nbsp;</p>
<table border=""1"">
<tbody>
<tr>
<td><strong>Unit Price in Millions</strong></td>
<td><strong>Aircraft Name</strong></td>
<td><strong>Manufacturer</strong></td>
</tr>
<tr>
<td>$218</td>
<td>C-17 Globemaster</td>
<td>Boeing</td>
</tr>
<tr>
<td>$14.6</td>
<td>F-16 Falcon</td>
<td>General Dynamics</td>
</tr>
<tr>
<td>$16.9</td>
<td>MQ-9 Reaper</td>
<td>General Atomics</td>
</tr>
<tr>
<td>$737</td>
<td>B-2 Spirit</td>
<td>Northrop Grumman</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write code that gets 1) Name of the Aircraft, 2) Manufacturer, and 3) the unit price in millions. Your program should then add a new row to the table containing these values.</p>
<p>&nbsp;</p>
<p>HINT:</p>
<ul>
<li>When you are creating your row, make sure you are adding the columns in the correct order!</li>
</ul>
</div>
","from cs110 import autograder
import random, math, ast

def script_name():
    return ""a4_3_aircraft.py""


'''
item = [a,b,c] (what should be in this entry)
entry = [d,e,f] (what is in this entry)

For each value in item, if it is in entry:
   Of the right type in the right place: 100
   Of the wrong type in the right place: 80
   Of the right type but in the wrong place: 80
   Of the wrong type in the wrong place: 64
If entry and item are not the same length, 20% penalty

Note that this has issues if there are duplicate values in the correct item.
'''
def score_value_against_value(v1, v2):
    score = 0
    if v1 == v2:
        return 100
    try:
        if float(v1) == float(v2):
            score = 80
    except:
        pass
    return score

def score_list_against_list(correct, scored):
    score = 0
    for i in range(len(correct)):
        col_score = []
        for j in range(len(scored)):
            t_score = score_value_against_value(correct[i], scored[j])
            if i != j:
                t_score *= 0.80
            col_score.append(t_score)
        score += max(col_score)
    score /= len(correct)

    if len(correct) != len(scored):
        score *= 0.80
    return score

def score_list_against_table(item_list, table):
    score_list = []
    for entry in table:
        score = 0
        if item_list == entry:
            score = 100
        else:
            score = score_list_against_list(item_list, entry)
        score_list.append(score)
    return score_list

def score_correct_against_scored(correct_table, scored_table, weights):
    # normalize weights
    norm_wt = []
    sum_of_weights = sum(weights)
    for weight in weights:
        norm_wt.append(weight / sum_of_weights)
        
    # score each item separately against table
    cum_score = 0
    for i in range(len(correct_table)):
        # Check if this item is in the table correctly and in the correct position
        if (i < len(scored_table)) and (correct_table[i] == scored_table[i]):
            score = 100
        # Score this item against each item in the table
        else:
            score_list = score_list_against_table(correct_table[i], scored_table)
            if len(score_list) > 0:
                score = 0.50 * max(score_list)
            else:
                score = 0
            if i < len(score_list):
                score = max([score, score_list[i]])
        cum_score += score * norm_wt[i]
    
    # penalty for wrong number of items in table.
    if len(correct_table) != len(scored_table):
        cum_score = max([cum_score - 20, 0])
    return cum_score
    
def item_in_table(item, table):
    if item in table:
        print(""Item Found"")
        return 100
    print(item, ""not found in"", table)
    return 50

def given_table():
    if script_name() == ""a4_3_aircraft.py"":
        return [[218, ""C-17 Globemaster"", ""Boeing""],
                [14.6, ""F-16 Falcon"", ""General Dynamics""],
                [16.9, ""MQ-9 Reaper"", ""General Atomics""],
                [737, ""B-2 Spirit"", ""Northrop Grumman""]]
    if script_name() == ""a4_3_new_cars.py"":
        return [[26660, ""Bronco"", ""Ford""],
                [36340, ""4Runner"", ""Toyota""],
                [68200, ""Q8"", ""Audi""],
                [48475, ""Silverado"", ""Cheverolet""]]
    if script_name() == ""a4_3_parks.py"":
        return [[154.0, ""Disneyland"", ""California""],
                [169.34, ""Disney World"", ""Florida""],
                [79.99, ""Six Flags Great America"", ""California""],
                [73.00, ""Cedar Point"", ""Ohio""]]
    return []

def user_inputs():
    if script_name() == ""a4_3_aircraft.py"":
        return [ ['B-52 Stratofortress', 'Boeing', 14.4], ['T-6 Texan', 'North American Aviation', 4] ]
    if script_name() == ""a4_3_new_cars.py"":
        return [ ['Model 3', 'Tesla', 34999.99], ['Cayenne', 'Porche', 67500] ]
    if script_name() == ""a4_3_parks.py"":
        return [ ['Elitch Gardens', 'Colorado', 69.99], ['Euro Disney', 'France', 189] ]
    return []

def get_correct_output(inputs):
    table = given_table()
    weights = []
    for i in range(len(table)):
        weights.append(0.1)
    table.append([inputs[2], inputs[0], inputs[1]])
    for i in range(len(table)-len(weights)):
        weights.append(1)
    return (table, weights)

def test_passed():    
    
    # Template-only check
    print(""-------------------------------------------------"")
    print(""Test #"" + str(0))
    print(""-------------------------------------------------"")
    output, error = autograder.run_script(script_name(), [])
    if len(error) == 0:
        print(""Be sure that you are not running just the template file."")
        return 0.2
    else:
        print(""Ignore the errors for this run."")
        
    # Run Data Sets
    run_data = user_inputs()
    
    # Set the weights for the individual runs
    relative_weights = []
    for i in range(len(run_data)):         
        relative_weights.append(1)
    relative_weights = [1,19] #(override evenly weighted)
    sum_of_relative_weights = sum(relative_weights)
    run_weight = []
    for weight in relative_weights:
        run_weight.append(weight / sum_of_relative_weights)
    
    # Runs the Script for each data set
    cum_score = 0
    for run in range(len(run_data)):
        print(""-------------------------------------------------"")
        print(""Test #"" + str(run + 1))
        print(""-------------------------------------------------"")

        inputs_for_this_run = run_data[run]

        input_list = []
        (correct, weights) = get_correct_output(inputs_for_this_run)
        
        output, error = autograder.run_script(script_name(), inputs_for_this_run)
        
        score = 0
        # Deal with the case of errors occuring during run
        if (run == 1): # Cost is a float
            if len(error) > 0:
                print(""Error when handling a float cost"")
                score = 0
                
        if (run == 2): # Cost is an integer
            if len(error) > 0:
                print(""Error when handling an integer cost"")
                score = 0

        # Deal with case of no errors occurring during run
        if len(error) == 0:
            lines = output.strip().split('\n')

            if len(lines) >= 1 and len(lines[0]) > 0:                    
                output_table = ast.literal_eval(lines[0])
            
                score = score_correct_against_scored(correct, output_table, weights)

            else:
                score = 0
                

        print(""This test score:"", round(score,1), ""% (weight ="", round(100*run_weight[run],1), ""%)"")
        cum_score += score * run_weight[run]
        print()
        
    return max([round(cum_score, 1), 0.1])
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
154,a4_2_sickness,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a template that gets the following values from the user:</p>
<ul>
<li>Body temperature (in Fahrenheit)</li>
<li>Body aches (a string, which will be either ""yes"" or ""no"")</li>
<li>Loss of smell (a string, which will be either ""yes"" or ""no"")</li>
</ul>
<p>&nbsp;</p>
<p>Using the following rules as a guide, have your program determine a person's risk of having an infectious disease:</p>
<ol>
<li>If the person's temperature is above 100.4 degrees, print ""High Risk""</li>
<li>If the person is experiencing both body aches and loss of smell, print ""High Risk""</li>
<li>For all other situations, print ""Low Risk""</li>
</ol>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td>Input</td>
<td>
<p>99.0<br />yes<br />yes<br /><br /></p>
</td>
<td>100.4<br />no<br />yes</td>
</tr>
<tr>
<td>Output</td>
<td>High Risk</td>
<td>Low Risk</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def run_test(temperature, body_aches, loss_of_smell, expected_output):
    output, error = autograder.run_script(""a4_2_sickness.py"", [temperature, body_aches, loss_of_smell])
    lines = output.split('\n')
    
    if len(lines) >= 4:
        if lines[3] == expected_output:
            print(""Correct Output\n"")
            return True
        else:
            print(""Incorrect Output.  Expected"", expected_output, '\n')
            return False
    else:
        print(""No Output Found\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    num_tests_passed = 0
    
    testcase_library = [(round(random.uniform(98.0, 99.9), 1), ""yes"", ""no"", ""Low Risk""),
                        (round(random.uniform(100.5, 102.0), 1), ""yes"", ""yes"", ""High Risk""),
                        (round(random.uniform(98.0, 99.9), 1), ""yes"", ""yes"", ""High Risk""),
                        (round(random.uniform(100.5, 102.0), 1), ""no"", ""no"", ""High Risk"")]
    
    for i in range(len(testcase_library)):
        print(""-------------------"")
        print(""Test"", i+1, ""of"", len(testcase_library))
        print(""-------------------"")
        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):
            num_tests_passed += 1
    
    return round(100 / len(testcase_library) * num_tests_passed, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
155,a4_2_pt,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a template that gets the following values from the user:</p>
<ul>
<li>Outside Temperature (in Fahrenheit)</li>
<li>Lightning within 5?(a string, which will be either ""yes"" or ""no"")</li>
<li>Winds over 20 knots? (a string, which will be either ""yes"" or ""no"")</li>
</ul>
<p>&nbsp;</p>
<p>Using the following rules as a guide, have your program determine if PT is cancelled or a go:</p>
<ol>
<li>If the outside temperature is above 90 degrees, print ""PT Cancelled""</li>
<li>If there is lightning within 5 or winds over 20 knots print ""PT Cancelled""</li>
<li>For all other situations, print ""PT is a Go""</li>
</ol>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td>Input</td>
<td>
<p>99.0<br />no<br />no<br /><br /></p>
</td>
<td>85<br />no<br />yes</td>
<td>
<p>85</p>
<p>no</p>
<p>no</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>PT Cancelled</td>
<td>PT Cancelled</td>
<td>PT is a Go</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def run_test(temperature, lightning, winds, expected_output):
    output, error = autograder.run_script(""a4_2_pt.py"", [temperature, lightning, winds])
    lines = output.split('\n')
    
    if len(lines) >= 4:
        if lines[3] == expected_output:
            print(""Correct Output\n"")
            return True
        else:
            print(""Incorrect Output.  Expected"", expected_output, '\n')
            return False
    else:
        print(""No Output Found\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    num_tests_passed = 0
    
    testcase_library = [(round(random.uniform(72.0, 90), 1), ""no"", ""no"", ""PT is a Go""),
                        (round(random.uniform(100.5, 102.0), 1), ""yes"", ""yes"", ""PT Cancelled""),
                        (round(random.uniform(72.0, 90), 1), ""yes"", ""no"", ""PT Cancelled""),
                        (round(random.uniform(100.5, 102.0), 1), ""no"", ""no"", ""PT Cancelled"")]
    
    for i in range(len(testcase_library)):
        print(""-------------------"")
        print(""Test"", i+1, ""of"", len(testcase_library))
        print(""-------------------"")
        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):
            num_tests_passed += 1
    
    return round(100 / len(testcase_library) * num_tests_passed, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
156,a4_2_dog,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a template that gets the following values from the user:</p>
<ul>
<li>Outside Temperature (in Fahrenheit)</li>
<li>Is it raining? (a string that will be either ""yes"" or ""no"")</li>
<li>Is it daytime? (a string that will be either ""yes"" or ""no"")</li>
</ul>
<p>&nbsp;</p>
<p>Using the following rules as a guide, have your program determine if the dog is outside:</p>
<ol>
<li>If the outside temperature is above 85 degrees, print ""Dog Inside""</li>
<li>If it is raining outside print ""Dog Inside""</li>
<li>If it is NOT daytime, print ""Dog Inside""</li>
<li>For all other situations, print ""Dog Outside""</li>
</ol>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td>Input</td>
<td>
<p>99.0<br />no<br />yes<br /><br /></p>
</td>
<td>80<br />yes<br />yes</td>
<td>
<p>75</p>
<p>no</p>
<p>yes</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>Dog Inside</td>
<td>Dog Inside</td>
<td>Dog Outside</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def run_test(temperature, raining, daytime, expected_output):
    output, error = autograder.run_script(""a4_2_dog.py"", [temperature, raining, daytime])
    lines = output.split('\n')
    
    if len(lines) >= 4:
        if lines[3] == expected_output:
            print(""Correct Output\n"")
            return True
        else:
            print(""Incorrect Output.  Expected"", expected_output, '\n')
            return False
    else:
        print(""No Output Found\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    num_tests_passed = 0
    
    testcase_library = [(round(random.uniform(83.0, 84.9), 1), ""no"", ""yes"", ""Dog Outside""),
                        (round(random.uniform(83.0, 84.9), 1), ""yes"", ""yes"", ""Dog Inside""),
                        (round(random.uniform(83.0, 84.9), 1), ""no"", ""no"", ""Dog Inside""),
                        (round(random.uniform(100.5, 102.0), 1), ""no"", ""yes"", ""Dog Inside"")]
    
    for i in range(len(testcase_library)):
        print(""-------------------"")
        print(""Test"", i+1, ""of"", len(testcase_library))
        print(""-------------------"")
        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):
            num_tests_passed += 1
    
    return round(100 / len(testcase_library) * num_tests_passed, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
157,a4_1_lift,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a Python function that calculates the lift for an aircraft. You will name your function <code>calculate_lift</code>, and it will have the following parameters (in this order):</p>
<ul>
<li>Lift coefficient</li>
<li>Density</li>
<li>Velocity</li>
<li>Area</li>
</ul>
<p>Your function will <strong>return</strong> the lift, which can be computed using the following equation:</p>
<p>&nbsp;</p>
<p><img src=""https://www.thaitechnics.com/fly/tg4/lift_equa.gif"" alt=""Principles of Flying"" /></p>
<p>&nbsp;</p>
<p>NOTE: You do NOT need to call the function.</p>
</div>
","from cs110 import autograder
import random, math
import a4_1_lift

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    
    if ""calculate_lift"" in dir(a4_1_lift):
        print(""Function Defined"")
        score += 20
        
        lift_coefficient = round(random.uniform(3, 5), 1)
        density = round(random.uniform(2, 3), 1)
        velocity = round(random.uniform(50, 200), 1)
        area = round(random.uniform(400, 1000), 1)
        lift = lift_coefficient * area * 0.5 * density * velocity ** 2.0
        
        if autograder.equals(lift, a4_1_lift.calculate_lift(lift_coefficient, density, velocity, area)):
            print(""Function Returned the Correct Value"")
            score += 80
        else:
            print(""calculate_lift(%1.1f, %1.1f, %1.1f, %1.1f) return %f instead of %f"" %
                  (lift_coefficient, density, velocity, area, a4_1_lift.calculate_lift(lift_coefficient, density, velocity, area), lift))
        
    else:
        print(""Function Not Defined"")
    
    return score
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
158,a4_1_buoyancy,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a Python function that calculates the buoyancy force for an object. You will name your function <code>calculate_buoyancy</code>, and it will have the following parameters (in this order):</p>
<ul>
<li>Submerged Volume</li>
<li>Density</li>
<li>Gravity</li>
</ul>
<p>Our function will&nbsp;<strong>return</strong>&nbsp;the buoyancy force, which can be computed using the following equation:</p>
<p><strong>Fb = Vs &times; D &times; g&nbsp;</strong>where Fb is the buoyancy force, Vs is the submerged volume, D is the density of the fluid the object is submerged in, and g is the force of gravity.</p>
<p>NOTE: You do NOT need to call the function.</p>
</div>
","from cs110 import autograder
import random, math
import a4_1_buoyancy

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    
    if ""calculate_buoyancy"" in dir(a4_1_buoyancy):
        print(""Function Defined"")
        score += 20
        
        volume = round(random.uniform(3, 5), 1)
        density = round(random.uniform(2, 3), 1)
        gravity = round(random.uniform(50, 200), 1)
        buoyancy = volume * density * gravity
        
        if autograder.equals(buoyancy, a4_1_buoyancy.calculate_buoyancy(volume, density, gravity)):
            print(""Function Returned the Correct Value"")
            score += 80
        else:
            print(""calculate_buoyancy(%1.1f, %1.1f, %1.1f) returned %f instead of %f"" %
                  (volume, density, gravity, a4_1_buoyancy.calculate_buoyancy(volume, density, gravity), buoyancy))
        
    else:
        print(""Function Not Defined"")
    
    return score
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
159,a4_1_area,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a Python function that calculates the area of a trapazoid. You will name your function&nbsp;<code>calculate_area</code>, and it will have the following parameters (in this order):</p>
<ul>
<li>Side_A</li>
<li>Side_B</li>
<li>Height</li>
</ul>
<p>Our function will&nbsp;<strong>return</strong>&nbsp;the area, which can be computed using the following equation:</p>
<p>A =  (a + b) h</p>
<p>NOTE: You do NOT need to call the function.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math
import a4_1_area

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    
    if ""calculate_area"" in dir(a4_1_area):
        print(""Function Defined"")
        score += 20
        
        Side_A = round(random.uniform(3, 5), 1)
        Side_B = round(random.uniform(2, 3), 1)
        Height = round(random.uniform(50, 200), 1)
        area = ((Side_A + Side_B) / 2) * Height
        
        if autograder.equals(area, a4_1_area.calculate_area(Side_A,Side_B,Height)):
            print(""Function Returned the Correct Value"")
            score += 80
        else:
            print(""calculate_area(%1.1f, %1.1f, %1.1f) return %f instead of %f"" %
                  (Side_A, Side_B, Height, a4_1_area.calculate_area(Side_A,Side_B,Height), area))
        
    else:
        print(""Function Not Defined"")
    
    return score
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
160,a3_7_minpower,2,lab,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset called&nbsp;<code>powerplants.csv</code>&nbsp;that contains information about various power production facilities across the nation. Here is a typical line from the dataset (each line ends with the newline &ldquo;\n&rdquo; character):</p>
<p>&nbsp;</p>
<p><code>-121.8601395, 38.01598436, 19, GWFPW2_1_UNIT 1, SteamTurbine</code></p>
<p>&nbsp;</p>
<p>Each position in the line (separated by a comma) represents a different &ldquo;data element,&rdquo; or &ldquo;column.&rdquo; The following table shows how the above line can be interpreted:<br /><br /></p>
<table border=""2"">
<thead>
<tr>
<th>&nbsp;</th>
<th>Longitude</th>
<th>Latitude</th>
<th>Power Output (in MW)</th>
<th>Name</th>
<th>Power Generation Method</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>-<strong>121.8601395</strong></th>
<th>38.01598436</th>
<th>19</th>
<th>GWFPW2<em>1</em>UNIT 1</th>
<th>SteamTurbine</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python program that asks the user for:</p>
<ul>
<li>A power generation method (e.g., &ldquo;SteamTurbine&rdquo;)</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then read the file and print on separate lines:</p>
<ul>
<li>The minimum power output for power plants of this particular type, and</li>
<li>The names of all power plants that are of this <strong>particular type</strong>, and within 1 MW (inclusive) of the minimum power output</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td>Input</td>
<td>
<p>Other</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>0.53<br />ELNIDS_2_DODPEV</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def solution(power_generation_type):
    file = open(""powerplants.csv"", 'r')
    contents = file.read()
    lines_in_file = contents.split('\n')
    result = []

    table_of_power_plants = []

    for current_line in lines_in_file:
        columns = current_line.split(',')
        power_mw = float(columns[2])
        power_name = columns[3]
        power_type = columns[4]
        
        if power_type == power_generation_type:
            table_of_power_plants.append([power_mw, power_name])

    min_mw = min(table_of_power_plants)

    result.append(str(min_mw[0]))

    for row in table_of_power_plants:
        if row[0] <= min_mw[0] + 1:
            result.append(row[1])
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 3
    num_min_correct = 0
    num_min_names = 0
    
    types_to_test = ['Other', 'SteamTurbine', 'GasTurbine', 'CombinedCycle', 'HydraulicTurbine']
    
    for i in range(NUM_TESTS):
        power_type = types_to_test[random.randint(0, len(types_to_test)-1)]
        types_to_test.remove(power_type)
        
        print(""-------------------------"")
        print(""Test"", i+1, ""of"", NUM_TESTS, "":"", power_type)
        print(""-------------------------"")
        
        output, error = autograder.run_script(""a3_7_minpower.py"", [power_type])
        expected_output = solution(power_type)
        student_output = output.strip().split('\n')

        # Determines if the stat is correct
        print(""CHECKING MIN VALUE:"")
        if autograder.equals(student_output[0], expected_output[0]):
            print(""CORRECT\n"")
            num_min_correct += 1
        else:
            print(""INCORRECT\n"")

        # Determines if the names are correct
        print(""CHECKING PLANT NAMES:"")
        num_matches = 0
        
        for item in expected_output[1:]:
            print(""Looking for"", item, "". . . "", end="""")
            if item in student_output[1:]:
                print(""FOUND"")
                num_matches += 1
            else:
                print(""NOT FOUND"")            
        
        if num_matches == len(expected_output[1:]) and len(student_output[1:]) == len(expected_output[1:]):
            print(""CORRECT\n"")
            num_min_names += 1
        elif num_matches == len(expected_output[1:]) and len(student_output[1:]) >= len(expected_output[1:]):
            print(""INCORRECT.  Your program is printing more power plant names than are expected.\n"") 
        else:
            print(""INCORRECT.  Missing"", str(len(expected_output[1:]) - num_matches), ""plant names"")
            
    return round(60 * (num_min_correct / NUM_TESTS) + 40 * (num_min_names / NUM_TESTS), 1)
    

    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
161,a3_7_min_lego,2,lab,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset called <code>legos.csv</code>&nbsp;that contains information about various Lego sets. Here is a typical line from the dataset (each line ends with the newline &ldquo;\n&rdquo; character):</p>
<p>&nbsp;</p>
<p><code>10197-1,Fire Brigade,2009,City,2236</code></p>
<p>&nbsp;</p>
<p>Each position in the line (separated by a comma) represents a different &ldquo;data element,&rdquo; or &ldquo;column.&rdquo; The following table shows how the above line can be interpreted:<br /><br /></p>
<table border=""2"">
<thead>
<tr>
<th>&nbsp;</th>
<th>Set Number</th>
<th>Name</th>
<th>Year</th>
<th>Theme</th>
<th>Number of Parts</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>10197-1</th>
<th>Fire Brigade</th>
<th>2009</th>
<th>City</th>
<th>2236</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python program that asks the user for:</p>
<ul>
<li>A Theme (e.g., ""City"")</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then read the file and print on separate lines:</p>
<ul>
<li>The minimum number of parts in a set of the given theme, and</li>
<li>The names of all Lego sets that are of this <strong>particular theme</strong>, and within 14 (inclusive) of the minimum part count</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td>Input</td>
<td>
<p>Duplo</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>
<p>1<br />Zoo friends</p>
<p>Big Front Loader</p>
<p>Baby Calf</p>
<p>Farm Animals</p>
<p>...</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def solution(set_theme):
    file = open(""legos.csv"", 'r')
    contents = file.read()
    lines_in_file = contents.split('\n')
    result = []

    table_of_lego_sets = []

    for current_line in lines_in_file:
        columns = current_line.split(',')
        set_part_count = float(columns[4])
        set_name = columns[1]
        curr_set_theme = columns[3]
        
        if curr_set_theme == set_theme:
            table_of_lego_sets.append([set_part_count, set_name])

    min_set_count = min(table_of_lego_sets)

    result.append(str(min_set_count[0]))

    for row in table_of_lego_sets:
        if row[0] <= min_set_count[0] + 14:
            result.append(row[1])
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 3
    num_max_correct = 0
    num_max_names = 0
    
    types_to_test = [""Model"", ""Technic"", ""City"", ""Town"", ""Vehicle"", ""Space"", ""Star Wars"", ""Seasonal"", ""Educational"", ""Bionicle""]
    
    for i in range(NUM_TESTS):
        lego_theme = types_to_test[random.randint(0, len(types_to_test)-1)]
        types_to_test.remove(lego_theme)
        
        print(""-------------------------"")
        print(""Test"", i+1, ""of"", NUM_TESTS, "":"", lego_theme)
        print(""-------------------------"")
        
        output, error = autograder.run_script(""a3_7_min_lego.py"", [lego_theme])
        expected_output = solution(lego_theme)
        student_output = output.strip().split('\n')
                
        # Determines if the stat is correct
        print(""CHECKING MIN VALUE:"")
        if autograder.equals(student_output[0], expected_output[0]):
            print(""CORRECT\n"")
            num_max_correct += 1
        else:
            print(""INCORRECT\n"")
        
        # Determines if the names are correct
        print(""CHECKING LEGO SET NAMES:"")
        num_matches = 0
        
        for item in expected_output[1:]:
            print(""Looking for"", item, "". . . "", end="""")
            if item in student_output[1:]:
                print(""FOUND"")
                num_matches += 1
            else:
                print(""NOT FOUND"")            
        
        if num_matches == len(expected_output[1:]) and len(student_output[1:]) == len(expected_output[1:]):
            print(""CORRECT\n"")
            num_max_names += 1
        elif num_matches == len(expected_output[1:]) and len(student_output[1:]) >= len(expected_output[1:]):
            print(""INCORRECT.  Your program is printing more Lego set names than are expected.\n"") 
        else:
            print(""INCORRECT.  Missing"", str(len(expected_output[1:]) - num_matches), ""Lego set names"")
            
            
    return round(60 * (num_max_correct / NUM_TESTS) + 40 * (num_max_names / NUM_TESTS), 1)
    

    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
162,a3_7_maxpower,2,lab,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset called&nbsp;<code>powerplants.csv</code>&nbsp;that contains information about various power production facilities across the nation. Here is a typical line from the dataset (each line ends with the newline &ldquo;\n&rdquo; character):</p>
<p>&nbsp;</p>
<p><code>-121.8601395, 38.01598436, 19, GWFPW2_1_UNIT 1, SteamTurbine</code></p>
<p>&nbsp;</p>
<p>Each position in the line (separated by a comma) represents a different &ldquo;data element,&rdquo; or &ldquo;column.&rdquo; The following table shows how the above line can be interpreted:<br /><br /></p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Longitude</th>
<th>Latitude</th>
<th>Power Output (in MW)</th>
<th>Name</th>
<th>Power Generation Method</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>-<strong>121.8601395</strong></th>
<th>38.01598436</th>
<th>19</th>
<th>GWFPW2<em>1</em>UNIT 1</th>
<th>SteamTurbine</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python program that asks the user for:</p>
<ul>
<li>A power generation method (e.g., &ldquo;SteamTurbine&rdquo;)</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then read the file and print on separate lines:</p>
<ul>
<li>The maximum power output for power plants of this particular type, and</li>
<li>The names of all power plants that are of this <strong>particular type</strong>, and within 15 MW (inclusive) of the maximum power output</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td>Input</td>
<td>
<p>SteamTurbine</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>1164.0<br />DIABLO_7_UNIT 1<br />DIABLO_7_UNIT 2</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def solution(power_generation_type):
    file = open(""powerplants.csv"", 'r')
    contents = file.read()
    lines_in_file = contents.split('\n')
    result = []

    table_of_power_plants = []

    for current_line in lines_in_file:
        columns = current_line.split(',')
        power_mw = float(columns[2])
        power_name = columns[3]
        power_type = columns[4]
        
        if power_type == power_generation_type:
            table_of_power_plants.append([power_mw, power_name])

    max_mw = max(table_of_power_plants)

    result.append(str(max_mw[0]))

    for row in table_of_power_plants:
        if row[0] >= max_mw[0] - 15:
            result.append(row[1])
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 3
    num_max_correct = 0
    num_max_names = 0
    
    types_to_test = ['Other', 'SteamTurbine', 'GasTurbine', 'CombinedCycle', 'HydraulicTurbine']
    
    for i in range(NUM_TESTS):
        power_type = types_to_test[random.randint(0, len(types_to_test)-1)]
        types_to_test.remove(power_type)
        
        print(""-------------------------"")
        print(""Test"", i+1, ""of"", NUM_TESTS, "":"", power_type)
        print(""-------------------------"")
        
        output, error = autograder.run_script(""a3_7_maxpower.py"", [power_type])
        expected_output = solution(power_type)
        student_output = output.strip().split('\n')
                
        # Determines if the stat is correct
        print(""CHECKING MAX VALUE:"")
        if autograder.equals(student_output[0], expected_output[0]):
            print(""CORRECT\n"")
            num_max_correct += 1
        else:
            print(""INCORRECT\n"")
        
        # Determines if the names are correct
        print(""CHECKING PLANT NAMES:"")
        num_matches = 0
        
        for item in expected_output[1:]:
            print(""Looking for"", item, "". . . "", end="""")
            if item in student_output[1:]:
                print(""FOUND"")
                num_matches += 1
            else:
                print(""NOT FOUND"")            
        
        if num_matches == len(expected_output[1:]) and len(student_output[1:]) == len(expected_output[1:]):
            print(""CORRECT\n"")
            num_max_names += 1
        elif num_matches == len(expected_output[1:]) and len(student_output[1:]) >= len(expected_output[1:]):
            print(""INCORRECT.  Your program is printing more power plant names than are expected.\n"") 
        else:
            print(""INCORRECT.  Missing"", str(len(expected_output[1:]) - num_matches), ""plant names"")
            
    return round(60 * (num_max_correct / NUM_TESTS) + 40 * (num_max_names / NUM_TESTS), 1)
    
# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
163,a3_7_max,2,lab,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset called&nbsp;<code>powerplants.csv</code>&nbsp;that contains information about various power production facilities across the nation. Here is a typical line from the dataset (each line ends with the newline &ldquo;\n&rdquo; character):</p>
<p>&nbsp;</p>
<p><code>-121.8601395, 38.01598436, 19, GWFPW2_1_UNIT 1, SteamTurbine</code></p>
<p>&nbsp;</p>
<p>Each position in the line (separated by a comma) represents a different &ldquo;data element,&rdquo; or &ldquo;column.&rdquo; The following table shows how the above line can be interpreted:<br /><br /></p>
<table border=""2"">
<thead>
<tr>
<th>&nbsp;</th>
<th>Longitude</th>
<th>Latitude</th>
<th>Power Output (in MW)</th>
<th>Name</th>
<th>Power Generation Method</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>-<strong>121.8601395</strong></th>
<th>38.01598436</th>
<th>19</th>
<th>GWFPW2<em>1</em>UNIT 1</th>
<th>SteamTurbine</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python program that asks the user for:</p>
<ul>
<li>A power generation method (e.g., &ldquo;SteamTurbine&rdquo;)</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then read the file and print on separate lines:</p>
<ul>
<li>The maximum power output for power plants of this particular type, and</li>
<li>The names of all power plants that are of this <strong>particular type</strong>, and within 8 MW (inclusive) of the maximum power output</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td>Input</td>
<td>
<p>SteamTurbine</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>1164.0<br />DIABLO_7_UNIT 1<br />DIABLO_7_UNIT 2</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def solution(power_generation_type):
    file = open(""powerplants.csv"", 'r')
    contents = file.read()
    lines_in_file = contents.split('\n')
    result = []

    table_of_power_plants = []

    for current_line in lines_in_file:
        columns = current_line.split(',')
        power_mw = float(columns[2])
        power_name = columns[3]
        power_type = columns[4]
        
        if power_type == power_generation_type:
            table_of_power_plants.append([power_mw, power_name])

    max_mw = max(table_of_power_plants)

    result.append(str(max_mw[0]))

    for row in table_of_power_plants:
        if row[0] >= max_mw[0] - 8:
            result.append(row[1])
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 3
    num_max_correct = 0
    num_max_names = 0
    
    types_to_test = ['Other', 'SteamTurbine', 'GasTurbine', 'CombinedCycle', 'HydraulicTurbine']
    
    for i in range(NUM_TESTS):
        power_type = types_to_test[random.randint(0, len(types_to_test)-1)]
        types_to_test.remove(power_type)
        
        print(""-------------------------"")
        print(""Test"", i+1, ""of"", NUM_TESTS, "":"", power_type)
        print(""-------------------------"")
        
        output, error = autograder.run_script(""a3_7_max.py"", [power_type])
        expected_output = solution(power_type)
        student_output = output.strip().split('\n')
                
        # Determines if the stat is correct
        print(""CHECKING MAX VALUE:"")
        if autograder.equals(student_output[0], expected_output[0]):
            print(""CORRECT\n"")
            num_max_correct += 1
        else:
            print(""INCORRECT\n"")
        
        # Determines if the names are correct
        print(""CHECKING PLANT NAMES:"")
        num_matches = 0
        
        for item in expected_output[1:]:
            print(""Looking for"", item, "". . . "", end="""")
            if item in student_output[1:]:
                print(""FOUND"")
                num_matches += 1
            else:
                print(""NOT FOUND"")            
        
        if num_matches == len(expected_output[1:]) and len(student_output[1:]) == len(expected_output[1:]):
            print(""CORRECT\n"")
            num_max_names += 1
        elif num_matches == len(expected_output[1:]) and len(student_output[1:]) >= len(expected_output[1:]):
            print(""INCORRECT.  Your program is printing more power plant names than are expected.\n"") 
        else:
            print(""INCORRECT.  Missing"", str(len(expected_output[1:]) - num_matches), ""plant names"")
            
            
    return round(60 * (num_max_correct / NUM_TESTS) + 40 * (num_max_names / NUM_TESTS), 1)
    

    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
164,a3_7_max_lego,2,lab,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset called <code>legos.csv</code>&nbsp;that contains information about various Lego sets. Here is a typical line from the dataset (each line ends with the newline &ldquo;\n&rdquo; character):</p>
<p>&nbsp;</p>
<p><code>10197-1,Fire Brigade,2009,City,2236</code></p>
<p>&nbsp;</p>
<p>Each position in the line (separated by a comma) represents a different &ldquo;data element,&rdquo; or &ldquo;column.&rdquo; The following table shows how the above line can be interpreted:<br /><br /></p>
<table border=""2"">
<thead>
<tr>
<th>&nbsp;</th>
<th>Set Number</th>
<th>Name</th>
<th>Year</th>
<th>Theme</th>
<th>Number of Parts</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>10197-1</th>
<th>Fire Brigade</th>
<th>2009</th>
<th>City</th>
<th>2236</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python program that asks the user for:</p>
<ul>
<li>A Theme (e.g., ""City"")</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then read the file and print on separate lines:</p>
<ul>
<li>The maximum number of parts in a set of the given theme, and</li>
<li>The names of all Lego sets that are of this <strong>particular theme</strong>, and within 150 (inclusive) of the maximum part count</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td>Input</td>
<td>
<p>Duplo</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>
<p>250</p>
<p>XXL 250 Canister</p>
<p>Giant Tower</p>
<p>Large Creative Box</p>
<p>Around the World</p>
<p>...</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def solution(set_theme):
    file = open(""legos.csv"", 'r')
    contents = file.read()
    lines_in_file = contents.split('\n')
    result = []

    table_of_lego_sets = []

    for current_line in lines_in_file:
        columns = current_line.split(',')
        set_part_count = float(columns[4])
        set_name = columns[1]
        curr_set_theme = columns[3]
        
        if curr_set_theme == set_theme:
            table_of_lego_sets.append([set_part_count, set_name])

    max_set_count = max(table_of_lego_sets)

    result.append(str(max_set_count[0]))

    for row in table_of_lego_sets:
        if row[0] >= max_set_count[0] - 150:
            result.append(row[1])
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 3
    num_max_correct = 0
    num_max_names = 0
    
    types_to_test = [""Model"", ""Technic"", ""City"", ""Town"", ""Vehicle"", ""Space"", ""Star Wars"", ""Seasonal"", ""Educational"", ""Bionicle""]
    
    for i in range(NUM_TESTS):
        lego_theme = types_to_test[random.randint(0, len(types_to_test)-1)]
        types_to_test.remove(lego_theme)
        
        print(""-------------------------"")
        print(""Test"", i+1, ""of"", NUM_TESTS, "":"", lego_theme)
        print(""-------------------------"")
        
        output, error = autograder.run_script(""a3_7_max_lego.py"", [lego_theme])
        expected_output = solution(lego_theme)
        student_output = output.strip().split('\n')
                
        # Determines if the stat is correct
        print(""CHECKING MAX VALUE:"")
        if autograder.equals(student_output[0], expected_output[0]):
            print(""CORRECT\n"")
            num_max_correct += 1
        else:
            print(""INCORRECT\n"")
        
        # Determines if the names are correct
        print(""CHECKING LEGO SET NAMES:"")
        num_matches = 0
        
        for item in expected_output[1:]:
            print(""Looking for"", item, "". . . "", end="""")
            if item in student_output[1:]:
                print(""FOUND"")
                num_matches += 1
            else:
                print(""NOT FOUND"")            
        
        if num_matches == len(expected_output[1:]) and len(student_output[1:]) == len(expected_output[1:]):
            print(""CORRECT\n"")
            num_max_names += 1
        elif num_matches == len(expected_output[1:]) and len(student_output[1:]) >= len(expected_output[1:]):
            print(""INCORRECT.  Your program is printing more Lego set names than are expected.\n"") 
        else:
            print(""INCORRECT.  Missing"", str(len(expected_output[1:]) - num_matches), ""Lego set names"")
            
            
    return round(60 * (num_max_correct / NUM_TESTS) + 40 * (num_max_names / NUM_TESTS), 1)
    

    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
165,a3_6_tests,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been asked to write a program that analyzes scores of a recent test given to a class. Write a program that gets from the user the number of tests scored, and gets that many test scores (which you may assume are whole numbers) from the user. Your program must print out:</p>
<ul>
<li>The average score of all tests.</li>
<li>The count of tests that scored lower than the average.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>3<br />75<br />90<br />88<br /><br /><br /></td>
<td>5<br />86<br />79<br />90<br />90<br />100</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>84.3<br />1</td>
<td>89.0<br />2</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_tests.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
166,a3_6_sami,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been asked to write a program that analyzes the cadet wing's performance on a recent SAMI. Write a program that gets from the user the number of squadrons scored, and gets that many squadron SAMI scores (which you may assume are whole numbers) from the user. Your program must print out:</p>
<ul>
<li>The average score of all squadrons.</li>
<li>The count of squadrons that scored higher than the average.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>3<br />75<br />90<br />88<br /><br /><br /></td>
<td>5<br />86<br />79<br />90<br />90<br />100</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>84.3<br />2</td>
<td>89.0<br />3</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_sami.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
167,a3_6_pushups,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been asked to write a program that analyzes number of pushups done by a group of cadets. Write a program that gets from the user the number of people tested, and gets that many pushup scores (which you may assume are whole numbers) from the user. Your program must print out:</p>
<ul>
<li>The average number of pushups for the group.</li>
<li>The count of cadets that scored higher than the average.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>3<br />75<br />90<br />88<br /><br /><br /></td>
<td>5<br />86<br />79<br />90<br />90<br />100</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>84.3<br />2</td>
<td>89.0<br />3</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_pushups.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
168,a3_6_missiletest,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been asked to write a program that analyzes the results acquired from several missile tests executed last week. Write a program that gets from the user the number missile tests preformed, and gets the result from each test (which you may assume are whole numbers) from the user. Your program must print out:</p>
<ul>
<li>The average result for the missile tests.</li>
<li>The count of missile tests that scored above the average.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>3<br />350<br />410<br />256<br /><br /><br /></td>
<td>5<br />178<br />98<br />200<br />200<br />154</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>338.7<br />2</td>
<td>166.0<br />3</td>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_missiletest.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
        if base_script == ""flighttest"" and score < average:
            count += 1
        if base_script == ""missiletest"" and score > average:
            count += 1
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
169,a3_6_flighttest,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been asked to write a program that analyzes the results acquired from several flight tests executed last week. Write a program that gets from the user the number flight tests preformed, and gets the result from each flight (which you may assume are whole numbers) from the user. Your program must print out:</p>
<ul>
<li>The average result for the flight tests.</li>
<li>The count of flight tests that scored below the average.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>3<br />350<br />410<br />256<br /><br /><br /></td>
<td>5<br />178<br />98<br />200<br />200<br />154</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>338.7<br />1</td>
<td>166.0<br />2</td>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_flighttest.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
        if base_script == ""flighttest"" and score < average:
            count += 1
        
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
170,a3_5_star_map,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a table that describes a simple night sky. In this code, a list (<code>simple_map</code>) is populated with characters representing the location of various astronomical entities (stars, planets, etc).</p>
<p>&nbsp;</p>
<pre>S = Star; St = Satellite; M = Moon; P = Planet; C = Comet; _ = No Major Feature</pre>
<p>&nbsp;</p>
<p>Write a program that gets two values from the user in the following order:</p>
<p>1) a row, a 1 indicates the Top row and 8 the Bottom row</p>
<p>2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column</p>
<p>&nbsp;</p>
<p>Finally, <strong>Print </strong>out the contents of the table at that particular cell.</p>
<p>&nbsp;</p>
<p> </p>
<p><strong>HINT:</strong></p>
<ul>
<li>Your output should be one of the following letters: ""S"", ""St"", ""M"", ""P"", ""C"", or ""_""</li>
</ul>
</div>
","import random
from cs110 import autograder

simple_map = [['M', 'C', '_', '_', '_', '_', 'M', 'P'],
              ['S', 'M', '_', '_', 'P', 'M', 'St', 'St'],
              ['C', '_', '_', 'P', 'M', 'M', 'S', 'M'],
              ['C', 'C', '_', 'C', '_', 'S', '_', 'P'],
              ['M', 'St', '_', 'St', '_', '_', 'P', 'S'],
              ['_', '_', '_', '_', '_', '_', '_', '_'],
              ['_', 'M', '_', '_', 'M', '_', '_', 'S'],
              ['_', '_', '_', '_', 'St', 'St', 'P', 'P']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row+1, col+1))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_star_map.py"", [row+1, col+1])

    if simple_map[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", simple_map[row][col], ""\n"")
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0

    if (check_location(0,
                       1)):
        score += 20

    if (check_location(1,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(7,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    return score


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
star_map = [['M', 'C', '_', '_', '_', '_', 'M', 'P'],
              ['S', 'M', '_', '_', 'P', 'M', 'St', 'St'],
              ['C', '_', '_', 'P', 'M', 'M', 'S', 'M'],
              ['C', 'C', '_', 'C', '_', 'S', '_', 'P'],
              ['M', 'St', '_', 'St', '_', '_', 'P', 'S'],
              ['_', '_', '_', '_', '_', '_', '_', '_'],
              ['_', 'M', '_', '_', 'M', '_', '_', 'S'],
              ['_', '_', '_', '_', 'St', 'St', 'P', 'P']]

#Your code goes here."
171,a3_5_map,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a table that describes a simple landscape. In this code, a list (<code>simple_map</code>) is populated with characters representing the location of various landmarks (Road, Water, Trees, Stones, Mud).</p>
<p>&nbsp;</p>
<pre>R = Road; W = Water; T = Trees; S = Stones; M = Mud; _ = Grass</pre>
<p>&nbsp;</p>
<p>Write a program that gets two values from the user in the following order:</p>
<p>1) a row, a 1 indicates the Top row and 8 the Bottom row</p>
<p>2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column</p>
<p>&nbsp;</p>
<p>Finally,&nbsp;<strong>Print&nbsp;</strong>out the contents of the table at that particular cell.</p>
<p>&nbsp;</p>
<p> </p>
<p><strong>HINT:</strong></p>
<ul>
<li>Your output should be one of the following letters: ""R"", ""W"", ""T"", ""S"", ""M"", or ""_""</li>
</ul>
</div>
","import random
from cs110 import autograder

simple_map = [['_', 'T', '_', '_', '_', 'R', '_', '_'],
              ['_', '_', 'T', 'S', 'B', 'R', '_', '_'],
              ['W', '_', '_', '_', '_', '_', 'R', '_'],
              ['W', 'W', 'S', '_', '_', 'B', '_', '_'],
              ['W', '_', '_', 'S', '_', '_', 'B', 'R'],
              ['_', '_', '_', '_', '_', 'T', '_', '_'],
              ['_', '_', '_', '_', '_', '_', 'T', '_'],
              ['R', 'R', 'R', 'R', 'R', '_', '_', '_']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row+1, col+1))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_map.py"", [row+1, col+1])

    if simple_map[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", simple_map[row][col], ""\n"")
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0

    if (check_location(0,
                       1)):
        score += 20

    if (check_location(1,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(7,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    return score
# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
simple_map = [['_', 'T', '_', '_', '_', 'R', '_', '_'],
                    ['_', '_', 'T', 'S', 'B', 'R', '_', '_'],
                    ['W', '_', '_', '_', '_', '_', 'R', '_'],
                    ['W', 'W', 'S', '_', '_', 'B', '_', '_'],
                    ['W', '_', '_', 'S', '_', '_', 'B', 'R'],
                    ['_', '_', '_', '_', '_', 'T', '_', '_'],
                    ['_', '_', '_', '_', '_', '_', 'T', '_'],
                    ['R', 'R', 'R', 'R', 'R', '_', '_', '_']]

#Your code goes here."
172,a3_5_chess,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a table that describes a chess board. In this code, a list (<code>chess_board</code>) is populated with characters representing the location of each of the pieces(Rook, Knight, Bishop,King,Queen,Pawn).</p>
<p>&nbsp;</p>
<pre>R = Rook; N = Knight; B = Bishop; K = King; Q = Queen; P = pawn; _ = Empty</pre>
<p>&nbsp;</p>
<p>Write a program that gets two values from the user in the following order:</p>
<p>1) a row, a 1 indicates the Top row and 8 the Bottom row</p>
<p>2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column</p>
<p>&nbsp;</p>
<p>Finally,&nbsp;<strong>Print&nbsp;</strong>out the contents of the table at that particular cell.</p>
<p>&nbsp;</p>
<p> </p>
<p><strong>HINT:</strong></p>
<ul>
<li>Your output should be one of the following letters: ""R"", ""N"", ""B"", ""K"", ""Q"", ""P"", or ""_""</li>
</ul>
</div>
","import random
from cs110 import autograder

chess_board = [['R', 'N', '_', 'K', '_', 'B', 'N', 'R'],
               ['p', 'p', 'p', '_', 'p', 'p', 'p', 'p'],
               ['_', '_', 'Q', '_', '_', '_', '_', '_'],
               ['_', '_', '_', 'p', '_', 'B', '_', '_'],
               ['_', '_', '_', 'p', '_', '_', '_', '_'],
               ['_', '_', '_', '_', 'p', '_', '_', '_'],
               ['p', 'p', 'p', '_', '_', 'p', 'p', 'p'],
               ['R', 'N', 'B', 'K', 'Q', 'B', 'N', 'R']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row+1, col+1))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_chess.py"", [row+1, col+1])

    if chess_board[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", chess_board[row][col], ""\n"")
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0

    if (check_location(0,
                       2)):
        score += 20

    if (check_location(1,
                       random.randint(0, len(chess_board[0])-1))):
        score += 20

    if (check_location(7,
                       random.randint(0, len(chess_board[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(chess_board)-1),
                       random.randint(0, len(chess_board[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(chess_board)-1),
                       random.randint(0, len(chess_board[0])-1))):
        score += 20

    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
chess_board =      [['R', 'N', '_', 'K', '_', 'B', 'N', 'R'],
                    ['p', 'p', 'p', '_', 'p', 'p', 'p', 'p'],
                    ['_', '_', 'Q', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', 'p', '_', 'B', '_', '_'],
                    ['_', '_', '_', 'p', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', 'p', '_', '_', '_'],
                    ['p', 'p', 'p', '_', '_', 'p', 'p', 'p'],
                    ['R', 'N', 'B', 'K', 'Q', 'B', 'N', 'R']]

#Your code goes here."
173,a3_5_carnival,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a table that describes a simple carnival ring toss. In this code, a list (<code>simple_map</code>) is populated with characters representing the colors of the bottles.</p>
<p>&nbsp;</p>
<pre>G = Green; B = Blue; P = Purple; R = Red; O = Orange; _ = Clear</pre>
<p>&nbsp;</p>
<p>Write a program that gets two values from the user in the following order:</p>
<p>1) a row, a 1 indicates the Top row and 8 the Bottom row</p>
<p>2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column</p>
<p>&nbsp;</p>
<p>Finally,&nbsp;<strong>Print&nbsp;</strong>out the contents of the table at that particular cell.</p>
<p>&nbsp;</p>
<p> </p>
<p><strong>HINT:</strong></p>
<ul>
<li>Your output should be one of the following letters: ""G"", ""B"", ""P"", ""R"", ""O"", or ""_""</li>
</ul>
</div>
","import random
from cs110 import autograder

simple_map = [['O', '_', '_', 'P', '_', 'R', '_', 'G'],
              ['R', 'O', '_', '_', '_', 'P', '_', '_'],
              ['_', '_', 'O', '_', '_', 'O', 'P', '_'],
              ['R', '_', 'G', '_', '_', '_', '_', 'P'],
              ['B', '_', '_', '_', '_', '_', '_', 'P'],
              ['G', 'R', 'P', 'O', 'O', '_', '_', 'G'],
              ['P', '_', '_', '_', '_', 'G', 'B', '_'],
              ['B', 'R', 'G', 'B', '_', 'G', 'B', 'G']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row+1, col+1))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_carnival.py"", [row+1, col+1])

    if simple_map[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", simple_map[row][col], ""\n"")
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0

    if (check_location(0,
                       3)):
        score += 20

    if (check_location(1,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(7,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
simple_map = [['O', '_', '_', 'P', '_', 'R', '_', 'G'],
              ['R', 'O', '_', '_', '_', 'P', '_', '_'],
              ['_', '_', 'O', '_', '_', 'O', 'P', '_'],
              ['R', '_', 'G', '_', '_', '_', '_', 'P'],
              ['B', '_', '_', '_', '_', '_', '_', 'P'],
              ['G', 'R', 'P', 'O', 'O', '_', '_', 'G'],
              ['P', '_', '_', '_', '_', 'G', 'B', '_'],
              ['B', 'R', 'G', 'B', '_', 'G', 'B', 'G']]

#Your code goes here."
174,a3_5_battleship,2,skill,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a table that describes the board game, Battleship. In this code, a list (<code>battleship_board</code>) is populated with characters representing the location of each of the game&rsquo;s ship types (Carrier, Battleship, Submarine, Cruiser, and Destroyer).</p>
<p>&nbsp;</p>
<pre>C = Carrier; B = Battleship; S = Submarine; R = Cruiser; D = Destroyer; _ = Blank</pre>
<p>&nbsp;</p>
<p>Write a program that gets two values from the user in the following order:</p>
<p>1) a row, a 1 indicates the Top row and 8 the Bottom row</p>
<p>2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column</p>
<p>&nbsp;</p>
<p>Finally,&nbsp;<strong>Print&nbsp;</strong>out the contents of the table at that particular cell.</p>
<p>&nbsp;</p>
<p><strong>HINT:</strong></p>
<ul>
<li>Your output should be one of the following letters: ""C"", ""B"", ""S"", ""R"", ""D"", or ""_""</li>
</ul>
</div>
","import random
from cs110 import autograder

battleship_board = [['_', '_', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', 'C', 'S', 'S', 'S', '_', '_'],
                    ['D', 'D', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', '_', 'R', 'R', 'R'],
                    ['_', '_', '_', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', '_', '_', '_', '_'],
                    ['_', 'B', 'B', 'B', 'B', '_', '_', '_']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row+1, col+1))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_battleship.py"", [row+1, col+1])

    if battleship_board[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", battleship_board[row][col], ""\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    if check_location(0, 2):
        score += 20
    if check_location(1, random.randint(0, len(battleship_board[0])-1)):
        score += 20
    if check_location(7, random.randint(0, len(battleship_board[0])-1)):
        score += 20
    if check_location(random.randint(0, len(battleship_board)-1),
                      random.randint(0, len(battleship_board[0])-1)):
        score += 20
    if check_location(random.randint(0, len(battleship_board)-1),
                      random.randint(0, len(battleship_board[0])-1)):
        score += 20
    return score


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
battleship_board = [['_', '_', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', 'C', 'S', 'S', 'S', '_', '_'],
                    ['D', 'D', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', '_', 'R', 'R', 'R'],
                    ['_', '_', '_', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', '_', '_', '_', '_'],
                    ['_', 'B', 'B', 'B', 'B', '_', '_', '_']]

#Your code goes here."
175,a3_4_weights,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called list_of_weights. Write a program that prints out the range (<em>i.e.,&nbsp;</em>the difference between the max and min weight)</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the values: 103, 110, 115</p>
<p>Your program should print:</p>
<pre>12</pre>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_weights.py""


list_of_weights = [100, 369, 115, 284, 267, 122, 367, 361,
                   215, 358, 339, 324, 105, 185, 175, 120,
                   267, 184, 108, 309, 366, 218, 179, 338,
                   313, 370, 245, 390, 102, 126]

max_value = max(list_of_weights) 
min_value = min(list_of_weights)

def verify_code():
    print(""Test 1:  Scanning your solution . . . "", end='')
    
    file = open(STUDENT_FILE, ""r"")
    contents = file.read()
        
    if ""for"" not in contents and ""while"" not in contents and ""max"" not in contents and ""min"" not in contents and ""sort"" not in contents:
        print(""Could not find code that gets the heaviest and lightest weights . . ."")
        return False
    
    print(""Good. You are actually computing the answer."")
    return True



# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if verify_code():
        print(""Test 2:  Checking Output . . . "", end='')
        score += 60
        
        if len(lines) >= 1:           
            if autograder.equals(lines[0], max_value - min_value):
                print(""Range Look Good!"")
                score += 40
            else:
                print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
                
        else:
            print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
176,a3_4_run,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called list_of_run_times. Write a program that prints out the range (<em>i.e.,&nbsp;</em>the difference between the max and min run time)</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the values: 3, 10, 15</p>
<p>Your program should print:</p>
<pre>12</pre>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_run.py""

list_of_run_times = [42.5, 44.2, 42.5, 45.8, 40.8, 42.4, 44.6, 36.5, 44.4,
                     35.1, 40.4, 47.1, 48.0, 37.0, 46.0, 44.5, 37.3, 42.4,
                     43.5, 41.6, 41.8, 47.6, 40.4, 35.0, 38.7, 39.5, 42.0,
                     39.6, 41.1, 37.6]

max_value = max(list_of_run_times) 
min_value = min(list_of_run_times)

def verify_code():
    print(""Test 1:  Scanning your solution . . . "", end='')
    
    file = open(STUDENT_FILE, ""r"")
    contents = file.read()
        
    if ""for"" not in contents and ""while"" not in contents and ""max"" not in contents and ""min"" not in contents and ""sort"" not in contents:
        print(""Could not find code that gets the fastest and slowest run times . . ."")
        return False
    
    print(""Good. You are actually computing the answer."")
    return True



# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if verify_code():
        print(""Test 2:  Checking Output . . . "", end='')
        score += 60
        
        if len(lines) >= 1:           
            if autograder.equals(lines[0], max_value - min_value):
                print(""Range Look Good!"")
                score += 40
            else:
                print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
                
        else:
            print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
177,a3_4_ptscores,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called list_of_pt_scores. Write a program that prints out the range (<em>i.e.,&nbsp;</em>the difference between the max and min pt scores)</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the values: 3, 10, 15</p>
<p>Your program should print:</p>
<pre>12</pre>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_ptscores.py""

list_of_pt_scores = [98.6,78.5,100,67.7,88,72.6,45,82.5,86.5,79.9,100,98.6,99,55.4,94.5,91.2,90,79.5]

max_value = max(list_of_pt_scores) 
min_value = min(list_of_pt_scores)

def verify_code():
    print(""Test 1:  Scanning your solution . . . "", end='')
    
    file = open(STUDENT_FILE, ""r"")
    contents = file.read()
        
    if ""for"" not in contents and ""while"" not in contents and ""max"" not in contents and ""min"" not in contents and ""sort"" not in contents:
        print(""Could not find code that gets the highest and lowest pt scores . . ."")
        return False
    
    print(""Good. You are actually computing the answer."")
    return True



# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if verify_code():
        print(""Test 2:  Checking Output . . . "", end='')
        score += 60
        
        if len(lines) >= 1:           
            if autograder.equals(lines[0], max_value - min_value):
                print(""Range Look Good!"")
                score += 40
            else:
                print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
                
        else:
            print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
178,a3_4_ages,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called list_of_ages. Write a program that prints out the range (<em>i.e.,&nbsp;</em>the difference between the max and min ages)</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the values: 50, 64, 72</p>
<p>Your program should print:</p>
<pre>22</pre>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_ages.py""

list_of_ages = [58, 79, 69, 87, 93, 70, 49, 82, 53, 67, 80, 61, 61,
                     83, 72, 80, 88, 89, 59, 77, 66, 82, 56, 59, 86, 74,
                     61, 45, 70, 67]

max_value = max(list_of_ages) 
min_value = min(list_of_ages)

def verify_code():
    print(""Test 1:  Scanning your solution . . . "", end='')
    
    file = open(STUDENT_FILE, ""r"")
    contents = file.read()
        
    if ""for"" not in contents and ""while"" not in contents and ""max"" not in contents and ""min"" not in contents and ""sort"" not in contents:
        print(""Could not find code that gets the youngest and oldest ages . . ."")
        return False
    
    print(""Good. You are actually computing the answer."")
    return True



# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if verify_code():
        print(""Test 2:  Checking Output . . . "", end='')
        score += 60
        
        if len(lines) >= 1:           
            if autograder.equals(lines[0], max_value - min_value):
                print(""Range Look Good!"")
                score += 40
            else:
                print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
                
        else:
            print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
179,a3_3_ships,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called&nbsp;<code>list_of_ship_classes</code>. Write a program that prints out each of the items in this list (one item per line). </p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the items: ""A"", ""B"", ""C""</p>
<p>Your program should print:</p>
<pre>A<br />B<br />C</pre>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You must use a loop to complete this task. </li>
</ul>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

list_of_ship_classes = ['Ford', 'Ticonderoga', 'Arleigh Burke', 'Virginia', 'Zumwalt', 'Hamilton', 'Legend']

def solution():
    result = []
    
    for item in list_of_ship_classes:
        result.append(item)
    
    return result
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""a3_3_ships.py"", [])
    expected_output = solution()
    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    return round(100 / len(expected_output) * num_matches, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_ship_classes = ['Ford', 'Ticonderoga', 'Arleigh Burke', 'Virginia', 'Zumwalt', 'REDACTED_NAME', 'Legend']

#Your code goes here."
180,a3_3_pizza,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called&nbsp;<code>list_of_pizza_toppings</code>. Write a program that prints out each of the items in this list (one item per line). </p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the items: ""A"", ""B"", ""C""</p>
<p>Your program should print:</p>
<pre>A<br />B<br />C</pre>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You must use a loop to complete this task. </li>
</ul>
</div>
","from cs110 import autograder
import random, math

list_of_pizza_toppings = ['Pepporoni', 'Sausage', 'Onion', 'Mushroom', 'Peppers', 'Chicken', 'Hamburger']

def solution():
    result = []
    
    for item in list_of_pizza_toppings:
        result.append(item)
    
    return result
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""a3_3_pizza.py"", [])
    expected_output = solution()
    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    return round(100 / len(expected_output) * num_matches, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_pizza_toppings = ['Pepporoni', 'Sausage', 'Onion', 'Mushroom', 'Peppers', 'Chicken', 'Hamburger']

#Your code goes here."
181,a3_3_aircraft,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called&nbsp;<code>list_of_aircraft_classes</code>. Write a program that prints out each of the items in this list (one item per line). </p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the items: ""A"", ""B"", ""C""</p>
<p>Your program should print:</p>
<pre>A<br />B<br />C</pre>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You must use a loop to complete this task. </li>
</ul>
</div>
","from cs110 import autograder
import random, math

list_of_aircraft_classes = ['Attack','Cargo','Drone', 'Fighter', 'Unmanned','Trainer','Tanker']

def solution():
    result = []
    
    for item in list_of_aircraft_classes:
        result.append(item)
    
    return result
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""a3_3_aircraft.py"", [])
    expected_output = solution()
    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    return round(100 / len(expected_output) * num_matches, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_aircraft_classes = ['Attack','Cargo','Drone', 'Fighter', 'Unmanned','Trainer','Tanker']

#Your code goes here."
182,a3_2_jets,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called&nbsp;<code>list_of_aircraft</code>. Write a program that gets two aircraft designator names from the user. Then append the aircraft (in the same order they were provided) to the list.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>Do not touch the code we provide you. Otherwise, the test cases will not work.</li>
</ul>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

list_of_aircraft = ['F-16', 'F-15', 'F-22', 'F-35', 'B-1', 'B-2']
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(list_of_aircraft)-2), len(list_of_aircraft)]
    score = 0

    new_aircraft = ['C-5', 'C-130', 'AC-130', 'U-2', 'KC-135', ""F-105"", ""C-21""]
    
    random_ac1 = new_aircraft[random.randint(0, len(new_aircraft)-1)]
    new_aircraft.remove(random_ac1)
    random_ac2 = new_aircraft[random.randint(0, len(new_aircraft)-1)]
    
    list_of_aircraft.append(random_ac1)
    list_of_aircraft.append(random_ac2)

    output, error = autograder.run_script(""a3_2_jets.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')
    
    if lines[len(lines)-2].strip() == list_of_aircraft[len(list_of_aircraft)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())
    
    if lines[len(lines)-1].strip() == list_of_aircraft[len(list_of_aircraft)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
183,a3_2_grammys,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called <code>grammy_list</code>. Write a program that gets two new Grammy awards categories from the user. Then append the categories (in the same order they were provided) to the list.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>Do not touch the code we provide you. Otherwise, the test cases will not work.</li>
</ul>
</div>
","from cs110 import autograder
import random, math

grammy_list = ['Pop', 'Global', 'Rock', 'Rap', 'Jazz', 'R&B', 'Comedy']

             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(grammy_list)-2), len(grammy_list)]
    score = 0

    new_categories = [""Dance"", ""Country"", ""Classical"", ""Gospel"", ""Alternative"", ""Soundtrack"", ""Instrumental"", ""Latin"", ""Reggae""]
    
    random_ac1 = new_categories[random.randint(0, len(new_categories)-1)]
    new_categories.remove(random_ac1)
    random_ac2 = new_categories[random.randint(0, len(new_categories)-1)]
    
    grammy_list.append(random_ac1)
    grammy_list.append(random_ac2)

    output, error = autograder.run_script(""a3_2_grammys.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')
    
    if lines[len(lines)-2].strip() == grammy_list[len(grammy_list)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())
    
    if lines[len(lines)-1].strip() == grammy_list[len(grammy_list)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
184,a3_2_departments,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called&nbsp;<code>department_list</code>. Write a program that gets two new departments from the user. Then append the departments (in the same order they were provided) to the list.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>Do not touch the code we provide you. Otherwise, the test cases will not work.</li>
</ul>
</div>
","from cs110 import autograder
import random, math

department_list = ['Science','Engineering','Humanities','Social Science']

             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(department_list)-2), len(department_list)]
    score = 0

    new_departments = ['Education', 'E-Sports', '8-Bit Gaming', 'Midi Music', 'General Studies', ""Deep Space"", ""Department of Motor Vehicles""]
    
    random_ac1 = new_departments[random.randint(0, len(new_departments)-1)]
    new_departments.remove(random_ac1)
    random_ac2 = new_departments[random.randint(0, len(new_departments)-1)]
    
    department_list.append(random_ac1)
    department_list.append(random_ac2)

    output, error = autograder.run_script(""a3_2_departments.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')
    
    if lines[len(lines)-2].strip() == department_list[len(department_list)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())
    
    if lines[len(lines)-1].strip() == department_list[len(department_list)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
185,a3_2_cities,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called <code>list_of_cities</code>. Write a program that gets two new cities from the user. Then append the cities (in the same order they were provided) to the list.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>Do not touch the code we provide you. Otherwise, the test cases will not work.</li>
</ul>
</div>
","from cs110 import autograder
import random, math

list_of_cities = ['Tokyo', 'Delhi', 'Shanghai', 'Cairo', 'Mumbai', 'Bejing', 'Dhaka']

             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(list_of_cities)-2), len(list_of_cities)]
    score = 0

    new_cities = [""Osaka"", ""Karachi"", ""Istanbul"", ""Kolkata"", ""Manila"", ""Lagos"", ""Moscow"", ""Lahore"", ""Paris""]
    
    random_ac1 = new_cities[random.randint(0, len(new_cities)-1)]
    new_cities.remove(random_ac1)
    random_ac2 = new_cities[random.randint(0, len(new_cities)-1)]
    
    list_of_cities.append(random_ac1)
    list_of_cities.append(random_ac2)

    output, error = autograder.run_script(""a3_2_cities.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')
    
    if lines[len(lines)-2].strip() == list_of_cities[len(list_of_cities)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())
    
    if lines[len(lines)-1].strip() == list_of_cities[len(list_of_cities)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
186,a3_2_cars,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called <code>list_of_cars</code>. Write a program that gets two new cars from the user. Then append the cars (in the same order they were provided) to the list.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>Do not touch the code we provide you. Otherwise, the test cases will not work.</li>
</ul>
</div>
","from cs110 import autograder
import random, math

list_of_cars = ['Viper', 'Highlander', 'Audi A8', 'Tundra', 'Porsche', 'Mazada', 'Fiesta']

             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(list_of_cars)-2), len(list_of_cars)]
    score = 0

    new_cars = [""Ford"", ""Maserati"", ""BMW"", ""Cheetah"", ""Scion"", ""Lambo"", ""Pilot"", ""Civic"", ""Corolla""]
    
    random_ac1 = new_cars[random.randint(0, len(new_cars)-1)]
    new_cars.remove(random_ac1)
    random_ac2 = new_cars[random.randint(0, len(new_cars)-1)]
    
    list_of_cars.append(random_ac1)
    list_of_cars.append(random_ac2)

    output, error = autograder.run_script(""a3_2_cars.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')
    
    if lines[len(lines)-2].strip() == list_of_cars[len(list_of_cars)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())
    
    if lines[len(lines)-1].strip() == list_of_cars[len(list_of_cars)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
187,a3_1_medals,2,skill,1,"<div>
<p><strong>PROBLEM STATEMENT: <br /></strong></p>
<p>You have been provided with a list called&nbsp;<code>list_of_medals</code> that contains the current Air Force and Space Force approved decorations. Write a program that prints a single, specified decoration from the list. Your program shall take a number via user input used to identify which decoration to print. For example, if the user types a 3, you should print out the third item.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)</li>
</ul>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

soln_list = [
                    'Congressional Medal of Honor', 'Air Force Cross',	'Air Force Distinguished Service Medal',
                    ""Airman's Medal"",	""Aerial Achievement Medal"",	""Air Force Commendation Medal"",
                    ""Air Force Achievement Medal"", 'Air Force Combat Action Medal',	'Combat Readiness Medal',
                    'Air and Space Campaign Medal',	'Nuclear Deterrence Operations Service Medal',
                    'Remote Combat Effects Campaign Medal'
            ] 
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_medals.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == soln_list[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(soln_list[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
188,a3_1_countries,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called&nbsp;<code>list_of_coalition_countries</code>. Write a program that prints a single, specified country from the list. Your program shall take a number via user input used to identify which country to print. For example, if the user types a 3, you should print out the third item.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)</li>
</ul>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

soln_list = ['United States', 'United Kingdom', 'Australia', 'South Korea', 'Czech Republic', 'Romania', 'El Salvador', 'Estonia', 
             'Bulgaria', 'Moldova', 'Albania', 'Ukraine', 'Denmark', 'Tonga', 'Azerbaijan', 'Singapore', 'Bosnia', 'Macedonia',
             'Latvia', 'Poland', 'Kazakhstan']
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_countries.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == soln_list[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(soln_list[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
189,a3_1_commands,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called&nbsp;<code>list_of_usaf_commands</code>. Write a program that prints a single, specified command organization from the list. Your program shall take a number via user input used to identify which command organization to print. For example, if the user types a 3, you should print out the third item.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)</li>
</ul>
</div>
","from cs110 import autograder
import random, math

list_of_usaf_commands = ['ACC','AETC','AFGSC','AFMC',
                         'AFRC','AFSOC','AMC','PACAF',
                         'USAFE']
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(list_of_usaf_commands)-2), len(list_of_usaf_commands)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_commands.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == list_of_usaf_commands[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != list_of_usaf_commands[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(list_of_usaf_commands[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
190,a3_1_afbs,2,skill,1,"<div id=""question_196458395_question_text"" class=""question_text user_content enhanced"">
<p><strong>PROBLEM STATEMENT:<br></strong></p>
<p><span>You have been provided with a list called&nbsp;</span><code>list_of_bases</code><span>. Write a program that prints a single, specified base from the list. Your program shall take a number via user input used to identify which base to print. For example, if the user types a 3, you should print out the third item.</span></p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)</li>
</ul>
      </div>
","from cs110 import autograder
import random, math

soln_list = ['Travis', 'Eglin', 'Offutt', 'Minot', 'Luke', 'Malmstrom', 'Ellsworth', 'Patrick', 'Moody', 'Barksdale',
             'Maxwell', 'Mountain Home', 'Keesler', 'Lackland', 'Kelly', 'Andrews', 'Tinker', 'Peterson', 'Buckley',
             'Hill', 'Dyess', 'Wright-Patterson', 'Nellis']
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_afbs.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == soln_list[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(soln_list[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
191,a2_7_lowest_spec_attack,2,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset containing information about various types of Pokemon. Here is an example entry from the file:</p>
<pre>25, Pikachu, Electric, 35, 55, 40, 50, 50, 90, 1, FALSE</pre>
<p>&nbsp;</p>
<p>Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>ID</strong></td>
<td><strong>Name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Hit Points</strong></td>
<td><strong>Attack</strong></td>
<td><strong>Defense</strong></td>
<td><strong>Special Attack</strong></td>
<td><strong>Special Defense</strong></td>
<td><strong>Speed</strong></td>
<td><strong>Generation</strong></td>
<td><strong>Legendary</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td>25</td>
<td>Pikachu</td>
<td>Electric</td>
<td>35</td>
<td>55</td>
<td>40</td>
<td>50</td>
<td>50</td>
<td>90</td>
<td>1</td>
<td>False</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a program that asks the user for:</p>
<ul>
<li>a Pokemon Type (e.g., ""Electric"").&nbsp;</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then analyze the file and print:</p>
<ul>
<li>The value of lowest Special Attack from a Pokemon with the matching type</li>
<li>The name of the Pokemon with the lowest value of Special Attack. In the event of a tie, print out the name of the FIRST Pokemon that matches.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the Dark Pokemon with the lowest Special Attack is Scrafty (with Special Attack of 115.0), your program should print out:</p>
<pre>115.0<br />Scrafty</pre>
<p>&nbsp;</p>
<p>NOTE: The above answer is purely hypothetical. Your answer will be different.</p>
</div>
","from cs110 import autograder
import random, math

def solution(pokemon_type):
    file = open(""pokemon.csv"", ""r"")
    file_contents = file.read()
    lines = file_contents.split('\n')

    lowest_value = 999
    lowest_name = ""UNKNOWN""

    for line in lines:
        columns = line.split(',')
        p_name  = columns[1]
        p_type  = columns[2]
        p_value = float(columns[6])
        
        if p_type == pokemon_type:
            if p_value < lowest_value:
                lowest_value = p_value
                lowest_name = p_name

    return (lowest_value, lowest_name)


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    list_of_types = [""Poison"", ""Grass"", ""Electric"", ""Fire""]
    random_type = list_of_types[random.randint(0, len(list_of_types)-1)]
    
    output, error = autograder.run_script(""a2_7_lowest_spec_attack.py"", [random_type])
    expected_output = solution(random_type)
    
    lines = output.strip().split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Lowest Value Correct"")
        score += 50
    else:
        print(""Lowest Value Incorrect.  Expected:"", expected_output[0])
    
    if len(lines) > 1 and lines[1] == expected_output[1]:
        print(""Name is Correct"")
        score += 50
    else:
        print(""Name is Incorrect.  Expected:"", expected_output[1])
    
    return score


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
192,a2_7_lowest_defense,2,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset containing information about various types of Pokemon. Here is an example entry from the file:</p>
<pre>25, Pikachu, Electric, 35, 55, 40, 50, 50, 90, 1, FALSE</pre>
<p>&nbsp;</p>
<p>Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>ID</strong></td>
<td><strong>Name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Hit Points</strong></td>
<td><strong>Attack</strong></td>
<td><strong>Defense</strong></td>
<td><strong>Special Attack</strong></td>
<td><strong>Special Defense</strong></td>
<td><strong>Speed</strong></td>
<td><strong>Generation</strong></td>
<td><strong>Legendary</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td>25</td>
<td>Pikachu</td>
<td>Electric</td>
<td>35</td>
<td>55</td>
<td>40</td>
<td>50</td>
<td>50</td>
<td>90</td>
<td>1</td>
<td>False</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a program that asks the user for:</p>
<ul>
<li>a Pokemon Type (e.g., ""Electric"")</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then analyze the file and print:</p>
<ul>
<li>The lowest defensive rating from a Pokemon with the matching type</li>
<li>The name of the Pokemon with the lowest defensive rating. In the event of a tie, print out the name of the FIRST Pokemon with the lowest defensive value.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the Poison Pokemon with the lowest defense rating is Zubat (with an defensive of 35.0), your program should print out:</p>
<pre>35.0<br />Zubat</pre>
<p>&nbsp;</p>
<p>NOTE: The above answer is purely hypothetical. Your answer will be different.</p>
</div>
","from cs110 import autograder
import random, math

def solution(pokemon_type):
    file = open(""pokemon.csv"", ""r"")
    file_contents = file.read()
    lines = file_contents.split('\n')

    lowest_value = 999
    lowest_name = ""UNKNOWN""

    for line in lines:
        columns = line.split(',')
        p_name  = columns[1]
        p_type  = columns[2]
        p_value = float(columns[5])
        
        if p_type == pokemon_type:
            if p_value < lowest_value:
                lowest_value = p_value
                lowest_name = p_name

    return (lowest_value, lowest_name)


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    list_of_types = [""Poison"", ""Grass"", ""Electric"", ""Fire""]
    random_type = list_of_types[random.randint(0, len(list_of_types)-1)]
    
    output, error = autograder.run_script(""a2_7_lowest_defense.py"", [random_type])
    expected_output = solution(random_type)
    
    lines = output.strip().split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Lowest Value Correct"")
        score += 50
    else:
        print(""Lowest Value Incorrect.  Expected:"", expected_output[0])
    
    if len(lines) > 1 and lines[1] == expected_output[1]:
        print(""Name is Correct"")
        score += 50
    else:
        print(""Name is Incorrect.  Expected:"", expected_output[1])
    
    return score


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,
193,a2_7_highest_hp,2,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset containing information about various types of Pokemon. Here is an example entry from the file:</p>
<pre>25, Pikachu, Electric, 35, 55, 40, 50, 50, 90, 1, FALSE</pre>
<p>&nbsp;</p>
<p>Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>ID</strong></td>
<td><strong>Name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Hit Points</strong></td>
<td><strong>Attack</strong></td>
<td><strong>Defense</strong></td>
<td><strong>Special Attack</strong></td>
<td><strong>Special Defense</strong></td>
<td><strong>Speed</strong></td>
<td><strong>Generation</strong></td>
<td><strong>Legendary</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td>25</td>
<td>Pikachu</td>
<td>Electric</td>
<td>35</td>
<td>55</td>
<td>40</td>
<td>50</td>
<td>50</td>
<td>90</td>
<td>1</td>
<td>False</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a program that asks the user for:</p>
<ul>
<li>a Pokemon Type (e.g., ""Electric"").&nbsp;</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then analyze the file and print:</p>
<ul>
<li>The highest Hit Points from a Pokemon with the matching type</li>
<li>The name of the Pokemon with the highest value of Hit Points. In the event of a tie, print out the name of the FIRST Pokemon that matches.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the Ice Pokemon with the highest Hit Points is Froslass (with Hit Points of 70.0), your program should print out:</p>
<pre>70.0<br />Frosless</pre>
<p>&nbsp;</p>
<p>NOTE: The above answer is purely hypothetical. Your answer will be different.</p>
</div>
","from cs110 import autograder
import random, math

def solution(pokemon_type):
    file = open(""pokemon.csv"", ""r"")
    file_contents = file.read()
    lines = file_contents.split('\n')

    highest_value = -999
    highest_name = ""UNKNOWN""

    for line in lines:
        columns = line.split(',')
        p_name  = columns[1]
        p_type  = columns[2]
        p_value = float(columns[3])
        
        if p_type == pokemon_type:
            if p_value > highest_value:
                highest_value = p_value
                highest_name = p_name

    return (highest_value, highest_name)


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    list_of_types = [""Poison"", ""Grass"", ""Electric"", ""Fire""]
    random_type = list_of_types[random.randint(0, len(list_of_types)-1)]
    
    output, error = autograder.run_script(""a2_7_highest_hp.py"", [random_type])
    expected_output = solution(random_type)
    
    lines = output.strip().split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Highest Value Correct"")
        score += 50
    else:
        print(""Highest Value Incorrect.  Expected:"", expected_output[0])
    
    if len(lines) > 1 and lines[1] == expected_output[1]:
        print(""Name is Correct"")
        score += 50
    else:
        print(""Name is Incorrect.  Expected:"", expected_output[1])
    
    return score


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,
194,a2_7_fastest,2,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset containing information about various types of Pokemon. Here is an example entry from the file:</p>
<pre>25, Pikachu, Electric, 35, 55, 40, 50, 50, 90, 1, FALSE</pre>
<p>&nbsp;</p>
<p>Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>ID</strong></td>
<td><strong>Name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Hit Points</strong></td>
<td><strong>Attack</strong></td>
<td><strong>Defense</strong></td>
<td><strong>Special Attack</strong></td>
<td><strong>Special Defense</strong></td>
<td><strong>Speed</strong></td>
<td><strong>Generation</strong></td>
<td><strong>Legendary</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td>25</td>
<td>Pikachu</td>
<td>Electric</td>
<td>35</td>
<td>55</td>
<td>40</td>
<td>50</td>
<td>50</td>
<td>90</td>
<td>1</td>
<td>False</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a program that asks the user for:</p>
<ul>
<li>a Pokemon Type (e.g., ""Electric"").&nbsp;</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then analyze the file and print:</p>
<ul>
<li>The highest speed from a Pokemon with the matching type</li>
<li>The name of the Pokemon with the fastest speed. In the event of a tie, print out the name of the FIRST Pokemon that matches.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the fastest Bug Pokemon is Accelgor (with a speed of 145.0), your program should print out:</p>
<pre>145.0<br />Accelgor</pre>
<p>&nbsp;</p>
<p>NOTE: The above answer is purely hypothetical. Your answer will be different.</p>
</div>
","from cs110 import autograder
import random, math

def solution(pokemon_type):
    file = open(""pokemon.csv"", ""r"")
    file_contents = file.read()
    lines = file_contents.split('\n')

    fastest_value = 0
    fastest_name = ""UNKNOWN""

    for line in lines:
        columns = line.split(',')
        p_name  = columns[1]
        p_type  = columns[2]
        p_value = float(columns[8])
        
        if p_type == pokemon_type:
            if p_value > fastest_value:
                fastest_value = p_value
                fastest_name = p_name

    return (fastest_value, fastest_name)


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    list_of_types = [""Poison"", ""Grass"", ""Electric"", ""Fire""]
    random_type = list_of_types[random.randint(0, len(list_of_types)-1)]
    
    output, error = autograder.run_script(""a2_7_fastest.py"", [random_type])
    expected_output = solution(random_type)
    
    lines = output.strip().split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Fastest Value Correct"")
        score += 50
    else:
        print(""Fastest Value Incorrect.  Expected:"", expected_output[0])
    
    if len(lines) > 1 and lines[1] == expected_output[1]:
        print(""Name is Correct"")
        score += 50
    else:
        print(""Name is Incorrect.  Expected:"", expected_output[1])
    
    return score


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,1,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,
195,a2_7_attack,2,lab,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset containing information about various types of Pokemon. Here is an example entry from the file:</p>
<pre>25, Pikachu, Electric, 35, 55, 40, 50, 50, 90, 1, FALSE</pre>
<p>&nbsp;</p>
<p>Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>ID</strong></td>
<td><strong>Name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Hit Points</strong></td>
<td><strong>Attack</strong></td>
<td><strong>Defense</strong></td>
<td><strong>Special Attack</strong></td>
<td><strong>Special Defense</strong></td>
<td><strong>Speed</strong></td>
<td><strong>Generation</strong></td>
<td><strong>Legendary</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td>25</td>
<td>Pikachu</td>
<td>Electric</td>
<td>35</td>
<td>55</td>
<td>40</td>
<td>50</td>
<td>50</td>
<td>90</td>
<td>1</td>
<td>False</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a program that asks the user for:</p>
<ul>
<li>a Pokemon Type (e.g., ""Electric"").&nbsp;</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then analyze the file and print:</p>
<ul>
<li>The highest attack rating from a Pokemon with the matching type</li>
<li>The name of the Pokemon with the highest attack rating. In the event of a tie, print out the name of the FIRST Pokemon with the highest attack value.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the Electric Pokemon with the highest attack rating is Raichu (with an attack of 90.0), your program should print out:</p>
<pre>90.0<br />Raichu</pre>
<p>&nbsp;</p>
<p>NOTE: The above answer is purely hypothetical. Your answer will be different.</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def solution(pokemon_type):
    file = open(""pokemon.csv"", ""r"")
    file_contents = file.read()
    lines = file_contents.split('\n')

    highest_value = -999
    highest_name = ""UNKNOWN""

    for line in lines:
        columns = line.split(',')
        p_name  = columns[1]
        p_type  = columns[2]
        p_value = float(columns[4])
        
        if p_type == pokemon_type:
            if p_value > highest_value:
                highest_value = p_value
                highest_name = p_name

    return (highest_value, highest_name)


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    list_of_types = [""Poison"", ""Grass"", ""Electric"", ""Fire""]
    random_type = list_of_types[random.randint(0, len(list_of_types)-1)]
    
    output, error = autograder.run_script(""a2_7_attack.py"", [random_type])
    expected_output = solution(random_type)
    
    lines = output.strip().split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Highest Value Correct"")
        score += 50
    else:
        print(""Highest Value Incorrect.  Expected:"", expected_output[0])
    
    if len(lines) > 1 and lines[1] == expected_output[1]:
        print(""Name is Correct"")
        score += 50
    else:
        print(""Name is Incorrect.  Expected:"", expected_output[1])
    
    return score


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
196,a2_6_virus,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You are writing a program that will help you decide if there are too many people at a restaurant for you to dine safely. Your program will ask for the number of people in the restaurant. It will then ask for the distance between yourself and each of the people (in feet, which do not have to be whole numbers). Your program will keep track of how many people are within 6 feet of you (inclusive). Your program will then print one of the following statements:</p>
<table border=""1"">
<tbody>
<tr>
<td><strong># of People within 6 Feet</strong></td>
<td><strong>0</strong></td>
<td><strong>1-2</strong></td>
<td><strong>&gt;2</strong></td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>All Clear</td>
<td>Warning</td>
<td>Find Another Place</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>INPUT</strong></td>
<td>3<br />5.7<br />10.2<br />12.4</td>
<td>2<br />7.0<br />15.1</td>
</tr>
<tr>
<td><strong>OUTPUT</strong></td>
<td>Warning</td>
<td>All Clear</td>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random, math

def run_test(num_violating, num_people):    
    inputs = [num_people]
    
    for i in range(num_people):
        if i < num_violating:
            if (i + 1 == num_violating):
                inputs.append(6)
            else:
                inputs.append(round(random.uniform(0, 6), 1))
        else:
            inputs.append(round(random.uniform(7, 20), 1))

    # Generates Expected Answer
    if num_violating == 0:
        answer = ""All Clear""
    elif num_violating <= 2:
        answer = ""Warning""
    else:
        answer = ""Find Another Place""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_6_virus.py"", inputs)
    
    print(""Testing when"", num_violating, ""out of"", num_people, ""are violating . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(2, random.randint(2, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
197,a2_6_traffic_lights,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>The City Manager is having a traffic problem and asked you are to write a program that will determine whether or not to activate a newly installed alternate traffic light schedule to help alleviate traffic throughout the city during peak traffic hours. Your program will ask for the number of traffic ""time periods"" to analyze. It will then ask for the traffic throughput (in average number of cars per minute, which does not have to be a whole number) for each ""time period"". Your program will keep track of how many ""time periods"" are considered heavy traffic, as defined as 15 cars per minutes or more (inclusive). Your program will then print one of the following statements:</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong># of ""time periods"" of heavy traffic</strong></td>
<td><strong>0</strong></td>
<td><strong>1-2</strong></td>
<td><strong>&gt;2</strong></td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Regular Schedule</td>
<td>Prepare Activation</td>
<td>Activate New Schedule</td>
</tr>
</tbody>
</table>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>INPUT</strong></td>
<td>
<p>3</p>
<p>12.8</p>
<p>15.0</p>
<p>6.7</p>
</td>
<td>
<p>3</p>
<p>17.3</p>
<p>15.1</p>
<p>19.2</p>
</td>
</tr>
<tr>
<td><strong>OUTPUT</strong></td>
<td>Prepare Activation</td>
<td>Activate New Schedule</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

def run_test(num_over, traffic):    
    inputs = [traffic]
    
    for i in range(traffic):
        if i < num_over:
            if (i + 1 == num_over):
                inputs.append(15)
            else:
                inputs.append(round(random.uniform(15, 30), 1))
        else:
            inputs.append(round(random.uniform(1, 15), 1))

    # Generates Expected Answer
    if num_over == 0:
        answer = ""Regular Schedule""
    elif num_over <= 2:
        answer = ""Prepare Activation""
    else:
        answer = ""Activate New Schedule""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_6_traffic_lights.py"", inputs)
    
    print(""Testing when"", num_over, ""out of"", traffic, ""\""time periods\"" are experiencing heavy traffic . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(2, random.randint(2, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
198,a2_6_network_traffic,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>The 10th Communications Squadron (10 CS) recently detected a higher volume of network traffic on the base network. The 10 CS Director of Operations asked you are to write a program that will determine whether or not to activate an additional Network Load Balancer (NLB) to improve the network performance during these peak loads. Your program will ask for the number of network traffic ""snapshots"" to analyze. It will then ask for the network load (in Gigabits per second (Gbps), which does not have to be a whole number) for each ""snapshot"". Your program will keep track of how many ""snapshots"" are designated as high volume network traffic, defined as loads greater than 512 Gbps. Your program will then print one of the following statements:</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong># of ""snapshots"" with high network traffic volume</strong></td>
<td><strong>0</strong></td>
<td><strong>1-2</strong></td>
<td><strong>&gt;2</strong></td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Ops Normal</td>
<td>Initialize NLB</td>
<td>Activate NLB</td>
</tr>
</tbody>
</table>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>INPUT</strong></td>
<td>
<p>3</p>
<p>512.0</p>
<p>738.5</p>
<p>199.6</p>
</td>
<td>
<p>3</p>
<p>498.6</p>
<p>372.9</p>
<p>512.0</p>
</td>
</tr>
<tr>
<td><strong>OUTPUT</strong></td>
<td>Initialize NLB</td>
<td>Ops Normal</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

def run_test(num_over, traffic):    
    inputs = [traffic]
    
    for i in range(traffic):
        if i < num_over:
            if (i + 1 == num_over):
                inputs.append(512.1)
            else:
                inputs.append(round(random.uniform(512, 1024), 1))
        else:
            inputs.append(round(random.uniform(256, 512), 1))

    # Generates Expected Answer
    if num_over == 0:
        answer = ""Ops Normal""
    elif num_over <= 2:
        answer = ""Initialize NLB""
    else:
        answer = ""Activate NLB""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_6_network_traffic.py"", inputs)
    
    print(""Testing when"", num_over, ""out of"", traffic, ""\""snaphots\"" have high volume of network traffic . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(2, random.randint(2, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
199,a2_6_grades,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You are writing a program that will help your instructors analyze student performance on an exam. Your program will ask for the number of students in the class. It will then ask for the grade of each student (this grade does not have to be a whole number). Your program will keep track of how many students received less than 70 on an assignment. Your program will then print one of the following statements.</p>
<p>&nbsp;</p>
<table border=""1"">
<tbody>
<tr>
<td><strong># of scores below 70</strong></td>
<td><strong>0</strong></td>
<td><strong>1-2</strong></td>
<td><strong>&gt;2</strong></td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Excellent</td>
<td>Satisfactory</td>
<td>Unsatisfactory</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>INPUT</strong></td>
<td>
<p>4<br />75.6<br />80.2<br />95.5<br />71.0</p>
</td>
<td>
<p>3<br />68.2<br />72.9<br />95.4</p>
</td>
<td>
<p>3<br />67.0<br />65.5<br />68.3</p>
</td>
</tr>
<tr>
<td><strong>OUTPUT</strong></td>
<td>Excellent</td>
<td>Satisfactory</td>
<td>Unsatisfactory</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def run_test(num_failures, num_papers):    
    inputs = [num_papers]
    
    for i in range(num_papers):
        if i < num_failures:
            inputs.append(round(random.uniform(0, 70), 1))
        else:
            if (i == num_failures):
                inputs.append(70)
            else:
                inputs.append(round(random.uniform(70, 100), 1))

    # Generates Expected Answer
    if num_failures == 0:
        answer = ""Excellent""
    elif num_failures >= 1 and num_failures <= 2:
        answer = ""Satisfactory""
    else:
        answer = ""Unsatisfactory""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_6_grades.py"", inputs)
    
    print(""Testing when"", num_failures, ""out of"", num_papers, ""failed . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(2, random.randint(2, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
200,a2_6_gameday,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>The Academy Athletic Director asked you are to write a program that will determine whether or not a football game in progress should be delayed based on current weather conditions. Your program will ask for the number of lightning strikes occurred in the immediate area in the past thirty minutes. It will then ask for the distance from Falcon Stadium to each lightning strike (in miles, which do not have to be whole numbers). Your program will keep track of how many lightning strikes are within 15 miles of the stadium (inclusive). Your program will then print one of the following statements:</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong># of lightning strikes in immediate area</strong></td>
<td><strong>0</strong></td>
<td><strong>1-3</strong></td>
<td><strong>&gt;3</strong></td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>All Clear</td>
<td>Weather Warning</td>
<td>Game Delay</td>
</tr>
</tbody>
</table>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>INPUT</strong></td>
<td>
<p>4</p>
<p>15.0</p>
<p>13.2</p>
<p>6.5</p>
<p>9.8</p>
</td>
<td>
<p>3</p>
<p>17.8</p>
<p>15.1</p>
<p>19.0</p>
<p>&nbsp;</p>
</td>
</tr>
<tr>
<td><strong>OUTPUT</strong></td>
<td>Game Delay</td>
<td>All Clear</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, math

def run_test(num_close, num_strikes):    
    inputs = [num_strikes]
    
    for i in range(num_strikes):
        if i < num_close:
            if (i + 1 == num_close):
                inputs.append(15)
            else:
                inputs.append(round(random.uniform(0, 15), 1))
        else:
            inputs.append(round(random.uniform(15, 50), 1))

    # Generates Expected Answer
    if num_close == 0:
        answer = ""All Clear""
    elif num_close <= 3:
        answer = ""Weather Warning""
    else:
        answer = ""Game Delay""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_6_gameday.py"", inputs)
    
    print(""Testing when"", num_close, ""out of"", num_strikes, ""\""strikes\"" are are close . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(2, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(2, 5))):
        num_passed += 1
    
    if (run_test(2, random.randint(3, 5))):
        num_passed += 1
    
    if (run_test(4, random.randint(4, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
201,a2_6_combat,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You are writing a program that will determine whether or not a fighter pilot will need to make an evasive action when enemy aircraft are near. Your program will ask for the number of enemy planes in the area. It will then ask for the distance between the pilot and each of the enemy planes (in miles, which do not have to be whole numbers). Your program will keep track of how many enemy planes are within 20 miles of the pilot (inclusive). Your program will then print one of the following statements:</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong># of Enemy Planes in Area</strong></td>
<td><strong>0</strong></td>
<td><strong>1-2</strong></td>
<td><strong>&gt;2</strong></td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>All Clear</td>
<td>Warning</td>
<td>Evasive Action</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>INPUT</strong></td>
<td>
<p>3</p>
<p>10.5</p>
<p>17.2</p>
<p>23.7</p>
</td>
<td>
<p>3</p>
<p>21.4</p>
<p>34.0</p>
<p>27.9</p>
</td>
</tr>
<tr>
<td><strong>OUTPUT</strong></td>
<td>Warning</td>
<td>All Clear</td>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random, math

def run_test(num_close, num_planes):    
    inputs = [num_planes]
    
    for i in range(num_planes):
        if i < num_close:
            if (i + 1 == num_close):
                inputs.append(20)
            else:
                inputs.append(round(random.uniform(0, 20), 1))
        else:
            inputs.append(round(random.uniform(20, 50), 1))

    # Generates Expected Answer
    if num_close == 0:
        answer = ""All Clear""
    elif num_close <= 2:
        answer = ""Warning""
    else:
        answer = ""Evasive Action""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_6_combat.py"", inputs)
    
    print(""Testing when"", num_close, ""out of"", num_planes, ""are close . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(2, random.randint(2, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
202,a2_4_slash,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with program that gets the following values from the user:</p>
<ul>
<li><strong>slash_separated_string</strong>: A slash separated string<br />Example: johnson81/4081/30no86/cj4081/Craig/Johnson/Depot/London<br /><br /></li>
<li><strong>column_to_print</strong>: A number representing the value to print from the slash separated string<br />NOTE: 0 represents the first value in the slash separated string, 1 represents the second, etc</li>
</ul>
<p>&nbsp;</p>
<p>Write a Python program that:</p>
<ol>
<li>Splits the <strong>slash separated string</strong></li>
<li>Prints the column_to_print<sup>th</sup> value.</li>
</ol>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types:</p>
<pre>johnson81/4081/30no86/cj4081/Craig/Johnson/Depot/London<br />2</pre>
<p>Your program should then output:</p>
<pre>30no86</pre>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def solution(string, column_num):
    
    columns = string.split('/')
    return columns[column_num]
    

def test_passed():

    score = 0

    # Generates the Test Set
    random_strings = [""booker12/9012/12se74/rb9012/Rachel/Booker/Sales,Manchester"",
                      ""grey07/2070/04ap67/lg2070/Laura/Grey/Depot/London"",
                      ""johnson81/4081/30no86/cj4081/Craig/Johnson/Depot/London"",
                      ""jenkins46/9346/14ju73/mj9346/Mary/Jenkins/Engineering/Manchester"",
                      ""smith79/5079/09ja61/js5079/Jamie/Smith/Engineering/Manchester""]
    
    random_column   = random.randint(0, 6)
    random_string   = random_strings[random.randint(0, len(random_strings)-1)]
    output, error   = autograder.run_script(""a2_4_slash.py"", [ random_string, random_column ])
    expected_output = solution(random_string, random_column)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT.  Expected:"", expected_output)
        return 0.0

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
203,a2_4_semic,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with program that gets the following values from the user:</p>
<ul>
<li><strong>semicolon_separated_string</strong>: A semicolon separated string<br />Example: booker12;9012;12se74;rb9012;Rachel;Booker;Sales;Manchester<br /><br /></li>
<li><strong>column_to_print</strong>: A number representing the value to print from the semicolon separated string<br />NOTE: 0 represents the first value in the semicolon separated string, 1 represents the second, etc</li>
</ul>
<p>&nbsp;</p>
<p>Write a Python program that:</p>
<ol>
<li>Splits the <strong>semicolon separated string</strong></li>
<li>Prints the column_to_print<sup>th</sup> value.</li>
</ol>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types:</p>
<pre>booker12;9012;12se74;rb9012;Rachel;Booker;Sales;Manchester<br />2</pre>
<p>Your program should then output:</p>
<pre>12se74</pre>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, math

def solution(string, column_num):
    
    columns = string.split(';')
    return columns[column_num]
    

def test_passed():

    score = 0

    # Generates the Test Set
    random_strings = [""booker12;9012;12se74;rb9012;Rachel;Booker;Sales;Manchester"",
                      ""grey07;2070;04ap67;lg2070;Laura;Grey;Depot;London"",
                      ""johnson81;4081;30no86;cj4081;Craig;Johnson;Depot;London"",
                      ""jenkins46;9346;14ju73;mj9346;Mary;Jenkins;Engineering;Manchester"",
                      ""smith79;5079;09ja61;js5079;Jamie;Smith;Engineering;Manchester""]
    
    random_column   = random.randint(0, 6)
    random_string   = random_strings[random.randint(0, len(random_strings)-1)]
    output, error   = autograder.run_script(""a2_4_semic.py"", [ random_string, random_column ])
    expected_output = solution(random_string, random_column)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT.  Expected:"", expected_output)
        return 0.0

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
204,a2_4_dash,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with program that gets the following values from the user:</p>
<ul>
<li><strong>dash_separated_string</strong>: A dash separated string<br />Example: johnson81-4081-30no86-cj4081-Craig-Johnson-Depot-London<br /><br /></li>
<li><strong>column_to_print</strong>: A number representing the value to print from the dash separated string<br />NOTE: 0 represents the first value in the dash separated string, 1 represents the second, etc</li>
</ul>
<p>&nbsp;</p>
<p>Write a Python program that:</p>
<ol>
<li>Splits the <strong>dash separated string</strong></li>
<li>Prints the column_to_print<sup>th</sup> value.</li>
</ol>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types:</p>
<pre>johnson81-4081-30no86-cj4081-Craig-Johnson-Depot-London<br />2</pre>
<p>Your program should then output:</p>
<pre>30no86</pre>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def solution(string, column_num):
    
    columns = string.split('-')
    return columns[column_num]
    

def test_passed():

    score = 0

    # Generates the Test Set
    random_strings = [""booker12-9012-12se74-rb9012-Rachel-Booker-Sales-Manchester"",
                      ""grey07-2070-04ap67-lg2070-Laura-Grey-Depot-London"",
                      ""johnson81-4081-30no86-cj4081-Craig-Johnson-Depot-London"",
                      ""jenkins46-9346-14ju73-mj9346-Mary-Jenkins-Engineering-Manchester"",
                      ""smith79-5079-09ja61-js5079-Jamie-Smith-Engineering-Manchester""]
    
    random_column   = random.randint(0, 6)
    random_string   = random_strings[random.randint(0, len(random_strings)-1)]
    output, error   = autograder.run_script(""a2_4_dash.py"", [ random_string, random_column ])
    expected_output = solution(random_string, random_column)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT.  Expected:"", expected_output)
        return 0.0

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
205,a2_4_comma,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with program that gets the following values from the user:</p>
<ul>
<li><strong>comma_separated_string</strong>: A comma separated string<br />Example: booker12,9012,12se74,rb9012,Rachel,Booker,Sales,Manchester<br /><br /></li>
<li><strong>column_to_print</strong>: A number representing the value to print from the comma separated string<br />NOTE: 0 represents the first value in the comma separated string, 1 represents the second, etc</li>
</ul>
<p>&nbsp;</p>
<p>Write a Python program that:</p>
<ol>
<li>Splits the <strong>comma separated</strong> <strong>string</strong></li>
<li>Prints the column_to_print<sup>th</sup> value</li>
</ol>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types:</p>
<pre>booker12,9012,12se74,rb9012,Rachel,Booker,Sales,Manchester<br />2</pre>
<p>Your program should then output:</p>
<pre>12se74</pre>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def solution(string, column_num):
    
    columns = string.split(',')
    return columns[column_num]
    

def test_passed():

    score = 0

    # Generates the Test Set
    random_strings = [""booker12,9012,12se74,rb9012,Rachel,Booker,Sales,Manchester"",
                      ""grey07,2070,04ap67,lg2070,Laura,Grey,Depot,London"",
                      ""johnson81,4081,30no86,cj4081,Craig,Johnson,Depot,London"",
                      ""jenkins46,9346,14ju73,mj9346,Mary,Jenkins,Engineering,Manchester"",
                      ""smith79,5079,09ja61,js5079,Jamie,Smith,Engineering,Manchester""]
    
    random_column   = random.randint(0, 6)
    random_string   = random_strings[random.randint(0, len(random_strings)-1)]
    output, error   = autograder.run_script(""a2_4_comma.py"", [ random_string, random_column ])
    expected_output = solution(random_string, random_column)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT.  Expected:"", expected_output)
        return 0.0

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
206,a2_4_colon,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with program that gets the following values from the user:</p>
<ul>
<li><strong>colon_separated_string</strong>: A colon separated string<br />Example: jones78:4273:24px47:kj4273:Karyl:Jones:Accounts:Essex<br /><br /></li>
<li><strong>column_to_print</strong>: A number representing the value to print from the colon separated string<br />NOTE: 0 represents the first value in the colon separated string, 1 represents the second, etc</li>
</ul>
<p>&nbsp;</p>
<p>Write a Python program that:</p>
<ol>
<li>Splits the <strong>colon separated string</strong></li>
<li>Prints the column_to_print<sup>th</sup> value.</li>
</ol>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types:</p>
<pre>jones78:4273:24px47:kj4273:Karyl:Jones:Accounts:Essex<br />2</pre>
<p>Your program should then output:</p>
<pre>24px47</pre>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def solution(string, column_num):
    
    columns = string.split(':')
    return columns[column_num]
    

def test_passed():

    score = 0

    # Generates the Test Set
    random_strings = [""booker12:9012:12se74:rb9012:Rachel:Booker:Sales:Manchester"",
                      ""grey07:2070:04ap67:lg2070:Laura:Grey:Depot:London"",
                      ""johnson81:4081:30no86:cj4081:Craig:Johnson:Depot:London"",
                      ""jenkins46:9346:14ju73:mj9346:Mary:Jenkins:Engineering:Manchester"",
                      ""smith79:5079:09ja61:js5079:Jamie:Smith:Engineering:Manchester""]
    
    random_column   = random.randint(0, 6)
    random_string   = random_strings[random.randint(0, len(random_strings)-1)]
    output, error   = autograder.run_script(""a2_4_colon.py"", [ random_string, random_column ])
    expected_output = solution(random_string, random_column)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT.  Expected:"", expected_output)
        return 0.0

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
207,a2_3_twenty_one,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with program that gets a number from the user and stores it in a variable called&nbsp;<strong>starting_number</strong>. </p>
<p>Write a program that prints all of the numbers between&nbsp;<strong>starting_number</strong>&nbsp;and&nbsp;<strong>0</strong>&nbsp;(inclusive), counting down by <strong>21</strong> each time.</p>
<p>&nbsp;</p>
<p>For example, if the user types <strong>85</strong>, your program should print:</p>
<pre>85<br />64<br />43<br />22<br />1</pre>
<p>Similarly, if the user types&nbsp;<strong>51</strong>, your program should print:</p>
<pre>51<br />30<br />9<br /><br /></pre>
<p>You may assume that the user will only enter positive numbers.</p>
<p>&nbsp;</p>
<p><strong>HINT:</strong></p>
<ul>
<li>This problem can be solved using either a&nbsp;<strong>for</strong>&nbsp;or&nbsp;<strong>while</strong>&nbsp;loop.</li>
</ul>
</div>
","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 21
    
    return result


def test_passed():    
    score = 0
    random_number = 85 + 21 * random.randint(1, 20)
    
    output, error = autograder.run_script(""a2_3_twenty_one.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    else:
        print(""INCORRECT.  Expected:"")
        print(expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
208,a2_3_seventeen,2,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>You have been provided with program that gets a number from the user and stores it in a variable called <span
            style=""color: #3366ff;""><strong>starting_number</strong></span>.&nbsp; &nbsp;</p>
    <p>Write a program that prints all of the numbers between <span
            style=""color: #3366ff;""><strong>starting_number</strong></span> and <span
            style=""color: #ff0000;""><strong>0</strong></span> (inclusive), counting down by <span
            style=""color: #ff0000;""><strong>17</strong> </span>each time.</p>
    <p>&nbsp;</p>
    <p>For example, if the user types <span style=""color: #ff0000;""><strong>45</strong></span>, your program should
        print:</p>
    <pre>45<br>28<br>11</pre>
    <p>Similarly, if the user types <span style=""color: #ff0000;""><strong>51</strong></span>, your program should print:
    </p>
    <pre>51<br>34<br>17<br>0</pre>
    <p>You may assume that the user will only enter positive numbers.</p>
    <p>&nbsp;</p>
    <p><strong>HINT:</strong></p>
    <ul>
        <li>This problem can be solved using either a <strong>for</strong> or <strong>while</strong> loop.</li>
    </ul>
</div>","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 17
    
    return result


def test_passed():    
    score = 0
    random_number = 85 + 17 * random.randint(1, 20)
    
    output, error = autograder.run_script(""a2_3_seventeen.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    else:
        print(""INCORRECT.  Expected:"")
        print(expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
209,a2_3_fourty_two,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with program that gets a number from the user and stores it in a variable called&nbsp;<strong>starting_number</strong>. </p>
<p>Write a program that prints all of the numbers between&nbsp;<strong>starting_number</strong>&nbsp;and&nbsp;<strong>0</strong>&nbsp;(inclusive), counting down by <strong>42</strong> each time.</p>
<p>&nbsp;</p>
<p>For example, if the user types&nbsp;<strong>228</strong>, your program should print:</p>
<pre>228<br />186<br />144<br />102<br />60<br />18</pre>
<p>Similarly, if the user types<strong> 106</strong>, your program should print:</p>
<pre>106<br />64<br />22</pre>
<p>You may assume that the user will only enter positive numbers.</p>
<p>&nbsp;</p>
<p><strong>HINT:</strong></p>
<ul>
<li>This problem can be solved using either a&nbsp;<strong>for</strong>&nbsp;or&nbsp;<strong>while</strong>&nbsp;loop.</li>
</ul>
</div>
","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 42
    
    return result


def test_passed():    
    score = 0
    random_number = 85 + 42 * random.randint(1, 20)
    
    output, error = autograder.run_script(""a2_3_fourty_two.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    else:
        print(""INCORRECT.  Expected:"")
        print(expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
210,a2_3_countdown,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with program that gets a number from the user and stores it in a variable called&nbsp;<strong>starting_number</strong>. </p>
<p>Write a program that prints all of the numbers between&nbsp;<strong>starting_number</strong>&nbsp;and <strong>0</strong> (inclusive), counting down by <strong>13</strong> each time.</p>
<p>&nbsp;</p>
<p>For example, if the user types <strong>45</strong>, your program should print:</p>
<pre>45<br />32<br />19<br />6</pre>
<p>Similarly, if the user types <strong>39</strong>, your program should print:</p>
<pre>39<br />26<br />13<br />0</pre>
<p>You may assume that the user will only enter positive numbers.</p>
<p>&nbsp;</p>
<p><strong>HINT:</strong></p>
<ul>
<li>This problem can be solved using either a&nbsp;<strong>for</strong>&nbsp;or&nbsp;<strong>while</strong>&nbsp;loop.</li>
</ul>
</div>
","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 13
    
    return result


def test_passed():    
    score = 0
    random_number = 85 + 13 * random.randint(1, 20)
    
    output, error = autograder.run_script(""a2_3_countdown.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    else:
        print(""INCORRECT.  Expected:"")
        print(expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
211,a2_3_19,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with program that gets a number from the user and stores it in a variable called&nbsp;<strong>starting_number</strong>. </p>
<p>Write a program that prints all of the numbers between&nbsp;<strong>starting_number</strong>&nbsp;and <strong>0</strong> (inclusive), counting down by <strong>19</strong> each time.</p>
<p>&nbsp;</p>
<p>For example, if the user types <strong>45</strong>, your program should print:</p>
<pre>45<br />26<br />7</pre>
<p>Similarly, if the user types <strong>57</strong>, your program should print:</p>
<pre>57<br />38<br />19<br />0<br /><br /></pre>
<p>You may assume that the user will only enter positive numbers.</p>
<p>&nbsp;</p>
<p><strong>HINT:</strong></p>
<ul>
<li>This problem can be solved using either a&nbsp;<strong>for</strong>&nbsp;or&nbsp;<strong>while</strong>&nbsp;loop.</li>
</ul>
</div>
","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 19
    
    return result


def test_passed():    
    score = 0
    random_number = 85 + 19 * random.randint(1, 20)
    
    output, error = autograder.run_script(""a2_3_19.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    else:
        print(""INCORRECT.  Expected:"")
        print(expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
212,a2_2_unladen,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>The airspeed velocity of an unladen swallow can be estimated using the following formula:<br /><br /></p>
<p><code>SPEED = 3 * F * A</code></p>
<p>&nbsp;</p>
<p>In this formula:</p>
<ul>
<li><strong>F</strong> is the number of wing flaps per minute (integer)</li>
<li><strong>A</strong> is the distance the wing travels (up and down) per wing flap (floating point number in meters)</li>
</ul>
<p>&nbsp;</p>
<p>Write a function called <strong>speed_of_unladen_swallow</strong> that takes <strong>F</strong> and <strong>A</strong> as parameters (in that order), and <strong>returns</strong> the speed in meters per minute. </p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li>You do NOT need to call this function. Simply define it.</li>
</ul>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import a2_2_unladen

def solution(S, A):
    return 3 * S * A


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'speed_of_unladen_swallow' in dir(a2_2_unladen):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'speed_of_unladen_swallow' in dir(a2_2_unladen) and \
        abs(a2_2_unladen.speed_of_unladen_swallow(15, 0.22) - solution(15, 0.22)) < 0.001:
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
213,a2_2_stride,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You can calculate a person's speed using the following formula:</p>
<p><code>Speed = Stride * SPM * .011</code></p>
<p>&nbsp;</p>
<p>In this formula:</p>
<ul>
<li><strong>Stride</strong> in inches (float)</li>
<li><strong>SPM </strong>is strides per minute (integer)</li>
</ul>
<p>&nbsp;</p>
<p>Write a function called <strong>person_speed</strong> that takes <strong>Stride</strong>&nbsp;and <strong>SPM</strong>&nbsp;as parameters (in that order), and <strong>returns</strong> the speed. </p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li>You do NOT need to call this function. Simply define it</li>
</ul>
</div>
","from cs110 import autograder
import a2_2_stride

def solution(S, SPM):
    return S * SPM * .011


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'person_speed' in dir(a2_2_stride):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'person_speed' in dir(a2_2_stride) and a2_2_stride.person_speed(32, 60) == solution(32, 60):
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
214,a2_2_speed,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You can calculate how fast a vehicle is moving in feet per minute using the following formula:<br /><br /></p>
<p><code>SPEED = RPM * Cir / 12</code></p>
<p>&nbsp;</p>
<p>In this formula:</p>
<ul>
<li><strong>RPM</strong> is the rotations per minute of the wheel (integer)</li>
<li><strong>Cir </strong>is the Circumference of the wheel (floating point number in inches)</li>
</ul>
<p>&nbsp;</p>
<p>Write a function called <strong>speed_fpm</strong> that takes <strong>RPM</strong> and <strong>Cir</strong> as parameters (in that order), and <strong>returns</strong> the speed in feet per minute. </p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li>You do NOT need to call this function. Simply define it.</li>
</ul>
</div>
","from cs110 import autograder
import a2_2_speed

def solution(RPM, Cir):
    return RPM * Cir / 12


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'speed_fpm' in dir(a2_2_speed):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'speed_fpm' in dir(a2_2_speed) and a2_2_speed.speed_fpm(10, 6.6) == solution(10, 6.6):
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
215,a2_2_hp,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM </strong><strong>STATEMENT:<br /></strong></p>
<p>You can calculate a car's horsepower by using the following formula:</p>
<p><code>Horsepower = RPM * Torque / 5252</code></p>
<p>&nbsp;</p>
<p>In this formula:</p>
<ul>
<li><strong>RPM </strong>is rotations per minute (integer)</li>
<li><strong>Torque</strong>&nbsp;in foot pounds (floating point number)</li>
</ul>
<p>&nbsp;</p>
<p>Write a function called&nbsp;<strong>horsepower</strong>&nbsp;that takes&nbsp;<strong>RPM</strong>&nbsp;and&nbsp;<strong>Torque</strong>&nbsp;as parameters (in that order), and&nbsp;<strong>returns</strong> the calculated horsepower. </p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li>You do NOT need to call this function. Simply define it</li>
</ul>
</div>
","from cs110 import autograder
import a2_2_hp

def solution(RPM, Torque):
    return RPM*Torque/5252


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'horsepower' in dir(a2_2_hp):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'horsepower' in dir(a2_2_hp) and a2_2_hp.horsepower(4000, 600) == solution(4000, 600):
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
216,a2_2_bmi,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You can calculate a person's body mass index using the following formula:<br /><br /></p>
<p><code>BMI = Weight / Height<sup>2</sup> * 703</code></p>
<p>&nbsp;</p>
<p>In this formula:</p>
<ul>
<li><strong>height</strong> in inches (integer)</li>
<li><strong>weight</strong> in pounds (floating point number)</li>
</ul>
<p>&nbsp;</p>
<p>Write a function called <strong>body_mass_index</strong> that takes <strong>height</strong> and <strong>weight</strong> as parameters (in that order), and <strong>returns</strong>&nbsp;the body mass index. </p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li>You do NOT need to call this function. Simply define it</li>
</ul>
</div>
","from cs110 import autograder
import a2_2_bmi

def solution(H, W):
    return W/(H**2) * 703


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'body_mass_index' in dir(a2_2_bmi):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'body_mass_index' in dir(a2_2_bmi) and a2_2_bmi.body_mass_index(15, 0.22) == solution(15, 0.22):
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
217,a2_1_surface,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a function called calculate_surface, which takes two parameters:</p>
<ul>
<li><strong>radius</strong></li>
<li><strong>Pi</strong></li>
</ul>
<p>Call this function and pass it<strong> 5</strong>&nbsp;for <strong>radius</strong>, and <strong>3.141592653589793 </strong>for <strong>Pi</strong>. Store the result in a variable called&nbsp;<strong>result</strong>. Do not print. Simply call the function and store the returned value in the variable <strong>result</strong>.</p>
</div>
","from cs110 import autograder
from a2_1_surface import *  

def calculate_surface(radius, Pi):
    return 4*Pi*radius**2


def test_passed():
    solution = calculate_surface(5,  3.141592653589793 )
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
        return 50
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
    



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
218,a2_1_future_value,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a function called calculate_future_value, which takes two parameters:</p>
<ul>
<li><strong>present_value</strong></li>
<li><strong>years</strong></li>
</ul>
<p>Call this function and pass it<strong> 50000</strong>&nbsp;for <strong>present_value</strong>, and&nbsp;<strong>25&nbsp;</strong>for&nbsp;<strong>years</strong>. Store the result in a variable called&nbsp;<strong>result</strong>. Do not print. Simply call the function and store the returned value in the variable&nbsp;<strong>result</strong>.</p>
</div>
","from cs110 import autograder
from a2_1_future_value import *  

def calculate_future_value(present_value, years):
    return present_value * (1 + 0.05/12) ** (years * 12)


def test_passed():
    solution = calculate_future_value(50000, 25)
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
        return 50
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    test_case_result = test_passed()
    print(""Unit Test Returned:"", test_case_result)",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
219,a2_1_equation,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a function called calculate_equation, which takes two parameters:</p>
<ul>
<li><strong>value</strong></li>
<li><strong>C</strong></li>
</ul>
<p>Call this function and pass it <strong>355000</strong> for <strong>value</strong>, and <strong>2.99 * 10</strong><sup><strong>8</strong>&nbsp;</sup>for <strong>C</strong>. Store the result in a variable called <strong>result. </strong>Do not print. Simply call the function, and store the returned value in the variable <strong>result</strong>.</p>
</div>
","from cs110 import autograder
from a2_1_equation import *  

def calculate_equation(value):
    C = (2.99*10**8)
    return value * (1.0 / (1 - (value**2)/(C**2))**0.5)


def test_passed():
    solution = calculate_equation(355000)
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
        return 50
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    test_case_result = test_passed()
    print(""Unit Test Returned:"", test_case_result)",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
220,a2_1_calculate,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a function called calculate_equation, which takes two parameters:</p>
<ul>
<li><strong>value</strong></li>
<li><strong>C</strong></li>
</ul>
<p>Call this function and pass it&nbsp;<strong>278</strong>&nbsp;for&nbsp;<strong>value</strong>, and&nbsp;<strong>6.4 * 2<sup>10</sup></strong><sup>&nbsp;</sup>for&nbsp;<strong>C</strong>. Store the result in a variable called&nbsp;<strong>result</strong>. Do not print. Simply call the function, and store the returned value in the variable <strong>result</strong>.</p>
</div>
","from cs110 import autograder
from a2_1_calculate import *  

def calculate_equation(value):
    C =  6.4*2**10
    return value * (1.0 / (1 - (value**2)/(C**2))**0.5)


def test_passed():
    solution = calculate_equation(278)
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
        return 50
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    ans = test_passed()
    print(""Unit Test Returned:"", ans)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
221,a2_1_calculate_volume,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a function called calculate_volume, which takes two parameters:</p>
<ul>
<li><strong>radius</strong></li>
<li><strong>Pi</strong></li>
</ul>
<p>Call this function and pass it<strong> 15</strong>&nbsp;for&nbsp;<strong>radius</strong>, and&nbsp;<strong>3.141592653589793&nbsp;</strong>for&nbsp;<strong>Pi</strong>. Store the result in a variable called&nbsp;<strong>result</strong>. Do not print. Simply call the function and store the returned value in the variable&nbsp;<strong>result</strong>.</p>
</div>
","from cs110 import autograder
from a2_1_calculate_volume import *  

def calculate_volume(radius, pi):
    return pi * 4/3 * radius **3


def test_passed():
    solution = calculate_volume(15, 3.141592653589793)
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
        return 50
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    test_case_result = test_passed()
    print(""Unit Test Returned:"", test_case_result)",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
222,a1_7_pilot_quals,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>C-130 Pilot qualifications usually depend on a pilot's flight experience in terms of flight hours.</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong>C-130 Pilot Qualification</strong></td>
<td><strong>Flight Hours</strong></td>
</tr>
<tr>
<td>Upgrade Pilot</td>
<td>600</td>
</tr>
<tr>
<td>Aircraft Commander</td>
<td>800</td>
</tr>
<tr>
<td>Formation Lead</td>
<td>1000</td>
</tr>
<tr>
<td>Instructor Pilot</td>
<td>1250</td>
</tr>
<tr>
<td>Evaluator Pilot</td>
<td>1500</td>
</tr>
</tbody>
</table>
<p><br />Write a Python program that asks the user to enter the number of flight hours they currently have (does not need to be a whole number). Then, referencing the table above, print out all qualifications they should have achieved in the aircraft (one per line). If the their experience in the C-130 is more than 600 flight hours, output ""Co-Pilot"".</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width="""">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>1996</td>
<td>1156.7</td>
<td>535.4</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>
<p>Upgrade Pilot<br />Aircraft Commander<br />Formation Lead<br />Instructor Pilot<br />Evaluator Pilot</p>
</td>
<td>
<p>Upgrade Pilot<br />Aircraft Commander<br />Formation Lead</p>
</td>
<td>Co-Pilot</td>
</tr>
</tbody>
</table>
<p>NOTE: The qualifications can be listed in any order, so long as only the ones in range are printed.</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(hours):
    result = """"

    if hours < 600:
        result += ""Co-Pilot\n""

    if hours >= 600:
        result += ""Upgrade Pilot\n""

    if hours >= 800:
        result += ""Aircraft Commander\n""
        
    if hours >= 1000:
        result += ""Formation Lead\n""

    if hours >=1250:
        result += ""Instructor Pilot\n""

    if hours >= 1500:
        result += ""Evaluator Pilot\n""

    
    return result.strip().split('\n')


def run_test(hours):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", hours, ""hours"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_7_pilot_quals.py"", [hours], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(hours)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 600), 1))
    run_test(600)
    run_test(round(random.uniform(600, 799), 1))
    run_test(800)
    run_test(round(random.uniform(800, 999), 1))
    run_test(1000)
    run_test(round(random.uniform(1000, 1249), 1))
    run_test(1250)
    run_test(round(random.uniform(1250, 1499), 1))
    run_test(1500)
    run_test(2750)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
223,a1_7_payload,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>The USAF is known for its massive cargo transport capabilities. Below are the names of 5 aircraft, as well as their maximum payload capacity</p>
<p>&nbsp;</p>
<table border=""1"" cellpadding=""1px"">
<tbody>
<tr>
<td width="""">
<p><strong>Cargo Aircraft</strong></p>
</td>
<td width="""">
<p><strong>Maximum Load (inclusive, in Lbs. )</strong></p>
</td>
</tr>
<tr>
<td width="""">
<p>C-5 Galaxy</p>
</td>
<td width="""">
<p>285000</p>
</td>
</tr>
<tr>
<td width="""">
<p>C-17 Globemaster</p>
</td>
<td width="""">
<p>170900</p>
</td>
</tr>
<tr>
<td width="""">
<p>KC-10 Extender</p>
</td>
<td width="""">
<p>169000</p>
</td>
</tr>
<tr>
<td width="""">
<p>C-130 Hercules</p>
</td>
<td width="""">
<p>42000</p>
</td>
</tr>
<tr>
<td width="""">
<p>V-22 Osprey</p>
</td>
<td width="""">
<p>6000</p>
</td>
</tr>
</tbody>
</table>
<p><br />Write a Python program that asks the user to enter the payload weight (in Lbs.) that needs to be moved. Then, referencing the table, print out all of the Aircraft that could potentially carry that payload (one per line). If no aircraft can carry the payload, output ""Too Heavy for Airlift"".</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width="""">
<tbody>
<tr>
<td>&nbsp;</td>
<td>
<p><strong>Example 1</strong></p>
</td>
<td>
<p><strong>Example 2</strong></p>
</td>
<td>
<p><strong>Example 3</strong></p>
</td>
</tr>
<tr>
<td>
<p><strong>Input</strong></p>
</td>
<td>
<p>150000</p>
</td>
<td>
<p>250000</p>
</td>
<td>
<p>300000</p>
</td>
</tr>
<tr>
<td>
<p><strong>Output</strong></p>
</td>
<td>
<p>C-5 Galaxy</p>
<p>C-17 Globemaster</p>
<p>KC-10 Extender</p>
</td>
<td>
<p>C-5 Galaxy</p>
</td>
<td>
<p>Too Heavy for Airlift</p>
</td>
</tr>
</tbody>
</table>
<p>NOTE: The aircraft can be listed in any order, so long as only the ones capable of the lift are printed.</p>
</div>

","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(payload_weight):
    result = """"
    
    if payload_weight <= 6000:
        result += ""V-22 Osprey\n""

    if payload_weight <= 42000:
        result += ""C-130 Hercules\n""
        
    if payload_weight <= 169000:
        result += ""KC-10 Extender\n""

    if payload_weight <= 170900:
        result += ""C-17 Globemaster\n""

    if payload_weight <= 285000:
        result += ""C-5 Galaxy\n""

    if payload_weight > 285000:
        result += ""Too Heavy for Airlift\n""
    
    return result.strip().split('\n')


def run_test(payload_weight):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", payload_weight, ""lbs"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_7_payload.py"", [payload_weight], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(payload_weight)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 5999), 1))
    run_test(6000)
    run_test(round(random.uniform(6001, 41999), 1))
    run_test(42000)
    run_test(round(random.uniform(42001, 168999), 1))
    run_test(169000)
    run_test(round(random.uniform(169001, 170899), 1))
    run_test(170900)
    run_test(round(random.uniform(170901, 284999), 1))
    run_test(285000)
    run_test(300000)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
224,a1_7_missilethreat,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>According to intelligence reports, the North Korean military uses at least 5 different classes of Ballistic Missiles. The names of these missiles, as well as their maximum theoretical range, are provided below:</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong>Missile Class</strong></td>
<td><strong>Maximum Range (inclusive, in Kilometers)</strong></td>
</tr>
<tr>
<td>Hwasong-6</td>
<td>500</td>
</tr>
<tr>
<td>KN-11</td>
<td>1200</td>
</tr>
<tr>
<td>Musudan BM-25</td>
<td>4000</td>
</tr>
<tr>
<td>Hwasong-14</td>
<td>8000</td>
</tr>
<tr>
<td>Taepodong-2</td>
<td>12000</td>
</tr>
</tbody>
</table>
<p><br />Write a Python program that asks the user to enter the distance to a potential target (in Kilometers). Then, referencing the table, print out all of the Missile Classes that could potentially reach the target (one per line). If no missiles are in range, output ""Not in range"".</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width="""">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>1800</td>
<td>8000</td>
<td>18000</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Musudan BM-25<br />Hwason-14<br />Taepodong-2</td>
<td>
<p>Hwasong-14<br />Taepodong-2</p>
</td>
<td>Not in range</td>
</tr>
</tbody>
</table>
<p>NOTE: The missiles can be listed in any order, so long as only the ones in range are printed.</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(target_range):
    result = """"
    
    if target_range <= 500:
        result += ""Hwasong-6\n""

    if target_range <= 1200:
        result += ""KN-11\n""
        
    if target_range <= 4000:
        result += ""Musudan BM-25\n""

    if target_range <= 8000:
        result += ""Hwasong-14\n""

    if target_range <= 12000:
        result += ""Taepodong-2\n""

    if target_range > 12000:
        result += ""Not in range\n""
    
    return result.strip().split('\n')


def run_test(target_range):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", target_range, ""kilometers"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_7_missilethreat.py"", [target_range], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(target_range)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 499), 1))
    run_test(500)
    run_test(round(random.uniform(501, 1199), 1))
    run_test(1200)
    run_test(round(random.uniform(1201, 3999), 1))
    run_test(4000)
    run_test(round(random.uniform(4001, 7999), 1))
    run_test(8000)
    run_test(round(random.uniform(8001, 11999), 1))
    run_test(12000)
    run_test(12001)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
225,a1_7_evacuation,2,lab,1,"<html><head/><body><p><span style="" font-weight:600;"">PROBLEM STATEMENT:<br/></span></p><p>Terrorist groups in the past have created improvised explosive devices in various shapes and sizes. According to the National Counterterrorism Center, the following evacuation distances are appropriate for certain explosive devices.</p><table border=""1"" style="" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px;"" width=""200"" cellspacing=""0"" cellpadding=""0""><tr><td><p><span style="" font-weight:600;"">Explosive Container</span></p></td><td><p><span style="" font-weight:600;"">Evacuation Distance (inclusive, in Feet)</span></p></td></tr><tr><td><p>Pipe Bomb</p></td><td><p>850</p></td></tr><tr><td><p>Suitcase Bomb</p></td><td><p>1850</p></td></tr><tr><td><p>Sedan</p></td><td><p>2000</p></td></tr><tr><td><p>Cargo Van</p></td><td><p>2750</p></td></tr><tr><td><p>Semi-Trailer</p></td><td><p>7000</p></td></tr></table><p><br/>Write a Python program that asks the user to enter a distance to a device (in feet). Then, referencing the table, print out all of the explosive devices that could potentially reach a target at the specified distance (one per line). If no explosives can reach the specified distance, output &quot;Not in range&quot;.</p><p><span style="" font-weight:600;"">EXAMPLES:</span></p><table border=""1"" style="" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px;"" width=""200"" cellspacing=""0"" cellpadding=""0""><tr><td/><td><p><span style="" font-weight:600;"">Example 1</span></p></td><td><p><span style="" font-weight:600;"">Example 2</span></p></td><td><p><span style="" font-weight:600;"">Example 3</span></p></td></tr><tr><td><p><span style="" font-weight:600;"">Input</span></p></td><td><p>1900</p></td><td><p>2500</p></td><td><p>8000</p></td></tr><tr><td><p><span style="" font-weight:600;"">Output</span></p></td><td><p>Sedan<br/>Cargo Van<br/>Semi-Trailer</p></td><td><p>Cargo Van<br/>Semi-Trailer</p></td><td><p>Not in range</p></td></tr></table><p>NOTE: The devices can be listed in any order, so long as only the ones in range are printed.</p></body></html>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(target_range):
    result = """"
    
    if target_range <= 850:
        result += ""Pipe Bomb\n""

    if target_range <= 1850:
        result += ""Suitcase Bomb\n""
        
    if target_range <= 2000:
        result += ""Sedan\n""

    if target_range <= 2750:
        result += ""Cargo Van\n""

    if target_range <= 7000:
        result += ""Semi-Trailer\n""

    if target_range > 7000:
        result += ""Not in range\n""
    
    return result.strip().split('\n')


def run_test(target_range):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", target_range, ""feet"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_7_evacuation.py"", [target_range], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(target_range)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 899), 1))
    run_test(850)
    run_test(round(random.uniform(851, 1849), 1))
    run_test(1850)
    run_test(round(random.uniform(1851, 1999), 1))
    run_test(2000)
    run_test(round(random.uniform(2001, 2749), 1))
    run_test(2750)
    run_test(round(random.uniform(2751, 7999), 1))
    run_test(7000)
    run_test(7001)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
226,a1_7_digitalstorage,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Assume someone takes hundreds of photos on their smartphone every week. They are seeking the best and least expensive alternatives to store/share their images because their phone's storage capacity is limited. Using the table below, determine which storage options they should consider, assuming each image has an average file size of 6 MB.</p>
<p>&nbsp;</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong>Storage Option</strong></td>
<td><strong>Short Name</strong></td>
<td><strong>Number of Images (inclusive)</strong></td>
</tr>
<tr>
<td>CD-ROM (700 MB)</td>
<td>CD</td>
<td>116</td>
</tr>
<tr>
<td>DVD-ROM (4.7 GB)</td>
<td>DVD</td>
<td>780</td>
</tr>
<tr>
<td>USB Thumb Drive (16 GB)</td>
<td>USB Small</td>
<td>2660</td>
</tr>
<tr>
<td>USB Thumb Drive (64 GB)</td>
<td>USB Large</td>
<td>10600</td>
</tr>
<tr>
<td>Portable Hard Drive (256 GB)</td>
<td>Portable HDD</td>
<td>42600</td>
</tr>
</tbody>
</table>
<p><br />Write a Python program that asks the user to enter the number of images that need to be shared/stored (non-negative, whole number). Then, referencing the table above, print out all the storage options (by Short Name) capable of holding that many images (one per line). If no storage options are capable of storing that many images, output ""Consider Cloud Storage"".</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width="""">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>2000</td>
<td>4000</td>
<td>45000</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>USB Small<br />USB Large<br />Portable HDD</td>
<td>
<p>USB Large<br />Portable HDD</p>
</td>
<td>Consider Cloud Storage</td>
</tr>
</tbody>
</table>
<p>NOTE: The devices can be listed in any order, so long as only the ones in range are printed.</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(num_images):
    result = """"
    
    if num_images <= 116:
        result += ""CD\n""

    if num_images <= 780:
        result += ""DVD\n""
        
    if num_images <= 2660:
        result += ""USB Small\n""

    if num_images <= 10600:
        result += ""USB Large\n""

    if num_images <= 42600:
        result += ""Portable HDD\n""

    if num_images > 42600:
        result += ""Consider Cloud Storage\n""
    
    return result.strip().split('\n')


def run_test(num_images):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", num_images, ""images"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_7_digitalstorage.py"", [num_images], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(num_images)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(int(random.uniform(0, 115)))
    run_test(116)
    run_test(int(random.uniform(117, 779)))
    run_test(780)
    run_test(int(random.uniform(781, 2659)))
    run_test(2660)
    run_test(int(random.uniform(2661, 10599)))
    run_test(10600)
    run_test(int(random.uniform(10601, 42599)))
    run_test(42600)
    run_test(45000)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
227,a1_7_broadband,2,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Choosing the right broadband speed for your internet connection depends on which online activities you plan on engaging while online. Using the table below, determine which activities are possible with a given broadband speed, given in Kilobits per second (Kbps).</p>
<p>&nbsp;</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong>Activity</strong></td>
<td><strong>Short Name</strong></td>
<td><strong>Minimum Broadband Speed <br />(inclusive, in Kbps)</strong></td>
</tr>
<tr>
<td>Social Media</td>
<td>Social Media</td>
<td>1000</td>
</tr>
<tr>
<td>Multiplayer Gaming</td>
<td>Gaming</td>
<td>4000</td>
</tr>
<tr>
<td>HD Video Conferencing</td>
<td>Video Conferencing</td>
<td>6000</td>
</tr>
<tr>
<td>File Downloading</td>
<td>File Downloads</td>
<td>10000</td>
</tr>
<tr>
<td>Stream Ultra HD 4K Video</td>
<td>HD 4K Video</td>
<td>25000</td>
</tr>
</tbody>
</table>
<p><br />Write a Python program that asks the user to enter the broadband speed in Kbps. Then, referencing the table above, print out all the activities (by Short Name) that can be achieved using that speed (one per line). If the broadband speed is less than 1000 Kbps, output ""Upgrade to Broadband"".</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width="""">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>8500</td>
<td>5000</td>
<td>750</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>
<p>Social Media<br />Gaming<br />Video Conferencing</p>
</td>
<td>
<p>Social Media<br />Gaming</p>
</td>
<td>Upgrade to Broadband</td>
</tr>
</tbody>
</table>
<p>NOTE: The activities can be listed in any order, so long as only the ones in range are printed.</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(speed):
    result = """"
    
    if speed >= 1000:
        result += ""Social Media\n""

    if speed >= 4000:
        result += ""Gaming\n""
        
    if speed >= 6000:
        result += ""Video Conferencing\n""

    if speed >= 10000:
        result += ""File Downloads\n""

    if speed >= 25000:
        result += ""HD 4K Video\n""

    if speed < 1000:
        result += ""Upgrade to Broadband\n""
    
    return result.strip().split('\n')


def run_test(speed):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", speed, ""Kbps"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_7_broadband.py"", [speed], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(speed)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 999), 1))
    run_test(1000)
    run_test(round(random.uniform(1001, 4999), 1))
    run_test(4000)
    run_test(round(random.uniform(4001, 5999), 1))
    run_test(6000)
    run_test(round(random.uniform(6001, 9999), 1))
    run_test(10000)
    run_test(round(random.uniform(10001, 24999), 1))
    run_test(25000)
    run_test(30000)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
228,a1_6_woodshop,2,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have a personal woodshop and want to easily calculate whether you can afford the board materials for a project. It is unlikely you can obtain the exact amount of board materials that you may need for the project because wood planks are provided in fixed lengths.</p>
<p>Write an algorithm that asks for:</p>
<ul>
<li>
<ul>
<li>The total length of board materials required for the project</li>
<li>The budget (in dollars--do not worry about the dollar sign)</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then output:</p>
<ul>
<li>
<ul>
<li>The number of boards needed for the project (Hint: use math.ceil(VALUE) to round up to the next full board).</li>
<li>The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)</li>
<li>Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of boards is greater than or not greater than the budget, respectfully.</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Assume your local lumberyard sells each board in <strong>5.33</strong> feet pieces at <strong>$45.25</strong> per board. You may assume that all inputs are non-negative numbers.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<p>&nbsp;</p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td>Input</td>
<td>26<br />250</td>
<td>
<p>46<br />300</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>5<br />226.25<br />Within Budget</td>
<td>9<br />407.25<br />Over Budget</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(total_bf, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    total_boards = math.ceil(total_bf/5.33)
    total_cost = 45.25*total_boards
    
    
    if total_cost > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_6_woodshop.py"", [total_bf, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], total_boards):
        print(""Number of Boards Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount. Expected:"", total_boards)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], total_cost):
        print(""Cost of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", total_cost)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    for x in range(4):
        run_test(round(random.uniform(10, 50), 1), random.randint(100, 500))
    run_test(round(random.uniform(10, 100), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
229,a1_6_scuba,2,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Recreational SCUBA divers have to plan out how many air tanks they will need in order to safely dive. The amount varies per diver because each person consumes air at a different rate. This rate is commonly called Surface Air Consumption. You want to figure whether you can afford the air requirements for the trips that you are planning.</p>
<p>Write an algorithm that asks for:</p>
<ul>
<li>
<ul>
<li>The total dive time for the trip in minutes&nbsp;</li>
<li>The air budget (in dollars--do not worry about the dollar sign)</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then output:</p>
<ul>
<li>
<ul>
<li>The number of liters needed for the project.</li>
<li>The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)</li>
<li>Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of compressed air is greater than or not greater than the budget, respectfully.</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Assume that your Surface Air Consumption is <strong>14.5</strong> liters/minute, and that air costs <strong>2 cents</strong> per liter. You may assume that all inputs are non-negative numbers.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<p>&nbsp;</p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>180<br />70</td>
<td>
<p>120<br />30</p>
</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>2610.0<br />52.2<br />Within Budget</td>
<td>1740.0<br />34.800000000000004<br />Over Budget</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(target_minutes, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    
    total_liters = target_minutes*14.5
    total_cost = total_liters*.02
        
    if total_cost > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_6_scuba.py"", [target_minutes, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], total_liters):
        print(""Amount of Air Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount. Expected:"", total_liters)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], total_cost):
        print(""Cost of Air Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", total_cost)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    for x in range(4):
        run_test(round(random.uniform(10,100), 1), random.randint(10, 50))
    run_test(round(random.uniform(10,100), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
230,a1_6_runway,2,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>The CSAF has authorized new runways for any base that can accomplish the project under their current budget. The new runways will be solid concrete with their lengths measured in meters.</p>
<p>Write an algorithm that asks for:</p>
<ul>
<li>
<ul>
<li>The length of runway to be built (in meters)</li>
<li>The base&rsquo;s budget (in dollars--do not worry about the dollar sign, do not round to the nearest)</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then output:</p>
<ul>
<li>
<ul>
<li>The amount of concrete (in tons) needed for the base's runway</li>
<li>The estimated cost (in dollars--do not output a dollar sign)</li>
<li>Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of materials is greater than or not greater than the base's budget, respectfully.</li>
</ul>
</li>
</ul>
<p>Assume that each meter of runway<sup>&nbsp;</sup>requires<strong>&nbsp;2.5</strong>&nbsp;tons of concrete to build, and that concrete costs&nbsp;<strong>$75.50</strong>&nbsp;per ton. You may assume that all inputs are non-negative numbers.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td width=""214"">&nbsp;</td>
<td width=""215"">
<p>Example 1</p>
</td>
<td width=""214"">
<p>Example 2</p>
</td>
</tr>
<tr>
<td width=""214"">
<p>Input</p>
</td>
<td width=""215"">
<p>2000<br />400000</p>
</td>
<td width=""214"">
<p>1500<br />250000</p>
</td>
</tr>
<tr>
<td width=""214"">
<p>Output</p>
</td>
<td width=""215"">
<p>5000.0<br />377500.0<br />Within Budget</p>
</td>
<td width=""214"">
<p>3750.0<br />283125.0<br />Over Budget</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(runway_length, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    tons_of_concrete = 2.5 * runway_length
    cost_of_materials = 75.50 * tons_of_concrete
    if cost_of_materials > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_6_runway.py"", [runway_length, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], tons_of_concrete):
        print(""Amount of Concrete Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount. Expected:"", tons_of_concrete)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):
        print(""Cost of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", cost_of_materials)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(500, 3000), 1), random.randint(100000, 500000))
    run_test(round(random.uniform(500, 3000), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)









",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
231,a1_6_printer,2,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>A 3D printer converts computer generated models into physical objects by heating and extruding a filament known as Polylactic Acid (PLA). PLA, normally sold in spools, is directly fed to the printer head like a thread. You want to determine if you can afford to 3D print a project given its volume of material.</p>
<p>Write an algorithm that asks for:</p>
<ul>
<li>
<ul>
<li>The volume of the 3D model to be printed (in cm<sup>3</sup>)</li>
<li>The user's budget (in dollars--do not worry about the dollar sign, do not round to the nearest)</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then output:</p>
<ul>
<li>
<ul>
<li>The length of material (in meters) needed to produce the object</li>
<li>The estimated cost (in dollars--do not output a dollar sign)</li>
<li>Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of materials is greater than or not greater than the user's budget, respectfully.</li>
</ul>
</li>
</ul>
<p>Assume that each cm<sup>3&nbsp;</sup>requires<strong>&nbsp;0.312</strong>&nbsp;meters of PLA to print, and that PLA filament costs&nbsp;<strong>$0.063</strong>&nbsp;per meter. You may assume that all inputs are non-negative numbers.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td>Example 1</td>
<td>Example 2</td>
</tr>
<tr>
<td>Input</td>
<td>15.0<br />2.5</td>
<td>500.0<br />5.0</td>
</tr>
<tr>
<td>Output</td>
<td>4.68<br />0.29484<br />Within Budget</td>
<td>156.0<br />9.828<br />Over Budget</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(volume, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    length_of_materials = 0.312 * volume
    cost_of_materials = 0.063 * length_of_materials
    if cost_of_materials > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_6_printer.py"", [volume, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], length_of_materials):
        print(""Length of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Length. Expected:"", length_of_materials)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):
        print(""Cost of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", cost_of_materials)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 100), 1), random.randint(10, 50))
    run_test(round(random.uniform(0, 100), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
232,a1_6_fueldepot,2,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Fuel in the military is essential to conducting operations. Balancing mission requirements against budgetary constraints is a constant concern.</p>
<p>Write an algorithm that asks for:</p>
<ul>
<li>
<ul>
<li>The distance to a target in miles</li>
<li>The budget (in dollars--do not worry about the dollar sign)</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then output:</p>
<ul>
<li>
<ul>
<li>The amount of fuel (in gallons) needed to reach the target</li>
<li>The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)</li>
<li>Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of fuel is greater than or not greater than the budget, respectfully.</li>
</ul>
</li>
</ul>
<p>Assume that the convoy can get<strong>&nbsp;12.5</strong>&nbsp;miles to the gallon, and that the current price of fuel is&nbsp;<strong>$3.73</strong>&nbsp;per gallon. You may assume that all inputs are non-negative numbers.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width="""">
<tbody>
<tr>
<td>&nbsp;</td>
<td>Example 1</td>
<td>Example 2</td>
</tr>
<tr>
<td>Input</td>
<td>130.7<br />50.50</td>
<td>
<p>750<br />100</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>10.456<br />39.0009<br />Within Budget</td>
<td>60.0<br />223.80<br />Over Budget</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(target_distance, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    fuel_required = target_distance / 12.5
    cost_of_materials = 3.73 * fuel_required
    
    if cost_of_materials > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_6_fueldepot.py"", [target_distance, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], fuel_required):
        print(""Amount of Fuel Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount. Expected:"", fuel_required)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):
        print(""Cost of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", cost_of_materials)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(500, 3000), 1), random.randint(100000, 500000))
    run_test(round(random.uniform(500, 3000), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
233,a1_4_speed,2,lab,1,"<div>
<div>
<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a partially complete Python program that contains 2 variables.</p>
<ol>
<li>aircraft_speed (input by the user in mph)</li>
<li>speed_of_sound (already initialized in mph)</li>
</ol>
<p>&nbsp;</p>
<p>Add code to the end of this program that will output:</p>
<ul>
<li>
<ul>
<li>
<pre>Faster than Mach 1 </pre>
If the aircraft speed is higher than the speed of sound<br /><br /></li>
<li>
<pre>Mach 1 </pre>
If the aircraft speed is equal to the speed of sound<br /><br /></li>
<li>
<pre>Slower than Mach 1 </pre>
If the aircraft speed is lower than the speed of sound<br /><br /></li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>800</td>
<td>767.269</td>
<td>450.8</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Faster than Mach 1</td>
<td>Mach 1</td>
<td>Slower than Mach 1</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(speed):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing speed ="", speed, ""MPH"")
    print(""----------------------------------"")
    
    if speed > 767.269:
        solution = ""Faster than Mach 1""
    elif speed == 767.269:
        solution = ""Mach 1""
    else:
        solution = ""Slower than Mach 1""
    
    output, error_message = autograder.run_script(""a1_4_speed.py"", [speed])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(768.0, 1000.0), 1))
    run_test(767.269)
    run_test(round(random.uniform(0.0, 767.0), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
234,a1_4_satellite,2,skill,1,"<div id=""question_138313788_question_text"" class=""question_text user_content enhanced"">
          

<p><strong>PROBLEM STATEMENT:</strong></p>
<p>You have been provided with a partially complete Python program that contains 2 variables.</p>
<ol>
<li>satellite_speed (input by the user in km/s)</li>
<li>orbit_speed (already initialize in km/s)</li>
</ol>
<p>&nbsp;</p>
<p>Add code to the end of this program that will output:</p>
<ul>
<ul>
<li style=""list-style-type: none;"">
<ul>
<li>
<pre>Crashed to Earth</pre>
<p>If the speed of the satellite is below the orbital speed.</p>
</li>
<li>
<pre>In Orbit</pre>
<p>If the speed of the satellite is equal to the orbital speed.</p>
</li>
<li>
<pre>Lost to Space</pre>
<p>If the speed of the satellite is above the orbital speed.</p>
</li>
</ul>
</li>
</ul>
</ul>
<p>&nbsp;</p>
<p><strong>&nbsp;</strong></p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width=""859"">
<tbody>
<tr>
<td width=""215""></td>
<td width=""215"">
<p><strong>Example 1</strong></p>
</td>
<td width=""214"">
<p><strong>Example 2</strong></p>
</td>
<td width=""214"">
<p><strong>Example 3</strong></p>
</td>
</tr>
<tr>
<td width=""215"">
<p><strong>Input</strong></p>
</td>
<td width=""215"">
<p>3</p>
</td>
<td width=""214"">
<p>7.8</p>
</td>
<td width=""214"">
<p>9</p>
</td>
</tr>
<tr>
<td width=""215"">
<p><strong>Output</strong></p>
</td>
<td width=""215"">
<p>Crashed to Earth</p>
</td>
<td width=""214"">
<p>In Orbit</p>
</td>
<td width=""214"">
<p>Lost to Space</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
      </div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(speed):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing speed ="", speed, ""km/s"")
    print(""----------------------------------"")
    
    if speed > 7.8:
        solution = ""Lost to Space""
    elif speed == 7.8:
        solution = ""In Orbit""
    else:
        solution = ""Crashed to Earth""
    
    output, error_message = autograder.run_script(""a1_4_satellite.py"", [speed])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(7.8, 20), 1))
    run_test(7.8)
    run_test(round(random.uniform(0.0, 7.7), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
235,a1_4_goldilocks,2,skill,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a partially complete Python program that contains 2 variables.</p>
<ol>
<li>porridge_temp (input by the user in &deg;F)</li>
<li>correct_temp (already initialized in &deg;F)</li>
</ol>
<p>&nbsp;</p>
<p>Add code to the end of this program that will output:</p>
<ul>
<li>
<ul>
<li>
<pre>Too Hot </pre>
When the porridge temp is above the correct temperature.<br /><br /></li>
<li>
<pre>Just Right </pre>
When the porridge temp is equal to the correct temperature<br /><br /></li>
<li>
<pre>Too Cold </pre>
When the porridge temp is below the correct temperature.<br /><br /></li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>110</td>
<td>105</td>
<td>98</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Too Hot</td>
<td>Just Right</td>
<td>Too Cold</td>
</tr>
</tbody>
</table>
</div>

","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(temp):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing temperature ="", temp, ""degrees"")
    print(""----------------------------------"")
    
    if temp > 105:
        solution = ""Too Hot""
    elif temp == 105:
        solution = ""Just Right""
    else:
        solution = ""Too Cold""
    
    output, error_message = autograder.run_script(""a1_4_goldilocks.py"", [temp])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(106, 130), 1))
    run_test(105)
    run_test(round(random.uniform(80, 104), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
236,a1_4_cards,2,skill,1,"<div>
<div>
<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a partially complete Python program that contains 2 variables.</p>
<ol>
<li>number_of_cards (input by the user)</li>
<li>cards_needed (already initialized)</li>
</ol>
<p>&nbsp;</p>
<p>Add code to the end of this program that will output whether you have enough cards to make a full deck of 52 cards (already initialized):</p>
<ul>
<li>
<ul>
<li>
<pre>Too many cards </pre>
If the number of cards is more than the cards needed<br /><br /></li>
<li>
<pre>Full deck</pre>
If the number of cards is equal to the cards needed<br /><br /></li>
<li>
<pre>Not enough cards </pre>
If the number of cards is fewer than the cards needed<br /><br /></li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<p>&nbsp;</p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>57</td>
<td>52</td>
<td>38</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Too many cards</td>
<td>Full deck</td>
<td>Not enough cards</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(num_cards):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing number of cards ="", num_cards, ""cards"")
    print(""----------------------------------"")
    
    if num_cards > 52:
        solution = ""Too many cards""
    elif num_cards == 52:
        solution = ""Full deck""
    else:
        solution = ""Not enough cards""
    
    output, error_message = autograder.run_script(""a1_4_cards.py"", [num_cards])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(53, 60)))
    run_test(52)
    run_test(round(random.uniform(0, 51)))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
237,a1_4_arrow,2,skill,1,"<div>
<div>
<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a partially complete Python program that contains 2 variables.</p>
<ol>
<li>arrow_height (input by the user in feet)</li>
<li>apple_height (already initialized in feet)</li>
</ol>
<p>&nbsp;</p>
<p>Add code to the end of this program that will output:</p>
<ul>
<li>
<ul>
<li>
<pre>Arrow too high </pre>
If the arrow height is higher than the apple<br /><br /></li>
<li>
<pre>Direct hit</pre>
If the arrow height is equal to the apple<br /><br /></li>
<li>
<pre>Arrow too low </pre>
If the arrow is lower than the apple<br /><br /></li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<p>&nbsp;</p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>7.1</td>
<td>6.2</td>
<td>5.9</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Arrow too high</td>
<td>Direct hit</td>
<td>Arrow too low</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(height):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing height ="", height, ""feet"")
    print(""----------------------------------"")
    
    if height > 6.2:
        solution = ""Arrow too high""
    elif height == 6.2:
        solution = ""Direct hit""
    else:
        solution = ""Arrow too low""
    
    output, error_message = autograder.run_script(""a1_4_arrow.py"", [height])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(6.2, 20), 1))
    run_test(6.2)
    run_test(round(random.uniform(0.0, 6.1), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
238,a1_3_spheres,2,skill,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You are trying to write a program that calculates the volume of a multiple spheres. The template provided to you defines 2 variables:</p>
<ul>
<li><strong>radius</strong>&nbsp;- radius of the sphere</li>
<li><strong>total</strong>&nbsp;- The total amount of spheres</li>
</ul>
<p>&nbsp;</p>
<p>Calculate the volume, using the following formula:</p>
<div data-var=""V"">V=4/3&nbsp;&pi;&nbsp;r<sup>3</sup> t</div>
<p>Where . . .</p>
<ul>
<li>
<ul>
<li><strong>&pi;</strong>&nbsp;is the mathematical constant (approximately equal to&nbsp;3.14... -- see the HINT for more details)</li>
<li><strong>r</strong>&nbsp;is the radius of the cylinder</li>
<li><strong>t</strong>&nbsp;is the total amount of spheres</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Store the answer in a variable called<strong>&nbsp;volume</strong>. You do not need to print the variable.</p>
<p>&nbsp;</p>
<p><strong>HINT:</strong></p>
<p>The math module contains the mathematical constant,&nbsp;&pi;. To use it, simply type&nbsp;<strong>math.pi</strong></p>
</div>

","from cs110 import autograder
import random, math

from a1_3_spheres import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (4/3) * (radius**3)*total
    file = open(""a1_3_spheres.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see if variable 'volume' exists . . . "", end='')
    if 'volume' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'volume' . . . "", end='')
        if 'volume' in globals() and autograder.equals(volume, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
239,a1_3_radius,2,skill,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You are trying to write a program that calculates the volume of multiple identical cylinders. The template provided to you defines 3 variables:</p>
<ul>
<li><strong>radius</strong>&nbsp;- radius of the cylinders</li>
<li><strong>height</strong>- height of the cylinders</li>
<li><strong>total</strong>&nbsp;- The total amount of cylinders</li>
</ul>
<p>&nbsp;</p>
<p>Calculate the volume, using the following formula:</p>
<div data-var=""V"">V =&nbsp;&pi;&nbsp;r<sup>2 </sup>h t</div>
<p>Where . . .</p>
<ul>
<li>
<ul>
<li><strong>&pi;</strong>&nbsp;is the mathematical constant (approximately equal to&nbsp;3.14... -- see the HINT for more details)</li>
<li><strong>r</strong>&nbsp;is the radius of the cylinder</li>
<li><strong>h&nbsp;</strong>is the height of the cylinder</li>
<li><strong>t</strong>&nbsp;is the total amount of cylinders</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Store the answer in a variable called<strong> volume</strong>. You do not need to print the variable.</p>
<p>&nbsp;</p>
<p><strong>HINT:</strong></p>
<p>The math module contains the mathematical constant, &pi;. To use it, simply type&nbsp;<strong>math.pi</strong></p>
</div>","from cs110 import autograder
import random, math

from a1_3_radius import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (radius**2) * height * total
    file = open(""a1_3_radius.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see areif variable 'volume' exists . . . "", end='')
    if 'volume' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'volume' . . . "", end='')
        if 'volume' in globals() and autograder.equals(volume, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
240,a1_3_interest,2,skill,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You are trying to write a program that calculates the amount of money a person will earn from an investment. The template provided to you defines 3 variables:</p>
<ul>
<li><strong>principal_amount</strong>&nbsp;- The principal (i.e., starting) amount of money that a person has</li>
<li><strong>interest_rate</strong>&nbsp;- The interest rate</li>
<li><strong>time</strong>&nbsp;- The length of the investment (in months)</li>
</ul>
<p>&nbsp;</p>
<p>Calculate the amount of money earned, using the following formula:</p>
<pre>amount = pe<sup>rt</sup></pre>
<p>Where . . .</p>
<ul>
<li>
<ul>
<li><strong>p</strong>&nbsp;is the principal amount</li>
<li><strong>e</strong>&nbsp;is the mathematical constant (approximately equal to&nbsp;2.718... -- see the HINT for more details)</li>
<li><strong>r</strong>&nbsp;is the interest rate</li>
<li><strong>t</strong>&nbsp;is the time</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Store the answer in a variable called&nbsp;<strong>amount. </strong>You do not need to print the variable.</p>
<p>&nbsp;</p>
<p><strong>HINT:</strong></p>
<p>The math module contains the mathematical constant, e. To use it, simply type&nbsp;<strong>math.e</strong></p>
</div>
","from cs110 import autograder
import random, math

from a1_3_interest import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = principal_amount * math.e**(interest_rate * time)
    file = open(""a1_3_interest.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see if variable 'amount' exists . . . "", end='')
    if 'amount' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.e' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'amount' . . . "", end='')
        if 'amount' in globals() and autograder.equals(amount, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
241,a1_3_cones,2,skill,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You are trying to write a program that calculates the volume of multiple identical cones. The template provided to you defines 3 variables:</p>
<ul>
<li><strong>radius</strong>&nbsp;- radius of the cones</li>
<li><strong>height</strong>- height of the cones</li>
<li><strong>total</strong>&nbsp;- The total amount of cones</li>
</ul>
<p>&nbsp;</p>
<p>Calculate the volume, using the following formula:</p>
<div data-var=""V"">V =&nbsp;&pi;&nbsp;r<sup>2(</sup>h/3)t</div>
<p>Where . . .</p>
<ul>
<li>
<ul>
<li><strong>&pi;</strong>&nbsp;is the mathematical constant (approximately equal to&nbsp;3.14... -- see the HINT for more details)</li>
<li><strong>r</strong>&nbsp;is the radius of the cones</li>
<li><strong>h&nbsp;</strong>is the height of the cones</li>
<li><strong>t</strong>&nbsp;is the total amount of cones</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Store the answer in a variable called<strong> volume</strong>. You do not need to print the variable.</p>
<p>&nbsp;</p>
<p><strong>HINT:</strong></p>
<p>The math module contains the mathematical constant, e. To use it, simply type&nbsp;<strong>math.pi</strong></p>
</div>
","from cs110 import autograder
import random, math

from a1_3_cones import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (radius**2) * (height/3) * total
    file = open(""a1_3_cones.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see if variable 'volume' exists . . . "", end='')
    if 'volume' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'volume' . . . "", end='')
        if 'volume' in globals() and autograder.equals(volume, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
242,a1_3_circles,2,skill,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You are trying to write a program that calculates the area of multiple circles. The template provided to you defines 2 variables:</p>
<ul>
<li><strong>radius</strong>&nbsp;- radius of the circle</li>
<li><strong>total</strong>&nbsp;- The total amount of circles</li>
</ul>
<p>&nbsp;</p>
<p>Calculate the volume, using the following formula:</p>
<div data-var=""V"">V=&pi;&nbsp;r<sup>2</sup>t</div>
<p>Where . . .</p>
<ul>
<li>
<ul>
<li><strong>&pi;</strong>&nbsp;is the mathematical constant (approximately equal to&nbsp;3.14... -- see the HINT for more details)</li>
<li><strong>r</strong> is the radius of the circle</li>
<li><strong>t</strong> is the total amount of circles</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Store the answer in a variable called<strong> area</strong>. You do not need to print the variable.</p>
<p>&nbsp;</p>
<p><strong>HINT:</strong></p>
<p>The math module contains the mathematical constant,&nbsp;&pi;. To use it, simply type&nbsp;<strong>math.pi</strong></p>
</div>

","from cs110 import autograder
import random, math

from a1_3_circles import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (radius**2)*total
    file = open(""a1_3_circles.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see if variable 'area' exists . . . "", end='')
    if 'area' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'area' . . . "", end='')
        if 'area' in globals() and autograder.equals(area, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
243,a1_1_squad,2,skill,1,"<html><head/><body><p><span style="" font-weight:600;"">PROBLEM STATEMENT:<br/></span></p><p>Write the Python code needed to get three values from the user:</p><ol style=""margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;""><li style="" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"">A string representing the name of a cadet squadron (e.g., Grim Reapers). Store this value in a variable called<span style="" font-weight:600;""> sqd_name</span></li><li style="" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"">A floating point value representing average age for all cadets in the squadron. Store this value in a variable called <span style="" font-weight:600;"">sqd_avg_age</span></li><li style="" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"">An integer representing the weight of the ICBM in kilograms. Store this value in a variable called <span style="" font-weight:600;"">sqd_number</span></li></ol><p><span style="" font-weight:600;"">IMPORTANT:</span> Your template file contains a print statement that combines these values to produce an output (see Example). <span style="" font-weight:600;"">Do not modify this line.</span> Simply add your input statements in the space provided.</p><p><span style="" font-weight:600;"">EXAMPLE:</span></p><p>If the user types &quot;Grim Reapers&quot;, 20.5, and 31, your program should print: </p><pre style="" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;""><span style="" font-family:'Courier New';"">Cadet Squadron 31, aka &quot;Grim Reapers&quot;,</span></pre><pre style="" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;""><span style="" font-family:'Courier New';""> has an average cadet age of 20.5.</span></pre><p><br/></p></body></html>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    squad_list = [(""Warhawks"", 21.2, 40), (""Barnstormers"", 19.2, 23), (""Black Panthers"", 20.7, 29), (""Dogs of War"", 21.1, 3)]
    squad = squad_list[random.randint(0, len(squad_list) - 1)]
    solution = ""Cadet Squadron %s,  aka \""%s,\"" has an average age of %1.1f."" % (squad[2], squad[0], squad[1])
    
    output, error_message = autograder.run_script(""a1_1_squad.py"", [squad[0], squad[1], squad[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
244,a1_1_icbm,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write the Python code needed to get three values from the user:</p>
<ol>
<li>A string representing the name of an Intercontinental Ballistic Missile (ICBM) (e.g., Minuteman). Store this value in a variable called<strong>&nbsp;icbm</strong><strong>_name</strong></li>
<li>A floating point value representing the length of this missile in meters. Store this value in a variable called&nbsp;<strong>icbm_length</strong></li>
<li>An integer representing the weight of the ICBM in kilograms. Store this value in a variable called&nbsp;<strong>icbm_weight</strong></li>
</ol>
<p><strong>IMPORTANT:</strong> Your template file contains a print statement that combines these values to produce an output (see Example). <strong>Do not modify this line.</strong> Simply add your input statements in the space provided.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types ""Minuteman"", 16.3, and 290000, your program should print:</p>
<pre>The Minuteman has a total length of 16.3 meters and it weighs 290000 kilograms.</pre>
</div>
","#import cs110,
import random, math
from cs110 import autograder
num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    icbm_list = [(""Peacekeeper"", 21.8, 88450), (""Minuteman"", 16.36, 29000), (""Titan"", 31.394, 155000)]
    icbm = icbm_list[random.randint(0, len(icbm_list) - 1)]
    solution = ""The %s has a total length of %1.1f meters and it weighs %d kilograms."" % (icbm[0], icbm[1], icbm[2])
    
    output, error_message = autograder.run_script(""a1_1_icbm.py"", [icbm[0], icbm[1], icbm[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
245,a1_1_dorms,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write the Python code needed to get three values from the user:</p>
<ol>
<li>A string representing the name of an USAFA dormitory (e.g., Vandenburg). Store this value in a variable called<strong> dorm</strong><strong>_name</strong></li>
<li>A floating point value representing the total area, in square feet, that the dormitory contains. Store this value in a variable called <strong>dorm_area</strong></li>
<li>An integer representing the number cadets living in this dormitory. Store this value in a variable called <strong>dorm_population</strong></li>
</ol>
<p><strong>IMPORTANT:</strong> Your template file contains a print statement that combines these values to produce an output (see Example). <strong>Do not modify this line.</strong> Simply add your input statements in the space provided.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types ""Vandenberg"", 63383.5, and 1720, your program should print:</p>
<pre>The Vandenburg dormitory has an area of 63383.5 square feet and has 1720 cadets living in it.</pre>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    dorm_list = [(""Vandenburg"", 111874.79, 2212), (""Sijan"", 124488.97, 2112)]
    dorm = dorm_list[random.randint(0, len(dorm_list) - 1)]
    solution = ""The %s dormitory has an area of %1.1f square feet and has %d cadets living in it."" % (dorm[0], dorm[1], dorm[2])
    
    output, error_message = autograder.run_script(""a1_1_dorms.py"", [dorm[0], dorm[1], dorm[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
246,a1_1_bases,2,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write the Python code needed to get three values from the user:</p>
<ol>
<li>A string representing the name of an Air Force Base (e.g., Travis). Store this value in a variable called<strong>&nbsp;base</strong><strong>_name</strong></li>
<li>A floating point value representing the area of this base in acres. Store this value in a variable called&nbsp;<strong>base_acres</strong></li>
<li>An integer representing the number of buildings on this base. Store this value in a variable called&nbsp;<strong>building_</strong><strong>quantity</strong></li>
</ol>
<p><strong>IMPORTANT:</strong> Your template file contains a print statement that combines these values to produce an output (see Example). <strong>Do not modify this line.</strong> Simply add your input statements in the space provided.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types ""Travis"", 6383.5, and 1720, your program should print:</p>
<pre>Travis Air Force Base sits on 6383.5 acres and has 1720 buildings on it.</pre>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    base_list = [(""Travis"", 1874.79, 1288), (""Barksdale"", 1488.97, 1680), (""Eglin"", 1611.08, 1388)]
    base = base_list[random.randint(0, len(base_list) - 1)]
    solution = ""%s Air Force Base sits on %1.1f acres and has %d buildings on it."" % (base[0], base[1], base[2])
    
    output, error_message = autograder.run_script(""a1_1_bases.py"", [base[0], base[1], base[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
247,a1_1_aircraft,2,skill,1,"<div>
<p>&nbsp;</p>
<p>Write the Python code needed to get three values from the user:</p>
<ol>
<li>A string representing the name of an aircraft (e.g., F-16). Store this value in a variable called&nbsp;<strong>aircraft_name</strong></li>
<li>A floating point value representing the maximum speed of the aircraft. Store this value in a variable called&nbsp;<strong>aircraft_speed</strong></li>
<li>An integer representing the number of airplanes of this type owned by the USAF. Store this value in a variable called&nbsp;<strong>quantity</strong></li>
</ol>
<p><strong>IMPORTANT:</strong> Your template file contains a print statement that combines these values to produce an output (see Example). <strong>Do not modify this line.</strong> Simply add your input statements in the space provided.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types ""F-16"", 1500.1, and 600, your program should print:</p>
<pre>The F-16 has a top speed of 1500.1 MPH. The USAF has 600 in its inventory. </pre>
</div>
","#import cs110,
import random, math
from cs110 import autograder
num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    aircraft_list = [(""F-15"", 1874.79, 288), (""F-16"", 1488.97, 680), (""F-22"", 1611.08, 88)]
    aircraft = aircraft_list[random.randint(0, len(aircraft_list) - 1)]
    solution = ""The %s has a top speed of %1.1f MPH.  The USAF has %d in its inventory."" % (aircraft[0], aircraft[1], aircraft[2])
    
    output, error_message = autograder.run_script(""a1_1_aircraft.py"", [aircraft[0], aircraft[1], aircraft[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
248,Airstrike,3,project,0,"<div>
  <h2 style=""text-align: center;"">Comp Sci 110 Fall 2022 Final Project - Part 3 - Airstrike</h2>
  <p>Objective:  Create a drone simulation that can scan a battlefield for targets and engage them.</p>
  <p>Instructions: Read writeup (airstrike.pdf) and use the template file to begin work.</p>
  <br>
</div>","from cs110 import autograder
import random, math

def feedback_string_formatter(feedback_line, line_num):
    return ""Feedback "" + str(line_num) + "")\t"" + feedback_line + ""\n""

def parse_file_contents():
    #initiates provided inputs and expected inputs should be hard coded based on each test case
    numInputs = 0
    expectedInputs = 0
    
    #change file name to whatever the test file name is without '_test'
    file = open(""Airstrike.py"", ""r"")
    file_contents = file.read()
    lines = file_contents.split(""\n"")
    
    count_mission_complete = 0
    count_get_scan_results = 0
    count_set_destination = 0
    
    # parses each line to check for key components
    for line in lines:
        if len(line) > 0 and line[0] != '#':        
            if ""mission_complete()"" in line:
                count_mission_complete +=1
                
            if (""get_scan_results()"" in line) and '#' not in line:
                count_get_scan_results += 1
                
            if ""set_destination("" in line and '#' not in line:
                count_set_destination += 1
   
    output_message = """"
    
    message_count = 0
   
    if count_mission_complete > 0:
        output_message += feedback_string_formatter(""Good job including mission complete"", message_count)
        message_count += 1
    else:
        output_message += feedback_string_formatter(""Ensure you have a mission_complete()"", message_count)
        message_count += 1
        
    if count_get_scan_results == 0:
        output_message += feedback_string_formatter(""You aren't scanning the environment. That's a critical step."", message_count)
        message_count += 1
        
    if count_set_destination == 0:
        output_message += feedback_string_formatter(""You still need to navigate your drone!"", message_count)
        message_count += 1
        
    output_message += feedback_string_formatter(""You have run your Recon file against Autograder, make sure to Document and Comment before submission!"", message_count)
    output_message += ""IMPORTANT: To see your drone fly, run it again and type 'n' to open the graphics window!\n""
    output_message += ""IMPORTANT: The Autograder score will always be 0, your instructor will manually grade all submissions.\n""
    return output_message


# ---------------------------------------------------------------------
# Sample Unit Test
# ---------------------------------------------------------------------

# Runs the Python script and sees if it passes the test(s)
def parse_file_contents():
    print(too_many_inputs())
    
    return 0
        

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()",0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,0,1,0,0,0,
249,lsn21_bouncingball,3,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Using the pythonGraph animation template, create an animation of a bouncing ball. Your ball should start at a random location, and change direction each time it hits a side, top, or bottom of the window.<br /><br /></p>
<p>&nbsp;</p>
<p><strong>CHALLENGE:</strong></p>
<ol>
<li>Try to make the ball change color every time it hits a wall.</li>
</ol>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn21_bouncingball.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,
250,lsn21_bouncingtriangle,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Using the Bouncing Ball from the previous lab as a starting point, generate an animation of a bouncing triangle. The triangle's vertices should start at random locations, and bounce whenever the triangle hits a wall.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>HINTS</strong>:</p>
<ul>
<li>Try drawing 3 bouncing balls on the screen.</li>
<li>Once the balls are moving correctly, draw 3 lines to connect them!</li>
</ul>
</div>
","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn21_bouncingtriangle.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,
251,lsn12_fastestcar,3,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
    <p>Write a Python program with the definition of a new function named fastest_car and takes two lists of car info as
        parameters. The function will then <span style=""text-decoration: underline;""><strong>return</strong></span> the
        car model name with the higher top speed or ""Same speed"" if the top speeds are the same.</p>
    <p>The two parameters to the function are both a list with the same 3 types of elements, as follows:</p>
    <br>
    <table style=""border-collapse: collapse; width: 80%;"" border=""1"">
        <tbody>
            <tr>
                <td style=""width: 24.9835%;""></td>
                <td style=""width: 24.9835%; text-align: center;""><strong>Car Model</strong></td>
                <td style=""width: 24.9835%; text-align: center;""><strong>Cost</strong></td>
                <td style=""width: 24.9869%; text-align: center;""><strong>Top Speed</strong></td>
            </tr>
            <tr>
                <td style=""width: 24.9835%; text-align: center;""><strong>Value</strong></td>
                <td style=""width: 24.9835%;"">Ford Mustang</td>
                <td style=""width: 24.9835%;"">27205.00</td>
                <td style=""width: 24.9869%;"">163</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
    <table style=""border-collapse: collapse; width: 80%;"" border=""1"">
        <tbody>
            <tr>
                <td style=""width: 24.9835%;""></td>
                <td style=""width: 24.9835%; text-align: center;""><strong>Car Model</strong></td>
                <td style=""width: 24.9835%; text-align: center;""><strong>Cost</strong></td>
                <td style=""width: 24.9869%; text-align: center;""><strong>Top Speed</strong></td>
            </tr>
            <tr>
                <td style=""width: 24.9835%; text-align: center;""><strong>Value</strong></td>
                <td style=""width: 24.9835%;"">Chevy Corvette</td>
                <td style=""width: 24.9835%;"">66400.00</td>
                <td style=""width: 24.9869%;"">194</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
    <p><strong>EXAMPLE</strong>:</p>
    <table style=""border-collapse: collapse; width: 80%; margin-left: auto; margin-right: auto;"" border=""1"">
        <tbody>
            <tr>
                <td style=""width: 25%; text-align: center;""></td>
                <td style=""width: 25%; text-align: center;""><strong>Example</strong></td>
            </tr>
            <tr>
                <td style=""width: 25%; text-align: center;""><strong>Input Parameters to</strong>
                    <code>fastest_car()</code></td>
                <td style=""width: 55%; text-align: center;"">
                    <p><code>fastest_car([""Ford Mustang"", 27205.00, 163], [""Chevy Corvette"", 66400.00, 194])</code></p>
                </td>
            </tr>
            <tr>
                <td style=""width: 25%; text-align: center;""><strong>Outputs</strong></td>
                <td style=""width: 25%; text-align: center;"">Chevy Corvette</td>
            </tr>
        </tbody>
    </table>
</div>","from cs110 import autograder
import random, math
import lsn12_fastestcar

def solution(car1, car2):

    if car1[2] > car2[2]:
        return car1[0]
    elif car2[2] > car1[2]:
        return car2[0]
    else:
        return ""Same speed""

def test_passed():
    
    # 5 test strategies
    cars_list = []
    cars_list.append([""Honda Civic"", 18983.20, 127])
    cars_list.append([""Acura NSX"", 157500.39, 191])
    cars_list.append([""VW Golf GTI"", 28595.83, 130])
    cars_list.append([""Ford F-150 Raptor"", 45290.82, 107])
    cars_list.append([""Subaru BRZ"", 28955.38, 140])
    cars_list.append([""Mazda Mazdaspeed3"", 17424.30, 130])
    
    test_vals = []
    
    index_permutations = []
    # build all possible permutations except those with the same vehicle
    for i in range(len(cars_list)):
        for j in range(len(cars_list)):
            if i != j:
                index_permutations.append((i,j))
    
    # randomly choose 4 of the permutations
    for i in range(4):
        car_idx_pair = index_permutations[random.randint(0,len(index_permutations)-1)]
        first_car_idx = car_idx_pair[0]
        second_car_idx = car_idx_pair[1]
        
        index_permutations.remove(car_idx_pair)
        
        test_vals.append([cars_list[first_car_idx], cars_list[second_car_idx]])

    # same speed
    test_vals.append((cars_list[2], cars_list[5]))
  
    i = 0
    total_score = 0.0
    
    for val in test_vals:
        print('-'*10 + ""Test #"" + str(i) + '-'*10)
        
        output = lsn12_fastestcar.fastest_car(val[0], val[1])
        expected_output = solution(val[0], val[1])

        print(""Your Program's Output:"")
        print(output)

        if output == None:
            print(""INCORRECT - Your function did not return anything. Expected:"")
            print(str(expected_output))
        elif output.strip() == expected_output.strip():
            print(""CORRECT"")
            total_score += 100.0 / len(test_vals)
        else:
            print(""INCORRECT - Expected:"")
            print(str(expected_output))
            
        print()
        i += 1
    
    return total_score

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
252,lsn12_listrange,3,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
    <p>Write a Python program that obtains two whole numbers that represent the start and stop values for a range of numbers. You may assume the second number is always greater than the first.</p>
    <p>Using these start and stop values, print the two following items in order:</p>
    <p style=""padding-left: 40px;"">1.&nbsp; Print a list that starts at the start value and ends at (the list contains) the stop value</p>
    <p style=""padding-left: 80px;""><strong>HINT</strong>: Use <code>range()</code> to accomplish this. In order to print the result from range() as a list, surround it with list(), <code>list(range(#,#))</code>, like you surround input() with int() or float(), <code>int(input())</code>.</p>
    <p style=""padding-left: 40px;"">2.&nbsp; Print the size (how many numbers are contained) of that list</p>
    <p>&nbsp;</p>
    <p><strong>EXAMPLE:</strong></p>
    <table style=""border-collapse: collapse; width: 59.998%; margin-left: auto; margin-right: auto;"" border=""1"">
    <tbody>
    <tr>
    <td style=""width: 24.9835%; text-align: center;""></td>
    <td style=""width: 24.9835%; text-align: center;""><strong>Example 1</strong></td>
    <td style=""width: 24.9835%; text-align: center;""><strong>Example 2</strong></td>
    </tr>
    <tr>
    <td style=""width: 24.9835%; text-align: center;""><strong>Inputs</strong></td>
    <td style=""width: 24.9835%; text-align: center;"">
    <p>1</p>
    <p>10</p>
    </td>
    <td style=""width: 24.9835%; text-align: center;"">
    <p>1023</p>
    <p>1029</p>
    </td>
    </tr>
    <tr>
    <td style=""width: 24.9835%; text-align: center;""><strong>Outputs</strong></td>
    <td style=""width: 24.9835%; text-align: center;"">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<br>10</td>
    <td style=""width: 24.9835%; text-align: center;"">
    <p>[1023, 1024, 1025, 1026, 1027, 1028, 1029]<br>7</p>
    </td>
    </tr>
    </tbody>
    </table>
</div>","from cs110 import autograder
import random, math


def solution(test_start, test_stop):
    result = []
    
    result.append(list(range(test_start, test_stop+1)))
    result.append(len(range(test_start, test_stop+1)))
        
    return result

def test_passed():
    
    # 5 test strategies
    test_vals = []
    
    for j in range(5):
        test_val_start = random.randint(0,2048)
        test_val_stop = test_val_start + random.randint(9,16)
        test_vals.append((test_val_start, test_val_stop))
  
    i = 0
    total_score = 0.0
    
    for val in test_vals:
        print('-'*10 + ""Test #"" + str(i) + '-'*10)
        
        output, error_message = autograder.run_script(""lsn12_listrange.py"", [val[0], val[1]])
        expected_output = solution(val[0], val[1])
        
        lines = output.strip().split('\n')
        
        if lines[0].strip() == str(expected_output[0]) and autograder.equals(int(lines[1]), expected_output[1]):
            print(""CORRECT"")
            total_score += 100.0 / len(test_vals)
        else:
            print(""INCORRECT"")
            
        print()
        i += 1
    
    return total_score

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
253,lsn22_paint,3,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Using PythonGraph, create a simple paint application. Your program should draw circles on the window whenever the
        user presses the left mouse button. Your program should also watch for keyboard inputs, and allow the user to
        change colors and the size of the circle by pressing on different keys of your choice.</p>
    <p>The code template of a paint program has been provided to you as a starting point in paint. Use this code and
        make the necessary modifications in the Animation while loop.</p>
    <p>When you are finished, upload your Python code.</p>
</div>","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn22_paint.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
254,lsn12_pftscores,3,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
    <p>You are provided a list of PFT scores, already in the lab template, in a variable <code>pft_scores</code>
        arranged in no particular order.&nbsp;</p>
    <p>Write a Python program that obtains a new score from the user. If the score is valid (above zero and no greater
        than 500), add it to the list and print out the following two stats in this order:</p>
    <p style=""padding-left: 40px;"">1. <strong>average score&nbsp;</strong> HINT: use the functions <code>len()</code>
        and <code>sum()</code> on your list to find the average</p>
    <p style=""padding-left: 40px;"">2. <strong>range of scores</strong>, the difference between the largest score and
        smallest score. HINT: use the functions <code>min()</code> and <code>max()</code> on your list to find the range
    </p>
    <p>If the score is invalid (below zero or above 500), instead print:&nbsp; ""Invalid score provided"".</p>
    <p>&nbsp;</p>
    <p><strong>EXAMPLE:</strong></p>
    <table style=""border-collapse: collapse; width: 80%; margin-left: auto; margin-right: auto;"" border=""1"">
        <tbody>
            <tr>
                <td style=""width: 24.9835%; text-align: center;""></td>
                <td style=""width: 24.9835%; text-align: center;""><strong>Example 1</strong></td>
                <td style=""width: 24.9835%; text-align: center;""><strong>Example 2</strong></td>
                <td style=""width: 24.9869%; text-align: center;""><strong>Example 3</strong></td>
            </tr>
            <tr>
                <td style=""width: 24.9835%; text-align: center;""><strong>Input</strong></td>
                <td style=""width: 24.9835%; text-align: center;"">-5</td>
                <td style=""width: 24.9835%; text-align: center;"">328</td>
                <td style=""width: 24.9869%; text-align: center;"">65</td>
            </tr>
            <tr>
                <td style=""width: 24.9835%; text-align: center;""><strong>Outputs</strong></td>
                <td style=""width: 24.9835%; text-align: center;"">Invalid score provided</td>
                <td style=""width: 24.9835%; text-align: center;"">
                    <p>291.8</p>
                    <p>403</p>
                </td>
                <td style=""width: 24.9869%; text-align: center;"">
                    <p>274.26666666666665</p>
                    <p>408</p>
                </td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
    <p>&nbsp;</p>
    <br>
    <p>&nbsp;</p>

</div>","from cs110 import autograder
import random, math
#import lsn12_pftscores

pft_scores = [243, 394, 143, 288, 303, 473, 325, 273, 284, 198, 70, 289, 437, 329]


def solution(new_num):
    result = ''
    
    # Append number to num_list ONLY IF IT IS A valid number > 0
    if new_num >= 0 and new_num <= 500:

        temp_scores = pft_scores.copy()
        temp_scores.append(new_num)
        
        average = sum(temp_scores) / len(temp_scores)
        num_range = max(temp_scores) - min(temp_scores)
        
        result += str(average) + '\n'
        result += str(num_range) + '\n'
    else:
        result += ""Invalid score provided""
        
    return result

def test_passed():
    
    # 5 test strategies
    # 1) invalid, out of range low
    # 2) invalid, out of range high
    # 3) rand num that doesn't affect range
    # 4) rand num lower than current lowest, but valid
    # 5) rand num higher than current highest, but valid
    
    min_score = min(pft_scores)
    max_score = max(pft_scores)
    
    test_vals = []
    
    # random_low_invalid
    test_vals.append(random.randint(-1010,-1))
    #random_high_invalid
    test_vals.append(random.randint(501,5000))
    #random_mid_num
    test_vals.append(random.randint(min_score, max_score))
    #random_low
    test_vals.append(random.randint(0, min_score-1))
    #random_high
    test_vals.append(random.randint(max_score + 1, 500))
    
    i = 0
    total_score = 0.0
    
    for val in test_vals:
        print('-'*10 + ""Test #"" + str(i) + '-'*10)
        
        output, error_message = autograder.run_script(""lsn12_pftscores.py"", [val])
        expected_output = solution(val)
        
        lines = output.strip().split('\n')
        
        if expected_output.strip() == ""Invalid score provided"":
            if output.strip() == expected_output.strip():
                print(""CORRECT"")
                total_score += 100 / len(test_vals)
            else:
                print(""INCORRECT. Expected the following:"")
                print(expected_output)
        else:
            expected_lines = expected_output.strip().split('\n')
            
            if autograder.equals(float(expected_lines[0]), float(lines[0]), 0.99) and autograder.equals(float(expected_lines[1]), float(lines[1]), 0.99):
                print(""CORRECT"")
                total_score += 100 / len(test_vals)
            else:
                print(""INCORRECT. Expected the following:"")
                print(expected_output)
            
        print()
        i += 1
    
    return total_score

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,
255,Recon,3,project,0,"<div>
  <h2 style=""text-align: center;"">Comp Sci 110 Fall 2022 Final Project - Part 2 - Recon</h2>
  <p>Objective:  Create a drone simulation that can scan a battlefield for targets.</p>
  <p>Instructions: Read writeup (recon.pdf) and use the template file to begin work.</p>
  <br>
</div>","from cs110 import autograder
import random, math

def feedback_string_formatter(feedback_line, line_num):
    return ""Feedback "" + str(line_num) + "")\t"" + feedback_line + ""\n""

def too_many_inputs():
    #initiates provided inputs and expected inputs should be hard coded based on each test case
    numInputs = 0
    expectedInputs = 0
    
    #change file name to whatever the test file name is without '_test'
    file = open(""Recon.py"", ""r"")
    file_contents = file.read()
    lines = file_contents.split(""\n"")
    
    count_mission_complete = 0
    count_get_scan_results = 0
    count_set_destination = 0
    
    # parses each line to check for key components
    for line in lines:
        if len(line) > 0 and line[0] != '#':        
            if ""mission_complete()"" in line:
                count_mission_complete +=1
                
            if (""get_scan_results()"" in line) and '#' not in line:
                count_get_scan_results += 1
                
            if ""set_destination("" in line and '#' not in line:
                count_set_destination += 1
   
    output_message = """"
    
    message_count = 0
   
    if count_mission_complete > 0:
        output_message += feedback_string_formatter(""Good job including mission complete"", message_count)
        message_count += 1
    else:
        output_message += feedback_string_formatter(""Ensure you have a mission_complete()"", message_count)
        message_count += 1
        
    if count_get_scan_results == 0:
        output_message += feedback_string_formatter(""You aren't scanning the environment. That's a critical step."", message_count)
        message_count += 1
        
    if count_set_destination == 0:
        output_message += feedback_string_formatter(""You still need to navigate your drone!"", message_count)
        message_count += 1
        
    output_message += feedback_string_formatter(""You have run your Recon file against Autograder, make sure to Document and Comment before submission!"", message_count)
    output_message += ""IMPORTANT: To see your drone fly, run it again and type 'n' to open the graphics window!\n""
    output_message += ""IMPORTANT: The Autograder score will always be 0, your instructor will manually grade all submissions.\n""
    return output_message


# ---------------------------------------------------------------------
# Sample Unit Test
# ---------------------------------------------------------------------

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    print(too_many_inputs())
    
    return 0
    
        

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0,
256,Skywriter,3,project,0,"<div>
  <h2 style=""text-align: center;"">Comp Sci 110 Fall 2022 Final Project - Part 1 - Skywriter</h2>
  <p>Objective:  Create a drone simulation that can fly across a battlefield.</p>
  <p>Instructions: Read writeup (airstrike.pdf) and use the template file to begin work.</p>
  <br>
</div>","from cs110 import autograder
import random, math

def feedback_string_formatter(feedback_line, line_num):
    return ""Feedback "" + str(line_num) + "")\t"" + feedback_line + ""\n""

def too_many_inputs():
    #initiates provided inputs and expected inputs should be hard coded based on each test case
    numInputs = 0
    expectedInputs = 0
    
    #change file name to whatever the test file name is without '_test'
    file = open(""Skywriter.py"", ""r"")
    file_contents = file.read()
    lines = file_contents.split(""\n"")
    
    count_mission_complete = 0
    count_get_x_or_y = 0
    count_smoke = 0
    
    # parses each line to check for key components
    for line in lines:
        if len(line) > 0 and line[0] != '#':        
            if ""mission_complete()"" in line:
                count_mission_complete +=1
                
            if (""get_x_location()"" in line or ""get_y_location()"" in line) and '#' not in line:
                count_get_x_or_y += 1
                
            if ""smoke_on()"" in line or ""smoke_off()"" in line:
                count_smoke += 1
   
    output_message = """"
    
    message_count = 0
   
    if count_mission_complete > 0:
        output_message += feedback_string_formatter(""Good job including mission complete"", message_count)
        message_count += 1
    else:
        output_message += feedback_string_formatter(""Ensure you have a mission_complete()"", message_count)
        message_count += 1
        
    if count_get_x_or_y == 0:
        output_message += feedback_string_formatter(""You don't check the drone's location using get_x_location() or get_y_location(). That's a critical step."", message_count)
        message_count += 1
        
    if count_smoke == 0:
        output_message += feedback_string_formatter(""You will need to turn smoke on or off at least once."", message_count)
        message_count += 1
        
    output_message += feedback_string_formatter(""You have run your Skywriter file against Autograder, if this is the project, make sure to Document and Comment!"", message_count)
    output_message += ""IMPORTANT: To see your drone fly, run it again and type 'n' to open the graphics window!\n""
    output_message += ""IMPORTANT: The Autograder score will always be 0, your instructor will manually grade all submissions.\n""
    return output_message


# ---------------------------------------------------------------------
# Sample Unit Test
# ---------------------------------------------------------------------

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    print(too_many_inputs())
    
    return 0
    
        

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
257,lsn22_soundboard,3,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong>Using PythonGraph, create a ""soundboard"" application. Your program should
    display a list of colored buttons (i.e., rectangles). When the user clicks inside of a rectangle, the program plays
    a different sound.<a href=""https://canvas.instructure.com/courses/1762383/files/86200052/download?download_frd=1""
        data-api-endpoint=""https://canvas.instructure.com/api/v1/courses/1762383/files/86200052""
        data-api-returntype=""File""></a></p>
    <p>The provided template file comes with a single button implemented. Your job is to study this code and create at
        least 5 other buttons. Note: The buttons do not have to be laid out in the same arrangement, but they should
        look organized.</p>
    <p>When you are finished, upload your Python code. Do NOT upload any of the sound files.</p>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn22_soundboard.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
258,lsn8_practice4,3,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong>Write a program that asks the user for the area of three plots of land.</p>
<ul>
<li>The first area will be provided to you in ACRES</li>
<li>The second area will be provided to you in SQUARE MILES</li>
<li>The third area will be provided to you in SQUARE KILOMETERS</li>
</ul>
<p>Your program will output ""Plot X is the biggest"", replacing X with either a 1, 2, or 3 depending on if the first, second, or third plot of land is the biggest, respectively.&nbsp; For this problem, you may assume that the plots are all different sizes (e.g., no two plots will be the same size)</p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li><strong>1 acre = 0.0015625 square miles</strong></li>
<li><strong>1 sq kilometer = 0.386102 square miles</strong></li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table style=""margin-left: auto; margin-right: auto;"" border=""1"" width=""752"">
<tbody>
<tr>
<td style=""text-align: center;""></td>
<td style=""text-align: center;""><strong>EXAMPLE 1</strong></td>
<td style=""text-align: center;""><strong>EXAMPLE 2</strong></td>
</tr>
<tr>
<td style=""text-align: center;""><strong>Inputs</strong></td>
<td style=""text-align: center;"">
<p>35<br>0.25<br>1</p>
</td>
<td style=""text-align: center;"">
<p>150<br>1<br>2.2</p>
</td>
</tr>
<tr>
<td style=""text-align: center;""><strong>Expected Output</strong></td>
<td style=""text-align: center;"">Plot 3 is the biggest</td>
<td style=""text-align: center;"">Plot 2 is the biggest</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def solution(area_1, area_2, area_3):
    area_1 = area_1 * 0.0015625
    area_3 = area_3 * 0.386102

    if area_1 > area_2 and area_1 > area_3:
        return ""Plot 1 is the biggest""
    elif area_2 > area_1 and area_2 > area_3:
        return ""Plot 2 is the biggest""
    elif area_3 > area_1 and area_3 > area_2:
        return ""Plot 3 is the biggest""
    
    return ""This should never return""

def run_test(area1, area2, area3):
    global num_tests_run, num_tests_passed
    
    num_tests_run += 1
    expected_output = solution(area1, area2, area3)
        
    print(""--------------------------------------------"")
    print(""Comparing %1.1f acres, %1.1f sq miles, and %1.1f sq km"" % (area1, area2, area3))
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn8_practice4.py"", [area1, area2, area3])
    
    if output.strip() == expected_output:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", expected_output)
        print(""\n"")

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))
    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))
    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)











# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
259,lsn8_practice3,3,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong>Write a program that asks the user for the price of an item in US dollars / cents.&nbsp; Then calculate and print out the equivalent price of the item in:</p>
    <ul>
    <li style=""list-style-type: none;"">
    <ul>
    <li>British Pounds (1.25 USD per Pound)</li>
    <li>Korean Won (1 Won == 0.00083 USD)</li>
    <li>Mexican Pesos (1 Peso == 53.81 Won)</li>
    </ul>
    </li>
    </ul>
    <p>Print each currency on a separate line.</p>
</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    
    dollar_amount = round(random.uniform(1.00, 1000.00), 2)
    pound_amount = dollar_amount / 1.25
    won_amount = dollar_amount / 0.00083
    peso_amount = won_amount / 53.81
    
    output, error_message = autograder.run_script(""lsn8_practice3.py"", [dollar_amount])   
    lines = output.split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], pound_amount):
        print(""Correct Pound Conversion"")
        score += 33
    else:
        print(""Incorrect Pound Conversion.  Expected"", pound_amount)
        
    if len(lines) > 1 and autograder.equals(lines[1], won_amount):
        print(""Correct Won Conversion"")
        score += 33
    else:
        print(""Incorrect Won Conversion.  Expected"", won_amount)
        
    if len(lines) > 2 and autograder.equals(lines[2], peso_amount):
        print(""Correct Peso Conversion"")
        score += 34
    else:
        print(""Incorrect Peso Conversion.  Expected"", peso_amount)
    
    return score
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)










# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
260,lsn8_practice2,3,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You have been provided with a program that gets two (x, y) coordinates from
    the user in the following order: x1, y1, x2, y2.&nbsp; Write a program that calculates the distance between these
    two points, and prints them out. The distance formula is <span class=""math_equation_latex fade-in-equation""
        style=""null""><span class=""MathJax_Preview"" style=""color: inherit;""></span><span class=""MathJax_SVG""
            id=""MathJax-Element-1-Frame"" tabindex=""0""
            style=""font-size: 100%; display: inline-block; position: relative;""
            data-mathml=""<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><msqrt><msup><mrow><mo>(</mo><mi>x</mi><mn>1</mn><mo>&amp;#x2212;</mo><mi>x</mi><mn>2</mn><mo>)</mo></mrow><mn>2</mn></msup><mo>+</mo><msup><mrow><mo>(</mo><mi>y</mi><mn>1</mn><mspace width=&quot;mediummathspace&quot; /><mo>&amp;#x2212;</mo><mspace width=&quot;mediummathspace&quot; /><mi>y</mi><mn>2</mn><mo>)</mo></mrow><mn>2</mn></msup></msqrt></math>""
            role=""presentation""><svg xmlns:xlink=""http://www.w3.org/1999/xlink"" width=""27.224ex"" height=""4.824ex""
                viewBox=""0 -1437.2 11721.6 2077"" role=""img"" focusable=""false"" style=""vertical-align: -1.486ex;""
                aria-hidden=""true"">
                <g stroke=""currentColor"" fill=""currentColor"" stroke-width=""0"" transform=""matrix(1 0 0 -1 0 0)"">
                    <use xlink:href=""#MJSZ2-221A"" x=""0"" y=""119""></use>
                    <rect stroke=""none"" width=""10721"" height=""60"" x=""1000"" y=""1210""></rect>
                    <g transform=""translate(1000,0)"">
                        <use xlink:href=""#MJMAIN-28"" x=""0"" y=""0""></use>
                        <use xlink:href=""#MJMATHI-78"" x=""389"" y=""0""></use>
                        <use xlink:href=""#MJMAIN-31"" x=""962"" y=""0""></use>
                        <use xlink:href=""#MJMAIN-2212"" x=""1684"" y=""0""></use>
                        <use xlink:href=""#MJMATHI-78"" x=""2685"" y=""0""></use>
                        <use xlink:href=""#MJMAIN-32"" x=""3257"" y=""0""></use>
                        <use xlink:href=""#MJMAIN-29"" x=""3758"" y=""0""></use>
                        <use transform=""scale(0.707)"" xlink:href=""#MJMAIN-32"" x=""5866"" y=""675""></use>
                        <use xlink:href=""#MJMAIN-2B"" x=""4824"" y=""0""></use>
                        <g transform=""translate(5824,0)"">
                            <use xlink:href=""#MJMAIN-28"" x=""0"" y=""0""></use>
                            <use xlink:href=""#MJMATHI-79"" x=""389"" y=""0""></use>
                            <use xlink:href=""#MJMAIN-31"" x=""887"" y=""0""></use>
                            <use xlink:href=""#MJMAIN-2212"" x=""1831"" y=""0""></use>
                            <use xlink:href=""#MJMATHI-79"" x=""3054"" y=""0""></use>
                            <use xlink:href=""#MJMAIN-32"" x=""3552"" y=""0""></use>
                            <use xlink:href=""#MJMAIN-29"" x=""4052"" y=""0""></use>
                            <use transform=""scale(0.707)"" xlink:href=""#MJMAIN-32"" x=""6282"" y=""675""></use>
                        </g>
                    </g>
                </g>
            </svg><span class=""MJX_Assistive_MathML"" role=""presentation""><math
                    xmlns=""http://www.w3.org/1998/Math/MathML"">
                    <msqrt>
                        <msup>
                            <mrow>
                                <mo>(</mo>
                                <mi>x</mi>
                                <mn>1</mn>
                                <mo></mo>
                                <mi>x</mi>
                                <mn>2</mn>
                                <mo>)</mo>
                            </mrow>
                            <mn>2</mn>
                        </msup>
                        <mo>+</mo>
                        <msup>
                            <mrow>
                                <mo>(</mo>
                                <mi>y</mi>
                                <mn>1</mn>
                                <mspace width=""mediummathspace""></mspace>
                                <mo></mo>
                                <mspace width=""mediummathspace""></mspace>
                                <mi>y</mi>
                                <mn>2</mn>
                                <mo>)</mo>
                            </mrow>
                            <mn>2</mn>
                        </msup>
                    </msqrt>
                </math></span></span>
        <script type=""math/tex"" id=""MathJax-Element-1"">\sqrt{\left(x1-x2\right)^2+\left(y1\:-\:y2\right)^2}</script>
    </span></p>
    <p>HINT:&nbsp; You will have to use the math module.</p>
    <p>&nbsp;</p>
    <p><strong>EXAMPLES:</strong></p>
    <table style=""margin-left: auto; margin-right: auto;"" border=""1"" width=""752"">
        <tbody>
            <tr>
                <td style=""text-align: center;""></td>
                <td style=""text-align: center;""><strong>EXAMPLE 1</strong></td>
                <td style=""text-align: center;""><strong>EXAMPLE 2</strong></td>
            </tr>
            <tr>
                <td style=""text-align: center;""><strong>Inputs</strong></td>
                <td>
                    <p style=""text-align: center;"">5.0<br>10.0</p>
                    <p style=""text-align: center;"">8.0<br>16.0</p>
                </td>
                <td style=""text-align: center;"">
                    <p style=""text-align: center;"">8.3<br>-5.0</p>
                    <p style=""text-align: center;"">-9.3<br>4.6</p>
                </td>
            </tr>
            <tr>
                <td style=""text-align: center;""><strong>Expected Output (within 0.01)</strong></td>
                <td style=""text-align: center;"">6.708</td>
                <td style=""text-align: center;"">20.047</td>
            </tr>
        </tbody>
    </table>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
    
    x1 = round(random.uniform(-10, 10), 1)
    y1 = round(random.uniform(-10, 10), 1)
    x2 = round(random.uniform(-10, 10), 1)
    y2 = round(random.uniform(-10, 10), 1)
    
    num_tests_run += 1
    solution = math.sqrt(abs(x1-x2)**2 + abs(y1-y2)**2)
    
    print(""--------------------------------------------"")
    print(""Calculating distance between (%1.1f, %1.1f) and (%1.1f, %1.1f)"" % (x1, y1, x2, y2))
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn8_practice2.py"", [x1, y1, x2, y2], False)
    print(""Your Output:"", output.strip())
    
    if autograder.equals(output, solution):
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT"")    
        print(""Expected:"", solution)
        print(""\n"")

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    run_test()

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)










# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
261,lsn8_practice1,3,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p><span>You have been provided with an incomplete Python program that prints out a message with the class year.&nbsp; Write the appropriate input statement above this line to make this program work.</span></p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong><strong></strong></p>
<p>If the user types ""2014"", your program should print:</p>
<pre>Members of the class of 2014 arrived at USAFA in 2010</pre>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(class_year):
    global num_tests_run, num_tests_passed
    
    num_tests_run += 1
    solution = ""Members of the class of "" + str(class_year) + "" arrived at USAFA in "" + str(class_year - 4)
    
    print(""--------------------------------------------"")
    print(""Testing Class Year ="", class_year)
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn8_practice1.py"", [class_year], False)
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT"")
        print(""Your Output:"", output.strip())
        print(""Expected:"", solution)
        if "".0"" in output.strip():
            print(""*** HINT:  Is year a floating point number? ***"")
        print(""\n"")

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(random.randint(1959, 2024))
    run_test(random.randint(1959, 2024))

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)










# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
262,lsn7_skill1,3,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a program that gets the user's body temperature. If the body temperature is between 97-99 (inclusive), print ""Normal"". Otherwise, print&nbsp;""Abnormal""</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

# The Actual Solution
def solution(body_temperature):
    if body_temperature >= 97 and body_temperature <= 99:
        return ""Normal""
    else:
        return ""Abnormal""


def run_test(body_temperature):
    global num_tests_run, num_tests_passed
    
    num_tests_run += 1
    
    print(""--------------------------------------------"")
    print(""Testing Temperature ="", body_temperature)
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn7_skill1.py"", [body_temperature])
        
    if output.strip() == solution(body_temperature):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT.  Expected:"", solution(body_temperature), ""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(96.9)
    run_test(97)
    run_test(98.5)
    run_test(99)
    run_test(99.1)

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
263,lsn6_skill2,3,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a program that gets a course name and number (e.g., Math 243) from the user. Modify the program to do the following:</p>
<ul>
<li>If the course name is equal to ""CS110"", print ""You get to program!""</li>
<li>Otherwise, print ""Boo, no programming.""</li>
</ul>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
            
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 1 - CS110"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn6_skill2.py"", [""CS110""])
    
    if output.strip() == ""You get to program!"":
        print(""CORRECT\n"")
        points_earned += 50
    else:
        print(""Incorrect.  Expected: You get to program!\n"")
        
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 2 - Another Class"")
    print(""-------------------------------"")
    classes = ['Math 151', 'English 111', 'Physics 110']
    random_class = classes[random.randint(0, len(classes)-1)]
    output, error_message = autograder.run_script(""lsn6_skill2.py"", [random_class])
    
    if output.strip() == ""Boo, no programming."":
        print(""CORRECT\n"")
        points_earned += 50
    else:
        print(""Incorrect.  Expected: Boo, no programming.\n"")

    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
264,lsn6_skill1,3,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a program that gets a temperature from the user. Modify the program to do the following:</p>
<ul>
<li>If the temperature is less than or equal to 32, print ""Water Has Frozen""</li>
<li>Otherwise (i.e., else), print ""Above Water's Freezing Point""</li>
</ul>
</div>","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
    
    # Generates Random Values
    above_freezing = random.uniform(33, 100)
    below_freezing = random.uniform(-100, 31)
    at_freezing    = 32
        
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 1 - Below Freezing"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn6_skill1.py"", [below_freezing])
    
    if output.strip() == ""Water Has Frozen"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect.  Expected: Water Has Frozen\n"")
        
    
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 2 - Above Freezing"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn6_skill1.py"", [above_freezing])
    
    if output.strip() == ""Above Water's Freezing Point"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect.  Expected: Above Water's Freezing Point\n"")
        
    
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 3 - Exactly 32 Degrees"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn6_skill1.py"", [32])
    
    if output.strip() == ""Water Has Frozen"":
        print(""CORRECT"")
        points_earned += 34
    else:
        print(""Incorrect.  Expected: Water Has Frozen\n"")

    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
265,lsn5_skill2,3,skill,0,"<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a template that gets a distance and speed from the user, and calculates the travel time. Unfortunately, the code&nbsp;does not work. Analyze the code (and error message) and fix the problem.</p>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    # Generates Random Values
    distance = random.uniform(100, 200)
    speed = random.uniform(20, 50)
    time = distance / speed
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn5_skill2.py"", [distance, speed])
    
    if autograder.equals(output, time):
        print(""PASSED"")
        return 100
    else:
        print(""Incorrect Output, Expected"", time)
        return 0


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
266,lsn5_skill1,3,skill,0,<p><strong>PROBLEM STATEMENT:<br /></strong>Prompt the user for 3 different values. Store the values in variables using the names specified within the template. DO NOT include any prompts when asking for a value from the user.</p>,"from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    points_earned = 0   
    
    output, error = autograder.run_script(""lsn5_skill1.py"", ['abc', 123, 123.45])
    
    lines = output.split(""\n"")
    
    if (lines[0] == ""<class 'str'>""):
        points_earned += 33
        print(""my_string correct!"")
    else:
        print(""my_string is either not present, or is not the correct data type"")
    
    if (lines[1] == ""<class 'int'>""):
        points_earned += 33
        print(""my_integer correct!"")
    else:
        print(""my_integer is either not present, or is not the correct data type"")
        
    if (lines[2] == ""<class 'float'>""):
        points_earned += 34
        print(""my_float correct!"")
    else:
        print(""my_float is either not present, or is not the correct data type"")
        
    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
267,lsn4_skill2,3,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a program that gets a cadet's age, and stores it in a variable called&nbsp;<strong>your_age.</strong></p>
<p>Print the user's age + 4.&nbsp;</p>
<p>For example, if the user types:</p>
<pre> 18</pre>
<p>Your program should print:</p>
<pre>22</pre>
</div>","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    # Generates Random Values
    age = random.randint(18, 30)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_skill2.py"", [age])
    
    if autograder.equals(output, age+4):
        print(""PASSED"")
        return 100
    elif autograder.equals(output, age):
        print(""Close!  You forgot to add 4 to the age before printing it out"")
        return 50
    else:
        print(""Incorrect Output, Expected"", age+4)
        return 0


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
268,lsn4_skill1,3,skill,0,"<div>
    <p><strong>PROBLEM STATEMENT:<br /></strong>Create a variable called&nbsp;<strong>name,&nbsp;</strong>and set it
        equal to your name (represented as a string--don't forget to use the quotation marks!).</p>
</div>","from cs110 import autograder
import random

from lsn4_skill1 import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    points_earned = 0   
    
    print(""Looking for a variable called 'name' . . . "", end='')
    
    if 'name' in globals():
        points_earned += 50
        print(""FOUND!"")
        print(""Now, checking to make sure your name is a string"")
        
        if type(name).__name__ == 'str':
            points_earned += 50
            print(""Good Job"", name + ""!"")
        else:
            print(""Make sure you are surrounding your name with quotation marks"")
    else:
        print(""NOT FOUND :("")
        
    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
269,lsn4_scoreaverage,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write an algorithm that prompts the user for three sports game scores and outputs the average.</p>
<p><br /><strong>EXAMPLE:</strong></p>
<table>
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>8<br />15<br />12</td>
<td>89<br />103<br />63</td>
<td>14<br />42<br />36</td>
</tr>
<tr>
<td>Output</td>
<td>11.666666666666666</td>
<td>85.0</td>
<td>30.666666666666668</td>
</tr>
</tbody>
</table>
<p><strong>Note: Output must match (within a predefined tolerance).</strong></p>
</div>","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    score1 = random.randint(0, 100)
    score2 = random.randint(0, 100)
    score3 = random.randint(0, 100)
    average = (score1 + score2 + score3) / 3.0
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_scoreaverage.py"", [score1, score2, score3])
    
    if autograder.equals(output, average):
        print(""PASSED!"")
        return 100
    else:
        print(""Value doesn't match.\nExpected: "" + str(average))
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)








# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
270,lsn4_pointspread,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>A ""Point Spread"" is a term used to in sports (and gambling) to describe the difference between two teams' scores. For example, if one team scores 20 points and another team scores 30 points, the point spread is 10. A point spread is always a positive number.</p>
<p>Write an algorithm that prompts the user for two sports game scores and outputs the point spread. <br /><br /><strong><br />EXAMPLE:</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Input</th>
<th>8<br />15</th>
<th>89<br />103</th>
<th>42<br />14</th>
</tr>
<tr>
<th>Output</th>
<th>7</th>
<th>14</th>
<th>28</th>
</tr>
</tbody>
</table>
<p><strong>Note: Output must match exactly.</strong></p>
</div>","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    score1 = random.randint(0, 50)
    score2 = random.randint(score1, 100)
    spread = abs(score1 - score2)

    points_earned = 0

    # Trial #1:  score 1 > score2
    print(""Testing when score 1 is bigger than score 2 . . ."")
    output, error_message = autograder.run_script(""lsn4_pointspread.py"", [score1, score2])
    
    if autograder.equals(output, spread):
        print(""PASSED!\n"")
        points_earned += 50
    else:
        print(""Value doesn't match.\nExpected: "" + str(spread)  + ""\n"")
        
    # Trial #2:  score 2 > score1
    print(""Testing when score 2 is bigger than score 1 . . ."")
    output, error_message = autograder.run_script(""lsn4_pointspread.py"", [score2, score1])
    
    if autograder.equals(output, spread):
        print(""PASSED!"")
        points_earned += 50
    else:
        print(""Value doesn't match.\nExpected: "" + str(spread))
    
    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
271,lsn4_madlib,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Mad Libs are activities that have a person provide various words, which are then used to complete a short story in unexpected (and hopefully funny) ways. (EDITOR'S NOTE: Do you kids even do Mad Libs anymore?)</p>
<p>Complete the program to read the needed values from input, that the existing output statement(s) can use to output a short story.</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the input is:</p>
<pre><code>Eric
Chipotle
12
burritos
</code></pre>
<p>Then the output is:</p>
<pre><code>Eric went to Chipotle to buy 12 different types of burritos</code></pre>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    first_names = ['Adrian', 'Troy', 'Dave', 'Paul', 'Kelly', 'Steve', 'Barry']
    generic_locations = ['Best Buy', 'AAFES', 'Target', 'THE Walmart', 'Home Depot']
    nouns = ['Video Games', 'Board Games', 'Nintendo Switches', 'Sony PS4s', 'Microsoft (Ugh) Xbox Ones']
    
    first_name = first_names[random.randint(0, len(first_names) - 1)]
    generic_location = generic_locations[random.randint(0, len(generic_locations) - 1)]
    whole_number = random.randint(0, 100)
    plural_noun = nouns[random.randint(0, len(nouns) - 1)]

    expected_output = first_name + ' went to ' + generic_location + ' to buy ' + str(whole_number) + ' different types of ' + plural_noun + ""\n""

    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_madlib.py"", [first_name, generic_location, whole_number, plural_noun])
    
    if output == expected_output:
        print(""PASSED!"")
        return 100
    else:
        print(""String doesn't match.\nExpected: "" + expected_output)
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
272,lsn4_girlscouts,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a program that asks the user for the amount of money he/she has on hand, and outputs the number of girl scout cookies that he/she can purchase. Use the following prices:</p>
<p>$5 per box for the ""Super Six"" (Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, Savannah Smiles)<br />$6 per box for the Specialty Cookies (S'mores, Toffee-tastic)</p>
<p><strong>For this problem, assume that the user will buy all of one or the other. In other words, output the number of boxes that he/she would be able to obtain if he/she bought nothing but the Super Six, and nothing but the Specialty Cookies.</strong></p>
<p><strong>HINT:</strong><br />You can convert a number to an integer by using the int() function. For example:<br /><strong>int(2.51)</strong> will convert the number to 2</p>
<p>EXAMPLE:<br />If the input is:</p>
<pre>26</pre>
<p>Then the output is:</p>
<pre>5 boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles<br />4 boxes of S'mores and Toffee-tastic</pre>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    dollar_amount = round(random.uniform(10.00, 100.00), 2)
    super_six_amount = (dollar_amount // 5)
    specialty_amount = (dollar_amount // 6)
    score = 0
    
    line_1 = str(int(super_six_amount)) + "" boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles""
    line_2 = str(int(specialty_amount)) + "" boxes of S'mores and Toffee-tastic""
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_girlscouts.py"", [dollar_amount])
    output_lines = output.split('\n')
    
    if line_1 == output_lines[0]:
        print(""First Line is Correct"")
        score += 50
    else:
        print(""First Line is Incorrect.  Expected:"", line_1)
    
    if line_2 == output_lines[1]:
        print(""Second Line is Correct"")
        score += 50
    else:
        print(""Second Line is Incorrect.  Expected:"", line_2)
    
    return score
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
273,lsn4_arrivaltime,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write an algorithm that prompts the user for a distance to travel (in miles) and a speed (in mph) and outputs time of arrival in hours.</p>
<p><br /><strong>For Example:</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Input</th>
<th>72<br />60</th>
<th>1282<br />85</th>
<th>120.5<br />59.2</th>
</tr>
<tr>
<th>Output</th>
<th>1.2</th>
<th>15.0823</th>
<th>2.0355</th>
</tr>
</tbody>
</table>
<p><strong>Note: Output needs to match the examples.</strong></p>
</div>
","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    distance = round(random.random() * 1000, 1)
    speed = round(random.random() * 60, 1)
    time = distance / speed
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_arrivaltime.py"", [distance, speed])
    
    if autograder.equals(output, time):
        print(""PASSED!"")
        return 100
    else:
        print(""Value doesn't match.\nExpected: "" + str(time))
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
274,lsn24_nasa,3,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Write a Python program that repeatedly asks the user for names of famous NASA space missions (e.g., Apollo 11) as
        well as the year in which the mission took place, until the user types the word ""DONE"" for the mission.</p>
    <p>Your program should output:</p>
    <ol>
        <li>Year of the <span style=""text-decoration: underline;""><strong>latest mission</strong></span> (most recent)
        </li>
        <li>Names of all missions that occurred within 3 years prior to the most recent mission (inclusive)</li>
    </ol>
    <p><strong>EXAMPLES:</strong></p>
    <p>&nbsp;</p>
    <table style=""margin-left: auto; margin-right: auto; width: 331px; height: 148px;"">
        <thead>
            <tr>
                <td style=""border-style: solid; text-align: center; width: 77px;""></td>
                <td style=""border-style: solid; text-align: center; width: 104px;"">Example 1</td>
                <td style=""border-style: solid; text-align: center; width: 140px;"">Example 2</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style=""border-style: solid; text-align: center; width: 77px;"">Input</td>
                <td style=""border-style: solid; text-align: center; width: 104px;"">Gemini 3<br>1965<br>Gemini
                    4<br>1965<br>Gemini 12<br>1966<br>DONE</td>
                <td style=""border-style: solid; text-align: center; width: 140px;"">
                    <p>Mercury 5<br>1961<br>Apollo 11<br>1969<br>DONE</p>
                </td>
            </tr>
            <tr>
                <td style=""border-style: solid; text-align: center; width: 77px;"">Output</td>
                <td style=""border-style: solid; text-align: center; width: 104px;"">1966<br>Gemini 3<br>Gemini
                    4<br>Gemini 12</td>
                <td style=""border-style: solid; text-align: center; width: 140px;"">1969<br>Apollo 11</td>
            </tr>
        </tbody>
    </table>
</div>","from cs110 import autograder
import random, math

mission_info = [
    ['Apollo 1', 1967],
    ['Apollo 7', 1968],
    ['Apollo 8', 1968],
    ['Apollo 9', 1969],
    ['Apollo 10', 1969],
    ['Apollo 11', 1969],
    ['Apollo 12', 1969],
    ['Apollo 13', 1970],
    ['Apollo 14', 1971],
    ['Apollo 15', 1971],
    ['Apollo 16', 1972],
    ['Apollo 17', 1972],
    ]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    inputs = []
    expected_outputs = []
    
    mission_table = []
    
    for mission in random.sample(mission_info, 5):
        inputs.append(mission[0])
        inputs.append(mission[1])
        mission_table.append([int(mission[1]), mission[0]])
    inputs.append(""DONE"")
    
    max_row = max(mission_table)
    expected_outputs.append(str(max_row[0]))
    
    for m in mission_table:
        if (int(m[0]) >= int(max_row[0]) - 3):
            expected_outputs.append(m[1])
    
    output, errors = autograder.run_script(""lsn24_nasa.py"", inputs)
    lines = output.strip().split('\n')
    
    lines_match = autograder.compare_strings(lines, expected_outputs)
    
    if lines_match == len(expected_outputs):
        return 100.0
    else:
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,1,1,0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,
275,lsn24_mitches,3,lab,0,"<div><strong>PROBLEM NAME:<br></strong>lsn24_mitches</p>
    <p>&nbsp;</p>
    <p><strong>PROBLEM STATEMENT:</strong></p>
    <p>&nbsp;Write a Python program that analyzes the food at Mitchell Hall. Your program will ask for the
        number of meals to analyze and then get both:</p>
    <ol>
        <li>The name of the meal</li>
        <li>The number of calories per serving</li>
    </ol>
    <p>Your program should output the average calorie count of all meals, as well as the names of meals that are
        within 200 calories (plus or minus) of the average (inclusive).</p>
    <p style=""text-align: left;""><strong>EXAMPLES:</strong></p>
    <table style=""border-collapse: collapse; width: 88.535%; height: 325px; margin-left: auto; margin-right: auto;""
        border=""1"">
        <tbody>
            <tr>
                <td style=""width: 33.3333%;""></td>
                <td style=""width: 33.3333%; text-align: center;""><strong>Example 1</strong></td>
                <td style=""width: 33.3333%; text-align: center;""><strong>Example 2</strong></td>
            </tr>
            <tr>
                <td style=""width: 33.3333%;"">Input</td>
                <td style=""width: 33.3333%; text-align: center;"">
                    <p>3<br>Shepherd's Pie<br>300<br>Foot Long Hot Dog<br>350<br>Hamburger<br>960<br><br></p>
                </td>
                <td style=""width: 33.3333%; text-align: center;"">
                    4<br>Pizza<br>600<br>Cheeseburger<br>450<br>Pancakes<br>1100<br>Burrito<br>900</td>
            </tr>
            <tr>
                <td style=""width: 33.3333%;"">Expected Output</td>
                <td style=""width: 33.3333%; text-align: center;"">536.6666666666666<br>Foot Long Hot Dog</td>
                <td style=""width: 33.3333%; text-align: center;"">762.5<br>Pizza<br>Burrito</td>
            </tr>
        </tbody>
    </table>
</div>","from cs110 import autograder
import random, math

meal_info = [
    ['Hot Dogs', 600],
    ['French Dip', 540],
    ['Chicken Cordon Bleu', 300],
    ['Turkey Sandwich', 350],
    ['Mitch\'s Mountain', 1100],
    ['Shepherd\'s Pie', 272],
    ['Teriyaki Chicken', 250],
    ]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    inputs = []
    expected_outputs = []
    
    meal_table = []
    table_size = random.randint(3, 5)
    total = 0
    inputs.append(table_size)
    
    for meal in random.sample(meal_info, table_size):
        total += meal[1]
        inputs.append(meal[0])
        inputs.append(meal[1])
        meal_table.append([meal[0], meal[1]])
    
    average = total / len(meal_table)
    expected_outputs.append(str(average))
    
    for m in meal_table:
        if m[1] >= average-200 and m[1] <= average+200:
            expected_outputs.append(m[0])
    
    output, errors = autograder.run_script(""lsn24_mitches.py"", inputs)
    lines = output.strip().split('\n')
    
    lines_match = autograder.compare_strings(lines, expected_outputs)
    
    if lines_match == len(expected_outputs):
        return 100.0
    else:
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,
276,lsn24_education,3,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
        <p>In this problem, we look at total time spent in school (in years) at different points in history for a
            particular country.</p>
        <p>The provided dataset (<code>education.csv</code>) contains information from various countries about time
            spent in education gathered as specific years. Here is a typical line from the file, in this case data
            gathered in the year 2010 for the country Zimbabwe:</p>
        <p>&nbsp;</p>
        <p style=""text-align: center;""><code>Zimbabwe,2010,M,15,64,8.04,3926</code></p>
        <p>&nbsp;</p>
        <p><span>Each position in the line represents a different ""data element"". Here is a key for your
                reference:</span></p>
        <table style=""border-collapse: collapse; width: 80%; margin-left: auto; margin-right: auto;"" border=""2"">
            <tbody>
                <tr>
                    <td style=""width: 10%; text-align: center;""><strong>Country</strong></td>
                    <td style=""width: 10%; text-align: center;""><strong>Year Data Was Gathered</strong></td>
                    <td style=""width: 10%; text-align: center;""><strong>Gender</strong></td>
                    <td style=""width: 10%; text-align: center;""><strong>Start Age</strong></td>
                    <td style=""width: 10%; text-align: center;""><strong>End Age</strong></td>
                    <td style=""width: 10%; text-align: center;"">
                        <p><strong>Total Time in School (years)</strong></p>
                    </td>
                    <td style=""width: 10%; text-align: center;""><strong>Population (thousands)</strong></td>
                </tr>
                <tr>
                    <td style=""width: 10%; text-align: center;"">Zimbabwe</td>
                    <td style=""width: 10%; text-align: center;"">2010</td>
                    <td style=""width: 10%; text-align: center;"">M</td>
                    <td style=""width: 10%; text-align: center;"">15</td>
                    <td style=""width: 10%; text-align: center;"">64</td>
                    <td style=""width: 10%; text-align: center;"">8.04</td>
                    <td style=""width: 10%; text-align: center;"">3926</td>
                </tr>
            </tbody>
        </table>
        <p>&nbsp;</p>
        <p><br>Write a Python program that asks the user for:</p>
        <ol>
            <li>Name of a country (e.g., ""Zimbabwe"")</li>
            <li>A Gender (""M"" or ""F"")</li>
        </ol>
        <p>Your program should print:</p>
        <ul>
            <li>Average total time spent in school for the user provided gender in the user provided country</li>
            <li><span style=""text-decoration: underline;"">For the given country/gender ONLY</span>, print each ""Year
                Data was Gathered"" where the ""Total Time in School"" was greater than (inclusive) the average time spent
                in school</li>
        </ul>
        <p><br><strong>EXAMPLE:</strong></p>
        <table style=""border-collapse: collapse; width: 59.0233%; height: 325px; margin-left: auto; margin-right: auto;""
            border=""1"">
            <tbody>
                <tr>
                    <td style=""width: 33.3333%;""></td>
                    <td style=""width: 33.3333%; text-align: center;""><strong>Example 1</strong></td>
                </tr>
                <tr>
                    <td style=""width: 33.3333%;"">Input</td>
                    <td style=""width: 33.3333%; text-align: center;"">
                        <p>Zimbabwe</p>
                        <p>M</p>
                    </td>
                </tr>
                <tr>
                    <td style=""width: 33.3333%;"">Expected Output</td>
                    <td style=""width: 33.3333%; text-align: center;"">
                        2.5117241379310347<br>1960<br>1965<br>1970<br>1975<br>1980<br>1985<br>1990<br>1995<br>2000<br>2005<br>2010
                    </td>
                </tr>
            </tbody>
        </table>
    </div>","from cs110 import autograder
import random, math

test_inputs = [['Canada', 'M'], ['Egypt', 'F']]
expected_outputs = [['7.140344827586206', '1945', '1950', '1955', '1960', '1965', '1970', '1975', '1980', '1985', '1990', '1995', '2000', '2005', '2010'],
                    ['1.1858620689655173', '1980', '1985', '1990', '1995', '2000', '2005', '2010']]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    test_case_to_run = random.randint(0, len(test_inputs)-1)
    inputs = test_inputs[test_case_to_run]
    outputs = expected_outputs[test_case_to_run]
    
    output, errors = autograder.run_script(""lsn24_education.py"", inputs)
    lines = output.strip().split('\n')
    
    lines_match = autograder.compare_strings(lines, outputs)
    
    if lines_match == len(outputs):
        return 100.0
    else:
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
277,lsn24_airspeed,3,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
    <p>Write a Python program to determine which aircraft &nbsp;can fly in formation based on their (min)
        safe cruise speed. Your program will ask the user for:</p>
    <ol>
        <li>The number of aircraft to analyze</li>
        <li>The target cruise velocity (mph)</li>
    </ol>
    <p>&nbsp;</p>
    <p>Your program will then repeatedly ask the user for the designator for each aircraft and its cruise
        velocity. Once all of the values have been input, your&nbsp;program will output:</p>
    <ul>
        <li>The NUMBER of aircraft whose cruise velocity is within 50 mph of the target (above or below,
            inclusive)</li>
        <li>The designator of each aircraft that meets the above criteria</li>
    </ul>
    <p style=""text-align: left;""><strong>EXAMPLES:</strong></p>
    <table style=""border-collapse: collapse; width: 88.535%; height: 325px; margin-left: auto; margin-right: auto;""
        border=""1"">
        <tbody>
            <tr>
                <td style=""width: 33.3333%;""></td>
                <td style=""width: 33.3333%; text-align: center;""><strong>Example 1</strong></td>
                <td style=""width: 33.3333%; text-align: center;""><strong>Example 2</strong></td>
            </tr>
            <tr>
                <td style=""width: 33.3333%;"">Input</td>
                <td style=""width: 33.3333%; text-align: center;"">
                    <p>3<br>400<br>F-15<br>450<br>F-16<br>425<br>F-22<br>500</p>
                </td>
                <td style=""width: 33.3333%; text-align: center;"">
                    4<br>230<br>C-130<br>250<br>F-35<br>450<br>B-52<br>390<br>C-141<br>375</td>
            </tr>
            <tr>
                <td style=""width: 33.3333%;"">Expected Output</td>
                <td style=""width: 33.3333%; text-align: center;"">2<br>F-15<br>F-16</td>
                <td style=""width: 33.3333%; text-align: center;"">1<br>C-130</td>
            </tr>
        </tbody>
    </table>
    <p style=""text-align: center;"">&nbsp;</p>
</div>","from cs110 import autograder
import random, math

test_cases = [[3, 400, 'F-15', 450, 'F-16', 425, 'F-22', 600],
              [4, 230, 'C-130', 250, 'F-35', 450, 'B-52', 390, 'C-141', 375]]
answers    = [['2', 'F-15', 'F-16'],
              ['1', 'C-130']]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    test_to_run = random.randint(0, len(test_cases)-1)
    inputs = test_cases[test_to_run]
    expected_output = answers[test_to_run]    
    
    output, errors = autograder.run_script(""lsn24_airspeed.py"", inputs)
    lines = output.strip().split('\n')
    
    lines_match = autograder.compare_strings(lines, expected_output)
    
    if lines_match == len(expected_output):
        return 100.0
    else:
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
278,lsn23_tokens,3,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p><span>Write a Python program that asks the user for the name of a file. </span></p>
    <p><span>Your program should then read this file and count how many times each token (i.e., word) appears (NOTE: to keep it simple, and split on the  ). Finally, let the user type a token, and print how many times that token appears (if a word is not in your dictionary, print 0).</span></p>
    <p>&nbsp;</p>
    <p><strong>HINTS:</strong></p>
    <ul>
    <li>You have been provided with the file review.txt to test your code.</li>
    </ul>
    </div>","from cs110 import autograder
import random, math

def solution(filename, t):
    # Opens the file
    file = open(filename, ""r"")

    # Extracts ALL of the text as one big string
    file_contents = file.read()

    # Splits the entire document into tokens
    list_of_tokens = file_contents.split(' ')

    # Creates a Dictionary to Store All Tokens
    token_dictionary = {}

    for token in list_of_tokens:
        if token not in token_dictionary:
            token_dictionary[token] = 1
        else:
            token_dictionary[token] = token_dictionary[token] + 1
    
    if t in token_dictionary:
        return token_dictionary[t]
    else:
        return 0
    

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_correct = 0
    
    # Test #1:
    print(""------------------------------------------"")
    print(""Test 1"")
    print(""------------------------------------------"")
    answer, error = autograder.run_script(""lsn23_tokens.py"", [""review.txt"", ""Fit""])
    expected_answer = solution(""review.txt"", ""Fit"")
    
    if autograder.equals(answer, expected_answer):
        print(""CORRECT\n"")
        num_correct += 1
    else:
        print(""INCORRECT, Expected:"", expected_answer, ""\n"")
    
    
    # Test #2:
    print(""------------------------------------------"")
    print(""Test 2"")
    print(""------------------------------------------"")
    answer, error = autograder.run_script(""lsn23_tokens.py"", [""article.txt"", ""plastic""])
    expected_answer = solution(""article.txt"", ""plastic"")
    
    if autograder.equals(answer, expected_answer):
        print(""CORRECT\n"")
        num_correct += 1
    else:
        print(""INCORRECT, Expected:"", expected_answer, ""\n"")
        
    # Test #3:
    print(""------------------------------------------"")
    print(""Test 3"")
    print(""------------------------------------------"")
    answer, error = autograder.run_script(""lsn23_tokens.py"", [""article2.txt"", ""environment""])
    expected_answer = solution(""article2.txt"", ""environment"")
    
    if autograder.equals(answer, expected_answer):
        print(""CORRECT"")
        num_correct += 1
    else:
        print(""INCORRECT, Expected:"", expected_answer)
    
    return round(100 / 3 * num_correct, 1)
    
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
279,lsn23_skill2,3,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You are being provided with a function called <code>mini_sort</code> that takes two numbers as parameters. Modify this function so that it returns a tuple containing the numbers in ascending order.</p>
    <p>&nbsp;</p>
    <p><strong>EXAMPLES:</strong></p>
    <p><code>mini_sort(1, 2)</code> should return the tuple:&nbsp; (1, 2)</p>
    <p><code>mini_sort(50, 40)</code> should return the tuple:&nbsp; (40, 50)</p>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math
import lsn23_skill2

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    a = random.randint(0, 5)
    b = random.randint(6, 10)
    c = random.randint(100, 200)
    d = random.randint(0, 99)
    
    score = 0
    
    print(""Test #1.  Calling mini_sort(%d, %d)"" % (a, b))
    output = lsn23_skill2.mini_sort(a, b)
    print(""  Your Function Returned:"", output)
    if output == (a, b):
        print(""  CORRECT\n"")
        score += 50
    else:
        print(""  INCORRECT.  Expected"", (a, b), ""\n"")
        
    print(""Test #2.  Calling mini_sort(%d, %d)"" % (c, d))
    output = lsn23_skill2.mini_sort(c, d)
    print(""  Your Function Returned:"", output)
    if output == (d, c):
        print(""  CORRECT\n"")
        score += 50
    else:
        print(""  INCORRECT.  Expected"", (d, c), ""\n"")
    
    return score

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
280,lsn23_skill1,3,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br></strong>You have been provided with a dictionary that contains the designator for an
    aircraft (e.g., F-16) and its nickname (e.g., Fighting Falcon). Write a program that gets a new aircraft designator
    and nickname from the user, and adds it to the dictionary.</p>
</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    aircraft_dictionary = {""F-16"":""Fighting Falcon"", ""F-22"":""Raptor"", ""B-2"":""Spirit"", ""F-15"":""Eagle""}
    
    aircraft = [(""C-141"", ""Starlifter""), (""C-5"", ""Galaxy""), (""MQ-9"", ""Reaper"")]
    random_aircraft = aircraft[random.randint(0, len(aircraft)-1)]
    aircraft_dictionary[random_aircraft[0]] = random_aircraft[1]
    
    output, error = autograder.run_script(""lsn23_skill1.py"", random_aircraft)
    
    if output.strip() == str(aircraft_dictionary):
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT. Expected:"")
        print(aircraft_dictionary)
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
281,lsn23_crashes,3,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>You have been provided with&nbsp; crashdata_subset1.csv file.&nbsp; Here is a typical line from the file:</p>
    <p style=""text-align: center;"">&nbsp;</p>
    <p style=""text-align: center;""><code>2015, 1, 5, 0, 2-Car, No Injury, Following Too Closely, W 3rd</code></p>
    <p style=""text-align: left;"">&nbsp;</p>
    <p style=""text-align: left;"">Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
    <table style=""margin-left: auto; margin-right: auto;"">
    <thead>
    <tr>
    <th style=""border-style: solid;""></th>
    <th style=""border-style: solid;"">Year</th>
    <th style=""border-style: solid;"">Month</th>
    <th style=""border-style: solid;"">Day</th>
    <th style=""border-style: solid;"">Hour</th>
    <th style=""border-style: solid;"">Accident Type</th>
    <th style=""border-style: solid;"">Injury Type</th>
    <th style=""border-style: solid;"">Reason</th>
    <th style=""border-style: solid;"">Location</th>
    </tr>
    </thead>
    <tbody>
    <tr>
    <th style=""border-style: solid;"">Value</th>
    <th style=""border-style: solid;""><strong>2015</strong></th>
    <th style=""border-style: solid;""><strong>1</strong></th>
    <th style=""border-style: solid;""><strong>5</strong></th>
    <th style=""border-style: solid;""><strong>0</strong></th>
    <th style=""border-style: solid;""><strong>2-Car</strong></th>
    <th style=""border-style: solid;""><strong>No Injury</strong></th>
    <th style=""border-style: solid;""><strong>Following Too Closely</strong></th>
    <th style=""border-style: solid;""><strong>W</strong> 3rd</th>
    </tr>
    </tbody>
    </table>
    <p><br>Create a Python function called<span>&nbsp;</span><code>get_accident_types</code><span>&nbsp;</span>that takes the name of a file as a parameter. Your function should open the file, read its contents, and return a<span>&nbsp;</span><strong>set</strong><span>&nbsp;</span>containing all of the unique accident types.</p>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math
import lsn23_crashes

def solution(filename):
    # Opens the file
    file = open(filename, ""r"")

    # Extracts ALL of the text as one big string
    file_contents = file.read()

    # Splits the big string into individual lines
    lines = file_contents.split('\n')

    # Creates a Set
    collision_types = set()

    # Looks at every row, and adds the collision type to the set
    # The set automagically prevents duplicates from being added!
    for line in lines:
        columns = line.split(',')
        collision_types.add(columns[4])

    # Returns the set
    return collision_types

# Runs the test
def run_test(filename):
    global tests_passed
    
    result = lsn23_crashes.get_accident_types(filename)
    expected_value = solution(filename)
    
    if result is None:
        print(""Failed on file %s.  Your function did not return anything."" % (filename))
    elif type(result) is not set:
        print(""Failed on file %s.  Your function did not return a set."" % (filename))
    elif result == expected_value:
        print(""Passed Test on file"", filename, ""-- set ="", result)
        return 100.0
    else:
        print(""Passed Test on file"", filename, ""-- Your function returned "", result, "", but the answer is"", expected_value)

    return 0.0


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    return run_test(""crashdata_2003.csv"") and run_test(""crashdata_2011.csv"") and run_test(""crashdata_2015.csv"")
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)






# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,0,1,1,0,1,1,0,0,0,0,0,1,0,1,0,0,1,0,
282,lsn22_skill1,3,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You have been provided with the template code for an animation.&nbsp;
        Study the code for a minute, then modify the code to do the following WHEN THE LEFT MOUSE BUTTON IS <span
            style=""text-decoration: underline;"">HELD DOWN</span>:</p>
    <ol>
        <li>Write the code needed to get the mouse's x and y coordinates</li>
        <li>Draw a circle centered at the mouse's x and y coordinates</li>
    </ol>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0.0
    
    if autograder.code_compiles(""lsn22_skill1.py""):
        file = open(""lsn22_skill1.py"", ""r"")
        file_contents = file.read()
        
        if ""get_mouse_x("" in file_contents:
            print(""get_mouse_x called"")
            score += 33
        else:
            print(""get_mouse_x does not appear to be called."")
            
        if ""get_mouse_y("" in file_contents:
            print(""get_mouse_y called"")
            score += 33
        else:
            print(""get_mouse_y does not appear to be called."")
            
        if ""draw_circle("" in file_contents:
            print(""draw_circle called"")
            score += 34
        else:
            print(""draw_circle does not appear to be called."")
            
    else:
        print(""There appears to be an error in your python Script that is preventing it from running"")
    
    print(""\nThank you for your submission.  Your instructor will let you know if there is an issue."")
    return score        
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
283,lsn22_bouncingballs,3,lab,0,"<div><strong>PROBLEM NAME:<br></strong>lsn22_bouncingballs</p>
    <p>&nbsp;</p>
    <p><strong>PROBLEM STATEMENT:<br></strong><span>Write a python algorithm that asks the user for the number of balls to draw. Then, open a pythonGraph window and draw that many bouncing balls on the screen.</span></p>
    <p><iframe style=""width: 400px; height: 225px; display: inline-block;"" title=""Video player for bouncing balls.mp4"" data-media-type=""video"" src=""https://canvas.instructure.com/media_objects_iframe/m-3dHggG1VD94wJLSCf3GMSjFAiBJHuFUv?type=video"" allowfullscreen=""allowfullscreen"" allow=""fullscreen"" data-media-id=""m-3dHggG1VD94wJLSCf3GMSjFAiBJHuFUv""></iframe> <img src=""https://i.imgur.com/WuQmRXL.mp4"" alt="""" class=""broken-image""><img src=""https://i.imgur.com/WuQmRXL.mp4"" alt="""" class=""broken-image""></p>
    <p>&nbsp;</p>
    <p><strong>Challenge</strong>:</p>
    <ul>
    <li>Try to randomize every aspect of the bouncing balls (e.g., their radius, color, speed)</li>
    </ul>
    <p>&nbsp;</p>
    </div>","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn22_bouncingballs.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,
284,lsn21_skill1,3,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You have been provided with the template code for an animation. &nbsp;Study the code for a minute, then perform the following tasks:</p>
    <ul>
    <li>In the <code>draw()</code> function, add one line of code that draws a circle.<br>For the center, use the <code>ball_x</code> and <code>ball_y</code> variables defined in the template.<br><br></li>
    <li>In the <code>update() function</code>, add code that modifies the value of <code>ball_x</code> and <code>ball_y</code>.<br>For example, add 1 to the <code>ball_x</code> and subtract 1 from&nbsp;<code>ball_y</code> every time <code>update()</code> is called. What do you expect to happen? Does what actually happens match your expectations?</li>
    </ul>
    <p>&nbsp;</p>
    </div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0.0
    
    if autograder.code_compiles(""lsn21_skill1.py""):
        file = open(""lsn21_skill1.py"", ""r"")
        file_contents = file.read()
        
        if ""draw_circle("" in file_contents:
            print(""draw_circle called"")
            score += 50
        else:
            print(""draw_circle does not appear to be called.  You need to call it in the draw() function"")
            
        if file_contents.count(""ball_x"") + file_contents.count(""ball_y"") > 5:
            print(""Looks like you are using ball_x and/or ball_y"")
            score += 50
        else:
            print(""Make sure you are changing the value of ball_x and ball_y in update()."")
            
    else:
        print(""There appears to be an error in your python Script that is preventing it from running"")
    
    print(""\nThank you for your submission.  Your instructor will let you know if there is an issue."")
    return score        
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
285,lsn20_unpopularnames,3,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>This lab makes use of the names.csv dataset, which provides a list of over 1200+ names that were given to
        children in 2011. Here is a typical line from the file:</p>
    <p>&nbsp;</p>
    <p><code>FEMALE, HISPANIC, GIA, 21</code></p>
    <p>&nbsp;</p>
    <p><br>Each position in the line (separated by a comma) represents a different ""data element"". Here is a key for
        your reference:</p>
    <table style=""margin-left: auto; margin-right: auto; width: 54.7623%;"">
        <thead>
            <tr>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 12.7202%;"">Gender</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 15.0135%;"">Ethnicity
                </th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 8.84295%;"">Name</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 63.2247%;"">
                    Count<br>(i.e., Number of Children Assigned this Name)</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 12.7202%;"">FEMALE</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 15.0135%;"">HISPANIC
                </th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 8.84295%;"">GIA</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 63.2247%;"">21</th>
            </tr>
        </tbody>
    </table>
    <p><br><br>Write a Python algorithm that gets a gender (all CAPs, ""MALE"" or ""FEMALE"") and a
        number,<span>&nbsp;</span><code>X</code>, from the user, and prints out the X least popular names for that
        gender, starting with the least popular and working up.</p>
    <p>For example, if the user
        types<span>&nbsp;</span><code>MALE</code><span>&nbsp;</span>and<span>&nbsp;</span><code>2</code>, and you
        determine that the two least popular names are Bill and Ted, your program should output:</p>
    <pre>Bill<br>Ted<br><br></pre>
    <p>&nbsp;</p>
    <p><strong>HINTS (really really important):</strong></p>
    <ul>
        <li>Remember that you can use the<span>&nbsp;</span><code>sort()</code><span>&nbsp;</span>function to sort a
            list in ascending order. For example, if your list is named<span>&nbsp;</span><code>my_list</code>, you can
            sort it by typing:<br><code>my_list.sort()</code></li>
        <li><code>sort()</code><span>&nbsp;</span>will work on 2D lists. It will sort by the first column, and then look
            at the 2nd column in the event of a tie. Think about this when you are building your 2D list.</li>
    </ul>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

expected_output_male = [""ALDO"", ""ALIJAH"", ""ALLAN"", ""ANGEL"", ""ARTURO"", ""AUGUSTUS"", ""BENNETT"", ""BERISH"", ""CADEN"", ""CHRIS"", ""CODY"", ""COREY"", ""DERRICK"", ""DEVON"", ""DONOVAN"", ""EASON"", ""EDWARD"", ""ELLIS"", ""GIOVANI"", ""HASSAN"",]
expected_output_female = [""ABBY"", ""AIZA"", ""ALISHA"", ""ANGELICA"", ""ANGIE"", ""ARIANNY"", ""ARIELA"", ""ATARA"", ""AUBREY"", ""AUTUMN"", ""AYLA"", ""BIANCA"", ""BONNIE"", ""BRIANNY"", ""CASSANDRA"", ""CELIA"", ""CHAVY"", ""CHEYENNE"", ""CORA"", ""CRISTINA""]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    if (random.random() > 0.5):
        gender = ""MALE""
        expected_output = expected_output_male
    else:
        gender = ""FEMALE""
        expected_output = expected_output_female
        
    num_to_print = random.randint(5, 20)
    output, error = autograder.run_script(""lsn20_unpopularnames.py"", [gender, num_to_print])
    lines = output.strip().split('\n')
    num_matches = autograder.compare_strings(lines, expected_output[:num_to_print])
    
    print()
    
    if len(lines) == 0:
        return 0
    elif len(lines) > len(expected_output[:num_to_print]):
        print(""Your program printed more lines than we expected"")
        return round(100 * num_matches / len(lines), 1)
    else:
        return round(100.0/len(expected_output[:num_to_print]) * num_matches, 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,1,1,1,0,0,1,0,1,0,1,1,0,0,1,0,0,0,
286,lsn20_skill1,3,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You are provided a CSV file with the amount of medals won by countries from
    past Olympic games.&nbsp; We want to prepare the silver medal data for processing in Python.</p>
    <p>Here is a snippet of the file:</p>
    <pre>USA,46,37,38<br>Britain,27,23,17</pre>
    <p>&nbsp;</p>
    <p>Here is how you can interpret each ""column"" in the file:</p>
    <table style=""margin-left: auto; margin-right: auto; width: 32.7604%;"" border=""1"">
        <tbody>
            <tr style=""text-align: center;"">
                <td style=""width: 15.4561%;""><strong>Country</strong></td>
                <td style=""width: 26.4012%;""><strong># Gold Medals</strong></td>
                <td style=""width: 27.7258%;""><strong># Silver Medals</strong></td>
                <td style=""width: 30.413%;""><strong># Bronze Medals</strong></td>
            </tr>
            <tr style=""text-align: center;"">
                <td style=""width: 15.4561%;"">USA</td>
                <td style=""width: 26.4012%;"">46</td>
                <td style=""width: 27.7258%;"">37</td>
                <td style=""width: 30.413%;"">38</td>
            </tr>
            <tr>
                <td style=""text-align: center; width: 15.4561%;"">Britain</td>
                <td style=""text-align: center; width: 26.4012%;"">27</td>
                <td style=""text-align: center; width: 27.7258%;"">23</td>
                <td style=""text-align: center; width: 30.413%;"">17</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
    <p>Provided in this activity's zip folder is a code template that already reads the olympics.csv file and extracts
        each line from it.</p>
    <p>Add code to the lsn19_skill1.py file to perform the following tasks:</p>
    <ul>
        <li style=""list-style-type: none;"">
            <ul>
                <li><strong>Line 30:</strong><span>&nbsp;</span>Write a line of code to break up each line of text into
                    columns. Hint: Use the split() function</li>
                <li><strong>Line 33:</strong><span> Use the data from the previous step to create a new two-item list
                    </span>containing the number of<span>&nbsp;</span><span><strong>silver</strong>&nbsp;</span>medals,
                    followed by the name of the country.</li>
                <li><strong>Line 36:</strong><span>&nbsp;</span>Append this two-item list
                    to<span>&nbsp;</span><span><strong>my_table</strong></span></li>
            </ul>
        </li>
    </ul>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math
from lsn20_skill1 import *

answer= [[37, 'USA'],
        [23, 'Britain'],
        [18, 'China'],
        [17, 'Russia'],
        [10, 'Germany'],
        [8, 'Japan'],
        [18, 'France'],
        [3, 'South Korea'],
        [12, 'Italy'],
        [11, 'Australia']]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_matches = 0
    
    for i in range(len(my_table)):
        print(""Row "" + str(i+1) + "": "", end='')
        if i < len(answer):
            if my_table[i] == answer[i]:
                print(""CORRECT"")
                num_matches += 1
            else:
                print(""INCORRECT (Expected: "" + str(answer[i]) + "" instead of "" + str(my_table[i]) + "")"")
        else:
            print(""INCORRECT (Unexpected Row: '"" + str(my_table[i]) + ""')"")
    
    print()
    print(num_matches, ""out of"", len(answer), ""rows match"")
    
    if len(answer) < num_matches:
        return 100 * num_matches / len(answer)
    else:
        return num_matches * (100 / len(answer))
    
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,
287,lsn20_sat,3,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Write a Python program that calculates only, but DOES NOT print, the average SAT score across all schools, and
        outputs the name of each school that is below the average.</p>
    <p>This lab makes use of the sat.csv dataset, which describes the average SAT performance for students attending
        350+ schools. Here is a typical line from the file:</p>
    <p>&nbsp;</p>
    <p><code>Henry Street School for International Studies, 391, 425, 385</code></p>
    <p>&nbsp;</p>
    <p><br>Each position in the line (separated by a comma) represents a different ""data element"". Here is a key for
        your reference:</p>
    <table style=""margin-left: auto; margin-right: auto; width: 68.8194%;"">
        <thead>
            <tr>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 44.4221%;"">School Name
                </th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 22.0014%;"">Critical
                    Reading Mean</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 19.4415%;"">Mathematics
                    Mean</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 14.0149%;"">Writing
                    Mean</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 44.4221%;"">Henry
                    Street School for International Studies</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 22.0014%;"">391</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 19.4415%;"">425</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 14.0149%;"">385</th>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
    <p><strong>NOTES (really really important):</strong></p>
    <ul>
        <li>You can get a school's average score by adding up the critical reading, mathematics, and writing composite
            scores.</li>
    </ul>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def solution():  
    result = ''
    file = open(""sat.csv"", ""r"")
    contents = file.read()
    lines = contents.split(""\n"")

    sat_table = []
    total = 0

    for line in lines:
        line_components = line.split(',')
        
        school = line_components[0]
        sat_score = int(line_components[1]) + int(line_components[2]) + int(line_components[3])
        total += sat_score
        row = [school, sat_score]
        sat_table.append(row)

    average = total / len(sat_table)

    for row in sat_table:
        if row[1] < average:
            result += str(row[0]) + ""\n""

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    expected_output = solution().strip().split('\n')
    output, error = autograder.run_script(""lsn20_sat.py"", [])
    lines = output.strip().split('\n')
    num_matches = autograder.compare_strings(lines, expected_output)
    
    print()
    
    if len(lines) == 0:
        return 0
    elif len(lines) > len(expected_output):
        print(""Your program printed more lines than we expected"")
        return round(100 * num_matches / len(lines), 1)
    else:
        return round(100.0/len(expected_output) * num_matches, 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
288,lsn20_popularnames,3,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Write a Python program that takes two inputs and produces two outputs. NOTE: This problem does not require
        creating an additional list to solve.</p>
    <p>The inputs from the user are:</p>
    <ol>
        <li>A gender, <span>a string which will be 'MALE' or 'FEMALE'</span></li>
        <li>A threshold number for the number of times that a name was used.</li>
    </ol>
    <p><span>Your program will compare the information from the user to the 'names.csv' dataset, and output two
            statistics as</span>&nbsp;output:</p>
    <ol>
        <li>The count of the number of names that were used above the threshold given for the provided gender</li>
        <li><span>The total count of children with the high usage names and the specified gender.</span> In other words,
            the sum of the number of children given names above the threshold value from input 2.</li>
    </ol>
    <p>&nbsp;</p>
    <p>This problem makes use of the names.csv dataset, which provides a list of over 1200+ names that were given to
        children in 2011. Here is a typical line from the file:</p>
    <p><code>FEMALE, HISPANIC, GIA, 21</code></p>
    <p>Each position in the line (separated by a comma) represents a different ""data element"". Here is a key for your
        reference:</p>
    <table style=""margin-left: auto; margin-right: auto; width: 50.2809%;"">
        <thead>
            <tr>
                <th style=""border-color: #000000; border-style: solid; width: 12.7202%;"">Gender</th>
                <th style=""border-color: #000000; border-style: solid; width: 15.0135%;"">Ethnicity</th>
                <th style=""border-color: #000000; border-style: solid; width: 8.84295%;"">Name</th>
                <th style=""border-color: #000000; border-style: solid; width: 63.2247%;"">Count<br>(i.e., Number of
                    Children Assigned this Name)</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th style=""border-color: #000000; border-style: solid; width: 12.7202%;"">FEMALE</th>
                <th style=""border-color: #000000; border-style: solid; width: 15.0135%;"">HISPANIC</th>
                <th style=""border-color: #000000; border-style: solid; width: 8.84295%;"">GIA</th>
                <th style=""border-color: #000000; border-style: solid; width: 63.2247%;"">21</th>
            </tr>
        </tbody>
    </table>
    <p style=""text-align: center;"">&nbsp;</p>
    <p><strong>EXAMPLES:</strong></p>
    <table style=""margin-left: auto; margin-right: auto; width: 50.2809%;"">
        <thead>
            <tr>
                <th style=""border-color: #000000; border-style: solid; width: 25%;""></th>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">Example 1</th>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">Example 2</th>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">Example 3</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">Inputs</th>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">
                    <p>MALE</p>
                    <p>190</p>
                </th>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">
                    <p>FEMALE</p>
                    <p>120</p>
                </th>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">
                    <p>MALE</p>
                    <p>80</p>
                </th>
            </tr>
            <tr>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">Output</th>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">
                    <p>1</p>
                    <p>224</p>
                </th>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">
                    <p>15</p>
                    <p>2670</p>
                </th>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">
                    <p>23</p>
                    <p>2740</p>
                </th>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>

</div>","from cs110 import autograder
import random, math

expected_output = [
""ISABELLA"",
""MIA"",
""MOSHE"",
""ESTHER"",
""SOPHIA"",
""EMMA"",
""CAMILA"",
""CHAYA"",
""ETHAN"",
""JAYDEN"",
""SOFIA"",
""AVA"",
""JEREMIAH"",
""CHAIM"",
""JOSE"",
""CHANA"",
""LUIS"",
""ELLA"",
""CHARLOTTE"",
""HAILEY"",
""LEAH"",
""MADISON""]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    num_to_print = random.randint(5, 15)
    output, error = autograder.run_script(""lsn20_popularnames.py"", [num_to_print])
    lines = output.strip().split('\n')
    num_matches = autograder.compare_strings(lines, expected_output[:num_to_print])
    
    print()
    
    if len(lines) == 0:
        return 0
    elif len(lines) > len(expected_output[:num_to_print]):
        print(""Your program printed more lines than we expected"")
        return round(100 * num_matches / len(lines), 1)
    else:
        return round(100.0/len(expected_output[:num_to_print]) * num_matches, 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,
289,lsn20_lowvolume,3,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Write a Python algorithm that opens the file and outputs the lowest (minimum) traffic count.&nbsp; Then, output
        the name of all streets whose traffic count is within 2500 (inclusive) of the minimum.</p>
    <p>&nbsp;</p>
    <p>This program makes use of the traffic.csv dataset. Here is a typical line from the file:</p>
    <p>&nbsp;</p>
    <p><code>691,6067 North,Kimball Ave,8/15/06,15600,North Bound:7500/South Bound:8100</code></p>
    <p>&nbsp;</p>
    <p>As you will recall from class, each position in the line (separated by a comma) represents a different ""data
        element"". Here is a key for your reference:</p>
    <table style=""margin-left: auto; margin-right: auto;"" width=""956"">
        <thead>
            <tr>
                <th style=""border-color: #000000; border-style: solid;"">ID</th>
                <th style=""border-color: #000000; border-style: solid;"">Address</th>
                <th style=""border-color: #000000; border-style: solid;"">Street</th>
                <th style=""border-color: #000000; border-style: solid;"">Sample Date</th>
                <th style=""border-color: #000000; border-style: solid;"">Total # of Passing Vehicles</th>
                <th style=""border-color: #000000; border-style: solid;""># of Vehicles by Direction</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th style=""border-color: #000000; border-style: solid;"">691</th>
                <th style=""border-color: #000000; border-style: solid;"">6067 North</th>
                <th style=""border-color: #000000; border-style: solid;"">Kimball Ave</th>
                <th style=""border-color: #000000; border-style: solid;"">8/15/06</th>
                <th style=""border-color: #000000; border-style: solid;"">15600</th>
                <th style=""border-color: #000000; border-style: solid;"">North Bound:7500/South Bound:8100</th>
            </tr>
        </tbody>
    </table>
    <p><br><br>Output one street name per line.</p>
    <p>&nbsp;</p>
    <p>For example, if the min traffic count is 500, and the roads within 2500 of this value are ""Road A"", ""Road B"",
        ""Road C"", then your program should output:</p>
    <pre>500<br>Road A<br>Road B<br>Road C</pre>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

expected_output = [
""700"",
""Harbor Ave"",
""Woodlawn Ave"",
""Root St"",
""Calumet Ave"",
""Financial PL"",
""16th St"",
""Racine Ave"",
""60th St"",
""Wentworth Ave"",
""Parnell Ave"",
""Ashland Ave"",
""Federal St"",
""Hamlin Ave"",
""Pitney Ct"",
""109th St"",
""Loomis St"",
""Harrison St"",
""24th St"",
""La Salle St"",
""83rd Pl"",
""Homan Ave""]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""lsn20_lowvolume.py"", [])
    lines = set(output.split('\n'))
    matches = (len(lines.intersection(expected_output)))
    return (round((matches/22)*100,1))

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,1,0,0,0,
290,lsn20_averagetraffic,3,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>This program makes use of the traffic.csv dataset. Here is a typical line from the file:</p>
    <p><code>691,6067 North,Kimball Ave,8/15/06,15600,North Bound:7500/South Bound:8100</code></p>
    <p>&nbsp;</p>
    <p><br>As you will recall from class, each position in the line (separated by a comma) represents a different ""data
        element"". Here is a key for your reference:</p>
    <table style=""margin-left: auto; margin-right: auto;"" width=""956"">
        <thead>
            <tr>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">ID</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">Address</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">Street</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">Sample Date</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">Total # of Passing Vehicles
                </th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;""># of Vehicles by Direction
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">691</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">6067 North</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">Kimball Ave</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">8/15/06</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">15600</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">North Bound:7500/South
                    Bound:8100</th>
            </tr>
        </tbody>
    </table>
    <p><br><br>Write a Python algorithm that opens the file and outputs the # of roads whose traffic count is greater
        than (or equal to) the average.&nbsp; For example, if you determine that the answer is 20, your program should
        output:</p>
    <pre>20</pre>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

expected_output = [""525""]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(""lsn20_averagetraffic.py"", [])
    lines = output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_output)
       
    return round(num_matches * (100.0 / len(expected_output)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
291,lsn19_skill2,3,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You are being provided with an empty table that contains information about
    USAF Academy Squadrons. The columns of the table are organized as follows:</p>
    <table style=""margin-left: auto; margin-right: auto; width: 25.4015%;"" border=""1"">
        <tbody>
            <tr>
                <td style=""width: 53.1718%; text-align: center;""><strong>Squadron Name</strong></td>
                <td style=""width: 46.3823%; text-align: center;""><strong>Squadron Number</strong></td>
            </tr>
            <tr>
                <td style=""width: 53.1718%; text-align: center;"">Name Goes Here (string)</td>
                <td style=""width: 46.3823%; text-align: center;""># Goes Here (integer)</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
    <p>Add the following two rows to the table:</p>
    <table style=""margin-left: auto; margin-right: auto; width: 15.1379%;"" border=""1"">
        <tbody>
            <tr>
                <td style=""width: 79.4605%; text-align: center;"">Dogs of War</td>
                <td style=""width: 20.1389%; text-align: center;"">3</td>
            </tr>
            <tr>
                <td style=""width: 79.4605%; text-align: center;"">Wolverines</td>
                <td style=""width: 20.1389%; text-align: center;"">19</td>
            </tr>
        </tbody>
    </table>
    <p>NOTE: 3 and 19 are integers and not strings.</p>
</div>","from cs110 import autograder
import random, math
from lsn19_skill2 import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    if len(squadron_table) >= 2:
        print(""Squadron Table has at least 2 things in them.  Let's see what's inside!"")
        score += 20
        
        if (squadron_table[0][0] == ""Dogs of War"" and squadron_table[0][1] == 3):
            print(""First Row Added Correctly"")
            score += 40
        else:
            print(""Something is wrong with the first row.  Make sure you are appending a list!"")
        
        if (squadron_table[1][0] == ""Wolverines"" and squadron_table[1][1] == 19):
            print(""Second Row Added Correctly"")
            score += 40
        else:
            print(""Something is wrong with the second row.  Make sure you are appending a list!"")
    else:
        print(""Squadron Table does not appear to have (at least) 2 rows"")
        
    return score
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
292,lsn19_skill1,3,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You are being provided with a table&nbsp; that describes various starship classes from the Star Trek universe (we're nerds . . . just go with it), as well as two input statements that get a row and column from the user. &nbsp;</p>
    <p>Print out the corresponding row/column value from the table.</p>
</div>","from cs110 import autograder
import random, math

starship_table = [['Constitution', 288.6,  127.1,  72.6],
                  ['Galaxy',       642.5,  463.73, 135.26],
                  ['Intrepid',     343.0,  133.0,  66],
                  ['Sovereign',   685.3,  250.6,  88.2]]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    row_to_print = random.randint(0, len(starship_table) - 1)
    col_to_print = random.randint(0, len(starship_table[0]) - 1)
    value_from_table = str(starship_table[row_to_print][col_to_print])
    value_from_table_flipped = str(starship_table[col_to_print][row_to_print])
    output, error = autograder.run_script(""lsn19_skill1.py"", [row_to_print, col_to_print])
    
    if output.strip() == value_from_table:
        print(""CORRECT"")
        return 100.0
    elif output.strip() == value_from_table_flipped:
        print(""INCORRECT. Expected"", value_from_table)
        print(""It looks like you flipped columns and rows.  Remember that the format is list_name[row][col]"")
        return 25.0
    else:
        print(""INCORRECT. Expected"", value_from_table)
        print(""Try again.  Remember that the format is list_name[row][col]"")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
293,lsn19_population,3,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
    <p>You are being provided with a simple 2D list that contains the names and populations of the 10 largest cities in
        the world. This list (which is called<span>&nbsp;</span><code>cities_table</code>) can be logicially visualized
        as the following:</p>
    <p style=""text-align: center;"">&nbsp;</p>
    <table style=""margin-left: auto; margin-right: auto; width: 14.6715%;"">
        <thead>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">
                    <strong>City</strong></td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">
                    <strong>Population</strong></td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Tokyo</td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">37,435,191
                </td>
            </tr>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Delhi</td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">29,399,141
                </td>
            </tr>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Shanghai
                </td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">25,647,805
                </td>
            </tr>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Sao Paulo
                </td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">21,846,507
                </td>
            </tr>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Mexico City
                </td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">21,671,908
                </td>
            </tr>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Cairo</td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">20,484,965
                </td>
            </tr>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Dhaka</td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">20,283,552
                </td>
            </tr>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Mumbai</td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">20,185,064
                </td>
            </tr>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Beijing
                </td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">20,035,455
                </td>
            </tr>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Osaka</td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">19,222,665
                </td>
            </tr>
        </tbody>
    </table>
    <p><br>Write a Python program that gets a population from the user, and prints the names of all the cities whose
        populations are at least that big (keep the same order as in the 2D list). Print each city's name on a separate
        line.</p>
    <p>&nbsp;</p>
    <p><strong>EXAMPLES:</strong></p>
    <table style=""margin-left: auto; margin-right: auto; width: 18.3312%;"">
        <thead>
            <tr>
                <th style=""border-color: #000000; border-style: solid; width: 26.0071%;""></th>
                <th style=""border-color: #000000; border-style: solid; width: 36.6114%;"">Example 1</th>
                <th style=""border-color: #000000; border-style: solid; width: 36.6114%;"">Example 2</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th style=""border-color: #000000; border-style: solid; width: 26.0071%;"">Input</th>
                <th style=""border-color: #000000; border-style: solid; width: 36.6114%;"">25000000</th>
                <th style=""border-color: #000000; border-style: solid; width: 36.6114%;"">30000000</th>
            </tr>
            <tr>
                <th style=""border-color: #000000; border-style: solid; width: 26.0071%;"">Output</th>
                <th style=""border-color: #000000; border-style: solid; width: 36.6114%;"">Tokyo<br>Delhi<br>Shanghai</th>
                <th style=""border-color: #000000; border-style: solid; width: 36.6114%;"">Tokyo</th>
            </tr>
        </tbody>
    </table>

</div>","from cs110 import autograder
import random

def solution(population):
    result = ''
    
    cities_table = [
        ['Tokyo', 37435191],
        ['Delhi', 29399141],
        ['Shanghai', 25647805],
        ['Sao Paulo', 21846507],
        ['Mexico City', 21671908],
        ['Cairo', 20484965],
        ['Dhaka', 20283552],
        ['Mumbai', 20185064],
        ['Beijing', 20035455],
        ['Osaka', 19222665]]
    
    for row in cities_table:
        if row[1] >= population:
            result += row[0] + '\n'
    
    return result.strip()


def test_passed():
    
    random_population_size = random.randint(19, 30) * 1000000
    
    output, error = autograder.run_script(""lsn19_population.py"", [random_population_size])
    answer = solution(random_population_size)
    
    lines = output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, answer.strip().split('\n'))
    
    if num_matches == len(lines):
        print(""\nCORRECT"")
        return 100.0
    else:
        print(""\nOne or more outputs were incorrect."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,
294,lsn19_movies,3,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
    <div id=""ember1277"" class=""content-resource markdown-content-resource ember-view"">
        <div id=""ember1278"" class=""ember-view"">
            <p>Write a Python function called<span>&nbsp;</span><code>get_movies</code><span>&nbsp;</span>that takes
                three parameters:</p>
            <ul>
                <li>A two-dimensional list containing movie titles and other stats (see table below for an example)</li>
                <li>A rating (e.g., ""PG"", ""R"")</li>
                <li>A run time (in minutes)</li>
            </ul>
            <p style=""text-align: center;"">&nbsp;</p>
            <table style=""margin-left: auto; margin-right: auto;"" width=""635"">
                <thead>
                    <tr>
                        <th style=""border-style: solid;"">Title</th>
                        <th style=""border-style: solid;"">Release Year</th>
                        <th style=""border-style: solid;"">Rating</th>
                        <th style=""border-style: solid;"">Run Time (minutes)</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th style=""border-style: solid;"">Star Wars: A New Hope</th>
                        <th style=""border-style: solid;"">1977</th>
                        <th style=""border-style: solid;"">PG</th>
                        <th style=""border-style: solid;"">121</th>
                    </tr>
                    <tr>
                        <th style=""border-style: solid;"">Star Trek: The Motion Picture</th>
                        <th style=""border-style: solid;"">1979</th>
                        <th style=""border-style: solid;"">G</th>
                        <th style=""border-style: solid;"">132</th>
                    </tr>
                    <tr>
                        <th style=""border-style: solid;"">Indiana Jones: Raiders of the Lost Ark</th>
                        <th style=""border-style: solid;"">1989</th>
                        <th style=""border-style: solid;"">PG</th>
                        <th style=""border-style: solid;"">115</th>
                    </tr>
                </tbody>
            </table>
            <p><br>Your function should return the number of movies that have the specified rating, and run for at least
                the number of minutes specified.</p>
            <p>&nbsp;</p>
            <p><strong>EXAMPLE:</strong><br>If the above table were contained within a list
                called<span>&nbsp;</span><code>movie_table</code>,
                then<span>&nbsp;</span><code>get_movies(movie_table, ""PG"", 100)</code><span>&nbsp;</span>should return
                2.</p>
            <p>&nbsp;</p>
        </div>
    </div>
</div>","from cs110 import autograder
import random
import lsn19_movies

def solution(movies_table, rating, runtime):
    count = 0
    
    for row in movies_table:
        if row[2] == rating and row[3] >= runtime:
            count += 1
    
    return count

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    ratings = ['PG', 'PG-13', 'R']
    num_passed = 0
    
    for rating in ratings:
        movies_table = [
            [""Star Wars: A New Hope"", 1977, ""PG"", 121],
            [""Star Trek: The Motion Picture"", 1979, ""G"", 132],
            [""Raiders of the Lost Ark"", 1989, ""PG"", 115],
            [""Indiana Jones and the Temple of Doom"", 1984, ""PG"", 118],
            [""Indiana Jones and the Last Crusade"", 1989, ""PG-13"", 127],
            [""Serenity"", 2005, ""PG-13"", 119],
            [""Joker"", 2019, ""R"", 122],
            [""The Terminator"", 1984, ""R"", 107]
            ]
        test_table = []
        runtime = random.randint(90, 120)
        
        for j in range(random.randint(2, 5)):
            index = random.randint(0, len(movies_table)-1)
            test_table.append(movies_table[index])
            movies_table.remove(movies_table[index])
        
        print(""Testing (Rating = "" + rating + ""):\n"" + ""  Movie Table: "" + str(test_table) + ""\n"" + ""  Runtime: "" + str(runtime))
        print(""  Expecting: "" + str(solution(test_table, rating, runtime)) + ""\n  Your Function's Output: "" + str(lsn19_movies.get_movies(test_table, rating, runtime)))
        
        if solution(test_table, rating, runtime) == lsn19_movies.get_movies(test_table, rating, runtime):
            print(""PASSED!\n"")
            num_passed += 1
        else:
            print(""INCORRECT\n"")
            
    
    return (num_passed / len(ratings)) * 100.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,
295,lsn19_golf,3,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
    <p>The cadet intercollegiate golf team needs some help tracking individual performance. Create a Python algorithm
        that inputs repeated pairs of cadet last-names followed by the golfers score until the word
        <strong>END</strong> (all capital letters) is entered at the member last-name prompt.</p>
    <p>Your algorithm should output:</p>
    <ul>
        <li>The last name of the member with the lowest (best) score, if there are two members with the same lowest
            score, it should output the last name of the first person entered.</li>
        <li>The percentage of members who are within 5 strokes (inclusive) of the lowest score.</li>
    </ul>
    <p>There is no bound on the number of golfers that may be entered, but you may assume that there will be at least
        one golfer and score entered.</p>
    <p>&nbsp;</p>
    <p><strong>EXAMPLES:</strong></p>
    <table style=""margin-left: auto; margin-right: auto;"" width=""486"">
        <thead>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""></td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Example 1</strong>
                </td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Example 2</strong>
                </td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Example 3</strong>
                </td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Inputs</strong></td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    Woods<br>48<br>Nicklaus<br>51<br>Hogan<br>49<br>Jones<br>46<br>Palmer<br>52<br>END</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    Snead<br>52<br>Mickelson<br>48<br>Nelson<br>48<br>END</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    Player<br>51<br>Watson<br>51<br>Singh<br>48<br>Floyd<br>49<br>Normal<br>54<br>END</td>
            </tr>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Output</strong></td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Jones<br>80.0</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Mickelson<br>100.0</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Singh<br>60.0</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, statistics

random_names = ['Mcllroy', 'Koepka', 'Rahm', 'Woods', 'Thomas', 'Johnson', 'Cantlay', 'Simpson']

def get_random_name():
    global random_names
    name = random_names[random.randint(0, len(random_names)-1)]
    random_names.remove(name)
    return name


def solution(data):
    min_value = 99999
    min_name = """"
    count = 0
    
    for row in data:
        if row[1] < min_value:
            min_value = row[1]
            min_name = row[0]
    
    for row in data:
        if row[1] <= min_value + 5:
            count += 1

    return min_name, (count / len(data) * 100.0)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_inputs = random.randint(2, 5)
    input_list = []
    data = []
        
    for i in range(num_inputs):
        new_row = [get_random_name(), random.randint(70, 90)]
        input_list.append(new_row[0])
        input_list.append(new_row[1])
        data.append(new_row)
    input_list.append(""END"")
    
    lowest_name, percent = solution(data)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn19_golf.py"", input_list)
    lines = output.strip().split('\n')

    # Checks Min
    if len(lines) < 2:
        print(""Number of output lines does not match"")
        return 0
    else:
        if not lowest_name == lines[0]:
            print(""Incorrect Name.  Expected "" + str(lowest_name))
            return 0
        if not autograder.equals(percent, lines[1]):
            print(""Incorrect Percent.  Expected "" + str(percent))
            return 50
        
    print(""PASSED!"")
    return 100
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)








# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
296,lsn19_credit,3,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
    <div id=""ember1277"" class=""content-resource markdown-content-resource ember-view"">
        <div id=""ember1278"" class=""ember-view"">
            <p>The Air Academy Federal Credit Union wants to identify its best customers and comes to you for help. To
                help with the accounting, create a Python program which inputs repeated pairs of member last-names
                followed by account balances until the word <strong>DONE</strong> (all capital letters) is entered at
                the member last-name prompt.</p>
            <p>Your program should output:</p>
            <ul>
                <li>The last name of the member with the highest account value, if there are two members with the same
                    highest account value it should output the name of the first person entered.</li>
                <li>It will then output the percentage members who are within $10,000 (inclusive) of the highest account
                    value.</li>
            </ul>
            <p>There is no bound on the number of members that may be entered, but you may assume that there will be at
                least one member and balance entered.</p>
            <p>&nbsp;</p>
            <p><strong>EXAMPLE:</strong></p>
            <table style=""margin-left: auto; margin-right: auto;"" width=""717"">
                <thead>
                    <tr>
                        <th style=""border-color: #000000; border-style: solid;""></th>
                        <th style=""border-color: #000000; border-style: solid;"">Example 1</th>
                        <th style=""border-color: #000000; border-style: solid;"">Example 2</th>
                        <th style=""border-color: #000000; border-style: solid;"">Example 3</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th style=""border-color: #000000; border-style: solid;"">Inputs</th>
                        <th style=""border-color: #000000; border-style: solid;"">
                            Rockefeller<br>120000<br>Chase<br>115000<br>Morgan<br>110000<br>Gates<br>90000<br>Jobs<br>65000<br>DONE
                        </th>
                        <th style=""border-color: #000000; border-style: solid;"">
                            Jobs<br>150000<br>Chase<br>150000<br>Kennedy<br>40000<br>DONE</th>
                        <th style=""border-color: #000000; border-style: solid;"">
                            Morgan<br>145000<br>Chase<br>135000<br>Kennedy<br>142000<br>Gates<br>145000<br>DONE</th>
                    </tr>
                    <tr>
                        <th style=""border-color: #000000; border-style: solid;"">Output</th>
                        <th style=""border-color: #000000; border-style: solid;"">Rockefeller<br>60.0</th>
                        <th style=""border-color: #000000; border-style: solid;"">Jobs<br>66.66666666666666</th>
                        <th style=""border-color: #000000; border-style: solid;"">Morgan<br>100.0</th>
                    </tr>
                </tbody>
            </table>
            <p>&nbsp;</p>
        </div>
    </div>
</div>","from cs110 import autograder
import random, statistics

random_names = ['Gates', 'Bezos', 'Zuckerberg', 'Ellison', 'Page', 'Brin', 'Huateng', 'Dell', 'Musk', 'Allen']

def get_random_name():
    global random_names
    name = random_names[random.randint(0, len(random_names)-1)]
    random_names.remove(name)
    return name


def solution(data):
    highest_value = -99999
    highest_name = """"
    count = 0
    
    for row in data:
        if row[1] > highest_value:
            highest_value = row[1]
            highest_name = row[0]
    
    for row in data:
        if row[1] >= highest_value - 10000:
            count += 1

    return highest_name, (count / len(data) * 100.0)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_inputs = random.randint(5, 7)
    input_list = []
    data = []
        
    for i in range(num_inputs):
        new_row = [get_random_name(), random.randint(5000, 35000)]
        input_list.append(new_row[0])
        input_list.append(new_row[1])
        data.append(new_row)
    input_list.append(""DONE"")
    
    highest_balance, percent = solution(data)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn19_credit.py"", input_list)
    lines = output.strip().split('\n')

    # Checks Min
    if len(lines) < 2:
        print(""Number of output lines does not match"")
        return 0
    else:
        if not highest_balance == lines[0]:
            print(""Incorrect Highest Balance.  Expected "" + str(highest_balance))
            return 0
        if not autograder.equals(percent, lines[1]):
            print(""Incorrect Percent.  Expected "" + str(percent))
            return 50
        
    print(""PASSED!"")
    return 100
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)








# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,
297,lsn19_100m,3,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
    <p>You have been asked by your unit to record 100m dash times for an upcoming USAFA track meet. Create a Python
        algorithm that first asks for the number of cadets, and then asks for that many cadet last names, squadrons, and
        100m dash times (in that order).</p>
    <p>Your program should output:</p>
    <ul>
        <li>The cadet squadron containing the cadet with the fastest 100m dash time followed by their 100m dash time. If
            there is a tie for fastest 100m dash times, you should output the squadron number and time for the LAST
            cadet entered who had that fastest time.</li>
        <li>The number of cadets whose 100m dash time was faster than the average.</li>
    </ul>
    <p>There is no bound on the number of cadets that may be entered, but you may assume that there will be at least one
        cadet and track time entered.</p>
    <p>&nbsp;</p>
    <p><strong>EXAMPLES:</strong></p>
    <table style=""margin-left: auto; margin-right: auto;"" width=""475"">
        <thead>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""></td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Example 1</strong>
                </td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Example 2</strong>
                </td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Example 3</strong>
                </td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Inputs</strong></td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    4<br>Thorpe<br>13<br>10.2<br>Owens<br>22<br>9.93<br>Mathias<br>19<br>9.99<br>Rudolph<br>39<br>10.23
                </td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    3<br>Johnson<br>7<br>10.3<br>Tyus<br>14<br>10.02<br>Lewis<br>40<br>9.67</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    2<br>Joyner<br>1<br>10.08<br>Kersee<br>29<br>9.97</td>
            </tr>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Output</strong></td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">22<br>9.93<br>2</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">40<br>9.67<br>1</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">29<br>9.97<br>1</td>
            </tr>
        </tbody>
    </table>

</div>","from cs110 import autograder
import random, statistics

random_names = ['Alice', 'Bob', 'Courtney', 'Devon', 'Frank', 'Genie']

def get_random_name():
    global random_names
    name = random_names[random.randint(0, len(random_names)-1)]
    random_names.remove(name)
    return name

def solution(data):
    fastest_time = 99999
    fastest_squadron = 0
    total = 0
    count = 0
    
    for row in data:
        total += row[2]
        if row[2] <= fastest_time:
            fastest_time = row[2]
            fastest_squadron = row[1]
            
    average = total / len(data)
    
    for row in data:
        if row[2] <= average:
            count += 1
    
    return fastest_squadron, fastest_time, count


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_inputs = random.randint(2, 5)
    input_list = [num_inputs]
    data = []
        
    for i in range(num_inputs):
        new_row = [get_random_name(), random.randint(1, 40), round(random.uniform(12, 18), 1)]
        input_list.append(new_row[0])
        input_list.append(new_row[1])
        input_list.append(new_row[2])
        data.append(new_row)
    
    fastest_squadron, fastest_time, count = solution(data)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn19_100m.py"", input_list)
    lines = output.strip().split('\n')

    # Checks Min
    if len(lines) != 3:
        print(""Number of output lines does not match"")
        return 0
    else:
        if not autograder.equals(fastest_squadron, lines[0]):
            print(""Incorrect Squadron.  Expected "" + str(fastest_squadron))
            return 0
        if not autograder.equals(fastest_time, lines[1]):
            print(""Incorrect Time.  Expected "" + str(fastest_time))
            return 33
        if not autograder.equals(count, lines[2]):
            print(""Incorrect Count.  Expected "" + str(count))
            return 67
        
    print(""PASSED!"")
    return 100
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)








# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
298,lsn18_triangle,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write an algorithm that asks the user for X and Y coordinates of a single point (the coordinates of the top left point on the triangle), the length of the base, and the height of a right triangle. Then, open a graphics window and draw the triangle. The area of the triangle is should be displayed at the bottom center of the window in black.</p>
<p>&nbsp;</p>
<p><strong>HINTS:</strong></p>
<ul>
<li>Make sure you get the user input BEFORE you open the window. Otherwise, the program will freeze.</li>
<li>The&nbsp;<code>draw_text</code>&nbsp;function will draw text on a screen. Don't worry about getting the text EXACTLY in the center (it's hard!).</li>
</ul>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn18_triangle.py"", doraise=True)
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
        
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
299,lsn18_stamp,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Create a pythonGraph function called&nbsp;<code>draw_stamp</code>&nbsp;that accepts an x and y coordinate as parameters. Add code so that this function will then draw a picture (of your choosing) centered on that coordinate. </p>
<p>&nbsp;</p>
<p>To test your function, create a pythonGraph window, and call your function several times (each time, passing it a different set of x and y coordinates).</p>
</div>

","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn18_stamp.py"", doraise=True)
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
        
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
300,lsn18_skill1,3,skill,0,"<div>
    <p><strong>PROBLEM STATEMENT:<br></strong>Read the pythonGraph documentation, and write the following 3 lines of
        code:</p>
    <ol>
        <li>Use the open_window function to create a graphics window</li>
        <li>Use the draw_circle function to draw a circle (any size and/or color).</li>
        <li>Call the wait_for_close function to keep the graphics window open until you click the X in the top right
            corner.</li>
    </ol>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0.0
    
    if autograder.code_compiles(""lsn18_skill1.py""):
        file = open(""lsn18_skill1.py"", ""r"")
        file_contents = file.read()
    
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
    
        if ""open_window("" in file_contents:
            print(""open_window Called"")
            score += 33
        else:
            print(""open_window does not appear to be called"")
        
        if ""draw_circle("" in file_contents:
            print(""draw_circle Called"")
            score += 34
        else:
            print(""draw_circle does not appear to be called"")
            
        if ""wait_for_close("" in file_contents:
            print(""wait_for_close Called"")
            score += 33
        else:
            print(""wait_for_close does not appear to be called"")
            
    else:
        print(""There appears to be an error in your python Script that is preventing it from running"")
    
    return score        
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
301,lsn18_simpledrawing,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Using pythonGraph (and the documentation for pythonGraph), experiment with each of the drawing commands listed (drawing commands begin with the keyword &ldquo;draw&rdquo;). Draw something interesting using at least 4 different drawing commands. One of those drawing commands must be&nbsp;<code>draw_image</code></p>
<p><strong>NOTE: <br /></strong>The best files will be added to our Python ""Hall of Fame"".</p>
</div>

","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    drawing_functions = [""draw_arc"", ""draw_image"", ""draw_rectangle"", ""draw_circle"", ""draw_ellipse"", ""draw_line"", ""draw_pixel"", ""draw_text"", ""write_text""]
    drawing_functions_called = []
    
    print(""----------------------------------------------------------------------"")
    print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
    print(""----------------------------------------------------------------------\n"")
    
    file = open(""lsn18_simpledrawing.py"", ""r"")
    file_contents = file.read()
    
    for f in drawing_functions:
        if f in file_contents and f not in drawing_functions_called:
            drawing_functions_called.append(f)
    
    if len(drawing_functions_called) >= 4 and ""draw_image"" in drawing_functions_called:
        print(""Good Job!"")
        return 100.0
    elif len(drawing_functions_called) >= 4 and ""draw_image"" not in drawing_functions_called:
        print(""Missing at least one call of draw_image"")
        return 90.0
    else:
        print(""Not enough different drawing functions.  Need 4 unique (including draw_image) calls."")
        return 25 * len(drawing_functions_called)
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
302,lsn18_randomcircles,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Create a pythonGraph that asks the user for the number of circles to draw. Your program should then open a pythonGraph window and then draw that many circles somewhere within view.</p>
<p><strong>Hints</strong></p>
<ul>
<li>Import the&nbsp;<code>random</code>&nbsp;module in order to generate random numbers. There are specifically two functions that are useful:</li>
<li><code>random.random()</code>&nbsp;returns a random number between 0.0 and 1.0</li>
<li><code>random.randint(start, end)</code>&nbsp;returns a random integer between&nbsp;<code>start</code>&nbsp;and&nbsp;<code>end</code></li>
</ul>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:
        py_compile.compile(""lsn18_randomcircles.py"", doraise=True)
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
303,lsn16_practice4,3,lab,0,"<div><strong>PROBLEM NAME:<br></strong>lsn16_practice4</p>
    <p>&nbsp;</p>
    <p><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>You have been provided with a dataset called<span>&nbsp;</span><code>fuelprices.csv</code><span>&nbsp;</span>that
        contains monthly gasoline prices from 2006 - 2012. Here is a typical line from the dataset (each line ends with
        the newline \n character):</p>
    <p><code>1/1/2006 0:00,Regular,2.314</code></p>
    <p>&nbsp;</p>
    <p>Each position in the line (separated by a comma) represents a different data element, or column. The
        following table shows how the above line can be interpreted:</p>
    <table style=""margin-left: auto; margin-right: auto;"">
        <thead>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""></td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Day</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Gas Type</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Price (in Dollars)</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Value</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">1/1/2006 0:00</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Regular</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">2.314</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
    <p>Write a Python program that asks the user for:</p>
    <ul>
        <li>A Gas Type (e.g., Regular)</li>
    </ul>
    <p>&nbsp;</p>
    <p>Your program should then read the file and output:</p>
    <ul>
        <li>The average price of gas for that gas type</li>
    </ul>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math


def test_passed():

    num_tests_passed = 0
    test_cases = [(""Regular"", 37, 2.938), (""Midgrade"", 37, 3.098), (""Premium"", 37, 3.208), (""Diesel"", 32, 3.242)]

    for test_case in test_cases:
        print(""# -----------------------------------"")
        print(""# Testing"", test_case[0])
        print(""# -----------------------------------"")
        output, error = autograder.run_script(""lsn16_practice4.py"", [test_case[0]])
    
        lines = output.strip().split('\n')
        
        if len(lines) > 0:
            if autograder.equals(lines[0], test_case[2]):
                print(""CORRECT"")
                num_tests_passed += 1
            elif len(lines) > 1 and autograder.equals(lines[0], test_case[1]) and autograder.equals(lines[1], test_case[2]):
                print(""CORRECT"")
                num_tests_passed += 1
            else:
                print(""INCORRECT"")
            print()
                    
    return round(100 / len(test_cases), 1) * num_tests_passed
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
304,lsn16_practice3,3,lab,0,"<div><strong>PROBLEM NAME:<br></strong>lsn16_practice3</p>
    <p>&nbsp;</p>
    <p><strong>PROBLEM STATEMENT:<br></strong>You are writing a program to analyze the BMI of cadets.&nbsp; Write a
        program that asks for the number of cadets, and then gets that many weights and heights (alternating, a weight
        then the corresponding height, in that order).&nbsp; Your program should then output the number of thin,
        healthy, overweight, and obese cadets (based on their BMI), using the following formula and table as a guide:
    </p>
    <p>&nbsp;</p>
    <p style=""text-align: center;""><strong><span>BMI = 703 * (weight / height<sup>2</sup>)</span></strong></p>
    <p style=""text-align: center;"">&nbsp;</p>
    <table style=""margin-left: auto; margin-right: auto;"" border=""1"">
        <tbody>
            <tr>
                <td style=""text-align: center;""><strong>Rating</strong></td>
                <td style=""text-align: center;""><strong>BMI</strong></td>
            </tr>
            <tr>
                <td style=""text-align: center;"">Thin</td>
                <td style=""text-align: center;"">less than 18.5</td>
            </tr>
            <tr>
                <td style=""text-align: center;"">Healthy</td>
                <td style=""text-align: center;"">at least 18.5 but less than 25</td>
            </tr>
            <tr>
                <td style=""text-align: center;"">Overweight</td>
                <td style=""text-align: center;"">at least 25 but less than 30</td>
            </tr>
            <tr>
                <td style=""text-align: center;"">Obese</td>
                <td style=""text-align: center;"">30 or more</td>
            </tr>
        </tbody>
    </table>
    <p><strong>EXAMPLES:</strong></p>
    <table style=""margin-left: auto; margin-right: auto;"" width=""589"">
        <thead>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""></td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Example 1</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Example 2</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Example 3</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Inputs</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    <p>3</p>
                    <p>180<br>60<br>149<br>68<br>168<br>72</p>
                </td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    <p>4</p>
                    <p>139<br>71<br>141<br>75<br>191<br>62<br>176<br>58</p>
                </td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    <p>7</p>
                    <p>194<br>70<br>159<br>66<br>167<br>63<br>173<br>75<br>161<br>66<br>186<br>72<br>131<br>60</p>
                </td>
            </tr>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Outputs</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">0<br>2<br>0<br>1</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">1<br>1<br>0<br>2</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">0<br>1<br>6<br>0</td>
            </tr>
        </tbody>
    </table>

</div>","from cs110 import autograder
import random, math

def solution(weights, heights):
    num_thin = 0
    num_healthy = 0
    num_overweight = 0
    num_obese = 0
    
    for i in range(len(weights)):
        bmi = 703 * (weights[i] / heights[i]**2)

        if bmi <= 18.5:
            num_thin += 1
        elif bmi <= 25:
            num_healthy += 1
        elif bmi <= 30:
            num_overweight += 1
        else:
            num_obese += 1
    
    return (num_thin, num_healthy, num_overweight, num_obese)


def test_passed():

    score = 0

    # Generates the Test Set
    num_students = random.randint(5, 10)
    inputs = [num_students]
    weights = []
    heights = []
    
    for i in range(num_students):
        random_weight = random.randint(120, 200)
        random_height = random.randint(55, 76)
        
        weights.append(random_weight)
        heights.append(random_height)
        
        inputs.append(random_weight)
        inputs.append(random_height)
    
    output, error = autograder.run_script(""lsn16_practice3.py"", inputs)
    expected_output = solution(weights, heights)
    
    lines = output.strip().split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Thin is Correct"")
        score += 25
    else:
        print(""Thin is Incorrect.  Expected"", expected_output[0])

    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Healthy is Correct"")
        score += 25
    else:
        print(""Healthy is Incorrect.  Expected"", expected_output[1])
    
    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):
        print(""Overweight is Correct"")
        score += 25
    else:
        print(""Overweight is Incorrect.  Expected"", expected_output[2])
    
    if len(lines) > 3 and autograder.equals(lines[3], expected_output[3]):
        print(""Obese is Correct"")
        score += 25
    else:
        print(""Obese is Incorrect.  Expected"", expected_output[0])
        
    return score


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
305,lsn16_practice2,3,lab,0,"<div><strong>PROBLEM NAME:<br></strong>lsn16_practice2</p>
    <p>&nbsp;</p>
    <p><strong>PROBLEM STATEMENT:<br></strong>You have been provided with a function that returns the
        n<sup>th</sup><span>&nbsp;</span>value in a sequence (i.e.<span>&nbsp;</span>pattern). Get a number from the
        user (x), and print the x<sup>th</sup><span>&nbsp;</span>to the x+5th value in that sequence (6 numbers total).
    </p>
    <p>&nbsp;</p>
    <p><strong>HINTS:</strong></p>
    <ul>
        <li>To get the 8th value in a sequence, you would call<span>&nbsp;</span><span><code>get_value(8)</code></span>
        </li>
    </ul>
    <p>&nbsp;</p>
    <p><strong>EXAMPLES:</strong></p>
    <table style=""margin-left: auto; margin-right: auto;"" width=""589"">
        <thead>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""></td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Example 1</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Example 2</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Example 3</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Inputs</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">2</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">4</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">11</td>
            </tr>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Outputs</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    5<br>7<br>9<br>11<br>13<br>15</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    9<br>11<br>13<br>15<br>17<br>19</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    23<br>25<br>27<br>29<br>31<br>33</td>
            </tr>
        </tbody>
    </table>

</div>","from cs110 import autograder
import random, math


def get_value(n):
    return (2 * n) + 1


def solution(x):
    result = ''
    
    for i in range(x, x+6):
        result += str(get_value(i)) + ""\n""
    
    return result


def test_passed():
    random_value = random.randint(5, 15)
    output, error = autograder.run_script(""lsn16_practice2.py"", [random_value])
    expected_output = solution(random_value)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT.  Expected:"")
        print(expected_output)
    
    return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
306,lsn16_practice1,3,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong>Define a function called <code>add_values</code>. The function&nbsp;should
    take 3 parameters (x, y, z), and return the sum of these values.</p>
    <p>&nbsp;</p>
    <p><strong>NOTES:</strong></p>
    <ul>
        <li>You do not need to call the function.&nbsp; Simply define it.</li>
    </ul>
    <p>&nbsp;</p>

</div>","from cs110 import autograder
import lsn16_practice1

def add_values(x, y, z):
    return x + y + z

def test_passed():
    
    if 'add_values' in dir(lsn16_practice1) and add_values(1, 2, 3) == lsn16_practice1.add_values(1, 2, 3):
        print(""PASSED"")
        return 100.0
    elif 'add_values' not in dir(lsn16_practice1):
        print(""FAILED.  Could not find function 'add_values'"")
    elif result != solution:
        print(""FAILED.  Function 'add_values' did not return the correct value"")
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
307,lsn15_titanicsurvivor,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>This program makes use of the Titanic dataset. Here is a typical line from the file:</p>
<p><code>0,3,Mr. Owen Harris Braund,male,22,1,0,7.25</code></p>
<p><br />As you will undoubtedly recall from class, each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Survived<br />(0=False; 1=True)</th>
<th>Class</th>
<th>Name</th>
<th>Gender</th>
<th>Age</th>
<th>Siblings/Spouses Aboard<br />(0=False; 1=True)</th>
<th>Parents/Children Aboard<br />(0=False; 1=True)</th>
<th>Fare</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>0</th>
<th>3</th>
<th>Mr. Owen Harris Braund</th>
<th>male</th>
<th>22</th>
<th>1</th>
<th>0</th>
<th>7.25</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python algorithm that asks the user for the name of the file containing the titanic dataset. Your program will output the name of the survivor with the lowest fare. Print that person's name in a separate file (named ""result.txt"")</p>
<p>For example, if the survivor's name is Mr. Owen Harris Braund, result.txt should contain the following:</p>
<pre>Mr. Owen Harris Braund<br />7.25</pre>
<p><br /><strong>NOTES:</strong></p>
<ul>
<li>The values used in the above example are purely hypothetical. Your answers will be different.</li>
<li>To thoroughly test your code, we created several subsets of the titanic dataset. Use them when developing/troubleshooting your code.</li>
</ul>
</div>","from cs110 import autograder
import random, math, os.path

lowest_fare = 9999999
lowest_fare_name = ''

def solution(filename):
    global lowest_fare, lowest_fare_name

    file = open(filename, 'r')
    file_contents = file.read()
    lines_in_file = file_contents.split('\n')
    result = ''

    for line in lines_in_file:
        line_components = line.split(',')
        
        survived = line_components[0] == '1'
        name = line_components[2]
        fare = float(line_components[7])
        
        if survived == True:
            if fare < lowest_fare:
                lowest_fare = fare
                lowest_fare_name = name

    file.close()


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
   
    
    # Deletes Result.txt if it already exists
    if (os.path.exists(""result.txt"")):
        os.remove(""result.txt"")
    
    output, error_message = autograder.run_script(""lsn15_titanicsurvivor.py"", [""titanic2.csv""])
    
    # Checks to see if the file was created by the program
    if (not os.path.exists(""result.txt"")):
        print(""result.txt is missing"")
    else:
        solution(""titanic2.csv"")
        
        file = open(""result.txt"", ""r"")
        file_contents = file.read()
        lines = file_contents.strip().split('\n')
        
        if lines[0] == lowest_fare_name:
            print(""Correct Passenger"")
            score += 50
        else:
            print(""Incorrect Passenger"", lowest_fare_name)
        
        if autograder.equals(lines[1], lowest_fare):
            print(""Correct Lowest Fare"")
            score += 50
        else:
            print(""Incorrect Lowest Fare."", lowest_fare)
    
    return score
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,
308,lsn15_titanicfares,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>This program makes use of the Titanic dataset. Here is a typical line from the file:</p>
<p><code>0,3,Mr. Owen Harris Braund,male,22,1,0,7.25</code></p>
<p><br />As you will undoubtedly recall from class, each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Survived<br />(0=False; 1=True)</th>
<th>Class</th>
<th>Name</th>
<th>Gender</th>
<th>Age</th>
<th>Siblings/Spouses Aboard<br />(0=False; 1=True)</th>
<th>Parents/Children Aboard<br />(0=False; 1=True)</th>
<th>Fare</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>0</th>
<th>3</th>
<th>Mr. Owen Harris Braund</th>
<th>male</th>
<th>22</th>
<th>1</th>
<th>0</th>
<th>7.25</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python algorithm that asks the user for the name of the file containing some or all of the Titanic dataset, as well as a passenger class (an integer between the values of 1 and 3). Your program should calculate the highest and lowest fare for that passenger class, and print out the result to a file called ""result.txt"".</p>
<p>For example, if the highest and lowest fare for 2nd class is $20 and $8, respectively, your output file should contain:</p>
<pre>20<br />8</pre>
<p><br /><strong>NOTES:</strong></p>
<ul>
<li>The values used in the above example are purely hypothetical. Your answers will be different.</li>
<li>Some passengers in the real dataset (like Jack in the movie Titanic--yes, I've seen it . . . don't judge me) have a fare of $0. To thoroughly test your code, we made a separate dataset (titanic2.csv) that removes these values.</li>
</ul>
</div>","from cs110 import autograder
import random, math, os.path

highest_fare = 0
lowest_fare = 9999999

def solution(filename, passenger_class):
    global highest_fare, lowest_fare

    file = open(filename, 'r')
    file_contents = file.read()
    lines_in_file = file_contents.split('\n')
    result = ''

    for line in lines_in_file:
        line_components = line.split(',')
        
        p_class = int(line_components[1])
        fare = float(line_components[7])
        
        if passenger_class == p_class:
            if fare > highest_fare:
                highest_fare = fare
            if fare < lowest_fare:
                lowest_fare = fare

    file.close()


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    random_passenger_class = random.randint(1, 3)
    
    # Deletes Result.txt if it already exists
    if (os.path.exists(""result.txt"")):
        os.remove(""result.txt"")
    
    output, error_message = autograder.run_script(""lsn15_titanicfares.py"", [""titanic2.csv"", random_passenger_class])
    
    # Checks to see if the file was created by the program
    if (not os.path.exists(""result.txt"")):
        print(""result.txt is missing"")
    else:
        solution(""titanic2.csv"", random_passenger_class)
        
        file = open(""result.txt"", ""r"")
        file_contents = file.read()
        lines = file_contents.strip().split('\n')
        if len(lines) < 2:
            print(""Not enough lines in result.txt"")
        
        if autograder.equals(lines[0], highest_fare):
            print(""Correct Highest Fare"")
            score += 50
        else:
            print(""Incorrect Highest Fare.  Expected:"", highest_fare)
        
        if autograder.equals(lines[1], lowest_fare):
            print(""Correct Lowest Fare"")
            score += 50
        else:
            print(""Incorrect Lowest Fare.  Expected:"", lowest_fare)
    
    return score
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)














# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,
309,lsn15_survivors_by_gender,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>This program makes use of the Titanic dataset. Here is a typical line from the file:</p>
<p><code>0,3,Mr. Owen Harris Braund,male,22,1,0,7.25</code></p>
<p><br />As you will undoubtedly recall from class, each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Survived<br />(0=False; 1=True)</th>
<th>Class</th>
<th>Name</th>
<th>Gender</th>
<th>Age</th>
<th>Siblings/Spouses Aboard<br />(0=False; 1=True)</th>
<th>Parents/Children Aboard<br />(0=False; 1=True)</th>
<th>Fare</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>0</th>
<th>3</th>
<th>Mr. Owen Harris Braund</th>
<th>male</th>
<th>22</th>
<th>1</th>
<th>0</th>
<th>7.25</th>
</tr>
</tbody>
</table>
<p><br /><br />Write a Python algorithm that asks the user for the name of the file containing the titanic dataset, and counts how many males/females survived. Your program should print out each answer to a file called ""result.txt"".</p>
<p>For example, if 400 men, and 700 women survived, your output file should contain:<br />400<br />700</p>
<p>&nbsp;</p>
<p><strong>NOTE: When you print to a file, make sure you put a new line at the end of each answer!</strong></p>
</div>","from cs110 import autograder
import random, math, os.path

num_males = 0
num_females = 0

def solution(filename):
    global num_males, num_females

    input_file = open(filename, ""r"")
    contents = input_file.read()
    lines = contents.split(""\n"")

    for line in lines:
        line_components = line.split(',')
        
        if line_components[0] == '1' and line_components[3] == 'male':
            num_males += 1
        if line_components[0] == '1' and line_components[3] == 'female':
            num_females += 1

    input_file.close()


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    # Deletes Result.txt if it already exists
    if (os.path.exists(""result.txt"")):
        os.remove(""result.txt"")
    
    output, error_message = autograder.run_script(""lsn15_survivors_by_gender.py"", [""titanic.csv""])
    
    # Checks to see if the file was created by the program
    if (not os.path.exists(""result.txt"")):
        print(""result.txt is missing"")
    else:
        solution(""titanic.csv"")
        
        file = open(""result.txt"", ""r"")
        file_contents = file.read()
        lines = file_contents.strip().split('\n')
        if len(lines) < 2:
            print(""Not enough lines in result.txt"")
        else:    
            if autograder.equals(lines[0], num_males):
                print(""Correct Number of Males:"")
                score += 50
            else:
                print(""Incorrect Number of Males"")
            
            if autograder.equals(lines[1], num_females):
                print(""Correct Number of Females"")
                score += 50
            else:
                print(""Incorrect Number of Females"")
    
    return score
    
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,0,
310,lsn15_skill2,3,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a python program that creates a file called ""output.txt"" and prints a message of your choosing.</p>
<p><strong>HINTS:<br /></strong>Look at the quick reference guide!</p>
</div>","from cs110 import autograder
import random, math, os

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0.0
    
    # Deletes Result.txt if it already exists
    if (os.path.exists(""output.txt"")):
        os.remove(""output.txt"")
    
    output, error_message = autograder.run_script(""lsn15_skill2.py"", [])
    
    if (os.path.exists(""output.txt"")):
        print(""File Found!"")
        score += 50
        file = open(""output.txt"", ""r"")
        file_contents = file.read()
        if (len(file_contents) > 0):
            print(""File has Something in it!"")
            score += 50
        else:
            print(""output.txt appears to be empty.  Did you forget to close the file or write to it?"")
    else:
        print(""File output.txt does not appear to exist"")
    
    return score
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
311,lsn15_skill1,3,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a file called sample.txt. Write a python program that opens this file and prints all of its contents as a single string.</p>
<p>&nbsp;</p>
<p><strong>HINTS:<br /></strong><span>Look at the quick reference guide!</span></p>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    expected_output = ""Lorem ipsum dolor sit amet, qui at luptatum efficiantur, ne autem offendit expetendis mel. Nec augue assentior ea, ne debet virtute mel. Integre vivendo id usu, ne primis repudiandae ullamcorper cum. Harum prompta appellantur vix ut. Ius voluptatibus definitiones te, eius scribentur referrentur mei at. Suas tota velit in usu, ex has complectitur signiferumque, sale lorem dolore ei ius. Perpetua scriptorem mei ex, ex est illum summo consul.""
    
    output, error_message = autograder.run_script(""lsn15_skill1.py"", [])
        
    lines = output.strip().split('\n')
    expected_lines = expected_output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_lines)
    
    if num_matches == len(lines):
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT"")
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
312,lsn15_runways,3,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>This program makes use of the Runways dataset. Here is a typical line from the file:</p>
<p>&nbsp;</p>
<p><code>17245.8*A ND17/35, RICKETYBACK FIELD, 2600, 100, TURF</code></p>
<p>&nbsp;</p>
<p><br />Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Location ID</th>
<th>Name</th>
<th>Runway Length (in feet)</th>
<th>Runway Width (in feet)</th>
<th>Runway Type</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>17245.8*A ND17/35</th>
<th>RICKETYBACK FIELD</th>
<th>2600</th>
<th>100</th>
<th>TURF</th>
</tr>
</tbody>
</table>
<p><br /><br />Write a Python program that asks the user for the name of the file containing the Runways dataset, as well as the length and width of the runway. Your program should print the Location ID of every runway whose length and width meets or exceeds the specified values.</p>
<p>For example, if the user types 4000 and 100 for length and width, respectively, your program should output:</p>
<pre>17265.<em>A ND03/21<br />17265.</em>A ND13/31<br />17302.<em>A ND13/31<br />17304.</em>A ND14/32<br />17367.<em>A ND13/31<br />17417.5</em>A ND11/29<br />17418.<em>A ND08/26<br />17418.</em>A ND13/31<br />17328.<em>A ND09/27<br />17328.</em>A ND18/36<br />17347.<em>A ND08/26<br />17349.1</em>A ND08/26<br />17349.1<em>A ND17R/3<br />17496.1</em>A ND11/29</pre>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def solution(filename, length, width):
    file = open(filename, 'r')
    file_contents = file.read()
    lines_in_file = file_contents.split('\n')
    result = ''

    for line in lines_in_file:
        columns = line.split(',')
        if length <= float(columns[2]) and width <= float(columns[3]):
            result += columns[0] + ""\n""

    file.close()
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_length = random.randint(3000, 4000)
    random_width = random.randint(100, 200)
    
    output, error_message = autograder.run_script(""lsn15_runways.py"", [""runways.csv"", random_length, random_width])
    expected_output = solution(""runways.csv"", random_length, random_width)
    
    lines = output.strip().split('\n')
    expected_lines = expected_output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_lines)
    
    if num_matches == len(lines):
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT"")
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)














# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,0,1,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,
313,lsn15_echo,3,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a program that asks the user to type the name of a file (e.g., ""file.txt""), and a letter. Your program should then open the file, and print out all of the lines where the first character starts with the letter</p>
<p>For example, if the user types the following filename:</p>
<pre><code>input1.txt
a
</code></pre>
<p>and the contents of input1.txt are:</p>
<pre><code>aspiration
classified
federation
</code></pre>
<p>the output should be:</p>
<pre><code>aspiration
</code></pre>
<p>&nbsp;</p>
<p>Notes:</p>
<ul>
<li>Each line ends with the '\n' character. Use&nbsp;<code>split()</code>&nbsp;to get each line.</li>
<li>Refer to the String Functions slide to see how you can get the first character from a string</li>
</ul>
</div>","from cs110 import autograder
import random, math

def solution(filename, letter):
    result = ''
    
    file = open(filename, ""r"")
    contents = file.read()
    lines = contents.split(""\n"")

    for line in lines:
        if line[0] == letter:
            result += line + ""\n""

    file.close()

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_letter = chr(random.randint(97, 122))
    
    output, error_message = autograder.run_script(""lsn15_echo.py"", [""file.txt"", random_letter])
    expected_output = solution(""file.txt"", random_letter)
    
    lines = output.strip().split('\n')
    expected_lines = expected_output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_lines)
    
    if num_matches == len(lines):
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT"")
        return 0.0
        

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)














# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,
314,lsn14_timestable,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write an algorithm that asks the user for a positive&nbsp;number and then outputs the multiplication table of that number 1-10.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Example 1</th>
<th>Example 2</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>3</th>
<th>9</th>
</tr>
<tr>
<th>Outputs</th>
<th>
<p>3<br />6<br />9<br />12<br />15<br />18<br />21<br />24<br />27<br />30</p>
</th>
<th>9<br />18<br />27<br />36<br />45<br />54<br />63<br />72<br />81<br />90</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def solution(multiple):
    result = ''
    i = 1
    
    while i <= 10:
        result += str(i * multiple) + ""\n""
        i += 1
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_multiple = random.randint(1, 20)

    output, error_message = autograder.run_script(""lsn14_timestable.py"", [random_multiple])
    expected_output = solution(random_multiple)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)











# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
315,lsn14_skill2,3,skill,0,"
<p><strong>PROBLEM STATEMENT:<br /></strong>You are trying to use a for loop to print all of the powers of 2 from 1024 (2<sup>10</sup>) to 1 (2<sup>0</sup>). Unfortunately, for some reason, the loop does not work. Review the code and make the necessary corrections.</p>","from cs110 import autograder
import random, math

def solution():
    result = ''
    i = 10
    
    while i >= 0:
        result += str(2 ** i) + ""\n""
        i -= 1
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error_message = autograder.run_script(""lsn14_skill2.py"", [])
    expected_output = solution()
    
    lines = output.strip().split('\n')

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
316,lsn14_skill1,3,skill,0,"
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a variable that asks the user for the number of times to loop. Construct a FOR loop that loops this many times&nbsp;printing out a message each time (the message can be whatever you want)</p>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_multiple = random.randint(1, 10)

    output, error_message = autograder.run_script(""lsn14_skill1.py"", [random_multiple])
    
    lines = output.strip().split('\n')

    if len(lines) == random_multiple:
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Make sure your loop is repeating num_times_to_loop times"")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)











# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
317,lsn14_printchars,3,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a Python algorithm that asks the users for two ASCII characters (e.g., 'a', 'z'), and prints all of the characters between them (inclusive).</p>
<ul>
<li>If the first character has a lower ASCII value than the second (e.g., 'a' - 'z'), print out the letters in ascending order.</li>
<li>Alternatively, if the second letter has a lower ASCII value, print out the letters in descending order.</li>
</ul>
<p>&nbsp;</p>
<p><strong>HINTS:</strong></p>
<ul>
<li>Use the&nbsp;<code>ord()</code>&nbsp;function to convert a character into an integer:<br /><code>ord('a')</code>&nbsp;returns 141<br /><br /></li>
<li>Use the&nbsp;<code>chr()</code>&nbsp;function to convert an integer back into a character:<br /><code>chr(142)</code>&nbsp;returns 'b'</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Example 1</th>
<th>Example 2</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>a<br />c</th>
<th>f<br />a</th>
</tr>
<tr>
<th>Outputs</th>
<th>
<p>a<br />b<br />c</p>
</th>
<th>f<br />e<br />d<br />c<br />b<br />a</th>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

def solution(start_char, end_char):
    result = ''
    
    start_char = ord(start_char)
    end_char = ord(end_char)
    
    if start_char < end_char:
        for i in range(start_char, end_char+1, 1):
            result += chr(i) + '\n'
    else:
        for i in range(start_char, end_char-1, -1):
            result += chr(i) + '\n'

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    print(""# ------------------------------------------"")
    print(""# Test 1:  First letter lower than second"")
    print(""# ------------------------------------------"")
    start_char = chr(random.randint(65, 85))
    end_char   = chr(random.randint(ord(start_char), 90))

    output, error_message = autograder.run_script(""lsn14_printchars.py"", [start_char, end_char])
    expected_output = solution(start_char, end_char)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT\n"")
        score += 50
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
        
    
    print(""# ------------------------------------------"")
    print(""# Test 2:  First letter higher than second"")
    print(""# ------------------------------------------"")
    start_char = chr(random.randint(85, 90))
    end_char   = chr(random.randint(65, 84))

    output, error_message = autograder.run_script(""lsn14_printchars.py"", [start_char, end_char])
    expected_output = solution(start_char, end_char)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT\n"")
        score += 50
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
318,lsn14_football,3,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>In, Python, write an algorithm that first asks the user how many football players they wish to enter statistics for and then gets that many yearly passing totals for each player. Output how many of those players that had more than 5000 passing yards in a year. Also your algorithm will output the average yardage per year as well as the minimum yardage entered, in that order. You can assume there is at least one player's yardage to input.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table width=""400"">
<thead>
<tr>
<td>&nbsp;</td>
<td>Example 1</td>
<td>Example 2</td>
<td>Example 3</td>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Inputs</strong></td>
<td>6<br />4924<br />4442<br />5117<br />2700<br />1990<br />4399</td>
<td>5<br />2305<br />4209<br />5100<br />5109<br />3800</td>
<td>4<br />4200<br />2709<br />3757<br />2976</td>
</tr>
<tr>
<td><strong>Outputs</strong></td>
<td>1<br />3928.6666666666665<br />1990</td>
<td>2<br />4104.6<br />2305</td>
<td>0<br />3410.5<br />2709</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    num_entries = random.randint(1, 6)
    num_above_5000 = random.randint(0, num_entries)
    list_of_values = [num_entries]
    
    for i in range(num_entries):
        if i < num_above_5000:
            list_of_values.append(random.randint(5001, 8000))
        elif i == num_above_5000:
            list_of_values.append(5000)
        else:
            list_of_values.append(random.randint(1, 5000))
    
    average = sum(list_of_values[1:])/num_entries
    min_value = min(list_of_values[1:])
    
    output, error_message = autograder.run_script(""lsn14_football.py"", list_of_values)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if len(lines) >= 1 and autograder.equals(lines[0], num_above_5000):
        print(""Number Above 5000 Looks Good"")
        score += 33
    else:
        print(""Number Above 5000 is Incorrect (or Missing)"")
    
    if len(lines) >= 2 and autograder.equals(lines[1], average):
        print(""Average Looks Good"")
        score += 33
    else:
        print(""Average is Incorrect (or Missing)"")
    
    if len(lines) >= 3 and autograder.equals(lines[2], min_value):
        print(""Min Value Looks Good"")
        score += 34
    else:
        print(""Min Value is Incorrect (or Missing)"")
        
    return score
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
319,lsn14_counting,3,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a Python algorithm that gets three numbers from the user, X, Y, and Z. Then have the algorithm output all the numbers from X to Y (inclusive), counting by Z. You may assume that Z is non-zero.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table width="""">
<thead>
<tr>
<td>&nbsp;</td>
<td>Example 1</td>
<td>Example 2</td>
<td>Example 3</td>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Inputs</strong></td>
<td>1<br />5<br />1</td>
<td>-5<br />-10<br />-3</td>
<td>15<br />15<br />100</td>
</tr>
<tr>
<td><strong>Outputs</strong></td>
<td>1<br />2<br />3<br />4<br />5</td>
<td>-5<br />-8</td>
<td>15</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

def solution(random_start, random_end, random_increment):
    result = ''

    for i in range(random_start, random_end+1, random_increment):
        result += str(i) + ""\n""

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_start = random.randint(0, 10)
    random_end = random.randint(50, 100)
    random_increment = random.randint(2, 9)

    output, error_message = autograder.run_script(""lsn14_counting.py"", [random_start, random_end, random_increment])
    expected_output = solution(random_start, random_end, random_increment)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
320,lsn14_coordinates,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a Python algorithm that prints all the coordinates in a coordinate plane, given two corners. Your program should get four inputs from the user:</p>
<ul>
<li>the starting x-coordinate,</li>
<li>the ending x-coordinate,</li>
<li>the starting y-coordinate, and</li>
<li>the ending y-coordinate.</li>
</ul>
<p>Your program will then print out all of the coordinates in x y order (separating coordinates with a space), listing all of the coordinates in the x-axis before incrementing y. You may assume that the ending coordinate is never less than the starting coordinate.<br /></p>
<p>In the above graphic, for example, your algorithm would print out:<br />1 2<br />2 2<br />3 2<br />4 2<br />5 2<br />6 2<br />1 3<br />2 3<br />3 3<br />4 3<br />5 3<br />6 3<br />. . . and so on</p>
<p>&nbsp;</p>
<p><strong>HINTS:</strong></p>
<ul>
<li>Write a loop that first prints all of the x coordinates from start to end</li>
<li>Use a nested loop to print all of the y coordinates from start to end</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table width=""300"">
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Inputs</strong></td>
<td>0<br />1<br />0<br />1</td>
<td>0<br />2<br />0<br />1</td>
</tr>
<tr>
<td><strong>Outputs</strong></td>
<td>0 0<br />1 0<br />0 1<br />1 1</td>
<td>0 0<br />1 0<br />2 0<br />0 1<br />1 1<br />2 1</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def solution(start_x, end_x, start_y, end_y):
    result = ''

    for y in range(start_y, end_y+1):
        for x in range(start_x, end_x+1):
            result += str(x) + "" "" + str(y) + ""\n""

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    start_x = random.randint(-2, -1)
    end_x = random.randint(1, 2)
    start_y = random.randint(-3, -1)
    end_y = random.randint(1, 3)

    output, error_message = autograder.run_script(""lsn14_coordinates.py"", [start_x, end_x, start_y, end_y])
    expected_output = solution(start_x, end_x, start_y, end_y)
    
    lines = output.strip().split('\n')
    num_matches = autograder.compare_strings(lines, expected_output.strip().split('\n'))

    return 100 * (num_matches / len(lines))

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
321,lsn14_class2017,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>In Python, write an algorithm that first asks the user how many cadets to input and then gets that many cadet class years from the user. Output how many of those cadets were in the class of 2017. You can assume there is at least one cadet to enter.</p>
<p><strong>EXAMPLES:</strong></p>
<table width=""300"">
<thead>
<tr>
<th></th>
<td>Example 1</td>
<td>Example 2</td>
<td>Example 3</td>
</tr>
</thead>
<tbody>
<tr>
<td>Inputs</td>
<td>4<br />2014<br />2016<br />2017<br />2017</td>
<td>5<br />2015<br />2017<br />2014<br />2014<br />2017</td>
<td>4<br />2014<br />2016<br />2014<br />2014</td>
</tr>
<tr>
<td>Outputs</td>
<td>2</td>
<td>3</td>
<td>0</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    num_entries = random.randint(1, 6)
    num_in_2017 = random.randint(0, num_entries)
    list_of_values = [num_entries]
    
    for i in range(num_entries):
        if i < num_in_2017:
            list_of_values.append(2017)
        else:
            list_of_values.append(random.randint(2018, 2024))
        
    output, error_message = autograder.run_script(""lsn14_class2017.py"", list_of_values)
    
    lines = output.strip().split('\n')

    if len(lines) >= 1 and autograder.equals(lines[0], num_in_2017):
        print(""CORRECT"")
        score += 100
    else:
        print(""Expected"", num_in_2017)
        
    return score
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
322,lsn13_waittimes,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write an algorithm that lets the user input the wait times for various rides at an amusement park (in minutes) until he/she types the value -999. Output the shortest waiting time, followed by the number of waiting times that are over 30 minutes.</p>
<p><strong>EXAMPLE:</strong></p>
<table width=""400"">
<thead>
<tr>
<th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>
<p>90<br />30<br />31<br />-999</p>
</th>
<th>
<p>35<br />15<br />90<br />120<br />15<br />-999</p>
</th>
<th>
<p>15<br />15<br />10<br />5<br />-999</p>
</th>
</tr>
<tr>
<th>Outputs</th>
<th>30<br />2</th>
<th>15<br />3</th>
<th>5<br />0</th>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0.0
    
    possible_tests = [[30, 45, 15, 5, 5, -999], [15, 30, 31, 29, 120, 90, -999]]
    possible_output = [[5, 1], [15, 3]]
    
    # Generates a Random Test
    random_index = random.randint(0, len(possible_tests)-1)
    random_test = possible_tests[random_index]
    expected_output = possible_output[random_index]
            
    output, error = autograder.run_script(""lsn13_waittimes.py"", random_test)
    
    lines = output.split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Min Wait Time is Correct"")
        score += 50
    else:
        print(""Min Wait Time is Incorrect.  Expected"", expected_output[0])
        
    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Number of Lines With Over 30 Minute Wait Times is Correct"")
        score += 50
    else:
        print(""Number of Lines With Over 30 Minute Wait Times is Incorrect.  Expected"", expected_output[1])
    
    return score


# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,
323,lsn13_squadrons,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write an algorithm that asks the user for the number of&nbsp;squadrons to input, and then gets each squadron's number. Output the number<br />of squadrons from 1st, 2nd, 3rd, and 4th groups (one per line)</p>
<p><strong>EXAMPLE:</strong></p>
<table width=""400"">
<thead>
<tr>
<th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>
<p>3<br />3<br />19<br />24</p>
</th>
<th>
<p>4<br />19<br />25<br />37<br />40</p>
</th>
<th>
<p>2<br />1<br />34</p>
</th>
</tr>
<tr>
<th>Outputs</th>
<th>1<br />1<br />1<br />0</th>
<th>0<br />1<br />1<br />2</th>
<th>1<br />0<br />0<br />1</th>
</tr>
</tbody>
</table>
</div>

","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0.0
    
    possible_tests = [[5, 10, 20, 30, 40, 19], [8, 3, 1, 23, 37, 40, 7, 6, 25]]
    possible_output = [[1, 2, 1, 1], [4, 0, 2, 2]]
    
    # Generates a Random Test
    random_index = random.randint(0, len(possible_tests)-1)
    random_test = possible_tests[random_index]
    expected_output = possible_output[random_index]
            
    output, error = autograder.run_script(""lsn13_squadrons.py"", random_test)
    
    lines = output.split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Num in Group One is Correct"")
        score += 25
    else:
        print(""Num in Group One is Incorrect.  Expected"", expected_output[0])
        
    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Num in Group Two is Correct"")
        score += 25
    else:
        print(""Num in Group Two is Incorrect.  Expected"", expected_output[1])
    
    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):
        print(""Num in Group Three is Correct"")
        score += 25
    else:
        print(""Num in Group Three is Incorrect.  Expected"", expected_output[2])
    
    if len(lines) > 3 and autograder.equals(lines[3], expected_output[3]):
        print(""Num in Group Four is Correct"")
        score += 25
    else:
        print(""Num in Group Four is Incorrect.  Expected"", expected_output[3])
    
    return score


# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
324,lsn13_skill2,3,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You have been provided with a WHILE loop that prints values from 0 to
    10.&nbsp; Modify the code so that it counts from 10 to 0.</p>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def solution(value_to_count_to, increment):
    result = ''
    i = 10
    
    while i >= value_to_count_to:
        result += str(i) + ""\n""
        i += increment
    
    return result

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_ending_number = 0
    random_increment = -1

    output, error_message = autograder.run_script(""lsn13_skill2.py"", [])
    expected_output = solution(random_ending_number, random_increment)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
325,lsn13_skill1,3,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You have been provided with a WHILE loop that prints the values from 1 to
    10. Modify this loop so that it counts by 2s instead of 1s.</p>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def solution(value_to_count_to, increment):
    result = ''
    i = 0
    
    while i <= value_to_count_to:
        result += str(i) + ""\n""
        i += increment
    
    return result

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_ending_number = 10
    random_increment = 2

    output, error_message = autograder.run_script(""lsn13_skill1.py"", [])
    expected_output = solution(random_ending_number, random_increment)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
326,lsn13_countby10s,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a program whose input is two integers. Output the first integer and subsequent increments of 10 as long as the value is less than or equal to the second integer.</p>
<p>Case #1: If the input is:</p>
<pre><code>-15
30
</code></pre>
<p>the output is:</p>
<pre><code>-15
-5
5
15
25
</code></pre>
<p>Case 2: If the second integer is less than the first as in:</p>
<pre><code>20
5
</code></pre>
<p>the output is:</p>
<pre><code>Second integer can't be less than the first.
</code></pre>
<p>For coding simplicity, output a space after every integer, including the last.</p>
</div>


","from cs110 import autograder
import random, math

def solution(starting_value, value_to_count_to):
    result = ''
    
    if value_to_count_to < starting_value:
        return ""Second integer can't be less than the first.""
    else:
        i = starting_value
        
        while i <= value_to_count_to:
            result += str(i) + ""\n""
            i += 10
        
        return result

def run_test(random_starting_number, random_ending_number):
    print(""#--------------------------------------------"")
    print(""# Testing"", random_starting_number, ""to"", random_ending_number)
    print(""#--------------------------------------------"")
    
    output, error_message = autograder.run_script(""lsn13_countby10s.py"", [random_starting_number, random_ending_number])
    expected_output = solution(random_starting_number, random_ending_number)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT\n"")
        return True
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
        print()
    
    return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    
    if run_test(10 * random.randint(1, 5), 60 + 10 * random.randint(1, 20)):
        score += 40
        
    if run_test(random.randint(0, 30), random.randint(31, 200)):
        score += 40
    
    if run_test(random.randint(50, 100), random.randint(0, 10)):
        score += 20
    
    
    return score

        
# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
327,lsn13_count,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a Python program that gets 2 inputs from the user</p>
<ul>
<li>a number,&nbsp;<strong>x</strong></li>
<li>an increment amount,&nbsp;<strong>y</strong></li>
</ul>
<p>Your program will then print out all the numbers from 0 to the user-defined value (x), counting by the increment amount (y).</p>
<p><strong>EXAMPLES:</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>Example 1</th>
<th>Example 2</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>10<br />2</th>
<th>14<br />3</th>
</tr>
<tr>
<th>Outputs</th>
<th>0<br />2<br />4<br />6<br />8<br />10</th>
<th>0<br />3<br />6<br />9<br />12</th>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

def solution(value_to_count_to, increment):
    result = ''
    i = 0
    
    while i <= value_to_count_to:
        result += str(i) + ""\n""
        i += increment
    
    return result

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_ending_number = 10 + 2 * random.randint(1, 10)
    random_increment = 2

    output, error_message = autograder.run_script(""lsn13_count.py"", [random_ending_number, random_increment])
    expected_output = solution(random_ending_number, random_increment)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':   
    result = test_passed()
    print(""Unit Test Returned:"", result)











# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
328,lsn13_cargocapacity,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write an algorithm that lets the user input the cargo capacity (in lbs) of various transport aircraft until the user enters -1. Your program should output the min and max cargo capacity, as well as the number of aircraft that can carry at least 10000 lbs.</p>
<p><strong>EXAMPLE:</strong></p>
<table width=""400"">
<thead>
<tr>
<th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>
<p>4500<br />11000<br />9000<br />-1</p>
</th>
<th>
<p>9999<br />15000<br />3500<br />17500<br />-1</p>
</th>
<th>10000<br />-1</th>
</tr>
<tr>
<th>Outputs</th>
<th>4500<br />11000<br />1</th>
<th>3500<br />17500<br />2</th>
<th>10000<br />10000<br />1</th>
</tr>
</tbody>
</table>
</div>

","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0.0
    
    possible_tests = [[8000, 12000, 25000, 10000, 7500, -1], [5000, 9000, 22000, 10000, 8700, -1], [9999, 5000, 3000, -1]]
    possible_output = [[7500, 25000, 3], [5000, 22000, 2], [3000, 9999, 0]]
    
    # Generates a Random Test
    random_index = random.randint(0, len(possible_tests)-1)
    random_test = possible_tests[random_index]
    expected_output = possible_output[random_index]
            
    output, error = autograder.run_script(""lsn13_cargocapacity.py"", random_test)
    
    lines = output.split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Min Value is Correct"")
        score += 30
    else:
        print(""Min Value is Incorrect.  Expected"", expected_output[0])
    
    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Max Value is Correct"")
        score += 30
    else:
        print(""Max Value is Incorrect.  Expected"", expected_output[1])
        
    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):
        print(""Number of Aircraft with At Least 10000 lbs is Correct"")
        score += 40
    else:
        print(""Number of Aircraft with At Least 10000 lbs is Incorrect.  Expected"", expected_output[2])
    
    return score


# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,
329,lsn13_averagerun,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>In, Python, write an algorithm that first asks the user how many PFT run times to input and then gets that many values from the user. Output the average of all the run times. You can assume there is at least one run time to input.</p>
<p><strong>EXAMPLE:</strong></p>
<table width=""400"">
<thead>
<tr>
<th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>6<br />98<br />75<br />88<br />82<br />94<br />100</th>
<th>5<br />99<br />83<br />79<br />86<br />87</th>
<th>4<br />88<br />82<br />80<br />90</th>
</tr>
<tr>
<th>Outputs</th>
<th>89.5</th>
<th>86.8</th>
<th>85</th>
</tr>
</tbody>
</table>
</div>

","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 5
    num_tests_passed = 0

    for i in range(NUM_TESTS):
        print(""Running Test "" + str(i) + "":"")
        
        num_inputs = random.randint(2, 11)
        inputs = [num_inputs]
        sum = 0
        
        for j in range(num_inputs):
            value = random.randint(70, 130)
            sum += value
            inputs.append(value)
               
        avg = sum / (len(inputs) - 1)   
               
        # Runs the Script
        output, error_message = autograder.run_script(""lsn13_averagerun.py"", inputs)
        
        # Extracts the Output
        lines = output.split(""\n"")
        
        if (len(lines) > 0):            
            if (autograder.equals(lines[0], avg)):
                print(""CORRECT\n"")
                num_tests_passed += 1
            else:
                print(""INCORRECT.  Expected: "" + str(avg) + ""\n"")

    # Result
    return (100 / NUM_TESTS) * num_tests_passed
            

# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
330,lsn12_skill2,3,skill,0,"<div>PROBLEM STATEMENT:<br></strong>You are being provided with a list containing 5 random numbers. Create a
        variable called<span>&nbsp;</span><code>my_value</code>, and assign it the value of the 3rd item in&nbsp;the
        list.</p>
    <p>&nbsp;</p>
    <p><strong>NOTES:</strong></p>
    <ul>
        <li>You do not need to print <code>my_value</code> OR the list</li>
    </ul>
</div>","from cs110 import autograder
import random, math
from lsn12_skill2 import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    if 'my_value' in globals():
        print(""Looking for my_value . . . FOUND!"")
        if my_value == my_list[2]:
            print(""Looking inside my_value . . . VALUE MATCHES THE 3rd VALUE IN THE LIST"")
            return 100
        elif my_value == my_list[3]:
            print(""Looking inside my_value . . . VALUE MATCHES THE 4th VALUE INSTEAD OF THE THIRD!"")
            print(""** HINT:  The index starts at 0 **"")
            return 50
        else:
            print(""Looking inside my_value . . . VALUE DOES NOT MATCH.  EXPECTED"", my_list[2])
            return 50
    else:
        print(""Looking for my_value . . . NOT FOUND!"")
        return 0
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
331,lsn12_skill1,3,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>Create a list called <code>my_list</code>. Put 3 items inside the list (they can be anything you want)</p>
    <p>&nbsp;</p>
    <p><strong>HINTS:<br></strong>Look at the quick reference guide!</p>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random
from lsn12_skill1 import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    if 'my_list' in globals():
        print(""Looking for my_list . . . FOUND!"")
        if len(my_list) == 3:
            print(""Looking inside my_list . . . FOUND 3 ITEMS!"")
            return 100
        else:
            print(""Looking inside my_list . . . FOUND"", len(my_list), ""INSTEAD OF 3 ITEMS"")
            return 50
    else:
        print(""Looking for my_list . . . NOT FOUND!"")
        return0
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
332,lsn11_skill2,3,skill,0,"<p><strong>PROBLEM STATEMENT:<br /></strong>Write a function called&nbsp;<code>fahrenheit_to_kelvin()</code>. Your function should take a temperature (in Fahrenheit) as a parameter, and RETURN (NOT PRINT) the&nbsp;equivalent temperature in Kelvin.</p>
<p><strong>NOTE:<br /></strong>The formula for converting between Fahrenheit and Kelvin is</p>
<p><strong>K = ((F - 32) / 1.8) + 273.15</strong></p>","from cs110 import autograder
import random, math
from lsn11_skill2 import *

def solution(temp_in_f):
    temp_in_k = ((temp_in_f - 32) / 1.8) + 273.15
    return temp_in_k

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    print(""Feedback:"")
    print(""Looking for a function called fahrenheit_to_kelvin . . ."", end="""")
    
    if ""fahrenheit_to_kelvin"" in globals():
        print(""FOUND!"")
        score += 50
    else:
        print(""NOT FOUND"")
    
    random_temp = round(random.uniform(0, 100), 1)
    
    print(""Testing function when temperature ="", random_temp, ""F . . . "", end="""")
    if ""fahrenheit_to_kelvin"" in globals() and fahrenheit_to_kelvin(random_temp) == solution(random_temp):
        print(""CORRECT!"")
        score += 50
    elif ""fahrenheit_to_kelvin"" in globals() and fahrenheit_to_kelvin(random_temp) != solution(random_temp):
        print(""INCORRECT.  Expected"", solution(random_temp), ""instead of"", fahrenheit_to_kelvin(random_temp))
    else:
        print(""Could not evaluate the function's returned value because the function does not exist"")
        
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)











# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
333,lsn11_skill1,3,skill,0,"<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a function called get_fuel_consumption() that takes a distance in kilometers as a parameter, and calculates the fuel consumed (in gallons) by a 747 aircraft to travel this distance.</p>
<p>Call this function to determine how much fuel is consumed by a 747 when traveling 1500 kilometers. Store the returned result in a variable&nbsp;called fuel_consumed</p>
<p>Remember, ""Calling a function"" simply means typing in the name of the function (and providing it with any parameters that it needs--in this case, there are no parameters since there is nothing in the parenthesis).</p>","from cs110 import autograder
import random, math
from lsn11_skill1 import *

def get_fuel_consumption(distance_in_kilometers):
    distance_in_miles = distance_in_kilometers * 0.621
    return 5 * distance_in_miles

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    file = open(""lsn11_skill1.py"", ""r"")
    file_contents = file.read()
    num_calls_function1 = file_contents.count(""get_fuel_consumption(1500"")
    num_calls_function2 = file_contents.count(""get_fuel_consumption( 1500"")
    num_calls_function3 = file_contents.count(""get_fuel_consumption (1500"")
    num_calls_function4 = file_contents.count(""get_fuel_consumption ( 1500"")
    num_calls = num_calls_function1 + num_calls_function2 + num_calls_function3 + num_calls_function4

    output, error_message = autograder.run_script(""lsn11_skill1.py"", [])
    
    if num_calls >= 1:
        print(""get_fuel_consumption called successfully"")
        score += 33
    else:
        print(""get_fuel_consumption was not called successfully"")
    
    if ""fuel_consumed"" in globals():
        print(""fuel_consumed variable successfully created"")
        score += 33
    else:
        print(""Did not find a variable called fuel_consumed"")
        
    if ""fuel_consumed"" in globals() and fuel_consumed == get_fuel_consumption(1500):
        print(""fuel_consumed contains the correct value"")
        score += 34
    elif ""fuel_consumed"" in globals() and fuel_consumed != get_fuel_consumption(1500):
        print(""fuel_consumed contains"", fuel_consumed, ""instead of"", get_fuel_consumption(1500))
    else:
        print(""Cannot check the value of fuel_consumed because it does not exist"")
        
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)











# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
334,lsn11_in_circle,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a function that determines if a point is within a circle. You will name your function <code>in_circle()</code>. It has five parameters:</p>
<ol>
<li>The coordinates of the point that is to be tested (x, y)</li>
<li>The center of a circle (cir_x, cir_y)</li>
<li>The radius of the circle (radius)</li>
</ol>
<p>&nbsp;The <code>in_circle()</code> function will return <strong>True</strong> if the point is on or inside the circle, and <strong>False</strong> otherwise.</p>
<p><strong>IMPORTANT:<br /></strong>You are encouraged to write code to test your function. However, when you test against the server, only include the code for the function itself (you can comment out your test code).</p>
</div>

","import lsn11_in_circle
from cs110 import autograder
import random, math

NUM_SUBTESTS = 5
   
def soln(x, y, cir_x, cir_y, radius):
    distance = math.sqrt((cir_x - x)**2 + (cir_y - y)**2)
    return distance <= radius

def test_passed():
    
    passed = 0
    for i in range(NUM_SUBTESTS):
        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')
        if i == 0:
            x = 6.04
            y = 2.43
            cir_x = 43.4
            cir_y = 52.2
            radius = 74.1
        else:
            x = random.random() * 10.0
            y = random.random() * 10.0
            cir_x = random.random() * 100.0
            cir_y = random.random() * 100.0
            radius = random.random() * 100.0
        #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))
        if lsn11_in_circle.in_circle(x, y, cir_x, cir_y, radius) == soln(x, y, cir_x, cir_y, radius):
            print(""CORRECT!"")
            passed += 1
        else:
            print('INCORRECT:  in_circle(%f, %f, %f, %f, %f) incorrectly returned %s' % (x, y, cir_x, cir_y, radius, lsn11_in_circle.in_circle(x, y, cir_x, cir_y, radius)))
    
    return (100 / NUM_SUBTESTS) * passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
335,lsn11_distance,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a function that computes the distance between two points. You will name your function&nbsp;<code>dist_points</code>. It has four parameters, the cordinates of the two points as&nbsp;<code>x1, y1, x2, y2</code>. The&nbsp;<code>dist_points()</code>&nbsp;function will return the distance between the two points as a floating point number.</p>
<p><strong>IMPORTANT:<br /></strong>You are encouraged to write code to test your function. However, when you test against the server, only include the code for the function itself (you can comment out your test code).</p>
</div>


","from lsn11_distance import dist_points
from cs110 import autograder
import random, math

NUM_SUBTESTS = 5

def soln(x1, y1, x2, y2):
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)

def test_passed():
    
    passed = 0
    
    print(""Feedback:"")
    
    for i in range(NUM_SUBTESTS):
        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')
        x1 = round(random.uniform(-10, 10), 1)
        y1 = round(random.uniform(-10, 10), 1)
        x2 = round(random.uniform(-10, 10), 1)
        y2 = round(random.uniform(-10, 10), 1)
        if autograder.equals(dist_points(x1, y1, x2, y2), soln(x1, y1, x2, y2)):
            print(""PASSED!"")
            passed += 1
        else:
            print('FAILED: dist_point(%1.1f, %1.1f, %1.1f, %1.1f) incorrectly returned' % (x1, y1, x2, y2), dist_points(x1, y1, x2, y2))
    
    return round(100 / NUM_SUBTESTS, 1) * passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
336,lsn11_circle,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a function that computes the area of a circle. You will name your function&nbsp;<code>area_circle</code>. It has one parameter, the radius of the circle,&nbsp;<code>radius</code>. The&nbsp;<code>area_circle()</code>&nbsp;function will return the area of the circle.</p>
<p><strong>IMPORTANT: <br /></strong>You are encouraged to write code to test your function. However, when you test against the server, only include the code for the function itself (you can comment out your test code).</p>
</div>","import lsn11_circle
from cs110 import autograder
import random, math

NUM_SUBTESTS = 5

# Helper method to see if a numeric value is within a specified delta
def soln(radius):
    return math.pi * radius * radius

def test_passed():
    
    passed = 0
    
    print(""Feedback:"")
    
    for i in range(NUM_SUBTESTS):
        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')
        radius = random.random() * 100.0
        if autograder.equals(lsn11_circle.area_circle(radius), soln(radius)):
            print(""CORRECT!"")
            passed += 1
        else:
            print('area_circle(%d) incorrectly returned' % (radius), lsn11_circle.area_circle(radius))
        
    return round(100 / NUM_SUBTESTS, 1) * passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
337,lsn11_asteroids,3,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>""Asteroids"" was an arcade game created in 1979 by Atari, Inc. In the game, the player is given control of a spaceship that has the ability to shoot bullets. The player is then placed in a field of floating rocks, and is tasked with destroying them without running into them.</p>
<p>In this lab, you will write a ""collision detection"" function that will be used by the game to determine if the player's ship has hit a rock. To make this simple, assume that an imaginary circle extends from the center of the asteroid and the player's ship (see below image). If the two circles ever overlap one another, then a collision has occurred. (NOTE: There are more accurate ways to detect a collision.&nbsp;<a href=""https://bell0bytes.eu/basic-collision-detection/"" target=""_blank"" rel=""noreferrer noopener"">Click here if you want to learn more&nbsp;(Links to an external site.)</a>).</p>
<p><img src=""https://bell0bytes.eu/content/images/2019/03/spaceShipAsteroid.png"" alt="""" width="""" height=""462"" /></p>
<p>Your function, which you will name&nbsp;<code>detect_collision()</code>&nbsp;should have six parameters: the (x, y) coordinates of the center of player's ship, the ship's radius, the (x, y) coordinates of the center of an asteroid, and the asteroid's radius. Your function will return&nbsp;<code>True</code>&nbsp;if the player's ship has hit the asteroid, and&nbsp;<code>False</code>&nbsp;otherwise.</p>
<p><strong>HINT: <em><br /></em></strong><em>You may want to copy and paste the</em>&nbsp;<code>dist_points</code>&nbsp;<em>function you created earlier. It's almost as if we are trying to demonstrate the importance of reusable functions . . .</em></p>
<p><strong>IMPORTANT:<br /></strong>You are encouraged to write code to test your function. However, when you test against the server, only include the code for the function itself (you can comment out your test code).</p>
</div>
","from cs110 import autograder
import random, math
import lsn11_asteroids 

def soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):
    distance = math.sqrt((ship_x - asteroid_x)**2 + (ship_y - asteroid_y)**2)
    return distance < asteroid_r + ship_r

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 4
    num_tests_passed = 0
    
    print(""Feedback:"")
    score = 0
        
    if ""dist_points"" in dir(lsn11_asteroids):
        score += 20
        print(""dist_points function found"")
    else:
        print(""dist_points function not being utilized.  Don't reinvent the wheel!"")
        #score += 20
        
    for i in range(NUM_TESTS):
        print('Running test %d of %d: ' % (i+1 , NUM_TESTS), end='')
        
        if i == 0:
            ship_x = 2.3
            ship_y = 0.2
            ship_r = 3
            asteroid_x = -4
            asteroid_y = 3.4
            asteroid_r = 6
        else:
            ship_x = round(random.uniform(-50, 50), 1)
            ship_y = round(random.uniform(-50, 50), 1)
            ship_r = 3
            asteroid_x = round(random.uniform(-50, 50), 1)
            asteroid_y = round(random.uniform(-50, 50), 1)
            asteroid_r = 6
        
        #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))
        if lsn11_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r) == soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):
            print(""CORRECT"")
            score += 20
        else:
            print('detect_collision(%f, %f, %f, %f, %f, %f) incorrectly returned %s' % (ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r, lsn11_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r)))
    
    return score
            
            
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
338,lsn10_skill2,3,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a function called <code>draw_multiple_trees()</code> that outputs a tree using ASCII art. Unlike the previous problem, this function accepts a parameter that tells it how many trees to draw.</p>
<p>Write a program that:</p>
<ol>
<li>Gets an integer from the user and stores it in a variable. You can name this variable whatever you want.</li>
<li>Calls the function, and passes the variable to it. </li>
</ol>
<p>Remember that ""passing a value"" to a function simply means putting the number inside the parenthesis when you call it.&nbsp;</p>
</div>","from cs110 import autograder
import random, math

# The Actual Solution
def draw_tree(num_times):
    result = """"
    for i in range(num_times):
        result += ""  *  \n""
        result += "" *** \n""
        result += ""*****\n""
        result += ""  |  \n""
    return result;


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    num_passed = 0
    num_tests = 3
    
    for i in range(num_tests):
        print(""-------------------------------------------"")
        print(""Test"", i+1)
        print(""-------------------------------------------"")
        num_trees = random.randint(0, 5)
        output, error_message = autograder.run_script(""lsn10_skill2.py"", [num_trees])
        expected_output = draw_tree(num_trees)
        
        if output == expected_output:
            print(""Good Job!\n"")
            num_passed += 1
        else:
            print(""Incorrect Output. Expected the following:"")
            print(expected_output, ""\n"")
    
    return round((100 / num_tests) * num_passed, 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
339,lsn10_skill1,3,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a function called <code>draw_tree()</code> that prints a tree using ASCII art:</p>
<pre> *<br /> ***<br />*****<br /> |</pre>
<p>Call this function.</p>
</div>","from cs110 import autograder
import random, math

# The Actual Solution
def draw_tree():
    result =  ""  *  \n""
    result += "" *** \n""
    result += ""*****\n""
    result += ""  |  \n""
    return result;


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error_message = autograder.run_script(""lsn10_skill1.py"", [])
    
    expected_output = draw_tree() + draw_tree () + draw_tree()
    
    if output == expected_output:
        print(""Good Job!"")
        return 100
    else:
        print(""Incorrect Output. Expected the following:"")
        print(expected_output)
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)







",100,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
340,lsn1_helloworld,3,lab,0,"<ol>

<li>Download the template file below and save it somewhere you will remember.&nbsp; Do not rename the file!<br><br>

</li>

<li>Open the file in Thonny.&nbsp; You should be able to double click on it.<br><br>

</li>

<li>Press the play button.&nbsp; It looks like a Green button<br><br><br>

</li>

<li>You will see the following prompt in the Console.&nbsp; Type 'y' (without the quotes) and press ENTER.<br><br><br>

</li>

<li>The test program will automatically run and print a result.&nbsp; If you see the following, you are good to go.&nbsp; Otherwise, contact your instructor:<br>

</li>

</ol>","import sys, subprocess, random
from cs110 import autograder

# ---------------------------------------------------------------------
# Hello World Unit Test
# ---------------------------------------------------------------------

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn1_helloworld.py"", [])
    
    # Checks to See if the Program Passed the Test
    if output.strip() == ""Hello World"":
        print(""SUCCESS!"")
        return 100.0
    else:
        print(""Try Again.  Just have it print the words 'Hello World'!"")
        return 0.0
    
    
# Testbench (to be run in an IDE)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
341,a3_7_minpower,3,lab,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset called&nbsp;<code>powerplants.csv</code>&nbsp;that contains information about various power production facilities across the nation. Here is a typical line from the dataset (each line ends with the newline &ldquo;\n&rdquo; character):</p>
<p>&nbsp;</p>
<p><code>-121.8601395, 38.01598436, 19, GWFPW2_1_UNIT 1, SteamTurbine</code></p>
<p>&nbsp;</p>
<p>Each position in the line (separated by a comma) represents a different &ldquo;data element,&rdquo; or &ldquo;column.&rdquo; The following table shows how the above line can be interpreted:<br /><br /></p>
<table border=""2"">
<thead>
<tr>
<th>&nbsp;</th>
<th>Longitude</th>
<th>Latitude</th>
<th>Power Output (in MW)</th>
<th>Name</th>
<th>Power Generation Method</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>-<strong>121.8601395</strong></th>
<th>38.01598436</th>
<th>19</th>
<th>GWFPW2<em>1</em>UNIT 1</th>
<th>SteamTurbine</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python program that asks the user for:</p>
<ul>
<li>A power generation method (e.g., &ldquo;SteamTurbine&rdquo;)</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then read the file and print on separate lines:</p>
<ul>
<li>The minimum power output for power plants of this particular type, and</li>
<li>The names of all power plants that are of this <strong>particular type</strong>, and within 1 MW (inclusive) of the minimum power output</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td>Input</td>
<td>
<p>Other</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>0.53<br />ELNIDS_2_DODPEV</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def solution(power_generation_type):
    file = open(""powerplants.csv"", 'r')
    contents = file.read()
    lines_in_file = contents.split('\n')
    result = []

    table_of_power_plants = []

    for current_line in lines_in_file:
        columns = current_line.split(',')
        power_mw = float(columns[2])
        power_name = columns[3]
        power_type = columns[4]
        
        if power_type == power_generation_type:
            table_of_power_plants.append([power_mw, power_name])

    min_mw = min(table_of_power_plants)

    result.append(str(min_mw[0]))

    for row in table_of_power_plants:
        if row[0] <= min_mw[0] + 1:
            result.append(row[1])
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 3
    num_min_correct = 0
    num_min_names = 0
    
    types_to_test = ['Other', 'SteamTurbine', 'GasTurbine', 'CombinedCycle', 'HydraulicTurbine']
    
    for i in range(NUM_TESTS):
        power_type = types_to_test[random.randint(0, len(types_to_test)-1)]
        types_to_test.remove(power_type)
        
        print(""-------------------------"")
        print(""Test"", i+1, ""of"", NUM_TESTS, "":"", power_type)
        print(""-------------------------"")
        
        output, error = autograder.run_script(""a3_7_minpower.py"", [power_type])
        expected_output = solution(power_type)
        student_output = output.strip().split('\n')

        # Determines if the stat is correct
        print(""CHECKING MIN VALUE:"")
        if autograder.equals(student_output[0], expected_output[0]):
            print(""CORRECT\n"")
            num_min_correct += 1
        else:
            print(""INCORRECT\n"")

        # Determines if the names are correct
        print(""CHECKING PLANT NAMES:"")
        num_matches = 0
        
        for item in expected_output[1:]:
            print(""Looking for"", item, "". . . "", end="""")
            if item in student_output[1:]:
                print(""FOUND"")
                num_matches += 1
            else:
                print(""NOT FOUND"")            
        
        if num_matches == len(expected_output[1:]) and len(student_output[1:]) == len(expected_output[1:]):
            print(""CORRECT\n"")
            num_min_names += 1
        elif num_matches == len(expected_output[1:]) and len(student_output[1:]) >= len(expected_output[1:]):
            print(""INCORRECT.  Your program is printing more power plant names than are expected.\n"") 
        else:
            print(""INCORRECT.  Missing"", str(len(expected_output[1:]) - num_matches), ""plant names"")
            
    return round(60 * (num_min_correct / NUM_TESTS) + 40 * (num_min_names / NUM_TESTS), 1)
    

    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
342,a3_7_min_lego,3,lab,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset called <code>legos.csv</code>&nbsp;that contains information about various Lego sets. Here is a typical line from the dataset (each line ends with the newline &ldquo;\n&rdquo; character):</p>
<p>&nbsp;</p>
<p><code>10197-1,Fire Brigade,2009,City,2236</code></p>
<p>&nbsp;</p>
<p>Each position in the line (separated by a comma) represents a different &ldquo;data element,&rdquo; or &ldquo;column.&rdquo; The following table shows how the above line can be interpreted:<br /><br /></p>
<table border=""2"">
<thead>
<tr>
<th>&nbsp;</th>
<th>Set Number</th>
<th>Name</th>
<th>Year</th>
<th>Theme</th>
<th>Number of Parts</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>10197-1</th>
<th>Fire Brigade</th>
<th>2009</th>
<th>City</th>
<th>2236</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python program that asks the user for:</p>
<ul>
<li>A Theme (e.g., ""City"")</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then read the file and print on separate lines:</p>
<ul>
<li>The minimum number of parts in a set of the given theme, and</li>
<li>The names of all Lego sets that are of this <strong>particular theme</strong>, and within 14 (inclusive) of the minimum part count</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td>Input</td>
<td>
<p>Duplo</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>
<p>1<br />Zoo friends</p>
<p>Big Front Loader</p>
<p>Baby Calf</p>
<p>Farm Animals</p>
<p>...</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def solution(set_theme):
    file = open(""legos.csv"", 'r')
    contents = file.read()
    lines_in_file = contents.split('\n')
    result = []

    table_of_lego_sets = []

    for current_line in lines_in_file:
        columns = current_line.split(',')
        set_part_count = float(columns[4])
        set_name = columns[1]
        curr_set_theme = columns[3]
        
        if curr_set_theme == set_theme:
            table_of_lego_sets.append([set_part_count, set_name])

    min_set_count = min(table_of_lego_sets)

    result.append(str(min_set_count[0]))

    for row in table_of_lego_sets:
        if row[0] <= min_set_count[0] + 14:
            result.append(row[1])
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 3
    num_max_correct = 0
    num_max_names = 0
    
    types_to_test = [""Model"", ""Technic"", ""City"", ""Town"", ""Vehicle"", ""Space"", ""Star Wars"", ""Seasonal"", ""Educational"", ""Bionicle""]
    
    for i in range(NUM_TESTS):
        lego_theme = types_to_test[random.randint(0, len(types_to_test)-1)]
        types_to_test.remove(lego_theme)
        
        print(""-------------------------"")
        print(""Test"", i+1, ""of"", NUM_TESTS, "":"", lego_theme)
        print(""-------------------------"")
        
        output, error = autograder.run_script(""a3_7_min_lego.py"", [lego_theme])
        expected_output = solution(lego_theme)
        student_output = output.strip().split('\n')
                
        # Determines if the stat is correct
        print(""CHECKING MIN VALUE:"")
        if autograder.equals(student_output[0], expected_output[0]):
            print(""CORRECT\n"")
            num_max_correct += 1
        else:
            print(""INCORRECT\n"")
        
        # Determines if the names are correct
        print(""CHECKING LEGO SET NAMES:"")
        num_matches = 0
        
        for item in expected_output[1:]:
            print(""Looking for"", item, "". . . "", end="""")
            if item in student_output[1:]:
                print(""FOUND"")
                num_matches += 1
            else:
                print(""NOT FOUND"")            
        
        if num_matches == len(expected_output[1:]) and len(student_output[1:]) == len(expected_output[1:]):
            print(""CORRECT\n"")
            num_max_names += 1
        elif num_matches == len(expected_output[1:]) and len(student_output[1:]) >= len(expected_output[1:]):
            print(""INCORRECT.  Your program is printing more Lego set names than are expected.\n"") 
        else:
            print(""INCORRECT.  Missing"", str(len(expected_output[1:]) - num_matches), ""Lego set names"")
            
            
    return round(60 * (num_max_correct / NUM_TESTS) + 40 * (num_max_names / NUM_TESTS), 1)
    

    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
343,a3_7_maxpower,3,lab,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset called&nbsp;<code>powerplants.csv</code>&nbsp;that contains information about various power production facilities across the nation. Here is a typical line from the dataset (each line ends with the newline &ldquo;\n&rdquo; character):</p>
<p>&nbsp;</p>
<p><code>-121.8601395, 38.01598436, 19, GWFPW2_1_UNIT 1, SteamTurbine</code></p>
<p>&nbsp;</p>
<p>Each position in the line (separated by a comma) represents a different &ldquo;data element,&rdquo; or &ldquo;column.&rdquo; The following table shows how the above line can be interpreted:<br /><br /></p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Longitude</th>
<th>Latitude</th>
<th>Power Output (in MW)</th>
<th>Name</th>
<th>Power Generation Method</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>-<strong>121.8601395</strong></th>
<th>38.01598436</th>
<th>19</th>
<th>GWFPW2<em>1</em>UNIT 1</th>
<th>SteamTurbine</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python program that asks the user for:</p>
<ul>
<li>A power generation method (e.g., &ldquo;SteamTurbine&rdquo;)</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then read the file and print on separate lines:</p>
<ul>
<li>The maximum power output for power plants of this particular type, and</li>
<li>The names of all power plants that are of this <strong>particular type</strong>, and within 15 MW (inclusive) of the maximum power output</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td>Input</td>
<td>
<p>SteamTurbine</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>1164.0<br />DIABLO_7_UNIT 1<br />DIABLO_7_UNIT 2</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def solution(power_generation_type):
    file = open(""powerplants.csv"", 'r')
    contents = file.read()
    lines_in_file = contents.split('\n')
    result = []

    table_of_power_plants = []

    for current_line in lines_in_file:
        columns = current_line.split(',')
        power_mw = float(columns[2])
        power_name = columns[3]
        power_type = columns[4]
        
        if power_type == power_generation_type:
            table_of_power_plants.append([power_mw, power_name])

    max_mw = max(table_of_power_plants)

    result.append(str(max_mw[0]))

    for row in table_of_power_plants:
        if row[0] >= max_mw[0] - 15:
            result.append(row[1])
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 3
    num_max_correct = 0
    num_max_names = 0
    
    types_to_test = ['Other', 'SteamTurbine', 'GasTurbine', 'CombinedCycle', 'HydraulicTurbine']
    
    for i in range(NUM_TESTS):
        power_type = types_to_test[random.randint(0, len(types_to_test)-1)]
        types_to_test.remove(power_type)
        
        print(""-------------------------"")
        print(""Test"", i+1, ""of"", NUM_TESTS, "":"", power_type)
        print(""-------------------------"")
        
        output, error = autograder.run_script(""a3_7_maxpower.py"", [power_type])
        expected_output = solution(power_type)
        student_output = output.strip().split('\n')
                
        # Determines if the stat is correct
        print(""CHECKING MAX VALUE:"")
        if autograder.equals(student_output[0], expected_output[0]):
            print(""CORRECT\n"")
            num_max_correct += 1
        else:
            print(""INCORRECT\n"")
        
        # Determines if the names are correct
        print(""CHECKING PLANT NAMES:"")
        num_matches = 0
        
        for item in expected_output[1:]:
            print(""Looking for"", item, "". . . "", end="""")
            if item in student_output[1:]:
                print(""FOUND"")
                num_matches += 1
            else:
                print(""NOT FOUND"")            
        
        if num_matches == len(expected_output[1:]) and len(student_output[1:]) == len(expected_output[1:]):
            print(""CORRECT\n"")
            num_max_names += 1
        elif num_matches == len(expected_output[1:]) and len(student_output[1:]) >= len(expected_output[1:]):
            print(""INCORRECT.  Your program is printing more power plant names than are expected.\n"") 
        else:
            print(""INCORRECT.  Missing"", str(len(expected_output[1:]) - num_matches), ""plant names"")
            
    return round(60 * (num_max_correct / NUM_TESTS) + 40 * (num_max_names / NUM_TESTS), 1)
    
# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
344,a3_7_max,3,lab,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset called&nbsp;<code>powerplants.csv</code>&nbsp;that contains information about various power production facilities across the nation. Here is a typical line from the dataset (each line ends with the newline &ldquo;\n&rdquo; character):</p>
<p>&nbsp;</p>
<p><code>-121.8601395, 38.01598436, 19, GWFPW2_1_UNIT 1, SteamTurbine</code></p>
<p>&nbsp;</p>
<p>Each position in the line (separated by a comma) represents a different &ldquo;data element,&rdquo; or &ldquo;column.&rdquo; The following table shows how the above line can be interpreted:<br /><br /></p>
<table border=""2"">
<thead>
<tr>
<th>&nbsp;</th>
<th>Longitude</th>
<th>Latitude</th>
<th>Power Output (in MW)</th>
<th>Name</th>
<th>Power Generation Method</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>-<strong>121.8601395</strong></th>
<th>38.01598436</th>
<th>19</th>
<th>GWFPW2<em>1</em>UNIT 1</th>
<th>SteamTurbine</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python program that asks the user for:</p>
<ul>
<li>A power generation method (e.g., &ldquo;SteamTurbine&rdquo;)</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then read the file and print on separate lines:</p>
<ul>
<li>The maximum power output for power plants of this particular type, and</li>
<li>The names of all power plants that are of this <strong>particular type</strong>, and within 8 MW (inclusive) of the maximum power output</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td>Input</td>
<td>
<p>SteamTurbine</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>1164.0<br />DIABLO_7_UNIT 1<br />DIABLO_7_UNIT 2</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def solution(power_generation_type):
    file = open(""powerplants.csv"", 'r')
    contents = file.read()
    lines_in_file = contents.split('\n')
    result = []

    table_of_power_plants = []

    for current_line in lines_in_file:
        columns = current_line.split(',')
        power_mw = float(columns[2])
        power_name = columns[3]
        power_type = columns[4]
        
        if power_type == power_generation_type:
            table_of_power_plants.append([power_mw, power_name])

    max_mw = max(table_of_power_plants)

    result.append(str(max_mw[0]))

    for row in table_of_power_plants:
        if row[0] >= max_mw[0] - 8:
            result.append(row[1])
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 3
    num_max_correct = 0
    num_max_names = 0
    
    types_to_test = ['Other', 'SteamTurbine', 'GasTurbine', 'CombinedCycle', 'HydraulicTurbine']
    
    for i in range(NUM_TESTS):
        power_type = types_to_test[random.randint(0, len(types_to_test)-1)]
        types_to_test.remove(power_type)
        
        print(""-------------------------"")
        print(""Test"", i+1, ""of"", NUM_TESTS, "":"", power_type)
        print(""-------------------------"")
        
        output, error = autograder.run_script(""a3_7_max.py"", [power_type])
        expected_output = solution(power_type)
        student_output = output.strip().split('\n')
                
        # Determines if the stat is correct
        print(""CHECKING MAX VALUE:"")
        if autograder.equals(student_output[0], expected_output[0]):
            print(""CORRECT\n"")
            num_max_correct += 1
        else:
            print(""INCORRECT\n"")
        
        # Determines if the names are correct
        print(""CHECKING PLANT NAMES:"")
        num_matches = 0
        
        for item in expected_output[1:]:
            print(""Looking for"", item, "". . . "", end="""")
            if item in student_output[1:]:
                print(""FOUND"")
                num_matches += 1
            else:
                print(""NOT FOUND"")            
        
        if num_matches == len(expected_output[1:]) and len(student_output[1:]) == len(expected_output[1:]):
            print(""CORRECT\n"")
            num_max_names += 1
        elif num_matches == len(expected_output[1:]) and len(student_output[1:]) >= len(expected_output[1:]):
            print(""INCORRECT.  Your program is printing more power plant names than are expected.\n"") 
        else:
            print(""INCORRECT.  Missing"", str(len(expected_output[1:]) - num_matches), ""plant names"")
            
            
    return round(60 * (num_max_correct / NUM_TESTS) + 40 * (num_max_names / NUM_TESTS), 1)
    

    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
345,a3_7_max_lego,3,lab,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset called <code>legos.csv</code>&nbsp;that contains information about various Lego sets. Here is a typical line from the dataset (each line ends with the newline &ldquo;\n&rdquo; character):</p>
<p>&nbsp;</p>
<p><code>10197-1,Fire Brigade,2009,City,2236</code></p>
<p>&nbsp;</p>
<p>Each position in the line (separated by a comma) represents a different &ldquo;data element,&rdquo; or &ldquo;column.&rdquo; The following table shows how the above line can be interpreted:<br /><br /></p>
<table border=""2"">
<thead>
<tr>
<th>&nbsp;</th>
<th>Set Number</th>
<th>Name</th>
<th>Year</th>
<th>Theme</th>
<th>Number of Parts</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>10197-1</th>
<th>Fire Brigade</th>
<th>2009</th>
<th>City</th>
<th>2236</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python program that asks the user for:</p>
<ul>
<li>A Theme (e.g., ""City"")</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then read the file and print on separate lines:</p>
<ul>
<li>The maximum number of parts in a set of the given theme, and</li>
<li>The names of all Lego sets that are of this <strong>particular theme</strong>, and within 150 (inclusive) of the maximum part count</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td>Input</td>
<td>
<p>Duplo</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>
<p>250</p>
<p>XXL 250 Canister</p>
<p>Giant Tower</p>
<p>Large Creative Box</p>
<p>Around the World</p>
<p>...</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def solution(set_theme):
    file = open(""legos.csv"", 'r')
    contents = file.read()
    lines_in_file = contents.split('\n')
    result = []

    table_of_lego_sets = []

    for current_line in lines_in_file:
        columns = current_line.split(',')
        set_part_count = float(columns[4])
        set_name = columns[1]
        curr_set_theme = columns[3]
        
        if curr_set_theme == set_theme:
            table_of_lego_sets.append([set_part_count, set_name])

    max_set_count = max(table_of_lego_sets)

    result.append(str(max_set_count[0]))

    for row in table_of_lego_sets:
        if row[0] >= max_set_count[0] - 150:
            result.append(row[1])
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 3
    num_max_correct = 0
    num_max_names = 0
    
    types_to_test = [""Model"", ""Technic"", ""City"", ""Town"", ""Vehicle"", ""Space"", ""Star Wars"", ""Seasonal"", ""Educational"", ""Bionicle""]
    
    for i in range(NUM_TESTS):
        lego_theme = types_to_test[random.randint(0, len(types_to_test)-1)]
        types_to_test.remove(lego_theme)
        
        print(""-------------------------"")
        print(""Test"", i+1, ""of"", NUM_TESTS, "":"", lego_theme)
        print(""-------------------------"")
        
        output, error = autograder.run_script(""a3_7_max_lego.py"", [lego_theme])
        expected_output = solution(lego_theme)
        student_output = output.strip().split('\n')
                
        # Determines if the stat is correct
        print(""CHECKING MAX VALUE:"")
        if autograder.equals(student_output[0], expected_output[0]):
            print(""CORRECT\n"")
            num_max_correct += 1
        else:
            print(""INCORRECT\n"")
        
        # Determines if the names are correct
        print(""CHECKING LEGO SET NAMES:"")
        num_matches = 0
        
        for item in expected_output[1:]:
            print(""Looking for"", item, "". . . "", end="""")
            if item in student_output[1:]:
                print(""FOUND"")
                num_matches += 1
            else:
                print(""NOT FOUND"")            
        
        if num_matches == len(expected_output[1:]) and len(student_output[1:]) == len(expected_output[1:]):
            print(""CORRECT\n"")
            num_max_names += 1
        elif num_matches == len(expected_output[1:]) and len(student_output[1:]) >= len(expected_output[1:]):
            print(""INCORRECT.  Your program is printing more Lego set names than are expected.\n"") 
        else:
            print(""INCORRECT.  Missing"", str(len(expected_output[1:]) - num_matches), ""Lego set names"")
            
            
    return round(60 * (num_max_correct / NUM_TESTS) + 40 * (num_max_names / NUM_TESTS), 1)
    

    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
346,a3_6_tests,3,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been asked to write a program that analyzes scores of a recent test given to a class. Write a program that gets from the user the number of tests scored, and gets that many test scores (which you may assume are whole numbers) from the user. Your program must print out:</p>
<ul>
<li>The average score of all tests.</li>
<li>The count of tests that scored lower than the average.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>3<br />75<br />90<br />88<br /><br /><br /></td>
<td>5<br />86<br />79<br />90<br />90<br />100</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>84.3<br />1</td>
<td>89.0<br />2</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_tests.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
347,a3_6_situps,3,lab,1,"<div><strong>PROBLEM STATEMENT:<br></strong>You have been asked to write a program that analyzes the number of situps done by a group of cadets.&nbsp; Write a program that gets from the user the number of people tested, and gets that many situp scores (which you may assume are whole numbers) from the user.&nbsp; Your program must print out:</p>
<ul>
<li>The average number of situps for the group.</li>
<li>The count of cadets that scored higher than the average.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table style=""border-collapse: collapse; width: 40%; margin-left: auto; margin-right: auto;"" border=""1"">
<tbody>
<tr>
<td></td>
<td style=""text-align: center;""><strong>Example 1</strong></td>
<td style=""text-align: center;""><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td style=""text-align: center;"">3<br>75<br>90<br>88<br><br><br></td>
<td style=""text-align: center;"">5<br>86<br>79<br>90<br>90<br>100</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td style=""text-align: center;"">84.3<br>2</td>
<td style=""text-align: center;"">89.0<br>3</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_situps.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""situps"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (10%) -- scores exist that exactly match average
    weight = 10.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
348,a3_6_sami,3,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been asked to write a program that analyzes the cadet wing's performance on a recent SAMI. Write a program that gets from the user the number of squadrons scored, and gets that many squadron SAMI scores (which you may assume are whole numbers) from the user. Your program must print out:</p>
<ul>
<li>The average score of all squadrons.</li>
<li>The count of squadrons that scored higher than the average.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>3<br />75<br />90<br />88<br /><br /><br /></td>
<td>5<br />86<br />79<br />90<br />90<br />100</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>84.3<br />2</td>
<td>89.0<br />3</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_sami.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
349,a3_6_pushups,3,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been asked to write a program that analyzes number of pushups done by a group of cadets. Write a program that gets from the user the number of people tested, and gets that many pushup scores (which you may assume are whole numbers) from the user. Your program must print out:</p>
<ul>
<li>The average number of pushups for the group.</li>
<li>The count of cadets that scored higher than the average.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>3<br />75<br />90<br />88<br /><br /><br /></td>
<td>5<br />86<br />79<br />90<br />90<br />100</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>84.3<br />2</td>
<td>89.0<br />3</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_pushups.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
350,a3_6_missiletest,3,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been asked to write a program that analyzes the results acquired from several missile tests executed last week. Write a program that gets from the user the number missile tests preformed, and gets the result from each test (which you may assume are whole numbers) from the user. Your program must print out:</p>
<ul>
<li>The average result for the missile tests.</li>
<li>The count of missile tests that scored above the average.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>3<br />350<br />410<br />256<br /><br /><br /></td>
<td>5<br />178<br />98<br />200<br />200<br />154</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>338.7<br />2</td>
<td>166.0<br />3</td>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_missiletest.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
        if base_script == ""flighttest"" and score < average:
            count += 1
        if base_script == ""missiletest"" and score > average:
            count += 1
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
351,a3_6_flighttest,3,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been asked to write a program that analyzes the results acquired from several flight tests executed last week. Write a program that gets from the user the number flight tests preformed, and gets the result from each flight (which you may assume are whole numbers) from the user. Your program must print out:</p>
<ul>
<li>The average result for the flight tests.</li>
<li>The count of flight tests that scored below the average.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>3<br />350<br />410<br />256<br /><br /><br /></td>
<td>5<br />178<br />98<br />200<br />200<br />154</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>338.7<br />1</td>
<td>166.0<br />2</td>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_flighttest.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
        if base_script == ""flighttest"" and score < average:
            count += 1
        
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
352,a3_5_star_map,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong><span>You have been provided with a table that describes a simple night sky. In this code, a list (<code>star_map</code>) is populated with characters representing the location of various astronomical entities (stars, planets, etc).</span></p>
<p>&nbsp;</p>
<pre><span>S = Star; St = Satellite; M = Moon; P = Planet; C = Comet; _ = No Major Feature</span></pre>
<p>&nbsp;</p>
<p>Write a program that gets two values from the user in the following order:</p>
<p>1) a row, a 1 indicates the Top row and 8 the Bottom row</p>
<p>2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column</p>
<p>&nbsp;</p>
<p>Finally,<span style=""color: #000000;""> <strong>Print </strong><strong></strong></span>out the contents of the table at that particular cell.</p>
<p>&nbsp;</p>
<p>&nbsp;&nbsp;</p>
<p><strong>HINT:</strong></p>
<ul>
<li>Your output should be one of the following letters:&nbsp; ""S"", ""St"", ""M"", ""P"", ""C"", or ""_""</li>
</ul>
</div>","import random
from cs110 import autograder

simple_map = [['M', 'C', '_', '_', '_', '_', 'M', 'P'],
              ['S', 'M', '_', '_', 'P', 'M', 'St', 'St'],
              ['C', '_', '_', 'P', 'M', 'M', 'S', 'M'],
              ['C', 'C', '_', 'C', '_', 'S', '_', 'P'],
              ['M', 'St', '_', 'St', '_', '_', 'P', 'S'],
              ['_', '_', '_', '_', '_', '_', '_', '_'],
              ['_', 'M', '_', '_', 'M', '_', '_', 'S'],
              ['_', '_', '_', '_', 'St', 'St', 'P', 'P']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row+1, col+1))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_star_map.py"", [row+1, col+1])

    if simple_map[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", simple_map[row][col], ""\n"")
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0

    if (check_location(0,
                       1)):
        score += 20

    if (check_location(1,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(7,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    return score


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
star_map = [['M', 'C', '_', '_', '_', '_', 'M', 'P'],
              ['S', 'M', '_', '_', 'P', 'M', 'St', 'St'],
              ['C', '_', '_', 'P', 'M', 'M', 'S', 'M'],
              ['C', 'C', '_', 'C', '_', 'S', '_', 'P'],
              ['M', 'St', '_', 'St', '_', '_', 'P', 'S'],
              ['_', '_', '_', '_', '_', '_', '_', '_'],
              ['_', 'M', '_', '_', 'M', '_', '_', 'S'],
              ['_', '_', '_', '_', 'St', 'St', 'P', 'P']]

#Your code goes here."
353,a3_5_map,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a table that describes a simple landscape. In this code, a list (<code>simple_map</code>) is populated with characters representing the location of various landmarks (Road, Water, Trees, Stones, Mud).</p>
<p>&nbsp;</p>
<pre>R = Road; W = Water; T = Trees; S = Stones; M = Mud; _ = Grass</pre>
<p>&nbsp;</p>
<p>Write a program that gets two values from the user in the following order:</p>
<p>1) a row, a 1 indicates the Top row and 8 the Bottom row</p>
<p>2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column</p>
<p>&nbsp;</p>
<p>Finally,&nbsp;<strong>Print&nbsp;</strong>out the contents of the table at that particular cell.</p>
<p>&nbsp;</p>
<p> </p>
<p><strong>HINT:</strong></p>
<ul>
<li>Your output should be one of the following letters: ""R"", ""W"", ""T"", ""S"", ""M"", or ""_""</li>
</ul>
</div>
","import random
from cs110 import autograder

simple_map = [['_', 'T', '_', '_', '_', 'R', '_', '_'],
              ['_', '_', 'T', 'S', 'B', 'R', '_', '_'],
              ['W', '_', '_', '_', '_', '_', 'R', '_'],
              ['W', 'W', 'S', '_', '_', 'B', '_', '_'],
              ['W', '_', '_', 'S', '_', '_', 'B', 'R'],
              ['_', '_', '_', '_', '_', 'T', '_', '_'],
              ['_', '_', '_', '_', '_', '_', 'T', '_'],
              ['R', 'R', 'R', 'R', 'R', '_', '_', '_']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row+1, col+1))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_map.py"", [row+1, col+1])

    if simple_map[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", simple_map[row][col], ""\n"")
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0

    if (check_location(0,
                       1)):
        score += 20

    if (check_location(1,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(7,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    return score
# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
simple_map = [['_', 'T', '_', '_', '_', 'R', '_', '_'],
                    ['_', '_', 'T', 'S', 'B', 'R', '_', '_'],
                    ['W', '_', '_', '_', '_', '_', 'R', '_'],
                    ['W', 'W', 'S', '_', '_', 'B', '_', '_'],
                    ['W', '_', '_', 'S', '_', '_', 'B', 'R'],
                    ['_', '_', '_', '_', '_', 'T', '_', '_'],
                    ['_', '_', '_', '_', '_', '_', 'T', '_'],
                    ['R', 'R', 'R', 'R', 'R', '_', '_', '_']]

#Your code goes here."
354,a3_5_connect,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong><span>You have been provided with a table that describes a connect 4 board. In this code, a list (<code>connect_4</code>) is populated with characters representing the location of each of the pieces (Red, Yellow, or Blank).</span></p>
<p>&nbsp;</p>
<pre><span>X = Red; 0 = Yellow; _ = Blank</span></pre>
<p>&nbsp;</p>
<p>Write a program that gets two values from the user in the following order:</p>
<p>1) a row index, a 0 indicates the Top row and 5 the Bottom row</p>
<p>2) a column index, a 0 indicates the Leftmost column and 6 the Rightmost column</p>
<p>&nbsp;</p>
<p>Finally,<span>&nbsp;</span><span><strong>Print&nbsp;</strong></span>out the contents of the table at that particular cell.</p>
<p>&nbsp;</p>
<p>&nbsp;&nbsp;</p>
<p><strong>HINT:</strong></p>
<ul>
<li>Your output should be one of the following letters:&nbsp; ""X"", ""0"" or ""_""</li>
</ul>
</div>","from cs110 import autograder
import random, math

connect_4   =      [['X', '_', '_', '_', '_', '_', '_'],
                    ['X', '_', 'X', '_', '_', '_', '_'],
                    ['0', '_', 'X', '_', '_', '_', '_'],
                    ['0', '_', '0', 'X', '_', '_', '0'],
                    ['0', '_', '0', '0', 'X', '_', 'X'],
                    ['X', '_', 'X', '0', '0', 'X', 'X']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking (row:"", row, ""col:"", col, "")"")
    print(""-----------------------------"")
    
    output, error = autograder.run_script(""a3_5_connect.py"", [row, col])
    
    if connect_4[row-1][col-1] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", connect_4[row-1][col-1], ""\n"")
        return False
        

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    
    if (check_location(1, 2)):
        score += 20
    
    if (check_location(1, random.randint(1, len(connect_4[0])))):
        score += 20
        
    if (check_location(6, random.randint(1, len(connect_4[0])))):
        score += 20
    
    if (check_location(random.randint(1, len(connect_4)), random.randint(1, len(connect_4[0])))):
        score += 20
    
    if (check_location(random.randint(1, len(connect_4)), random.randint(1, len(connect_4[0])))):
        score += 20
    
    return score
    

    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
connect_4   =      [['X', '_', '_', '_', '_', '_', '_'],
                    ['X', '_', 'X', '_', '_', '_', '_'],
                    ['0', '_', 'X', '_', '_', '_', '_'],
                    ['0', '_', '0', 'X', '_', '_', '0'],
                    ['0', '_', '0', '0', 'X', '_', 'X'],
                    ['X', '_', 'X', '0', '0', 'X', 'X']]

#Your code goes here."
355,a3_5_chess,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a table that describes a chess board. In this code, a list (<code>chess_board</code>) is populated with characters representing the location of each of the pieces(Rook, Knight, Bishop,King,Queen,Pawn).</p>
<p>&nbsp;</p>
<pre>R = Rook; N = Knight; B = Bishop; K = King; Q = Queen; P = pawn; _ = Empty</pre>
<p>&nbsp;</p>
<p>Write a program that gets two values from the user in the following order:</p>
<p>1) a row, a 1 indicates the Top row and 8 the Bottom row</p>
<p>2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column</p>
<p>&nbsp;</p>
<p>Finally,&nbsp;<strong>Print&nbsp;</strong>out the contents of the table at that particular cell.</p>
<p>&nbsp;</p>
<p> </p>
<p><strong>HINT:</strong></p>
<ul>
<li>Your output should be one of the following letters: ""R"", ""N"", ""B"", ""K"", ""Q"", ""P"", or ""_""</li>
</ul>
</div>
","import random
from cs110 import autograder

chess_board = [['R', 'N', '_', 'K', '_', 'B', 'N', 'R'],
               ['p', 'p', 'p', '_', 'p', 'p', 'p', 'p'],
               ['_', '_', 'Q', '_', '_', '_', '_', '_'],
               ['_', '_', '_', 'p', '_', 'B', '_', '_'],
               ['_', '_', '_', 'p', '_', '_', '_', '_'],
               ['_', '_', '_', '_', 'p', '_', '_', '_'],
               ['p', 'p', 'p', '_', '_', 'p', 'p', 'p'],
               ['R', 'N', 'B', 'K', 'Q', 'B', 'N', 'R']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row+1, col+1))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_chess.py"", [row+1, col+1])

    if chess_board[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", chess_board[row][col], ""\n"")
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0

    if (check_location(0,
                       2)):
        score += 20

    if (check_location(1,
                       random.randint(0, len(chess_board[0])-1))):
        score += 20

    if (check_location(7,
                       random.randint(0, len(chess_board[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(chess_board)-1),
                       random.randint(0, len(chess_board[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(chess_board)-1),
                       random.randint(0, len(chess_board[0])-1))):
        score += 20

    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
chess_board =      [['R', 'N', '_', 'K', '_', 'B', 'N', 'R'],
                    ['p', 'p', 'p', '_', 'p', 'p', 'p', 'p'],
                    ['_', '_', 'Q', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', 'p', '_', 'B', '_', '_'],
                    ['_', '_', '_', 'p', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', 'p', '_', '_', '_'],
                    ['p', 'p', 'p', '_', '_', 'p', 'p', 'p'],
                    ['R', 'N', 'B', 'K', 'Q', 'B', 'N', 'R']]

#Your code goes here."
356,a3_5_carnival,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a table that describes a simple carnival ring toss. In this code, a list (<code>simple_map</code>) is populated with characters representing the colors of the bottles.</p>
<p>&nbsp;</p>
<pre>G = Green; B = Blue; P = Purple; R = Red; O = Orange; _ = Clear</pre>
<p>&nbsp;</p>
<p>Write a program that gets two values from the user in the following order:</p>
<p>1) a row, a 1 indicates the Top row and 8 the Bottom row</p>
<p>2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column</p>
<p>&nbsp;</p>
<p>Finally,&nbsp;<strong>Print&nbsp;</strong>out the contents of the table at that particular cell.</p>
<p>&nbsp;</p>
<p> </p>
<p><strong>HINT:</strong></p>
<ul>
<li>Your output should be one of the following letters: ""G"", ""B"", ""P"", ""R"", ""O"", or ""_""</li>
</ul>
</div>
","import random
from cs110 import autograder

simple_map = [['O', '_', '_', 'P', '_', 'R', '_', 'G'],
              ['R', 'O', '_', '_', '_', 'P', '_', '_'],
              ['_', '_', 'O', '_', '_', 'O', 'P', '_'],
              ['R', '_', 'G', '_', '_', '_', '_', 'P'],
              ['B', '_', '_', '_', '_', '_', '_', 'P'],
              ['G', 'R', 'P', 'O', 'O', '_', '_', 'G'],
              ['P', '_', '_', '_', '_', 'G', 'B', '_'],
              ['B', 'R', 'G', 'B', '_', 'G', 'B', 'G']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row+1, col+1))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_carnival.py"", [row+1, col+1])

    if simple_map[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", simple_map[row][col], ""\n"")
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0

    if (check_location(0,
                       3)):
        score += 20

    if (check_location(1,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(7,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
simple_map = [['O', '_', '_', 'P', '_', 'R', '_', 'G'],
              ['R', 'O', '_', '_', '_', 'P', '_', '_'],
              ['_', '_', 'O', '_', '_', 'O', 'P', '_'],
              ['R', '_', 'G', '_', '_', '_', '_', 'P'],
              ['B', '_', '_', '_', '_', '_', '_', 'P'],
              ['G', 'R', 'P', 'O', 'O', '_', '_', 'G'],
              ['P', '_', '_', '_', '_', 'G', 'B', '_'],
              ['B', 'R', 'G', 'B', '_', 'G', 'B', 'G']]

#Your code goes here."
357,a3_5_battleship,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a table that describes the board game, Battleship. In this code, a list (<code>battleship_board</code>) is populated with characters representing the location of each of the game&rsquo;s ship types (Carrier, Battleship, Submarine, Cruiser, and Destroyer).</p>
<p>&nbsp;</p>
<pre>C = Carrier; B = Battleship; S = Submarine; R = Cruiser; D = Destroyer; _ = Blank</pre>
<p>&nbsp;</p>
<p>Write a program that gets two values from the user in the following order:</p>
<p>1) a row, a 1 indicates the Top row and 8 the Bottom row</p>
<p>2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column</p>
<p>&nbsp;</p>
<p>Finally,&nbsp;<strong>Print&nbsp;</strong>out the contents of the table at that particular cell.</p>
<p>&nbsp;</p>
<p><strong>HINT:</strong></p>
<ul>
<li>Your output should be one of the following letters: ""C"", ""B"", ""S"", ""R"", ""D"", or ""_""</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","import random
from cs110 import autograder

battleship_board = [['_', '_', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', 'C', 'S', 'S', 'S', '_', '_'],
                    ['D', 'D', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', '_', 'R', 'R', 'R'],
                    ['_', '_', '_', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', '_', '_', '_', '_'],
                    ['_', 'B', 'B', 'B', 'B', '_', '_', '_']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row+1, col+1))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_battleship.py"", [row+1, col+1])

    if battleship_board[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", battleship_board[row][col], ""\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    if check_location(0, 2):
        score += 20
    if check_location(1, random.randint(0, len(battleship_board[0])-1)):
        score += 20
    if check_location(7, random.randint(0, len(battleship_board[0])-1)):
        score += 20
    if check_location(random.randint(0, len(battleship_board)-1),
                      random.randint(0, len(battleship_board[0])-1)):
        score += 20
    if check_location(random.randint(0, len(battleship_board)-1),
                      random.randint(0, len(battleship_board[0])-1)):
        score += 20
    return score


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
battleship_board = [['_', '_', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', 'C', 'S', 'S', 'S', '_', '_'],
                    ['D', 'D', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', '_', 'R', 'R', 'R'],
                    ['_', '_', '_', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', '_', '_', '_', '_'],
                    ['_', 'B', 'B', 'B', 'B', '_', '_', '_']]

#Your code goes here."
358,a3_4_weights,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called list_of_weights. Write a program that prints out the range (<em>i.e.,&nbsp;</em>the difference between the max and min weight)</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the values: 103, 110, 115</p>
<p>Your program should print:</p>
<pre>12</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_weights.py""


list_of_weights = [100, 369, 115, 284, 267, 122, 367, 361,
                   215, 358, 339, 324, 105, 185, 175, 120,
                   267, 184, 108, 309, 366, 218, 179, 338,
                   313, 370, 245, 390, 102, 126]

max_value = max(list_of_weights) 
min_value = min(list_of_weights)

def verify_code():
    print(""Test 1:  Scanning your solution . . . "", end='')
    
    file = open(STUDENT_FILE, ""r"")
    contents = file.read()
        
    if ""for"" not in contents and ""while"" not in contents and ""max"" not in contents and ""min"" not in contents and ""sort"" not in contents:
        print(""Could not find code that gets the heaviest and lightest weights . . ."")
        return False
    
    print(""Good. You are actually computing the answer."")
    return True



# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if verify_code():
        print(""Test 2:  Checking Output . . . "", end='')
        score += 60
        
        if len(lines) >= 1:           
            if autograder.equals(lines[0], max_value - min_value):
                print(""Range Look Good!"")
                score += 40
            else:
                print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
                
        else:
            print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
359,a3_4_testscores,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong><span>You have been provided with a list called list_of_test_scores</span><span>. Write a program that prints out the range (<em>i.e.,&nbsp;</em>the difference between the max and min scores)</span></p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br></strong>If, for example, the list contained the values:&nbsp; 50, 64, 72</p>
<p>Your program should print:</p>
<pre>22</pre>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_testscores.py""

list_of_test_scores = [98.6,78.5,100,67.7,88,72.6,45,82.5,86.5,79.9,100,98.6,99,55.4,94.5,91.2,90,79.5]

max_value = max(list_of_test_scores) 
min_value = min(list_of_test_scores)

def verify_code():
    print(""Test 1:  Scanning your solution . . . "", end='')
    
    file = open(STUDENT_FILE, ""r"")
    contents = file.read()
        
    if ""for"" not in contents and ""while"" not in contents and ""max"" not in contents and ""min"" not in contents and ""sort"" not in contents:
        print(""Could not find code that gets the highest and lowest pt scores . . ."")
        return False
    
    print(""Good. You are actually computing the answer."")
    return True



# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if verify_code():
        print(""Test 2:  Checking Output . . . "", end='')
        score += 60
        
        if len(lines) >= 1:           
            if autograder.equals(lines[0], max_value - min_value):
                print(""Range Look Good!"")
                score += 40
            else:
                print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
                
        else:
            print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
360,a3_4_run,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called list_of_run_times. Write a program that prints out the range (<em>i.e.,&nbsp;</em>the difference between the max and min run time)</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the values: 3, 10, 15</p>
<p>Your program should print:</p>
<pre>12</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_run.py""

list_of_run_times = [42.5, 44.2, 42.5, 45.8, 40.8, 42.4, 44.6, 36.5, 44.4,
                     35.1, 40.4, 47.1, 48.0, 37.0, 46.0, 44.5, 37.3, 42.4,
                     43.5, 41.6, 41.8, 47.6, 40.4, 35.0, 38.7, 39.5, 42.0,
                     39.6, 41.1, 37.6]

max_value = max(list_of_run_times) 
min_value = min(list_of_run_times)

def verify_code():
    print(""Test 1:  Scanning your solution . . . "", end='')
    
    file = open(STUDENT_FILE, ""r"")
    contents = file.read()
        
    if ""for"" not in contents and ""while"" not in contents and ""max"" not in contents and ""min"" not in contents and ""sort"" not in contents:
        print(""Could not find code that gets the fastest and slowest run times . . ."")
        return False
    
    print(""Good. You are actually computing the answer."")
    return True



# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if verify_code():
        print(""Test 2:  Checking Output . . . "", end='')
        score += 60
        
        if len(lines) >= 1:           
            if autograder.equals(lines[0], max_value - min_value):
                print(""Range Look Good!"")
                score += 40
            else:
                print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
                
        else:
            print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
361,a3_4_ptscores,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called list_of_pt_scores. Write a program that prints out the range (<em>i.e.,&nbsp;</em>the difference between the max and min pt scores)</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the values: 3, 10, 15</p>
<p>Your program should print:</p>
<pre>12</pre>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_ptscores.py""

list_of_pt_scores = [98.6,78.5,100,67.7,88,72.6,45,82.5,86.5,79.9,100,98.6,99,55.4,94.5,91.2,90,79.5]

max_value = max(list_of_pt_scores) 
min_value = min(list_of_pt_scores)

def verify_code():
    print(""Test 1:  Scanning your solution . . . "", end='')
    
    file = open(STUDENT_FILE, ""r"")
    contents = file.read()
        
    if ""for"" not in contents and ""while"" not in contents and ""max"" not in contents and ""min"" not in contents and ""sort"" not in contents:
        print(""Could not find code that gets the highest and lowest pt scores . . ."")
        return False
    
    print(""Good. You are actually computing the answer."")
    return True



# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if verify_code():
        print(""Test 2:  Checking Output . . . "", end='')
        score += 60
        
        if len(lines) >= 1:           
            if autograder.equals(lines[0], max_value - min_value):
                print(""Range Look Good!"")
                score += 40
            else:
                print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
                
        else:
            print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
362,a3_4_heights,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called list_of_heights. Write a program that prints out the range (<em>i.e.,&nbsp;</em>the difference between the max and min height)</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the values: 53, 60, 65</p>
<p>Your program should print:</p>
<pre>12</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_heights.py""

list_of_heights = [74, 75, 63, 59, 81, 76, 79, 61, 58, 70,
                   61, 53, 82, 67, 73, 50, 59, 73, 57, 75,
                   78, 64, 69, 57, 79, 74, 48, 51, 48, 64]

max_value = max(list_of_heights) 
min_value = min(list_of_heights)

def verify_code():
    print(""Test 1:  Scanning your solution . . . "", end='')
    
    file = open(STUDENT_FILE, ""r"")
    contents = file.read()
        
    if ""for"" not in contents and ""while"" not in contents and ""max"" not in contents and ""min"" not in contents and ""sort"" not in contents:
        print(""Could not find code that gets the tallest and shortest heights . . ."")
        return False
    
    print(""Good. You are actually computing the answer."")
    return True



# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if verify_code():
        print(""Test 2:  Checking Output . . . "", end='')
        score += 60
        
        if len(lines) >= 1:           
            if autograder.equals(lines[0], max_value - min_value):
                print(""Range Look Good!"")
                score += 40
            else:
                print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
                
        else:
            print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
363,a3_4_ages,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called list_of_ages. Write a program that prints out the range (<em>i.e.,&nbsp;</em>the difference between the max and min ages)</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the values: 50, 64, 72</p>
<p>Your program should print:</p>
<pre>22</pre>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_ages.py""

list_of_ages = [58, 79, 69, 87, 93, 70, 49, 82, 53, 67, 80, 61, 61,
                     83, 72, 80, 88, 89, 59, 77, 66, 82, 56, 59, 86, 74,
                     61, 45, 70, 67]

max_value = max(list_of_ages) 
min_value = min(list_of_ages)

def verify_code():
    print(""Test 1:  Scanning your solution . . . "", end='')
    
    file = open(STUDENT_FILE, ""r"")
    contents = file.read()
        
    if ""for"" not in contents and ""while"" not in contents and ""max"" not in contents and ""min"" not in contents and ""sort"" not in contents:
        print(""Could not find code that gets the youngest and oldest ages . . ."")
        return False
    
    print(""Good. You are actually computing the answer."")
    return True



# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if verify_code():
        print(""Test 2:  Checking Output . . . "", end='')
        score += 60
        
        if len(lines) >= 1:           
            if autograder.equals(lines[0], max_value - min_value):
                print(""Range Look Good!"")
                score += 40
            else:
                print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
                
        else:
            print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
364,a3_3_ships,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong><span>You have been provided with a list
            called&nbsp;</span><code>list_of_ship_classes</code><span>. Write a program that prints out each of the
            items in this list (one item per line).&nbsp;&nbsp;</span></p>
    <p>&nbsp;</p>
    <p><strong>EXAMPLE:<br></strong>If, for example, the list contained the items:&nbsp; ""A"", ""B"", ""C""</p>
    <p>Your program should print:</p>
    <pre>A<br>B<br>C</pre>
    <p>&nbsp;</p>
    <p><strong>NOTE:</strong></p>
    <ul>
        <li>You must use a loop to complete this task.&nbsp;&nbsp;</li>
    </ul>
    <p>&nbsp;</p>

</div>","from cs110 import autograder
import random, math

list_of_ship_classes = ['Ford', 'Ticonderoga', 'Arleigh Burke', 'Virginia', 'Zumwalt', 'Hamilton', 'Legend']

def solution():
    result = []
    
    for item in list_of_ship_classes:
        result.append(item)
    
    return result
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""a3_3_ships.py"", [])
    expected_output = solution()
    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    return round(100 / len(expected_output) * num_matches, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_ship_classes = ['Ford', 'Ticonderoga', 'Arleigh Burke', 'Virginia', 'Zumwalt', 'REDACTED_NAME', 'Legend']

#Your code goes here."
365,a3_3_pizza,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong><span>You have been provided with a list
        called&nbsp;</span><code>list_of_pizza_toppings</code><span>. Write a program that prints out each of the items
        in this list (one item per line).&nbsp;&nbsp;</span></p>
    <p>&nbsp;</p>
    <p><strong>EXAMPLE:<br></strong>If, for example, the list contained the items:&nbsp; ""A"", ""B"", ""C""</p>
    <p>Your program should print:</p>
    <pre>A<br>B<br>C</pre>
    <p>&nbsp;</p>
    <p><strong>NOTE:</strong></p>
    <ul>
        <li>You must use a loop to complete this task.&nbsp;&nbsp;</li>
    </ul>

</div>","from cs110 import autograder
import random, math

list_of_pizza_toppings = ['Pepporoni', 'Sausage', 'Onion', 'Mushroom', 'Peppers', 'Chicken', 'Hamburger']

def solution():
    result = []
    
    for item in list_of_pizza_toppings:
        result.append(item)
    
    return result
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""a3_3_pizza.py"", [])
    expected_output = solution()
    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    return round(100 / len(expected_output) * num_matches, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_pizza_toppings = ['Pepporoni', 'Sausage', 'Onion', 'Mushroom', 'Peppers', 'Chicken', 'Hamburger']

#Your code goes here."
366,a3_3_games,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong><span>You have been provided with a list called&nbsp;</span><code>list_of_games</code><span>. Write a program that prints out each of the items in this list (one item per line).&nbsp;&nbsp;</span></p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br></strong>If, for example, the list contained the items:&nbsp; ""A"", ""B"", ""C""</p>
<p>Your program should print:</p>
<pre>A<br>B<br>C</pre>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You must use a loop to complete this task.&nbsp;&nbsp;</li>
</ul>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

list_of_games = ['Monopoly', 'Risk', 'Clue', 'Chess', 'Operation', 'Jenga', 'Jumanji']

def solution():
    result = []
    
    for item in list_of_games:
        result.append(item)
    
    return result
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""a3_3_games.py"", [])
    expected_output = solution()
    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    return round(100 / len(expected_output) * num_matches, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_games = ['Monopoly', 'Risk', 'Clue', 'Chess', 'Operation', 'Jenga', 'Jumanji']

#Your code goes here."
367,a3_3_dogs,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong><span>You have been provided with a list called&nbsp;</span><code>list_of_dogs</code><span>. Write a program that prints out each of the items in this list (one item per line).&nbsp;&nbsp;</span></p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br></strong>If, for example, the list contained the items:&nbsp; ""A"", ""B"", ""C""</p>
<p>Your program should print:</p>
<pre>A<br>B<br>C</pre>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You must use a loop to complete this task.&nbsp;&nbsp;</li>
</ul>
</div>","from cs110 import autograder
import random, math

list_of_dogs = [""Pug"", ""Lab"", ""Yorkie"", ""Pit Bull"", ""Poodle"", ""Great Dane""]

def solution():
    result = []
    
    for item in list_of_dogs:
        result.append(item)
    
    return result
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""a3_3_dogs.py"", [])
    expected_output = solution()
    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    return round(100 / len(expected_output) * num_matches, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_dogs = [""Pug"", ""Lab"", ""Yorkie"", ""Pit Bull"", ""Poodle"", ""Great Dane""]

#Your code goes here."
368,a3_3_animals,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong><span>You have been provided with a list called&nbsp;</span><code>list_of_animals</code><span>. Write a program that prints out each of the items in this list (one item per line).&nbsp;&nbsp;</span></p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br></strong>If, for example, the list contained the items:&nbsp; ""A"", ""B"", ""C""</p>
<p>Your program should print:</p>
<pre>A<br>B<br>C</pre>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You must use a loop to complete this task.&nbsp;&nbsp;</li>
</ul>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

list_of_animals = ['Tiger', 'Deer', 'Zebra', 'Elephant', 'Swordfish', 'Giraffe', 'Sloth']

def solution():
    result = []
    
    for item in list_of_animals:
        result.append(item)
    
    return result
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""a3_3_animals.py"", [])
    expected_output = solution()
    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    return round(100 / len(expected_output) * num_matches, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_animals = ['Tiger', 'Deer', 'Zebra', 'Elephant', 'Swordfish', 'Giraffe', 'Sloth']

#Your code goes here."
369,a3_3_aircraft,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong><span>You have been provided with a list
        called&nbsp;</span><code>list_of_aircraft_classes</code><span>. Write a program that prints out each of the
        items in this list (one item per line).&nbsp;&nbsp;</span></p>
    <p>&nbsp;</p>
    <p><strong>EXAMPLE:<br></strong>If, for example, the list contained the items:&nbsp; ""A"", ""B"", ""C""</p>
    <p>Your program should print:</p>
    <pre>A<br>B<br>C</pre>
    <p>&nbsp;</p>
    <p><strong>NOTE:</strong></p>
    <ul>
        <li>You must use a loop to complete this task.&nbsp;&nbsp;</li>
    </ul>
</div>","from cs110 import autograder
import random, math

list_of_aircraft_classes = ['Attack','Cargo','Drone', 'Fighter', 'Unmanned','Trainer','Tanker']

def solution():
    result = []
    
    for item in list_of_aircraft_classes:
        result.append(item)
    
    return result
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""a3_3_aircraft.py"", [])
    expected_output = solution()
    num_matches = autograder.compare_strings(output.strip().split('\n'), expected_output)
    
    return round(100 / len(expected_output) * num_matches, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_aircraft_classes = ['Attack','Cargo','Drone', 'Fighter', 'Unmanned','Trainer','Tanker']

#Your code goes here."
370,a3_2_jets,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called&nbsp;<code>list_of_aircraft</code>. Write a program that gets two aircraft designator names from the user. Then append the aircraft (in the same order they were provided) to the list.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>Do not touch the code we provide you. Otherwise, the test cases will not work.</li>
</ul>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

list_of_aircraft = ['F-16', 'F-15', 'F-22', 'F-35', 'B-1', 'B-2']
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(list_of_aircraft)-2), len(list_of_aircraft)]
    score = 0

    new_aircraft = ['C-5', 'C-130', 'AC-130', 'U-2', 'KC-135', ""F-105"", ""C-21""]
    
    random_ac1 = new_aircraft[random.randint(0, len(new_aircraft)-1)]
    new_aircraft.remove(random_ac1)
    random_ac2 = new_aircraft[random.randint(0, len(new_aircraft)-1)]
    
    list_of_aircraft.append(random_ac1)
    list_of_aircraft.append(random_ac2)

    output, error = autograder.run_script(""a3_2_jets.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')
    
    if lines[len(lines)-2].strip() == list_of_aircraft[len(list_of_aircraft)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())
    
    if lines[len(lines)-1].strip() == list_of_aircraft[len(list_of_aircraft)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
371,a3_2_grammys,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called <code>grammy_list</code>. Write a program that gets two new Grammy awards categories from the user. Then append the categories (in the same order they were provided) to the list.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>Do not touch the code we provide you. Otherwise, the test cases will not work.</li>
</ul>
</div>
","from cs110 import autograder
import random, math

grammy_list = ['Pop', 'Global', 'Rock', 'Rap', 'Jazz', 'R&B', 'Comedy']

             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(grammy_list)-2), len(grammy_list)]
    score = 0

    new_categories = [""Dance"", ""Country"", ""Classical"", ""Gospel"", ""Alternative"", ""Soundtrack"", ""Instrumental"", ""Latin"", ""Reggae""]
    
    random_ac1 = new_categories[random.randint(0, len(new_categories)-1)]
    new_categories.remove(random_ac1)
    random_ac2 = new_categories[random.randint(0, len(new_categories)-1)]
    
    grammy_list.append(random_ac1)
    grammy_list.append(random_ac2)

    output, error = autograder.run_script(""a3_2_grammys.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')
    
    if lines[len(lines)-2].strip() == grammy_list[len(grammy_list)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())
    
    if lines[len(lines)-1].strip() == grammy_list[len(grammy_list)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
372,a3_2_departments,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called&nbsp;<code>department_list</code>. Write a program that gets two new departments from the user. Then append the departments (in the same order they were provided) to the list.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>Do not touch the code we provide you. Otherwise, the test cases will not work.</li>
</ul>
</div>
","from cs110 import autograder
import random, math

department_list = ['Science','Engineering','Humanities','Social Science']

             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(department_list)-2), len(department_list)]
    score = 0

    new_departments = ['Education', 'E-Sports', '8-Bit Gaming', 'Midi Music', 'General Studies', ""Deep Space"", ""Department of Motor Vehicles""]
    
    random_ac1 = new_departments[random.randint(0, len(new_departments)-1)]
    new_departments.remove(random_ac1)
    random_ac2 = new_departments[random.randint(0, len(new_departments)-1)]
    
    department_list.append(random_ac1)
    department_list.append(random_ac2)

    output, error = autograder.run_script(""a3_2_departments.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')
    
    if lines[len(lines)-2].strip() == department_list[len(department_list)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())
    
    if lines[len(lines)-1].strip() == department_list[len(department_list)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
373,a3_2_cities,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called <code>list_of_cities</code>. Write a program that gets two new cities from the user. Then append the cities (in the same order they were provided) to the list.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>Do not touch the code we provide you. Otherwise, the test cases will not work.</li>
</ul>
</div>
","from cs110 import autograder
import random, math

list_of_cities = ['Tokyo', 'Delhi', 'Shanghai', 'Cairo', 'Mumbai', 'Bejing', 'Dhaka']

             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(list_of_cities)-2), len(list_of_cities)]
    score = 0

    new_cities = [""Osaka"", ""Karachi"", ""Istanbul"", ""Kolkata"", ""Manila"", ""Lagos"", ""Moscow"", ""Lahore"", ""Paris""]
    
    random_ac1 = new_cities[random.randint(0, len(new_cities)-1)]
    new_cities.remove(random_ac1)
    random_ac2 = new_cities[random.randint(0, len(new_cities)-1)]
    
    list_of_cities.append(random_ac1)
    list_of_cities.append(random_ac2)

    output, error = autograder.run_script(""a3_2_cities.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')
    
    if lines[len(lines)-2].strip() == list_of_cities[len(list_of_cities)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())
    
    if lines[len(lines)-1].strip() == list_of_cities[len(list_of_cities)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
374,a3_2_cars,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called <code>list_of_cars</code>. Write a program that gets two new cars from the user. Then append the cars (in the same order they were provided) to the list.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>Do not touch the code we provide you. Otherwise, the test cases will not work.</li>
</ul>
</div>
","from cs110 import autograder
import random, math

list_of_cars = ['Viper', 'Highlander', 'Audi A8', 'Tundra', 'Porsche', 'Mazada', 'Fiesta']

             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(list_of_cars)-2), len(list_of_cars)]
    score = 0

    new_cars = [""Ford"", ""Maserati"", ""BMW"", ""Cheetah"", ""Scion"", ""Lambo"", ""Pilot"", ""Civic"", ""Corolla""]
    
    random_ac1 = new_cars[random.randint(0, len(new_cars)-1)]
    new_cars.remove(random_ac1)
    random_ac2 = new_cars[random.randint(0, len(new_cars)-1)]
    
    list_of_cars.append(random_ac1)
    list_of_cars.append(random_ac2)

    output, error = autograder.run_script(""a3_2_cars.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')
    
    if lines[len(lines)-2].strip() == list_of_cars[len(list_of_cars)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())
    
    if lines[len(lines)-1].strip() == list_of_cars[len(list_of_cars)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
375,a3_1_medals,3,skill,1,"<div>
<p><strong>PROBLEM STATEMENT: <br /></strong></p>
<p>You have been provided with a list called&nbsp;<code>list_of_medals</code> that contains the current Air Force and Space Force approved decorations. Write a program that prints a single, specified decoration from the list. Your program shall take a number via user input used to identify which decoration to print. For example, if the user types a 3, you should print out the third item.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)</li>
</ul>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

soln_list = [
                    'Congressional Medal of Honor', 'Air Force Cross',	'Air Force Distinguished Service Medal',
                    ""Airman's Medal"",	""Aerial Achievement Medal"",	""Air Force Commendation Medal"",
                    ""Air Force Achievement Medal"", 'Air Force Combat Action Medal',	'Combat Readiness Medal',
                    'Air and Space Campaign Medal',	'Nuclear Deterrence Operations Service Medal',
                    'Remote Combat Effects Campaign Medal'
            ] 
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_medals.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == soln_list[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(soln_list[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
376,a3_1_light_aircraft,3,skill,1,"<div ><strong>PROBLEM STATEMENT:<br></strong></p>
<p><span>You have been provided with a list called&nbsp;</span><code>list_of_aircraft</code><span>. Write a program that prints a single, specified aircraft from the list. Your program shall take a number via user input used to identify which aircraft to print. For example, if the user types a 3, you should print out the third item.</span></p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)</li>
</ul>
</div>","from cs110 import autograder
import random, math

list_of_aircraft = [""F-16"",""F-15"",""F-22"",""F-35"", ""A-10"", ""B-1"",""B-2"", ""B-52"" ]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(list_of_aircraft)-2), len(list_of_aircraft)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_light_aircraft.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == list_of_aircraft[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != list_of_aircraft[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(list_of_aircraft[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
377,a3_1_countries,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called&nbsp;<code>list_of_coalition_countries</code>. Write a program that prints a single, specified country from the list. Your program shall take a number via user input used to identify which country to print. For example, if the user types a 3, you should print out the third item.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)</li>
</ul>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

soln_list = ['United States', 'United Kingdom', 'Australia', 'South Korea', 'Czech Republic', 'Romania', 'El Salvador', 'Estonia', 
             'Bulgaria', 'Moldova', 'Albania', 'Ukraine', 'Denmark', 'Tonga', 'Azerbaijan', 'Singapore', 'Bosnia', 'Macedonia',
             'Latvia', 'Poland', 'Kazakhstan']
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_countries.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == soln_list[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(soln_list[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
378,a3_1_commands,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called&nbsp;<code>list_of_usaf_commands</code>. Write a program that prints a single, specified command organization from the list. Your program shall take a number via user input used to identify which command organization to print. For example, if the user types a 3, you should print out the third item.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)</li>
</ul>
</div>
","from cs110 import autograder
import random, math

list_of_usaf_commands = ['ACC','AETC','AFGSC','AFMC',
                         'AFRC','AFSOC','AMC','PACAF',
                         'USAFE']
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(list_of_usaf_commands)-2), len(list_of_usaf_commands)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_commands.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == list_of_usaf_commands[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != list_of_usaf_commands[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(list_of_usaf_commands[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
379,a3_1_cargo,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called&nbsp;<code>list_of_cargo_planes</code>. Write a program that prints a single, specified plane from the list. Your program shall take a number via user input used to identify which plane to print. For example, if the user types a 3, you should print out the third item.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)</li>
</ul>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, math

soln_list =  [
                'C-2', 'C-5', 'C-9', 'C-12', 'C-17', 'UV-18', 'C-20', 'C-21', 'C-22', 'C-23', 'C-26', 'C-27',
                'C-35', 'C-38', 'CT-39', 'C-40', 'C-130', 'C-135', 'C-141', 'ATT', 'CSA', 'NSA', 'GRA', 'CRAF'
            ] 
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_cargo.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == soln_list[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(soln_list[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
380,a3_1_afbs,3,skill,1,"<div id=""question_196458395_question_text"" class=""question_text user_content enhanced"">
          
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br></strong></p>
<p><span>You have been provided with a list called&nbsp;</span><code>list_of_bases</code><span>. Write a program that prints a single, specified base from the list. Your program shall take a number via user input used to identify which base to print. For example, if the user types a 3, you should print out the third item.</span></p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)</li>
</ul>
      </div>
","from cs110 import autograder
import random, math

soln_list = ['Travis', 'Eglin', 'Offutt', 'Minot', 'Luke', 'Malmstrom', 'Ellsworth', 'Patrick', 'Moody', 'Barksdale',
             'Maxwell', 'Mountain Home', 'Keesler', 'Lackland', 'Kelly', 'Andrews', 'Tinker', 'Peterson', 'Buckley',
             'Hill', 'Dyess', 'Wright-Patterson', 'Nellis']
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_afbs.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == soln_list[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(soln_list[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
381,a2_6_lowest_spec_def,3,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset containing information about various types of Pokemon. Here is an example entry from the file:</p>
<pre>25, Pikachu, Electric, 35, 55, 40, 50, 50, 90, 1, FALSE</pre>
<p>&nbsp;</p>
<p>Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table border=""3"">
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>ID</strong></td>
<td><strong>Name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Hit Points</strong></td>
<td><strong>Attack</strong></td>
<td><strong>Defense</strong></td>
<td><strong>Special Attack</strong></td>
<td><strong>Special Defense</strong></td>
<td><strong>Speed</strong></td>
<td><strong>Generation</strong></td>
<td><strong>Legendary</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td>25</td>
<td>Pikachu</td>
<td>Electric</td>
<td>35</td>
<td>55</td>
<td>40</td>
<td>50</td>
<td>50</td>
<td>90</td>
<td>1</td>
<td>False</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a program that asks the user for:</p>
<ul>
<li>a Pokemon Type (e.g., ""Electric"").&nbsp;</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then analyze the file and print:</p>
<ul>
<li>The value of lowest Special Defense from a Pokemon with the matching type.</li>
<li>The name of the Pokemon of the matching type with the lowest value of Special Defense. In the event of a tie, print out the name of the FIRST Pokemon that matches.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the Dark Pokemon with the lowest Special Defense is Poochyena (with Special Defense of 30), your program should print out:</p>
<pre>30<br />Poochyena</pre>
<p>&nbsp;</p>
<p>NOTE: The above answer is purely hypothetical. Your answer will be different.</p>
<p>Also, all of the numeric values are positive integers with values less than 999.</p>
</div>","from cs110 import autograder
import random, math

def solution(pokemon_type):
    file = open(""pokemon.csv"", ""r"")
    file_contents = file.read()
    lines = file_contents.split('\n')

    lowest_value = 999
    lowest_name = ""UNKNOWN""

    for line in lines:
        columns = line.split(',')
        p_name  = columns[1]
        p_type  = columns[2]
        p_value = float(columns[7])
        
        if p_type == pokemon_type:
            if p_value < lowest_value:
                lowest_value = p_value
                lowest_name = p_name

    return (lowest_value, lowest_name)


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    list_of_types = [""Poison"", ""Grass"", ""Electric"", ""Fire""]
    random_type = list_of_types[random.randint(0, len(list_of_types)-1)]
    
    output, error = autograder.run_script(""a2_6_lowest_spec_def.py"", [random_type])
    expected_output = solution(random_type)
    
    lines = output.strip().split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Lowest Value Correct"")
        score += 50
    else:
        print(""Lowest Value Incorrect.  Expected:"", expected_output[0])
    
    if len(lines) > 1 and lines[1] == expected_output[1]:
        print(""Name is Correct"")
        score += 50
    else:
        print(""Name is Incorrect.  Expected:"", expected_output[1])
    
    return score


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
382,a2_6_lowest_spec_attack,3,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset containing information about various types of Pokemon. Here is an example entry from the file:</p>
<pre>25, Pikachu, Electric, 35, 55, 40, 50, 50, 90, 1, FALSE</pre>
<p>&nbsp;</p>
<p>Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>ID</strong></td>
<td><strong>Name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Hit Points</strong></td>
<td><strong>Attack</strong></td>
<td><strong>Defense</strong></td>
<td><strong>Special Attack</strong></td>
<td><strong>Special Defense</strong></td>
<td><strong>Speed</strong></td>
<td><strong>Generation</strong></td>
<td><strong>Legendary</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td>25</td>
<td>Pikachu</td>
<td>Electric</td>
<td>35</td>
<td>55</td>
<td>40</td>
<td>50</td>
<td>50</td>
<td>90</td>
<td>1</td>
<td>False</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a program that asks the user for:</p>
<ul>
<li>a Pokemon Type (e.g., ""Electric"").&nbsp;</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then analyze the file and print:</p>
<ul>
<li>The value of lowest Special Attack from a Pokemon with the matching type</li>
<li>The name of the Pokemon with the lowest value of Special Attack. In the event of a tie, print out the name of the FIRST Pokemon that matches.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the Dark Pokemon with the lowest Special Attack is Scrafty (with Special Attack of 115.0), your program should print out:</p>
<pre>115.0<br />Scrafty</pre>
<p>&nbsp;</p>
<p>NOTE: The above answer is purely hypothetical. Your answer will be different.</p>
</div>
","from cs110 import autograder
import random, math

def solution(pokemon_type):
    file = open(""pokemon.csv"", ""r"")
    file_contents = file.read()
    lines = file_contents.split('\n')

    lowest_value = 999
    lowest_name = ""UNKNOWN""

    for line in lines:
        columns = line.split(',')
        p_name  = columns[1]
        p_type  = columns[2]
        p_value = float(columns[6])
        
        if p_type == pokemon_type:
            if p_value < lowest_value:
                lowest_value = p_value
                lowest_name = p_name

    return (lowest_value, lowest_name)


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    list_of_types = [""Poison"", ""Grass"", ""Electric"", ""Fire""]
    random_type = list_of_types[random.randint(0, len(list_of_types)-1)]
    
    output, error = autograder.run_script(""a2_6_lowest_spec_attack.py"", [random_type])
    expected_output = solution(random_type)
    
    lines = output.strip().split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Lowest Value Correct"")
        score += 50
    else:
        print(""Lowest Value Incorrect.  Expected:"", expected_output[0])
    
    if len(lines) > 1 and lines[1] == expected_output[1]:
        print(""Name is Correct"")
        score += 50
    else:
        print(""Name is Incorrect.  Expected:"", expected_output[1])
    
    return score


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
383,a2_6_lowest_defense,3,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset containing information about various types of Pokemon. Here is an example entry from the file:</p>
<pre>25, Pikachu, Electric, 35, 55, 40, 50, 50, 90, 1, FALSE</pre>
<p>&nbsp;</p>
<p>Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>ID</strong></td>
<td><strong>Name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Hit Points</strong></td>
<td><strong>Attack</strong></td>
<td><strong>Defense</strong></td>
<td><strong>Special Attack</strong></td>
<td><strong>Special Defense</strong></td>
<td><strong>Speed</strong></td>
<td><strong>Generation</strong></td>
<td><strong>Legendary</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td>25</td>
<td>Pikachu</td>
<td>Electric</td>
<td>35</td>
<td>55</td>
<td>40</td>
<td>50</td>
<td>50</td>
<td>90</td>
<td>1</td>
<td>False</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a program that asks the user for:</p>
<ul>
<li>a Pokemon Type (e.g., ""Electric"")</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then analyze the file and print:</p>
<ul>
<li>The lowest defensive rating from a Pokemon with the matching type</li>
<li>The name of the Pokemon with the lowest defensive rating. In the event of a tie, print out the name of the FIRST Pokemon with the lowest defensive value.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the Poison Pokemon with the lowest defense rating is Zubat (with an defensive of 35.0), your program should print out:</p>
<pre>35.0<br />Zubat</pre>
<p>&nbsp;</p>
<p>NOTE: The above answer is purely hypothetical. Your answer will be different.</p>
</div>
","from cs110 import autograder
import random, math

def solution(pokemon_type):
    file = open(""pokemon.csv"", ""r"")
    file_contents = file.read()
    lines = file_contents.split('\n')

    lowest_value = 999
    lowest_name = ""UNKNOWN""

    for line in lines:
        columns = line.split(',')
        p_name  = columns[1]
        p_type  = columns[2]
        p_value = float(columns[5])
        
        if p_type == pokemon_type:
            if p_value < lowest_value:
                lowest_value = p_value
                lowest_name = p_name

    return (lowest_value, lowest_name)


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    list_of_types = [""Poison"", ""Grass"", ""Electric"", ""Fire""]
    random_type = list_of_types[random.randint(0, len(list_of_types)-1)]
    
    output, error = autograder.run_script(""a2_6_lowest_defense.py"", [random_type])
    expected_output = solution(random_type)
    
    lines = output.strip().split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Lowest Value Correct"")
        score += 50
    else:
        print(""Lowest Value Incorrect.  Expected:"", expected_output[0])
    
    if len(lines) > 1 and lines[1] == expected_output[1]:
        print(""Name is Correct"")
        score += 50
    else:
        print(""Name is Incorrect.  Expected:"", expected_output[1])
    
    return score


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,
384,a2_6_highest_hp,3,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset containing information about various types of Pokemon. Here is an example entry from the file:</p>
<pre>25, Pikachu, Electric, 35, 55, 40, 50, 50, 90, 1, FALSE</pre>
<p>&nbsp;</p>
<p>Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>ID</strong></td>
<td><strong>Name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Hit Points</strong></td>
<td><strong>Attack</strong></td>
<td><strong>Defense</strong></td>
<td><strong>Special Attack</strong></td>
<td><strong>Special Defense</strong></td>
<td><strong>Speed</strong></td>
<td><strong>Generation</strong></td>
<td><strong>Legendary</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td>25</td>
<td>Pikachu</td>
<td>Electric</td>
<td>35</td>
<td>55</td>
<td>40</td>
<td>50</td>
<td>50</td>
<td>90</td>
<td>1</td>
<td>False</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a program that asks the user for:</p>
<ul>
<li>a Pokemon Type (e.g., ""Electric"").&nbsp;</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then analyze the file and print:</p>
<ul>
<li>The highest Hit Points from a Pokemon with the matching type</li>
<li>The name of the Pokemon with the highest value of Hit Points. In the event of a tie, print out the name of the FIRST Pokemon that matches.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the Ice Pokemon with the highest Hit Points is Froslass (with Hit Points of 70.0), your program should print out:</p>
<pre>70.0<br />Frosless</pre>
<p>&nbsp;</p>
<p>NOTE: The above answer is purely hypothetical. Your answer will be different.</p>
</div>
","from cs110 import autograder
import random, math

def solution(pokemon_type):
    file = open(""pokemon.csv"", ""r"")
    file_contents = file.read()
    lines = file_contents.split('\n')

    highest_value = -999
    highest_name = ""UNKNOWN""

    for line in lines:
        columns = line.split(',')
        p_name  = columns[1]
        p_type  = columns[2]
        p_value = float(columns[3])
        
        if p_type == pokemon_type:
            if p_value > highest_value:
                highest_value = p_value
                highest_name = p_name

    return (highest_value, highest_name)


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    list_of_types = [""Poison"", ""Grass"", ""Electric"", ""Fire""]
    random_type = list_of_types[random.randint(0, len(list_of_types)-1)]
    
    output, error = autograder.run_script(""a2_6_highest_hp.py"", [random_type])
    expected_output = solution(random_type)
    
    lines = output.strip().split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Highest Value Correct"")
        score += 50
    else:
        print(""Highest Value Incorrect.  Expected:"", expected_output[0])
    
    if len(lines) > 1 and lines[1] == expected_output[1]:
        print(""Name is Correct"")
        score += 50
    else:
        print(""Name is Incorrect.  Expected:"", expected_output[1])
    
    return score


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,
385,a2_6_fastest,3,lab,1,"<div>

<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset containing information about various types of Pokemon. Here is an example entry from the file:</p>
<pre>25, Pikachu, Electric, 35, 55, 40, 50, 50, 90, 1, FALSE</pre>
<p>&nbsp;</p>
<p>Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>ID</strong></td>
<td><strong>Name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Hit Points</strong></td>
<td><strong>Attack</strong></td>
<td><strong>Defense</strong></td>
<td><strong>Special Attack</strong></td>
<td><strong>Special Defense</strong></td>
<td><strong>Speed</strong></td>
<td><strong>Generation</strong></td>
<td><strong>Legendary</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td>25</td>
<td>Pikachu</td>
<td>Electric</td>
<td>35</td>
<td>55</td>
<td>40</td>
<td>50</td>
<td>50</td>
<td>90</td>
<td>1</td>
<td>False</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a program that asks the user for:</p>
<ul>
<li>a Pokemon Type (e.g., ""Electric"").&nbsp;</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then analyze the file and print:</p>
<ul>
<li>The highest speed from a Pokemon with the matching type</li>
<li>The name of the Pokemon with the fastest speed. In the event of a tie, print out the name of the FIRST Pokemon that matches.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the fastest Bug Pokemon is Accelgor (with a speed of 145.0), your program should print out:</p>
<pre>145.0<br />Accelgor</pre>
<p>&nbsp;</p>
<p>NOTE: The above answer is purely hypothetical. Your answer will be different.</p>
</div>
","from cs110 import autograder
import random, math

def solution(pokemon_type):
    file = open(""pokemon.csv"", ""r"")
    file_contents = file.read()
    lines = file_contents.split('\n')

    fastest_value = 0
    fastest_name = ""UNKNOWN""

    for line in lines:
        columns = line.split(',')
        p_name  = columns[1]
        p_type  = columns[2]
        p_value = float(columns[8])
        
        if p_type == pokemon_type:
            if p_value > fastest_value:
                fastest_value = p_value
                fastest_name = p_name

    return (fastest_value, fastest_name)


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    list_of_types = [""Poison"", ""Grass"", ""Electric"", ""Fire""]
    random_type = list_of_types[random.randint(0, len(list_of_types)-1)]
    
    output, error = autograder.run_script(""a2_6_fastest.py"", [random_type])
    expected_output = solution(random_type)
    
    lines = output.strip().split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Fastest Value Correct"")
        score += 50
    else:
        print(""Fastest Value Incorrect.  Expected:"", expected_output[0])
    
    if len(lines) > 1 and lines[1] == expected_output[1]:
        print(""Name is Correct"")
        score += 50
    else:
        print(""Name is Incorrect.  Expected:"", expected_output[1])
    
    return score


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,
386,a2_6_attack,3,lab,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset containing information about various types of Pokemon. Here is an example entry from the file:</p>
<pre>25, Pikachu, Electric, 35, 55, 40, 50, 50, 90, 1, FALSE</pre>
<p>&nbsp;</p>
<p>Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>ID</strong></td>
<td><strong>Name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Hit Points</strong></td>
<td><strong>Attack</strong></td>
<td><strong>Defense</strong></td>
<td><strong>Special Attack</strong></td>
<td><strong>Special Defense</strong></td>
<td><strong>Speed</strong></td>
<td><strong>Generation</strong></td>
<td><strong>Legendary</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td>25</td>
<td>Pikachu</td>
<td>Electric</td>
<td>35</td>
<td>55</td>
<td>40</td>
<td>50</td>
<td>50</td>
<td>90</td>
<td>1</td>
<td>False</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a program that asks the user for:</p>
<ul>
<li>a Pokemon Type (e.g., ""Electric"").&nbsp;</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then analyze the file and print:</p>
<ul>
<li>The highest attack rating from a Pokemon with the matching type</li>
<li>The name of the Pokemon with the highest attack rating. In the event of a tie, print out the name of the FIRST Pokemon with the highest attack value.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the Electric Pokemon with the highest attack rating is Raichu (with an attack of 90.0), your program should print out:</p>
<pre>90.0<br />Raichu</pre>
<p>&nbsp;</p>
<p>NOTE: The above answer is purely hypothetical. Your answer will be different.</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def solution(pokemon_type):
    file = open(""pokemon.csv"", ""r"")
    file_contents = file.read()
    lines = file_contents.split('\n')

    highest_value = -999
    highest_name = ""UNKNOWN""

    for line in lines:
        columns = line.split(',')
        p_name  = columns[1]
        p_type  = columns[2]
        p_value = float(columns[4])
        
        if p_type == pokemon_type:
            if p_value > highest_value:
                highest_value = p_value
                highest_name = p_name

    return (highest_value, highest_name)


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    list_of_types = [""Poison"", ""Grass"", ""Electric"", ""Fire""]
    random_type = list_of_types[random.randint(0, len(list_of_types)-1)]
    
    output, error = autograder.run_script(""a2_6_attack.py"", [random_type])
    expected_output = solution(random_type)
    
    lines = output.strip().split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Highest Value Correct"")
        score += 50
    else:
        print(""Highest Value Incorrect.  Expected:"", expected_output[0])
    
    if len(lines) > 1 and lines[1] == expected_output[1]:
        print(""Name is Correct"")
        score += 50
    else:
        print(""Name is Incorrect.  Expected:"", expected_output[1])
    
    return score


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
387,a2_5_virus,3,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You are writing a program that will help you decide if there are too many people at a restaurant for you to dine safely. Your program will ask for the number of people in the restaurant. It will then ask for the distance between yourself and each of the people (in feet, which do not have to be whole numbers). Your program will keep track of how many people are within 6 feet of you (inclusive). Your program will then print one of the following statements:</p>
<table border=""1"">
<tbody>
<tr>
<td><strong># of People within 6 Feet</strong></td>
<td><strong>0</strong></td>
<td><strong>1-2</strong></td>
<td><strong>&gt;2</strong></td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>All Clear</td>
<td>Warning</td>
<td>Find Another Place</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>INPUT</strong></td>
<td>3<br />5.7<br />10.2<br />12.4</td>
<td>2<br />7.0<br />15.1</td>
</tr>
<tr>
<td><strong>OUTPUT</strong></td>
<td>Warning</td>
<td>All Clear</td>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random, math

def run_test(num_violating, num_people):    
    inputs = [num_people]
    
    for i in range(num_people):
        if i < num_violating:
            if (i + 1 == num_violating):
                inputs.append(6)
            else:
                inputs.append(round(random.uniform(0, 6), 1))
        else:
            inputs.append(round(random.uniform(7, 20), 1))

    # Generates Expected Answer
    if num_violating == 0:
        answer = ""All Clear""
    elif num_violating <= 2:
        answer = ""Warning""
    else:
        answer = ""Find Another Place""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_5_virus.py"", inputs)
    
    print(""Testing when"", num_violating, ""out of"", num_people, ""are violating . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 2))):
        num_passed += 1
    
    if (run_test(2, random.randint(3, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
388,a2_5_traffic_lights,3,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>The City Manager is having a traffic problem and asked you are to write a program that will determine whether or not to activate a newly installed alternate traffic light schedule to help alleviate traffic throughout the city during peak traffic hours. Your program will ask for the number of traffic ""time periods"" to analyze. It will then ask for the traffic throughput (in average number of cars per minute, which does not have to be a whole number) for each ""time period"". Your program will keep track of how many ""time periods"" are considered heavy traffic, as defined as 15 cars per minutes or more (inclusive). Your program will then print one of the following statements:</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong># of ""time periods"" of heavy traffic</strong></td>
<td><strong>0</strong></td>
<td><strong>1-2</strong></td>
<td><strong>&gt;2</strong></td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Regular Schedule</td>
<td>Prepare Activation</td>
<td>Activate New Schedule</td>
</tr>
</tbody>
</table>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>INPUT</strong></td>
<td>
<p>3</p>
<p>12.8</p>
<p>15.0</p>
<p>6.7</p>
</td>
<td>
<p>3</p>
<p>17.3</p>
<p>15.1</p>
<p>19.2</p>
</td>
</tr>
<tr>
<td><strong>OUTPUT</strong></td>
<td>Prepare Activation</td>
<td>Activate New Schedule</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

def run_test(num_over, traffic):    
    inputs = [traffic]
    
    for i in range(traffic):
        if i < num_over:
            if (i + 1 == num_over):
                inputs.append(15)
            else:
                inputs.append(round(random.uniform(15, 30), 1))
        else:
            inputs.append(round(random.uniform(1, 15), 1))

    # Generates Expected Answer
    if num_over == 0:
        answer = ""Regular Schedule""
    elif num_over <= 2:
        answer = ""Prepare Activation""
    else:
        answer = ""Activate New Schedule""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_5_traffic_lights.py"", inputs)
    
    print(""Testing when"", num_over, ""out of"", traffic, ""\""time periods\"" are experiencing heavy traffic . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 2))):
        num_passed += 1
    
    if (run_test(2, random.randint(3, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
389,a2_5_network_traffic,3,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>The 10th Communications Squadron (10 CS) recently detected a higher volume of network traffic on the base network. The 10 CS Director of Operations asked you are to write a program that will determine whether or not to activate an additional Network Load Balancer (NLB) to improve the network performance during these peak loads. Your program will ask for the number of network traffic ""snapshots"" to analyze. It will then ask for the network load (in Gigabits per second (Gbps), which does not have to be a whole number) for each ""snapshot"". Your program will keep track of how many ""snapshots"" are designated as high volume network traffic, defined as loads greater than 512 Gbps. Your program will then print one of the following statements:</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong># of ""snapshots"" with high network traffic volume</strong></td>
<td><strong>0</strong></td>
<td><strong>1-2</strong></td>
<td><strong>&gt;2</strong></td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Ops Normal</td>
<td>Initialize NLB</td>
<td>Activate NLB</td>
</tr>
</tbody>
</table>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>INPUT</strong></td>
<td>
<p>3</p>
<p>512.0</p>
<p>738.5</p>
<p>199.6</p>
</td>
<td>
<p>3</p>
<p>498.6</p>
<p>372.9</p>
<p>512.0</p>
</td>
</tr>
<tr>
<td><strong>OUTPUT</strong></td>
<td>Initialize NLB</td>
<td>Ops Normal</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

def run_test(num_over, traffic):    
    inputs = [traffic]
    
    for i in range(traffic):
        if i < num_over:
            if (i + 1 == num_over):
                inputs.append(512.1)
            else:
                inputs.append(round(random.uniform(512, 1024), 1))
        else:
            inputs.append(round(random.uniform(256, 512), 1))

    # Generates Expected Answer
    if num_over == 0:
        answer = ""Ops Normal""
    elif num_over <= 2:
        answer = ""Initialize NLB""
    else:
        answer = ""Activate NLB""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_5_network_traffic.py"", inputs)
    
    print(""Testing when"", num_over, ""out of"", traffic, ""\""snaphots\"" have high volume of network traffic . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 2))):
        num_passed += 1
    
    if (run_test(2, random.randint(3, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
390,a2_5_grades,3,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You are writing a program that will help your instructors analyze student performance on an exam. Your program will ask for the number of students in the class. It will then ask for the grade of each student (this grade does not have to be a whole number). Your program will keep track of how many students received less than 70 on an assignment. Your program will then print one of the following statements.</p>
<p>&nbsp;</p>
<table border=""1"">
<tbody>
<tr>
<td><strong># of scores below 70</strong></td>
<td><strong>0</strong></td>
<td><strong>1-2</strong></td>
<td><strong>&gt;2</strong></td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Excellent</td>
<td>Satisfactory</td>
<td>Unsatisfactory</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>INPUT</strong></td>
<td>
<p>4<br />75.6<br />80.2<br />95.5<br />71.0</p>
</td>
<td>
<p>3<br />68.2<br />72.9<br />95.4</p>
</td>
<td>
<p>3<br />67.0<br />65.5<br />68.3</p>
</td>
</tr>
<tr>
<td><strong>OUTPUT</strong></td>
<td>Excellent</td>
<td>Satisfactory</td>
<td>Unsatisfactory</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def run_test(num_failures, num_papers):    
    inputs = [num_papers]
    
    for i in range(num_papers):
        if i < num_failures:
            inputs.append(round(random.uniform(0, 70), 1))
        else:
            if (i == num_failures):
                inputs.append(70)
            else:
                inputs.append(round(random.uniform(70, 100), 1))

    # Generates Expected Answer
    if num_failures == 0:
        answer = ""Excellent""
    elif num_failures >= 1 and num_failures <= 2:
        answer = ""Satisfactory""
    else:
        answer = ""Unsatisfactory""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_5_grades.py"", inputs)
    
    print(""Testing when"", num_failures, ""out of"", num_papers, ""failed . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 2))):
        num_passed += 1
    
    if (run_test(2, random.randint(3, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
391,a2_5_gameday,3,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>The Academy Athletic Director asked you are to write a program that will determine whether or not a football game in progress should be delayed based on current weather conditions. Your program will ask for the number of lightning strikes occurred in the immediate area in the past thirty minutes. It will then ask for the distance from Falcon Stadium to each lightning strike (in miles, which do not have to be whole numbers). Your program will keep track of how many lightning strikes are within 15 miles of the stadium (inclusive). Your program will then print one of the following statements:</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong># of lightning strikes in immediate area</strong></td>
<td><strong>0</strong></td>
<td><strong>1-3</strong></td>
<td><strong>&gt;3</strong></td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>All Clear</td>
<td>Weather Warning</td>
<td>Game Delay</td>
</tr>
</tbody>
</table>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>INPUT</strong></td>
<td>
<p>4</p>
<p>15.0</p>
<p>13.2</p>
<p>6.5</p>
<p>9.8</p>
</td>
<td>
<p>3</p>
<p>17.8</p>
<p>15.1</p>
<p>19.0</p>
<p>&nbsp;</p>
</td>
</tr>
<tr>
<td><strong>OUTPUT</strong></td>
<td>Game Delay</td>
<td>All Clear</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, math

def run_test(num_close, num_strikes):    
    inputs = [num_strikes]
    
    for i in range(num_strikes):
        if i < num_close:
            if (i + 1 == num_close):
                inputs.append(15)
            else:
                inputs.append(round(random.uniform(0, 15), 1))
        else:
            inputs.append(round(random.uniform(15, 50), 1))

    # Generates Expected Answer
    if num_close == 0:
        answer = ""All Clear""
    elif num_close <= 2:
        answer = ""Weather Warning""
    else:
        answer = ""Game Delay""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_5_gameday.py"", inputs)
    
    print(""Testing when"", num_close, ""out of"", num_strikes, ""\""strikes\"" are are close . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(2, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 2))):
        num_passed += 1
    
    if (run_test(2, random.randint(4, 6))):
        num_passed += 1
    
    if (run_test(4, random.randint(4, 6))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
392,a2_5_combat,3,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You are writing a program that will determine whether or not a fighter pilot will need to make an evasive action when enemy aircraft are near. Your program will ask for the number of enemy planes in the area. It will then ask for the distance between the pilot and each of the enemy planes (in miles, which do not have to be whole numbers). Your program will keep track of how many enemy planes are within 20 miles of the pilot (inclusive). Your program will then print one of the following statements:</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong># of Enemy Planes in Area</strong></td>
<td><strong>0</strong></td>
<td><strong>1-2</strong></td>
<td><strong>&gt;2</strong></td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>All Clear</td>
<td>Warning</td>
<td>Evasive Action</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>INPUT</strong></td>
<td>
<p>3</p>
<p>10.5</p>
<p>17.2</p>
<p>23.7</p>
</td>
<td>
<p>3</p>
<p>21.4</p>
<p>34.0</p>
<p>27.9</p>
</td>
</tr>
<tr>
<td><strong>OUTPUT</strong></td>
<td>Warning</td>
<td>All Clear</td>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random, math

def run_test(num_close, num_planes):    
    inputs = [num_planes]
    
    for i in range(num_planes):
        if i < num_close:
            if (i + 1 == num_close):
                inputs.append(20)
            else:
                inputs.append(round(random.uniform(0, 20), 1))
        else:
            inputs.append(round(random.uniform(20, 50), 1))

    # Generates Expected Answer
    if num_close == 0:
        answer = ""All Clear""
    elif num_close <= 2:
        answer = ""Warning""
    else:
        answer = ""Evasive Action""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_5_combat.py"", inputs)
    
    print(""Testing when"", num_close, ""out of"", num_planes, ""are close . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 2))):
        num_passed += 1
    
    if (run_test(2, random.randint(3, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
393,a2_4_slash,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>You have been provided with a Python program that already contains code to get the following two items from the
        user:</p>
    <ul>
        <li><span style=""color: #3598db;""><strong>the_string</strong></span>:&nbsp; A slash-separated
            string.<br>Example: johnson81/4081/30no86/cj4081/Craig/Johnson/Depot/London</li>
        <li><span style=""color: #3598db;""><strong>column_to_print</strong></span>:&nbsp; A number indicating which item
            from the string to print.<br>NOTE:&nbsp; 0 indicates the first item in the string, 1 indicates the second,
            etc.</li>
    </ul>
    <p>Add code to this program that:</p>
    <ol>
        <li>Splits <span style=""color: #3598db;"">the_</span><span><span style=""color: #3598db;"">string </span>into
                separate items.</span></li>
        <li><span>Prints the number of items that result from splitting <span
                    style=""color: #3598db;"">the_string</span>&nbsp;(not the number of characters in the string).</span>
        </li>
        <li>Prints the item indicated by the <span style=""color: #3598db;"">column_to_print&nbsp;</span>value.</li>
    </ol>
    <p><strong>EXAMPLE:</strong></p>
    <p>If the user types:</p>
    <pre>johnson81/4081/30no86/cj4081/Craig/Johnson/Depot/London<br>2</pre>
    <p>Your program should output:</p>
    <pre>8<br>30no86</pre>
    <p><strong>HINT: A slash (forward slash) looks like this: '/'. On most keyboards it is on the same key as the
            question mark, '?'. </strong><strong>If you cannot find it, ask an instructor for help.</strong></p>
</div>","from cs110 import autograder
import random

variant = ""slash""
verbose = False

variants = {
            ""validate"": {""delimiter"": '.'}, 
            ""comma""   : {""delimiter"": ','},
            ""pipe""    : {""delimiter"": '|'}, #
            ""amp""     : {""delimiter"": '&'}, #
            ""caret""   : {""delimiter"": '^'}, #
            ""dollar""  : {""delimiter"": '$'}, #
            ""hash""    : {""delimiter"": '#'}, #
            ""ques""    : {""delimiter"": '?'}, #
            ""semic""   : {""delimiter"": ';'}, #
            ""slash""   : {""delimiter"": '/'}, #
            ""star""    : {""delimiter"": '*'}, #
            ""colon""   : {""delimiter"": ':'}, #
            ""hyphen""  : {""delimiter"": '-'}, #
            ""score""   : {""delimiter"": '_'}, #
           }

delimiter_proper = variants[variant][""delimiter""]

def generate_test_string(delimiter):
    
    random_lists = [
                    [""booker12"",""9012"",""12se74"",""rb9012"",""Rachel"",""Booker"",""Sales"",""Coventry""],
                    [""grey07"",""2070"",""04ap67"",""lg2070"",""Laura"",""Grey"",""Depot"",""London""],
                    [""johnson81"",""4081"",""30no86"",""cj4081"",""Craig"",""Johnson"",""Shipping"",""Westminster""],
                    [""jenkins46"",""9346"",""14ju73"",""mj9346"",""Mary"",""Jenkins"",""Engineering"",""Liverpool""],
                    [""smith79"",""5079"",""09ja61"",""js5079"",""Jamie"",""Smith"",""Testing"",""Manchester""]
                   ]
    
    random_list = random_lists[random.randrange(len(random_lists))]
    random_column = random.randrange(len(random_list))
    test_string = """"
    for field in random_list:
        if test_string != """":
            test_string += delimiter
        test_string += field
    return test_string, random_column

def solution(delimiter, string, column_num):
    
    #print(""SOLUTION:"", string, delimiter, column_num, sep=""\n"")
    columns = string.split(delimiter)
    output = str(len(columns)) + '\n'
    output += columns[column_num] + '\n'
        
    return output

def print_test_results(test_score, actual_output, expected_output):

    if verbose:
        
        if test_score == 100:
            print(""CORRECT: %.1f%%"" % (test_score))
        else:
            print(""INCORRECT: %.1f%%"" % (test_score))
            print(""Expected:"")
            print(expected_output)

    else:

        if test_score == 100:
            print(""CORRECT"")
        else:
            print(""INCORRECT"")
            print(""Expected:"")
            print(expected_output)

def run1test(delimiter):

    # Rubric
    # 1 Runs without errors
    # 1 Prints out the correct item count (regardless of order)
    # 1 Prints out the correct item value (regardless of order)
    # 1 Prints out the items in the correct order (0.5 for each)

    test_score = 0
    test_max = 4
    
    test_string, random_column = generate_test_string(delimiter)
    output, error = autograder.run_script(""a2_4_%s.py"" % (variant), [ test_string, random_column ])
    expected_output = solution(delimiter, test_string, random_column)

    if error == """":
        test_score += 1
    
    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]
    
    expected_lines = expected_output.strip().split('\n')
    expected_count = expected_lines[0]
    expected_item = expected_lines[1]

    if returned_count in expected_lines:
        test_score += 1
    if returned_count == expected_count:
        test_score += 0.5
    
    if returned_item in expected_lines:
        test_score += 1
    if returned_item == expected_item:
        test_score += 0.5

    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)
    
    return test_score

def initial_test():
    global delimiter_used
    
    test_max = 12

    test_score = 1 # For testing against the server

    sensor_string = ""sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end""
    delimiter_column = 1

    detection_failed = False
    output, error   = autograder.run_script(""a2_4_%s.py"" % (variant), [ sensor_string, delimiter_column ])
    
    if error == """":
        test_score += 1
        if verbose: print(""+1 Running without error."")
    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)

    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]

    expected_lines = expected_output.strip().split('\n')
    #expected_count = expected_lines[0]
    #expected_item = expected_lines[1]

    if len(returned_lines) >= 1 and returned_lines[0] != '':
        test_score += 1
        if verbose: print(""+1 At least one line of output."")
    if len(returned_lines) == 2:
        test_score += 1
        if verbose: print(""+1 Exactly two lines of output."")
        
    if returned_count in expected_lines:
        test_score += 1
        if verbose: print(""+1 Count contained in output somewhere."")
    if returned_item in expected_lines:
        test_score += 1
        if verbose: print(""+1 Requested item contained in output somewhere."")

    detection_failed = len(returned_lines) < 2
    
    if verbose:
        print(""Delimiter Detection:"")
        if detection_failed:
            print(""Failed:"", returned_lines)
        else:
            print(""Detected delimiter: "", returned_lines[1])
            print(""Sensor fields: "", returned_lines[0])
    
    if variant in returned_lines:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is correct."")

    delimiter_used = None
    if (not detection_failed) and (returned_lines[1] in variants):
        delimiter_used = variants[returned_lines[1]][""delimiter""]

    if delimiter_used == delimiter_proper:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is proper."")

    if delimiter_used == None:
        delimiter_used = delimiter_proper
        
    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)

    return test_score
    
def test_passed():

    test_weights = [20, 12,4,4]
    test_total = sum(test_weights) - test_weights[0]
    if test_total != test_weights[0]:
        print(""Individual tests do not add to total value.\n"")
        
    score = 0
    test_num = 0
    #------------------------------------------------
    # Test #1: Sense delimiter used
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(test_weights[test_num]/test_total)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = initial_test()
    
    score += (test_score/100) * test_weight
    
    #------------------------------------------------
    # Test #2: Using detected delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    
    test_score = run1test(delimiter_used)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # Test #3: Use correct delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = run1test(delimiter_proper)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # End of Test
    #------------------------------------------------
    
    print(""\nOVERALL SCORE:"")
    return round(score,1)

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':   
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
394,a2_4_semic,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>You have been provided with a Python program that already contains code to get the following two items from the
        user:</p>
    <ul>
        <li><span style=""color: #3598db;""><strong>the_string</strong></span>:&nbsp; A semicolon-separated
            string.<br>Example: johnson81;4081;30no86;cj4081;Craig;Johnson;Depot;London</li>
        <li><span style=""color: #3598db;""><strong>column_to_print</strong></span>:&nbsp; A number indicating which item
            from the string to print.<br>NOTE:&nbsp; 0 indicates the first item in the string, 1 indicates the second,
            etc.</li>
    </ul>
    <p>Add code to this program that:</p>
    <ol>
        <li>Splits <span style=""color: #3598db;"">the_</span><span><span style=""color: #3598db;"">string </span>into
                separate items.</span></li>
        <li><span>Prints the number of items that result from splitting <span
                    style=""color: #3598db;"">the_string</span>&nbsp;(not the number of characters in the string).</span>
        </li>
        <li>Prints the item indicated by the <span style=""color: #3598db;"">column_to_print&nbsp;</span>value.</li>
    </ol>
    <p><strong>EXAMPLE:</strong></p>
    <p>If the user types:</p>
    <pre>johnson81;4081;30no86;cj4081;Craig;Johnson;Depot;London<br>2</pre>
    <p>Your program should output:</p>
    <pre>8<br>30no86</pre>
    <p><strong>HINT: A semicolon looks like this: ';'. On most keyboards it is located to the right of the 'L' key. If
            you cannot find it, ask an instructor for help.</strong></p>
</div>","from cs110 import autograder
import random

variant = ""semic""
verbose = False

variants = {
            ""validate"": {""delimiter"": '.'}, 
            ""comma""   : {""delimiter"": ','},
            ""pipe""    : {""delimiter"": '|'}, #
            ""amp""     : {""delimiter"": '&'}, #
            ""caret""   : {""delimiter"": '^'}, #
            ""dollar""  : {""delimiter"": '$'}, #
            ""hash""    : {""delimiter"": '#'}, #
            ""ques""    : {""delimiter"": '?'}, #
            ""semic""   : {""delimiter"": ';'}, #
            ""slash""   : {""delimiter"": '/'}, #
            ""star""    : {""delimiter"": '*'}, #
            ""colon""   : {""delimiter"": ':'}, #
            ""hyphen""  : {""delimiter"": '-'}, #
            ""score""   : {""delimiter"": '_'}, #
           }

delimiter_proper = variants[variant][""delimiter""]

def generate_test_string(delimiter):
    
    random_lists = [
                    [""booker12"",""9012"",""12se74"",""rb9012"",""Rachel"",""Booker"",""Sales"",""Coventry""],
                    [""grey07"",""2070"",""04ap67"",""lg2070"",""Laura"",""Grey"",""Depot"",""London""],
                    [""johnson81"",""4081"",""30no86"",""cj4081"",""Craig"",""Johnson"",""Shipping"",""Westminster""],
                    [""jenkins46"",""9346"",""14ju73"",""mj9346"",""Mary"",""Jenkins"",""Engineering"",""Liverpool""],
                    [""smith79"",""5079"",""09ja61"",""js5079"",""Jamie"",""Smith"",""Testing"",""Manchester""]
                   ]
    
    random_list = random_lists[random.randrange(len(random_lists))]
    random_column = random.randrange(len(random_list))
    test_string = """"
    for field in random_list:
        if test_string != """":
            test_string += delimiter
        test_string += field
    return test_string, random_column

def solution(delimiter, string, column_num):
    
    #print(""SOLUTION:"", string, delimiter, column_num, sep=""\n"")
    columns = string.split(delimiter)
    output = str(len(columns)) + '\n'
    output += columns[column_num] + '\n'
        
    return output

def print_test_results(test_score, actual_output, expected_output):

    if verbose:
        
        if test_score == 100:
            print(""CORRECT: %.1f%%"" % (test_score))
        else:
            print(""INCORRECT: %.1f%%"" % (test_score))
            print(""Expected:"")
            print(expected_output)

    else:

        if test_score == 100:
            print(""CORRECT"")
        else:
            print(""INCORRECT"")
            print(""Expected:"")
            print(expected_output)

def run1test(delimiter):

    # Rubric
    # 1 Runs without errors
    # 1 Prints out the correct item count (regardless of order)
    # 1 Prints out the correct item value (regardless of order)
    # 1 Prints out the items in the correct order (0.5 for each)

    test_score = 0
    test_max = 4
    
    test_string, random_column = generate_test_string(delimiter)
    output, error = autograder.run_script(""a2_4_%s.py"" % (variant), [ test_string, random_column ])
    expected_output = solution(delimiter, test_string, random_column)

    if error == """":
        test_score += 1
    
    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]
    
    expected_lines = expected_output.strip().split('\n')
    expected_count = expected_lines[0]
    expected_item = expected_lines[1]

    if returned_count in expected_lines:
        test_score += 1
    if returned_count == expected_count:
        test_score += 0.5
    
    if returned_item in expected_lines:
        test_score += 1
    if returned_item == expected_item:
        test_score += 0.5

    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)
    
    return test_score

def initial_test():
    global delimiter_used
    
    test_max = 12

    test_score = 1 # For testing against the server

    sensor_string = ""sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end""
    delimiter_column = 1

    detection_failed = False
    output, error   = autograder.run_script(""a2_4_%s.py"" % (variant), [ sensor_string, delimiter_column ])
    
    if error == """":
        test_score += 1
        if verbose: print(""+1 Running without error."")
    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)

    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]

    expected_lines = expected_output.strip().split('\n')
    #expected_count = expected_lines[0]
    #expected_item = expected_lines[1]

    if len(returned_lines) >= 1 and returned_lines[0] != '':
        test_score += 1
        if verbose: print(""+1 At least one line of output."")
    if len(returned_lines) == 2:
        test_score += 1
        if verbose: print(""+1 Exactly two lines of output."")
        
    if returned_count in expected_lines:
        test_score += 1
        if verbose: print(""+1 Count contained in output somewhere."")
    if returned_item in expected_lines:
        test_score += 1
        if verbose: print(""+1 Requested item contained in output somewhere."")

    detection_failed = len(returned_lines) < 2
    
    if verbose:
        print(""Delimiter Detection:"")
        if detection_failed:
            print(""Failed:"", returned_lines)
        else:
            print(""Detected delimiter: "", returned_lines[1])
            print(""Sensor fields: "", returned_lines[0])
    
    if variant in returned_lines:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is correct."")

    delimiter_used = None
    if (not detection_failed) and (returned_lines[1] in variants):
        delimiter_used = variants[returned_lines[1]][""delimiter""]

    if delimiter_used == delimiter_proper:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is proper."")

    if delimiter_used == None:
        delimiter_used = delimiter_proper
        
    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)

    return test_score
    
def test_passed():

    test_weights = [20, 12,4,4]
    test_total = sum(test_weights) - test_weights[0]
    if test_total != test_weights[0]:
        print(""Individual tests do not add to total value.\n"")
        
    score = 0
    test_num = 0
    #------------------------------------------------
    # Test #1: Sense delimiter used
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(test_weights[test_num]/test_total)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = initial_test()
    
    score += (test_score/100) * test_weight
    
    #------------------------------------------------
    # Test #2: Using detected delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    
    test_score = run1test(delimiter_used)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # Test #3: Use correct delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = run1test(delimiter_proper)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # End of Test
    #------------------------------------------------
    
    print(""\nOVERALL SCORE:"")
    return round(score,1)

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':   
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
395,a2_4_pipe,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p>You have been provided with a Python program that already contains code to get the following two items from the user:</p>
<ul>
<li><span style=""color: #3598db;""><strong>the_string</strong></span>:&nbsp; A pipe-separated string.<br>Example: johnson81|4081|30no86|cj4081|Craig|Johnson|Depot|London</li>
<li><span style=""color: #3598db;""><strong>column_to_print</strong></span>:&nbsp; A number indicating which item from the input string to print<br>NOTE:&nbsp; 0 indicates the first item in the string, 1 indicates the second, etc.</li>
</ul>
<p>Add code to this program that:</p>
<ol>
<li>Splits the<span> <span style=""color: #3598db;"">the_string </span>into separate items.</span></li>
<li><span>Prints the number of items that result from splitting <span style=""color: #3598db;"">the_string</span>&nbsp;(not the number of characters in the string).</span></li>
<li>Prints the item indicated by the <span style=""color: #3598db;"">column_to_print&nbsp;</span>value.</li>
</ol>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types:</p>
<pre>johnson81|4081|30no86|cj4081|Craig|Johnson|Depot|London<br>2</pre>
<p>Your program should output:</p>
<pre>8<br>30no86</pre>
<p>&nbsp;</p>
<p><strong>HINT: A pipe is this: '|'. On most keyboards it is located on the same key as the backslash ('\'). </strong><strong>If you cannot find it, ask an instructor for help.</strong></p>
</div>","from cs110 import autograder
import random

variant = ""pipe""
verbose = False

variants = {
            ""validate"": {""delimiter"": '.'}, 
            ""comma""   : {""delimiter"": ','},
            ""pipe""    : {""delimiter"": '|'}, #
            ""amp""     : {""delimiter"": '&'}, #
            ""caret""   : {""delimiter"": '^'}, #
            ""dollar""  : {""delimiter"": '$'}, #
            ""hash""    : {""delimiter"": '#'}, #
            ""ques""    : {""delimiter"": '?'}, #
            ""semic""   : {""delimiter"": ';'}, #
            ""slash""   : {""delimiter"": '/'}, #
            ""star""    : {""delimiter"": '*'}, #
            ""colon""   : {""delimiter"": ':'}, #
            ""hyphen""  : {""delimiter"": '-'}, #
            ""score""   : {""delimiter"": '_'}, #
           }

delimiter_proper = variants[variant][""delimiter""]

def generate_test_string(delimiter):
    
    random_lists = [
                    [""booker12"",""9012"",""12se74"",""rb9012"",""Rachel"",""Booker"",""Sales"",""Coventry""],
                    [""grey07"",""2070"",""04ap67"",""lg2070"",""Laura"",""Grey"",""Depot"",""London""],
                    [""johnson81"",""4081"",""30no86"",""cj4081"",""Craig"",""Johnson"",""Shipping"",""Westminster""],
                    [""jenkins46"",""9346"",""14ju73"",""mj9346"",""Mary"",""Jenkins"",""Engineering"",""Liverpool""],
                    [""smith79"",""5079"",""09ja61"",""js5079"",""Jamie"",""Smith"",""Testing"",""Manchester""]
                   ]
    
    random_list = random_lists[random.randrange(len(random_lists))]
    random_column = random.randrange(len(random_list))
    test_string = """"
    for field in random_list:
        if test_string != """":
            test_string += delimiter
        test_string += field
    return test_string, random_column

def solution(delimiter, string, column_num):
    
    #print(""SOLUTION:"", string, delimiter, column_num, sep=""\n"")
    columns = string.split(delimiter)
    output = str(len(columns)) + '\n'
    output += columns[column_num] + '\n'
        
    return output

def print_test_results(test_score, actual_output, expected_output):

    if verbose:
        
        if test_score == 100:
            print(""CORRECT: %.1f%%"" % (test_score))
        else:
            print(""INCORRECT: %.1f%%"" % (test_score))
            print(""Expected:"")
            print(expected_output)

    else:

        if test_score == 100:
            print(""CORRECT"")
        else:
            print(""INCORRECT"")
            print(""Expected:"")
            print(expected_output)

def run1test(delimiter):

    # Rubric
    # 1 Runs without errors
    # 1 Prints out the correct item count (regardless of order)
    # 1 Prints out the correct item value (regardless of order)
    # 1 Prints out the items in the correct order (0.5 for each)

    test_score = 0
    test_max = 4
    
    test_string, random_column = generate_test_string(delimiter)
    output, error = autograder.run_script(""a2_4_%s.py"" % (variant), [ test_string, random_column ])
    expected_output = solution(delimiter, test_string, random_column)

    if error == """":
        test_score += 1
    
    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]
    
    expected_lines = expected_output.strip().split('\n')
    expected_count = expected_lines[0]
    expected_item = expected_lines[1]

    if returned_count in expected_lines:
        test_score += 1
    if returned_count == expected_count:
        test_score += 0.5
    
    if returned_item in expected_lines:
        test_score += 1
    if returned_item == expected_item:
        test_score += 0.5

    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)
    
    return test_score

def initial_test():
    global delimiter_used
    
    test_max = 12

    test_score = 1 # For testing against the server

    sensor_string = ""sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end""
    delimiter_column = 1

    detection_failed = False
    output, error   = autograder.run_script(""a2_4_%s.py"" % (variant), [ sensor_string, delimiter_column ])
    
    if error == """":
        test_score += 1
        if verbose: print(""+1 Running without error."")
    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)

    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]

    expected_lines = expected_output.strip().split('\n')
    #expected_count = expected_lines[0]
    #expected_item = expected_lines[1]

    if len(returned_lines) >= 1 and returned_lines[0] != '':
        test_score += 1
        if verbose: print(""+1 At least one line of output."")
    if len(returned_lines) == 2:
        test_score += 1
        if verbose: print(""+1 Exactly two lines of output."")
        
    if returned_count in expected_lines:
        test_score += 1
        if verbose: print(""+1 Count contained in output somewhere."")
    if returned_item in expected_lines:
        test_score += 1
        if verbose: print(""+1 Requested item contained in output somewhere."")

    detection_failed = len(returned_lines) < 2
    
    if verbose:
        print(""Delimiter Detection:"")
        if detection_failed:
            print(""Failed:"", returned_lines)
        else:
            print(""Detected delimiter: "", returned_lines[1])
            print(""Sensor fields: "", returned_lines[0])
    
    if variant in returned_lines:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is correct."")

    delimiter_used = None
    if (not detection_failed) and (returned_lines[1] in variants):
        delimiter_used = variants[returned_lines[1]][""delimiter""]

    if delimiter_used == delimiter_proper:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is proper."")

    if delimiter_used == None:
        delimiter_used = delimiter_proper
        
    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)

    return test_score
    
def test_passed():

    test_weights = [20, 12,4,4]
    test_total = sum(test_weights) - test_weights[0]
    if test_total != test_weights[0]:
        print(""Individual tests do not add to total value.\n"")
        
    score = 0
    test_num = 0
    #------------------------------------------------
    # Test #1: Sense delimiter used
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(test_weights[test_num]/test_total)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = initial_test()
    
    score += (test_score/100) * test_weight
    
    #------------------------------------------------
    # Test #2: Using detected delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    
    test_score = run1test(delimiter_used)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # Test #3: Use correct delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = run1test(delimiter_proper)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # End of Test
    #------------------------------------------------
    
    print(""\nOVERALL SCORE:"")
    return round(score,1)

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':   
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
396,a2_4_hyphen,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p>You have been provided with a Python program that already contains code to get the following two items from the user:</p>
<ul>
<li><span style=""color: #3598db;""><strong>the_string</strong></span>:&nbsp; A hyphen-separated string.<br>Example: johnson81-4081-30no86-cj4081-Craig-Johnson-Depot-London</li>
</ul>
<ul>
<li><span style=""color: #3598db;""><strong>column_to_print</strong></span>:&nbsp; A number indicating which item from the string to print.<br>NOTE:&nbsp; 0 indicates the first item in the string, 1 indicates the second, etc.</li>
</ul>
<p>Add code to this program that:</p>
<ol>
<li>Splits <span style=""color: #3598db;"">the_</span><span><span style=""color: #3598db;"">string </span>into separate items.</span></li>
<li><span>Prints the number of items that result from splitting <span style=""color: #3598db;"">the_string</span>&nbsp;(not the number of characters in the string).</span></li>
<li>Prints the item indicated by the <span style=""color: #3598db;"">column_to_print&nbsp;</span>value.</li>
</ol>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types:</p>
<pre>johnson81-4081-30no86-cj4081-Craig-Johnson-Depot-London<br>2</pre>
<p>Your program should output:</p>
<pre>8<br>30no86</pre>
<p><strong>HINT: A hyphen (dash) is this: '-'. On most keyboards it is located to the right of the '0' key. </strong><strong>If you cannot find it, ask an instructor for help.</strong></p>
</div>","from cs110 import autograder
import random

variant = ""hyphen""
verbose = False

variants = {
            ""validate"": {""delimiter"": '.'}, 
            ""comma""   : {""delimiter"": ','},
            ""pipe""    : {""delimiter"": '|'}, #
            ""amp""     : {""delimiter"": '&'}, #
            ""caret""   : {""delimiter"": '^'}, #
            ""dollar""  : {""delimiter"": '$'}, #
            ""hash""    : {""delimiter"": '#'}, #
            ""ques""    : {""delimiter"": '?'}, #
            ""semic""   : {""delimiter"": ';'}, #
            ""slash""   : {""delimiter"": '/'}, #
            ""star""    : {""delimiter"": '*'}, #
            ""colon""   : {""delimiter"": ':'}, #
            ""hyphen""  : {""delimiter"": '-'}, #
            ""score""   : {""delimiter"": '_'}, #
           }

delimiter_proper = variants[variant][""delimiter""]

def generate_test_string(delimiter):
    
    random_lists = [
                    [""booker12"",""9012"",""12se74"",""rb9012"",""Rachel"",""Booker"",""Sales"",""Coventry""],
                    [""grey07"",""2070"",""04ap67"",""lg2070"",""Laura"",""Grey"",""Depot"",""London""],
                    [""johnson81"",""4081"",""30no86"",""cj4081"",""Craig"",""Johnson"",""Shipping"",""Westminster""],
                    [""jenkins46"",""9346"",""14ju73"",""mj9346"",""Mary"",""Jenkins"",""Engineering"",""Liverpool""],
                    [""smith79"",""5079"",""09ja61"",""js5079"",""Jamie"",""Smith"",""Testing"",""Manchester""]
                   ]
    
    random_list = random_lists[random.randrange(len(random_lists))]
    random_column = random.randrange(len(random_list))
    test_string = """"
    for field in random_list:
        if test_string != """":
            test_string += delimiter
        test_string += field
    return test_string, random_column

def solution(delimiter, string, column_num):
    
    #print(""SOLUTION:"", string, delimiter, column_num, sep=""\n"")
    columns = string.split(delimiter)
    output = str(len(columns)) + '\n'
    output += columns[column_num] + '\n'
        
    return output

def print_test_results(test_score, actual_output, expected_output):

    if verbose:
        
        if test_score == 100:
            print(""CORRECT: %.1f%%"" % (test_score))
        else:
            print(""INCORRECT: %.1f%%"" % (test_score))
            print(""Expected:"")
            print(expected_output)

    else:

        if test_score == 100:
            print(""CORRECT"")
        else:
            print(""INCORRECT"")
            print(""Expected:"")
            print(expected_output)

def run1test(delimiter):

    # Rubric
    # 1 Runs without errors
    # 1 Prints out the correct item count (regardless of order)
    # 1 Prints out the correct item value (regardless of order)
    # 1 Prints out the items in the correct order (0.5 for each)

    test_score = 0
    test_max = 4
    
    test_string, random_column = generate_test_string(delimiter)
    output, error = autograder.run_script(""a2_4_%s.py"" % (variant), [ test_string, random_column ])
    expected_output = solution(delimiter, test_string, random_column)

    if error == """":
        test_score += 1
    
    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]
    
    expected_lines = expected_output.strip().split('\n')
    expected_count = expected_lines[0]
    expected_item = expected_lines[1]

    if returned_count in expected_lines:
        test_score += 1
    if returned_count == expected_count:
        test_score += 0.5
    
    if returned_item in expected_lines:
        test_score += 1
    if returned_item == expected_item:
        test_score += 0.5

    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)
    
    return test_score

def initial_test():
    global delimiter_used
    
    test_max = 12

    test_score = 1 # For testing against the server

    sensor_string = ""sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end""
    delimiter_column = 1

    detection_failed = False
    output, error   = autograder.run_script(""a2_4_%s.py"" % (variant), [ sensor_string, delimiter_column ])
    
    if error == """":
        test_score += 1
        if verbose: print(""+1 Running without error."")
    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)

    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]

    expected_lines = expected_output.strip().split('\n')
    #expected_count = expected_lines[0]
    #expected_item = expected_lines[1]

    if len(returned_lines) >= 1 and returned_lines[0] != '':
        test_score += 1
        if verbose: print(""+1 At least one line of output."")
    if len(returned_lines) == 2:
        test_score += 1
        if verbose: print(""+1 Exactly two lines of output."")
        
    if returned_count in expected_lines:
        test_score += 1
        if verbose: print(""+1 Count contained in output somewhere."")
    if returned_item in expected_lines:
        test_score += 1
        if verbose: print(""+1 Requested item contained in output somewhere."")

    detection_failed = len(returned_lines) < 2
    
    if verbose:
        print(""Delimiter Detection:"")
        if detection_failed:
            print(""Failed:"", returned_lines)
        else:
            print(""Detected delimiter: "", returned_lines[1])
            print(""Sensor fields: "", returned_lines[0])
    
    if variant in returned_lines:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is correct."")

    delimiter_used = None
    if (not detection_failed) and (returned_lines[1] in variants):
        delimiter_used = variants[returned_lines[1]][""delimiter""]

    if delimiter_used == delimiter_proper:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is proper."")

    if delimiter_used == None:
        delimiter_used = delimiter_proper
        
    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)

    return test_score
    
def test_passed():

    test_weights = [20, 12,4,4]
    test_total = sum(test_weights) - test_weights[0]
    if test_total != test_weights[0]:
        print(""Individual tests do not add to total value.\n"")
        
    score = 0
    test_num = 0
    #------------------------------------------------
    # Test #1: Sense delimiter used
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(test_weights[test_num]/test_total)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = initial_test()
    
    score += (test_score/100) * test_weight
    
    #------------------------------------------------
    # Test #2: Using detected delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    
    test_score = run1test(delimiter_used)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # Test #3: Use correct delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = run1test(delimiter_proper)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # End of Test
    #------------------------------------------------
    
    print(""\nOVERALL SCORE:"")
    return round(score,1)

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':   
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
397,a2_4_hash,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p>You have been provided with a Python program that already contains code to get the following two items from the user:</p>
<ul>
<li><span style=""color: #3598db;""><strong>the_string</strong></span>:&nbsp; A hashtag-separated string.<br>Example: johnson81#4081#30no86#cj4081#Craig#Johnson#Depot#London</li>
<li><span style=""color: #3598db;""><strong>column_to_print</strong></span>:&nbsp; A number indicating which item from the string to print.<br>NOTE:&nbsp; 0 indicates the first item in the string, 1 indicates the second, etc.</li>
</ul>
<p>Add code to this program that:</p>
<ol>
<li>Splits <span style=""color: #3598db;"">the_</span><span><span style=""color: #3598db;"">string </span>into separate items.</span></li>
<li><span>Prints the number of items that result from splitting <span style=""color: #3598db;"">the_string</span>&nbsp;(not the number of characters in the string).</span></li>
<li>Prints the item indicated by the <span style=""color: #3598db;"">column_to_print&nbsp;</span>value.</li>
</ol>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types:</p>
<pre>johnson81#4081#30no86#cj4081#Craig#Johnson#Depot#London<br>2</pre>
<p>Your program should output:</p>
<pre><code>8</code><br><code>30no86</code></pre>
<p><strong>HINT: A hashtag (pound sign) looks like this: '#'. On most keyboards it is on the same key as the '3'. If you cannot find it, ask an instructor for help.</strong><strong></strong></p>
</div>","from cs110 import autograder
import random

variant = ""hash""
verbose = False

variants = {
            ""validate"": {""delimiter"": '.'}, 
            ""comma""   : {""delimiter"": ','},
            ""pipe""    : {""delimiter"": '|'}, #
            ""amp""     : {""delimiter"": '&'}, #
            ""caret""   : {""delimiter"": '^'}, #
            ""dollar""  : {""delimiter"": '$'}, #
            ""hash""    : {""delimiter"": '#'}, #
            ""ques""    : {""delimiter"": '?'}, #
            ""semic""   : {""delimiter"": ';'}, #
            ""slash""   : {""delimiter"": '/'}, #
            ""star""    : {""delimiter"": '*'}, #
            ""colon""   : {""delimiter"": ':'}, #
            ""hyphen""  : {""delimiter"": '-'}, #
            ""score""   : {""delimiter"": '_'}, #
           }

delimiter_proper = variants[variant][""delimiter""]

def generate_test_string(delimiter):
    
    random_lists = [
                    [""booker12"",""9012"",""12se74"",""rb9012"",""Rachel"",""Booker"",""Sales"",""Coventry""],
                    [""grey07"",""2070"",""04ap67"",""lg2070"",""Laura"",""Grey"",""Depot"",""London""],
                    [""johnson81"",""4081"",""30no86"",""cj4081"",""Craig"",""Johnson"",""Shipping"",""Westminster""],
                    [""jenkins46"",""9346"",""14ju73"",""mj9346"",""Mary"",""Jenkins"",""Engineering"",""Liverpool""],
                    [""smith79"",""5079"",""09ja61"",""js5079"",""Jamie"",""Smith"",""Testing"",""Manchester""]
                   ]
    
    random_list = random_lists[random.randrange(len(random_lists))]
    random_column = random.randrange(len(random_list))
    test_string = """"
    for field in random_list:
        if test_string != """":
            test_string += delimiter
        test_string += field
    return test_string, random_column

def solution(delimiter, string, column_num):
    
    #print(""SOLUTION:"", string, delimiter, column_num, sep=""\n"")
    columns = string.split(delimiter)
    output = str(len(columns)) + '\n'
    output += columns[column_num] + '\n'
        
    return output

def print_test_results(test_score, actual_output, expected_output):

    if verbose:
        
        if test_score == 100:
            print(""CORRECT: %.1f%%"" % (test_score))
        else:
            print(""INCORRECT: %.1f%%"" % (test_score))
            print(""Expected:"")
            print(expected_output)

    else:

        if test_score == 100:
            print(""CORRECT"")
        else:
            print(""INCORRECT"")
            print(""Expected:"")
            print(expected_output)

def run1test(delimiter):

    # Rubric
    # 1 Runs without errors
    # 1 Prints out the correct item count (regardless of order)
    # 1 Prints out the correct item value (regardless of order)
    # 1 Prints out the items in the correct order (0.5 for each)

    test_score = 0
    test_max = 4
    
    test_string, random_column = generate_test_string(delimiter)
    output, error = autograder.run_script(""a2_4_%s.py"" % (variant), [ test_string, random_column ])
    expected_output = solution(delimiter, test_string, random_column)

    if error == """":
        test_score += 1
    
    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]
    
    expected_lines = expected_output.strip().split('\n')
    expected_count = expected_lines[0]
    expected_item = expected_lines[1]

    if returned_count in expected_lines:
        test_score += 1
    if returned_count == expected_count:
        test_score += 0.5
    
    if returned_item in expected_lines:
        test_score += 1
    if returned_item == expected_item:
        test_score += 0.5

    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)
    
    return test_score

def initial_test():
    global delimiter_used
    
    test_max = 12

    test_score = 1 # For testing against the server

    sensor_string = ""sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end""
    delimiter_column = 1

    detection_failed = False
    output, error   = autograder.run_script(""a2_4_%s.py"" % (variant), [ sensor_string, delimiter_column ])
    
    if error == """":
        test_score += 1
        if verbose: print(""+1 Running without error."")
    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)

    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]

    expected_lines = expected_output.strip().split('\n')
    #expected_count = expected_lines[0]
    #expected_item = expected_lines[1]

    if len(returned_lines) >= 1 and returned_lines[0] != '':
        test_score += 1
        if verbose: print(""+1 At least one line of output."")
    if len(returned_lines) == 2:
        test_score += 1
        if verbose: print(""+1 Exactly two lines of output."")
        
    if returned_count in expected_lines:
        test_score += 1
        if verbose: print(""+1 Count contained in output somewhere."")
    if returned_item in expected_lines:
        test_score += 1
        if verbose: print(""+1 Requested item contained in output somewhere."")

    detection_failed = len(returned_lines) < 2
    
    if verbose:
        print(""Delimiter Detection:"")
        if detection_failed:
            print(""Failed:"", returned_lines)
        else:
            print(""Detected delimiter: "", returned_lines[1])
            print(""Sensor fields: "", returned_lines[0])
    
    if variant in returned_lines:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is correct."")

    delimiter_used = None
    if (not detection_failed) and (returned_lines[1] in variants):
        delimiter_used = variants[returned_lines[1]][""delimiter""]

    if delimiter_used == delimiter_proper:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is proper."")

    if delimiter_used == None:
        delimiter_used = delimiter_proper
        
    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)

    return test_score
    
def test_passed():

    test_weights = [20, 12,4,4]
    test_total = sum(test_weights) - test_weights[0]
    if test_total != test_weights[0]:
        print(""Individual tests do not add to total value.\n"")
        
    score = 0
    test_num = 0
    #------------------------------------------------
    # Test #1: Sense delimiter used
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(test_weights[test_num]/test_total)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = initial_test()
    
    score += (test_score/100) * test_weight
    
    #------------------------------------------------
    # Test #2: Using detected delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    
    test_score = run1test(delimiter_used)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # Test #3: Use correct delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = run1test(delimiter_proper)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # End of Test
    #------------------------------------------------
    
    print(""\nOVERALL SCORE:"")
    return round(score,1)

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':   
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
398,a2_4_colon,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>You have been provided with a Python program that already contains code to get the following two items from the
        user:</p>
    <ul>
        <li><span style=""color: #3598db;""><strong>the_string</strong></span>:&nbsp; A colon-separated
            string.<br>Example: johnson81:4081:30no86:cj4081:Craig:Johnson:Depot:London</li>
        <li><span style=""color: #3598db;""><strong>column_to_print</strong></span>:&nbsp; A number representing which
            item from the string to print.<br>NOTE:&nbsp; 0 indicates the first item in the string, 1 indicates the
            second, etc.</li>
    </ul>
    <p>Add code to this program that:</p>
    <ol>
        <li>Splits <span style=""color: #3598db;"">the_</span><span><span style=""color: #3598db;"">string </span>into
                separate items.</span></li>
        <li><span>Prints the number of items that result from splitting <span
                    style=""color: #3598db;"">the_string</span>&nbsp;(not the number of characters in the string).</span>
        </li>
        <li>Prints the item indicated by the <span style=""color: #3598db;"">column_to_print&nbsp;</span>value.</li>
    </ol>
    <p><strong>EXAMPLE:</strong></p>
    <p>If the user types:</p>
    <pre>johnson81:4081:30no86:cj4081:Craig:Johnson:Depot:London<br>2</pre>
    <p>Your program should output:</p>
    <pre>8<br>30no86</pre>
    <p><strong>HINT: A colon is this: ':'. On most keyboards it is located to the right of the 'L' key.
        </strong><strong>If you cannot find it, ask an instructor for help.</strong></p>
</div>","from cs110 import autograder
import random

variant = ""colon""
verbose = False

variants = {
            ""validate"": {""delimiter"": '.'}, 
            ""comma""   : {""delimiter"": ','},
            ""pipe""    : {""delimiter"": '|'}, #
            ""amp""     : {""delimiter"": '&'}, #
            ""caret""   : {""delimiter"": '^'}, #
            ""dollar""  : {""delimiter"": '$'}, #
            ""hash""    : {""delimiter"": '#'}, #
            ""ques""    : {""delimiter"": '?'}, #
            ""semic""   : {""delimiter"": ';'}, #
            ""slash""   : {""delimiter"": '/'}, #
            ""star""    : {""delimiter"": '*'}, #
            ""colon""   : {""delimiter"": ':'}, #
            ""hyphen""  : {""delimiter"": '-'}, #
            ""score""   : {""delimiter"": '_'}, #
           }

delimiter_proper = variants[variant][""delimiter""]

def generate_test_string(delimiter):
    
    random_lists = [
                    [""booker12"",""9012"",""12se74"",""rb9012"",""Rachel"",""Booker"",""Sales"",""Coventry""],
                    [""grey07"",""2070"",""04ap67"",""lg2070"",""Laura"",""Grey"",""Depot"",""London""],
                    [""johnson81"",""4081"",""30no86"",""cj4081"",""Craig"",""Johnson"",""Shipping"",""Westminster""],
                    [""jenkins46"",""9346"",""14ju73"",""mj9346"",""Mary"",""Jenkins"",""Engineering"",""Liverpool""],
                    [""smith79"",""5079"",""09ja61"",""js5079"",""Jamie"",""Smith"",""Testing"",""Manchester""]
                   ]
    
    random_list = random_lists[random.randrange(len(random_lists))]
    random_column = random.randrange(len(random_list))
    test_string = """"
    for field in random_list:
        if test_string != """":
            test_string += delimiter
        test_string += field
    return test_string, random_column

def solution(delimiter, string, column_num):
    
    #print(""SOLUTION:"", string, delimiter, column_num, sep=""\n"")
    columns = string.split(delimiter)
    output = str(len(columns)) + '\n'
    output += columns[column_num] + '\n'
        
    return output

def print_test_results(test_score, actual_output, expected_output):

    if verbose:
        
        if test_score == 100:
            print(""CORRECT: %.1f%%"" % (test_score))
        else:
            print(""INCORRECT: %.1f%%"" % (test_score))
            print(""Expected:"")
            print(expected_output)

    else:

        if test_score == 100:
            print(""CORRECT"")
        else:
            print(""INCORRECT"")
            print(""Expected:"")
            print(expected_output)

def run1test(delimiter):

    # Rubric
    # 1 Runs without errors
    # 1 Prints out the correct item count (regardless of order)
    # 1 Prints out the correct item value (regardless of order)
    # 1 Prints out the items in the correct order (0.5 for each)

    test_score = 0
    test_max = 4
    
    test_string, random_column = generate_test_string(delimiter)
    output, error = autograder.run_script(""a2_4_%s.py"" % (variant), [ test_string, random_column ])
    expected_output = solution(delimiter, test_string, random_column)

    if error == """":
        test_score += 1
    
    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]
    
    expected_lines = expected_output.strip().split('\n')
    expected_count = expected_lines[0]
    expected_item = expected_lines[1]

    if returned_count in expected_lines:
        test_score += 1
    if returned_count == expected_count:
        test_score += 0.5
    
    if returned_item in expected_lines:
        test_score += 1
    if returned_item == expected_item:
        test_score += 0.5

    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)
    
    return test_score

def initial_test():
    global delimiter_used
    
    test_max = 12

    test_score = 1 # For testing against the server

    sensor_string = ""sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end""
    delimiter_column = 1

    detection_failed = False
    output, error   = autograder.run_script(""a2_4_%s.py"" % (variant), [ sensor_string, delimiter_column ])
    
    if error == """":
        test_score += 1
        if verbose: print(""+1 Running without error."")
    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)

    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]

    expected_lines = expected_output.strip().split('\n')
    #expected_count = expected_lines[0]
    #expected_item = expected_lines[1]

    if len(returned_lines) >= 1 and returned_lines[0] != '':
        test_score += 1
        if verbose: print(""+1 At least one line of output."")
    if len(returned_lines) == 2:
        test_score += 1
        if verbose: print(""+1 Exactly two lines of output."")
        
    if returned_count in expected_lines:
        test_score += 1
        if verbose: print(""+1 Count contained in output somewhere."")
    if returned_item in expected_lines:
        test_score += 1
        if verbose: print(""+1 Requested item contained in output somewhere."")

    detection_failed = len(returned_lines) < 2
    
    if verbose:
        print(""Delimiter Detection:"")
        if detection_failed:
            print(""Failed:"", returned_lines)
        else:
            print(""Detected delimiter: "", returned_lines[1])
            print(""Sensor fields: "", returned_lines[0])
    
    if variant in returned_lines:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is correct."")

    delimiter_used = None
    if (not detection_failed) and (returned_lines[1] in variants):
        delimiter_used = variants[returned_lines[1]][""delimiter""]

    if delimiter_used == delimiter_proper:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is proper."")

    if delimiter_used == None:
        delimiter_used = delimiter_proper
        
    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)

    return test_score
    
def test_passed():

    test_weights = [20, 12,4,4]
    test_total = sum(test_weights) - test_weights[0]
    if test_total != test_weights[0]:
        print(""Individual tests do not add to total value.\n"")
        
    score = 0
    test_num = 0
    #------------------------------------------------
    # Test #1: Sense delimiter used
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(test_weights[test_num]/test_total)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = initial_test()
    
    score += (test_score/100) * test_weight
    
    #------------------------------------------------
    # Test #2: Using detected delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    
    test_score = run1test(delimiter_used)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # Test #3: Use correct delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = run1test(delimiter_proper)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # End of Test
    #------------------------------------------------
    
    print(""\nOVERALL SCORE:"")
    return round(score,1)

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':   
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
399,a2_3_twenty_one,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p>You have been pro<span style=""color: #000000;"">vided with program that gets a number from the user and stores it in a variable called&nbsp;<strong>starting_number</strong>.&nbsp; &nbsp;</span></p>
<p><span style=""color: #000000;"">Write a program that prints all of the numbers between&nbsp;<strong>starting_number</strong>&nbsp;and&nbsp;<strong>0</strong>&nbsp;(including <strong>0</strong>), counting down by <strong>21</strong> each time.</span></p>
<p>&nbsp;</p>
<p><span style=""color: #000000;"">For example, if the user types <strong>84</strong>, your program should print:</span></p>
<pre><span style=""color: #000000;"">84</span><br><span style=""color: #000000;"">63</span><br><span style=""color: #000000;"">42</span><br><span style=""color: #000000;"">21</span><br><span style=""color: #000000;"">0</span></pre>
<p><span style=""color: #000000;"">Similarly, if the user types&nbsp;<strong>51</strong>, your program should print:</span></p>
<pre><span style=""color: #000000;"">51</span><br><span style=""color: #000000;"">30</span><br>9</pre>
<p>You may assume that the user will only enter positive numbers.</p>
<p><strong>HINT:</strong></p>
<ul>
<li>This problem can be solved using either a<span>&nbsp;</span><strong>for</strong><span>&nbsp;</span>or<span>&nbsp;</span><strong>while</strong><span>&nbsp;</span>loop.</li>
</ul>
</div>","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 21
    return result


def test_passed():    
    score = 0
    random_number = 126 + 21 * random.randint(1, 15)
    
    output, error = autograder.run_script(""a2_3_twenty_one.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    #Exactly correct
    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    #Mostly correct but added an extra value or included one less value: -2 points
    elif output.strip().split('\n') == expected_lines[:-1] or \
         output.strip().split('\n')[:-1] == expected_lines:
        print(""INCORRECT.  Expected:\n""+expected_string)
        score+=86.67
    else:
        print(""INCORRECT.  Expected:\n""+expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
400,a2_3_thirteen,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p>You h<span style=""color: #000000;"">ave been provided with program that gets a number from the user and stores it in a variable called&nbsp;<strong>starting_number</strong>.&nbsp; &nbsp;</span></p>
<p><span style=""color: #000000;"">Write a program that prints all of the numbers between&nbsp;<strong>starting_number</strong>&nbsp;and <strong>0</strong> (including <strong>0</strong>), counting down by <strong>13</strong> each time.</span></p>
<p>&nbsp;</p>
<p><span style=""color: #000000;"">For example, if the user types <strong>45</strong>, your program should print:</span></p>
<pre><span style=""color: #000000;"">45</span><br><span style=""color: #000000;"">32</span><br><span style=""color: #000000;"">19</span><br><span style=""color: #000000;"">6</span></pre>
<p><span style=""color: #000000;"">Similarly, if the user types <strong>39</strong>, your program should print:</span></p>
<pre><span style=""color: #000000;"">39</span><br><span style=""color: #000000;"">26</span><br><span style=""color: #000000;"">13</span><br><span style=""color: #000000;"">0</span></pre>
<p><span style=""color: #000000;"">You may assume that the user will only ente</span>r positive numbers.</p>
<p><strong>HINT:</strong></p>
<ul>
<li>This problem can be solved using either a<span>&nbsp;</span><strong>for</strong><span>&nbsp;</span>or<span>&nbsp;</span><strong>while</strong><span>&nbsp;</span>loop.</li>
</ul>
</div>","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 13
    return result


def test_passed():    
    score = 0
    random_number = 78 + 13 * random.randint(1, 15)
    
    output, error = autograder.run_script(""a2_3_thirteen.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    #Exactly correct
    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    #Mostly correct but added an extra value or included one less value: -2 points
    elif output.strip().split('\n') == expected_lines[:-1] or \
         output.strip().split('\n')[:-1] == expected_lines:
        print(""INCORRECT.  Expected:\n""+expected_string)
        score+=86.67
    else:
        print(""INCORRECT.  Expected:\n""+expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
401,a2_3_seventeen,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p><span style=""color: #000000;"">You have been provided with program that gets a number from the user and stores it in a variable called <strong>starting_number</strong>.&nbsp; &nbsp;</span></p>
<p><span style=""color: #000000;"">Write a program that prints all of the numbers between <strong>starting_number</strong> and <strong>0</strong> (including <strong>0</strong>), counting down by <strong>17</strong> each time.</span></p>
<p>&nbsp;</p>
<p><span style=""color: #000000;"">For example, if the user types <strong>45</strong>, your program should print:</span></p>
<pre><span style=""color: #000000;"">45</span><br><span style=""color: #000000;"">28</span><br><span style=""color: #000000;"">11</span></pre>
<p><span style=""color: #000000;"">Similarly, if the user types <strong>51</strong>, your program should print:</span></p>
<pre><span style=""color: #000000;"">51</span><br><span style=""color: #000000;"">34</span><br><span style=""color: #000000;"">17</span><br><span style=""color: #000000;"">0</span></pre>
<p><span style=""color: #000000;"">You may assume that t</span>he user will only enter positive numbers.</p>
<p><strong>HINT:</strong></p>
<ul>
<li>This problem can be solved using either a <strong>for</strong> or <strong>while</strong> loop.</li>
</ul>
</div>","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 17
    return result


def test_passed():    
    score = 0
    random_number = 102 + 17 * random.randint(1, 20)
    
    output, error = autograder.run_script(""a2_3_seventeen.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    #Exactly correct
    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    #Mostly correct but added an extra value or included one less value: -2 points
    elif output.strip().split('\n') == expected_lines[:-1] or \
         output.strip().split('\n')[:-1] == expected_lines:
        print(""INCORRECT.  Expected:\n""+expected_string)
        score+=86.67
    else:
        print(""INCORRECT.  Expected:\n""+expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
402,a2_3_nineteen,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p><span style=""color: #000000;"">You have been provided with program that gets a number from the user and stores it in a variable called&nbsp;<strong>starting_number</strong>.&nbsp; &nbsp;</span></p>
<p><span style=""color: #000000;"">Write a program that prints all of the numbers between&nbsp;<strong>starting_number</strong>&nbsp;and <strong>0</strong> (including <strong>0</strong>), counting down by <strong>19</strong> each time.</span></p>
<p>&nbsp;</p>
<p>For example, if the user t<span style=""color: #000000;"">ypes <strong>45</strong>, y</span>our program should print:</p>
<pre>45<br>26<br>7</pre>
<p>Similarly, if the user type<span style=""color: #000000;"">s <strong>57</strong>, y</span>our program should print:</p>
<pre>57<br>38<br>19<br>0</pre>
<p>You may assume that the user will only enter positive numbers.</p>
<p><strong>HINT:</strong></p>
<ul>
<li>This problem can be solved using either a<span>&nbsp;</span><strong>for</strong><span>&nbsp;</span>or<span>&nbsp;</span><strong>while</strong><span>&nbsp;</span>loop.</li>
</ul>
</div>","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 19
    return result


def test_passed():    
    score = 0
    random_number = 114 + 19 * random.randint(1, 20)
    
    output, error = autograder.run_script(""a2_3_nineteen.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    #Exactly correct
    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    #Mostly correct but added an extra value or included one less value: -2 points
    elif output.strip().split('\n') == expected_lines[:-1] or \
         output.strip().split('\n')[:-1] == expected_lines:
        print(""INCORRECT.  Expected:\n""+expected_string)
        score+=86.67
    else:
        print(""INCORRECT.  Expected:\n""+expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
403,a2_3_nine,3,skill,1,"<div><strong>PROBLEM STATEMENT: </strong></p>
<p>You have been provided with program that gets a number from the user and stores it in a variable called<span>&nbsp;</span> <span><strong>starting_number</strong></span>.&nbsp; &nbsp;</p>
<p>Write a program that prints all of the numbers between&nbsp;<strong>starting_number</strong>&nbsp;and&nbsp;<strong>0</strong> (including <strong>0</strong>), counting down by <strong>9</strong>&nbsp;each time.</p>
<p>&nbsp;</p>
<p>For example, if the user types<strong> <span>45</span></strong>, your program should print:</p>
<pre>45<br>36<br>27<br>18<br>9<br>0</pre>
<p>Similarly, if the user types <strong>50</strong>, your program should print:</p>
<pre>50<br>41<br>32<br>23<br>14<br>5</pre>
<p>You may assume that the user will only enter positive numbers.</p>
<p><strong>HINT:</strong></p>
<ul>
<li>This problem can be solved using either a<span>&nbsp;</span><strong>for</strong> or<span>&nbsp;</span><strong>while</strong> loop.</li>
</ul>
</div>","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 9
    return result


def test_passed():    
    score = 0
    random_number = 81 + 9 * random.randint(1, 30)
    
    output, error = autograder.run_script(""a2_3_nine.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    #Exactly correct
    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    #Mostly correct but added an extra value or included one less value: -2 points
    elif output.strip().split('\n') == expected_lines[:-1] or \
         output.strip().split('\n')[:-1] == expected_lines:
        print(""INCORRECT.  Expected:\n""+expected_string)
        score+=86.67
    else:
        print(""INCORRECT.  Expected:\n""+expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
404,a2_3_eighteen,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p>You have been provided with program that gets a number from the u<span style=""color: #000000;"">ser and stores it in a variable called&nbsp;<strong>starting_number</strong>.&nbsp; &nbsp;</span></p>
<p><span style=""color: #000000;"">Write a program that prints all of the numbers between&nbsp;<strong>starting_number</strong>&nbsp;and&nbsp;<strong>0</strong>&nbsp;(including <strong>0</strong>), counting down by <strong>18</strong> each time.</span></p>
<p>&nbsp;</p>
<p><span style=""color: #000000;"">For example, if the user types&nbsp;<strong>108</strong>, your program should print:</span></p>
<pre><span style=""color: #000000;"">108</span><br><span style=""color: #000000;"">90</span><br><span style=""color: #000000;"">72</span><br><span style=""color: #000000;"">54</span><br><span style=""color: #000000;"">36</span><br><span style=""color: #000000;"">18<br>0</span></pre>
<p><span style=""color: #000000;"">Similarly, if the user types<strong> 92</strong>, your program should print:</span></p>
<pre><span style=""color: #000000;"">92<br>74</span><br><span style=""color: #000000;"">56<br>38</span><br><span style=""color: #000000;"">20<br>2</span></pre>
<p><span style=""color: #000000;"">You may assume that the user will only enter positive numbers.</span></p>
<p><span style=""color: #000000;""><strong>HINT:</strong></span></p>
<ul>
<li><span style=""color: #000000;"">This problem can be solved using either a&nbsp;<strong>for</strong>&nbsp;or&nbsp;<strong>while</strong>&nbsp;loop.</span></li>
</ul>
</div>","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 18
    return result


def test_passed():    
    score = 0
    random_number = 108 + 18 * random.randint(1, 15)
    
    output, error = autograder.run_script(""a2_3_eighteen.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    #Exactly correct
    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    #Mostly correct but added an extra value or included one less value: -2 points
    elif output.strip().split('\n') == expected_lines[:-1] or \
         output.strip().split('\n')[:-1] == expected_lines:
        print(""INCORRECT.  Expected:\n""+expected_string)
        score+=86.67
    else:
        print(""INCORRECT.  Expected:\n""+expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
405,a2_2_unladen,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>The airspeed velocity of an unladen swallow can be estimated using the following formula:<br /><br /></p>
<p><code>SPEED = 3 * F * A</code></p>
<p>&nbsp;</p>
<p>In this formula:</p>
<ul>
<li><strong>F</strong> is the number of wing flaps per minute (integer)</li>
<li><strong>A</strong> is the distance the wing travels (up and down) per wing flap (floating point number in meters)</li>
</ul>
<p>&nbsp;</p>
<p>Write a function called <strong>speed_of_unladen_swallow</strong> that takes <strong>F</strong> and <strong>A</strong> as parameters (in that order), and <strong>returns</strong> the speed in meters per minute. </p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li>You do NOT need to call this function. Simply define it.</li>
</ul>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import a2_2_unladen

def solution(S, A):
    return 3 * S * A


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'speed_of_unladen_swallow' in dir(a2_2_unladen):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'speed_of_unladen_swallow' in dir(a2_2_unladen) and \
        abs(a2_2_unladen.speed_of_unladen_swallow(15, 0.22) - solution(15, 0.22)) < 0.001:
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
406,a2_2_stride,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You can calculate a person's speed using the following formula:</p>
<p><code>Speed = Stride * SPM * .011</code></p>
<p>&nbsp;</p>
<p>In this formula:</p>
<ul>
<li><strong>Stride</strong> in inches (float)</li>
<li><strong>SPM </strong>is strides per minute (integer)</li>
</ul>
<p>&nbsp;</p>
<p>Write a function called <strong>person_speed</strong> that takes <strong>Stride</strong>&nbsp;and <strong>SPM</strong>&nbsp;as parameters (in that order), and <strong>returns</strong> the speed. </p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li>You do NOT need to call this function. Simply define it</li>
</ul>
</div>
","from cs110 import autograder
import a2_2_stride

def solution(S, SPM):
    return S * SPM * .011


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'person_speed' in dir(a2_2_stride):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'person_speed' in dir(a2_2_stride) and a2_2_stride.person_speed(32, 60) == solution(32, 60):
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
407,a2_2_speed,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You can calculate how fast a vehicle is moving in feet per minute using the following formula:<br /><br /></p>
<p><code>SPEED = RPM * Cir / 12</code></p>
<p>&nbsp;</p>
<p>In this formula:</p>
<ul>
<li><strong>RPM</strong> is the rotations per minute of the wheel (integer)</li>
<li><strong>Cir </strong>is the Circumference of the wheel (floating point number in inches)</li>
</ul>
<p>&nbsp;</p>
<p>Write a function called <strong>speed_fpm</strong> that takes <strong>RPM</strong> and <strong>Cir</strong> as parameters (in that order), and <strong>returns</strong> the speed in feet per minute. </p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li>You do NOT need to call this function. Simply define it.</li>
</ul>
</div>
","from cs110 import autograder
import a2_2_speed

def solution(RPM, Cir):
    return RPM * Cir / 12


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'speed_fpm' in dir(a2_2_speed):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'speed_fpm' in dir(a2_2_speed) and a2_2_speed.speed_fpm(10, 6.6) == solution(10, 6.6):
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
408,a2_2_orbit,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p>The oribt period of a planet can be calculated using the following formula:</p>
<p>&nbsp;</p>
<p style=""text-align: center;""><code>Period = (D * 3.14)/ V</code></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>In this formula:</p>
<ul>
<li><span><strong>D</strong>&nbsp;</span>is the diameter of the orbit path (a floating point number)</li>
<li><span><strong>V</strong>&nbsp;</span>is the velocity of the planet (a floating point number)</li>
</ul>
<p>&nbsp;</p>
<p>Write a function called<span>&nbsp;</span><strong>orbit_period</strong><span>&nbsp;</span>that takes <span><strong>D</strong></span><span>&nbsp;</span>and <strong><span>V</span></strong><span>&nbsp;</span>as parameters (in that order), and<span>&nbsp;</span><span style=""text-decoration: underline;""><strong>returns</strong>&nbsp;</span>the orbit period.&nbsp;&nbsp;</p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li>You do NOT need to call this function.&nbsp; Simply define it.</li>
</ul>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import a2_2_orbit

def solution(D, V):
    return (D*3.14)/V


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'orbit_period' in dir(a2_2_orbit):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'orbit_period' in dir(a2_2_orbit) and a2_2_orbit.orbit_period(15, 0.22) == solution(15, 0.22):
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
409,a2_2_hp,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM </strong><strong>STATEMENT:<br /></strong></p>
<p>You can calculate a car's horsepower by using the following formula:</p>
<p><code>Horsepower = RPM * Torque / 5252</code></p>
<p>&nbsp;</p>
<p>In this formula:</p>
<ul>
<li><strong>RPM </strong>is rotations per minute (integer)</li>
<li><strong>Torque</strong>&nbsp;in foot pounds (floating point number)</li>
</ul>
<p>&nbsp;</p>
<p>Write a function called&nbsp;<strong>horsepower</strong>&nbsp;that takes&nbsp;<strong>RPM</strong>&nbsp;and&nbsp;<strong>Torque</strong>&nbsp;as parameters (in that order), and&nbsp;<strong>returns</strong> the calculated horsepower. </p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li>You do NOT need to call this function. Simply define it</li>
</ul>
</div>
","from cs110 import autograder
import a2_2_hp

def solution(RPM, Torque):
    return RPM*Torque/5252


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'horsepower' in dir(a2_2_hp):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'horsepower' in dir(a2_2_hp) and a2_2_hp.horsepower(4000, 600) == solution(4000, 600):
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
410,a2_1_surface,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a function called calculate_surface, which takes two parameters:</p>
<ul>
<li><strong>radius</strong></li>
<li><strong>Pi</strong></li>
</ul>
<p>Call this function and pass it<strong> 5</strong>&nbsp;for <strong>radius</strong>, and <strong>3.141592653589793 </strong>for <strong>Pi</strong>. Store the result in a variable called&nbsp;<strong>result</strong>. Do not print. Simply call the function and store the returned value in the variable <strong>result</strong>.</p>
</div>
","from cs110 import autograder
from a2_1_surface import *  

def calculate_surface(radius, Pi):
    return 4*Pi*radius**2


def test_passed():
    solution = calculate_surface(5,  3.141592653589793 )
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
    



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
411,a2_1_right_triangle,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p>You have been provided with a function called calculate_hypotenuse, which takes two parameters:</p>
<ul>
<li><span style=""color: #3598db;""><strong>side_1</strong></span></li>
<li><span style=""color: #3598db;""><strong>side_2</strong></span></li>
</ul>
<p>Call this function and pass it&nbsp;<span style=""color: #e03e2d;""><strong>15</strong>&nbsp;</span>for&nbsp;<span style=""color: #3598db;""><strong>side_1</strong></span>, and&nbsp;<span style=""color: #e03e2d;""><strong>6.786</strong></span><sup>&nbsp;</sup>for <strong><span style=""color: #3598db;"">side_2</span></strong>.&nbsp; Store the result in a variable called&nbsp;<span style=""color: #3598db;""><strong>result</strong></span>.&nbsp; Do not print.&nbsp; Simply call the function, and store the returned value in the variable&nbsp;<span style=""color: #3598db;""><strong>result</strong></span>.</p>
</div>","from cs110 import autograder
from a2_1_right_triangle import *  

def calculate_hypotenuse(side_1, side_2):
    return (side_1**2+side_2**2)**.5


def test_passed():
    solution = calculate_hypotenuse(15, 6.786)
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    test_case_result = test_passed()
    print(""Unit Test Returned:"", test_case_result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
412,a2_1_future_value,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a function called calculate_future_value, which takes two parameters:</p>
<ul>
<li><strong>present_value</strong></li>
<li><strong>years</strong></li>
</ul>
<p>Call this function and pass it<strong> 50000</strong>&nbsp;for <strong>present_value</strong>, and&nbsp;<strong>25&nbsp;</strong>for&nbsp;<strong>years</strong>. Store the result in a variable called&nbsp;<strong>result</strong>. Do not print. Simply call the function and store the returned value in the variable&nbsp;<strong>result</strong>.</p>
</div>
","from cs110 import autograder
from a2_1_future_value import *  

def calculate_future_value(present_value, years):
    return present_value * (1 + 0.05/12) ** (years * 12)


def test_passed():
    solution = calculate_future_value(50000, 25)
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    test_case_result = test_passed()
    print(""Unit Test Returned:"", test_case_result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
413,a2_1_equation,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a function called calculate_equation, which takes two parameters:</p>
<ul>
<li><strong>value</strong></li>
<li><strong>C</strong></li>
</ul>
<p>Call this function and pass it <strong>355000</strong> for <strong>value</strong>, and <strong>2.99 * 10</strong><sup><strong>8</strong>&nbsp;</sup>for <strong>C</strong>. Store the result in a variable called <strong>result. </strong>Do not print. Simply call the function, and store the returned value in the variable <strong>result</strong>.</p>
</div>
","from cs110 import autograder
from a2_1_equation import *  

def calculate_equation(value):
    C = (2.99*10**8)
    return value * (1.0 / (1 - (value**2)/(C**2))**0.5)


def test_passed():
    solution = calculate_equation(355000)
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    test_case_result = test_passed()
    print(""Unit Test Returned:"", test_case_result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
414,a2_1_calculate_volume,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a function called calculate_volume, which takes two parameters:</p>
<ul>
<li><strong>radius</strong></li>
<li><strong>Pi</strong></li>
</ul>
<p>Call this function and pass it<strong> 15</strong>&nbsp;for&nbsp;<strong>radius</strong>, and&nbsp;<strong>3.141592653589793&nbsp;</strong>for&nbsp;<strong>Pi</strong>. Store the result in a variable called&nbsp;<strong>result</strong>. Do not print. Simply call the function and store the returned value in the variable&nbsp;<strong>result</strong>.</p>
</div>
","from cs110 import autograder
from a2_1_calculate_volume import *  

def calculate_volume(radius, pi):
    return pi * 4/3 * radius **3


def test_passed():
    solution = calculate_volume(15, 3.141592653589793)
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    test_case_result = test_passed()
    print(""Unit Test Returned:"", test_case_result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
415,a1_6_pilot_quals,3,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>C-130 Pilot qualifications usually depend on a pilot's flight experience in terms of flight hours.</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong>C-130 Pilot Qualification</strong></td>
<td><strong>Flight Hours</strong></td>
</tr>
<tr>
<td>Upgrade Pilot</td>
<td>600</td>
</tr>
<tr>
<td>Aircraft Commander</td>
<td>800</td>
</tr>
<tr>
<td>Formation Lead</td>
<td>1000</td>
</tr>
<tr>
<td>Instructor Pilot</td>
<td>1250</td>
</tr>
<tr>
<td>Evaluator Pilot</td>
<td>1500</td>
</tr>
</tbody>
</table>
<p><br />Write a Python program that asks the user to enter the number of flight hours they currently have (does not need to be a whole number). Then, referencing the table above, print out all qualifications they should have achieved in the aircraft (one per line). If the their experience in the C-130 is more than 600 flight hours, output ""Co-Pilot"".</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width="""">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>1996</td>
<td>1156.7</td>
<td>535.4</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>
<p>Upgrade Pilot<br />Aircraft Commander<br />Formation Lead<br />Instructor Pilot<br />Evaluator Pilot</p>
</td>
<td>
<p>Upgrade Pilot<br />Aircraft Commander<br />Formation Lead</p>
</td>
<td>Co-Pilot</td>
</tr>
</tbody>
</table>
<p>NOTE: The qualifications can be listed in any order, so long as only the ones in range are printed.</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(hours):
    result = """"

    if hours < 600:
        result += ""Co-Pilot\n""

    if hours >= 600:
        result += ""Upgrade Pilot\n""

    if hours >= 800:
        result += ""Aircraft Commander\n""
        
    if hours >= 1000:
        result += ""Formation Lead\n""

    if hours >=1250:
        result += ""Instructor Pilot\n""

    if hours >= 1500:
        result += ""Evaluator Pilot\n""

    
    return result.strip().split('\n')


def run_test(hours):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", hours, ""hours"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_6_pilot_quals.py"", [hours], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(hours)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 600), 1))
    run_test(600)
    run_test(round(random.uniform(600, 799), 1))
    run_test(800)
    run_test(round(random.uniform(800, 999), 1))
    run_test(1000)
    run_test(round(random.uniform(1000, 1249), 1))
    run_test(1250)
    run_test(round(random.uniform(1250, 1499), 1))
    run_test(1500)
    run_test(2750)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
416,a1_6_payload,3,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>The USAF is known for its massive cargo transport capabilities. Below are the names of 5 aircraft, as well as their maximum payload capacity</p>
<p>&nbsp;</p>
<table border=""1"" cellpadding=""1px"">
<tbody>
<tr>
<td width="""">
<p><strong>Cargo Aircraft</strong></p>
</td>
<td width="""">
<p><strong>Maximum Load (inclusive, in Lbs. )</strong></p>
</td>
</tr>
<tr>
<td width="""">
<p>C-5 Galaxy</p>
</td>
<td width="""">
<p>285000</p>
</td>
</tr>
<tr>
<td width="""">
<p>C-17 Globemaster</p>
</td>
<td width="""">
<p>170900</p>
</td>
</tr>
<tr>
<td width="""">
<p>KC-10 Extender</p>
</td>
<td width="""">
<p>169000</p>
</td>
</tr>
<tr>
<td width="""">
<p>C-130 Hercules</p>
</td>
<td width="""">
<p>42000</p>
</td>
</tr>
<tr>
<td width="""">
<p>V-22 Osprey</p>
</td>
<td width="""">
<p>6000</p>
</td>
</tr>
</tbody>
</table>
<p><br />Write a Python program that asks the user to enter the payload weight (in Lbs.) that needs to be moved. Then, referencing the table, print out all of the Aircraft that could potentially carry that payload (one per line). If no aircraft can carry the payload, output ""Too Heavy for Airlift"".</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width="""">
<tbody>
<tr>
<td>&nbsp;</td>
<td>
<p><strong>Example 1</strong></p>
</td>
<td>
<p><strong>Example 2</strong></p>
</td>
<td>
<p><strong>Example 3</strong></p>
</td>
</tr>
<tr>
<td>
<p><strong>Input</strong></p>
</td>
<td>
<p>150000</p>
</td>
<td>
<p>250000</p>
</td>
<td>
<p>300000</p>
</td>
</tr>
<tr>
<td>
<p><strong>Output</strong></p>
</td>
<td>
<p>C-5 Galaxy</p>
<p>C-17 Globemaster</p>
<p>KC-10 Extender</p>
</td>
<td>
<p>C-5 Galaxy</p>
</td>
<td>
<p>Too Heavy for Airlift</p>
</td>
</tr>
</tbody>
</table>
<p>NOTE: The aircraft can be listed in any order, so long as only the ones capable of the lift are printed.</p>
</div>

","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(payload_weight):
    result = """"
    
    if payload_weight <= 6000:
        result += ""V-22 Osprey\n""

    if payload_weight <= 42000:
        result += ""C-130 Hercules\n""
        
    if payload_weight <= 169000:
        result += ""KC-10 Extender\n""

    if payload_weight <= 170900:
        result += ""C-17 Globemaster\n""

    if payload_weight <= 285000:
        result += ""C-5 Galaxy\n""

    if payload_weight > 285000:
        result += ""Too Heavy for Airlift\n""
    
    return result.strip().split('\n')


def run_test(payload_weight):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", payload_weight, ""lbs"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_6_payload.py"", [payload_weight], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(payload_weight)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 5999), 1))
    run_test(6000)
    run_test(round(random.uniform(6001, 41999), 1))
    run_test(42000)
    run_test(round(random.uniform(42001, 168999), 1))
    run_test(169000)
    run_test(round(random.uniform(169001, 170899), 1))
    run_test(170900)
    run_test(round(random.uniform(170901, 284999), 1))
    run_test(285000)
    run_test(300000)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
417,a1_6_missilethreat,3,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>According to intelligence reports, the North Korean military uses at least 5 different classes of Ballistic Missiles. The names of these missiles, as well as their maximum theoretical range, are provided below:</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong>Missile Class</strong></td>
<td><strong>Maximum Range (inclusive, in Kilometers)</strong></td>
</tr>
<tr>
<td>Hwasong-6</td>
<td>500</td>
</tr>
<tr>
<td>KN-11</td>
<td>1200</td>
</tr>
<tr>
<td>Musudan BM-25</td>
<td>4000</td>
</tr>
<tr>
<td>Hwasong-14</td>
<td>8000</td>
</tr>
<tr>
<td>Taepodong-2</td>
<td>12000</td>
</tr>
</tbody>
</table>
<p><br />Write a Python program that asks the user to enter the distance to a potential target (in Kilometers). Then, referencing the table, print out all of the Missile Classes that could potentially reach the target (one per line). If no missiles are in range, output ""Not in range"".</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width="""">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>1800</td>
<td>8000</td>
<td>18000</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Musudan BM-25<br />Hwason-14<br />Taepodong-2</td>
<td>
<p>Hwasong-14<br />Taepodong-2</p>
</td>
<td>Not in range</td>
</tr>
</tbody>
</table>
<p>NOTE: The missiles can be listed in any order, so long as only the ones in range are printed.</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(target_range):
    result = """"
    
    if target_range <= 500:
        result += ""Hwasong-6\n""

    if target_range <= 1200:
        result += ""KN-11\n""
        
    if target_range <= 4000:
        result += ""Musudan BM-25\n""

    if target_range <= 8000:
        result += ""Hwasong-14\n""

    if target_range <= 12000:
        result += ""Taepodong-2\n""

    if target_range > 12000:
        result += ""Not in range\n""
    
    return result.strip().split('\n')


def run_test(target_range):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", target_range, ""kilometers"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_6_missilethreat.py"", [target_range], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(target_range)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 499), 1))
    run_test(500)
    run_test(round(random.uniform(501, 1199), 1))
    run_test(1200)
    run_test(round(random.uniform(1201, 3999), 1))
    run_test(4000)
    run_test(round(random.uniform(4001, 7999), 1))
    run_test(8000)
    run_test(round(random.uniform(8001, 11999), 1))
    run_test(12000)
    run_test(12001)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
418,a1_6_evacuation,3,lab,1,"<html><head/><body><p><span style="" font-weight:600;"">PROBLEM STATEMENT:<br/></span></p><p>Terrorist groups in the past have created improvised explosive devices in various shapes and sizes. According to the National Counterterrorism Center, the following evacuation distances are appropriate for certain explosive devices.</p><table border=""1"" style="" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px;"" width=""200"" cellspacing=""0"" cellpadding=""0""><tr><td><p><span style="" font-weight:600;"">Explosive Container</span></p></td><td><p><span style="" font-weight:600;"">Evacuation Distance (inclusive, in Feet)</span></p></td></tr><tr><td><p>Pipe Bomb</p></td><td><p>850</p></td></tr><tr><td><p>Suitcase Bomb</p></td><td><p>1850</p></td></tr><tr><td><p>Sedan</p></td><td><p>2000</p></td></tr><tr><td><p>Cargo Van</p></td><td><p>2750</p></td></tr><tr><td><p>Semi-Trailer</p></td><td><p>7000</p></td></tr></table><p><br/>Write a Python program that asks the user to enter a distance to a device (in feet). Then, referencing the table, print out all of the explosive devices that could potentially reach a target at the specified distance (one per line). If no explosives can reach the specified distance, output &quot;Not in range&quot;.</p><p><span style="" font-weight:600;"">EXAMPLES:</span></p><table border=""1"" style="" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px;"" width=""200"" cellspacing=""0"" cellpadding=""0""><tr><td/><td><p><span style="" font-weight:600;"">Example 1</span></p></td><td><p><span style="" font-weight:600;"">Example 2</span></p></td><td><p><span style="" font-weight:600;"">Example 3</span></p></td></tr><tr><td><p><span style="" font-weight:600;"">Input</span></p></td><td><p>1900</p></td><td><p>2500</p></td><td><p>8000</p></td></tr><tr><td><p><span style="" font-weight:600;"">Output</span></p></td><td><p>Sedan<br/>Cargo Van<br/>Semi-Trailer</p></td><td><p>Cargo Van<br/>Semi-Trailer</p></td><td><p>Not in range</p></td></tr></table><p>NOTE: The devices can be listed in any order, so long as only the ones in range are printed.</p></body></html>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(target_range):
    result = """"
    
    if target_range <= 850:
        result += ""Pipe Bomb\n""

    if target_range <= 1850:
        result += ""Suitcase Bomb\n""
        
    if target_range <= 2000:
        result += ""Sedan\n""

    if target_range <= 2750:
        result += ""Cargo Van\n""

    if target_range <= 7000:
        result += ""Semi-Trailer\n""

    if target_range > 7000:
        result += ""Not in range\n""
    
    return result.strip().split('\n')


def run_test(target_range):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", target_range, ""feet"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_6_evacuation.py"", [target_range], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(target_range)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 899), 1))
    run_test(850)
    run_test(round(random.uniform(851, 1849), 1))
    run_test(1850)
    run_test(round(random.uniform(1851, 1999), 1))
    run_test(2000)
    run_test(round(random.uniform(2001, 2749), 1))
    run_test(2750)
    run_test(round(random.uniform(2751, 7999), 1))
    run_test(7000)
    run_test(7001)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
419,a1_6_digitalstorage,3,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Assume someone takes hundreds of photos on their smartphone every week. They are seeking the best and least expensive alternatives to store/share their images because their phone's storage capacity is limited. Using the table below, determine which storage options they should consider, assuming each image has an average file size of 6 MB.</p>
<p>&nbsp;</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong>Storage Option</strong></td>
<td><strong>Short Name</strong></td>
<td><strong>Number of Images (inclusive)</strong></td>
</tr>
<tr>
<td>CD-ROM (700 MB)</td>
<td>CD</td>
<td>116</td>
</tr>
<tr>
<td>DVD-ROM (4.7 GB)</td>
<td>DVD</td>
<td>780</td>
</tr>
<tr>
<td>USB Thumb Drive (16 GB)</td>
<td>USB Small</td>
<td>2660</td>
</tr>
<tr>
<td>USB Thumb Drive (64 GB)</td>
<td>USB Large</td>
<td>10600</td>
</tr>
<tr>
<td>Portable Hard Drive (256 GB)</td>
<td>Portable HDD</td>
<td>42600</td>
</tr>
</tbody>
</table>
<p><br />Write a Python program that asks the user to enter the number of images that need to be shared/stored (non-negative, whole number). Then, referencing the table above, print out all the storage options (by Short Name) capable of holding that many images (one per line). If no storage options are capable of storing that many images, output ""Consider Cloud Storage"".</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width="""">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>2000</td>
<td>4000</td>
<td>45000</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>USB Small<br />USB Large<br />Portable HDD</td>
<td>
<p>USB Large<br />Portable HDD</p>
</td>
<td>Consider Cloud Storage</td>
</tr>
</tbody>
</table>
<p>NOTE: The devices can be listed in any order, so long as only the ones in range are printed.</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(num_images):
    result = """"
    
    if num_images <= 116:
        result += ""CD\n""

    if num_images <= 780:
        result += ""DVD\n""
        
    if num_images <= 2660:
        result += ""USB Small\n""

    if num_images <= 10600:
        result += ""USB Large\n""

    if num_images <= 42600:
        result += ""Portable HDD\n""

    if num_images > 42600:
        result += ""Consider Cloud Storage\n""
    
    return result.strip().split('\n')


def run_test(num_images):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", num_images, ""images"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_6_digitalstorage.py"", [num_images], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(num_images)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(int(random.uniform(0, 115)))
    run_test(116)
    run_test(int(random.uniform(117, 779)))
    run_test(780)
    run_test(int(random.uniform(781, 2659)))
    run_test(2660)
    run_test(int(random.uniform(2661, 10599)))
    run_test(10600)
    run_test(int(random.uniform(10601, 42599)))
    run_test(42600)
    run_test(45000)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
420,a1_6_broadband,3,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Choosing the right broadband speed for your internet connection depends on which online activities you plan on engaging while online. Using the table below, determine which activities are possible with a given broadband speed, given in Kilobits per second (Kbps).</p>
<p>&nbsp;</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong>Activity</strong></td>
<td><strong>Short Name</strong></td>
<td><strong>Minimum Broadband Speed <br />(inclusive, in Kbps)</strong></td>
</tr>
<tr>
<td>Social Media</td>
<td>Social Media</td>
<td>1000</td>
</tr>
<tr>
<td>Multiplayer Gaming</td>
<td>Gaming</td>
<td>4000</td>
</tr>
<tr>
<td>HD Video Conferencing</td>
<td>Video Conferencing</td>
<td>6000</td>
</tr>
<tr>
<td>File Downloading</td>
<td>File Downloads</td>
<td>10000</td>
</tr>
<tr>
<td>Stream Ultra HD 4K Video</td>
<td>HD 4K Video</td>
<td>25000</td>
</tr>
</tbody>
</table>
<p><br />Write a Python program that asks the user to enter the broadband speed in Kbps. Then, referencing the table above, print out all the activities (by Short Name) that can be achieved using that speed (one per line). If the broadband speed is less than 1000 Kbps, output ""Upgrade to Broadband"".</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width="""">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>8500</td>
<td>5000</td>
<td>750</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>
<p>Social Media<br />Gaming<br />Video Conferencing</p>
</td>
<td>
<p>Social Media<br />Gaming</p>
</td>
<td>Upgrade to Broadband</td>
</tr>
</tbody>
</table>
<p>NOTE: The activities can be listed in any order, so long as only the ones in range are printed.</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(speed):
    result = """"
    
    if speed >= 1000:
        result += ""Social Media\n""

    if speed >= 4000:
        result += ""Gaming\n""
        
    if speed >= 6000:
        result += ""Video Conferencing\n""

    if speed >= 10000:
        result += ""File Downloads\n""

    if speed >= 25000:
        result += ""HD 4K Video\n""

    if speed < 1000:
        result += ""Upgrade to Broadband\n""
    
    return result.strip().split('\n')


def run_test(speed):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", speed, ""Kbps"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_6_broadband.py"", [speed], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(speed)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 999), 1))
    run_test(1000)
    run_test(round(random.uniform(1001, 4999), 1))
    run_test(4000)
    run_test(round(random.uniform(4001, 5999), 1))
    run_test(6000)
    run_test(round(random.uniform(6001, 9999), 1))
    run_test(10000)
    run_test(round(random.uniform(10001, 24999), 1))
    run_test(25000)
    run_test(30000)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
421,a1_5_scuba,3,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Recreational SCUBA divers have to plan out how many air tanks they will need in order to safely dive. The amount varies per diver because each person consumes air at a different rate. This rate is commonly called Surface Air Consumption. You want to figure whether you can afford the air requirements for the trips that you are planning.</p>
<p>Write an algorithm that asks for:</p>
<ul>
<li>
<ul>
<li>The total dive time for the trip in minutes&nbsp;</li>
<li>The air budget (in dollars--do not worry about the dollar sign)</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then output:</p>
<ul>
<li>
<ul>
<li>The number of liters needed for the project.</li>
<li>The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)</li>
<li>Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of compressed air is greater than or not greater than the budget, respectfully.</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Assume that your Surface Air Consumption is <strong>14.5</strong> liters/minute, and that air costs <strong>2 cents</strong> per liter. You may assume that all inputs are non-negative numbers.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<p>&nbsp;</p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>180<br />70</td>
<td>
<p>120<br />30</p>
</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>2610.0<br />52.2<br />Within Budget</td>
<td>1740.0<br />34.800000000000004<br />Over Budget</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(target_minutes, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    
    total_liters = target_minutes*14.5
    total_cost = total_liters*.02
        
    if total_cost > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_5_scuba.py"", [target_minutes, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], total_liters):
        print(""Amount of Air Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount. Expected:"", total_liters)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], total_cost):
        print(""Cost of Air Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", total_cost)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    for x in range(4):
        run_test(round(random.uniform(10,100), 1), random.randint(10, 50))
    run_test(round(random.uniform(10,100), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
422,a1_5_runway,3,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>The CSAF has authorized new runways for any base that can accomplish the project under their current budget. The new runways will be solid concrete with their lengths measured in meters.</p>
<p>Write an algorithm that asks for:</p>
<ul>
<li>
<ul>
<li>The length of runway to be built (in meters)</li>
<li>The base&rsquo;s budget (in dollars--do not worry about the dollar sign, do not round to the nearest)</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then output:</p>
<ul>
<li>
<ul>
<li>The amount of concrete (in tons) needed for the base's runway</li>
<li>The estimated cost (in dollars--do not output a dollar sign)</li>
<li>Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of materials is greater than or not greater than the base's budget, respectfully.</li>
</ul>
</li>
</ul>
<p>Assume that each meter of runway<sup>&nbsp;</sup>requires<strong>&nbsp;2.5</strong>&nbsp;tons of concrete to build, and that concrete costs&nbsp;<strong>$75.50</strong>&nbsp;per ton. You may assume that all inputs are non-negative numbers.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td width=""214"">&nbsp;</td>
<td width=""215"">
<p>Example 1</p>
</td>
<td width=""214"">
<p>Example 2</p>
</td>
</tr>
<tr>
<td width=""214"">
<p>Input</p>
</td>
<td width=""215"">
<p>2000<br />400000</p>
</td>
<td width=""214"">
<p>1500<br />250000</p>
</td>
</tr>
<tr>
<td width=""214"">
<p>Output</p>
</td>
<td width=""215"">
<p>5000.0<br />377500.0<br />Within Budget</p>
</td>
<td width=""214"">
<p>3750.0<br />283125.0<br />Over Budget</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(runway_length, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    tons_of_concrete = 2.5 * runway_length
    cost_of_materials = 75.50 * tons_of_concrete
    if cost_of_materials > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_5_runway.py"", [runway_length, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], tons_of_concrete):
        print(""Amount of Concrete Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount. Expected:"", tons_of_concrete)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):
        print(""Cost of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", cost_of_materials)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(500, 3000), 1), random.randint(100000, 500000))
    run_test(round(random.uniform(500, 3000), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
423,a1_5_printer,3,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>A 3D printer converts computer generated models into physical objects by heating and extruding a filament known as Polylactic Acid (PLA). PLA, normally sold in spools, is directly fed to the printer head like a thread. You want to determine if you can afford to 3D print a project given its volume of material.</p>
<p>Write an algorithm that asks for:</p>
<ul>
<li>
<ul>
<li>The volume of the 3D model to be printed (in cm<sup>3</sup>)</li>
<li>The user's budget (in dollars--do not worry about the dollar sign, do not round to the nearest)</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then output:</p>
<ul>
<li>
<ul>
<li>The length of material (in meters) needed to produce the object</li>
<li>The estimated cost (in dollars--do not output a dollar sign)</li>
<li>Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of materials is greater than or not greater than the user's budget, respectfully.</li>
</ul>
</li>
</ul>
<p>Assume that each cm<sup>3&nbsp;</sup>requires<strong>&nbsp;0.312</strong>&nbsp;meters of PLA to print, and that PLA filament costs&nbsp;<strong>$0.063</strong>&nbsp;per meter. You may assume that all inputs are non-negative numbers.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td>Example 1</td>
<td>Example 2</td>
</tr>
<tr>
<td>Input</td>
<td>15.0<br />2.5</td>
<td>500.0<br />5.0</td>
</tr>
<tr>
<td>Output</td>
<td>4.68<br />0.29484<br />Within Budget</td>
<td>156.0<br />9.828<br />Over Budget</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(volume, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    length_of_materials = 0.312 * volume
    cost_of_materials = 0.063 * length_of_materials
    if cost_of_materials > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_5_printer.py"", [volume, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], length_of_materials):
        print(""Length of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Length. Expected:"", length_of_materials)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):
        print(""Cost of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", cost_of_materials)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 100), 1), random.randint(10, 50))
    run_test(round(random.uniform(0, 100), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
424,a1_5_paint,3,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You are tasked to paint a large wall and need to see if your unit can afford the paint for the project</p>
<p>Write an algorithm that asks for:</p>
<ul>
<li>
<ul>
<li>The size of the wall in square feet</li>
<li>The budget (in dollars--do not worry about the dollar sign)</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then output:</p>
<ul>
<li>
<ul>
<li>The amount of paint required to cover the wall</li>
<li>The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)</li>
<li>Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of paint is greater than or not greater than the budget, respectfully.</li>
</ul>
</li>
</ul>
<p>Assume that a gallon of paint covers <strong>15</strong> square feet, and that the current price of paint is&nbsp;<strong>$12.23</strong>&nbsp;per gallon. You may assume that all inputs are non-negative numbers. You should also assume that you can purchase portions of gallons of paint so do NOT round up to the nearest full gallon.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width=>
<tbody>
<tr>
<td>&nbsp;</td>
<td>Example 1</td>
<td>Example 2</td>
</tr>
<tr>
<td>Input</td>
<td>120.0<br />900.0</td>
<td>
<p>750.0<br />100.0</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>8.0<br />97.84<br />Within Budget</td>
<td>50.0<br />611.5<br />Over Budget</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(target_distance, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    fuel_required = target_distance / 15
    cost_of_materials = 12.23 * fuel_required
    
    if cost_of_materials > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_5_paint.py"", [target_distance, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], fuel_required):
        print(""Amount of Paint Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount of Paint. Expected:"", fuel_required)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):
        print(""Cost of Paint Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost of Paint. Expected:"", cost_of_materials)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(500, 3000), 1), random.randint(100000, 500000))
    run_test(round(random.uniform(500, 3000), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
425,a1_5_fueldepot,3,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Fuel in the military is essential to conducting operations. Balancing mission requirements against budgetary constraints is a constant concern.</p>
<p>Write an algorithm that asks for:</p>
<ul>
<li>
<ul>
<li>The distance to a target in miles</li>
<li>The budget (in dollars--do not worry about the dollar sign)</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then output:</p>
<ul>
<li>
<ul>
<li>The amount of fuel (in gallons) needed to reach the target</li>
<li>The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)</li>
<li>Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of fuel is greater than or not greater than the budget, respectfully.</li>
</ul>
</li>
</ul>
<p>Assume that the convoy can get<strong>&nbsp;12.5</strong>&nbsp;miles to the gallon, and that the current price of fuel is&nbsp;<strong>$3.73</strong>&nbsp;per gallon. You may assume that all inputs are non-negative numbers.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width="""">
<tbody>
<tr>
<td>&nbsp;</td>
<td>Example 1</td>
<td>Example 2</td>
</tr>
<tr>
<td>Input</td>
<td>130.7<br />50.50</td>
<td>
<p>750<br />100</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>10.456<br />39.0009<br />Within Budget</td>
<td>60.0<br />223.80<br />Over Budget</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(target_distance, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    fuel_required = target_distance / 12.5
    cost_of_materials = 3.73 * fuel_required
    
    if cost_of_materials > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_5_fueldepot.py"", [target_distance, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], fuel_required):
        print(""Amount of Fuel Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount. Expected:"", fuel_required)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):
        print(""Cost of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", cost_of_materials)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(500, 3000), 1), random.randint(100000, 500000))
    run_test(round(random.uniform(500, 3000), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
426,a1_4_sickness,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong>You have been provided with a template that gets the following values from
    the user:</p>
    <ul>
        <li>Body temperature (in Fahrenheit)</li>
        <li>Body aches (<strong><span style=""text-decoration: underline;"">a string</span></strong>, which will be either
            ""yes"" or ""no"")</li>
        <li>Loss of smell (<span style=""text-decoration: underline;""><strong>a string</strong></span>, which will be
            either ""yes"" or ""no"")</li>
    </ul>
    <p>&nbsp;</p>
    <p>Using the following rules as a guide, have your program determine a person's risk of having an infectious
        disease:</p>
    <ol>
        <li>If the person's temperature is above 100.4 degrees, print ""High Risk""</li>
        <li>If the person is experiencing both body aches and loss of smell, print ""High Risk""</li>
        <li>For all other situations, print ""Low Risk""</li>
    </ol>
    <p>&nbsp;</p>
    <p style=""text-align: left;""><strong>EXAMPLE:<br></strong></p>
    <table style=""border-collapse: collapse; width: 78.1598%; height: 182px; margin-left: auto; margin-right: auto;""
        border=""1"">
        <tbody>
            <tr>
                <td style=""width: 33.3333%; text-align: center;""></td>
                <td style=""width: 33.3333%; text-align: center;""><strong>Example 1</strong></td>
                <td style=""width: 33.3333%; text-align: center;""><strong>Example 2</strong></td>
            </tr>
            <tr>
                <td style=""width: 33.3333%; text-align: center;"">Input</td>
                <td style=""width: 33.3333%; text-align: center;"">
                    <p>99.0<br>yes<br>yes</p>
                </td>
                <td style=""width: 33.3333%; text-align: center;"">100.4<br>no<br>yes</td>
            </tr>
            <tr>
                <td style=""width: 33.3333%; text-align: center;"">Output</td>
                <td style=""width: 33.3333%; text-align: center;"">High Risk</td>
                <td style=""width: 33.3333%; text-align: center;"">Low Risk</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def run_test(temperature, body_aches, loss_of_smell, expected_output):
    output, error = autograder.run_script(""a1_4_sickness.py"", [temperature, body_aches, loss_of_smell])
    lines = output.split('\n')
    
    if len(lines) >= 4:
        if lines[3] == expected_output:
            print(""Correct Output\n"")
            return True
        else:
            print(""Incorrect Output.  Expected"", expected_output, '\n')
            return False
    else:
        print(""No Output Found\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    num_tests_passed = 0
    
    testcase_library = [(round(random.uniform(98.0, 99.9), 1), ""yes"", ""no"", ""Low Risk""),
                        (round(random.uniform(100.5, 102.0), 1), ""yes"", ""yes"", ""High Risk""),
                        (round(random.uniform(98.0, 99.9), 1), ""yes"", ""yes"", ""High Risk""),
                        (round(random.uniform(100.5, 102.0), 1), ""no"", ""no"", ""High Risk"")]
    
    for i in range(len(testcase_library)):
        print(""-------------------"")
        print(""Test"", i+1, ""of"", len(testcase_library))
        print(""-------------------"")
        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):
            num_tests_passed += 1
    
    return round(100 / len(testcase_library) * num_tests_passed, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
427,a1_4_run,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong>You have been provided with a template that gets the following values from
    the user:</p>
    <ul>
        <li>Outside Temperature (in Fahrenheit)</li>
        <li>Is it daytime? <span style=""text-decoration: underline;""><strong>(a string</strong></span> that will be
            either ""yes"" or ""no"")</li>
        <li>Is it raining? (<span style=""text-decoration: underline;""><strong>a string </strong></span>that will be
            either ""yes"" or ""no"")</li>
    </ul>
    <p>&nbsp;</p>
    <p>Using the following rules as a guide, have your program determine if you go on a run:</p>
    <ol>
        <li>If the outside temperature is above 95 degrees, print ""Do Not Run""</li>
        <li>If it is daytime and it is NOT raining, print ""Go Run""</li>
        <li>For all other situations, print ""Do Not Run""</li>
    </ol>
    <p>&nbsp;</p>
    <p><strong>EXAMPLE:<br></strong></p>
    <table border=""1"">
        <tbody>
            <tr>
                <td></td>
                <td><strong>Example 1</strong></td>
                <td><strong>Example 2</strong></td>
                <td><strong>Example 3</strong></td>
            </tr>
            <tr>
                <td>Input</td>
                <td>
                    <p>99.0<br>yes<br>no</p>
                </td>
                <td>80<br>yes<br>no</td>
                <td>75<br>no<br>yes</td>
            </tr>
            <tr>
                <td>Output</td>
                <td>Do Not Run</td>
                <td>Go Run</td>
                <td>Do Not Run</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def run_test(temperature, daytime, raining, expected_output):
    output, error = autograder.run_script(""a1_4_run.py"", [temperature, daytime, raining])
    lines = output.split('\n')
    
    if len(lines) >= 4:
        if lines[3] == expected_output:
            print(""Correct Output\n"")
            return True
        else:
            print(""Incorrect Output.  Expected"", expected_output, '\n')
            return False
    else:
        print(""No Output Found\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    num_tests_passed = 0
    
    testcase_library = [(round(random.uniform(93.0, 94.9), 1), ""yes"", ""no"", ""Go Run""),
                        (round(random.uniform(93.0, 94.9), 1), ""no"", ""yes"", ""Do Not Run""),
                        (round(random.uniform(93.0, 94.9), 1), ""no"", ""no"", ""Do Not Run""),
                        (round(random.uniform(100.5, 102.0), 1), ""no"", ""yes"", ""Do Not Run""),
                        (round(random.uniform(100.5, 102.0), 1), ""yes"", ""yes"", ""Do Not Run""),
                        (95.0, ""yes"", ""no"", ""Go Run"")]
    
    for i in range(len(testcase_library)):
        print(""-------------------"")
        print(""Test"", i+1, ""of"", len(testcase_library))
        print(""-------------------"")
        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):
            num_tests_passed += 1
    
    return round(100 / len(testcase_library) * num_tests_passed, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
428,a1_4_pt,3,skill,1,"<div><strong>PROBLEM STATEMENT: <br></strong>You have been provided with a template that gets the following values from
    the user:</p>
    <ul>
        <li>Outside Temperature (in Fahrenheit)</li>
        <li>Is it raining? (<span style=""text-decoration: underline;""><strong>a string</strong></span>, which will be
            either ""yes"" or ""no"")</li>
        <li>Winds over 20 knots? (<span style=""text-decoration: underline;""><strong>a string</strong></span>, which will
            be either ""yes"" or ""no"")</li>
    </ul>
    <p>&nbsp;</p>
    <p>Using the following rules as a guide, have your program determine if PT is cancelled or a go:</p>
    <ol>
        <li>If the outside temperature is above 90 degrees, print ""PT Cancelled""</li>
        <li>If it is raining and there are winds over 20 knots print ""PT Cancelled""</li>
        <li>For all other situations, print ""PT is a Go""</li>
    </ol>
    <p>&nbsp;</p>
    <p><strong>EXAMPLE: <br></strong></p>
    <table style=""width: 475px; height: 240px;"" border=""1"">
        <tbody>
            <tr>
                <td style=""width: 96px;""></td>
                <td style=""width: 126px;""><strong>Example 1</strong></td>
                <td style=""width: 127px;""><strong>Example 2</strong></td>
                <td style=""width: 114px;""><strong>Example 3</strong></td>
            </tr>
            <tr>
                <td style=""width: 96px;"">Input</td>
                <td style=""width: 126px;"">
                    <p>99.0 <br>no <br>no</p>
                </td>
                <td style=""width: 127px; vertical-align: middle;"">85 <br>yes <br>yes</td>
                <td style=""width: 114px; vertical-align: middle;"">85 <br>no <br>yes</td>
            </tr>
            <tr>
                <td style=""width: 96px;"">Output</td>
                <td style=""width: 126px;"">PT Cancelled</td>
                <td style=""width: 127px;"">PT Cancelled</td>
                <td style=""width: 114px;"">PT is a Go</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def run_test(temperature, raining, winds, expected_output):
    output, error = autograder.run_script(""a1_4_pt.py"", [temperature, raining, winds])
    lines = output.split('\n')
    
    if len(lines) >= 4:
        if lines[3] == expected_output:
            print(""Correct Output\n"")
            return True
        else:
            print(""Incorrect Output.  Expected"", expected_output, '\n')
            return False
    else:
        print(""No Output Found\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    num_tests_passed = 0
    
    testcase_library = [(round(random.uniform(72.0, 90), 1), ""no"", ""no"", ""PT is a Go""),
                        (round(random.uniform(100.5, 102.0), 1), ""yes"", ""yes"", ""PT Cancelled""),
                        (round(random.uniform(72.0, 90), 1), ""yes"", ""no"", ""PT is a Go""),
                        (round(random.uniform(100.5, 102.0), 1), ""no"", ""no"", ""PT Cancelled""),
                        (round(random.uniform(72.0, 90), 1), ""yes"", ""yes"", ""PT Cancelled"")]
    
    for i in range(len(testcase_library)):
        print(""-------------------"")
        print(""Test"", i+1, ""of"", len(testcase_library))
        print(""-------------------"")
        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):
            num_tests_passed += 1
    
    return round(100 / len(testcase_library) * num_tests_passed, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
429,a1_4_dog,3,skill,1,"<div><strong>PROBLEM STATEMENT: <br></strong>You have been provided with a template that gets the following values from
    the user:</p>
    <ul>
        <li>Outside Temperature (in Fahrenheit)</li>
        <li>Is it raining? (<span style=""text-decoration: underline;""><strong>a string </strong></span>that will be
            either ""yes"" or ""no"")</li>
        <li>Is it daytime? (<span style=""text-decoration: underline;""><strong>a string </strong></span>that will be
            either ""yes"" or ""no"")</li>
    </ul>
    <p>&nbsp;</p>
    <p>Using the following rules as a guide, have your program determine if the dog is outside:</p>
    <ol>
        <li>If the outside temperature is above 85 degrees, print ""Dog Inside""</li>
        <li>If it is raining outside and it is NOT daytime, print ""Dog Inside""</li>
        <li>For all other situations, print ""Dog Outside""</li>
    </ol>
    <p>&nbsp;</p>
    <p><strong>EXAMPLE: <br></strong></p>
    <table border=""1"">
        <tbody>
            <tr>
                <td></td>
                <td><strong>Example 1</strong></td>
                <td><strong>Example 2</strong></td>
                <td><strong>Example 3</strong></td>
            </tr>
            <tr>
                <td>Input</td>
                <td>
                    <p>99.0 <br>no <br>yes</p>
                </td>
                <td>80 <br>yes <br>no</td>
                <td>75 <br>no <br>yes</td>
            </tr>
            <tr>
                <td>Output</td>
                <td>Dog Inside</td>
                <td>Dog Inside</td>
                <td>Dog Outside</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def run_test(temperature, raining, daytime, expected_output):
    output, error = autograder.run_script(""a1_4_dog.py"", [temperature, raining, daytime])
    lines = output.split('\n')
    
    if len(lines) >= 4:
        if lines[3] == expected_output:
            print(""Correct Output\n"")
            return True
        else:
            print(""Incorrect Output.  Expected"", expected_output, '\n')
            return False
    else:
        print(""No Output Found\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    num_tests_passed = 0
    
    testcase_library = [(round(random.uniform(83.0, 84.9), 1), ""no"", ""yes"", ""Dog Outside""),
                        (round(random.uniform(83.0, 84.9), 1), ""yes"", ""no"", ""Dog Inside""),
                        (round(random.uniform(83.0, 84.9), 1), ""no"", ""no"", ""Dog Outside""),
                        (round(random.uniform(100.5, 102.0), 1), ""no"", ""yes"", ""Dog Inside""),
                        (round(random.uniform(100.5, 102.0), 1), ""yes"", ""yes"", ""Dog Inside""),
                        (85.0, ""yes"", ""yes"", ""Dog Outside"")]
    
    for i in range(len(testcase_library)):
        print(""-------------------"")
        print(""Test"", i+1, ""of"", len(testcase_library))
        print(""-------------------"")
        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):
            num_tests_passed += 1
    
    return round(100 / len(testcase_library) * num_tests_passed, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
430,a1_3_vspeed,3,skill,1,"<div><strong style=""color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;"">PROBLEM
        STATEMENT:</strong></p>
    <div class=""text"">
        <div id=""question_131193026_question_text"" class=""question_text user_content enhanced"">
            <p>You have been provided with a partially complete Python program that contains 2 variables.</p>
            <ol>
                <li>speed_of_vehicle(input by the user in mph)</li>
                <li>speed_limit (already initialized in mph)</li>
            </ol>
            <p>&nbsp;</p>
            <p>Add code to the end of this program that will output:</p>
            <ul>
                <li style=""list-style-type: none;"">
                    <ul>
                        <li>
                            <pre>Too fast, slow down!</pre>
                            If the vehicle speed is higher than the speed limit<br><br>
                        </li>
                        <li>
                            <pre>Maintain Speed</pre>
                            If the vehicle speed is equal to the speed limit<br><br>
                        </li>
                        <li>
                            <pre>Too slow, speed up!</pre>
                            If the vehicle speed is lower than the speed limit<br><br>
                        </li>
                    </ul>
                </li>
            </ul>
            <p>&nbsp;</p>
            <p><strong>EXAMPLES:</strong><strong></strong></p>
            <table border=""1"" width=""859"">
                <tbody>
                    <tr>
                        <td></td>
                        <td><strong>Example 1</strong></td>
                        <td><strong>Example 2</strong></td>
                        <td><strong>Example 3</strong></td>
                    </tr>
                    <tr>
                        <td><strong>Input</strong></td>
                        <td>80</td>
                        <td>65</td>
                        <td>40</td>
                    </tr>
                    <tr>
                        <td><strong>Output</strong></td>
                        <td>Too fast, slow down!</td>
                        <td>Maintain Speed</td>
                        <td>Too slow, speed up!</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(speed):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing speed ="", speed, ""MPH"")
    print(""----------------------------------"")
    
    if speed > 65:
        solution = ""Too fast, slow down!""
    elif speed == 65:
        solution = ""Maintain Speed""
    else:
        solution = ""Too slow, speed up!""
    
    output, error_message = autograder.run_script(""a1_3_vspeed.py"", [speed])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(66, 150), 1))
    run_test(65)
    run_test(round(random.uniform(0.0, 64), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
431,a1_3_speed,3,skill,1,"<div>
<div>
<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a partially complete Python program that contains 2 variables.</p>
<ol>
<li>aircraft_speed (input by the user in mph)</li>
<li>speed_of_sound (already initialized in mph)</li>
</ol>
<p>&nbsp;</p>
<p>Add code to the end of this program that will output:</p>
<ul>
<li>
<ul>
<li>
<pre>Faster than Mach 1 </pre>
If the aircraft speed is higher than the speed of sound<br /><br /></li>
<li>
<pre>Mach 1 </pre>
If the aircraft speed is equal to the speed of sound<br /><br /></li>
<li>
<pre>Slower than Mach 1 </pre>
If the aircraft speed is lower than the speed of sound<br /><br /></li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>800</td>
<td>767.269</td>
<td>450.8</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Faster than Mach 1</td>
<td>Mach 1</td>
<td>Slower than Mach 1</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(speed):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing speed ="", speed, ""MPH"")
    print(""----------------------------------"")
    
    if speed > 767.269:
        solution = ""Faster than Mach 1""
    elif speed == 767.269:
        solution = ""Mach 1""
    else:
        solution = ""Slower than Mach 1""
    
    output, error_message = autograder.run_script(""a1_3_speed.py"", [speed])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(768.0, 1000.0), 1))
    run_test(767.269)
    run_test(round(random.uniform(0.0, 767.0), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
432,a1_3_satellite,3,skill,1,"<div id=""question_138313788_question_text"" class=""question_text user_content enhanced"">
          

<p><strong>PROBLEM STATEMENT:</strong></p>
<p>You have been provided with a partially complete Python program that contains 2 variables.</p>
<ol>
<li>satellite_speed (input by the user in km/s)</li>
<li>orbit_speed (already initialize in km/s)</li>
</ol>
<p>&nbsp;</p>
<p>Add code to the end of this program that will output:</p>
<ul>
<ul>
<li style=""list-style-type: none;"">
<ul>
<li>
<pre>Crashed to Earth</pre>
<p>If the speed of the satellite is below the orbital speed.</p>
</li>
<li>
<pre>In Orbit</pre>
<p>If the speed of the satellite is equal to the orbital speed.</p>
</li>
<li>
<pre>Lost to Space</pre>
<p>If the speed of the satellite is above the orbital speed.</p>
</li>
</ul>
</li>
</ul>
</ul>
<p>&nbsp;</p>
<p><strong>&nbsp;</strong></p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width=""859"">
<tbody>
<tr>
<td width=""215""></td>
<td width=""215"">
<p><strong>Example 1</strong></p>
</td>
<td width=""214"">
<p><strong>Example 2</strong></p>
</td>
<td width=""214"">
<p><strong>Example 3</strong></p>
</td>
</tr>
<tr>
<td width=""215"">
<p><strong>Input</strong></p>
</td>
<td width=""215"">
<p>3</p>
</td>
<td width=""214"">
<p>7.8</p>
</td>
<td width=""214"">
<p>9</p>
</td>
</tr>
<tr>
<td width=""215"">
<p><strong>Output</strong></p>
</td>
<td width=""215"">
<p>Crashed to Earth</p>
</td>
<td width=""214"">
<p>In Orbit</p>
</td>
<td width=""214"">
<p>Lost to Space</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
      </div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(speed):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing speed ="", speed, ""km/s"")
    print(""----------------------------------"")
    
    if speed > 7.8:
        solution = ""Lost to Space""
    elif speed == 7.8:
        solution = ""In Orbit""
    else:
        solution = ""Crashed to Earth""
    
    output, error_message = autograder.run_script(""a1_3_satellite.py"", [speed])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(7.8, 20), 1))
    run_test(7.8)
    run_test(round(random.uniform(0.0, 7.7), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
433,a1_3_goldilocks,3,skill,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a partially complete Python program that contains 2 variables.</p>
<ol>
<li>porridge_temp (input by the user in &deg;F)</li>
<li>correct_temp (already initialized in &deg;F)</li>
</ol>
<p>&nbsp;</p>
<p>Add code to the end of this program that will output:</p>
<ul>
<li>
<ul>
<li>
<pre>Too Hot </pre>
When the porridge temp is above the correct temperature.<br /><br /></li>
<li>
<pre>Just Right </pre>
When the porridge temp is equal to the correct temperature<br /><br /></li>
<li>
<pre>Too Cold </pre>
When the porridge temp is below the correct temperature.<br /><br /></li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>110</td>
<td>105</td>
<td>98</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Too Hot</td>
<td>Just Right</td>
<td>Too Cold</td>
</tr>
</tbody>
</table>
</div>

","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(temp):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing temperature ="", temp, ""degrees"")
    print(""----------------------------------"")
    
    if temp > 105:
        solution = ""Too Hot""
    elif temp == 105:
        solution = ""Just Right""
    else:
        solution = ""Too Cold""
    
    output, error_message = autograder.run_script(""a1_3_goldilocks.py"", [temp])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(106, 130), 1))
    run_test(105)
    run_test(round(random.uniform(80, 104), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
434,a1_3_cards,3,skill,1,"<div>
<div>
<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a partially complete Python program that contains 2 variables.</p>
<ol>
<li>number_of_cards (input by the user)</li>
<li>cards_needed (already initialized)</li>
</ol>
<p>&nbsp;</p>
<p>Add code to the end of this program that will output whether you have enough cards to make a full deck of 52 cards (already initialized):</p>
<ul>
<li>
<ul>
<li>
<pre>Too many cards </pre>
If the number of cards is more than the cards needed<br /><br /></li>
<li>
<pre>Full deck</pre>
If the number of cards is equal to the cards needed<br /><br /></li>
<li>
<pre>Not enough cards </pre>
If the number of cards is fewer than the cards needed<br /><br /></li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<p>&nbsp;</p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>57</td>
<td>52</td>
<td>38</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Too many cards</td>
<td>Full deck</td>
<td>Not enough cards</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(num_cards):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing number of cards ="", num_cards, ""cards"")
    print(""----------------------------------"")
    
    if num_cards > 52:
        solution = ""Too many cards""
    elif num_cards == 52:
        solution = ""Full deck""
    else:
        solution = ""Not enough cards""
    
    output, error_message = autograder.run_script(""a1_3_cards.py"", [num_cards])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(53, 60)))
    run_test(52)
    run_test(round(random.uniform(0, 51)))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
435,a1_3_arrow,3,skill,1,"<div>
<div>
<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a partially complete Python program that contains 2 variables.</p>
<ol>
<li>arrow_height (input by the user in feet)</li>
<li>apple_height (already initialized in feet)</li>
</ol>
<p>&nbsp;</p>
<p>Add code to the end of this program that will output:</p>
<ul>
<li>
<ul>
<li>
<pre>Arrow too high </pre>
If the arrow height is higher than the apple<br /><br /></li>
<li>
<pre>Direct hit</pre>
If the arrow height is equal to the apple<br /><br /></li>
<li>
<pre>Arrow too low </pre>
If the arrow is lower than the apple<br /><br /></li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<p>&nbsp;</p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>7.1</td>
<td>6.2</td>
<td>5.9</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Arrow too high</td>
<td>Direct hit</td>
<td>Arrow too low</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(height):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing height ="", height, ""feet"")
    print(""----------------------------------"")
    
    if height > 6.2:
        solution = ""Arrow too high""
    elif height == 6.2:
        solution = ""Direct hit""
    else:
        solution = ""Arrow too low""
    
    output, error_message = autograder.run_script(""a1_3_arrow.py"", [height])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(6.2, 20), 1))
    run_test(6.2)
    run_test(round(random.uniform(0.0, 6.1), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
436,a1_2_spheres,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Write a program that calculates the volume of a multiple spheres.&nbsp; The template provided to you defines 2
        variables:</p>
    <ul>
        <li><span><strong>radius</strong>&nbsp;</span>- radius of the sphere</li>
        <li><span><strong>total</strong>&nbsp;</span>- The number of spheres</li>
    </ul>
    <p>&nbsp;</p>
    <p>Calculate the volume, using the following formula:</p>
    <pre class=""lr-fy-ecl lr-fy-eq-elem""
        data-var=""V""><span><span id=""MathJax-Span-34"" class=""mi"">V</span><span id=""MathJax-Span-35"" class=""mo"">=(</span><span id=""MathJax-Span-36"" class=""mfrac""><span id=""MathJax-Span-37"" class=""mn"">4/</span><span id=""MathJax-Span-38"" class=""mn"">3)</span></span><span id=""MathJax-Span-39"" class=""mi""></span><span class=""msup""><span class=""mi"">r</span></span></span><span><sup>3</sup></span><span>t</span></pre>
    <p>Where . . .</p>
    <ul>
        <li style=""list-style-type: none;"">
            <ul>
                <li><strong><span></span></strong><span>&nbsp;</span>is the mathematical constant (<span>see the HINT
                        for more details)</span></li>
                <li><span><strong>r</strong>&nbsp;is the radius of the cylinder</span></li>
                <li><span><strong>t</strong> is the number of spheres</span></li>
            </ul>
        </li>
    </ul>
    <p>&nbsp;</p>
    <p>Store the answer in a variable called<span><strong>&nbsp;volume</strong>.&nbsp; You do not need to print the
            variable.</span></p>
    <p>&nbsp;</p>
    <p><strong>HINT:</strong><strong></strong></p>
    <p>The math module contains the mathematical constant,<span>&nbsp;</span><span></span>.&nbsp; To use it, simply
        type<span>&nbsp;</span><span><strong>math.pi</strong></span></p>
</div>","from cs110 import autograder
import random, math

from a1_2_spheres import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (4/3) * (radius**3)*total
    file = open(""a1_2_spheres.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see if variable 'volume' exists . . . "", end='')
    if 'volume' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'volume' . . . "", end='')
        if 'volume' in globals() and autograder.equals(volume, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
437,a1_2_radius,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Write a program that calculates the area of multiple circles.&nbsp; The template provided to you defines 2
        variables:</p>
    <ul>
        <li><span><strong>radius</strong>&nbsp;</span>- radius of the circle</li>
        <li><span><strong>total</strong>&nbsp;</span>- The number of circles</li>
    </ul>
    <p>&nbsp;</p>
    <p>Calculate the area, using the following formula:</p>
    <pre class=""lr-fy-ecl lr-fy-eq-elem""
        data-var=""V""><span><span id=""MathJax-Span-34"" class=""mi"">A</span><span id=""MathJax-Span-35"" class=""mo"">=</span><span id=""MathJax-Span-39"" class=""mi""></span><span class=""msup""><span class=""mi"">r<sup>2</sup></span></span></span><span>t</span></pre>
    <p>Where . . .</p>
    <ul>
        <li style=""list-style-type: none;"">
            <ul>
                <li><strong><span></span></strong><span>&nbsp;</span>is the mathematical constant (s<span>ee the HINT
                        for more details)</span></li>
                <li><span><strong>r</strong> is the radius of the circle</span></li>
                <li><span><strong>t</strong> is the number of circles</span></li>
            </ul>
        </li>
    </ul>
    <p>&nbsp;</p>
    <p>Store the answer in a variable called<span><strong> area</strong>.&nbsp; You do not need to print the
            variable.</span></p>
    <p>&nbsp;</p>
    <p><strong>HINT:</strong><strong></strong></p>
    <p>The math module contains the mathematical constant,<span>&nbsp;</span><span></span>.&nbsp; To use it, simply
        type<span>&nbsp;</span><span><strong>math.pi</strong></span></p>
</div>
<div class=""variable_definitions_holder calculated_question_answers"" style=""display: none;"">
    <div class=""calculated_question_answers_header"">Variables</div>
    <div class=""calculated_question_answers_content"">
        <table class=""variable_definitions"">
            <thead>
                <tr>
                    <th>Variable</th>
                    <th>Min</th>
                    <th>Max</th>
                    <th>Decimal Places</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>
<div class=""formulas_holder calculated_question_answers"" style=""display: none;"">
    <div class=""calculated_question_answers_header"">Formulas</div>
    <div class=""calculated_question_answers_content"">
        <div class=""formulas_list"">
        </div>
    </div>
</div>
<div class=""equation_combinations_holder_holder calculated_question_answers"" style=""display: none;"">
    <div style=""display: none;"" class=""answer_tolerance"">0</div>
    <div style=""display: none;"" class=""formula_decimal_places"">0</div>
    <div class=""calculated_question_answers_header"">Possible Solutions</div>
    <div class=""calculated_question_answers_content equation_combinations_holder"">
        <table class=""equation_combinations"">
        </table>
    </div>
</div>
<div class=""multiple_answer_sets_holder"" style=""display: none;"">
    Show Answers for <select class=""blank_id_select"">
    </select>
</div>
<div class=""answers"">
    <div class=""answers_wrapper"">

    </div>
</div>
<div class=""after_answers"">
</div>
</div>","from cs110 import autograder
import random, math

from a1_2_radius import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (radius**2) * height * total
    file = open(""a1_2_radius.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see areif variable 'volume' exists . . . "", end='')
    if 'volume' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'volume' . . . "", end='')
        if 'volume' in globals() and autograder.equals(volume, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
438,a1_2_interest,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p>You are trying to write a program that calculates the amount of money a person will earn from an investment.&nbsp; The template provided to you defines 3 variables:</p>
<ul>
<li><span><strong>principal_amount</strong>&nbsp;</span>- The principal (i.e., starting) amount of money that a person has</li>
<li><span><strong>interest_rate</strong></span><span>&nbsp;</span>- The interest rate</li>
<li><span><strong>time</strong>&nbsp;</span>- The length of the investment (in months)</li>
</ul>
<p>&nbsp;</p>
<p>Calculate the amount of money earned, using the following formula:</p>
<pre><span>amount = pe<sup>rt</sup></span></pre>
<p>Where . . .</p>
<ul>
<li>
<ul>
<li><strong>p</strong><span>&nbsp;</span>is the principal amount</li>
<li><strong>e</strong><span>&nbsp;</span>is the mathematical constant (approximately equal to<span>&nbsp;</span><span>2.718... -- see the HINT for more details)</span></li>
<li><span><strong>r</strong>&nbsp;is the interest rate</span></li>
<li><span><strong>t</strong>&nbsp;is the time</span></li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Store the answer in a variable called<span>&nbsp;</span><span><strong>amount.&nbsp;&nbsp;</strong>You do not need to print the variable.</span></p>
<p>&nbsp;</p>
<p><strong>HINT:</strong><strong></strong></p>
<p>The math module contains the mathematical constant, e.&nbsp; To use it, simply type<span>&nbsp;</span><span><strong>math.e</strong></span></p>
</div>","from cs110 import autograder
import random, math

from a1_2_interest import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = principal_amount * math.e**(interest_rate * time)
    file = open(""a1_2_interest.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see if variable 'amount' exists . . . "", end='')
    if 'amount' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.e' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'amount' . . . "", end='')
        if 'amount' in globals() and autograder.equals(amount, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
439,a1_2_cones,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Write a program that calculates the volume of multiple identical cones.&nbsp; The template provided to you
        defines 3 variables:</p>
    <ul>
        <li><span><strong>radius</strong>&nbsp;</span>- radius of the cones</li>
        <li><span><strong>height</strong></span>- height of the cones</li>
        <li><span><strong>total</strong>&nbsp;</span>- The number of cones</li>
    </ul>
    <p>&nbsp;</p>
    <p>Calculate the volume, using the following formula:</p>
    <pre class=""lr-fy-ecl lr-fy-eq-elem""
        data-var=""V"">V =<span>&nbsp;</span><span>&nbsp;</span><span>r</span><sup><span>2</span></sup><span>(</span><span>h/3)t</span></pre>
    <p>Where . . .</p>
    <ul>
        <li style=""list-style-type: none;"">
            <ul>
                <li><strong><span></span></strong><span>&nbsp;</span>is the mathematical constant (<span>see the HINT
                        for more details)</span></li>
                <li><span><strong>r</strong>&nbsp;is the radius of the cones</span></li>
                <li><strong>h&nbsp;</strong>is the height of the cones</li>
                <li><span><strong>t</strong>&nbsp;is the total amount of cones</span></li>
            </ul>
        </li>
    </ul>
    <p>&nbsp;</p>
    <p>Store the answer in a variable called<span><strong> volume</strong>.&nbsp; You do not need to print the
            variable.</span></p>
    <p>&nbsp;</p>
    <p><strong>HINT:</strong><strong></strong></p>
    <p>The math module contains the mathematical constant, <span></span>.&nbsp; To use it, simply
        type<span>&nbsp;</span><span><strong>math.pi</strong></span></p>
</div>","from cs110 import autograder
import random, math

from a1_2_cones import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (radius**2) * (height/3) * total
    file = open(""a1_2_cones.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see if variable 'volume' exists . . . "", end='')
    if 'volume' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'volume' . . . "", end='')
        if 'volume' in globals() and autograder.equals(volume, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
440,a1_2_circles,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Write a program that calculates the area of multiple circles.&nbsp; The template provided to you defines 2
        variables:</p>
    <ul>
        <li><span><strong>radius</strong>&nbsp;</span>- radius of the circle</li>
        <li><span><strong>total</strong>&nbsp;</span>- The number of circles</li>
    </ul>
    <p>&nbsp;</p>
    <p>Calculate the area, using the following formula:</p>
    <pre class=""lr-fy-ecl lr-fy-eq-elem""
        data-var=""V""><span><span id=""MathJax-Span-34"" class=""mi"">A</span><span id=""MathJax-Span-35"" class=""mo"">=</span><span id=""MathJax-Span-39"" class=""mi""></span><span class=""msup""><span class=""mi"">r<sup>2</sup></span></span></span><span>t</span></pre>
    <p>Where . . .</p>
    <ul>
        <li style=""list-style-type: none;"">
            <ul>
                <li><strong><span></span></strong><span>&nbsp;</span>is the mathematical constant (s<span>ee the HINT
                        for more details)</span></li>
                <li><span><strong>r</strong> is the radius of the circle</span></li>
                <li><span><strong>t</strong> is the number of circles</span></li>
            </ul>
        </li>
    </ul>
    <p>&nbsp;</p>
    <p>Store the answer in a variable called<span><strong> area</strong>.&nbsp; You do not need to print the
            variable.</span></p>
    <p>&nbsp;</p>
    <p><strong>HINT:</strong><strong></strong></p>
    <p>The math module contains the mathematical constant,<span>&nbsp;</span><span></span>.&nbsp; To use it, simply
        type<span>&nbsp;</span><span><strong>math.pi</strong></span></p>
</div>
<div class=""variable_definitions_holder calculated_question_answers"" style=""display: none;"">
    <div class=""calculated_question_answers_header"">Variables</div>
    <div class=""calculated_question_answers_content"">
        <table class=""variable_definitions"">
            <thead>
                <tr>
                    <th>Variable</th>
                    <th>Min</th>
                    <th>Max</th>
                    <th>Decimal Places</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>
<div class=""formulas_holder calculated_question_answers"" style=""display: none;"">
    <div class=""calculated_question_answers_header"">Formulas</div>
    <div class=""calculated_question_answers_content"">
        <div class=""formulas_list"">
        </div>
    </div>
</div>
<div class=""equation_combinations_holder_holder calculated_question_answers"" style=""display: none;"">
    <div style=""display: none;"" class=""answer_tolerance"">0</div>
    <div style=""display: none;"" class=""formula_decimal_places"">0</div>
    <div class=""calculated_question_answers_header"">Possible Solutions</div>
    <div class=""calculated_question_answers_content equation_combinations_holder"">
        <table class=""equation_combinations"">
        </table>
    </div>
</div>
<div class=""multiple_answer_sets_holder"" style=""display: none;"">
    Show Answers for <select class=""blank_id_select"">
    </select>
</div>
<div class=""answers"">
    <div class=""answers_wrapper"">

    </div>
</div>
<div class=""after_answers"">
</div>
</div>","from cs110 import autograder
import random, math

from a1_2_circles import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (radius**2)*total
    file = open(""a1_2_circles.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see if variable 'area' exists . . . "", end='')
    if 'area' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'area' . . . "", end='')
        if 'area' in globals() and autograder.equals(area, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
441,a1_1_squad,3,skill,1,"<html><head/><body><p><span style="" font-weight:600;"">PROBLEM STATEMENT:<br/></span></p><p>Write the Python code needed to get three values from the user:</p><ol style=""margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;""><li style="" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"">A string representing the name of a cadet squadron (e.g., Grim Reapers). Store this value in a variable called<span style="" font-weight:600;""> sqd_name</span></li><li style="" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"">A floating point value representing average age for all cadets in the squadron. Store this value in a variable called <span style="" font-weight:600;"">sqd_avg_age</span></li><li style="" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"">An integer representing the weight of the ICBM in kilograms. Store this value in a variable called <span style="" font-weight:600;"">sqd_number</span></li></ol><p><span style="" font-weight:600;"">IMPORTANT:</span> Your template file contains a print statement that combines these values to produce an output (see Example). <span style="" font-weight:600;"">Do not modify this line.</span> Simply add your input statements in the space provided.</p><p><span style="" font-weight:600;"">EXAMPLE:</span></p><p>If the user types &quot;Grim Reapers&quot;, 20.5, and 31, your program should print: </p><pre style="" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;""><span style="" font-family:'Courier New';"">Cadet Squadron 31, aka &quot;Grim Reapers&quot;,</span></pre><pre style="" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;""><span style="" font-family:'Courier New';""> has an average cadet age of 20.5.</span></pre><p><br/></p></body></html>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    squad_list = [(""Warhawks"", 21.2, 40), (""Barnstormers"", 19.2, 23), (""Black Panthers"", 20.7, 29), (""Dogs of War"", 21.1, 3)]
    squad = squad_list[random.randint(0, len(squad_list) - 1)]
    solution = ""The \""%s\"" has an average cadet age of %1.1f and is Squadron %i."" % (squad[0], squad[1], squad[2])
    
    output, error_message = autograder.run_script(""a1_1_squad.py"", [squad[0], squad[1], squad[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
442,a1_1_icbm,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write the Python code needed to get three values from the user:</p>
<ol>
<li>A string representing the name of an Intercontinental Ballistic Missile (ICBM) (e.g., Minuteman). Store this value in a variable called<strong>&nbsp;icbm</strong><strong>_name</strong></li>
<li>A floating point value representing the length of this missile in meters. Store this value in a variable called&nbsp;<strong>icbm_length</strong></li>
<li>An integer representing the weight of the ICBM in kilograms. Store this value in a variable called&nbsp;<strong>icbm_weight</strong></li>
</ol>
<p><strong>IMPORTANT:</strong> Your template file contains a print statement that combines these values to produce an output (see Example). <strong>Do not modify this line.</strong> Simply add your input statements in the space provided.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types ""Minuteman"", 16.3, and 290000, your program should print:</p>
<pre>The Minuteman has a total length of 16.3 meters and it weighs 290000 kilograms.</pre>
</div>
","#import cs110,
import random, math
from cs110 import autograder
num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    icbm_list = [(""Peacekeeper"", 21.8, 88450), (""Minuteman"", 16.36, 29000), (""Titan"", 31.394, 155000)]
    icbm = icbm_list[random.randint(0, len(icbm_list) - 1)]
    solution = ""The %s has a total length of %1.1f meters and it weighs %d kilograms."" % (icbm[0], icbm[1], icbm[2])
    
    output, error_message = autograder.run_script(""a1_1_icbm.py"", [icbm[0], icbm[1], icbm[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
443,a1_1_dorms,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write the Python code needed to get three values from the user:</p>
<ol>
<li>A string representing the name of an USAFA dormitory (e.g., Vandenburg). Store this value in a variable called<strong> dorm</strong><strong>_name</strong></li>
<li>A floating point value representing the total area, in square feet, that the dormitory contains. Store this value in a variable called <strong>dorm_area</strong></li>
<li>An integer representing the number cadets living in this dormitory. Store this value in a variable called <strong>dorm_population</strong></li>
</ol>
<p><strong>IMPORTANT:</strong> Your template file contains a print statement that combines these values to produce an output (see Example). <strong>Do not modify this line.</strong> Simply add your input statements in the space provided.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types ""Vandenberg"", 63383.5, and 1720, your program should print:</p>
<pre>The Vandenburg dormitory has an area of 63383.5 square feet and has 1720 cadets living in it.</pre>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    dorm_list = [(""Vandenburg"", 111874.79, 2212), (""Sijan"", 124488.97, 2112)]
    dorm = dorm_list[random.randint(0, len(dorm_list) - 1)]
    solution = ""The %s dormitory has an area of %1.1f square feet and has %d cadets living in it."" % (dorm[0], dorm[1], dorm[2])
    
    output, error_message = autograder.run_script(""a1_1_dorms.py"", [dorm[0], dorm[1], dorm[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
444,a1_1_cadet,3,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p>Write the Python code needed to get three values from the user:</p>
<ol>
<li>A string representing the users name.&nbsp; Store this value in a variable called<strong><span> cadet</span></strong><span><strong>_name</strong></span></li>
<li>A floating point value representing their height in meters.&nbsp; Store this value in a variable called<span> <strong>cadet_height</strong></span></li>
<li>An integer representing their weight.&nbsp; Store this value in a variable called <strong>cadet_weight</strong></li>
</ol>
<p><strong>IMPORTANT:</strong>&nbsp; Your template file contains a print statement that combines these values to produce an output (see Example).&nbsp;<span>&nbsp;</span><strong>Do not modify this line.</strong>&nbsp; Simply add your input statements in the space provided.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong><strong></strong></p>
<p>If the user types ""Snuffy"", 2.1, and 185, your program should print:</p>
<pre>Cadet Snuffy is 2.1 meters tall and weighs 180 lbs.</pre>
</div>","#import cs110,
import random, math
from cs110 import autograder
num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    cadet_list = [(""Snuffy"", 2.1, 185), (""Smith"", 1.9, 205), (""Green"", 2.0, 155)]
    cadet = cadet_list[random.randint(0, len(cadet_list) - 1)]
    solution = ""Cadet %s is %1.1f meters tall and weighs %d lbs."" % (cadet[0], cadet[1], cadet[2])
        
    output, error_message = autograder.run_script(""a1_1_cadet.py"", [cadet[0], cadet[1], cadet[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
445,a1_1_bases,3,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write the Python code needed to get three values from the user:</p>
<ol>
<li>A string representing the name of an Air Force Base (e.g., Travis). Store this value in a variable called<strong>&nbsp;base</strong><strong>_name</strong></li>
<li>A floating point value representing the area of this base in acres. Store this value in a variable called&nbsp;<strong>base_acres</strong></li>
<li>An integer representing the number of buildings on this base. Store this value in a variable called&nbsp;<strong>building_</strong><strong>quantity</strong></li>
</ol>
<p><strong>IMPORTANT:</strong> Your template file contains a print statement that combines these values to produce an output (see Example). <strong>Do not modify this line.</strong> Simply add your input statements in the space provided.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types ""Travis"", 6383.5, and 1720, your program should print:</p>
<pre>Travis Air Force Base sits on 6383.5 acres and has 1720 buildings on it.</pre>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    base_list = [(""Travis"", 1874.79, 1288), (""Barksdale"", 1488.97, 1680), (""Eglin"", 1611.08, 1388)]
    base = base_list[random.randint(0, len(base_list) - 1)]
    solution = ""%s Air Force Base sits on %1.1f acres and has %d buildings on it."" % (base[0], base[1], base[2])
    
    output, error_message = autograder.run_script(""a1_1_bases.py"", [base[0], base[1], base[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
446,a1_1_aircraft,3,skill,1,"<div>
<p>&nbsp;</p>
<p>Write the Python code needed to get three values from the user:</p>
<ol>
<li>A string representing the name of an aircraft (e.g., F-16). Store this value in a variable called&nbsp;<strong>aircraft_name</strong></li>
<li>A floating point value representing the maximum speed of the aircraft. Store this value in a variable called&nbsp;<strong>aircraft_speed</strong></li>
<li>An integer representing the number of airplanes of this type owned by the USAF. Store this value in a variable called&nbsp;<strong>quantity</strong></li>
</ol>
<p><strong>IMPORTANT:</strong> Your template file contains a print statement that combines these values to produce an output (see Example). <strong>Do not modify this line.</strong> Simply add your input statements in the space provided.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types ""F-16"", 1500.1, and 600, your program should print:</p>
<pre>The F-16 has a top speed of 1500.1 MPH. The USAF has 600 in its inventory. </pre>
</div>
","#import cs110,
import random, math
from cs110 import autograder
num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    aircraft_list = [(""F-15"", 1874.79, 288), (""F-16"", 1488.97, 680), (""F-22"", 1611.08, 88)]
    aircraft = aircraft_list[random.randint(0, len(aircraft_list) - 1)]
    solution = ""The %s has a top speed of %1.1f MPH.  The USAF has %d in its inventory."" % (aircraft[0], aircraft[1], aircraft[2])
    
    output, error_message = autograder.run_script(""a1_1_aircraft.py"", [aircraft[0], aircraft[1], aircraft[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
447,CS110_Ingenuity_Simulator_Spiral_1,4,project,0,"<div>
    <h2 style=""text-align: center;"">Comp Sci 110 Spring 2022 Course Project</h2>
    <p>Objective:  Create a flight simulator for NASA's Ingenuity helicopter to develop flight control skills and an auto-pilot to maximize mapped area.</p>
    <p>Instructions: Read writeup (Writeup.pdf) and use the Project Template File to begin work. Upon completion of each project spiral, upload both your Test Procedures MS Word document and your Python Code to the respective assignment.</p>
    <br>
    <div>
        <h3 style=""text-align: center;"">Spiral 1 Submission</h3>
        <p><span><strong>TURN IN INSTRUCTIONS</strong></span></p>
        <p>You will submit the following two files for this portion of the project.</p>
        <ol>
        <li style=""padding-bottom: 20px;""><strong>Spiral Test Procedures and Results:<span>&nbsp;</span><span>&nbsp;</span> </strong>Test Procedures &amp; Results MS Word document using the naming convention of LASTNAME_FIRSTNAME_Tests_Spiral_N.docx, so Jane Smiths Spiral 1 Test Procedures and Results file would be named, Smith_Jane_Tests_Spiral_1.docx.&nbsp; <span style=""text-decoration: underline;"">NOTE: Each Spirals Test Procedures &amp; Results needs to include the previous Spiral(s) entries. If the results for any of the previous Spirals have changed, they should be updated accordingly.</span></li>
        <li style=""padding-bottom: 20px;""><strong>Code Submission:</strong><span>&nbsp;</span><span>&nbsp;</span><span> Ingenuity simulator Python code using the naming convention of CS110_Ingenuity_Simulator_Spiral_N.py with N as the Spiral number. For example, your Spiral 1 Python file should be named CS110_Ingenuity_Simulator_Spiral_1.py. <span style=""text-decoration: underline;"">Importantly, be sure that your name is in the initial comments within your file.</span></span></li>
        <li style=""padding-bottom: 20px;"">(Optional) <strong>Support Files:</strong>&nbsp; For example image files.</li>
        </ol>
        <hr>
        <p><span><strong>HELP POLICY</strong></span></p>
        <ul>
        <li style=""list-style-type: none;"">
        <ul>
        <li><span><strong>AUTHORIZ</strong><strong>ED</strong></span><strong><span>&nbsp;</span><span>&nbsp;RESOURCES:</span><span>&nbsp;</span><span>&nbsp;</span> </strong>Any, except another cadets code or test procedures.</li>
        <li><span><strong>NOTE:</strong></span>
        <ul>
        <li>Never copy another persons work and submit it as your own.</li>
        <li>Do not jointly create a program.</li>
        <li>You must document all help received from sources other than an instructor.</li>
        <li>DFCS will recommend a course grade of F for any cadet who egregiously violates this Help Policy or contributes to a violation by others.</li>
        </ul>
        </li>
        </ul>
        </li>
        </ul>
        <hr>
        <p><span><strong>DOCUMENTATION POLICY</strong></span></p>
        <ul>
        <li style=""list-style-type: none;"">
        <ul>
        <li>Provide your Documentation Statement at the beginning of your <span style=""text-decoration: underline;"">Test Procedures &amp; Results file</span> with each Spiral.</li>
        <li>The documentation statement must explicitly describe<span>&nbsp;</span><strong>what</strong><span>&nbsp;</span>assistance was provided,<span>&nbsp;</span><strong>where&nbsp;</strong>the in the assignment the assistance was provided (e.g. line numbers), and<span>&nbsp;</span><strong>who</strong><span>&nbsp;</span>provided the assistance.</li>
        <li>If no help was received on this assignment, the documentation statement must state ""NONE"".</li>
        <li><span><strong>Vague documentation statements must be corrected before the assignment will be graded, and will result in an up to 5% deduction on the assignment.</strong></span></li>
        </ul>
        </li>
        </ul>
        <hr>
        <p><span><strong>LATE POLICY</strong></span></p>
        <ul>
        <li style=""list-style-type: none;"">
        <ul>
        <li>25% deduction for every 24-hours late (not prorated).</li>
        </ul>
        </li>
        </ul>
</div>
","from cs110 import autograder
import random, math

# ---------------------------------------------------------------------
# Sample Unit Test
# ---------------------------------------------------------------------

# OPTIONAL: Custom Behavior Flags
# Used by the Autograder to Customize its Runtime Behavior
__flags__ = {""audit"":True,
             ""show_input"":True,
             ""show_output"":True,
             ""show_error"":True,
             ""show_feedback"":True,
             ""show_score"":True}

# Runs the Python script and sees if it passes the test(s)
def test_passed():

    print(""Ran test"")
        
    return 100.0
        

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    # Deprecated:  Just calls test_passed() directly
    # Flags will not be processed this way
    #points_earned = test_passed()
    
    # New Way to Run Testcases (if you have flags)
    autograder.run_testcases(test_passed, {}, __flags__, False)
    
    # Alternative Way to Run Testcases (if you just want to use the default flags)
    #autograder.run_testcases(test_passed, {}, {}, False)",0,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,
448,CS110_Ingenuity_Simulator_Spiral_2,4,project,0,"<div>
    <h2 style=""text-align: center;"">Comp Sci 110 Spring 2022 Course Project</h2>
    <p>Objective:  Create a flight simulator for NASA's Ingenuity helicopter to develop flight control skills and an auto-pilot to maximize mapped area.</p>
    <p>Instructions: Read writeup (Writeup.pdf) and use the Project Template File to begin work. Upon completion of each project spiral, upload both your Test Procedures MS Word document and your Python Code to the respective assignment.</p>
    <br>
    <div>
        <h3 style=""text-align: center;"">Spiral 2 Submission</h3>
        <p><span><strong>TURN IN INSTRUCTIONS</strong></span></p>
        <p>You will submit the following two files for this portion of the project.</p>
        <ol>
        <li style=""padding-bottom: 20px;""><strong>Spiral Test Procedures and Results:<span>&nbsp;</span><span>&nbsp;</span> </strong>Test Procedures &amp; Results MS Word document using the naming convention of LASTNAME_FIRSTNAME_Tests_Spiral_N.docx, so Jane Smiths Spiral 2 Test Procedures and Results file would be named, Smith_Jane_Tests_Spiral_2.docx.&nbsp; <span style=""text-decoration: underline;"">NOTE: Each Spirals Test Procedures &amp; Results needs to include the previous Spiral(s) entries. If the results for any of the previous Spirals have changed, they should be updated accordingly.</span></li>
        <li style=""padding-bottom: 20px;""><strong>Code Submission:</strong><span>&nbsp;</span><span>&nbsp;</span><span> Ingenuity simulator Python code using the naming convention of CS110_Ingenuity_Simulator_Spiral_N.py with N as the Spiral number. For example, your Spiral 1 Python file should be named CS110_Ingenuity_Simulator_Spiral_1.py. <span style=""text-decoration: underline;"">Importantly, be sure that your name is in the initial comments within your file.</span></span></li>
        <li style=""padding-bottom: 20px;"">(Optional) <strong>Support Files:</strong>&nbsp; For example image files.</li>
        </ol>
        <hr>
        <p><span><strong>HELP POLICY</strong></span></p>
        <ul>
        <li style=""list-style-type: none;"">
        <ul>
        <li><span><strong>AUTHORIZ</strong><strong>ED</strong></span><strong><span>&nbsp;</span><span>&nbsp;RESOURCES:</span><span>&nbsp;</span><span>&nbsp;</span> </strong>Any, except another cadets code or test procedures.</li>
        <li><span><strong>NOTE:</strong></span>
        <ul>
        <li>Never copy another persons work and submit it as your own.</li>
        <li>Do not jointly create a program.</li>
        <li>You must document all help received from sources other than an instructor.</li>
        <li>DFCS will recommend a course grade of F for any cadet who egregiously violates this Help Policy or contributes to a violation by others.</li>
        </ul>
        </li>
        </ul>
        </li>
        </ul>
        <hr>
        <p><span><strong>DOCUMENTATION POLICY</strong></span></p>
        <ul>
        <li style=""list-style-type: none;"">
        <ul>
        <li>Provide your Documentation Statement at the beginning of your <span style=""text-decoration: underline;"">Test Procedures &amp; Results file</span> with each Spiral.</li>
        <li>The documentation statement must explicitly describe<span>&nbsp;</span><strong>what</strong><span>&nbsp;</span>assistance was provided,<span>&nbsp;</span><strong>where&nbsp;</strong>the in the assignment the assistance was provided (e.g. line numbers), and<span>&nbsp;</span><strong>who</strong><span>&nbsp;</span>provided the assistance.</li>
        <li>If no help was received on this assignment, the documentation statement must state ""NONE"".</li>
        <li><span><strong>Vague documentation statements must be corrected before the assignment will be graded, and will result in an up to 5% deduction on the assignment.</strong></span></li>
        </ul>
        </li>
        </ul>
        <hr>
        <p><span><strong>LATE POLICY</strong></span></p>
        <ul>
        <li style=""list-style-type: none;"">
        <ul>
        <li>25% deduction for every 24-hours late (not prorated).</li>
        </ul>
        </li>
        </ul>
</div>
","from cs110 import autograder
import random, math

# ---------------------------------------------------------------------
# Sample Unit Test
# ---------------------------------------------------------------------

# OPTIONAL: Custom Behavior Flags
# Used by the Autograder to Customize its Runtime Behavior
__flags__ = {""audit"":True,
             ""show_input"":True,
             ""show_output"":True,
             ""show_error"":True,
             ""show_feedback"":True,
             ""show_score"":True}

# Runs the Python script and sees if it passes the test(s)
def test_passed():

    print(""Ran test"")
        
    return 100.0
        

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    # Deprecated:  Just calls test_passed() directly
    # Flags will not be processed this way
    #points_earned = test_passed()
    
    # New Way to Run Testcases (if you have flags)
    autograder.run_testcases(test_passed, {}, __flags__, False)
    
    # Alternative Way to Run Testcases (if you just want to use the default flags)
    #autograder.run_testcases(test_passed, {}, {}, False)",0,0,0,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,
449,CS110_Ingenuity_Simulator_Spiral_3,4,project,0,"<div>
    <h2 style=""text-align: center;"">Comp Sci 110 Spring 2022 Course Project</h2>
    <p>Objective:  Create a flight simulator for NASA's Ingenuity helicopter to develop flight control skills and an auto-pilot to maximize mapped area.</p>
    <p>Instructions: Read writeup (Writeup.pdf) and use the Project Template File to begin work. Upon completion of each project spiral, upload both your Test Procedures MS Word document and your Python Code to the respective assignment.</p>
    <br>
    <div>
        <h3 style=""text-align: center;"">Spiral 3 Submission</h3>
        <p><span><strong>TURN IN INSTRUCTIONS</strong></span></p>
        <p>You will submit the following two files for this portion of the project.</p>
        <ol>
        <li style=""padding-bottom: 20px;""><strong>Spiral Test Procedures and Results:<span>&nbsp;</span><span>&nbsp;</span> </strong>Test Procedures &amp; Results MS Word document using the naming convention of LASTNAME_FIRSTNAME_Tests_Spiral_N.docx, so Jane Smiths Spiral 2 Test Procedures and Results file would be named, Smith_Jane_Tests_Spiral_2.docx.&nbsp; <span style=""text-decoration: underline;"">NOTE: Each Spirals Test Procedures &amp; Results needs to include the previous Spiral(s) entries. If the results for any of the previous Spirals have changed, they should be updated accordingly.</span></li>
        <li style=""padding-bottom: 20px;""><strong>Code Submission:</strong><span>&nbsp;</span><span>&nbsp;</span><span> Ingenuity simulator Python code using the naming convention of CS110_Ingenuity_Simulator_Spiral_N.py with N as the Spiral number. For example, your Spiral 1 Python file should be named CS110_Ingenuity_Simulator_Spiral_1.py. <span style=""text-decoration: underline;"">Importantly, be sure that your name is in the initial comments within your file.</span></span></li>
        <li style=""padding-bottom: 20px;"">(Optional) <strong>Support Files:</strong>&nbsp; For example image files.</li>
        </ol>
        <hr>
        <p><span><strong>HELP POLICY</strong></span></p>
        <ul>
        <li style=""list-style-type: none;"">
        <ul>
        <li><span><strong>AUTHORIZ</strong><strong>ED</strong></span><strong><span>&nbsp;</span><span>&nbsp;RESOURCES:</span><span>&nbsp;</span><span>&nbsp;</span> </strong>Any, except another cadets code or test procedures.</li>
        <li><span><strong>NOTE:</strong></span>
        <ul>
        <li>Never copy another persons work and submit it as your own.</li>
        <li>Do not jointly create a program.</li>
        <li>You must document all help received from sources other than an instructor.</li>
        <li>DFCS will recommend a course grade of F for any cadet who egregiously violates this Help Policy or contributes to a violation by others.</li>
        </ul>
        </li>
        </ul>
        </li>
        </ul>
        <hr>
        <p><span><strong>DOCUMENTATION POLICY</strong></span></p>
        <ul>
        <li style=""list-style-type: none;"">
        <ul>
        <li>Provide your Documentation Statement at the beginning of your <span style=""text-decoration: underline;"">Test Procedures &amp; Results file</span> with each Spiral.</li>
        <li>The documentation statement must explicitly describe<span>&nbsp;</span><strong>what</strong><span>&nbsp;</span>assistance was provided,<span>&nbsp;</span><strong>where&nbsp;</strong>the in the assignment the assistance was provided (e.g. line numbers), and<span>&nbsp;</span><strong>who</strong><span>&nbsp;</span>provided the assistance.</li>
        <li>If no help was received on this assignment, the documentation statement must state ""NONE"".</li>
        <li><span><strong>Vague documentation statements must be corrected before the assignment will be graded, and will result in an up to 5% deduction on the assignment.</strong></span></li>
        </ul>
        </li>
        </ul>
        <hr>
        <p><span><strong>LATE POLICY</strong></span></p>
        <ul>
        <li style=""list-style-type: none;"">
        <ul>
        <li>25% deduction for every 24-hours late (not prorated).</li>
        </ul>
        </li>
        </ul>
</div>
","from cs110 import autograder
import random, math

# ---------------------------------------------------------------------
# Sample Unit Test
# ---------------------------------------------------------------------

# OPTIONAL: Custom Behavior Flags
# Used by the Autograder to Customize its Runtime Behavior
__flags__ = {""audit"":True,
             ""show_input"":True,
             ""show_output"":True,
             ""show_error"":True,
             ""show_feedback"":True,
             ""show_score"":True}

# Runs the Python script and sees if it passes the test(s)
def test_passed():

    print(""Ran test"")
        
    return 100.0
        

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    # Deprecated:  Just calls test_passed() directly
    # Flags will not be processed this way
    #points_earned = test_passed()
    
    # New Way to Run Testcases (if you have flags)
    autograder.run_testcases(test_passed, {}, __flags__, False)
    
    # Alternative Way to Run Testcases (if you just want to use the default flags)
    #autograder.run_testcases(test_passed, {}, {}, False)",0,0,0,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,
450,a2_6_attack,4,lab,1,"<div>

<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset containing information about various types of Pokemon. Here is an example entry from the file:</p>
<pre>25, Pikachu, Electric, 35, 55, 40, 50, 50, 90, 1, FALSE</pre>
<p>&nbsp;</p>
<p>Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>ID</strong></td>
<td><strong>Name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Hit Points</strong></td>
<td><strong>Attack</strong></td>
<td><strong>Defense</strong></td>
<td><strong>Special Attack</strong></td>
<td><strong>Special Defense</strong></td>
<td><strong>Speed</strong></td>
<td><strong>Generation</strong></td>
<td><strong>Legendary</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td>25</td>
<td>Pikachu</td>
<td>Electric</td>
<td>35</td>
<td>55</td>
<td>40</td>
<td>50</td>
<td>50</td>
<td>90</td>
<td>1</td>
<td>False</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a program that asks the user for:</p>
<ul>
<li>a Pokemon Type (e.g., ""Electric"").&nbsp;</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then analyze the file and print:</p>
<ul>
<li>The highest attack rating from a Pokemon with the matching type</li>
<li>The name of the Pokemon with the highest attack rating. In the event of a tie, print out the name of the FIRST Pokemon with the highest attack value.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the Electric Pokemon with the highest attack rating is Raichu (with an attack of 90.0), your program should print out:</p>
<pre>90.0<br />Raichu</pre>
<p>&nbsp;</p>
<p>NOTE: The above answer is purely hypothetical. Your answer will be different.</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

solution_filename = ""a2_6_attack.py""

# def solution(pokemon_type):
#     file = open(""pokemon.csv"", ""r"")
#     file_contents = file.read()
#     lines = file_contents.split('\n')
# 
#     highest_value = -999
#     highest_name = ""UNKNOWN""
# 
#     for line in lines:
#         columns = line.split(',')
#         p_name  = columns[1]
#         p_type  = columns[2]
#         p_value = float(columns[4])
#         
#         if p_type == pokemon_type:
#             if p_value > highest_value:
#                 highest_value = p_value
#                 highest_name = p_name
# 
#     return (highest_value, highest_name)


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    # static input and corresponding expected output
    test_cases = dict()
    test_cases[""Steel""] = (150.0, ""AegislashBlade Forme"")
    test_cases[""Rock""] = (165.0, ""Rampardos"")
    test_cases[""Ice""] = (130.0, ""Mamoswine"")
    test_cases[""Fairy""] = (131.0, ""Xerneas"")
    test_cases[""Water""] = (155.0, ""GyaradosMega Gyarados"")
    test_cases[""Bug""] = (185.0, ""HeracrossMega Heracross"")
    test_cases[""Dark""] = (150.0, ""AbsolMega Absol"")
    test_cases[""Dragon""] = (180.0, ""RayquazaMega Rayquaza"")
    
        
    # shuffle the possible inputs
    test_case_input = list(test_cases.keys())
    case_order = list(range(len(test_case_input)))
    random.shuffle(case_order)
    
    # choose 5 of the randomly sorted 
    case_indices_used = case_order[:5]
    
    score = 0
    
    test_run_num = 1
    for idx in case_indices_used:
        print('\n' + '='*30)
        print("" ""*10+""Test Case #"" + str(test_run_num))
        print('='*30)
        
        try:
            output, error = autograder.run_script(solution_filename, [test_case_input[idx]])
            expected_output = test_cases[test_case_input[idx]]  
            
            lines = output.strip().split('\n')
            
            if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
                print(""Highest Value Correct"")
                score += 50 / len(case_indices_used)
            else:
                print(""Highest Value Incorrect or not in the expected location.  Expected:"", expected_output[0])
            
            if len(lines) > 1 and lines[1] == expected_output[1]:
                print(""Name is Correct"")
                score += 50 / len(case_indices_used)
            elif len(lines) > 0 and expected_output[1] in lines:
                print(""Name is Correct"")
                score += 50 / len(case_indices_used)
            else:
                print(""Name is Incorrect or not in the expected location.  Expected:"", expected_output[1])
        except Exception as e:
            print(""ERROR occured when running your solution."")
            print(e)
                
        test_run_num += 1
    
    return score    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
451,a2_6_lowest_spec_attack,4,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset containing information about various types of Pokemon. Here is an example entry from the file:</p>
<pre>25, Pikachu, Electric, 35, 55, 40, 50, 50, 90, 1, FALSE</pre>
<p>&nbsp;</p>
<p>Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>ID</strong></td>
<td><strong>Name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Hit Points</strong></td>
<td><strong>Attack</strong></td>
<td><strong>Defense</strong></td>
<td><strong>Special Attack</strong></td>
<td><strong>Special Defense</strong></td>
<td><strong>Speed</strong></td>
<td><strong>Generation</strong></td>
<td><strong>Legendary</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td>25</td>
<td>Pikachu</td>
<td>Electric</td>
<td>35</td>
<td>55</td>
<td>40</td>
<td>50</td>
<td>50</td>
<td>90</td>
<td>1</td>
<td>False</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a program that asks the user for:</p>
<ul>
<li>a Pokemon Type (e.g., ""Electric"").&nbsp;</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then analyze the file and print:</p>
<ul>
<li>The value of lowest Special Attack from a Pokemon with the matching type</li>
<li>The name of the Pokemon with the lowest value of Special Attack. In the event of a tie, print out the name of the FIRST Pokemon that matches.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the Dark Pokemon with the lowest Special Attack is Scrafty (with Special Attack of 115.0), your program should print out:</p>
<pre>115.0<br />Scrafty</pre>
<p>&nbsp;</p>
<p>NOTE: The above answer is purely hypothetical. Your answer will be different.</p>
</div>
","from cs110 import autograder
import random, math

solution_filename = ""a2_6_lowest_spec_attack.py""

# def solution(pokemon_type):
#     file = open(""pokemon.csv"", ""r"")
#     file_contents = file.read()
#     lines = file_contents.split('\n')
# 
#     lowest_value = 999
#     lowest_name = ""UNKNOWN""
# 
#     for line in lines:
#         columns = line.split(',')
#         p_name  = columns[1]
#         p_type  = columns[2]
#         p_value = float(columns[6])
#         
#         if p_type == pokemon_type:
#             if p_value < lowest_value:
#                 lowest_value = p_value
#                 lowest_name = p_name
# 
#     return (lowest_value, lowest_name)


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # static input and corresponding expected output    
    test_cases = dict()
    test_cases[""Electric""] = (35.0, ""Pichu"")
    test_cases[""Fire""] = (15.0, ""Darumaka"")
    test_cases[""Dark""] = (30.0, ""Poochyena"")
    test_cases[""Dragon""] = (30.0, ""Axew"")
    test_cases[""Rock""] = (10.0, ""Bonsly"")
    test_cases[""Ghost""] = (30.0, ""Duskull"")
    test_cases[""Normal""] = (15.0, ""Happiny"")
    test_cases[""Bug""] = (10.0, ""Shuckle"")

    # shuffle the possible inputs    
    test_case_input = list(test_cases.keys())
    case_order = list(range(len(test_case_input)))
    random.shuffle(case_order)
    
    # choose 5 of the randomly sorted 
    case_indices_used = case_order[:5]
    
    score = 0
    
    test_run_num = 1
    for idx in case_indices_used:
        print('\n' + '='*30)
        print("" ""*10+""Test Case #"" + str(test_run_num))
        print('='*30)
        
        try:
            output, error = autograder.run_script(solution_filename, [test_case_input[idx]])
            expected_output = test_cases[test_case_input[idx]]  
            
            lines = output.strip().split('\n')
            
            if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
                print(""Lowest Value Correct"")
                score += 50 / len(case_indices_used)
            else:
                print(""Lowest Value Incorrect or not in the expected location.  Expected:"", expected_output[0])
            
            if len(lines) > 1 and lines[1] == expected_output[1]:
                print(""Name is Correct"")
                score += 50 / len(case_indices_used)
            elif len(lines) > 0 and expected_output[1] in lines:
                print(""Name is Correct"")
                score += 50 / len(case_indices_used)
            else:
                print(""Name is Incorrect or not in the expected location.  Expected:"", expected_output[1])              
        except Exception as e:
            print(""ERROR occured when running your solution."")
            print(e)
                
        test_run_num += 1
    
    return score

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
452,a2_6_lowest_spec_def,4,lab,1,"<div><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset containing information about various types of Pokemon. Here is an example entry from the file:</p>
<pre>25, Pikachu, Electric, 35, 55, 40, 50, 50, 90, 1, FALSE</pre>
<p>&nbsp;</p>
<p>Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table border=""3"">
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>ID</strong></td>
<td><strong>Name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Hit Points</strong></td>
<td><strong>Attack</strong></td>
<td><strong>Defense</strong></td>
<td><strong>Special Attack</strong></td>
<td><strong>Special Defense</strong></td>
<td><strong>Speed</strong></td>
<td><strong>Generation</strong></td>
<td><strong>Legendary</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td>25</td>
<td>Pikachu</td>
<td>Electric</td>
<td>35</td>
<td>55</td>
<td>40</td>
<td>50</td>
<td>50</td>
<td>90</td>
<td>1</td>
<td>False</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a program that asks the user for:</p>
<ul>
<li>a Pokemon Type (e.g., ""Electric"").&nbsp;</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then analyze the file and print:</p>
<ul>
<li>The value of lowest Special Defense from a Pokemon with the matching type.</li>
<li>The name of the Pokemon of the matching type with the lowest value of Special Defense. In the event of a tie, print out the name of the FIRST Pokemon that matches.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the Dark Pokemon with the lowest Special Defense is Poochyena (with Special Defense of 30), your program should print out:</p>
<pre>30<br />Poochyena</pre>
<p>&nbsp;</p>
<p>NOTE: The above answer is purely hypothetical. Your answer will be different.</p>
<p>Also, all of the numeric values are positive integers with values less than 999.</p>
</div>","from cs110 import autograder
import random, math

solution_filename = ""a2_6_lowest_spec_def.py""

# def solution(pokemon_type):
#     file = open(""pokemon.csv"", ""r"")
#     file_contents = file.read()
#     lines = file_contents.split('\n')
# 
#     lowest_value = 999
#     lowest_name = ""UNKNOWN""
# 
#     for line in lines:
#         columns = line.split(',')
#         p_name  = columns[1]
#         p_type  = columns[2]
#         p_value = float(columns[7])
#         
#         if p_type == pokemon_type:
#             if p_value < lowest_value:
#                 lowest_value = p_value
#                 lowest_name = p_name
# 
#     return (lowest_value, lowest_name)


# Runs the Python script and sees if it passes the test(s)
def test_passed():    
    # static input and corresponding expected output
    test_cases = dict()
    test_cases[""Electric""] = (32.0, ""Blitzle"")
    test_cases[""Fire""] = (40.0, ""Slugma"")
    test_cases[""Dark""] = (30.0, ""Poochyena"")
    test_cases[""Dragon""] = (30.0, ""Bagon"")
    test_cases[""Rock""] = (25.0, ""Roggenrola"")
    test_cases[""Fairy""] = (40.0, ""Snubbull"")
    test_cases[""Ghost""] = (33.0, ""Shuppet"")
    test_cases[""Normal""] = (20.0, ""Igglybuff"")
    
    # shuffle the possible inputs    
    test_case_input = list(test_cases.keys())
    case_order = list(range(len(test_case_input)))
    random.shuffle(case_order)
    
    # choose 5 of the randomly sorted 
    case_indices_used = case_order[:5]
    
    score = 0
    
    test_run_num = 1
    for idx in case_indices_used:
        print('\n' + '='*30)
        print("" ""*10+""Test Case #"" + str(test_run_num))
        print('='*30)
        
        try:
            output, error = autograder.run_script(solution_filename, [test_case_input[idx]])
            expected_output = test_cases[test_case_input[idx]]  
            
            lines = output.strip().split('\n')
            
            if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
                print(""Lowest Value Correct"")
                score += 50 / len(case_indices_used)
            else:
                print(""Lowest Value Incorrect or not in the expected location.  Expected:"", expected_output[0])
            
            if len(lines) > 1 and lines[1] == expected_output[1]:
                print(""Name is Correct"")
                score += 50 / len(case_indices_used)
            elif len(lines) > 0 and expected_output[1] in lines:
                print(""Name is Correct"")
                score += 50 / len(case_indices_used)
            else:
                print(""Name is Incorrect or not in the expected location.  Expected:"", expected_output[1])
                
        except Exception as e:
            print(""ERROR occured when running your solution."")
            print(e)
                
        test_run_num += 1
    
    return score

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
453,a2_6_lowest_defense,4,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset containing information about various types of Pokemon. Here is an example entry from the file:</p>
<pre>25, Pikachu, Electric, 35, 55, 40, 50, 50, 90, 1, FALSE</pre>
<p>&nbsp;</p>
<p>Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>ID</strong></td>
<td><strong>Name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Hit Points</strong></td>
<td><strong>Attack</strong></td>
<td><strong>Defense</strong></td>
<td><strong>Special Attack</strong></td>
<td><strong>Special Defense</strong></td>
<td><strong>Speed</strong></td>
<td><strong>Generation</strong></td>
<td><strong>Legendary</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td>25</td>
<td>Pikachu</td>
<td>Electric</td>
<td>35</td>
<td>55</td>
<td>40</td>
<td>50</td>
<td>50</td>
<td>90</td>
<td>1</td>
<td>False</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a program that asks the user for:</p>
<ul>
<li>a Pokemon Type (e.g., ""Electric"")</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then analyze the file and print:</p>
<ul>
<li>The lowest defensive rating from a Pokemon with the matching type</li>
<li>The name of the Pokemon with the lowest defensive rating. In the event of a tie, print out the name of the FIRST Pokemon with the lowest defensive value.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the Poison Pokemon with the lowest defense rating is Zubat (with an defensive of 35.0), your program should print out:</p>
<pre>35.0<br />Zubat</pre>
<p>&nbsp;</p>
<p>NOTE: The above answer is purely hypothetical. Your answer will be different.</p>
</div>
","from cs110 import autograder
import random, math

solution_filename = ""a2_6_lowest_defense.py""

# def solution(pokemon_type):
#     file = open(""pokemon.csv"", ""r"")
#     file_contents = file.read()
#     lines = file_contents.split('\n')
# 
#     lowest_value = 999
#     lowest_name = ""UNKNOWN""
# 
#     for line in lines:
#         columns = line.split(',')
#         p_name  = columns[1]
#         p_type  = columns[2]
#         p_value = float(columns[5])
#         
#         if p_type == pokemon_type:
#             if p_value < lowest_value:
#                 lowest_value = p_value
#                 lowest_name = p_name
# 
#     return (lowest_value, lowest_name)


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    # static input and corresponding expected output
    test_cases = dict()
    test_cases[""Poison""] = (35.0, ""Zubat"")
    test_cases[""Electric""] = (15.0, ""Pichu"")
    test_cases[""Grass""] = (30.0, ""Sunkern"")
    test_cases[""Fire""] = (37.0, ""Magby"")
    test_cases[""Ground""] = (25.0, ""Diglett"")
    test_cases[""Dark""] = (30.0, ""Houndour"")
    test_cases[""Dragon""] = (35.0, ""Goomy"")
    test_cases[""Psychic""] = (15.0, ""Abra"")
    test_cases[""Rock""] = (40.0, ""Cranidos"")
    
    # shuffle the possible inputs    
    test_case_input = list(test_cases.keys())
    case_order = list(range(len(test_case_input)))
    random.shuffle(case_order)
    
    # choose 5 of the randomly sorted 
    case_indices_used = case_order[:5]
    
    score = 0
    
    test_run_num = 1
    for idx in case_indices_used:
        print('\n' + '='*30)
        print("" ""*10+""Test Case #"" + str(test_run_num))
        print('='*30)
        
        try:
            output, error = autograder.run_script(solution_filename, [test_case_input[idx]])
            expected_output = test_cases[test_case_input[idx]]  
            
            lines = output.strip().split('\n')
            
            if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
                print(""Lowest Value Correct"")
                score += 50 / len(case_indices_used)
            else:
                print(""Lowest Value Incorrect or not in the expected location.  Expected:"", expected_output[0])
            
            if len(lines) > 1 and lines[1] == expected_output[1]:
                print(""Name is Correct"")
                score += 50 / len(case_indices_used)
            elif len(lines) > 0 and expected_output[1] in lines:
                print(""Name is Correct"")
                score += 50 / len(case_indices_used)
            else:
                print(""Name is Incorrect or not in the expected location.  Expected:"", expected_output[1])
        except Exception as e:
            print(""ERROR occured when running your solution."")
            print(e)
                
        test_run_num += 1
    
    return score


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,1,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,
454,a2_6_fastest,4,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset containing information about various types of Pokemon. Here is an example entry from the file:</p>
<pre>25, Pikachu, Electric, 35, 55, 40, 50, 50, 90, 1, FALSE</pre>
<p>&nbsp;</p>
<p>Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>ID</strong></td>
<td><strong>Name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Hit Points</strong></td>
<td><strong>Attack</strong></td>
<td><strong>Defense</strong></td>
<td><strong>Special Attack</strong></td>
<td><strong>Special Defense</strong></td>
<td><strong>Speed</strong></td>
<td><strong>Generation</strong></td>
<td><strong>Legendary</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td>25</td>
<td>Pikachu</td>
<td>Electric</td>
<td>35</td>
<td>55</td>
<td>40</td>
<td>50</td>
<td>50</td>
<td>90</td>
<td>1</td>
<td>False</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a program that asks the user for:</p>
<ul>
<li>a Pokemon Type (e.g., ""Electric"").&nbsp;</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then analyze the file and print:</p>
<ul>
<li>The highest speed from a Pokemon with the matching type</li>
<li>The name of the Pokemon with the fastest speed. In the event of a tie, print out the name of the FIRST Pokemon that matches.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the fastest Bug Pokemon is Accelgor (with a speed of 145.0), your program should print out:</p>
<pre>145.0<br />Accelgor</pre>
<p>&nbsp;</p>
<p>NOTE: The above answer is purely hypothetical. Your answer will be different.</p>
</div>
","from cs110 import autograder
import random, math

solution_filename = ""a2_6_fastest.py""

# def solution(pokemon_type):
#     file = open(""pokemon.csv"", ""r"")
#     file_contents = file.read()
#     lines = file_contents.split('\n')
# 
#     fastest_value = 0
#     fastest_name = ""UNKNOWN""
# 
#     for line in lines:
#         columns = line.split(',')
#         p_name  = columns[1]
#         p_type  = columns[2]
#         p_value = float(columns[8])
#         
#         if p_type == pokemon_type:
#             if p_value > fastest_value:
#                 fastest_value = p_value
#                 fastest_name = p_name
# 
#     return (fastest_value, fastest_name)


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    # static input and corresponding expected output
    test_cases = dict()
    test_cases[""Poison""] = (130.0, ""Crobat"")
    test_cases[""Electric""] = (140.0, ""Electrode"")
    test_cases[""Fire""] = (126.0, ""Talonflame"")
    test_cases[""Bug""] = (160.0, ""Ninjask"")
    test_cases[""Water""] = (122.0, ""Greninja"")
    test_cases[""Ground""] = (120.0, ""Dugtrio"")
    test_cases[""Fairy""] = (99.0, ""Xerneas"")
    test_cases[""Fighting""] = (118.0, ""Hawlucha"")
        
    # shuffle the possible inputs
    test_case_input = list(test_cases.keys())
    case_order = list(range(len(test_case_input)))
    random.shuffle(case_order)
    
    # choose 5 of the randomly sorted 
    case_indices_used = case_order[:5]
    
    score = 0
    
    test_run_num = 1
    for idx in case_indices_used:
        print('\n' + '='*30)
        print("" ""*10+""Test Case #"" + str(test_run_num))
        print('='*30)
        
        try:
            output, error = autograder.run_script(solution_filename, [test_case_input[idx]])
            expected_output = test_cases[test_case_input[idx]]  
            
            lines = output.strip().split('\n')
            
            if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
                print(""Highest Value Correct"")
                score += 50 / len(case_indices_used)
            else:
                print(""Highest Value Incorrect or not in the expected location.  Expected:"", expected_output[0])
            
            if len(lines) > 1 and lines[1] == expected_output[1]:
                print(""Name is Correct"")
                score += 50 / len(case_indices_used)
            elif len(lines) > 0 and expected_output[1] in lines:
                print(""Name is Correct"")
                score += 50 / len(case_indices_used)
            else:
                print(""Name is Incorrect or not in the expected location.  Expected:"", expected_output[1])
        except Exception as e:
            print(""ERROR occured when running your solution."")
            print(e)
                
        test_run_num += 1
    
    return score

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,1,1,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,
455,a2_6_highest_hp,4,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset containing information about various types of Pokemon. Here is an example entry from the file:</p>
<pre>25, Pikachu, Electric, 35, 55, 40, 50, 50, 90, 1, FALSE</pre>
<p>&nbsp;</p>
<p>Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>ID</strong></td>
<td><strong>Name</strong></td>
<td><strong>Type</strong></td>
<td><strong>Hit Points</strong></td>
<td><strong>Attack</strong></td>
<td><strong>Defense</strong></td>
<td><strong>Special Attack</strong></td>
<td><strong>Special Defense</strong></td>
<td><strong>Speed</strong></td>
<td><strong>Generation</strong></td>
<td><strong>Legendary</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td>Value</td>
<td>25</td>
<td>Pikachu</td>
<td>Electric</td>
<td>35</td>
<td>55</td>
<td>40</td>
<td>50</td>
<td>50</td>
<td>90</td>
<td>1</td>
<td>False</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a program that asks the user for:</p>
<ul>
<li>a Pokemon Type (e.g., ""Electric"").&nbsp;</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then analyze the file and print:</p>
<ul>
<li>The highest Hit Points from a Pokemon with the matching type</li>
<li>The name of the Pokemon with the highest value of Hit Points. In the event of a tie, print out the name of the FIRST Pokemon that matches.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the Ice Pokemon with the highest Hit Points is Froslass (with Hit Points of 70.0), your program should print out:</p>
<pre>70.0<br />Frosless</pre>
<p>&nbsp;</p>
<p>NOTE: The above answer is purely hypothetical. Your answer will be different.</p>
</div>
","from cs110 import autograder
import random, math

solution_filename = ""a2_6_highest_hp.py""

# def solution(pokemon_type):
#     file = open(""pokemon.csv"", ""r"")
#     file_contents = file.read()
#     lines = file_contents.split('\n')
# 
#     highest_value = -999
#     highest_name = ""UNKNOWN""
# 
#     for line in lines:
#         columns = line.split(',')
#         p_name  = columns[1]
#         p_type  = columns[2]
#         p_value = float(columns[3])
#         
#         if p_type == pokemon_type:
#             if p_value > highest_value:
#                 highest_value = p_value
#                 highest_name = p_name
# 
#     return (highest_value, highest_name)


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # static input and corresponding expected output
    test_cases = dict()
    test_cases[""Poison""] = (105.0, ""Muk"")
    test_cases[""Electric""] = (90.0, ""Zapdos"")
    test_cases[""Grass""] = (123.0, ""Gogoat"")
    test_cases[""Fire""] = (115.0, ""Entei"")
    test_cases[""Bug""] = (86.0, ""Yanmega"")
    test_cases[""Water""] = (170.0, ""Wailord"")
    test_cases[""Ground""] = (115.0, ""Rhyperior"")
    test_cases[""Normal""] = (255.0, ""Blissey"")
        
    # shuffle the possible inputs
    test_case_input = list(test_cases.keys())
    case_order = list(range(len(test_case_input)))
    random.shuffle(case_order)
    
    # choose 5 of the randomly sorted 
    case_indices_used = case_order[:5]
    
    score = 0
    
    test_run_num = 1
    for idx in case_indices_used:
        print('\n' + '='*30)
        print("" ""*10+""Test Case #"" + str(test_run_num))
        print('='*30)
        
        try:
            output, error = autograder.run_script(solution_filename, [test_case_input[idx]])
            expected_output = test_cases[test_case_input[idx]]  
            
            lines = output.strip().split('\n')
            
            if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
                print(""Highest Value Correct"")
                score += 50 / len(case_indices_used)
            else:
                print(""Highest Value Incorrect or not in the expected location.  Expected:"", expected_output[0])
            
            if len(lines) > 1 and lines[1] == expected_output[1]:
                print(""Name is Correct"")
                score += 50 / len(case_indices_used)
            elif len(lines) > 0 and expected_output[1] in lines:
                print(""Name is Correct"")
                score += 50 / len(case_indices_used)
            else:
                print(""Name is Incorrect or not in the expected location.  Expected:"", expected_output[1])
        except Exception as e:
            print(""ERROR occured when running your solution."")
            print(e)
                
        test_run_num += 1
    
    return score


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,1,1,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,
456,PA2_practice4,4,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>You have been provided with a dataset called<span>&nbsp;</span><code>fuelprices.csv</code><span>&nbsp;</span>that
        contains monthly gasoline prices from 2006 - 2012. Here is a typical line from the dataset (each line ends with
        the newline \n character):</p>
    <p><code>1/1/2006 0:00,Regular,2.314</code></p>
    <p>&nbsp;</p>
    <p>Each position in the line (separated by a comma) represents a different data element, or column. The
        following table shows how the above line can be interpreted:</p>
    <table style=""margin-left: auto; margin-right: auto;"">
        <thead>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""></td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Day</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Gas Type</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Price (in Dollars)</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Value</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">1/1/2006 0:00</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Regular</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">2.314</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
    <p>Write a Python program that asks the user for:</p>
    <ul>
        <li>A Gas Type (e.g., Regular)</li>
    </ul>
    <p>&nbsp;</p>
    <p>Your program should then read the file and output:</p>
    <ul>
        <li>The average price of gas for that gas type</li>
    </ul>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math


def test_passed():

    num_tests_passed = 0
    test_cases = [(""Regular"", 37, 2.938), (""Midgrade"", 37, 3.098), (""Premium"", 37, 3.208), (""Diesel"", 32, 3.242)]

    for test_case in test_cases:
        print(""# -----------------------------------"")
        print(""# Testing"", test_case[0])
        print(""# -----------------------------------"")
        output, error = autograder.run_script(""PA2_practice4.py"", [test_case[0]])
    
        lines = output.strip().split('\n')
        
        if len(lines) > 0:
            if autograder.equals(lines[0], test_case[2]):
                print(""CORRECT"")
                num_tests_passed += 1
            elif len(lines) > 1 and autograder.equals(lines[0], test_case[1]) and autograder.equals(lines[1], test_case[2]):
                print(""CORRECT"")
                num_tests_passed += 1
            else:
                print(""INCORRECT"")
            print()
                    
    return round(100 / len(test_cases), 1) * num_tests_passed
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
457,PA2_practice3,4,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You are writing a program to analyze the BMI of cadets.&nbsp; Write a
    program that asks for the number of cadets, and then gets that many weights and heights (alternating, a weight then
    the corresponding height, in that order).&nbsp; Your program should then output the number of thin, healthy,
    overweight, and obese cadets (based on their BMI), using the following formula and table as a guide:</p>
    <p>&nbsp;</p>
    <p style=""text-align: center;""><strong><span>BMI = 703 * (weight / height<sup>2</sup>)</span></strong></p>
    <p style=""text-align: center;"">&nbsp;</p>
    <table style=""margin-left: auto; margin-right: auto;"" border=""1"">
        <tbody>
            <tr>
                <td style=""text-align: center;""><strong>Rating</strong></td>
                <td style=""text-align: center;""><strong>BMI</strong></td>
            </tr>
            <tr>
                <td style=""text-align: center;"">Thin</td>
                <td style=""text-align: center;"">less than 18.5</td>
            </tr>
            <tr>
                <td style=""text-align: center;"">Healthy</td>
                <td style=""text-align: center;"">at least 18.5 but less than 25</td>
            </tr>
            <tr>
                <td style=""text-align: center;"">Overweight</td>
                <td style=""text-align: center;"">at least 25 but less than 30</td>
            </tr>
            <tr>
                <td style=""text-align: center;"">Obese</td>
                <td style=""text-align: center;"">30 or more</td>
            </tr>
        </tbody>
    </table>
    <p><strong>EXAMPLES:</strong></p>
    <table style=""margin-left: auto; margin-right: auto;"" width=""589"">
        <thead>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""></td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Example 1</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Example 2</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Example 3</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Inputs</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    <p>3</p>
                    <p>180<br>60<br>149<br>68<br>168<br>72</p>
                </td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    <p>4</p>
                    <p>139<br>71<br>141<br>75<br>191<br>62<br>176<br>58</p>
                </td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    <p>7</p>
                    <p>194<br>70<br>159<br>66<br>167<br>63<br>173<br>75<br>161<br>66<br>186<br>72<br>131<br>60</p>
                </td>
            </tr>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Outputs</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">0<br>2<br>0<br>1</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">1<br>1<br>0<br>2</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">0<br>1<br>6<br>0</td>
            </tr>
        </tbody>
    </table>

</div>","from cs110 import autograder
import random, math

def solution(weights, heights):
    num_thin = 0
    num_healthy = 0
    num_overweight = 0
    num_obese = 0
    
    for i in range(len(weights)):
        bmi = 703 * (weights[i] / heights[i]**2)

        if bmi <= 18.5:
            num_thin += 1
        elif bmi <= 25:
            num_healthy += 1
        elif bmi <= 30:
            num_overweight += 1
        else:
            num_obese += 1
    
    return (num_thin, num_healthy, num_overweight, num_obese)


def test_passed():

    score = 0

    # Generates the Test Set
    num_students = random.randint(5, 10)
    inputs = [num_students]
    weights = []
    heights = []
    
    for i in range(num_students):
        random_weight = random.randint(120, 200)
        random_height = random.randint(55, 76)
        
        weights.append(random_weight)
        heights.append(random_height)
        
        inputs.append(random_weight)
        inputs.append(random_height)
    
    output, error = autograder.run_script(""PA2_practice3.py"", inputs)
    expected_output = solution(weights, heights)
    
    lines = output.strip().split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Thin is Correct"")
        score += 25
    else:
        print(""Thin is Incorrect.  Expected"", expected_output[0])

    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Healthy is Correct"")
        score += 25
    else:
        print(""Healthy is Incorrect.  Expected"", expected_output[1])
    
    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):
        print(""Overweight is Correct"")
        score += 25
    else:
        print(""Overweight is Incorrect.  Expected"", expected_output[2])
    
    if len(lines) > 3 and autograder.equals(lines[3], expected_output[3]):
        print(""Obese is Correct"")
        score += 25
    else:
        print(""Obese is Incorrect.  Expected"", expected_output[0])
        
    return score


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
458,PA2_practice2,4,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You have been provided with a function: get_value(n). Your task is to call this function 6 times.&nbsp;</p>
    <p>Get a number from the user (<code>x</code>), and print the <code>x</code> , <code>x + 1</code>, <code>x + 2</code>, ... <code>x + 5</code> values that result from calling get_value() with x to x+5&nbsp; (i.e., you should print 6 numbers total).</p>
    <p>&nbsp;</p>
    <p><strong>HINTS:</strong></p>
    <ul>
    <li>You should call this function from inside a loop passing a variable that increases by 1 each loop</li>
    <li>If the user enters a 2, you should call&nbsp;<code>get_value(2)</code>, <code>get_value(3)</code>, up to <span><code>get_value(7)</code> and print the results of each call (5, 7, 9, 11, 13, 15)</span>&nbsp;</li>
    </ul>
    <p>&nbsp;</p>
    <p><strong>EXAMPLES:</strong></p>
    <table style=""margin-left: auto; margin-right: auto;"" width=""589"">
    <thead>
    <tr>
    <td style=""text-align: center; border-color: #000000; border-style: solid;""></td>
    <td style=""text-align: center; border-color: #000000; border-style: solid;"">Example 1</td>
    <td style=""text-align: center; border-color: #000000; border-style: solid;"">Example 2</td>
    <td style=""text-align: center; border-color: #000000; border-style: solid;"">Example 3</td>
    </tr>
    </thead>
    <tbody>
    <tr>
    <td style=""text-align: center; border-color: #000000; border-style: solid;"">Inputs</td>
    <td style=""text-align: center; border-color: #000000; border-style: solid;"">2</td>
    <td style=""text-align: center; border-color: #000000; border-style: solid;"">4</td>
    <td style=""text-align: center; border-color: #000000; border-style: solid;"">11</td>
    </tr>
    <tr>
    <td style=""text-align: center; border-color: #000000; border-style: solid;"">Outputs</td>
    <td style=""text-align: center; border-color: #000000; border-style: solid;"">5<br>7<br>9<br>11<br>13<br>15</td>
    <td style=""text-align: center; border-color: #000000; border-style: solid;"">9<br>11<br>13<br>15<br>17<br>19</td>
    <td style=""text-align: center; border-color: #000000; border-style: solid;"">23<br>25<br>27<br>29<br>31<br>33</td>
    </tr>
    </tbody>
    </table>    
</div>","from cs110 import autograder
import random, math, traceback

solution_filename = ""PA2_practice2.py""

def test_passed():
    test_cases_prev = dict()
    test_cases_prev[1] = (3,5,7,9,11,13)
    test_cases_prev[100] = (201,203,205,207,209,211)
    test_cases_prev[1000] = (2001,2003,2005,2007,2009,2011)
    test_cases_prev[42] = (85,87,89,91,93,95)    
    test_cases_prev[87] = (175,177,179,181,183,185)

    # test_cases[input] = (expected_result_1, ""expected_result_2"")
    
    test_cases = dict()
    test_cases[1] = (1,2,3,4,5,6)
    test_cases[100] = (100,101,102,103,104,105)
    test_cases[1000] = (1000,1001,1002,1003,1004,1005)
    test_cases[42] = (42,43,44,45,46,47)
    test_cases[87] = (87,88,89,90,91,92)

    
    # shuffle the possible inputs    
    test_case_input = list(test_cases.keys())
    case_order = list(range(len(test_case_input)))
    random.shuffle(case_order)
    
    # choose 5 of the randomly sorted 
    case_indices_used = case_order[:5]
    
    score = 0
    
    test_run_num = 1
    for idx in case_indices_used:
        print('\n' + '='*30)
        print("" ""*10+""Test Case #"" + str(test_run_num))
        print('='*30)
        
        try:
            output, error = autograder.run_script(solution_filename, [test_case_input[idx]])
            
            expected_output = """"
            for num in test_cases[test_case_input[idx]]:
                expected_output += str(num) + ""\n""
            
            expected_output_prev = """"
            for num in test_cases_prev[test_case_input[idx]]:
                expected_output_prev += str(num) + ""\n""
            
            lines = output.strip().split('\n')
            
            if output.strip() == expected_output.strip():
                print(""CORRECT"")
                score += 100.0 / len(case_indices_used)
            elif output.strip() == expected_output_prev.strip():
                print(""CORRECT"")
                score += 100.0 / len(case_indices_used)
            else:
                print(""INCORRECT. Expected:"")
                expected_lines = expected_output.split(""\n"")
                expected_prev_lines = expected_output_prev.split(""\n"")
                for line_idx in range(len(expected_lines)):
                    if line_idx == 2:
                        center_col = ""     OR     ""
                    else:
                        center_col = ""            ""
                    
                    print(expected_prev_lines[line_idx].strip()) # + center_col + expected_prev_lines[line_idx].strip())

        except Exception as e:
            print(""ERROR occured when running your solution!"")
            print(e)
            print(traceback.format_exc())
            
        test_run_num += 1        
    
#     random_value = random.randint(5, 15)
#     output, error = autograder.run_script(""PA2_practice2.py"", [random_value])
#     expected_output = solution(random_value)
#     
#     if output.strip() == expected_output.strip():
#         print(""CORRECT"")
#         return 100.0
#     else:
#         print(""INCORRECT.  Expected:"")
#         print(expected_output)
    
    return score
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
459,PA2_practice1,4,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong>Define a function called <code>add_values</code>. The function&nbsp;should take 3 parameters (x, y, z), and return the sum of these values.</p>
    <p>&nbsp;</p>
    <p><strong>NOTES:</strong></p>
    <ul>
    <li>You do not need to call the function.&nbsp; Simply define it.</li>
    </ul>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import PA2_practice1

def add_values(x, y, z):
    return x + y + z

def test_passed():
    
    if 'add_values' in dir(PA2_practice1) and add_values(1, 2, 3) == PA2_practice1.add_values(1, 2, 3):
        print(""PASSED"")
        return 100.0
    elif 'add_values' not in dir(PA2_practice1):
        print(""FAILED.  Could not find function 'add_values'"")
    elif result != solution:
        print(""FAILED.  Function 'add_values' did not return the correct value"")
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
460,lsn9_triangle,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a function that computes the area of a triangle. You will name your function&nbsp;<code>area_triangle()</code>. It has two parameters, the height of the triangle,&nbsp;<code>height</code>, and the length of the base,&nbsp;<code>base</code>. The&nbsp;<code>area_triangle()</code> function will print the area of the triangle.</p>
<p><strong>IMPORTANT: <br /></strong>You are encouraged to write code to test your function. However, when you submit to the server for grading, only the function will be tested.</p>
</div>
","from cs110 import autograder
import random, math
import lsn9_triangle

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    base = round(random.uniform(1.0, 10.0), 1)
    height = round(random.uniform(1.0, 10.0), 1)
    output, error_message = autograder.run_script(""lsn9_triangle.py"", [base, height])
    
    area = (base * height) / 2.0
    score = 0
    
    if ""area_triangle"" in dir(lsn9_triangle):
        print(""Function Correctly Defined"")
        score += 50
    else:
        print(""Function does not exist.  Check to make sure the name matches the prompt"")
    
    if autograder.equals(output, area):
        print(""Function produces correct output"")
        score += 50
    else:
        print(""Function produces incorrect output. Expected:"", area)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
461,lsn9_skill3,4,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Define a function called <code>print_hello()</code>. Your function should, when called, simply print out a message of your choosing that would be a greeting to someone.</p>
<p><strong>IMPORTANT NOTE:</strong><br />Functions only run when a program calls them. For the purposes of this exercise, you do not need to call the function. If you don't, however, nothing will appear on the screen when you run it in Thonny.</p>
</div>","from cs110 import autograder
import random, math
import lsn9_skill3

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error = autograder.run_script(""lsn9_skill3.py"", [])
    score = 0
    
    if ""print_hello"" in dir(lsn9_skill3):
        print(""Function found!"")
        score += 50
        
        if len(output) > 0:
            print(""Output Found!"")
            score += 50
        else:
            print(""Function does not appear to be printing out anything"")
    else:
        print(""Function does not appear to be defined.  Check the name and make sure it matches the prompt"")
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
462,lsn9_skill2,4,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a function called <code>draw_multiple_trees()</code> that outputs a tree using ASCII art. Unlike the previous problem, this function accepts a parameter that tells it how many trees to draw.</p>
<p>Write a program that:</p>
<ol>
<li>Gets an integer from the user and stores it in a variable. You can name this variable whatever you want.</li>
<li>Calls the function, and passes the variable to it. </li>
</ol>
<p>Remember that ""passing a value"" to a function simply means putting the number inside the parenthesis when you call it.&nbsp;</p>
</div>","from cs110 import autograder
import random, math

# The Actual Solution
def draw_tree(num_times):
    result = """"
    for i in range(num_times):
        result += ""  *  \n""
        result += "" *** \n""
        result += ""*****\n""
        result += ""  |  \n""
    return result;


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    num_passed = 0
    num_tests = 3
    
    for i in range(num_tests):
        print(""-------------------------------------------"")
        print(""Test"", i+1)
        print(""-------------------------------------------"")
        num_trees = random.randint(0, 5)
        output, error_message = autograder.run_script(""lsn9_skill2.py"", [num_trees])
        expected_output = draw_tree(num_trees)
        
        if output == expected_output:
            print(""Good Job!\n"")
            num_passed += 1
        else:
            print(""Incorrect Output. Expected the following:"")
            print(expected_output, ""\n"")
    
    return round((100 / num_tests) * num_passed, 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
463,lsn9_skill1,4,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a function called <code>draw_tree()</code> that prints a tree using ASCII art:</p>
<pre> *<br /> ***<br />*****<br /> |</pre>
<p>Call this function 3 times.</p>
</div>","from cs110 import autograder
import random, math

# The Actual Solution
def draw_tree():
    result =  ""  *  \n""
    result += "" *** \n""
    result += ""*****\n""
    result += ""  |  \n""
    return result;


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    output, error_message = autograder.run_script(""lsn9_skill1.py"", [])
    
    expected_output = draw_tree() + draw_tree () + draw_tree()
    
    if output == expected_output:
        print(""Good Job!"")
        return 100
    else:
        print(""Incorrect Output. Expected the following:"")
        print(expected_output)
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
464,lsn9_imagesize,4,lab,0,"<html><head/><body><p><span style="" font-weight:600;"">PROBLEM STATEMENT:<br/></span>Write a function that computes the size of an uncompressed image. You will name your function calculate_size_of_image(), and it will have three parameters: the width of the image, the height of the image, and the bit depth (i.e., # of bits per pixel).</p><p>The function should print the size of the image <span style="" font-weight:600; text-decoration: underline;"">in kilobytes</span>.</p></body></html>","from cs110 import autograder
import lsn9_imagesize, random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    base = random.randint(1024, 1980)
    height = random.randint(1024, 1980)
    bd = 2**random.randint(3, 7)
    output, error_message = autograder.run_script(""lsn9_imagesize.py"", [base, height, bd])
    
    filesize = (base * height * bd) / 8 / 1024
    score = 0
    
    if ""calculate_size_of_image"" in dir(lsn9_imagesize):
        print(""Function Correctly Defined"")
        score += 50
    else:
        print(""Function does not exist.  Check to make sure the name matches the prompt"")
    
    if autograder.equals(output, filesize):
        print(""Function produces correct output"")
        score += 50
    else:
        print(""Function produces incorrect output. Expected:"", filesize)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
465,lsn9_callme,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with three functions. Open the template file, and perform the following tasks:<strong><br /></strong></p>
<ul>
<li><strong>Task 1:</strong> Ask the user to enter a width and height. Do <strong>NOT </strong>assume they are whole numbers. Call area_rectangle and give it the user values</li>
<li><strong>Task 2:</strong> Ask the user to enter a string. Call print_backwards and give it the user value</li>
<li><strong>Task 3:</strong> You have been provided with a variable called my_number. Call positive_or_negative and give it the variable</li>
</ul>
</div>
","from cs110 import autograder
import random, math

# This function takes a string and prints it backwards
def get_reverse(s):
    result = ''
    for i in range(len(s)-1, -1, -1):
        result += s[i]
    return result

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    base = round(random.uniform(1.0, 100.0), 1)
    height = round(random.uniform(1.0, 100.0), 1)

    string_list = ['abcde', 'defgh', 'xzy', 'abba']
    test_string = string_list[random.randint(0, len(string_list)-1)]

    file = open(""lsn9_callme.py"", ""r"")
    file_contents = file.read()
    num_calls_area_rectangle = file_contents.count(""area_rectangle"")
    num_calls_print_backwards = file_contents.count(""print_backwards"")
    num_calls_positive = file_contents.count(""positive_or_negative"")

    output, error_message = autograder.run_script(""lsn9_callme.py"", [base, height, test_string])
    
    area = (base * height)
    score = 0
    
    lines = output.split(""\n"")
    
    if autograder.equals(lines[0], area) and num_calls_area_rectangle > 1:
        print(""area_rectangle called successfully"")
        score += 33
    else:
        print(""area_rectangle was not called successfully"")
    
    if len(lines) > 1 and lines[1].strip() == get_reverse(test_string) and num_calls_print_backwards > 1:
        print(""print_backwards called successfully"")
        score += 33
    else:
        print(""print_backwards was not called successfully"")
    
    if len(lines) > 2 and lines[2].strip() == ""Positive"" and num_calls_positive > 1:
        print(""positive_or_negative called successfully"")
        score += 34
    else:
        print(""positive_or_negative was not called successfully"")
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
466,lsn8_practice4,4,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong>Write a program that asks the user for the area of three plots of land.</p>
<ul>
<li>The first area will be provided to you in ACRES</li>
<li>The second area will be provided to you in SQUARE MILES</li>
<li>The third area will be provided to you in SQUARE KILOMETERS</li>
</ul>
<p>Your program will output ""Plot X is the biggest"", replacing X with either a 1, 2, or 3 depending on if the first, second, or third plot of land is the biggest, respectively.&nbsp; For this problem, you may assume that the plots are all different sizes (e.g., no two plots will be the same size)</p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li><strong>1 acre = 0.0015625 square miles</strong></li>
<li><strong>1 sq kilometer = 0.386102 square miles</strong></li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table style=""margin-left: auto; margin-right: auto;"" border=""1"" width=""752"">
<tbody>
<tr>
<td style=""text-align: center;""></td>
<td style=""text-align: center;""><strong>EXAMPLE 1</strong></td>
<td style=""text-align: center;""><strong>EXAMPLE 2</strong></td>
</tr>
<tr>
<td style=""text-align: center;""><strong>Inputs</strong></td>
<td style=""text-align: center;"">
<p>35<br>0.25<br>1</p>
</td>
<td style=""text-align: center;"">
<p>150<br>1<br>2.2</p>
</td>
</tr>
<tr>
<td style=""text-align: center;""><strong>Expected Output</strong></td>
<td style=""text-align: center;"">Plot 3 is the biggest</td>
<td style=""text-align: center;"">Plot 2 is the biggest</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def solution(area_1, area_2, area_3):
    area_1 = area_1 * 0.0015625
    area_3 = area_3 * 0.386102

    if area_1 > area_2 and area_1 > area_3:
        return ""Plot 1 is the biggest""
    elif area_2 > area_1 and area_2 > area_3:
        return ""Plot 2 is the biggest""
    elif area_3 > area_1 and area_3 > area_2:
        return ""Plot 3 is the biggest""
    
    return ""This should never return""

def run_test(area1, area2, area3):
    global num_tests_run, num_tests_passed
    
    num_tests_run += 1
    expected_output = solution(area1, area2, area3)
        
    print(""--------------------------------------------"")
    print(""Comparing %1.1f acres, %1.1f sq miles, and %1.1f sq km"" % (area1, area2, area3))
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn8_practice4.py"", [area1, area2, area3])
    
    if output.strip() == expected_output:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", expected_output)
        print(""\n"")

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))
    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))
    run_test(random.uniform(100, 1000), random.uniform(0.1, 2.0), random.uniform(0.1, 5.0))

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)











# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
467,lsn8_practice3,4,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong>Write a program that asks the user for the price of an item in US dollars /
    cents.&nbsp; Then calculate and print out the equivalent price of the item in:</p>
    <ul>
        <li style=""list-style-type: none;"">
            <ul>
                <li>British Pounds (1.25 USD per Pound)</li>
                <li>Korean Won (1 Won == 0.00083 USD)</li>
                <li>Mexican Pesos (1 Peso == 53.81 Won)</li>
            </ul>
        </li>
    </ul>
    <p>Print each currency on a separate line.</p>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def run_test(dollar_amount):

    
    return result

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    total_score = 0
    
    test_values = [209.66, 0.95, 44.46, 652.08]
    
    for idx, dollar_amount in enumerate(test_values):
        print(""\n-----------------------------"")
        print(""     Test Case "" + str(idx+1))
        print(""-----------------------------"")
        
        result = 0.0
    
        pound_amount = dollar_amount / 1.25
        won_amount = dollar_amount / 0.00083
        peso_amount = won_amount / 53.81
        
        output, error_message = autograder.run_script(""lsn8_practice3.py"", [dollar_amount])   
        lines = output.split('\n')
        
        if len(lines) > 0 and autograder.equals(lines[0], pound_amount):
            print(""Correct Pound Conversion"")
            result += 33
        else:
            print(""Incorrect Pound Conversion.  Expected"", pound_amount)
            
        if len(lines) > 1 and autograder.equals(lines[1], won_amount):
            print(""Correct Won Conversion"")
            result += 33
        else:
            print(""Incorrect Won Conversion.  Expected"", won_amount)
            
        if len(lines) > 2 and autograder.equals(lines[2], peso_amount):
            print(""Correct Peso Conversion"")
            result += 34
        else:
            print(""Incorrect Peso Conversion.  Expected"", peso_amount)
        
        total_score += result
    
    print()
    
    return int(total_score * (1 / len(test_values)))
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
468,lsn8_practice2,4,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You have been provided with a program that gets two (x, y) coordinates from
    the user in the following order: x1, y1, x2, y2.&nbsp; Write a program that calculates the distance between these
    two points, and prints them out. The distance formula is <span class=""math_equation_latex fade-in-equation""
        style=""null""><span class=""MathJax_Preview"" style=""color: inherit;""></span><span class=""MathJax_SVG""
            id=""MathJax-Element-1-Frame"" tabindex=""0""
            style=""font-size: 100%; display: inline-block; position: relative;""
            data-mathml=""<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><msqrt><msup><mrow><mo>(</mo><mi>x</mi><mn>1</mn><mo>&amp;#x2212;</mo><mi>x</mi><mn>2</mn><mo>)</mo></mrow><mn>2</mn></msup><mo>+</mo><msup><mrow><mo>(</mo><mi>y</mi><mn>1</mn><mspace width=&quot;mediummathspace&quot; /><mo>&amp;#x2212;</mo><mspace width=&quot;mediummathspace&quot; /><mi>y</mi><mn>2</mn><mo>)</mo></mrow><mn>2</mn></msup></msqrt></math>""
            role=""presentation""><svg xmlns:xlink=""http://www.w3.org/1999/xlink"" width=""27.224ex"" height=""4.824ex""
                viewBox=""0 -1437.2 11721.6 2077"" role=""img"" focusable=""false"" style=""vertical-align: -1.486ex;""
                aria-hidden=""true"">
                <g stroke=""currentColor"" fill=""currentColor"" stroke-width=""0"" transform=""matrix(1 0 0 -1 0 0)"">
                    <use xlink:href=""#MJSZ2-221A"" x=""0"" y=""119""></use>
                    <rect stroke=""none"" width=""10721"" height=""60"" x=""1000"" y=""1210""></rect>
                    <g transform=""translate(1000,0)"">
                        <use xlink:href=""#MJMAIN-28"" x=""0"" y=""0""></use>
                        <use xlink:href=""#MJMATHI-78"" x=""389"" y=""0""></use>
                        <use xlink:href=""#MJMAIN-31"" x=""962"" y=""0""></use>
                        <use xlink:href=""#MJMAIN-2212"" x=""1684"" y=""0""></use>
                        <use xlink:href=""#MJMATHI-78"" x=""2685"" y=""0""></use>
                        <use xlink:href=""#MJMAIN-32"" x=""3257"" y=""0""></use>
                        <use xlink:href=""#MJMAIN-29"" x=""3758"" y=""0""></use>
                        <use transform=""scale(0.707)"" xlink:href=""#MJMAIN-32"" x=""5866"" y=""675""></use>
                        <use xlink:href=""#MJMAIN-2B"" x=""4824"" y=""0""></use>
                        <g transform=""translate(5824,0)"">
                            <use xlink:href=""#MJMAIN-28"" x=""0"" y=""0""></use>
                            <use xlink:href=""#MJMATHI-79"" x=""389"" y=""0""></use>
                            <use xlink:href=""#MJMAIN-31"" x=""887"" y=""0""></use>
                            <use xlink:href=""#MJMAIN-2212"" x=""1831"" y=""0""></use>
                            <use xlink:href=""#MJMATHI-79"" x=""3054"" y=""0""></use>
                            <use xlink:href=""#MJMAIN-32"" x=""3552"" y=""0""></use>
                            <use xlink:href=""#MJMAIN-29"" x=""4052"" y=""0""></use>
                            <use transform=""scale(0.707)"" xlink:href=""#MJMAIN-32"" x=""6282"" y=""675""></use>
                        </g>
                    </g>
                </g>
            </svg><span class=""MJX_Assistive_MathML"" role=""presentation""><math
                    xmlns=""http://www.w3.org/1998/Math/MathML"">
                    <msqrt>
                        <msup>
                            <mrow>
                                <mo>(</mo>
                                <mi>x</mi>
                                <mn>1</mn>
                                <mo></mo>
                                <mi>x</mi>
                                <mn>2</mn>
                                <mo>)</mo>
                            </mrow>
                            <mn>2</mn>
                        </msup>
                        <mo>+</mo>
                        <msup>
                            <mrow>
                                <mo>(</mo>
                                <mi>y</mi>
                                <mn>1</mn>
                                <mspace width=""mediummathspace""></mspace>
                                <mo></mo>
                                <mspace width=""mediummathspace""></mspace>
                                <mi>y</mi>
                                <mn>2</mn>
                                <mo>)</mo>
                            </mrow>
                            <mn>2</mn>
                        </msup>
                    </msqrt>
                </math></span></span>
        <script type=""math/tex"" id=""MathJax-Element-1"">\sqrt{\left(x1-x2\right)^2+\left(y1\:-\:y2\right)^2}</script>
    </span></p>
    <p>HINT:&nbsp; You will have to use the math module.</p>
    <p>&nbsp;</p>
    <p><strong>EXAMPLES:</strong></p>
    <table style=""margin-left: auto; margin-right: auto;"" border=""1"" width=""752"">
        <tbody>
            <tr>
                <td style=""text-align: center;""></td>
                <td style=""text-align: center;""><strong>EXAMPLE 1</strong></td>
                <td style=""text-align: center;""><strong>EXAMPLE 2</strong></td>
            </tr>
            <tr>
                <td style=""text-align: center;""><strong>Inputs</strong></td>
                <td>
                    <p style=""text-align: center;"">5.0<br>10.0</p>
                    <p style=""text-align: center;"">8.0<br>16.0</p>
                </td>
                <td style=""text-align: center;"">
                    <p style=""text-align: center;"">8.3<br>-5.0</p>
                    <p style=""text-align: center;"">-9.3<br>4.6</p>
                </td>
            </tr>
            <tr>
                <td style=""text-align: center;""><strong>Expected Output (within 0.01)</strong></td>
                <td style=""text-align: center;"">6.708</td>
                <td style=""text-align: center;"">20.047</td>
            </tr>
        </tbody>
    </table>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
    
    x1 = round(random.uniform(-10, 10), 1)
    y1 = round(random.uniform(-10, 10), 1)
    x2 = round(random.uniform(-10, 10), 1)
    y2 = round(random.uniform(-10, 10), 1)
    
    num_tests_run += 1
    solution = math.sqrt(abs(x1-x2)**2 + abs(y1-y2)**2)
    
    print(""--------------------------------------------"")
    print(""Calculating distance between (%1.1f, %1.1f) and (%1.1f, %1.1f)"" % (x1, y1, x2, y2))
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn8_practice2.py"", [x1, y1, x2, y2])
    print(""Your Output:"", output.strip())
    
    if autograder.equals(output, solution):
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT"")    
        print(""Expected:"", solution)
        print(""\n"")

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    run_test()

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
469,lsn8_practice1,4,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p><span>You have been provided with an incomplete Python program that prints out a message with the class year.&nbsp; Write the appropriate input statement above this line to make this program work.</span></p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong><strong></strong></p>
<p>If the user types ""2014"", your program should print:</p>
<pre>Members of the class of 2014 arrived at USAFA in 2010</pre>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(class_year):
    global num_tests_run, num_tests_passed
    
    num_tests_run += 1
    solution = ""Members of the class of "" + str(class_year) + "" arrived at USAFA in "" + str(class_year - 4)
    
    print(""--------------------------------------------"")
    print(""Testing Class Year ="", class_year)
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn8_practice1.py"", [class_year])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT"")
        print(""Your Output:"", output.strip())
        print(""Expected:"", solution)
        if "".0"" in output.strip():
            print(""*** HINT:  Is year a floating point number? ***"")
        print(""\n"")

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(random.randint(1959, 2024))
    run_test(random.randint(1959, 2024))

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
470,lsn7_triangle,4,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write an algorithm that asks the user for X and Y coordinates of a single point (the coordinates of the top left point on the triangle), the length of the base, and the height of a right triangle. Then, open a graphics window and draw the triangle. The area of the triangle is should be displayed at the bottom center of the window in black.</p>
<p>&nbsp;</p>
<p><strong>HINTS:</strong></p>
<ul>
<li>Make sure you get the user input BEFORE you open the window. Otherwise, the program will freeze.</li>
<li>The&nbsp;<code>draw_text</code>&nbsp;function will draw text on a screen. Don't worry about getting the text EXACTLY in the center (it's hard!).</li>
</ul>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn7_triangle.py"", doraise=True)
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
        
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
471,lsn7_stamp,4,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Create a pythonGraph function called&nbsp;<code>draw_stamp</code>&nbsp;that accepts an x and y coordinate as parameters. Add code so that this function will then draw a picture (of your choosing) centered on that coordinate. </p>
<p>&nbsp;</p>
<p>To test your function, create a pythonGraph window, and call your function several times (each time, passing it a different set of x and y coordinates).</p>
</div>

","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""lsn7_stamp.py"", doraise=True)
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
        
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
472,lsn7_skill1,4,skill,0,"<div>
    <p><strong>PROBLEM STATEMENT:<br></strong>Read the pythonGraph documentation, and write the following 3 lines of
        code:</p>
    <ol>
        <li>Use the open_window function to create a graphics window</li>
        <li>Use the draw_circle function to draw a circle (any size and/or color).</li>
        <li>Call the wait_for_close function to keep the graphics window open until you click the X in the top right
            corner.</li>
    </ol>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0.0
    
    if autograder.code_compiles(""lsn7_skill1.py""):
        file = open(""lsn7_skill1.py"", ""r"")
        file_contents = file.read()
    
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
    
        if ""open_window("" in file_contents:
            print(""open_window Called"")
            score += 33
        else:
            print(""open_window does not appear to be called"")
        
        if ""draw_circle("" in file_contents:
            print(""draw_circle Called"")
            score += 34
        else:
            print(""draw_circle does not appear to be called"")
            
        if ""wait_for_close("" in file_contents:
            print(""wait_for_close Called"")
            score += 33
        else:
            print(""wait_for_close does not appear to be called"")
            
    else:
        print(""There appears to be an error in your python Script that is preventing it from running"")
    
    return score        
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
473,lsn7_simpledrawing,4,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Using pythonGraph (and the documentation for pythonGraph), experiment with each of the drawing commands listed (drawing commands begin with the keyword &ldquo;draw&rdquo;). Draw something interesting using at least 4 different drawing commands. One of those drawing commands must be&nbsp;<code>draw_image</code></p>
<p><strong>NOTE: <br /></strong>The best files will be added to our Python ""Hall of Fame"".</p>
</div>

","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    drawing_functions = [""draw_arc"", ""draw_image"", ""draw_rectangle"", ""draw_circle"", ""draw_ellipse"", ""draw_line"", ""draw_pixel"", ""draw_text"", ""write_text""]
    drawing_functions_called = []
    
    print(""----------------------------------------------------------------------"")
    print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
    print(""----------------------------------------------------------------------\n"")
    
    file = open(""lsn7_simpledrawing.py"", ""r"")
    file_contents = file.read()
    
    for f in drawing_functions:
        if f in file_contents and f not in drawing_functions_called:
            drawing_functions_called.append(f)
    
    if len(drawing_functions_called) >= 4 and ""draw_image"" in drawing_functions_called:
        print(""Good Job!"")
        return 100.0
    elif len(drawing_functions_called) >= 4 and ""draw_image"" not in drawing_functions_called:
        print(""Missing at least one call of draw_image"")
        return 90.0
    else:
        print(""Not enough different drawing functions.  Need 4 unique (including draw_image) calls."")
        return 25 * len(drawing_functions_called)
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
474,lsn7_randomcircles,4,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Create a pythonGraph that asks the user for the number of circles to draw. Your program should then open a pythonGraph window and then draw that many circles somewhere within view.</p>
<p><strong>Hints</strong></p>
<ul>
<li>Import the&nbsp;<code>random</code>&nbsp;module in order to generate random numbers. There are specifically two functions that are useful:</li>
<li><code>random.random()</code>&nbsp;returns a random number between 0.0 and 1.0</li>
<li><code>random.randint(start, end)</code>&nbsp;returns a random integer between&nbsp;<code>start</code>&nbsp;and&nbsp;<code>end</code></li>
</ul>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:
        py_compile.compile(""lsn7_randomcircles.py"", doraise=True)
        print(""----------------------------------------------------------------------"")
        print(""*** To Actually See Your Graphics, Rerun this Program and Type 'N' ***"")
        print(""----------------------------------------------------------------------\n"")
        
        file = open(""lsn7_randomcircles.py"", ""r"")
        file_contents = file.read()
        lines = file_contents.split(""\n"")
        
        pg_draw_used = False
        random_used = False
        
        for line in lines:
            if len(line.strip()) > 0 and line.strip()[0] != '#':      
                if ""random.rand"" in line:
                    random_used = True
                    
                if ""draw_circle("" in line:
                    pg_draw_used = True
        
        if pg_draw_used and random_used:
            print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
            return 100.0
        elif pg_draw_used and not random_used:
            print(""Looks like you drew a circle but didn't use random values for size or location."")
            return 50.0
        elif not pg_draw_used and random_used:
            print(""Looks like you created random variables but didn't actually draw any circles."")
            return 50.0
        else:
            print(""Doesn't look like you created random variables or drew any circles."")
            return 0.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
475,lsn6_uod,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You&rsquo;ve been asked to develop a tool to help identify the uniform of the day, based on temperature and wind speed.</p>
<p>The command center has provided the following table for guidance:</p>
<table>
<tbody>
<tr>
    <td></td>
<td colspan=""6"">Temperature</td>
</tr>
<tr>
<td rowspan=""4"">Wind Speed</td>
<td></td>
<td>&lt;40</td>
<td>40</td>
<td>&gt;40 and &lt;60</td>
<td>60</td>
<td>&gt;60</td>
</tr>
<tr>
<td>&lt;15</td>
<td>Parkas</td>
<td>A-Jackets</td>
<td>A-Jackets</td>
<td>A-Jackets</td>
<td>Blues</td>
</tr>
<tr>
<td>15</td>
<td>ABUs</td>
<td>ABUs</td>
<td>Parkas</td>
<td>Parkas</td>
<td>Blues</td>
</tr>
<tr>
<td>&gt;15</td>
<td>ABUs</td>
<td>ABUs</td>
<td>Parkas</td>
<td>Parkas</td>
<td>A-Jackets</td>
</tr>
</tbody>
</table>
<p>Create a Python program that first gets the temperature (in degrees Fahrenheit) and then the wind speed (in knots) from the user. You may assume that all inputs are non-negative numbers.</p>
<p>It should then output the correct response, as described above.</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0

# The Actual Solution
def solution(temp, wind):
    if temp < 40:
        if wind < 15:
            return ""Parkas""
        else:
            return ""OCPs""
    elif temp == 40:
        if wind < 15:
            return 'A-Jackets'
        else:
            return 'OCPs'
    elif temp > 40 and temp <= 60:
        if wind < 15:
            return 'A-Jackets'
        else:
            return 'Parkas'
    else:
        if wind <= 15:
            return 'Blues'
        else:
            return 'A-Jackets'


def run_test(temp, wind):
    global num_tests_passed
    
    print(""Testing Temp ="", temp, 'and Wind =', wind)
    output, error_message = autograder.run_script(""lsn6_uod.py"", [temp, wind])
    
    print(""Output:"", output.strip())
    
    if output.strip() == solution(temp, wind):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT.  Expected:"", solution(temp, wind), ""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(39, 14)
    run_test(39, 15)
    run_test(39, 16)
    run_test(40, 14)
    run_test(40, 15)
    run_test(40, 16)
    run_test(50, 14)
    run_test(50, 15)
    run_test(50, 16)
    run_test(60, 14)
    run_test(60, 15)
    run_test(60, 16)
    run_test(61, 14)
    run_test(61, 15)
    run_test(61, 16)
    
    return round(num_tests_passed * (100 / 15), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
476,lsn6_speeding,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a program that gets a speed (in miles per hour). You may assume that all inputs are non-negative numbers.</p>
<p>It should output the kind of ticket a police officer should give the driver (according to the table below).</p>
<table>
<thead>
<tr>
<th>Speed (mph)</th>
<th>&lt;= 65</th>
<th>&gt;65 and &lt;= 70</th>
<th>&gt;70 and &lt;= 75</th>
<th>&gt; 75 and &lt;= 80</th>
<th>&gt; 80</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ticket</td>
<td>No Ticket</td>
<td>Warning</td>
<td>Speeding</td>
<td>Reckless Driving</td>
<td>Reckless Endangerment</td>
</tr>
</tbody>
</table>
<p><strong>EXAMPLES:</strong></p>
<table>
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
<th>Example 4</th>
<th>Example 5</th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>48</td>
<td>68</td>
<td>72</td>
<td>78</td>
<td>136</td>
</tr>
<tr>
<td>Expected Output </td>
<td>No Ticket</td>
<td>Warning</td>
<td>Speeding</td>
<td>Reckless Driving</td>
<td>Reckless Endangerment</td>
</tr>
</tbody>
</table>
<p></p>
</div>","from cs110 import autograder
import random, math

# The Actual Solution
def solution(speed):
    # Determines what to return based on the table
    if (speed <= 65):
        return ""No Ticket""
    elif (speed >65 and speed <= 70):
        return ""Warning""
    elif (speed > 70 and speed <= 75):
        return ""Speeding""  
    elif (speed >75 and speed <= 80):
        return ""Reckless Driving""
    elif (speed > 80):
        return ""Reckless Endangerment""

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    num_tests_passed = 0
    
    SPEEDS_TO_TEST = [random.randint(0, 65),
                      65,
                      random.randint(66, 70),
                      70,
                      random.randint(71, 75),
                      75,
                      random.randint(76, 80),
                      80,
                      random.randint(81, 100)]
    
    for i in range(0, len(SPEEDS_TO_TEST)):
        print(""-------------------------------"")
        print(""Test"", i+1)
        print(""-------------------------------"")
        speed = SPEEDS_TO_TEST[i]
        output, error_message = autograder.run_script(""lsn6_speeding.py"", [speed])
        
        if output.strip() == solution(speed):
            print(""SUCCESS!\n"")
            num_tests_passed += 1
        else:
            print(""INCORRECT.  Expected:"", solution(speed), ""\n"")
    
    return round(num_tests_passed * (100 / len(SPEEDS_TO_TEST)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
477,lsn6_skill2,4,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a program that gets the user's body temperature. If the body temperature is between 97-99 (inclusive), print ""Normal"". Otherwise, print&nbsp;""Abnormal""</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

# The Actual Solution
def solution(gpa, apa, mpa):
    if gpa < 2.0 or apa < 2.0 or mpa < 2.0:
        return ""Probation""
    else:
        return ""No Probation""


def run_test(gpa, apa, mpa):
    global num_tests_run, num_tests_passed
    
    num_tests_run += 1
    
    print(""--------------------------------------------"")
    print(""Testing GPA ="", str(gpa) + "";"", ""APA ="", str(apa) + "";"", ""MPA ="", mpa)
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn6_skill2.py"", [gpa, apa, mpa])
        
    print(output.strip())
        
    if output.strip() == solution(gpa, apa, mpa):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT.  Expected:"", solution(gpa, apa, mpa), ""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    #round(random.uniform(0.1, 1.9),1)
    #round(random.uniform(2.1, 4.0),1)
    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1))
    run_test(round(random.uniform(0.1, 1.9),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1))
    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(0.1, 1.9),1), round(random.uniform(2.1, 4.0),1))
    run_test(round(random.uniform(2.1, 4.0),1), round(random.uniform(2.1, 4.0),1), round(random.uniform(0.1, 1.9),1))

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
478,lsn6_skill1,4,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a program that gets the user's body temperature. If the body temperature is between 97-99 (inclusive), print ""Normal"". Otherwise, print&nbsp;""Abnormal""</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

# The Actual Solution
def solution(body_temperature):
    if body_temperature >= 97 and body_temperature <= 99:
        return ""Normal""
    else:
        return ""Abnormal""


def run_test(body_temperature):
    global num_tests_run, num_tests_passed
    
    num_tests_run += 1
    
    print(""--------------------------------------------"")
    print(""Testing Temperature ="", body_temperature)
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn6_skill1.py"", [body_temperature])
        
    if output.strip() == solution(body_temperature):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT.  Expected:"", solution(body_temperature), ""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(96.9)
    run_test(97)
    run_test(98.5)
    run_test(99)
    run_test(99.1)

    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
479,lsn6_roundtrip,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a Python program that gets three values from the user:</p>
<ul>
<li>The distance to a destination (in miles)</li>
<li>The amount of fuel in the user's car (in gallons)</li>
<li>The # of miles the user's car can travel per gallon of gas (i.e., Miles Per Gallon)</li>
</ul>
<p>You may assume that all inputs are non-negative numbers.</p>
<p>Calculate the amount of fuel needed to reach the destination. Then output whether or not the user needs to refuel during a round trip, using the below table as a guide:</p>
<table>
<thead>
<tr>
<td>Fuel Consumed (One-Way)</td>
<td>=&lt; 50%</td>
<td>&gt; 50% and &lt;= 100%</td>
<td>&gt; 100%</td>
</tr>
</thead>
<tbody>
<tr>
<td>Output</td>
<td>No Refueling Needed</td>
<td>Refuel on Way Back</td>
<td>Refuel En Route</td>
</tr>
</tbody>
</table>
<p><strong>EXAMPLES:</strong></p>
<table>
<thead>
<tr>
    <td></td>
<td>Example 1</td>
<td>Example 2</td>
<td>Example 3</td>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>100<br />10<br />30</td>
<td>100<br />5<br />20</td>
<td>100<br />7<br />10</td>
</tr>
<tr>
<td>Output</td>
<td>No Refueling Needed</td>
<td>Refuel on Way Back</td>
<td>Refuel En Route</td>
</tr>
</tbody>
</table>
<p><strong>NOTE: Your Output Must Match Exactly</strong></p>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
            
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 1"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn6_roundtrip.py"", [100,10,30])
    
    if output.strip() == ""No Refueling Needed"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect.  Expected: No Refueling Needed\n"")
        
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 2"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn6_roundtrip.py"", [100,5,20])
    
    if output.strip() == ""Refuel on Way Back"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect.  Expected: Refuel on Way Back\n"")
    
        # Runs the Script
    print(""-------------------------------"")
    print(""Test 3"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn6_roundtrip.py"", [100,7,10])
    
    if output.strip() == ""Refuel En Route"":
        print(""CORRECT\n"")
        points_earned += 34
    else:
        print(""Incorrect.  Expected: Refuel En Route\n"")

    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
480,lsn6_lists,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write an algorithm that gets a decimal GPA, APA, and MPA from the user (in that order). You may assume that all inputs are non-negative whole numbers.</p>
<p>It then reports which meritorious list the cadet is on. If the GPA is equal to or above 3.0, the cadet is on the &ldquo;Dean&rsquo;s List&rdquo;, and if the APA is equal to or above 3.0, the cadet is on the &ldquo;Athletic Director&rsquo;s List&rdquo;, and if the MPA is equal to or above 3.0, the cadet is on the &ldquo;Commandant&rsquo;s List&rdquo;. Finally, if the cadet qualifies for all three individual lists, then the cadet is on the &ldquo;Superintendent&rsquo;s List&rdquo;. The algorithm should report all the lists the cadet is on (in the order defined above), unless the cadet is on the Superintendents List, in which case, it should report only, &ldquo;Superintendent&rsquo;s List&rdquo;.</p>
<table width=""1"">
<thead>
<tr>
    <th></th>
<th>No List</th>
<th>Dean's List</th>
<th>Athletic Director's List</th>
<th>Commandant's List</th>
<th>Superintendent's List</th>
</tr>
</thead>
<tbody>
<tr>
<td>GPA</td>
<td>&lt; 3.0</td>
<td>&gt;= 3.0</td>
<td>n/a</td>
<td>n/a</td>
<td>&gt;= 3.0</td>
</tr>
<tr>
<td>APA</td>
<td>&lt; 3.0</td>
<td>n/a</td>
<td>&gt;= 3.0</td>
<td>n/a</td>
<td>&gt;= 3.0</td>
</tr>
<tr>
<td>MPA</td>
<td>&lt; 3.0</td>
<td>n/a</td>
<td>n/a</td>
<td>&gt;= 3.0</td>
<td>&gt;= 3.0</td>
</tr>
</tbody>
</table>
<p><strong>EXAMPLES:</strong></p>
<table>
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
<th>Example 4</th>
<th>Example 5</th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>2.8<br />2.6<br />2.5</td>
<td>3.5<br />3.2<br />2.8</td>
<td>3.3<br />2.8<br />3.4</td>
<td>3.6<br />3.8<br />3.2</td>
<td>2.8<br />3.5<br />3.8</td>
</tr>
<tr>
<td>Output</td>
<td>No List</td>
<td>Dean's List<br />Athletic Director's List</td>
<td>Dean's List<br />Commandant's List</td>
<td>Superintendent's List</td>
<td>Athletic Director's List<br />Commandant's List</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0

# The Actual Solution
def solution(gpa, apa, mpa):
    answer = """"
    
    # Determines what output to present (note how we are using the "" character because of the 's)
    if (gpa < 3.0 and apa < 3.0 and mpa < 3.0):
        answer += ""No List\n""
    elif (gpa >= 3.0 and apa >= 3.0 and mpa >= 3.0):
        answer += ""Superintendent's List\n""
    else:
        # Note that these are 3 separate if statements; we do this because we don't know what list(s) the cadet is on
        if (gpa >= 3.0):
            answer += ""Dean's List\n""
        
        if (apa >= 3.0):
            answer += ""Athletic Director's List\n""
        
        if (mpa >= 3.0):
            answer += ""Commandant's List\n""

    return answer.strip()


def run_test(gpa, apa, mpa):
    global num_tests_passed
    
    print(""--------------------------------------------"")
    print(""Testing GPA ="", str(gpa) + "";"", ""APA ="", str(apa) + "";"", ""MPA ="", mpa)
    print(""--------------------------------------------"")
    output, error_message = autograder.run_script(""lsn6_lists.py"", [gpa, apa, mpa])
        
    if output.strip() == solution(gpa, apa, mpa):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT.  Expected:"", solution(gpa, apa, mpa), ""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(2.8, 2.6, 2.5)
    run_test(3.5, 3.2, 2.8)
    run_test(3.3, 2.8, 3.4)
    run_test(3.6, 3.8, 3.2)
    run_test(2.8, 3.5, 3.8)
    
    return round(num_tests_passed * (100 / 5), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
481,lsn6_fuel,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Write an algorithm that gets a fuel load (in lbs) and then a distance to base (in nautical miles). You may assume all inputs are non-negative numbers.</p>
<p>It then outputs what kind of action the pilot should take. If the fuel load is less than 50 lbs and the distance to base is less than 70 nm, report &ldquo;Return to base&rdquo;, otherwise, report &ldquo;Resume flight&rdquo;.&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table>
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
<th>Example 4</th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>30<br />60</td>
<td>60<br />60</td>
<td>40<br />80</td>
<td>60<br />80</td>
</tr>
<tr>
<td>Output</td>
<td>Return to base</td>
<td>Resume flight</td>
<td>Resume flight</td>
<td>Resume flight</td>
</tr>
</tbody>
</table>
<p><strong>Note: Output must match exactly.</strong></p>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
            
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 1"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn6_fuel.py"", [30,60])
    
    if output.strip() == ""Return to base"":
        print(""CORRECT\n"")
        points_earned += 25
    else:
        print(""Incorrect.  Expected: Return to base\n"")
        
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 2"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn6_fuel.py"", [60,60])
    
    if output.strip() == ""Resume flight"":
        print(""CORRECT\n"")
        points_earned += 25
    else:
        print(""Incorrect.  Expected: Resume flight\n"")
    
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 3"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn6_fuel.py"", [40,80])
    
    if output.strip() == ""Resume flight"":
        print(""CORRECT\n"")
        points_earned += 25
    else:
        print(""Incorrect.  Expected: Resume flight\n"")

    # Runs the Script
    print(""-------------------------------"")
    print(""Test 4"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn6_fuel.py"", [60,80])
    
    if output.strip() == ""Resume flight"":
        print(""CORRECT\n"")
        points_earned += 25
    else:
        print(""Incorrect.  Expected: Resume flight\n"")

    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
482,lsn5_skill2,4,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a program that gets a course name and number (e.g., Math 243) from the user. Modify the program to do the following:</p>
<ul>
<li>If the course name is equal to ""CS110"", print ""You get to program!""</li>
<li>Otherwise, print ""Boo, no programming.""</li>
</ul>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
            
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 1 - CS110"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn5_skill2.py"", [""CS110""])
    
    if output.strip() == ""You get to program!"":
        print(""CORRECT\n"")
        points_earned += 50
    else:
        print(""Incorrect.  Expected: You get to program!\n"")
        
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 2 - Another Class"")
    print(""-------------------------------"")
    classes = ['Math 151', 'English 111', 'Physics 110']
    random_class = classes[random.randint(0, len(classes)-1)]
    output, error_message = autograder.run_script(""lsn5_skill2.py"", [random_class])
    
    if output.strip() == ""Boo, no programming."":
        print(""CORRECT\n"")
        points_earned += 50
    else:
        print(""Incorrect.  Expected: Boo, no programming.\n"")

    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
483,lsn5_skill1,4,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a program that gets a temperature from the user. Modify the program to do the following:</p>
<ul>
<li>If the temperature is less than or equal to 32, print ""Water Has Frozen""</li>
<li>Otherwise (i.e., else), print ""Above Water's Freezing Point""</li>
</ul>
</div>","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
    
    # Generates Random Values
    above_freezing = random.uniform(33, 100)
    below_freezing = random.uniform(-100, 31)
    at_freezing    = 32
        
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 1 - Below Freezing"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn5_skill1.py"", [below_freezing])
    
    if output.strip() == ""Water Has Frozen"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect.  Expected: Water Has Frozen\n"")
        
    
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 2 - Above Freezing"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn5_skill1.py"", [above_freezing])
    
    if output.strip() == ""Above Water's Freezing Point"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect.  Expected: Above Water's Freezing Point\n"")
        
    
    # Runs the Script
    print(""-------------------------------"")
    print(""Test 3 - Exactly 32 Degrees"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn5_skill1.py"", [32])
    
    if output.strip() == ""Water Has Frozen"":
        print(""CORRECT"")
        points_earned += 34
    else:
        print(""Incorrect.  Expected: Water Has Frozen\n"")

    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
484,lsn5_positive,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a Python&nbsp;<strong>program</strong>&nbsp;that gets a floating point number from the user:</p>
<ul>
<li>If the number is positive, print the word&nbsp;<code>POSITIVE</code></li>
<li>Otherwise, print the word&nbsp;<code>NOT POSITIVE</code></li>
</ul>
<table>
<thead>
<tr>
    <th></th>
<td>Example 1</td>
<td>Example 2</td>
<td>Example 3</td>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>10</td>
<td>-5</td>
<td>0</td>
</tr>
<tr>
<td>Output</td>
<td>POSITIVE</td>
<td>NOT POSITIVE</td>
<td>NOT POSITIVE</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    points_earned = 0
    
    # Generates Random Values
    negative_value = random.randint(-100, -1)
    positive_value = random.randint(1, 100)
        
    # Runs the Script
    print(""-------------------------------"")
    print(""# Test 1 - Positive Number"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn5_positive.py"", [positive_value])
    
    if output.strip() == ""POSITIVE"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect Output:"", output)
        print(""Expected POSITIVE\n"")
        
    
    # Runs the Script
    print(""-------------------------------"")
    print(""# Test 2 - Negative Number"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn5_positive.py"", [negative_value])
    
    if output.strip() == ""NOT POSITIVE"":
        print(""CORRECT\n"")
        points_earned += 33
    else:
        print(""Incorrect Output:"", output)
        print(""Expected NOT POSITIVE\n"")
        
    
    # Runs the Script
    print(""-------------------------------"")
    print(""# Test 3 - Zero"")
    print(""-------------------------------"")
    output, error_message = autograder.run_script(""lsn5_positive.py"", [0])
    
    if output.strip() == ""NOT POSITIVE"":
        print(""CORRECT"")
        points_earned += 34
    else:
        print(""Incorrect Output:"", output)
        print(""Expected NOT POSITIVE\n"")

    return points_earned

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
485,lsn5_largest,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a program that takes three integers as parameters, and prints the largest (i.e., highest) number.</p>
<p>Ex: If the input is:</p>
<pre><code>7
15
3
</code></pre>
<p>Your function should return:</p>
<pre><code>15
</code></pre>
<p><br />In the event that all 3 numbers are the same, output that number.</p>
<p>Ex: If the input is:</p>
<pre><code>5
5
5
</code></pre>
<p>Your function should return:</p>
<pre><code>5</code></pre>
<p></p>
</div>","from cs110 import autograder
import random, math


def run_test(num1, num2, num3):
    print(""-------------------------------"")
    print(""# Testing: "" + str(num1) + "" "" + str(num2) + "" "" + str(num3))
    print(""-------------------------------"")
    
    output, error_message = autograder.run_script(""lsn5_largest.py"", [num1, num2, num3])
    
    if autograder.equals(output, max(num1, num2, num3)):
        print(""CORRECT\n"")
        return True
    else:
        print(""Incorrect.  Expected"", max(num1, num2, num3))
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    tests_passed = 0
    
    # Generate 3 Random Numbers
    num1 = 0
    num2 = 0
    num3 = 0
    
    # Ensures that the 3 Numbers are Different
    while num1 == num2 or num1 == num3 or num2 == num3:
        num1 = random.randint(0, 100)
        num2 = random.randint(0, 100)
        num3 = random.randint(0, 100)
    
    # Sorts the numbers
    # This is needed so that we can test relationships between numbers
    numbers = [num1, num2, num3]
    numbers.sort()
    num1 = numbers[0]
    num2 = numbers[1]
    num3 = numbers[2]
    
    # Test 1:  num1, num2, num3
    if run_test(num1, num2, num3):
        tests_passed += 1

    # Test 2:  num1, num3, num2
    if run_test(num1, num3, num2):
        tests_passed += 1
        
    # Test 3:  num2, num3, num1
    if run_test(num2, num3, num1):
        tests_passed += 1
    
    # Test 4:  num3, num1, num2
    if run_test(num3, num1, num2):
        tests_passed += 1

    # Test 5:  num2, num1, num3
    if run_test(num2, num1, num3):
        tests_passed += 1
    
    # Test 6:  3 Equal Numbers
    if run_test(num1, num1, num1):
        tests_passed += 1
            
    print(""Passed "" + str(tests_passed) + "" out of 6 tests"")
    return round(tests_passed * (100 / 6), 1)
    
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
486,lsn5_classyear,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Using the below table as a guide, write a Python program that takes the user's class year as input, and outputs their cadet class. If the class year is before 2021, output ""Graduate"". Alternatively, if the class year is larger than 2024, output ""Not a Cadet"".</p>
<p>You may assume that all inputs provided to your application are years (represented as Integers)</p>
<table>
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
<th>Example 4</th>
<th>Example 5</th>
<th>Example 6</th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>2021</td>
<td>2022</td>
<td>2023</td>
<td>2024</td>
<td>2020</td>
<td>2025</td>
</tr>
<tr>
<td>Output</td>
<td>Firstie</td>
<td>Two Degree</td>
<td>Three Degree</td>
<td>Four Degree</td>
<td>Graduate</td>
<td>Not a Cadet</td>
</tr>
</tbody>
</table>
<p></p>
</div>","from cs110 import autograder
import random, math


def solution(class_year):
    if class_year < 2022:
        return ""Graduate""
    elif class_year == 2022:
        return ""Firstie""
    elif class_year == 2023:
        return ""Two Degree""
    elif class_year == 2024:
        return ""Three Degree""
    elif class_year == 2025:
        return ""Four Degree""
    else:
        return ""Not a Cadet""

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    START_YEAR = 2021
    END_YEAR = 2026
    number_correct = 0
    
    for year in range(START_YEAR, END_YEAR + 1):
        print(""------------------------------"")
        print(""Testing: "" + str(year))
        print(""------------------------------"")
        
        # Runs the Script
        output, error_message = autograder.run_script(""lsn5_classyear.py"", [year])
                
        lines = output.split(""\n"")
               
        if lines[0] == solution(year):
            print(""PASS\n"")
            number_correct += 1
        else:
            print(""FAIL\n"")
    
    print(""Passed "" + str(number_correct) + "" out of "" + str(END_YEAR - START_YEAR + 1) + "" tests"")
    return round(number_correct * (100 / (END_YEAR - START_YEAR + 1)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
487,lsn5_atmosphere,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>The Earth's atmosphere is divided into a series of layers. Write an algorithm that asks the user for the altitude in kilometers. Then output the corresponding layer according to the following table:</p>
<table width="""">
<thead>
<tr>
<th>Altitude</th>
<th>&le;10km</th>
<th>&gt;10km&amp;&le;50km</th>
<th>&gt;50km&amp;&le;85km</th>
<th>&gt;85km&amp;&le;1000km</th>
<th>&gt;1000km&amp;&le;100,000km</th>
<th>&gt;100,000km</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Layer</strong></td>
<td>Troposphere</td>
<td>Stratosphere</td>
<td>Mesosphere</td>
<td>Thermosphere</td>
<td>Exosphere</td>
<td>Space</td>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random, math

def solution(altitude):
    if altitude >= 0:
        if altitude <= 10:
            return ""Troposphere""
    if altitude >= 11:
        if altitude <= 50:
            return ""Stratosphere""
    if altitude >= 51:
        if altitude <= 85:
            return ""Mesosphere""
    if altitude >= 86:
        if altitude <= 1000:
            return ""Thermosphere""
    if altitude >= 1001:
        if altitude <= 100000:
            return ""Exosphere""
        else:
            return ""Space""
        
# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    TEST_VALUES = [0, 1, 10, 11, 50, 51, 85, 86, 1000, 1001, 100000, 100001]
    tests_passed = 0
    
    for altitude in TEST_VALUES:
        print(""--------------------------"")
        print(""Testing "" + str(altitude) + "" km"")
        print(""--------------------------"")
        
        # Runs the Script
        output, error_message = autograder.run_script(""lsn5_atmosphere.py"", [altitude])
                               
        # Your Test Goes Here (Return True if Pass, False Otherwise)   
        if output.strip() == solution(altitude):
            print(""Passed\n"")
            tests_passed += 1
        else:
            print(""Failed (Expected: "" + solution(altitude) + "")\n"")
    
    print(""Passed"", tests_passed, ""out of"", len(TEST_VALUES), ""tests."")
    return round(tests_passed * (100 / len(TEST_VALUES)), 2)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
488,lsn4_temperature,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Write an algorithm that prompts the user for a temperature in &deg;F and then outputs K and &deg;C in that order.</p>
<p><strong>EXAMPLE:</strong></p>
<table>
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>32</td>
<td>0</td>
</tr>
<tr>
<td>Output</td>
<td>273.15<br />0</td>
<td>255.372<br />-17.778</td>
</tr>
</tbody>
</table>
<p><strong>Note: Output must match within a predefined tolerance.</strong></p>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    degrees_farenheit = random.random() * 451.0
    degrees_celsius = (degrees_farenheit - 32.0) * 5/9
    degrees_kelvin = degrees_celsius + 273.15
        
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_temperature.py"", [degrees_farenheit])
    
    lines = output.split('\n')
    
    if autograder.equals(lines[0], degrees_kelvin):
        print(""Conversion to Kelvin looks good."")
        if autograder.equals(lines[1], degrees_celsius):
            print(""Conversion to Celsius looks good."")
            return 100.0
        else:
            print(""Conversion to Celsius incorrect.\nYour result: "" + str(lines[1]) + ""\nExpected: "" + str(degrees_celsius))
            return 50.0
    else:
        if autograder.equals(lines[0], degrees_celsius):
            print(""Looks like you swapped the order of your output. Look at the Problem Statement and try again."")
        else:
            print(""Conversion to Kelvin incorrect.\nYour result: "" + str(lines[0]) + ""\nExpected: "" + str(degrees_kelvin))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
489,lsn4_skill2,4,skill,0,"<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a template that gets a distance and speed from the user, and calculates the travel time. Unfortunately, the code&nbsp;does not work. Analyze the code (and error message) and fix the problem.</p>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    # Generates Random Values
    distance = random.uniform(100, 200)
    speed = random.uniform(20, 50)
    time = distance / speed
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_skill2.py"", [distance, speed])
    
    if autograder.equals(output, time):
        print(""PASSED"")
        return 100
    else:
        print(""Incorrect Output, Expected"", time)
        return 0


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
490,lsn4_skill1,4,skill,0,<p><strong>PROBLEM STATEMENT:<br /></strong>Prompt the user for 3 different values. Store the values in variables using the names specified within the template. DO NOT include any prompts when asking for a value from the user.</p>,"from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    points_earned = 0   
    
    output, error = autograder.run_script(""lsn4_skill1.py"", ['abc', 123, 123.45])
    
    lines = output.split(""\n"")
    
    if (lines[0] == ""<class 'str'>""):
        points_earned += 33
        print(""my_string correct!"")
    else:
        print(""my_string is either not present, or is not the correct data type"")
    
    if (lines[1] == ""<class 'int'>""):
        points_earned += 33
        print(""my_integer correct!"")
    else:
        print(""my_integer is either not present, or is not the correct data type"")
        
    if (lines[2] == ""<class 'float'>""):
        points_earned += 34
        print(""my_float correct!"")
    else:
        print(""my_float is either not present, or is not the correct data type"")
        
    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
491,lsn4_projectile,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Write a python program that can calculate the range of a projectile when fired from an artillery on level ground. Your program will ask the user to input the initial velocity (<code>v</code>) and angle in degrees (<code>theta</code>). Your program should then calculate and print the range using the following formula:</p>
<p><code>range = (v^2 * sin(2 * theta)) / 9.8</code><br /><strong>WARNING: The above formula is not valid Python.</strong><br /><br /></p>
<table>
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Input</th>
<th>800<br />45</th>
<th>600<br />30</th>
<th>535.2<br />81.7</th>
</tr>
<tr>
<th>Output</th>
<th>65306.122</th>
<th>31813.178</th>
<th>8350.235</th>
</tr>
</tbody>
</table>
<p><strong>Hints</strong></p>
<ul>
<li>You need to use the&nbsp;<code>math</code>&nbsp;module's trig functions to solve this problem. Type&nbsp;<code>import math</code>&nbsp;at the top of your code to add it to your program.</li>
<li>The&nbsp;<code>sin()</code>&nbsp;and&nbsp;<code>cos()</code>&nbsp;functions assume that the angle is in&nbsp;<strong>radians</strong></li>
</ul>
</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 5
    num_correct = 0
    
    for i in range(NUM_TESTS):
        # Generates Random Values
        velocity = random.randint(400, 900)
        theta = random.random() * 90.0
        answer = (velocity**2 * math.sin(2 * theta * math.pi/180.0)) / 9.8
        incorrect_degrees_answer = (velocity**2 * math.sin(2 * theta)) / 9.8
            
        print(""----------------------------------------"")
        print(""TEST CASE"", i+1)
        print(""----------------------------------------"")
        
        # Runs the Script
        output, error_message = autograder.run_script(""lsn4_projectile.py"", [velocity, theta])

        # Optional:  Displays the Error Message (if one is provided)
        if error_message != '':
            print(""Error Occurred: "" + error_message)    
        
        lines = output.split('\n')
        
        if autograder.equals(lines[0], answer, 10.0):
            print(""CORRECT.\n\n"")
            num_correct += 1
        elif autograder.equals(lines[0], incorrect_degrees_answer, 10.0):
            print(""INCORRECT BUT CLOSE: Using Degrees Instead of Radians for math.sin()"")
        else:
            print(""INCORRECT (Expected: "" + str(answer) + "")\n\n"")
    
    return (100 / NUM_TESTS) * num_correct
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
492,lsn4_math,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Given three floating-point numbers x, y, and z, output the square root of x, the absolute value of (y minus z) , and the factorial of (the ceiling of z). Each input should be on a new line, and rounded to a maximum of 2 decimal places.</p>
<p>(Hint: use the&nbsp;<a href=""https://docs.python.org/3/library/functions.html#round"" target=""_blank"" rel=""noreferrer noopener""><code>round</code>&nbsp;(Links to an external site.)</a>&nbsp;function to round your outputs!):</p>
<p><code>round(# to round, # of digits to round to)</code></p>
<p><strong>EXAMPLE:</strong></p>
<pre><code>5.0
6.5
3.2
</code></pre>
<p>Then the output is:</p>
<pre><code>2.24
3.30
24.00
</code></pre>
<p>NOTE: Decimal places may be slightly off depending on the exact numbers used.</p>
</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num1 = random.random() * 100.0
    num2 = random.random() * 100.0
    num3 = random.random() * 10.0
    
    part1 = round(math.sqrt(num1), 2)
    part2 = round(math.fabs(num2 - num3), 2)
    part3 = round(math.factorial(math.ceil(num3)), 2)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_math.py"", [num1, num2, num3])
    
    lines = output.split('\n')
    
    correct = [0,0,0]
    
    if autograder.equals(lines[0], part1, 0.001):
        correct[0]=1
        print(""Calculation 1 Correct!"")
    else:
        print(""Calculation 1 Incorrect. Expected: "" + str(part1) + ""<-- Did you forget to use round()?"")
    if autograder.equals(lines[1], part2, 0.001):
        correct[1]=1
        print(""Calculation 2 Correct!"")
    else:
        print(""Calculation 2 Incorrect. Expected: "" + str(part2) + ""<-- Did you forget to use round()?"")
    if autograder.equals(lines[2], part3, 0.001):
        correct[2]=1
        print(""Calculation 3 Correct!"")
    else:
        print(""Calculation 3 Incorrect. Expected: "" + str(part3) + ""<-- Did you forget to use round()?"")
    
    amt_correct = len([elem for elem in correct if elem==1])
    
    return round(amt_correct/3*100,2)
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
493,lsn4_calories,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>The following equations estimate the calories burned when exercising (<a href=""https://web.archive.org/web/20121021230025/http://fitnowtraining.com/2012/01/formula-for-calories-burned/"" target=""_blank"" rel=""noreferrer noopener"">source&nbsp;(Links to an external site.)</a>):</p>
<p>Men: Calories = ( (Age x 0.2017) + (Weight x 0.09036) + (Heart Rate x 0.6309) &mdash; 55.0969 ) x Time / 4.184</p>
<p>Women: Calories = ( (Age x 0.074) &mdash; (Weight x 0.05741) + (Heart Rate x 0.4472) &mdash; 20.4022 ) x Time / 4.184</p>
<p>Write a program using inputs age (years), weight (pounds), heart rate (beats per minute), and time (minutes), respectively. Output calories burned for men and women.</p>
<p>Output each floating-point value (your program will be marked correct so long as it outputs a value within a predefined range)</p>
<p><strong>EXAMPLE: </strong></p>
<p>If the input is:</p>
<pre><code>49
155
148
60
</code></pre>
<p>Then the output is:</p>
<pre><code>891.47
580.94</code></pre>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    age_years = random.randint(10, 99)
    weight_pounds = random.randint(80, 400)
    heart_bpm = random.randint(50, 140)
    time_minutes = random.randint(15, 90)
    
    calories_man   = ( (age_years * 0.2017) + (weight_pounds * 0.09036) + (heart_bpm * 0.6309) - 55.0969 )  * time_minutes / 4.184
    calories_woman = ( (age_years * 0.074)  + (weight_pounds * 0.05741) + (heart_bpm * 0.4472) - 20.4022 ) * time_minutes / 4.184
        
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_calories.py"", [age_years, weight_pounds, heart_bpm, time_minutes])
      
    lines = output.split('\n')
      
    if autograder.equals(lines[0], calories_man):
        print(""Male Calorie Calculations Look Good."")
        if autograder.equals(lines[1], calories_woman):
            print(""Female Calorie Calculations Look Good."")
            return 100.0
        else:
            print(""Female Calorie Calculation is Incorrect.\nExpected: "" + str(calories_woman))
            return 50.0
    else:
        print(""Male Calorie Calculation is Incorrect.\nExpected: "" + str(calories_man))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
494,lsn4_bits_to_kmg,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>One byte is comprised of 8 bits. A typical computer program has a requirement for much more memory. Therefore, many bytes can be grouped together to make larger memory amounts. Our convention is for computer memory is scaled in logical increments of 2<sup>10</sup>&nbsp;= 1024.</p>
<p>For example:</p>
<ul>
<li>1024 bytes = 1 kilobyte (KB)</li>
<li>1024 KB = 1 megabyte (MB)</li>
<li>1024 MB = 1 gigabyte (GB)</li>
</ul>
<p>Write an algorithm that prompts the user for a number of bits and then outputs the equivalent number of kilobytes, megabytes, and gigabytes.</p>
<p><strong>EXAMPLE:</strong></p>
<table>
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>1000000</td>
<td>6879000</td>
<td>92445694</td>
</tr>
<tr>
<td>Output</td>
<td>122.07<br />0.12<br />0.00012</td>
<td>839.72<br />0.82<br />.0008</td>
<td>11,284.87<br />11.02<br />0.01</td>
</tr>
</tbody>
</table>
<p><strong>Note: Output must match within a predefined tolerance.</strong></p>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_bits = random.randint(1, 1000000)
    num_bytes = num_bits / 8
    num_kb = num_bytes / 1024
    num_mb = num_kb / 1024
    num_gb = num_mb / 1024
        
    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_bits_to_kmg.py"", [num_bits])
      
    lines = output.split('\n')
      
    if autograder.equals(lines[0], num_kb):
        print(""Kilobyte Conversion Looks Good."")
        if autograder.equals(lines[1], num_mb):
            print(""Megabyte Conversion Looks Good."")
            if autograder.equals(lines[2], num_gb):
                print(""Gigabyte Conversion Looks Good."")
                return 100.0
            else:
                print(""Num GB is Incorrect.\n  Expected: "" + str(num_gb))
                return 67.0
        else:
            print(""Num MB is Incorrect.\n  Expected: "" + str(num_mb))
            return 33.0
    else:
        print(""Num KB is Incorrect.\n  Expected: "" + str(num_kb))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
495,lsn4_bits_to_bytes,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>The basic unit of computer memory is a bit. A bit can represent two values (on or off, 0 or 1). To represent more information, bits are grouped together in larger quantities. Beyond a bit, the next logical grouping is a byte, where 1 byte has 8 bits. Write an algorithm that prompts the user for a number of bits and then outputs the equivalent number of bytes.</p>
<p><strong>EXAMPLE:</strong></p>
<table width="""">
<thead>
<tr>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>8</td>
<td>800</td>
<td>7234</td>
</tr>
<tr>
<td>Output</td>
<td>1.0</td>
<td>100.0</td>
<td>904.25</td>
</tr>
</tbody>
</table>
<p><strong>Note: Output must match exactly.</strong></p>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_bits = random.randint(1, 1000000)
    num_bytes = num_bits / 8

    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_bits_to_bytes.py"", [num_bits])
      
    if autograder.equals(output, num_bytes):
        print(""Num Bytes Looks Good."")
        return 100.0
    else:
        print(""Num Bytes is Incorrect.\nExpected: "" + str(num_bytes))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
496,lsn4_bit_representation,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>One way bits can hold information is computer images. Computer images are composed of a grid of small, independent colored cells known as pixels. The number of colors each pixel can hold is related to the number bits allocated to each pixel. A simple black and white image, for example, would have a single bit per pixel, where the value of the bit would represent black or white for that pixel. Allocating 2 bits per pixel would allow each pixel to have one of four colors.</p>
<p>Generally speaking, the number of color options available to a particular pixel can be described as:</p>
<pre>numberofcolors = 2<sup>number of bits</sup></pre>
<p>In Python, write an algorithm that prompts the user for a number of bits and then outputs the number of different colors that could be represented by a single pixel.</p>
<p><strong>EXAMPLE:</strong></p>
<table width="""">
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>3</td>
<td>8</td>
<td>24</td>
</tr>
<tr>
<td>Output</td>
<td>8</td>
<td>256</td>
<td>16777216</td>
</tr>
</tbody>
</table>
<p><strong>Note: Output must match exactly.</strong></p>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_bits = random.randint(1, 32)
    num_colors = 2 ** num_bits

    # Runs the Script
    output, error_message = autograder.run_script(""lsn4_bit_representation.py"", [num_bits])
      
    if autograder.equals(output, num_colors):
        print(""Num Colors Looks Good."")
        return 100.0
    else:
        print(""Num Colors is Incorrect.\nExpected: "" + str(num_colors))
        return 0.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
497,lsn3_skill2,4,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a program that gets a cadet's age, and stores it in a variable called&nbsp;<strong>your_age.</strong></p>
<p>Print the user's age + 4.&nbsp;</p>
<p>For example, if the user types:</p>
<pre> 18</pre>
<p>Your program should print:</p>
<pre>22</pre>
</div>","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    # Generates Random Values
    age = random.randint(18, 30)
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn3_skill2.py"", [age])
    
    if autograder.equals(output, age+4):
        print(""PASSED"")
        return 100
    elif autograder.equals(output, age):
        print(""Close!  You forgot to add 4 to the age before printing it out"")
        return 50
    else:
        print(""Incorrect Output, Expected"", age+4)
        return 0


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
498,lsn3_skill1,4,skill,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Create a variable called&nbsp;<strong>name,&nbsp;</strong>and set it equal to your name (represented as a string--don't forget to use the quotation marks!).</p>
</div>","from cs110 import autograder
import random

from lsn3_skill1 import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    points_earned = 0   
    
    print(""Looking for a variable called 'name' . . . "", end='')
    
    if 'name' in globals():
        points_earned += 50
        print(""FOUND!"")
        print(""Now, checking to make sure your name is a string"")
        
        if type(name).__name__ == 'str':
            points_earned += 50
            print(""Good Job"", name + ""!"")
        else:
            print(""Make sure you are surrounding your name with quotation marks"")
    else:
        print(""NOT FOUND :("")
        
    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
499,lsn3_scoreaverage,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write an algorithm that prompts the user for three sports game scores and outputs the average.</p>
<p><br /><strong>EXAMPLE:</strong></p>
<table>
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<td>Input</td>
<td>8<br />15<br />12</td>
<td>89<br />103<br />63</td>
<td>14<br />42<br />36</td>
</tr>
<tr>
<td>Output</td>
<td>11.666666666666666</td>
<td>85.0</td>
<td>30.666666666666668</td>
</tr>
</tbody>
</table>
<p><strong>Note: Output must match (within a predefined tolerance).</strong></p>
</div>","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    score1 = random.randint(0, 100)
    score2 = random.randint(0, 100)
    score3 = random.randint(0, 100)
    average = (score1 + score2 + score3) / 3.0
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn3_scoreaverage.py"", [score1, score2, score3])
    
    if autograder.equals(output, average):
        print(""PASSED!"")
        return 100
    else:
        print(""Value doesn't match.\nExpected: "" + str(average))
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
500,lsn3_pointspread,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>A ""Point Spread"" is a term used to in sports (and gambling) to describe the difference between two teams' scores. For example, if one team scores 20 points and another team scores 30 points, the point spread is 10. A point spread is always a positive number.</p>
<p>Write an algorithm that prompts the user for two sports game scores and outputs the point spread. <br /><br /><strong><br />EXAMPLE:</strong></p>
<table>
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Input</th>
<th>8<br />15</th>
<th>89<br />103</th>
<th>42<br />14</th>
</tr>
<tr>
<th>Output</th>
<th>7</th>
<th>14</th>
<th>28</th>
</tr>
</tbody>
</table>
<p><strong>Note: Output must match exactly.</strong></p>
</div>","from cs110 import autograder
import random


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    score1 = random.randint(0, 50)
    score2 = random.randint(score1, 100)
    spread = abs(score1 - score2)

    points_earned = 0

    # Trial #1:  score 1 > score2
    print(""Testing when score 1 is bigger than score 2 . . ."")
    output, error_message = autograder.run_script(""lsn3_pointspread.py"", [score1, score2])
    
    if autograder.equals(output, spread):
        print(""PASSED!\n"")
        points_earned += 50
    else:
        print(""Value doesn't match.\nExpected: "" + str(spread)  + ""\n"")
        
    # Trial #2:  score 2 > score1
    print(""Testing when score 2 is bigger than score 1 . . ."")
    output, error_message = autograder.run_script(""lsn3_pointspread.py"", [score2, score1])
    
    if autograder.equals(output, spread):
        print(""PASSED!"")
        points_earned += 50
    else:
        print(""Value doesn't match.\nExpected: "" + str(spread))
    
    return points_earned


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
501,lsn3_madlib,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Mad Libs are activities that have a person provide various words, which are then used to complete a short story in unexpected (and hopefully funny) ways. (EDITOR'S NOTE: Do you kids even do Mad Libs anymore?)</p>
<p>Complete the program to read the needed values from input, that the existing output statement(s) can use to output a short story.</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the input is:</p>
<pre><code>Eric
Chipotle
12
burritos
</code></pre>
<p>Then the output is:</p>
<pre><code>Eric went to Chipotle to buy 12 different types of burritos</code></pre>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    first_names = ['Adrian', 'Troy', 'Dave', 'Paul', 'Kelly', 'Steve', 'Barry']
    generic_locations = ['Best Buy', 'AAFES', 'Target', 'THE Walmart', 'Home Depot']
    nouns = ['Video Games', 'Board Games', 'Nintendo Switches', 'Sony PS4s', 'Microsoft (Ugh) Xbox Ones']
    
    first_name = first_names[random.randint(0, len(first_names) - 1)]
    generic_location = generic_locations[random.randint(0, len(generic_locations) - 1)]
    whole_number = random.randint(0, 100)
    plural_noun = nouns[random.randint(0, len(nouns) - 1)]

    expected_output = first_name + ' went to ' + generic_location + ' to buy ' + str(whole_number) + ' different types of ' + plural_noun + ""\n""

    # Runs the Script
    output, error_message = autograder.run_script(""lsn3_madlib.py"", [first_name, generic_location, whole_number, plural_noun])
    
    if output == expected_output:
        print(""PASSED!"")
        return 100
    else:
        print(""String doesn't match.\nExpected: "" + expected_output)
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
502,lsn3_girlscouts,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a program that asks the user for the amount of money he/she has on hand, and outputs the number of girl scout cookies that he/she can purchase. Use the following prices:</p>
<p>$5 per box for the ""Super Six"" (Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, Savannah Smiles)<br />$6 per box for the Specialty Cookies (S'mores, Toffee-tastic)</p>
<p><strong>For this problem, assume that the user will buy all of one or the other. In other words, output the number of boxes that he/she would be able to obtain if he/she bought nothing but the Super Six, and nothing but the Specialty Cookies.</strong></p>
<p><strong>HINT:</strong><br />You can convert a number to an integer by using the int() function. For example:<br /><strong>int(2.51)</strong> will convert the number to 2</p>
<p>EXAMPLE:<br />If the input is:</p>
<pre>26</pre>
<p>Then the output is:</p>
<pre>5 boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles<br />4 boxes of S'mores and Toffee-tastic</pre>
</div>","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    dollar_amount = round(random.uniform(10.00, 100.00), 2)
    super_six_amount = (dollar_amount // 5)
    specialty_amount = (dollar_amount // 6)
    score = 0
    
    line_1 = str(int(super_six_amount)) + "" boxes of Thin Mints, Samoas, Tagalongs, Do-Si-Dos, Trefoils, or Savannah Smiles""
    line_2 = str(int(specialty_amount)) + "" boxes of S'mores and Toffee-tastic""
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn3_girlscouts.py"", [dollar_amount])
    output_lines = output.split('\n')
    
    if line_1 == output_lines[0]:
        print(""First Line is Correct"")
        score += 50
    else:
        print(""First Line is Incorrect.  Expected:"", line_1)
    
    if line_2 == output_lines[1]:
        print(""Second Line is Correct"")
        score += 50
    else:
        print(""Second Line is Incorrect.  Expected:"", line_2)
    
    return score
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
503,lsn3_arrivaltime,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write an algorithm that prompts the user for a distance to travel (in miles) and a speed (in mph) and outputs time of arrival in hours.</p>
<p><br /><strong>For Example:</strong></p>
<table>
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Input</th>
<th>72<br />60</th>
<th>1282<br />85</th>
<th>120.5<br />59.2</th>
</tr>
<tr>
<th>Output</th>
<th>1.2</th>
<th>15.0823</th>
<th>2.0355</th>
</tr>
</tbody>
</table>
<p><strong>Note: Output needs to match the examples.</strong></p>
</div>
","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    distance = round(random.random() * 1000, 1)
    speed = round(random.random() * 60, 1)
    time = distance / speed
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn3_arrivaltime.py"", [distance, speed])
    
    if autograder.equals(output, time):
        print(""PASSED!"")
        return 100
    else:
        print(""Value doesn't match.\nExpected: "" + str(time))
        return 0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
504,lsn24_starmap,4,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong><span>You have been provided with a table that
            describes a simple night sky as a 2D list in your code template.&nbsp; This list is an exact mapping to the
            picture below.&nbsp; The 2D list (<code>star_map</code>) is populated with characters representing the
            locations of various astronomical entities (stars, planets, etc).&nbsp; For example, you can see in the
            template that the very first item is 'M', since there is a Moon in the top left corner.</span></p>
    <p>&nbsp;</p>
    <p>Write a program that gets two values from the user in the following order:</p>
    <ol>
        <li>The horizontal index of the cell in the star map to search (e.g. 0 for the top row)</li>
        <li>The vertical index of the cell in the star map to search (e.g. 0 for the leftmost column)</li>
    </ol>
    <p>&nbsp;</p>
    <p>Finally,<span> <strong>print&nbsp;</strong><strong></strong></span>out the word associated with the code in the
        table at that particular cell.</p>
    <p><code><span>S = Star; St = Satellite; M = Moon; P = Planet; _ = Nothing</span></code></p>
    <p>&nbsp;</p>
    <p><strong>EXAMPLES:</strong></p>
    <p>&nbsp;</p>
    <table style=""border-collapse: collapse; width: 500px; height: 148px; margin-left: auto; margin-right: auto;"">
        <thead>
            <tr>
                <td style=""border-style: solid; text-align: center; width: 77px;""></td>
                <td style=""border-style: solid; text-align: center; width: 104px;"">Example 1</td>
                <td style=""border-style: solid; text-align: center; width: 70px;"">Example 2</td>
                <td style=""border-style: solid; text-align: center; width: 35px;"">Example 3</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style=""border-style: solid; text-align: center; width: 77px;""><strong>Input</strong></td>
                <td style=""border-style: solid; text-align: center; width: 104px;"">
                    <p>0</p>
                    <p>0</p>
                </td>
                <td style=""border-style: solid; text-align: center; width: 70px;"">
                    <p>0</p>
                    <p>1</p>
                </td>
                <td style=""border-style: solid; text-align: center; width: 35px;"">
                    <p>4</p>
                    <p>1</p>
                </td>
            </tr>
            <tr>
                <td style=""border-style: solid; text-align: center; width: 77px;""><strong>Output</strong></td>
                <td style=""border-style: solid; text-align: center; width: 104px;"">Moon</td>
                <td style=""border-style: solid; text-align: center; width: 70px;"">Nothing</td>
                <td style=""border-style: solid; text-align: center; width: 35px;"">Satellite</td>
            </tr>
        </tbody>
    </table>
    <hr>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math, traceback

STUDENT_SOLUTION_FILENAME = ""lsn24_starmap.py""

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    test_cases = dict()
    test_cases[(0,0)] = ""Moon"" 
    test_cases[(0,1)] = ""Nothing""   
    test_cases[(4,1)] = ""Satellite""
    test_cases[(1,4)] = ""Planet""
    test_cases[(3,1)] = ""Planet""
    test_cases[(2,4)] = ""Moon""
    test_cases[(2,2)] = ""Nothing""
    test_cases[(4,3)] = ""Satellite""
    test_cases[(0,4)] = ""Star""
    test_cases[(3,2)] = ""Star""
    
    
    test_case_input = list(test_cases.keys())
    case_order = list(range(len(test_case_input)))
    #random.shuffle(case_order)
    
    score = 0
    i = 1
    
    for idx in case_order:
        print('\n' + '='*30)
        print(""Test Case:"", i)
        print('='*30)
        
        try: 
            output, error = autograder.run_script(STUDENT_SOLUTION_FILENAME, test_case_input[case_order[idx]])        
            expected_output = test_cases[test_case_input[case_order[idx]]]
                        
            test_case_score = 0
            
            output = output.strip()
            
            if len(output.split('\n')) == 0:
                print(""No Output Detected. Expected:"")
                print(expected_output)
            elif len(output.split('\n')) > 1:
                print(""Your program printed too many lines. Expected:"")
                print(expected_output)
            elif output.strip() == expected_output.strip():
                print(""CORRECT!"")
                test_case_score = 100.0 / len(test_cases)
            else:
                print(""INCORRECT. Expected:"")
                print(expected_output)
            
            score += test_case_score
            i += 1
        except Exception as e:
            score += 0
            i += 1
            
            print(""An ERROR Occured:"", e)
            print(traceback.print_exc())    


    return score
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':
    try:
        result = test_passed()
    except Exception as e:
        result = 0
        print(""An ERROR Occured:"", e)
    print(""Unit Test Returned:"", result)",100,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# ---------------------------------------------------------------------
# Lab: Star Map
# Course: CS110, Spring 2022
# ---------------------------------------------------------------------

# ---------------------------------------------------------------------
# Problem Statement: Write a Python program that prints what is found 
#  at a specific location of the star map represented below.
#  NOTE: See the Canvas Problem Statement for additional details.
# ---------------------------------------------------------------------

#DO NOT TOUCH THIS LIST!
star_map =   [['M', '_', '_', '_', 'S'],
              ['S', 'M', '_', '_', 'P'],
              ['S', '_', '_', 'P', 'M'],
              ['P', 'P', 'S', '_', '_'],
              ['M', 'St', '_', 'St', '_']]
#  S = Star; St = Satellite; M = Moon; P = Planet; _ = Nothing

#Your code goes here."
505,lsn24_nasa,4,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Write a Python program that repeatedly asks the user for names of famous NASA space missions (e.g., Apollo 11) as
        well as the year in which the mission took place, until the user types the word ""DONE"" for the mission.</p>
    <p>Your program should output:</p>
    <ol>
        <li>Year of the <span style=""text-decoration: underline;""><strong>latest mission</strong></span> (most recent)
        </li>
        <li>Names of all missions that occurred within 3 years prior to the most recent mission (inclusive)</li>
    </ol>
    <p><strong>EXAMPLES:</strong></p>
    <p>&nbsp;</p>
    <table style=""margin-left: auto; margin-right: auto; width: 331px; height: 148px;"">
        <thead>
            <tr>
                <td style=""border-style: solid; text-align: center; width: 77px;""></td>
                <td style=""border-style: solid; text-align: center; width: 104px;"">Example 1</td>
                <td style=""border-style: solid; text-align: center; width: 140px;"">Example 2</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style=""border-style: solid; text-align: center; width: 77px;"">Input</td>
                <td style=""border-style: solid; text-align: center; width: 104px;"">Gemini 3<br>1965<br>Gemini
                    4<br>1965<br>Gemini 12<br>1966<br>DONE</td>
                <td style=""border-style: solid; text-align: center; width: 140px;"">
                    <p>Mercury 5<br>1961<br>Apollo 11<br>1969<br>DONE</p>
                </td>
            </tr>
            <tr>
                <td style=""border-style: solid; text-align: center; width: 77px;"">Output</td>
                <td style=""border-style: solid; text-align: center; width: 104px;"">1966<br>Gemini 3<br>Gemini
                    4<br>Gemini 12</td>
                <td style=""border-style: solid; text-align: center; width: 140px;"">1969<br>Apollo 11</td>
            </tr>
        </tbody>
    </table>
</div>","from cs110 import autograder
import random, math

mission_info = [
    ['Apollo 1', 1967],
    ['Apollo 7', 1968],
    ['Apollo 8', 1968],
    ['Apollo 9', 1969],
    ['Apollo 10', 1969],
    ['Apollo 11', 1969],
    ['Apollo 12', 1969],
    ['Apollo 13', 1970],
    ['Apollo 14', 1971],
    ['Apollo 15', 1971],
    ['Apollo 16', 1972],
    ['Apollo 17', 1972],
    ]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    inputs = []
    expected_outputs = []
    
    mission_table = []
    
    for mission in random.sample(mission_info, 5):
        inputs.append(mission[0])
        inputs.append(mission[1])
        mission_table.append([int(mission[1]), mission[0]])
    inputs.append(""DONE"")
    
    max_row = max(mission_table)
    expected_outputs.append(str(max_row[0]))
    
    for m in mission_table:
        if (int(m[0]) >= int(max_row[0]) - 3):
            expected_outputs.append(m[1])
    
    output, errors = autograder.run_script(""lsn24_nasa.py"", inputs)
    lines = output.strip().split('\n')
    
    lines_match = autograder.compare_strings(lines, expected_outputs)
    
    if lines_match == len(expected_outputs):
        return 100.0
    else:
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,1,1,0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,
506,lsn24_mitches,4,lab,0,"<div><strong>PROBLEM NAME:<br></strong>lsn24_mitches</p>
    <p>&nbsp;</p>
    <p><strong>PROBLEM STATEMENT:</strong></p>
    <p>&nbsp;Write a Python program that analyzes the food at Mitchell Hall. Your program will ask for the
        number of meals to analyze and then get both:</p>
    <ol>
        <li>The name of the meal</li>
        <li>The number of calories per serving</li>
    </ol>
    <p>Your program should output the average calorie count of all meals, as well as the names of meals that are
        within 200 calories (plus or minus) of the average (inclusive).</p>
    <p style=""text-align: left;""><strong>EXAMPLES:</strong></p>
    <table style=""border-collapse: collapse; width: 88.535%; height: 325px; margin-left: auto; margin-right: auto;""
        border=""1"">
        <tbody>
            <tr>
                <td style=""width: 33.3333%;""></td>
                <td style=""width: 33.3333%; text-align: center;""><strong>Example 1</strong></td>
                <td style=""width: 33.3333%; text-align: center;""><strong>Example 2</strong></td>
            </tr>
            <tr>
                <td style=""width: 33.3333%;"">Input</td>
                <td style=""width: 33.3333%; text-align: center;"">
                    <p>3<br>Shepherd's Pie<br>300<br>Foot Long Hot Dog<br>350<br>Hamburger<br>960<br><br></p>
                </td>
                <td style=""width: 33.3333%; text-align: center;"">
                    4<br>Pizza<br>600<br>Cheeseburger<br>450<br>Pancakes<br>1100<br>Burrito<br>900</td>
            </tr>
            <tr>
                <td style=""width: 33.3333%;"">Expected Output</td>
                <td style=""width: 33.3333%; text-align: center;"">536.6666666666666<br>Foot Long Hot Dog</td>
                <td style=""width: 33.3333%; text-align: center;"">762.5<br>Pizza<br>Burrito</td>
            </tr>
        </tbody>
    </table>
</div>","from cs110 import autograder
import random, math

meal_info = [
    ['Hot Dogs', 600],
    ['French Dip', 540],
    ['Chicken Cordon Bleu', 300],
    ['Turkey Sandwich', 350],
    ['Mitch\'s Mountain', 1100],
    ['Shepherd\'s Pie', 272],
    ['Teriyaki Chicken', 250],
    ]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    inputs = []
    expected_outputs = []
    
    meal_table = []
    table_size = random.randint(3, 5)
    total = 0
    inputs.append(table_size)
    
    for meal in random.sample(meal_info, table_size):
        total += meal[1]
        inputs.append(meal[0])
        inputs.append(meal[1])
        meal_table.append([meal[0], meal[1]])
    
    average = total / len(meal_table)
    expected_outputs.append(str(average))
    
    for m in meal_table:
        if m[1] >= average-200 and m[1] <= average+200:
            expected_outputs.append(m[0])
    
    output, errors = autograder.run_script(""lsn24_mitches.py"", inputs)
    lines = output.strip().split('\n')
    
    lines_match = autograder.compare_strings(lines, expected_outputs)
    
    if lines_match == len(expected_outputs):
        return 100.0
    else:
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,
507,lsn24_education,4,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
        <p>In this problem, we look at total time spent in school (in years) at different points in history for a
            particular country.</p>
        <p>The provided dataset (<code>education.csv</code>) contains information from various countries about time
            spent in education gathered as specific years. Here is a typical line from the file, in this case data
            gathered in the year 2010 for the country Zimbabwe:</p>
        <p>&nbsp;</p>
        <p style=""text-align: center;""><code>Zimbabwe,2010,M,15,64,8.04,3926</code></p>
        <p>&nbsp;</p>
        <p><span>Each position in the line represents a different ""data element"". Here is a key for your
                reference:</span></p>
        <table style=""border-collapse: collapse; width: 80%; margin-left: auto; margin-right: auto;"" border=""2"">
            <tbody>
                <tr>
                    <td style=""width: 10%; text-align: center;""><strong>Country</strong></td>
                    <td style=""width: 10%; text-align: center;""><strong>Year Data Was Gathered</strong></td>
                    <td style=""width: 10%; text-align: center;""><strong>Gender</strong></td>
                    <td style=""width: 10%; text-align: center;""><strong>Start Age</strong></td>
                    <td style=""width: 10%; text-align: center;""><strong>End Age</strong></td>
                    <td style=""width: 10%; text-align: center;"">
                        <p><strong>Total Time in School (years)</strong></p>
                    </td>
                    <td style=""width: 10%; text-align: center;""><strong>Population (thousands)</strong></td>
                </tr>
                <tr>
                    <td style=""width: 10%; text-align: center;"">Zimbabwe</td>
                    <td style=""width: 10%; text-align: center;"">2010</td>
                    <td style=""width: 10%; text-align: center;"">M</td>
                    <td style=""width: 10%; text-align: center;"">15</td>
                    <td style=""width: 10%; text-align: center;"">64</td>
                    <td style=""width: 10%; text-align: center;"">8.04</td>
                    <td style=""width: 10%; text-align: center;"">3926</td>
                </tr>
            </tbody>
        </table>
        <p>&nbsp;</p>
        <p><br>Write a Python program that asks the user for:</p>
        <ol>
            <li>Name of a country (e.g., ""Zimbabwe"")</li>
            <li>A Gender (""M"" or ""F"")</li>
        </ol>
        <p>Your program should print:</p>
        <ul>
            <li>Average total time spent in school for the user provided gender in the user provided country</li>
            <li><span style=""text-decoration: underline;"">For the given country/gender ONLY</span>, print each ""Year
                Data was Gathered"" where the ""Total Time in School"" was greater than (inclusive) the average time spent
                in school</li>
        </ul>
        <p><br><strong>EXAMPLE:</strong></p>
        <table style=""border-collapse: collapse; width: 59.0233%; height: 325px; margin-left: auto; margin-right: auto;""
            border=""1"">
            <tbody>
                <tr>
                    <td style=""width: 33.3333%;""></td>
                    <td style=""width: 33.3333%; text-align: center;""><strong>Example 1</strong></td>
                </tr>
                <tr>
                    <td style=""width: 33.3333%;"">Input</td>
                    <td style=""width: 33.3333%; text-align: center;"">
                        <p>Zimbabwe</p>
                        <p>M</p>
                    </td>
                </tr>
                <tr>
                    <td style=""width: 33.3333%;"">Expected Output</td>
                    <td style=""width: 33.3333%; text-align: center;"">
                        2.5117241379310347<br>1960<br>1965<br>1970<br>1975<br>1980<br>1985<br>1990<br>1995<br>2000<br>2005<br>2010
                    </td>
                </tr>
            </tbody>
        </table>
    </div>","from cs110 import autograder
import random, math

test_inputs = [['Canada', 'M'], ['Egypt', 'F']]
expected_outputs = [['7.140344827586206', '1945', '1950', '1955', '1960', '1965', '1970', '1975', '1980', '1985', '1990', '1995', '2000', '2005', '2010'],
                    ['1.1858620689655173', '1980', '1985', '1990', '1995', '2000', '2005', '2010']]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    test_case_to_run = random.randint(0, len(test_inputs)-1)
    inputs = test_inputs[test_case_to_run]
    outputs = expected_outputs[test_case_to_run]
    
    output, errors = autograder.run_script(""lsn24_education.py"", inputs)
    lines = output.strip().split('\n')
    
    lines_match = autograder.compare_strings(lines, outputs)
    
    if lines_match == len(outputs):
        return 100.0
    else:
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
508,lsn24_airspeed,4,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
    <p>Write a Python program to determine which aircraft &nbsp;can fly in formation based on their (min)
        safe cruise speed. Your program will ask the user for:</p>
    <ol>
        <li>The number of aircraft to analyze</li>
        <li>The target cruise velocity (mph)</li>
    </ol>
    <p>&nbsp;</p>
    <p>Your program will then repeatedly ask the user for the designator for each aircraft and its cruise
        velocity. Once all of the values have been input, your&nbsp;program will output:</p>
    <ul>
        <li>The NUMBER of aircraft whose cruise velocity is within 50 mph of the target (above or below,
            inclusive)</li>
        <li>The designator of each aircraft that meets the above criteria</li>
    </ul>
    <p style=""text-align: left;""><strong>EXAMPLES:</strong></p>
    <table style=""border-collapse: collapse; width: 88.535%; height: 325px; margin-left: auto; margin-right: auto;""
        border=""1"">
        <tbody>
            <tr>
                <td style=""width: 33.3333%;""></td>
                <td style=""width: 33.3333%; text-align: center;""><strong>Example 1</strong></td>
                <td style=""width: 33.3333%; text-align: center;""><strong>Example 2</strong></td>
            </tr>
            <tr>
                <td style=""width: 33.3333%;"">Input</td>
                <td style=""width: 33.3333%; text-align: center;"">
                    <p>3<br>400<br>F-15<br>450<br>F-16<br>425<br>F-22<br>500</p>
                </td>
                <td style=""width: 33.3333%; text-align: center;"">
                    4<br>230<br>C-130<br>250<br>F-35<br>450<br>B-52<br>390<br>C-141<br>375</td>
            </tr>
            <tr>
                <td style=""width: 33.3333%;"">Expected Output</td>
                <td style=""width: 33.3333%; text-align: center;"">2<br>F-15<br>F-16</td>
                <td style=""width: 33.3333%; text-align: center;"">1<br>C-130</td>
            </tr>
        </tbody>
    </table>
    <p style=""text-align: center;"">&nbsp;</p>
</div>","from cs110 import autograder
import random, math

test_cases = [[3, 400, 'F-15', 450, 'F-16', 425, 'F-22', 600],
              [4, 230, 'C-130', 250, 'F-35', 450, 'B-52', 390, 'C-141', 375]]
answers    = [['2', 'F-15', 'F-16'],
              ['1', 'C-130']]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    test_to_run = random.randint(0, len(test_cases)-1)
    inputs = test_cases[test_to_run]
    expected_output = answers[test_to_run]    
    
    output, errors = autograder.run_script(""lsn24_airspeed.py"", inputs)
    lines = output.strip().split('\n')
    
    lines_match = autograder.compare_strings(lines, expected_output)
    
    if lines_match == len(expected_output):
        return 100.0
    else:
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
509,lsn20_skill1,4,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You have been provided with the template code for an animation.&nbsp;
        Study the code for a minute, then modify the code to do the following WHEN THE LEFT MOUSE BUTTON IS <span
            style=""text-decoration: underline;"">HELD DOWN</span>:</p>
    <ol>
        <li>Write the code needed to get the mouse's x and y coordinates</li>
        <li>Draw a circle centered at the mouse's x and y coordinates</li>
    </ol>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0.0
    
    if autograder.code_compiles(""lsn20_skill1.py""):
        file = open(""lsn20_skill1.py"", ""r"")
        file_contents = file.read()
        
        if ""get_mouse_x("" in file_contents:
            print(""get_mouse_x called"")
            score += 33
        else:
            print(""get_mouse_x does not appear to be called."")
            
        if ""get_mouse_y("" in file_contents:
            print(""get_mouse_y called"")
            score += 33
        else:
            print(""get_mouse_y does not appear to be called."")
            
        if ""draw_circle("" in file_contents:
            print(""draw_circle called"")
            score += 34
        else:
            print(""draw_circle does not appear to be called."")
            
    else:
        print(""There appears to be an error in your python Script that is preventing it from running"")
    
    print(""\nThank you for your submission.  Your instructor will let you know if there is an issue."")
    return score        
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
510,lsn2_printpractice,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:</strong></p>
<div>
<div>
<p>The template file contains various words/phrases that you need to print out (exactly as written) using Python's&nbsp;<code>print()</code>&nbsp;function. For example:</p>
<ol>
<li>
<p>Print the phrase ""Welcome to Computer Science 110!""</p>
</li>
<li>
<p>Print the result to the following math expression: (640 * 480 * 24) / 8</p>
</li>
<li>
<p>etc (see the template for details)</p>
</li>
</ol>
<p>Each print statement should be written directly below the corresponding comment. While you can technically ""cheat"" on this problem, we encourage you to practice all the various ways that you can use the&nbsp;<code>print</code>&nbsp;function. You will thank us later!</p>
</div>
</div>
</div>","from cs110 import autograder

def test_passed():
    # Runs the Script
    output, error_message = autograder.run_script(""lsn2_printpractice.py"", [])

    student_output = output.strip().split('\n')
    expected_output = ['Welcome to Computer Science 110!', '921600.0', 'Liam is 8 years old', 'F-15  Eagle', 'F-16  Fighting Falcon', 'B-2   Spirit', 'C-141 Starlifter']
    num_matches = autograder.compare_strings(student_output, expected_output)
    
    return round(num_matches * (100 / len(expected_output)), 1)


# Testbench (to be run in an IDE)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
511,lsn2_parking,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>Write a program that prints a formatted ""No parking"" sign as shown below. Note the first line has two leading spaces. For ALL labs, end with newline (unless otherwise stated).</p>
<pre> NO PARKING<br />1:00 - 5:00 a.m.<br /><br /></pre>
</div>

","from cs110 import autograder

def test_passed():
    # Runs the Script
    output, error_message = autograder.run_script(""lsn2_parking.py"", [])
        
    if output.startswith(""  NO PARKING\n""):
        if output == ""  NO PARKING\n1:00 - 5:00 a.m.\n"" or ""  NO PARKING\n1:00 - 5:00 a.m."":
            print(""Passed!"")
            return 100
        else:
            print(""Something is wrong with the second line."")
            return 50
    else:
        print(""Something is wrong with the first line."")
        return 0

# Testbench (to be run in an IDE)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
512,lsn2_ascii,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a Python program that prints out a cat:</p>
<pre>/\ /\
 o o
 = =
 ---<br /><br /></pre>
<p><em>Hint: A backslash&nbsp;<code>\</code>&nbsp;in a string acts as an escape character, such as with a newline</em>&nbsp;<code>\n</code>.&nbsp;<em>So, to print an actual backslash, escape that backslash by prepending another backslash. Ex: The following prints a single backslash:</em>&nbsp;<code>print('\\')</code></p>
</div>
","from cs110 import autograder

def test_passed():
    # Runs the Script
    output, error_message = autograder.run_script(""lsn2_ascii.py"", [])
    
    lines = output.split('\n')
    
    # Checks for the Cat
    if lines[0].rstrip() == '/\\   /\\':
        #test_feedback.write('1')
        if lines[1].rstrip() == '  o o':
            #test_feedback.write('2')
            if lines[2].rstrip() == ' =   =':
                #test_feedback.write('3')
                if lines[3].rstrip() == '  ---':
                    #test_feedback.write('4')
                    print('Cat Looks Good!\n')
                    return 100
                else:
                    print('Problem in the fourth line of the cat') 
            else:
                print('Problem in the third line of the cat')  
        else:
            print('Problem in the second line of the cat')  
    else:
        print('Problem in the first line of the cat')
    
    return 0

# Testbench (to be run in an IDE)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
513,lsn19_skill1,4,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You are provided a CSV file with the amount of medals won by countries from
    past Olympic games.&nbsp; We want to prepare the silver medal data for processing in Python.</p>
    <p>Here is a snippet of the file:</p>
    <pre>USA,46,37,38<br>Britain,27,23,17</pre>
    <p>&nbsp;</p>
    <p>Here is how you can interpret each ""column"" in the file:</p>
    <table style=""margin-left: auto; margin-right: auto; width: 32.7604%;"" border=""1"">
        <tbody>
            <tr style=""text-align: center;"">
                <td style=""width: 15.4561%;""><strong>Country</strong></td>
                <td style=""width: 26.4012%;""><strong># Gold Medals</strong></td>
                <td style=""width: 27.7258%;""><strong># Silver Medals</strong></td>
                <td style=""width: 30.413%;""><strong># Bronze Medals</strong></td>
            </tr>
            <tr style=""text-align: center;"">
                <td style=""width: 15.4561%;"">USA</td>
                <td style=""width: 26.4012%;"">46</td>
                <td style=""width: 27.7258%;"">37</td>
                <td style=""width: 30.413%;"">38</td>
            </tr>
            <tr>
                <td style=""text-align: center; width: 15.4561%;"">Britain</td>
                <td style=""text-align: center; width: 26.4012%;"">27</td>
                <td style=""text-align: center; width: 27.7258%;"">23</td>
                <td style=""text-align: center; width: 30.413%;"">17</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
    <p>Provided in this activity's zip folder is a code template that already reads the olympics.csv file and extracts
        each line from it.</p>
    <p>Add code to the lsn19_skill1.py file to perform the following tasks:</p>
    <ul>
        <li style=""list-style-type: none;"">
            <ul>
                <li><strong>Line 30:</strong><span>&nbsp;</span>Write a line of code to break up each line of text into
                    columns. Hint: Use the split() function</li>
                <li><strong>Line 33:</strong><span> Use the data from the previous step to create a new two-item list
                    </span>containing the number of<span>&nbsp;</span><span><strong>silver</strong>&nbsp;</span>medals,
                    followed by the name of the country.</li>
                <li><strong>Line 36:</strong><span>&nbsp;</span>Append this two-item list
                    to<span>&nbsp;</span><span><strong>my_table</strong></span></li>
            </ul>
        </li>
    </ul>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math
from lsn19_skill1 import *

answer= [[37, 'USA'],
        [23, 'Britain'],
        [18, 'China'],
        [17, 'Russia'],
        [10, 'Germany'],
        [8, 'Japan'],
        [18, 'France'],
        [3, 'South Korea'],
        [12, 'Italy'],
        [11, 'Australia']]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_matches = 0
    count_vals_as_str = 0
    
    for i in range(len(my_table)):
        print(""Row "" + str(i+1) + "": "", end='')
        if i < len(answer):
            if my_table[i] == answer[i]:
                print(""CORRECT"")
                num_matches += 1
            else:
                if type(my_table[i][0]) is str:
                    count_vals_as_str += 1
                print(""INCORRECT (Expected: "" + str(answer[i]) + "" instead of "" + str(my_table[i]) + "")"")
        else:
            print(""INCORRECT (Unexpected Row: '"" + str(my_table[i]) + ""')"")
    
    print()
    print(num_matches, ""out of"", len(answer), ""rows match"")
    if count_vals_as_str > 0:
        print(""Looks like your medal numbers are strings not integers."")
    
    if len(answer) < num_matches:
        return 100 * num_matches / len(answer)
    else:
        return num_matches * (100 / len(answer))
    
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,
514,lsn18_skill2,4,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You are being provided with an empty table that contains information about
    USAF Academy Squadrons. The columns of the table are organized as follows:</p>
    <table style=""margin-left: auto; margin-right: auto; width: 25.4015%;"" border=""1"">
        <tbody>
            <tr>
                <td style=""width: 53.1718%; text-align: center;""><strong>Squadron Name</strong></td>
                <td style=""width: 46.3823%; text-align: center;""><strong>Squadron Number</strong></td>
            </tr>
            <tr>
                <td style=""width: 53.1718%; text-align: center;"">Name Goes Here (string)</td>
                <td style=""width: 46.3823%; text-align: center;""># Goes Here (integer)</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
    <p>Add the following two rows to the table:</p>
    <table style=""margin-left: auto; margin-right: auto; width: 15.1379%;"" border=""1"">
        <tbody>
            <tr>
                <td style=""width: 79.4605%; text-align: center;"">Dogs of War</td>
                <td style=""width: 20.1389%; text-align: center;"">3</td>
            </tr>
            <tr>
                <td style=""width: 79.4605%; text-align: center;"">Wolverines</td>
                <td style=""width: 20.1389%; text-align: center;"">19</td>
            </tr>
        </tbody>
    </table>
    <p>NOTE: 3 and 19 are integers and not strings.</p>
</div>","from cs110 import autograder
import random, math
from lsn18_skill2 import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    if len(squadron_table) >= 2:
        print(""Squadron Table has at least 2 things in them.  Let's see what's inside!"")
        score += 20
        
        if (squadron_table[0][0] == ""Dogs of War"" and squadron_table[0][1] == 3):
            print(""First Row Added Correctly"")
            score += 40
        else:
            print(""Something is wrong with the first row.  Make sure you are appending a list!"")
        
        if (squadron_table[1][0] == ""Wolverines"" and squadron_table[1][1] == 19):
            print(""Second Row Added Correctly"")
            score += 40
        else:
            print(""Something is wrong with the second row.  Make sure you are appending a list!"")
    else:
        print(""Squadron Table does not appear to have (at least) 2 rows"")
        
    return score
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
515,lsn18_skill1,4,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You are being provided with a table&nbsp; that describes various starship classes from the Star Trek universe (we're nerds . . . just go with it), as well as two input statements that get a row and column from the user. &nbsp;</p>
    <p>Print out the corresponding row/column value from the table.</p>
</div>","from cs110 import autograder
import random, math

starship_table = [['Constitution', 288.6,  127.1,  72.6],
                  ['Galaxy',       642.5,  463.73, 135.26],
                  ['Intrepid',     343.0,  133.0,  66],
                  ['Sovereign',   685.3,  250.6,  88.2]]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    row_to_print = random.randint(0, len(starship_table) - 1)
    col_to_print = random.randint(0, len(starship_table[0]) - 1)
    value_from_table = str(starship_table[row_to_print][col_to_print])
    value_from_table_flipped = str(starship_table[col_to_print][row_to_print])
    output, error = autograder.run_script(""lsn18_skill1.py"", [row_to_print, col_to_print])
    
    if output.strip() == value_from_table:
        print(""CORRECT"")
        return 100.0
    elif output.strip() == value_from_table_flipped:
        print(""INCORRECT. Expected"", value_from_table)
        print(""It looks like you flipped columns and rows.  Remember that the format is list_name[row][col]"")
        return 25.0
    else:
        print(""INCORRECT. Expected"", value_from_table)
        print(""Try again.  Remember that the format is list_name[row][col]"")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,
516,lsn17_skill1,4,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>You have been provided with the template code for an animation.
    &nbsp;Study the code for a minute, then perform the following tasks:</p>
    <ul>
        <li>In the <code>draw()</code> function, add one line of code that draws a circle.<br>For the center, use the
            <code>ball_x</code> and <code>ball_y</code> variables defined in the template.<br><br>
        </li>
        <li>In the <code>update() function</code>, add code that modifies the value of <code>ball_x</code> and
            <code>ball_y</code>.<br>For example, add 1 to the <code>ball_x</code> and subtract 1
            from&nbsp;<code>ball_y</code> every time <code>update()</code> is called. What do you expect to happen? Does
            what actually happens match your expectations?
        </li>
    </ul>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0.0
    
    if autograder.code_compiles(""lsn17_skill1.py""):
        file = open(""lsn17_skill1.py"", ""r"")
        file_contents = file.read()
        
        if ""draw_circle("" in file_contents:
            print(""draw_circle called"")
            score += 50
        else:
            print(""draw_circle does not appear to be called.  You need to call it in the draw() function"")
            
        if file_contents.count(""ball_x"") + file_contents.count(""ball_y"") > 5:
            print(""Looks like you are using ball_x and/or ball_y"")
            score += 50
        else:
            print(""Make sure you are changing the value of ball_x and ball_y in update()."")
            
    else:
        print(""There appears to be an error in your python Script that is preventing it from running"")
    
    print(""\nThank you for your submission.  Your instructor will let you know if there is an issue."")
    return score        
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
517,lsn14_skill2,4,skill,0,"
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a python program that creates a file called ""output.txt"" and prints a message of your choosing.</p>
<p><strong>HINTS:<br /></strong>Look at the quick reference guide!</p>
","from cs110 import autograder
import random, math, os

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0.0
    
    # Deletes Result.txt if it already exists
    if (os.path.exists(""output.txt"")):
        os.remove(""output.txt"")
    
    output, error_message = autograder.run_script(""lsn14_skill2.py"", [])
    
    if (os.path.exists(""output.txt"")):
        print(""File Found!"")
        score += 50
        file = open(""output.txt"", ""r"")
        file_contents = file.read()
        if (len(file_contents) > 0):
            print(""File has Something in it!"")
            score += 50
        else:
            print(""output.txt appears to be empty.  Did you forget to close the file or write to it?"")
    else:
        print(""File output.txt does not appear to exist"")
    
    return score
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
518,lsn14_skill1,4,skill,0,"
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a file called sample.txt. Write a python program that opens this file and prints all of its contents as a single string.</p>
<p>&nbsp;</p>
<p><strong>HINTS:<br /></strong><span>Look at the quick reference guide!</span></p>
<p>&nbsp;</p>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    expected_output = ""Lorem ipsum dolor sit amet, qui at luptatum efficiantur, ne autem offendit expetendis mel. Nec augue assentior ea, ne debet virtute mel. Integre vivendo id usu, ne primis repudiandae ullamcorper cum. Harum prompta appellantur vix ut. Ius voluptatibus definitiones te, eius scribentur referrentur mei at. Suas tota velit in usu, ex has complectitur signiferumque, sale lorem dolore ei ius. Perpetua scriptorem mei ex, ex est illum summo consul.""
    
    output, error_message = autograder.run_script(""lsn14_skill1.py"", [])
        
    lines = output.strip().split('\n')
    expected_lines = expected_output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_lines)
    
    if num_matches == len(lines):
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT"")
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
519,lsn13_skill2,4,skill,0,"
<p><strong>PROBLEM STATEMENT:<br /></strong>You are trying to use a for loop to print all of the powers of 2 from 1024 (2<sup>10</sup>) to 1 (2<sup>0</sup>). Unfortunately, for some reason, the loop does not work. Review the code and make the necessary corrections.</p>","from cs110 import autograder
import random, math

def solution():
    result = ''
    i = 10
    
    while i >= 0:
        result += str(2 ** i) + ""\n""
        i -= 1
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error_message = autograder.run_script(""lsn13_skill2.py"", [])
    expected_output = solution()
    
    lines = output.strip().split('\n')

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
520,lsn13_skill1,4,skill,0,"
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a variable that asks the user for the number of times to loop. Construct a FOR loop that loops this many times&nbsp;printing out a message each time (the message can be whatever you want)</p>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_multiple = random.randint(1, 10)

    output, error_message = autograder.run_script(""lsn13_skill1.py"", [random_multiple])
    
    lines = output.strip().split('\n')

    if len(lines) == random_multiple:
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Make sure your loop is repeating num_times_to_loop times"")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
521,lsn12_skill2,4,skill,0,<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a WHILE loop that prints values from 0 to 10. Modify the code so that it counts from 10 to 0.</p>,"from cs110 import autograder
import random, math

def solution(value_to_count_to, increment):
    result = ''
    i = 10
    
    while i >= value_to_count_to:
        result += str(i) + ""\n""
        i += increment
    
    return result

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_ending_number = 0
    random_increment = -1

    output, error_message = autograder.run_script(""lsn12_skill2.py"", [])
    expected_output = solution(random_ending_number, random_increment)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
522,lsn12_skill1,4,skill,0,<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a WHILE loop that prints the values from 1 to 10. Modify this loop so that it counts by 2s instead of 1s.</p>,"from cs110 import autograder
import random, math

def solution(value_to_count_to, increment):
    result = ''
    i = 0
    
    while i <= value_to_count_to:
        result += str(i) + ""\n""
        i += increment
    
    return result

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_ending_number = 10
    random_increment = 2

    output, error_message = autograder.run_script(""lsn12_skill1.py"", [])
    expected_output = solution(random_ending_number, random_increment)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
523,lsn11_skill2,4,skill,0,"<div>PROBLEM STATEMENT:<br></strong>You are being provided with a list containing 5 random numbers. Create a
        variable called<span>&nbsp;</span><code>my_value</code>, and assign it the value of the 3rd item in&nbsp;the
        list.</p>
    <p>&nbsp;</p>
    <p><strong>NOTES:</strong></p>
    <ul>
        <li>You do not need to print <code>my_value</code> OR the list</li>
    </ul>
</div>","from cs110 import autograder
import random, math
from lsn11_skill2 import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    if 'my_value' in globals():
        print(""Looking for my_value . . . FOUND!"")
        if my_value == my_list[2]:
            print(""Looking inside my_value . . . VALUE MATCHES THE 3rd VALUE IN THE LIST"")
            return 100
        elif my_value == my_list[3]:
            print(""Looking inside my_value . . . VALUE MATCHES THE 4th VALUE INSTEAD OF THE THIRD!"")
            print(""** HINT:  The index starts at 0 **"")
            return 50
        else:
            print(""Looking inside my_value . . . VALUE DOES NOT MATCH.  EXPECTED"", my_list[2])
            return 50
    else:
        print(""Looking for my_value . . . NOT FOUND!"")
        return 0
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
524,lsn11_skill1,4,skill,0,"<div><strong>PROBLEM STATEMENT:<br></strong>Create a list called <code>my_list</code>. Put 3 items inside the list (they can be anything you want)</p>
    <p>&nbsp;</p>
    <p><strong>HINTS:<br></strong>Look at the quick reference guide!</p>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random
from lsn11_skill1 import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    if 'my_list' in globals():
        print(""Looking for my_list . . . FOUND!"")
        if len(my_list) == 3:
            print(""Looking inside my_list . . . FOUND 3 ITEMS!"")
            return 100
        else:
            print(""Looking inside my_list . . . FOUND"", len(my_list), ""INSTEAD OF 3 ITEMS"")
            return 50
    else:
        print(""Looking for my_list . . . NOT FOUND!"")
        return0
        
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
525,lsn10_skill2,4,skill,0,"<p><strong>PROBLEM STATEMENT:<br /></strong>Write a function called&nbsp;<code>fahrenheit_to_kelvin()</code>. Your function should take a temperature (in Fahrenheit) as a parameter, and RETURN (NOT PRINT) the&nbsp;equivalent temperature in Kelvin.</p>
<p><strong>NOTE:<br /></strong>The formula for converting between Fahrenheit and Kelvin is</p>
<p><strong>K = ((F - 32) / 1.8) + 273.15</strong></p>","from cs110 import autograder
import random, math
from lsn10_skill2 import *

def solution(temp_in_f):
    temp_in_k = ((temp_in_f - 32) / 1.8) + 273.15
    return temp_in_k

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    print(""Feedback:"")
    print(""Looking for a function called fahrenheit_to_kelvin . . ."", end="""")
    
    if ""fahrenheit_to_kelvin"" in globals():
        print(""FOUND!"")
        score += 50
    else:
        print(""NOT FOUND"")
    
    random_temp = round(random.uniform(0, 100), 1)
    
    print(""Testing function when temperature ="", random_temp, ""F . . . "", end="""")
    if ""fahrenheit_to_kelvin"" in globals() and fahrenheit_to_kelvin(random_temp) == solution(random_temp):
        print(""CORRECT!"")
        score += 50
    elif ""fahrenheit_to_kelvin"" in globals() and fahrenheit_to_kelvin(random_temp) != solution(random_temp):
        print(""INCORRECT.  Expected"", solution(random_temp), ""instead of"", fahrenheit_to_kelvin(random_temp))
    else:
        print(""Could not evaluate the function's returned value because the function does not exist"")
        
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
526,lsn10_skill1,4,skill,0,"<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a function called get_fuel_consumption() that takes a distance in kilometers as a parameter, and calculates the fuel consumed (in gallons) by a 747 aircraft to travel this distance.</p>
<p>Call this function to determine how much fuel is consumed by a 747 when traveling 1500 kilometers. Store the returned result in a variable&nbsp;called fuel_consumed</p>
<p>Remember, ""Calling a function"" simply means typing in the name of the function (and providing it with any parameters that it needs--in this case, there are no parameters since there is nothing in the parenthesis).</p>","from cs110 import autograder
import random, math
from lsn10_skill1 import *

def get_fuel_consumption(distance_in_kilometers):
    distance_in_miles = distance_in_kilometers * 0.621
    return 5 * distance_in_miles

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    file = open(""lsn10_skill1.py"", ""r"")
    file_contents = file.read()
    num_calls_function1 = file_contents.count(""get_fuel_consumption(1500"")
    num_calls_function2 = file_contents.count(""get_fuel_consumption( 1500"")
    num_calls_function3 = file_contents.count(""get_fuel_consumption (1500"")
    num_calls_function4 = file_contents.count(""get_fuel_consumption ( 1500"")
    num_calls = num_calls_function1 + num_calls_function2 + num_calls_function3 + num_calls_function4

    output, error_message = autograder.run_script(""lsn10_skill1.py"", [])
    
    if num_calls >= 1:
        print(""get_fuel_consumption called successfully"")
        score += 33
    else:
        print(""get_fuel_consumption was not called successfully"")
    
    if ""fuel_consumed"" in globals():
        print(""fuel_consumed variable successfully created"")
        score += 33
    else:
        print(""Did not find a variable called fuel_consumed"")
        
    if ""fuel_consumed"" in globals() and fuel_consumed == get_fuel_consumption(1500):
        print(""fuel_consumed contains the correct value"")
        score += 34
    elif ""fuel_consumed"" in globals() and fuel_consumed != get_fuel_consumption(1500):
        print(""fuel_consumed contains"", fuel_consumed, ""instead of"", get_fuel_consumption(1500))
    else:
        print(""Cannot check the value of fuel_consumed because it does not exist"")
        
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
527,lsn10_in_circle,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a function that determines if a point is within a circle. You will name your function <code>in_circle()</code>. It has five parameters:</p>
<ol>
<li>The coordinates of the point that is to be tested (x, y)</li>
<li>The center of a circle (cir_x, cir_y)</li>
<li>The radius of the circle (radius)</li>
</ol>
<p>&nbsp;The <code>in_circle()</code> function will return <strong>True</strong> if the point is on or inside the circle, and <strong>False</strong> otherwise.</p>
<p><strong>IMPORTANT:<br /></strong>You are encouraged to write code to test your function. However, when you test against the server, only include the code for the function itself (you can comment out your test code).</p>
</div>

","import lsn10_in_circle
from cs110 import autograder
import random, math, traceback

NUM_SUBTESTS = 5
   
def soln(x, y, cir_x, cir_y, radius):
    distance = math.sqrt((cir_x - x)**2 + (cir_y - y)**2)
    return distance <= radius

def test_passed():
    
    passed = 0
    for i in range(NUM_SUBTESTS):
        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')
        if i == 0:
            x = 6.04
            y = 2.43
            cir_x = 43.4
            cir_y = 52.2
            radius = 74.1
        else:
            x = random.random() * 10.0
            y = random.random() * 10.0
            cir_x = random.random() * 100.0
            cir_y = random.random() * 100.0
            radius = random.random() * 100.0
        #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))
        try:
            if lsn10_in_circle.in_circle(x, y, cir_x, cir_y, radius) == soln(x, y, cir_x, cir_y, radius):
                print(""CORRECT!"")
                passed += 1
            else:
                print('INCORRECT:  in_circle(%f, %f, %f, %f, %f) incorrectly returned %s' % (x, y, cir_x, cir_y, radius, lsn10_in_circle.in_circle(x, y, cir_x, cir_y, radius)))
        except Exception as e:
            print()
            print(""Your program encountered an ERROR:"", e)
            print(traceback.print_exc())        
    
    return (100 / NUM_SUBTESTS) * passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
528,lsn10_distance,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a function that computes the distance between two points. You will name your function&nbsp;<code>dist_points</code>. It has four parameters, the cordinates of the two points as&nbsp;<code>x1, y1, x2, y2</code>. The&nbsp;<code>dist_points()</code>&nbsp;function will return the distance between the two points as a floating point number.</p>
<p><strong>IMPORTANT:<br /></strong>You are encouraged to write code to test your function. However, when you test against the server, only include the code for the function itself (you can comment out your test code).</p>
</div>


","import random, math, traceback

try:
    from lsn10_distance import dist_points
except ImportError:
    print(""ERROR: The dist_points() function is missing or incorrect."")
    print(""Check your spelling of the function."")
from cs110 import autograder



NUM_SUBTESTS = 5

def soln(x1, y1, x2, y2):
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)

def test_passed():
    
    passed = 0
    
    print(""Feedback:"")
    
    for i in range(NUM_SUBTESTS):
        x1 = round(random.uniform(-10, 10), 1)
        y1 = round(random.uniform(-10, 10), 1)
        x2 = round(random.uniform(-10, 10), 1)
        y2 = round(random.uniform(-10, 10), 1)
        
        print('\n' + '-'*50)
        print('Test %d of %d, dist_points(%1.1f, %1.1f, %1.1f, %1.1f): ' % (i+1 , NUM_SUBTESTS, x1, y1, x2, y2))
        print('-'*50)

        try:
            expected_solution = soln(x1, y1, x2, y2)
            
            if autograder.equals(dist_points(x1, y1, x2, y2), expected_solution):
                print(""PASSED!"")
                passed += 1
            else:
                print('FAILED: incorrectly returned %1.5f' % (dist_points(x1, y1, x2, y2)))
                print('Expected value to return:  %1.5f' % expected_solution)
        except Exception as e:
            print(""Your program encountered an ERROR:"", e)
            print(traceback.print_exc())
    
        
    return round(100 / NUM_SUBTESTS, 1) * passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
529,lsn10_circle,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a function that computes the area of a circle. You will name your function&nbsp;<code>area_circle</code>. It has one parameter, the radius of the circle,&nbsp;<code>radius</code>. The&nbsp;<code>area_circle()</code>&nbsp;function will return the area of the circle.</p>
<p><strong>IMPORTANT: <br /></strong>You are encouraged to write code to test your function. However, when you test against the server, only include the code for the function itself (you can comment out your test code).</p>
</div>","import lsn10_circle
from cs110 import autograder
import random, math, traceback

NUM_SUBTESTS = 5

# Helper method to see if a numeric value is within a specified delta
def soln(radius):
    return math.pi * radius * radius

def test_passed():
    
    passed = 0
    
    print(""Feedback:"")
    
    for i in range(NUM_SUBTESTS):
        print('Running sub test %d of %d: ' % (i+1 , NUM_SUBTESTS), end='')
        radius = random.random() * 100.0
        try:
            if autograder.equals(lsn10_circle.area_circle(radius), soln(radius)):
                print(""CORRECT!"")
                passed += 1
            else:
                print('area_circle(%d) incorrectly returned' % (radius), lsn10_circle.area_circle(radius))
        except Exception as e:
            print()
            print(""Your program encountered an ERROR:"", e)
            print(traceback.print_exc())        
        
    return round(100 / NUM_SUBTESTS, 1) * passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
530,lsn10_asteroids,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>""Asteroids"" was an arcade game created in 1979 by Atari, Inc. In the game, the player is given control of a spaceship that has the ability to shoot bullets. The player is then placed in a field of floating rocks, and is tasked with destroying them without running into them.</p>
<p>In this lab, you will write a ""collision detection"" function that will be used by the game to determine if the player's ship has hit a rock. To make this simple, assume that an imaginary circle extends from the center of the asteroid and the player's ship (see below image). If the two circles ever overlap one another, then a collision has occurred. (NOTE: There are more accurate ways to detect a collision.&nbsp;<a href=""https://bell0bytes.eu/basic-collision-detection/"" target=""_blank"" rel=""noreferrer noopener"">Click here if you want to learn more&nbsp;(Links to an external site.)</a>).</p>
<p><img src=""https://bell0bytes.eu/content/images/2019/03/spaceShipAsteroid.png"" alt="""" width="""" height=""462"" /></p>
<p>Your function, which you will name&nbsp;<code>detect_collision()</code>&nbsp;should have six parameters: the (x, y) coordinates of the center of player's ship, the ship's radius, the (x, y) coordinates of the center of an asteroid, and the asteroid's radius. Your function will return&nbsp;<code>True</code>&nbsp;if the player's ship has hit the asteroid, and&nbsp;<code>False</code>&nbsp;otherwise.</p>
<p><strong>HINT: <em><br /></em></strong><em>You may want to copy and paste the</em>&nbsp;<code>dist_points</code>&nbsp;<em>function you created earlier. It's almost as if we are trying to demonstrate the importance of reusable functions . . .</em></p>
<p><strong>IMPORTANT:<br /></strong>You are encouraged to write code to test your function. However, when you test against the server, only include the code for the function itself (you can comment out your test code).</p>
</div>
","from cs110 import autograder
import random, math, traceback
import lsn10_asteroids


def soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):
    distance = math.sqrt((ship_x - asteroid_x)**2 + (ship_y - asteroid_y)**2)
    return distance < asteroid_r + ship_r

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 4
    num_tests_passed = 0
    
    print(""Feedback:"")
    score = 0
        
    if ""dist_points"" in dir(lsn10_asteroids):
        score += 20
        print(""dist_points function found."")
    else:
        print(""dist_points function not found.  Use your previous dist_points work!"")
        score += 20
        
    for i in range(NUM_TESTS):       
        if i == 0:
            ship_x = 2.3
            ship_y = 0.2
            ship_r = 3
            asteroid_x = -4
            asteroid_y = 3.4
            asteroid_r = 6
        else:
            ship_x = round(random.uniform(-50, 50), 1)
            ship_y = round(random.uniform(-50, 50), 1)
            ship_r = 3
            asteroid_x = round(random.uniform(-50, 50), 1)
            asteroid_y = round(random.uniform(-50, 50), 1)
            asteroid_r = 6
        
        print('-'*60)
        print('Test %d/%d: detect_collision(%2.1f, %2.1f, %2.1f, %2.1f, %2.1f, %2.1f)' % (i+1 , NUM_TESTS, ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r))
        print('-'*60)

        try:
            #print(in_circle(x, y, cir_x, cir_y, radius), soln(x, y, cir_x, cir_y, radius))
            if lsn10_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r) == soln(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r):
                print(""CORRECT"")
                score += 20
            else:
                print('detect_collision(%f, %f, %f, %f, %f, %f) incorrectly returned %s' % (ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r, lsn10_asteroids.detect_collision(ship_x, ship_y, ship_r, asteroid_x, asteroid_y, asteroid_r)))
        except Exception as e:
            print(""Your program encountered an ERROR:"", e)
            print(traceback.print_exc())
    
    return score
            
            
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
531,lsn1_helloworld,4,lab,0,"<ol>

<li>Download the template file below and save it somewhere you will remember.&nbsp; Do not rename the file!<br><br>

</li>

<li>Open the file in Thonny.&nbsp; You should be able to double click on it.<br><br>

</li>

<li>Press the play button.&nbsp; It looks like a Green button<br><br><br>

</li>

<li>You will see the following prompt in the Console.&nbsp; Type 'y' (without the quotes) and press ENTER.<br><br><br>

</li>

<li>The test program will automatically run and print a result.&nbsp; If you see the following, you are good to go.&nbsp; Otherwise, contact your instructor:<br>

</li>

</ol>","import sys, subprocess, random
from cs110 import autograder

# ---------------------------------------------------------------------
# Hello World Unit Test
# ---------------------------------------------------------------------

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Runs the Script
    output, error_message = autograder.run_script(""lsn1_helloworld.py"", [])
    
    # Checks to See if the Program Passed the Test
    if output.strip() == ""Hello World"":
        print(""SUCCESS!"")
        return 100.0
    else:
        print(""Try Again.  Just have it print the words 'Hello World'!"")
        return 0.0
    
    
# Testbench (to be run in an IDE)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
532,Lists3_unpopularnames,4,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>This lab makes use of the names.csv dataset, which provides a list of over 1200+ names that were given to
        children in 2011. Here is a typical line from the file:</p>
    <p>&nbsp;</p>
    <p><code>FEMALE, HISPANIC, GIA, 21</code></p>
    <p>&nbsp;</p>
    <p><br>Each position in the line (separated by a comma) represents a different ""data element"". Here is a key for
        your reference:</p>
    <table style=""margin-left: auto; margin-right: auto; width: 54.7623%;"">
        <thead>
            <tr>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 12.7202%;"">Gender</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 15.0135%;"">Ethnicity
                </th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 8.84295%;"">Name</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 63.2247%;"">
                    Count<br>(i.e., Number of Children Assigned this Name)</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 12.7202%;"">FEMALE</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 15.0135%;"">HISPANIC
                </th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 8.84295%;"">GIA</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 63.2247%;"">21</th>
            </tr>
        </tbody>
    </table>
    <p><br><br>Write a Python algorithm that gets a gender (all CAPs, ""MALE"" or ""FEMALE"") and a
        number,<span>&nbsp;</span><code>X</code>, from the user, and prints out the X least popular names for that
        gender, starting with the least popular and working up.</p>
    <p>For example, if the user
        types<span>&nbsp;</span><code>MALE</code><span>&nbsp;</span>and<span>&nbsp;</span><code>2</code>, and you
        determine that the two least popular names are Bill and Ted, your program should output:</p>
    <pre>Bill<br>Ted<br><br></pre>
    <p>&nbsp;</p>
    <p><strong>HINTS (really really important):</strong></p>
    <ul>
        <li>Remember that you can use the<span>&nbsp;</span><code>sort()</code><span>&nbsp;</span>function to sort a
            list in ascending order. For example, if your list is named<span>&nbsp;</span><code>my_list</code>, you can
            sort it by typing:<br><code>my_list.sort()</code></li>
        <li><code>sort()</code><span>&nbsp;</span>will work on 2D lists. It will sort by the first column, and then look
            at the 2nd column in the event of a tie. Think about this when you are building your 2D list.</li>
    </ul>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

expected_output_male = [""ALDO"", ""ALIJAH"", ""ALLAN"", ""ANGEL"", ""ARTURO"", ""AUGUSTUS"", ""BENNETT"", ""BERISH"", ""CADEN"", ""CHRIS"", ""CODY"", ""COREY"", ""DERRICK"", ""DEVON"", ""DONOVAN"", ""EASON"", ""EDWARD"", ""ELLIS"", ""GIOVANI"", ""HASSAN"",]
expected_output_female = [""ABBY"", ""AIZA"", ""ALISHA"", ""ANGELICA"", ""ANGIE"", ""ARIANNY"", ""ARIELA"", ""ATARA"", ""AUBREY"", ""AUTUMN"", ""AYLA"", ""BIANCA"", ""BONNIE"", ""BRIANNY"", ""CASSANDRA"", ""CELIA"", ""CHAVY"", ""CHEYENNE"", ""CORA"", ""CRISTINA""]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    if (random.random() > 0.5):
        gender = ""MALE""
        expected_output = expected_output_male
    else:
        gender = ""FEMALE""
        expected_output = expected_output_female
        
    num_to_print = random.randint(5, 20)
    output, error = autograder.run_script(""Lists3_unpopularnames.py"", [gender, num_to_print])
    lines = output.strip().split('\n')
    num_matches = autograder.compare_strings(lines, expected_output[:num_to_print])
    
    print()
    
    if len(lines) == 0:
        return 0
    elif len(lines) > len(expected_output[:num_to_print]):
        print(""Your program printed more lines than we expected"")
        return round(100 * num_matches / len(lines), 1)
    else:
        return round(100.0/len(expected_output[:num_to_print]) * num_matches, 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,1,1,1,0,0,1,0,1,0,1,1,0,0,1,0,0,0,
533,Lists3_sat,4,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Write a Python program that calculates only, but DOES NOT print, the average SAT score across all schools, and
        outputs the name of each school that is below the average.</p>
    <p>This lab makes use of the sat.csv dataset, which describes the average SAT performance for students attending
        350+ schools. Here is a typical line from the file:</p>
    <p>&nbsp;</p>
    <p><code>Henry Street School for International Studies, 391, 425, 385</code></p>
    <p>&nbsp;</p>
    <p><br>Each position in the line (separated by a comma) represents a different ""data element"". Here is a key for
        your reference:</p>
    <table style=""margin-left: auto; margin-right: auto; width: 68.8194%;"">
        <thead>
            <tr>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 44.4221%;"">School Name
                </th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 22.0014%;"">Critical
                    Reading Mean</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 19.4415%;"">Mathematics
                    Mean</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 14.0149%;"">Writing
                    Mean</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 44.4221%;"">Henry
                    Street School for International Studies</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 22.0014%;"">391</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 19.4415%;"">425</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid; width: 14.0149%;"">385</th>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
    <p><strong>NOTES (really really important):</strong></p>
    <ul>
        <li>You can get a school's average score by adding up the critical reading, mathematics, and writing composite
            scores.</li>
    </ul>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def solution():  
    result = ''
    file = open(""sat.csv"", ""r"")
    contents = file.read()
    lines = contents.split(""\n"")

    sat_table = []
    total = 0

    for line in lines:
        line_components = line.split(',')
        
        school = line_components[0]
        sat_score = int(line_components[1]) + int(line_components[2]) + int(line_components[3])
        total += sat_score
        row = [school, sat_score]
        sat_table.append(row)

    average = total / len(sat_table)

    for row in sat_table:
        if row[1] < average:
            result += str(row[0]) + ""\n""

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    expected_output = solution().strip().split('\n')
    output, error = autograder.run_script(""Lists3_sat.py"", [])
    lines = output.strip().split('\n')
    num_matches = autograder.compare_strings(lines, expected_output)
    
    print()
    
    if len(lines) == 0:
        return 0
    elif len(lines) > len(expected_output):
        print(""Your program printed more lines than we expected"")
        return round(100 * num_matches / len(lines), 1)
    else:
        return round(100.0/len(expected_output) * num_matches, 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
534,Lists3_popularnames,4,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Write a Python program that takes two inputs and produces two outputs. NOTE: This problem does not require
        creating an additional list to solve.</p>
    <p>The inputs from the user are:</p>
    <ol>
        <li>A gender, <span>a string which will be MALE or FEMALE</span></li>
        <li>A threshold number for the number of times that a name was used.</li>
    </ol>
    <p><span>Your program will compare the information from the user to the names.csv dataset, and output two
            statistics as</span>&nbsp;output:</p>
    <ol>
        <li>The count of the number of names that were used above the threshold given for the provided gender</li>
        <li><span>The total count of children with the high usage names and the specified gender.</span> In other words,
            the sum of the number of children given names above the threshold value from input 2.</li>
    </ol>
    <p>&nbsp;</p>
    <p>This problem makes use of the names.csv dataset, which provides a list of over 1200+ names that were given to
        children in 2011. Here is a typical line from the file:</p>
    <p><code>FEMALE, HISPANIC, GIA, 21</code></p>
    <p>Each position in the line (separated by a comma) represents a different ""data element"". Here is a key for your
        reference:</p>
    <table style=""margin-left: auto; margin-right: auto; width: 50.2809%;"">
        <thead>
            <tr>
                <th style=""border-color: #000000; border-style: solid; width: 12.7202%;"">Gender</th>
                <th style=""border-color: #000000; border-style: solid; width: 15.0135%;"">Ethnicity</th>
                <th style=""border-color: #000000; border-style: solid; width: 8.84295%;"">Name</th>
                <th style=""border-color: #000000; border-style: solid; width: 63.2247%;"">Count<br>(i.e., Number of
                    Children Assigned this Name)</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th style=""border-color: #000000; border-style: solid; width: 12.7202%;"">FEMALE</th>
                <th style=""border-color: #000000; border-style: solid; width: 15.0135%;"">HISPANIC</th>
                <th style=""border-color: #000000; border-style: solid; width: 8.84295%;"">GIA</th>
                <th style=""border-color: #000000; border-style: solid; width: 63.2247%;"">21</th>
            </tr>
        </tbody>
    </table>
    <p style=""text-align: center;"">&nbsp;</p>
    <p><strong>EXAMPLES:</strong></p>
    <table style=""margin-left: auto; margin-right: auto; width: 50.2809%;"">
        <thead>
            <tr>
                <th style=""border-color: #000000; border-style: solid; width: 25%;""></th>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">Example 1</th>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">Example 2</th>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">Example 3</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">Inputs</th>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">
                    <p>MALE</p>
                    <p>190</p>
                </th>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">
                    <p>FEMALE</p>
                    <p>120</p>
                </th>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">
                    <p>MALE</p>
                    <p>80</p>
                </th>
            </tr>
            <tr>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">Output</th>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">
                    <p>1</p>
                    <p>224</p>
                </th>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">
                    <p>15</p>
                    <p>2670</p>
                </th>
                <th style=""border-color: #000000; border-style: solid; width: 25%;"">
                    <p>23</p>
                    <p>2740</p>
                </th>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>

</div>","from cs110 import autograder
import random, math, traceback


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    test_cases = dict()
    test_cases[(""FEMALE"", 120)] = ""15\n2670""
    test_cases[(""FEMALE"", 98)] = ""25\n3742""   
    test_cases[(""MALE"", 190)] = ""1\n224""
    test_cases[(""MALE"", 130)] = ""7\n1149""

    
    test_case_input = list(test_cases.keys())
    case_order = list(range(len(test_case_input)))
    
    score = 0
    i = 1
    
    for idx in case_order:
        print('\n' + '='*30)
        print(""Test Case:"", i)
        print('='*30)
        
        try: 
            output, error = autograder.run_script(""Lists3_popularnames.py"", test_case_input[case_order[idx]])        
            expected_output = test_cases[test_case_input[case_order[idx]]]
            
            lines = output.strip().split('\n')
            expected_line_1 = expected_output.strip().split('\n')[0]
            expected_line_2 = expected_output.strip().split('\n')[1]
            
            test_case_score = 0
            if len(lines) == 0:
                print(""No Output Detected. Expected:"")
                print(expected_output)
            elif len(lines) > len(expected_output.split('\n')):
                print(""Your program printed too many lines. Expected:"")
                print(expected_output)
            elif len(lines) == 2 and expected_line_1 == lines[0] and expected_line_2 == lines[1]:
                print(""CORRECT!"")
                test_case_score = 100.0 / len(test_cases)
            elif expected_line_1 in lines:
                print(""PARTIALLY CORRECT! Count of names above threshold right. Expected:"")
                test_case_score = 100.0 / len(test_cases) / 2
                print(expected_output)
            elif expected_line_2 in lines:
                print(""PARTIALLY CORRECT! Total number of children named found. Expected:"")
                test_case_score = 100.0 / len(test_cases) / 2
                print(expected_output)
            else:
                print(""INCORRECT. Expected:"")
                print(expected_output)
            
            score += test_case_score
            i += 1
        except Exception as e:
            score += 0
            i += 1
            
            print(""An ERROR Occured:"", e)
            print(traceback.print_exc())    


    return score
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':
    try:
        result = test_passed()
    except Exception as e:
        result = 0
        print(""An ERROR Occured:"", e)
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,1,1,1,0,0,0,0,1,0,1,1,0,1,1,0,0,0,
535,Lists3_lowvolume,4,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Write a Python algorithm that opens the file and outputs the lowest (minimum) traffic count.&nbsp; Then, output
        the name of all streets whose traffic count is within 2500 (inclusive) of the minimum.</p>
    <p>&nbsp;</p>
    <p>This program makes use of the traffic.csv dataset. Here is a typical line from the file:</p>
    <p>&nbsp;</p>
    <p><code>691,6067 North,Kimball Ave,8/15/06,15600,North Bound:7500/South Bound:8100</code></p>
    <p>&nbsp;</p>
    <p>As you will recall from class, each position in the line (separated by a comma) represents a different ""data
        element"". Here is a key for your reference:</p>
    <table style=""margin-left: auto; margin-right: auto;"" width=""956"">
        <thead>
            <tr>
                <th style=""border-color: #000000; border-style: solid;"">ID</th>
                <th style=""border-color: #000000; border-style: solid;"">Address</th>
                <th style=""border-color: #000000; border-style: solid;"">Street</th>
                <th style=""border-color: #000000; border-style: solid;"">Sample Date</th>
                <th style=""border-color: #000000; border-style: solid;"">Total # of Passing Vehicles</th>
                <th style=""border-color: #000000; border-style: solid;""># of Vehicles by Direction</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th style=""border-color: #000000; border-style: solid;"">691</th>
                <th style=""border-color: #000000; border-style: solid;"">6067 North</th>
                <th style=""border-color: #000000; border-style: solid;"">Kimball Ave</th>
                <th style=""border-color: #000000; border-style: solid;"">8/15/06</th>
                <th style=""border-color: #000000; border-style: solid;"">15600</th>
                <th style=""border-color: #000000; border-style: solid;"">North Bound:7500/South Bound:8100</th>
            </tr>
        </tbody>
    </table>
    <p><br><br>Output one street name per line.</p>
    <p>&nbsp;</p>
    <p>For example, if the min traffic count is 500, and the roads within 2500 of this value are ""Road A"", ""Road B"",
        ""Road C"", then your program should output:</p>
    <pre>500<br>Road A<br>Road B<br>Road C</pre>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

expected_output = [
""700"",
""Harbor Ave"",
""Woodlawn Ave"",
""Root St"",
""Calumet Ave"",
""Financial PL"",
""16th St"",
""Racine Ave"",
""60th St"",
""Wentworth Ave"",
""Parnell Ave"",
""Ashland Ave"",
""Federal St"",
""Hamlin Ave"",
""Pitney Ct"",
""109th St"",
""Loomis St"",
""Harrison St"",
""24th St"",
""La Salle St"",
""83rd Pl"",
""Homan Ave""]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    
    output, error = autograder.run_script(""Lists3_lowvolume.py"", [])    
    lines = output.split('\n')
    
    if ""700"" in lines[0]:
        score += 50.0
    
        lines = set(lines[1:])
        matches = (len(lines.intersection(expected_output)))
        score += round((matches/21)*50.0,1)
    else:
        lines = set(lines)
        matches = (len(lines.intersection(expected_output)))
        score += round((matches/22)*50.0,1)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,1,0,0,0,
536,Lists3_averagetraffic,4,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>This program makes use of the traffic.csv dataset. Here is a typical line from the file:</p>
    <p>&nbsp;</p>
    <p><code>691,6067 North,Kimball Ave,8/15/06,15600,North Bound:7500/South Bound:8100</code></p>
    <p>&nbsp;</p>
    <p><br>As you will recall from class, each position in the line (separated by a comma) represents a different ""data
        element"". Here is a key for your reference:</p>
    <table style=""margin-left: auto; margin-right: auto;"" width=""956"">
        <thead>
            <tr>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">ID</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">Address</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">Street</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">Sample Date</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">Total # of Passing Vehicles
                </th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;""># of Vehicles by Direction
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">691</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">6067 North</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">Kimball Ave</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">8/15/06</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">15600</th>
                <th style=""text-align: center; border-color: #000000; border-style: solid;"">North Bound:7500/South
                    Bound:8100</th>
            </tr>
        </tbody>
    </table>
    <p><br><br>Write a Python algorithm that opens the file and outputs the # of roads whose traffic count is greater
        than (or equal to) the average.&nbsp; For example, if you determine that the answer is 20, your program should
        output:</p>
    <pre>20</pre>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

expected_output = [""525""]


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(""Lists3_averagetraffic.py"", [])
    lines = output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_output)
       
    return round(num_matches * (100.0 / len(expected_output)), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
537,Lists2_population,4,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
    <p>You are being provided with a simple 2D list that contains the names and populations of the 10 largest cities in
        the world. This list (which is called<span>&nbsp;</span><code>cities_table</code>) can be logicially visualized
        as the following:</p>
    <p style=""text-align: center;"">&nbsp;</p>
    <table style=""margin-left: auto; margin-right: auto; width: 14.6715%;"">
        <thead>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">
                    <strong>City</strong></td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">
                    <strong>Population</strong></td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Tokyo</td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">37,435,191
                </td>
            </tr>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Delhi</td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">29,399,141
                </td>
            </tr>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Shanghai
                </td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">25,647,805
                </td>
            </tr>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Sao Paulo
                </td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">21,846,507
                </td>
            </tr>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Mexico City
                </td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">21,671,908
                </td>
            </tr>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Cairo</td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">20,484,965
                </td>
            </tr>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Dhaka</td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">20,283,552
                </td>
            </tr>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Mumbai</td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">20,185,064
                </td>
            </tr>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Beijing
                </td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">20,035,455
                </td>
            </tr>
            <tr>
                <td style=""border-color: #000000; border-style: solid; width: 50.2472%; text-align: center;"">Osaka</td>
                <td style=""border-color: #000000; border-style: solid; width: 48.8789%; text-align: center;"">19,222,665
                </td>
            </tr>
        </tbody>
    </table>
    <p><br>Write a Python program that gets a population from the user, and prints the names of all the cities whose
        populations are at least that big (keep the same order as in the 2D list). Print each city's name on a separate
        line.</p>
    <p>&nbsp;</p>
    <p><strong>EXAMPLES:</strong></p>
    <table style=""margin-left: auto; margin-right: auto; width: 18.3312%;"">
        <thead>
            <tr>
                <th style=""border-color: #000000; border-style: solid; width: 26.0071%;""></th>
                <th style=""border-color: #000000; border-style: solid; width: 36.6114%;"">Example 1</th>
                <th style=""border-color: #000000; border-style: solid; width: 36.6114%;"">Example 2</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th style=""border-color: #000000; border-style: solid; width: 26.0071%;"">Input</th>
                <th style=""border-color: #000000; border-style: solid; width: 36.6114%;"">25000000</th>
                <th style=""border-color: #000000; border-style: solid; width: 36.6114%;"">30000000</th>
            </tr>
            <tr>
                <th style=""border-color: #000000; border-style: solid; width: 26.0071%;"">Output</th>
                <th style=""border-color: #000000; border-style: solid; width: 36.6114%;"">Tokyo<br>Delhi<br>Shanghai</th>
                <th style=""border-color: #000000; border-style: solid; width: 36.6114%;"">Tokyo</th>
            </tr>
        </tbody>
    </table>

</div>","from cs110 import autograder
import random

def solution(population):
    result = ''
    
    cities_table = [
        ['Tokyo', 37435191],
        ['Delhi', 29399141],
        ['Shanghai', 25647805],
        ['Sao Paulo', 21846507],
        ['Mexico City', 21671908],
        ['Cairo', 20484965],
        ['Dhaka', 20283552],
        ['Mumbai', 20185064],
        ['Beijing', 20035455],
        ['Osaka', 19222665]]
    
    for row in cities_table:
        if row[1] >= population:
            result += row[0] + '\n'
    
    return result.strip()


def test_passed():
    
    random_population_size = random.randint(19, 30) * 1000000
    
    output, error = autograder.run_script(""Lists2_population.py"", [random_population_size])
    answer = solution(random_population_size)
    
    lines = output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, answer.strip().split('\n'))
    
    if num_matches == len(lines):
        print(""\nCORRECT"")
        return 100.0
    else:
        print(""\nOne or more outputs were incorrect."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,
538,Lists2_movies,4,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
    <div id=""ember1277"" class=""content-resource markdown-content-resource ember-view"">
        <div id=""ember1278"" class=""ember-view"">
            <p>Write a Python function called<span>&nbsp;</span><code>get_movies</code><span>&nbsp;</span>that takes
                three parameters:</p>
            <ul>
                <li>A two-dimensional list containing movie titles and other stats (see table below for an example)</li>
                <li>A rating (e.g., ""PG"", ""R"")</li>
                <li>A run time (in minutes)</li>
            </ul>
            <p style=""text-align: center;"">&nbsp;</p>
            <table style=""margin-left: auto; margin-right: auto;"" width=""635"">
                <thead>
                    <tr>
                        <th style=""border-style: solid;"">Title</th>
                        <th style=""border-style: solid;"">Release Year</th>
                        <th style=""border-style: solid;"">Rating</th>
                        <th style=""border-style: solid;"">Run Time (minutes)</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th style=""border-style: solid;"">Star Wars: A New Hope</th>
                        <th style=""border-style: solid;"">1977</th>
                        <th style=""border-style: solid;"">PG</th>
                        <th style=""border-style: solid;"">121</th>
                    </tr>
                    <tr>
                        <th style=""border-style: solid;"">Star Trek: The Motion Picture</th>
                        <th style=""border-style: solid;"">1979</th>
                        <th style=""border-style: solid;"">G</th>
                        <th style=""border-style: solid;"">132</th>
                    </tr>
                    <tr>
                        <th style=""border-style: solid;"">Indiana Jones: Raiders of the Lost Ark</th>
                        <th style=""border-style: solid;"">1989</th>
                        <th style=""border-style: solid;"">PG</th>
                        <th style=""border-style: solid;"">115</th>
                    </tr>
                </tbody>
            </table>
            <p><br>Your function should return the number of movies that have the specified rating, and run for at least
                the number of minutes specified.</p>
            <p>&nbsp;</p>
            <p><strong>EXAMPLE:</strong><br>If the above table were contained within a list
                called<span>&nbsp;</span><code>movie_table</code>,
                then<span>&nbsp;</span><code>get_movies(movie_table, ""PG"", 100)</code><span>&nbsp;</span>should return
                2.</p>
            <p>&nbsp;</p>
        </div>
    </div>
</div>","from cs110 import autograder
import random
try:
    import Lists2_movies
except:
    import lists2_movies as Lists2_movies

def solution(movies_table, rating, runtime):
    count = 0
    
    for row in movies_table:
        if row[2] == rating and row[3] >= runtime:
            count += 1
    
    return count

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    ratings = ['PG', 'PG-13', 'R']
    num_passed = 0
    
    for rating in ratings:
        movies_table = [
            [""Star Wars: A New Hope"", 1977, ""PG"", 121],
            [""Star Trek: The Motion Picture"", 1979, ""G"", 132],
            [""Raiders of the Lost Ark"", 1989, ""PG"", 115],
            [""Indiana Jones and the Temple of Doom"", 1984, ""PG"", 118],
            [""Indiana Jones and the Last Crusade"", 1989, ""PG-13"", 127],
            [""Serenity"", 2005, ""PG-13"", 119],
            [""Joker"", 2019, ""R"", 122],
            [""The Terminator"", 1984, ""R"", 107]
            ]
        test_table = []
        runtime = random.randint(90, 120)
        
        for j in range(random.randint(2, 5)):
            index = random.randint(0, len(movies_table)-1)
            test_table.append(movies_table[index])
            movies_table.remove(movies_table[index])
        
        print(""Testing (Rating = "" + rating + ""):\n"" + ""  Movie Table: "" + str(test_table) + ""\n"" + ""  Runtime: "" + str(runtime))
        print(""  Expecting: "" + str(solution(test_table, rating, runtime)) + ""\n  Your Function's Output: "" + str(Lists2_movies.get_movies(test_table, rating, runtime)))
        
        if solution(test_table, rating, runtime) == Lists2_movies.get_movies(test_table, rating, runtime):
            print(""PASSED!\n"")
            num_passed += 1
        else:
            print(""INCORRECT\n"")
            
    
    return (num_passed / len(ratings)) * 100.0
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,
539,Lists2_golf,4,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
    <p>The cadet intercollegiate golf team needs some help tracking individual performance. Create a Python algorithm
        that inputs repeated pairs of cadet last-names followed by the golfers score until the word
        <strong>END</strong> (all capital letters) is entered at the member last-name prompt.</p>
    <p>Your algorithm should output:</p>
    <ul>
        <li>The last name of the member with the lowest (best) score, if there are two members with the same lowest
            score, it should output the last name of the first person entered.</li>
        <li>The percentage of members who are within 5 strokes (inclusive) of the lowest score.</li>
    </ul>
    <p>There is no bound on the number of golfers that may be entered, but you may assume that there will be at least
        one golfer and score entered.</p>
    <p>&nbsp;</p>
    <p><strong>EXAMPLES:</strong></p>
    <table style=""margin-left: auto; margin-right: auto;"" width=""486"">
        <thead>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""></td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Example 1</strong>
                </td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Example 2</strong>
                </td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Example 3</strong>
                </td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Inputs</strong></td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    Woods<br>48<br>Nicklaus<br>51<br>Hogan<br>49<br>Jones<br>46<br>Palmer<br>52<br>END</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    Snead<br>52<br>Mickelson<br>48<br>Nelson<br>48<br>END</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    Player<br>51<br>Watson<br>51<br>Singh<br>48<br>Floyd<br>49<br>Normal<br>54<br>END</td>
            </tr>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Output</strong></td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Jones<br>80.0</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Mickelson<br>100.0</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">Singh<br>60.0</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, statistics

solution_name = ""Lists2_golf.py""

# random_names = ['Mcllroy', 'Koepka', 'Rahm', 'Woods', 'Thomas', 'Johnson', 'Cantlay', 'Simpson']
# 
# def get_random_name():
#     global random_names
#     name = random_names[random.randint(0, len(random_names)-1)]
#     random_names.remove(name)
#     return name
# 
# 
# def solution(data):
#     min_value = 99999
#     min_name = """"
#     count = 0
#     
#     for row in data:
#         if row[1] < min_value:
#             min_value = row[1]
#             min_name = row[0]
#     
#     for row in data:
#         if row[1] <= min_value + 5:
#             count += 1
# 
#     return min_name, (count / len(data) * 100.0)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
       
    test_cases = dict()
    test_cases[(""Simpson"", 70, ""Rahm"", 83, ""END"")] = ""Simpson\n50.0\n""
    test_cases[(""Cantlay"", 80, ""Mcllroy"", 65, ""Rahm"", 66, ""END"")] = ""Mcllroy\n66.7\n""
    test_cases[(""Koepka"", 74, ""Johnson"", 85, ""Thomas"", 84, ""Simpson"", 86, ""END"")] = ""Koepka\n25.0\n""
    test_cases[(""Mcllroy"", 90, ""Koepka"", 80, ""Woods"", 84, ""Cantlay"", 72, ""Simpson"", 83, ""END"")] = ""Cantlay\n20.0\n""
    
    test_case_input = list(test_cases.keys())
    case_order = list(range(len(test_case_input)))
    random.shuffle(case_order)
    
    score = 0

    test_case_num = 1
    for idx in case_order:
        print('\n' + '='*30)
        print(""Test Case:"", test_case_num)
        print('='*30)
        output, error_message = autograder.run_script(solution_name, test_case_input[case_order[idx]])
        expected_output = test_cases[test_case_input[case_order[idx]]]  # solution(test_case_input[case_order[0]][0], test_case_input[case_order[0]][1], test_case_input[case_order[0]][2])
        
        lines = output.strip().split('\n')
        expected_lines = expected_output.strip().split('\n')

        if len(lines) == 1:
            try:
                student_output = float(lines[0])
                if abs(student_output - float(expected_lines[1])) < 1.0:
                    print(""PARTIALLY CORRECT. Only Percentage Correct, Expected:"")
                    score += 100.0 / len(test_cases) / 2
            except:          
                if lines[0] == expected_lines[0]:
                    print(""PARTIALLY CORRECT. Only Name Correct, Expected:"")
                    score += 100.0 / len(test_cases) / 2               
                else:
                    print(""INCORRECT: Expected the following:"")
            print(expected_output)         
        elif len(lines) == 2:
            name_check_passed = lines[0] == expected_lines[0]
            try:
                percent_check_passed = abs(float(lines[1]) - float(expected_lines[1])) < 1.0
            except:
                percent_check_passed = False
                print(""Second Output NOT A VALID NUMBER"")
            
            if name_check_passed and percent_check_passed:
                print(""CORRECT Name and Percentage!"")
                score += 100.0 / len(test_cases)
            else:
                if name_check_passed:
                    print(""PARTIALLY CORRECT. Only Name Correct, Expected:"")
                    score += 100.0 / len(test_cases) / 2
                elif percent_check_passed:
                    print(""PARTIALLY CORRECT. Only Percentage Correct, Expected:"")
                    score += 100.0 / len(test_cases) / 2
                else:
                    print(""INCORRECT: Expected the following:"")
                print(expected_output)
        else:
            if len(lines) < 2:
                print(""Not Enough Lines. Expected:"")
            else:
                print(""INCORRECT.  Expected the following:"")
            print(expected_output)
        
        test_case_num += 1
    
    return score
    
    # Generates Random Values
#     num_inputs = random.randint(2, 5)
#     input_list = []
#     data = []
#         
#     for i in range(num_inputs):
#         new_row = [get_random_name(), random.randint(70, 90)]
#         input_list.append(new_row[0])
#         input_list.append(new_row[1])
#         data.append(new_row)
#     input_list.append(""END"")
#     
#     lowest_name, percent = solution(data)
#     
#     # Runs the Script
#     output, error_message = autograder.run_script(""Lists2_golf.py"", input_list)
#     lines = output.strip().split('\n')
# 
#     # Checks Min
#     if len(lines) < 2:
#         print(""Number of output lines does not match"")
#         return 0
#     else:
#         if not lowest_name == lines[0]:
#             print(""Incorrect Name.  Expected "" + str(lowest_name))
#             return 0
#         if not autograder.equals(percent, lines[1]):
#             print(""Incorrect Percent.  Expected "" + str(percent))
#             return 50
#         
#     print(""PASSED!"")
#     return 100
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
540,Lists2_credit,4,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
    <div id=""ember1277"" class=""content-resource markdown-content-resource ember-view"">
        <div id=""ember1278"" class=""ember-view"">
            <p>The Air Academy Federal Credit Union wants to identify its best customers and comes to you for help. To
                help with the accounting, create a Python program which inputs repeated pairs of member last-names
                followed by account balances until the word <strong>DONE</strong> (all capital letters) is entered at
                the member last-name prompt.</p>
            <p>Your program should output:</p>
            <ul>
                <li>The last name of the member with the highest account value, if there are two members with the same
                    highest account value it should output the name of the first person entered.</li>
                <li>It will then output the percentage members who are within $10,000 (inclusive) of the highest account
                    value.</li>
            </ul>
            <p>There is no bound on the number of members that may be entered, but you may assume that there will be at
                least one member and balance entered.</p>
            <p>&nbsp;</p>
            <p><strong>EXAMPLE:</strong></p>
            <table style=""margin-left: auto; margin-right: auto;"" width=""717"">
                <thead>
                    <tr>
                        <th style=""border-color: #000000; border-style: solid;""></th>
                        <th style=""border-color: #000000; border-style: solid;"">Example 1</th>
                        <th style=""border-color: #000000; border-style: solid;"">Example 2</th>
                        <th style=""border-color: #000000; border-style: solid;"">Example 3</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th style=""border-color: #000000; border-style: solid;"">Inputs</th>
                        <th style=""border-color: #000000; border-style: solid;"">
                            Rockefeller<br>120000<br>Chase<br>115000<br>Morgan<br>110000<br>Gates<br>90000<br>Jobs<br>65000<br>DONE
                        </th>
                        <th style=""border-color: #000000; border-style: solid;"">
                            Jobs<br>150000<br>Chase<br>150000<br>Kennedy<br>40000<br>DONE</th>
                        <th style=""border-color: #000000; border-style: solid;"">
                            Morgan<br>145000<br>Chase<br>135000<br>Kennedy<br>142000<br>Gates<br>145000<br>DONE</th>
                    </tr>
                    <tr>
                        <th style=""border-color: #000000; border-style: solid;"">Output</th>
                        <th style=""border-color: #000000; border-style: solid;"">Rockefeller<br>60.0</th>
                        <th style=""border-color: #000000; border-style: solid;"">Jobs<br>66.66666666666666</th>
                        <th style=""border-color: #000000; border-style: solid;"">Morgan<br>100.0</th>
                    </tr>
                </tbody>
            </table>
            <p>&nbsp;</p>
        </div>
    </div>
</div>","from cs110 import autograder
import random, statistics

random_names = ['Gates', 'Bezos', 'Zuckerberg', 'Ellison', 'Page', 'Brin', 'Huateng', 'Dell', 'Musk', 'Allen']

def get_random_name():
    global random_names
    name = random_names[random.randint(0, len(random_names)-1)]
    random_names.remove(name)
    return name


def solution(data):
    highest_value = -99999
    highest_name = """"
    count = 0
    
    for row in data:
        if row[1] > highest_value:
            highest_value = row[1]
            highest_name = row[0]
    
    for row in data:
        if row[1] >= highest_value - 10000:
            count += 1

    return highest_name, (count / len(data) * 100.0)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_inputs = random.randint(5, 7)
    input_list = []
    data = []
        
    for i in range(num_inputs):
        new_row = [get_random_name(), random.randint(5000, 35000)]
        input_list.append(new_row[0])
        input_list.append(new_row[1])
        data.append(new_row)
    input_list.append(""DONE"")
    
    highest_balance, percent = solution(data)
    
    # Runs the Script
    output, error_message = autograder.run_script(""Lists2_credit.py"", input_list)
    lines = output.strip().split('\n')

    # Checks Min
    if len(lines) < 2:
        print(""Number of output lines does not match"")
        return 0
    else:
        if not highest_balance == lines[0]:
            print(""Incorrect Highest Balance.  Expected "" + str(highest_balance))
            return 0
        if not autograder.equals(percent, lines[1]):
            print(""Incorrect Percent.  Expected "" + str(percent))
            return 50
        
    print(""PASSED!"")
    return 100
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)








# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,
541,Lists2_100m,4,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
    <p>You have been asked by your unit to record 100m dash times for an upcoming USAFA track meet. Create a Python
        algorithm that first asks for the number of cadets, and then asks for that many cadet last names, squadrons, and
        100m dash times (in that order).</p>
    <p>Your program should output:</p>
    <ul>
        <li>The cadet squadron containing the cadet with the fastest 100m dash time followed by their 100m dash time. If
            there is a tie for fastest 100m dash times, you should output the squadron number and time for the LAST
            cadet entered who had that fastest time.</li>
        <li>The number of cadets whose 100m dash time was faster than the average.</li>
    </ul>
    <p>There is no bound on the number of cadets that may be entered, but you may assume that there will be at least one
        cadet and track time entered.</p>
    <p>&nbsp;</p>
    <p><strong>EXAMPLES:</strong></p>
    <table style=""margin-left: auto; margin-right: auto;"" width=""475"">
        <thead>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""></td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Example 1</strong>
                </td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Example 2</strong>
                </td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Example 3</strong>
                </td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Inputs</strong></td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    4<br>Thorpe<br>13<br>10.2<br>Owens<br>22<br>9.93<br>Mathias<br>19<br>9.99<br>Rudolph<br>39<br>10.23
                </td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    3<br>Johnson<br>7<br>10.3<br>Tyus<br>14<br>10.02<br>Lewis<br>40<br>9.67</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">
                    2<br>Joyner<br>1<br>10.08<br>Kersee<br>29<br>9.97</td>
            </tr>
            <tr>
                <td style=""text-align: center; border-color: #000000; border-style: solid;""><strong>Output</strong></td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">22<br>9.93<br>2</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">40<br>9.67<br>1</td>
                <td style=""text-align: center; border-color: #000000; border-style: solid;"">29<br>9.97<br>1</td>
            </tr>
        </tbody>
    </table>

</div>","from cs110 import autograder
import random, statistics

random_names = ['Alice', 'Bob', 'Courtney', 'Devon', 'Frank', 'Genie']

def get_random_name():
    global random_names
    name = random_names[random.randint(0, len(random_names)-1)]
    random_names.remove(name)
    return name

def solution(data):
    fastest_time = 99999
    fastest_squadron = 0
    total = 0
    count = 0
    
    for row in data:
        total += row[2]
        if row[2] <= fastest_time:
            fastest_time = row[2]
            fastest_squadron = row[1]
            
    average = total / len(data)
    
    for row in data:
        if row[2] <= average:
            count += 1
    
    return fastest_squadron, fastest_time, count


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    # Generates Random Values
    num_inputs = random.randint(2, 5)
    input_list = [num_inputs]
    data = []
        
    for i in range(num_inputs):
        new_row = [get_random_name(), random.randint(1, 40), round(random.uniform(12, 18), 1)]
        input_list.append(new_row[0])
        input_list.append(new_row[1])
        input_list.append(new_row[2])
        data.append(new_row)
    
    fastest_squadron, fastest_time, count = solution(data)
    
    # Runs the Script
    output, error_message = autograder.run_script(""Lists2_100m.py"", input_list)
    lines = output.strip().split('\n')

    # Checks Min
    if len(lines) != 3:
        print(""Number of output lines does not match"")
        return 0
    else:
        if not autograder.equals(fastest_squadron, lines[0]):
            print(""Incorrect Squadron.  Expected "" + str(fastest_squadron))
            return 0
        if not autograder.equals(fastest_time, lines[1]):
            print(""Incorrect Time.  Expected "" + str(fastest_time))
            return 33
        if not autograder.equals(count, lines[2]):
            print(""Incorrect Count.  Expected "" + str(count))
            return 67
        
    print(""PASSED!"")
    return 100
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)








# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
542,Lists1_pftscores,4,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
    <p>You are provided a list of PFT scores, already in the lab template, in a variable <code>pft_scores</code>
        arranged in no particular order.&nbsp;</p>
    <p>Write a Python program that obtains a new score from the user. If the score is valid (above zero and no greater
        than 500), add it to the list and print out the following two stats in this order:</p>
    <p style=""padding-left: 40px;"">1. <strong>average score&nbsp;</strong> HINT: use the functions <code>len()</code>
        and <code>sum()</code> on your list to find the average</p>
    <p style=""padding-left: 40px;"">2. <strong>range of scores</strong>, the difference between the largest score and
        smallest score. HINT: use the functions <code>min()</code> and <code>max()</code> on your list to find the range
    </p>
    <p>If the score is invalid (below zero or above 500), instead print:&nbsp; ""Invalid score provided"".</p>
    <p>&nbsp;</p>
    <p><strong>EXAMPLE:</strong></p>
    <table style=""border-collapse: collapse; width: 80%; margin-left: auto; margin-right: auto;"" border=""1"">
        <tbody>
            <tr>
                <td style=""width: 24.9835%; text-align: center;""></td>
                <td style=""width: 24.9835%; text-align: center;""><strong>Example 1</strong></td>
                <td style=""width: 24.9835%; text-align: center;""><strong>Example 2</strong></td>
                <td style=""width: 24.9869%; text-align: center;""><strong>Example 3</strong></td>
            </tr>
            <tr>
                <td style=""width: 24.9835%; text-align: center;""><strong>Input</strong></td>
                <td style=""width: 24.9835%; text-align: center;"">-5</td>
                <td style=""width: 24.9835%; text-align: center;"">328</td>
                <td style=""width: 24.9869%; text-align: center;"">65</td>
            </tr>
            <tr>
                <td style=""width: 24.9835%; text-align: center;""><strong>Outputs</strong></td>
                <td style=""width: 24.9835%; text-align: center;"">Invalid score provided</td>
                <td style=""width: 24.9835%; text-align: center;"">
                    <p>291.8</p>
                    <p>403</p>
                </td>
                <td style=""width: 24.9869%; text-align: center;"">
                    <p>274.26666666666665</p>
                    <p>408</p>
                </td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
    <p>&nbsp;</p>
    <br>
    <p>&nbsp;</p>

</div>","from cs110 import autograder
import random, math
#import Lists1_pftscores

pft_scores = [243, 394, 143, 288, 303, 473, 325, 273, 284, 198, 70, 289, 437, 329]


def solution(new_num):
    result = ''
    
    # Append number to num_list ONLY IF IT IS A valid number > 0
    if new_num >= 0 and new_num <= 500:

        temp_scores = pft_scores.copy()
        temp_scores.append(new_num)
        
        average = sum(temp_scores) / len(temp_scores)
        num_range = max(temp_scores) - min(temp_scores)
        
        result += str(average) + '\n'
        result += str(num_range) + '\n'
    else:
        result += ""Invalid score provided""
        
    return result

def test_passed():
    
    # 5 test strategies
    # 1) invalid, out of range low
    # 2) invalid, out of range high
    # 3) rand num that doesn't affect range
    # 4) rand num lower than current lowest, but valid
    # 5) rand num higher than current highest, but valid
    
    min_score = min(pft_scores)
    max_score = max(pft_scores)
    
    test_vals = []
    
    # random_low_invalid
    test_vals.append(random.randint(-1010,-1))
    #random_high_invalid
    test_vals.append(random.randint(501,5000))
    #random_mid_num
    test_vals.append(random.randint(min_score, max_score))
    #random_low
    test_vals.append(random.randint(0, min_score-1))
    #random_high
    test_vals.append(random.randint(max_score + 1, 500))
    
    i = 0
    total_score = 0.0
    
    for val in test_vals:
        print('-'*10 + ""Test #"" + str(i) + '-'*10)
        
        output, error_message = autograder.run_script(""Lists1_pftscores.py"", [val])
        expected_output = solution(val)
        
        lines = output.strip().split('\n')
        
        if expected_output.strip() == ""Invalid score provided"":
            if output.strip() == expected_output.strip():
                print(""CORRECT"")
                total_score += 100 / len(test_vals)
            else:
                print(""INCORRECT. Expected the following:"")
                print(expected_output)
        else:
            expected_lines = expected_output.strip().split('\n')
            
            if autograder.equals(float(expected_lines[0]), float(lines[0]), 0.99) and autograder.equals(float(expected_lines[1]), float(lines[1]), 0.99):
                print(""CORRECT"")
                total_score += 100 / len(test_vals)
            else:
                print(""INCORRECT. Expected the following:"")
                print(expected_output)
            
        print()
        i += 1
    
    return total_score

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0,
543,Lists1_listrange,4,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
    <p>Write a Python program that obtains two whole numbers that represent the start and stop values for a range of numbers. You may assume the second number is always greater than the first.</p>
    <p>Using these start and stop values, print the two following items in order:</p>
    <p style=""padding-left: 40px;"">1.&nbsp; Print a list that starts at the start value and ends at (the list contains) the stop value</p>
    <p style=""padding-left: 80px;""><strong>HINT</strong>: Use <code>range()</code> to accomplish this. In order to print the result from range() as a list, surround it with list(), <code>list(range(#,#))</code>, like you surround input() with int() or float(), <code>int(input())</code>.</p>
    <p style=""padding-left: 40px;"">2.&nbsp; Print the size (how many numbers are contained) of that list</p>
    <p>&nbsp;</p>
    <p><strong>EXAMPLE:</strong></p>
    <table style=""border-collapse: collapse; width: 59.998%; margin-left: auto; margin-right: auto;"" border=""1"">
    <tbody>
    <tr>
    <td style=""width: 24.9835%; text-align: center;""></td>
    <td style=""width: 24.9835%; text-align: center;""><strong>Example 1</strong></td>
    <td style=""width: 24.9835%; text-align: center;""><strong>Example 2</strong></td>
    </tr>
    <tr>
    <td style=""width: 24.9835%; text-align: center;""><strong>Inputs</strong></td>
    <td style=""width: 24.9835%; text-align: center;"">
    <p>1</p>
    <p>10</p>
    </td>
    <td style=""width: 24.9835%; text-align: center;"">
    <p>1023</p>
    <p>1029</p>
    </td>
    </tr>
    <tr>
    <td style=""width: 24.9835%; text-align: center;""><strong>Outputs</strong></td>
    <td style=""width: 24.9835%; text-align: center;"">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<br>10</td>
    <td style=""width: 24.9835%; text-align: center;"">
    <p>[1023, 1024, 1025, 1026, 1027, 1028, 1029]<br>7</p>
    </td>
    </tr>
    </tbody>
    </table>
</div>","from cs110 import autograder
import random, math


def solution(test_start, test_stop):
    result = []
    
    result.append(list(range(test_start, test_stop+1)))
    result.append(len(range(test_start, test_stop+1)))
        
    return result

def test_passed():
    
    # 5 test strategies
    test_vals = []
    
    for j in range(5):
        test_val_start = random.randint(0,2048)
        test_val_stop = test_val_start + random.randint(9,16)
        test_vals.append((test_val_start, test_val_stop))
  
    i = 0
    total_score = 0.0
    
    for val in test_vals:
        print('-'*10 + ""Test #"" + str(i) + '-'*10)
        
        output, error_message = autograder.run_script(""Lists1_listrange.py"", [val[0], val[1]])
        expected_output = solution(val[0], val[1])
        
        lines = output.strip().split('\n')
        
        idx = 0
        count_correct_lines = 0
        if len(lines) != 2:
            print(""Missing/Extra Output - Expecting a list and then its length on next line"")
            
        for line in lines:
            if line.strip() == str(expected_output[idx]): # and autograder.equals(int(lines[1]), expected_output[1]):
                total_score += 50.0 / len(test_vals)
                count_correct_lines += 1
            else:
                print(""INCORRECT Value:"", line)
                print(""Expecting Value:"", expected_output[idx])
            
            idx += 1
            
        if count_correct_lines == 2:
            print(""CORRECT"")
        print()
        i += 1
    
    return total_score

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
544,Lists1_fastestcar,4,lab,0,"<div><strong>PROBLEM STATEMENT:</strong></p>
    <p>Write a Python program with the definition of a new function named fastest_car and takes two lists of car info as
        parameters. The function will then <span style=""text-decoration: underline;""><strong>return</strong></span> the
        car model name with the higher top speed or ""Same speed"" if the top speeds are the same.</p>
    <p>The two parameters to the function are both a list with the same 3 types of elements, as follows:</p>
    <br>
    <table style=""border-collapse: collapse; width: 80%;"" border=""1"">
        <tbody>
            <tr>
                <td style=""width: 24.9835%;""></td>
                <td style=""width: 24.9835%; text-align: center;""><strong>Car Model</strong></td>
                <td style=""width: 24.9835%; text-align: center;""><strong>Cost</strong></td>
                <td style=""width: 24.9869%; text-align: center;""><strong>Top Speed</strong></td>
            </tr>
            <tr>
                <td style=""width: 24.9835%; text-align: center;""><strong>Value</strong></td>
                <td style=""width: 24.9835%;"">Ford Mustang</td>
                <td style=""width: 24.9835%;"">27205.00</td>
                <td style=""width: 24.9869%;"">163</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
    <table style=""border-collapse: collapse; width: 80%;"" border=""1"">
        <tbody>
            <tr>
                <td style=""width: 24.9835%;""></td>
                <td style=""width: 24.9835%; text-align: center;""><strong>Car Model</strong></td>
                <td style=""width: 24.9835%; text-align: center;""><strong>Cost</strong></td>
                <td style=""width: 24.9869%; text-align: center;""><strong>Top Speed</strong></td>
            </tr>
            <tr>
                <td style=""width: 24.9835%; text-align: center;""><strong>Value</strong></td>
                <td style=""width: 24.9835%;"">Chevy Corvette</td>
                <td style=""width: 24.9835%;"">66400.00</td>
                <td style=""width: 24.9869%;"">194</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
    <p><strong>EXAMPLE</strong>:</p>
    <table style=""border-collapse: collapse; width: 80%; margin-left: auto; margin-right: auto;"" border=""1"">
        <tbody>
            <tr>
                <td style=""width: 25%; text-align: center;""></td>
                <td style=""width: 25%; text-align: center;""><strong>Example</strong></td>
            </tr>
            <tr>
                <td style=""width: 25%; text-align: center;""><strong>Input Parameters to</strong>
                    <code>fastest_car()</code></td>
                <td style=""width: 55%; text-align: center;"">
                    <p><code>fastest_car([""Ford Mustang"", 27205.00, 163], [""Chevy Corvette"", 66400.00, 194])</code></p>
                </td>
            </tr>
            <tr>
                <td style=""width: 25%; text-align: center;""><strong>Outputs</strong></td>
                <td style=""width: 25%; text-align: center;"">Chevy Corvette</td>
            </tr>
        </tbody>
    </table>
</div>","from cs110 import autograder
import random, math
try:
    import Lists1_fastestcar as student_module
except:
    try:
        import lists1_fastestcar as student_module
    except Exception as e:
        print(""Import ERROR:"", e)

def solution(car1, car2):

    if car1[2] > car2[2]:
        return car1[0]
    elif car2[2] > car1[2]:
        return car2[0]
    else:
        return ""Same speed""

def test_passed():
    
    # 5 test strategies
    cars_list = []
    cars_list.append([""Honda Civic"", 18983.20, 127])
    cars_list.append([""Acura NSX"", 157500.39, 191])
    cars_list.append([""VW Golf GTI"", 28595.83, 130])
    cars_list.append([""Ford F-150 Raptor"", 45290.82, 107])
    cars_list.append([""Subaru BRZ"", 28955.38, 140])
    cars_list.append([""Mazda Mazdaspeed3"", 17424.30, 130])
    
    test_vals = []
    
    index_permutations = []
    # build all possible permutations except those with the same vehicle
    for i in range(len(cars_list)):
        for j in range(len(cars_list)):
            if i != j:
                index_permutations.append((i,j))
    
    # randomly choose 4 of the permutations
    for i in range(4):
        car_idx_pair = index_permutations[random.randint(0,len(index_permutations)-1)]
        first_car_idx = car_idx_pair[0]
        second_car_idx = car_idx_pair[1]
        
        index_permutations.remove(car_idx_pair)
        
        test_vals.append([cars_list[first_car_idx], cars_list[second_car_idx]])

    # same speed
    test_vals.append((cars_list[2], cars_list[5]))
  
    i = 0
    total_score = 0.0
    
    for val in test_vals:
        print('-'*10 + ""Test #"" + str(i) + '-'*10)
        
        try:
            output = student_module.fastest_car(val[0], val[1])
            expected_output = solution(val[0], val[1])

            print(""Your Program's Output:"")
            print(output)

            if output == None:
                print(""INCORRECT - Your function did not return anything. \nExpected:"")
                print(str(expected_output))
            elif output.strip() == expected_output.strip():
                print(""CORRECT"")
                total_score += 100.0 / len(test_vals)
            else:
                print(""INCORRECT - Expected:"")
                print(str(expected_output))
        except Exception as e:
            print(""There was an error when testing your solution."")
            print(e)
            
        print()
        i += 1
    
    return total_score

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
545,IterLogic2_timestable,4,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write an algorithm that asks the user for a positive&nbsp;number and then outputs the multiplication table of that number 1-10.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Example 1</th>
<th>Example 2</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>3</th>
<th>9</th>
</tr>
<tr>
<th>Outputs</th>
<th>
<p>3<br />6<br />9<br />12<br />15<br />18<br />21<br />24<br />27<br />30</p>
</th>
<th>9<br />18<br />27<br />36<br />45<br />54<br />63<br />72<br />81<br />90</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def solution(multiple):
    result = ''
    i = 1
    
    while i <= 10:
        result += str(i * multiple) + ""\n""
        i += 1
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_multiple = random.randint(1, 20)

    output, error_message = autograder.run_script(""IterLogic2_timestable.py"", [random_multiple])
    expected_output = solution(random_multiple)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)











# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
546,IterLogic2_printchars,4,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a Python algorithm that asks the users for two ASCII characters (e.g., 'a', 'z'), and prints all of the characters between them (inclusive).</p>
<ul>
<li>If the first character has a lower ASCII value than the second (e.g., 'a' - 'z'), print out the letters in ascending order.</li>
<li>Alternatively, if the second letter has a lower ASCII value, print out the letters in descending order.</li>
</ul>
<p>&nbsp;</p>
<p><strong>HINTS:</strong></p>
<ul>
<li>Use the&nbsp;<code>ord()</code>&nbsp;function to convert a character into an integer:<br /><code>ord('a')</code>&nbsp;returns 141<br /><br /></li>
<li>Use the&nbsp;<code>chr()</code>&nbsp;function to convert an integer back into a character:<br /><code>chr(142)</code>&nbsp;returns 'b'</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Example 1</th>
<th>Example 2</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>a<br />c</th>
<th>f<br />a</th>
</tr>
<tr>
<th>Outputs</th>
<th>
<p>a<br />b<br />c</p>
</th>
<th>f<br />e<br />d<br />c<br />b<br />a</th>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

def solution(start_char, end_char):
    result = ''
    
    start_char = ord(start_char)
    end_char = ord(end_char)
    
    if start_char < end_char:
        for i in range(start_char, end_char+1, 1):
            result += chr(i) + '\n'
    else:
        for i in range(start_char, end_char-1, -1):
            result += chr(i) + '\n'

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    print(""# ------------------------------------------"")
    print(""# Test 1:  First letter lower than second"")
    print(""# ------------------------------------------"")
    start_char = chr(random.randint(65, 85))
    end_char   = chr(random.randint(ord(start_char), 90))

    output, error_message = autograder.run_script(""IterLogic2_printchars.py"", [start_char, end_char])
    expected_output = solution(start_char, end_char)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT\n"")
        score += 50
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
        
    
    print(""# ------------------------------------------"")
    print(""# Test 2:  First letter higher than second"")
    print(""# ------------------------------------------"")
    start_char = chr(random.randint(85, 90))
    end_char   = chr(random.randint(65, 84))

    output, error_message = autograder.run_script(""IterLogic2_printchars.py"", [start_char, end_char])
    expected_output = solution(start_char, end_char)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT\n"")
        score += 50
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
547,IterLogic2_football,4,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>In, Python, write an algorithm that first asks the user how many football players they wish to enter statistics for and then gets that many yearly passing totals for each player. Output how many of those players that had more than 5000 passing yards in a year. Also your algorithm will output the average yardage per year as well as the minimum yardage entered, in that order. You can assume there is at least one player's yardage to input.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table width=""400"">
<thead>
<tr>
<td>&nbsp;</td>
<td>Example 1</td>
<td>Example 2</td>
<td>Example 3</td>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Inputs</strong></td>
<td>6<br />4924<br />4442<br />5117<br />2700<br />1990<br />4399</td>
<td>5<br />2305<br />4209<br />5100<br />5109<br />3800</td>
<td>4<br />4200<br />2709<br />3757<br />2976</td>
</tr>
<tr>
<td><strong>Outputs</strong></td>
<td>1<br />3928.6666666666665<br />1990</td>
<td>2<br />4104.6<br />2305</td>
<td>0<br />3410.5<br />2709</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    num_entries = random.randint(1, 6)
    num_above_5000 = random.randint(0, num_entries)
    list_of_values = [num_entries]
    
    for i in range(num_entries):
        if i < num_above_5000:
            list_of_values.append(random.randint(5001, 8000))
        elif i == num_above_5000:
            list_of_values.append(5000)
        else:
            list_of_values.append(random.randint(1, 5000))
    
    average = sum(list_of_values[1:])/num_entries
    min_value = min(list_of_values[1:])
    
    output, error_message = autograder.run_script(""IterLogic2_football.py"", list_of_values)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if len(lines) >= 1 and autograder.equals(lines[0], num_above_5000):
        print(""Number Above 5000 Looks Good"")
        score += 33
    else:
        print(""Number Above 5000 is Incorrect (or Missing)"")
    
    if len(lines) >= 2 and autograder.equals(lines[1], average):
        print(""Average Looks Good"")
        score += 33
    else:
        print(""Average is Incorrect (or Missing)"")
    
    if len(lines) >= 3 and autograder.equals(lines[2], min_value):
        print(""Min Value Looks Good"")
        score += 34
    else:
        print(""Min Value is Incorrect (or Missing)"")
        
    return score
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
548,IterLogic2_counting,4,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a Python algorithm that gets three numbers from the user, X, Y, and Z. Then have the algorithm output all the numbers from X to Y (inclusive), counting by Z. You may assume that Z is non-zero.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table width="""">
<thead>
<tr>
<td>&nbsp;</td>
<td>Example 1</td>
<td>Example 2</td>
<td>Example 3</td>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Inputs</strong></td>
<td>1<br />5<br />1</td>
<td>-5<br />-10<br />-3</td>
<td>15<br />15<br />100</td>
</tr>
<tr>
<td><strong>Outputs</strong></td>
<td>1<br />2<br />3<br />4<br />5</td>
<td>-5<br />-8</td>
<td>15</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

# def solution(random_start, random_end, random_increment):
#     result = ''
# 
#     for i in range(random_start, random_end+1, random_increment):
#         result += str(i) + ""\n""
#         print(""Result adding:"", i)
# 
#     return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_start = random.randint(0, 10)
    random_end = random.randint(50, 100)
    random_increment = random.randint(2, 9)
    
    test_cases = dict()
    test_cases[(42, 47, 1)] = ""42\n43\n44\n45\n46\n47\n""
    test_cases[(8, 92, 7)] = ""8\n15\n22\n29\n36\n43\n50\n57\n64\n71\n78\n85\n92\n""
    test_cases[(5, 62, 8)] = ""5\n13\n21\n29\n37\n45\n53\n61\n""
    test_cases[(10, 64, 9)] = ""10\n19\n28\n37\n46\n55\n64\n""
    test_cases[(5, -7, -2)] = ""5\n3\n1\n-1\n-3\n-5\n-7\n""
    
    test_case_input = list(test_cases.keys())
    case_order = list(range(len(test_case_input)))
    random.shuffle(case_order)
    
    score = 0

    i = 1
    for idx in case_order:
        print('\n' + '='*30)
        print(""Test Case:"", i)
        print('='*30)
        output, error_message = autograder.run_script(""IterLogic2_counting.py"", test_case_input[case_order[idx]])
        expected_output = test_cases[test_case_input[case_order[idx]]]  # solution(test_case_input[case_order[0]][0], test_case_input[case_order[0]][1], test_case_input[case_order[0]][2])
        
        lines = output.strip().split('\n')
        last_line = lines[len(lines)-1]

        if output.strip() == expected_output.strip():
            print(""CORRECT"")
            score += 20
        else:
            print(""INCORRECT.  Expected the following:"")
            print(expected_output)
        
        i += 1
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
549,IterLogic2_coordinates,4,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a Python algorithm that prints all the coordinates in a coordinate plane, given two corners. Your program should get four inputs from the user:</p>
<ul>
<li>the starting x-coordinate,</li>
<li>the ending x-coordinate,</li>
<li>the starting y-coordinate, and</li>
<li>the ending y-coordinate.</li>
</ul>
<p>Your program will then print out all of the coordinates in x y order (separating coordinates with a space), listing all of the coordinates in the x-axis before incrementing y. You may assume that the ending coordinate is never less than the starting coordinate.<br /></p>
<p>For example, your algorithm would print out:<br />1 2<br />2 2<br />3 2<br />4 2<br />5 2<br />6 2<br />1 3<br />2 3<br />3 3<br />4 3<br />5 3<br />6 3<br />. . . and so on</p>
<p>&nbsp;</p>
<p><strong>HINTS:</strong></p>
<ul>
<li>Write a loop that first prints all of the x coordinates from start to end</li>
<li>Use a nested loop to print all of the y coordinates from start to end</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table width=""300"">
<thead>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Inputs</strong></td>
<td>0<br />1<br />0<br />1</td>
<td>0<br />2<br />0<br />1</td>
</tr>
<tr>
<td><strong>Outputs</strong></td>
<td>0 0<br />1 0<br />0 1<br />1 1</td>
<td>0 0<br />1 0<br />2 0<br />0 1<br />1 1<br />2 1</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def solution(start_x, end_x, start_y, end_y):
    result = ''

    for y in range(start_y, end_y+1):
        for x in range(start_x, end_x+1):
            result += str(x) + "" "" + str(y) + ""\n""

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    start_x = random.randint(-2, -1)
    end_x = random.randint(1, 2)
    start_y = random.randint(-3, -1)
    end_y = random.randint(1, 3)

    output, error_message = autograder.run_script(""IterLogic2_coordinates.py"", [start_x, end_x, start_y, end_y])
    expected_output = solution(start_x, end_x, start_y, end_y)
    
    lines = output.strip().split('\n')
    num_matches = autograder.compare_strings(lines, expected_output.strip().split('\n'))

    return 100 * (num_matches / len(lines))

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
550,IterLogic2_class2017,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>In Python, write an algorithm that first asks the user how many cadets to input and then gets that many cadet class years from the user. Output how many of those cadets were in the class of 2017. You can assume there is at least one cadet to enter.</p>
<p><strong>EXAMPLES:</strong></p>
<table width=""300"">
<thead>
<tr>
    <th></th>
<td>Example 1</td>
<td>Example 2</td>
<td>Example 3</td>
</tr>
</thead>
<tbody>
<tr>
<td>Inputs</td>
<td>4<br />2014<br />2016<br />2017<br />2017</td>
<td>5<br />2015<br />2017<br />2014<br />2014<br />2017</td>
<td>4<br />2014<br />2016<br />2014<br />2014</td>
</tr>
<tr>
<td>Outputs</td>
<td>2</td>
<td>3</td>
<td>0</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    num_entries = random.randint(1, 6)
    num_in_2017 = random.randint(0, num_entries)
    list_of_values = [num_entries]
    
    for i in range(num_entries):
        if i < num_in_2017:
            list_of_values.append(2017)
        else:
            list_of_values.append(random.randint(2018, 2024))
        
    output, error_message = autograder.run_script(""IterLogic2_class2017.py"", list_of_values)
    
    lines = output.strip().split('\n')

    if len(lines) >= 1 and autograder.equals(lines[0], num_in_2017):
        print(""CORRECT"")
        score += 100
    else:
        print(""Expected"", num_in_2017)
        
    return score
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
551,IterLogic1_waittimes,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write an algorithm that lets the user input the wait times for various rides at an amusement park (in minutes) until he/she types the value -999. Output the shortest waiting time, followed by the number of waiting times that are over 30 minutes.</p>
<p><strong>EXAMPLE:</strong></p>
<table width=""400"">
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>
<p>90<br />30<br />31<br />-999</p>
</th>
<th>
<p>35<br />15<br />90<br />120<br />15<br />-999</p>
</th>
<th>
<p>15<br />15<br />10<br />5<br />-999</p>
</th>
</tr>
<tr>
<th>Outputs</th>
<th>30<br />2</th>
<th>15<br />3</th>
<th>5<br />0</th>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0.0
    
    possible_tests = [[30, 45, 15, 5, 5, -999], [15, 30, 31, 29, 120, 90, -999]]
    possible_output = [[5, 1], [15, 3]]
    
    # Generates a Random Test
    random_index = random.randint(0, len(possible_tests)-1)
    random_test = possible_tests[random_index]
    expected_output = possible_output[random_index]
            
    output, error = autograder.run_script(""IterLogic1_waittimes.py"", random_test)
    
    lines = output.split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Min Wait Time is Correct"")
        score += 50
    else:
        print(""Min Wait Time is Incorrect.  Expected"", expected_output[0])
        
    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Number of Lines With Over 30 Minute Wait Times is Correct"")
        score += 50
    else:
        print(""Number of Lines With Over 30 Minute Wait Times is Incorrect.  Expected"", expected_output[1])
    
    return score


# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,
552,IterLogic1_squadrons,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write an algorithm that asks the user for the number of&nbsp;squadrons to input, and then gets each squadron's number. Output the number<br />of squadrons from 1st, 2nd, 3rd, and 4th groups (one per line)</p>
<p><strong>EXAMPLE:</strong></p>
<table width=""400"">
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>
<p>3<br />3<br />19<br />24</p>
</th>
<th>
<p>4<br />19<br />25<br />37<br />40</p>
</th>
<th>
<p>2<br />1<br />34</p>
</th>
</tr>
<tr>
<th>Outputs</th>
<th>1<br />1<br />1<br />0</th>
<th>0<br />1<br />1<br />2</th>
<th>1<br />0<br />0<br />1</th>
</tr>
</tbody>
</table>
</div>

","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0.0
    
    possible_tests = [[5, 10, 20, 30, 40, 19], [8, 3, 1, 23, 37, 40, 7, 6, 25]]
    possible_output = [[1, 2, 1, 1], [4, 0, 2, 2]]
    
    # Generates a Random Test
    random_index = random.randint(0, len(possible_tests)-1)
    random_test = possible_tests[random_index]
    expected_output = possible_output[random_index]
            
    output, error = autograder.run_script(""IterLogic1_squadrons.py"", random_test)
    
    lines = output.split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Num in Group One is Correct"")
        score += 25
    else:
        print(""Num in Group One is Incorrect.  Expected"", expected_output[0])
        
    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Num in Group Two is Correct"")
        score += 25
    else:
        print(""Num in Group Two is Incorrect.  Expected"", expected_output[1])
    
    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):
        print(""Num in Group Three is Correct"")
        score += 25
    else:
        print(""Num in Group Three is Incorrect.  Expected"", expected_output[2])
    
    if len(lines) > 3 and autograder.equals(lines[3], expected_output[3]):
        print(""Num in Group Four is Correct"")
        score += 25
    else:
        print(""Num in Group Four is Incorrect.  Expected"", expected_output[3])
    
    return score


# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
553,IterLogic1_dvc,4,lab,0,"<div><strong>PROBLEM NAME:<br></strong>IterLogic1_dvc</p>
    <p>&nbsp;</p>
    <p><strong>PROBLEM STATEMENT:<br></strong>The CS110Z course director, unfortunately, was tricked into purchasing a Disney Vacation Club timeshare. The good news about DVC is that it lets you reserve a room at any Disney Resort for one week! The downside, however, is that members have to pay an annual ""maintenance fee"" so that the mouse can keep the property looking good (EVEN when Disney World was closed due to COVID-19 . . . yay).</p>
    <p>This year, the maintenance was $623.00. If that isn't bad enough, your course director discovered that maintenance fees aren't fixed! On the contrary, it accues each year at a rate of approximately 1.5%.</p>
    <p>Write a Python function called<span>&nbsp;</span><code>get_years_until</code><span>&nbsp;</span>that takes a<span>&nbsp;</span><strong>target value</strong><span>&nbsp;</span>as a parameter, and returns the number of years (assuming a fixed interest rate) before the maintenance fee exceeds this value.</p>
    <p>&nbsp;</p>
    <p><strong>Example 1</strong><br><code>get_years_until(624)</code><span>&nbsp;</span>should return 1. This is because:</p>
    <ul>
    <li>The maintenance fee will increase by $9.35 (i.e., 1.5% of 623) in a year</li>
    <li>The new maintenance fee will be $623.00 + $9.35 = $632.35, which is obviously more than $624.00</li>
    </ul>
    <p><strong><br>Example 2</strong><br><code>get_years_until(1000)</code><span>&nbsp;</span>should return 32. This is because:</p>
    <ul>
    <li>623 * 1.015 * 1.015 * 1.015 . . . (32 times total) = $1003.23, which is obviously more than $1000.00</li>
    </ul>
    <p><br><strong>Don't Know Where to Start?!?</strong><br>Use a While loop to keep calculating the new maintenance fee until the value is . . . (we'll let you figure out the rest).</p>
    </div>","from IterLogic1_dvc import get_years_until
from cs110 import autograder
import random, math

NUM_SUBTESTS = 5

def soln(target_value):
    maintenance_fee = 623.00
    interest_rate = 0.015
    count = 0

    while maintenance_fee < target_value:
        count += 1
        maintenance_fee = maintenance_fee * (1 + interest_rate)
    
    return count

def test_passed():
    passed = 0
    for i in range(NUM_SUBTESTS):
        print('Running test %d of %d:' % (i+1 , NUM_SUBTESTS), end='')
        target_amount = random.randint(650, 1100)
        if autograder.equals(get_years_until(target_amount), soln(target_amount)):
            print(""  It will take "" + str(get_years_until(target_amount)) + "" years until the maintenance fee exceeds $"" + str(target_amount))
            passed += 1
        else:
            print('  get_years_until(%d) incorrectly returned %d instead of %d\n' % (target_amount, get_years_until(target_amount), soln(target_amount)))
    
    return round((100 / NUM_SUBTESTS), 1) * passed


# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)





# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,
554,IterLogic1_countby10s,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a program whose input is two integers. Output the first integer and subsequent increments of 10 as long as the value is less than or equal to the second integer.</p>
<p>Case #1: If the input is:</p>
<pre><code>-15
30
</code></pre>
<p>the output is:</p>
<pre><code>-15
-5
5
15
25
</code></pre>
<p>Case 2: If the second integer is less than the first as in:</p>
<pre><code>20
5
</code></pre>
<p>the output is:</p>
<pre><code>Second integer can't be less than the first.
</code></pre>
<p>For coding simplicity, output a space after every integer, including the last.</p>
</div>


","from cs110 import autograder
import random, math

def solution(starting_value, value_to_count_to):
    result = ''
    
    if value_to_count_to < starting_value:
        return ""Second integer can't be less than the first.""
    else:
        i = starting_value
        
        while i <= value_to_count_to:
            result += str(i) + ""\n""
            i += 10
        
        return result

def run_test(random_starting_number, random_ending_number):
    print(""#--------------------------------------------"")
    print(""# Testing"", random_starting_number, ""to"", random_ending_number)
    print(""#--------------------------------------------"")
    
    output, error_message = autograder.run_script(""IterLogic1_countby10s.py"", [random_starting_number, random_ending_number])
    expected_output = solution(random_starting_number, random_ending_number)
    
    if output.strip() == expected_output.strip():
        print(""CORRECT\n"")
        return True
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
        print()
    
    return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    
    if run_test(10 * random.randint(1, 5), 60 + 10 * random.randint(1, 20)):
        score += 40
        
    if run_test(random.randint(0, 30), random.randint(31, 200)):
        score += 40
    
    if run_test(random.randint(50, 100), random.randint(0, 10)):
        score += 20
    
    
    return score

        
# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)













# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
555,IterLogic1_count,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write a Python program that gets 2 inputs from the user</p>
<ul>
<li>a number,&nbsp;<strong>x</strong></li>
<li>an increment amount,&nbsp;<strong>y</strong></li>
</ul>
<p>Your program will then print out all the numbers from 0 to the user-defined value (x), counting by the increment amount (y).</p>
<p><strong>EXAMPLES:</strong></p>
<table>
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>10<br />2</th>
<th>14<br />3</th>
</tr>
<tr>
<th>Outputs</th>
<th>0<br />2<br />4<br />6<br />8<br />10</th>
<th>0<br />3<br />6<br />9<br />12</th>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

def solution(value_to_count_to, increment):
    result = ''
    i = 0
    
    while i <= value_to_count_to:
        result += str(i) + ""\n""
        i += increment
    
    return result

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_ending_number = 10 + 2 * random.randint(1, 10)
    random_increment = 2

    output, error_message = autograder.run_script(""IterLogic1_count.py"", [random_ending_number, random_increment])
    expected_output = solution(random_ending_number, random_increment)
    
    lines = output.strip().split('\n')
    last_line = lines[len(lines)-1]

    if output.strip() == expected_output.strip():
        print(""CORRECT"")
        return 100
    else:
        print(""INCORRECT.  Expected the following:"")
        print(expected_output)
    
    return 0

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':   
    result = test_passed()
    print(""Unit Test Returned:"", result)











# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
556,IterLogic1_cargocapacity,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Write an algorithm that lets the user input the cargo capacity (in lbs) of various transport aircraft until the user enters -1. Your program should output the min and max cargo capacity, as well as the number of aircraft that can carry at least 10000 lbs.</p>
<p><strong>EXAMPLE:</strong></p>
<table width=""400"">
<thead>
<tr>
    <th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>
<p>4500<br />11000<br />9000<br />-1</p>
</th>
<th>
<p>9999<br />15000<br />3500<br />17500<br />-1</p>
</th>
<th>10000<br />-1</th>
</tr>
<tr>
<th>Outputs</th>
<th>4500<br />11000<br />1</th>
<th>3500<br />17500<br />2</th>
<th>10000<br />10000<br />1</th>
</tr>
</tbody>
</table>
</div>

","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0.0
    
    possible_tests = [[8000, 12000, 25000, 10000, 7500, -1], [5000, 9000, 22000, 10000, 8700, -1], [9999, 5000, 3000, -1]]
    possible_output = [[7500, 25000, 3], [5000, 22000, 2], [3000, 9999, 0]]
    
    # Generates a Random Test
    random_index = random.randint(0, len(possible_tests)-1)
    random_test = possible_tests[random_index]
    expected_output = possible_output[random_index]
            
    output, error = autograder.run_script(""IterLogic1_cargocapacity.py"", random_test)
    
    lines = output.split('\n')
    
    if len(lines) > 0 and autograder.equals(lines[0], expected_output[0]):
        print(""Min Value is Correct"")
        score += 30
    else:
        print(""Min Value is Incorrect.  Expected"", expected_output[0])
    
    if len(lines) > 1 and autograder.equals(lines[1], expected_output[1]):
        print(""Max Value is Correct"")
        score += 30
    else:
        print(""Max Value is Incorrect.  Expected"", expected_output[1])
        
    if len(lines) > 2 and autograder.equals(lines[2], expected_output[2]):
        print(""Number of Aircraft with At Least 10000 lbs is Correct"")
        score += 40
    else:
        print(""Number of Aircraft with At Least 10000 lbs is Incorrect.  Expected"", expected_output[2])
    
    return score


# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,
557,IterLogic1_averagerun,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>In, Python, write an algorithm that first asks the user how many PFT run times to input and then gets that many values from the user. Output the average of all the run times. You can assume there is at least one run time to input.</p>
<p><strong>EXAMPLE:</strong></p>
<table width=""400"">
<thead>
<tr>
<th></th>
<th>Example 1</th>
<th>Example 2</th>
<th>Example 3</th>
</tr>
</thead>
<tbody>
<tr>
<th>Inputs</th>
<th>6<br />98<br />75<br />88<br />82<br />94<br />100</th>
<th>5<br />99<br />83<br />79<br />86<br />87</th>
<th>4<br />88<br />82<br />80<br />90</th>
</tr>
<tr>
<th>Outputs</th>
<th>89.5</th>
<th>86.8</th>
<th>85</th>
</tr>
</tbody>
</table>
</div>

","from cs110 import autograder
import random

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 5
    num_tests_passed = 0

    for i in range(NUM_TESTS):
        print(""Running Test "" + str(i) + "":"")
        
        num_inputs = random.randint(2, 11)
        inputs = [num_inputs]
        sum = 0
        
        for j in range(num_inputs):
            value = random.randint(70, 130)
            sum += value
            inputs.append(value)
               
        avg = sum / (len(inputs) - 1)   
               
        # Runs the Script
        output, error_message = autograder.run_script(""IterLogic1_averagerun.py"", inputs)
        
        # Extracts the Output
        lines = output.split(""\n"")
        
        if (len(lines) > 0):            
            if (autograder.equals(lines[0], avg)):
                print(""CORRECT\n"")
                num_tests_passed += 1
            else:
                print(""INCORRECT.  Expected: "" + str(avg) + ""\n"")

    # Result
    return (100 / NUM_TESTS) * num_tests_passed
            

# Testbench (to be run on windows)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)




# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
558,Graphics3_soundboard,4,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong>Using PythonGraph, create a ""soundboard"" application. Your program should
    display a list of colored buttons (i.e., rectangles). When the user clicks inside of a rectangle, the program plays
    a different sound.<a href=""https://canvas.instructure.com/courses/1762383/files/86200052/download?download_frd=1""
        data-api-endpoint=""https://canvas.instructure.com/api/v1/courses/1762383/files/86200052""
        data-api-returntype=""File""></a></p>
    <p>The provided template file comes with a single button implemented. Your job is to study this code and create at
        least 5 other buttons. Note: The buttons do not have to be laid out in the same arrangement, but they should
        look organized.</p>
    <p>When you are finished, upload your Python code. Do NOT upload any of the sound files.</p>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""Graphics3_soundboard.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
559,Graphics3_paint,4,lab,0,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Using PythonGraph, create a simple paint application. Your program should draw circles on the window whenever the
        user presses the left mouse button. Your program should also watch for keyboard inputs, and allow the user to
        change colors and the size of the circle by pressing on different keys of your choice.</p>
    <p>The code template of a paint program has been provided to you as a starting point in paint. Use this code and
        make the necessary modifications in the Animation while loop.</p>
    <p>When you are finished, upload your Python code.</p>
</div>","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""Graphics3_paint.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
560,Graphics2_bouncingtriangle,4,lab,0,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong>Using the Bouncing Ball from the previous lab as a starting point, generate an animation of a bouncing triangle. The triangle's vertices should start at random locations, and bounce whenever the triangle hits a wall.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>HINTS</strong>:</p>
<ul>
<li>Try drawing 3 bouncing balls on the screen.</li>
<li>Once the balls are moving correctly, draw 3 lines to connect them!</li>
</ul>
</div>
","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""Graphics2_bouncingtriangle.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,
561,Graphics2_bouncingball,4,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>Using the pythonGraph animation template, create an animation of a bouncing ball. Your ball should start at a random location, and change direction each time it hits a side, top, or bottom of the window.<br /><br /></p>
<p>&nbsp;</p>
<p><strong>CHALLENGE:</strong></p>
<ol>
<li>Try to make the ball change color every time it hits a wall.</li>
</ol>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math, py_compile

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    try:       
        py_compile.compile(""Graphics2_bouncingball.py"", doraise=True)
        print(""Thank you for your submission. Your instructor will let you know if there is a problem."")
        return 100.0
    except:
        print(""There appears to be a syntax error in your code."")
        return 0.0
    
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,
562,FileIO_titanicsurvivor,4,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>This program makes use of the Titanic dataset. Here is a typical line from the file:</p>
<p><code>0,3,Mr. Owen Harris Braund,male,22,1,0,7.25</code></p>
<p><br />As you will undoubtedly recall from class, each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Survived<br />(0=False; 1=True)</th>
<th>Class</th>
<th>Name</th>
<th>Gender</th>
<th>Age</th>
<th>Siblings/Spouses Aboard<br />(0=False; 1=True)</th>
<th>Parents/Children Aboard<br />(0=False; 1=True)</th>
<th>Fare</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>0</th>
<th>3</th>
<th>Mr. Owen Harris Braund</th>
<th>male</th>
<th>22</th>
<th>1</th>
<th>0</th>
<th>7.25</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python algorithm that asks the user for the name of the file containing the titanic dataset. Your program will output the name of the survivor with the lowest fare. Print that person's name in a separate file (named ""result.txt"")</p>
<p>For example, if the survivor's name is Mr. Owen Harris Braund, result.txt should contain the following:</p>
<pre>Mr. Owen Harris Braund<br />7.25</pre>
<p><br /><strong>NOTES:</strong></p>
<ul>
<li>The values used in the above example are purely hypothetical. Your answers will be different.</li>
<li>To thoroughly test your code, we created several subsets of the titanic dataset. Use them when developing/troubleshooting your code.</li>
</ul>
</div>","from cs110 import autograder
import random, math, os.path

lowest_fare = 9999999
lowest_fare_name = ''

def solution(filename):
    global lowest_fare, lowest_fare_name

    file = open(filename, 'r')
    file_contents = file.read()
    lines_in_file = file_contents.split('\n')
    result = ''

    for line in lines_in_file:
        line_components = line.split(',')
        
        survived = line_components[0] == '1'
        name = line_components[2]
        fare = float(line_components[7])
        
        if survived == True:
            if fare < lowest_fare:
                lowest_fare = fare
                lowest_fare_name = name

    file.close()


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
   
    
    # Deletes Result.txt if it already exists
    if (os.path.exists(""result.txt"")):
        os.remove(""result.txt"")
    
    output, error_message = autograder.run_script(""FileIO_titanicsurvivor.py"", [""titanic2.csv""])
    
    # Checks to see if the file was created by the program
    if (not os.path.exists(""result.txt"")):
        print(""result.txt is missing"")
    else:
        solution(""titanic2.csv"")
        
        file = open(""result.txt"", ""r"")
        file_contents = file.read()
        lines = file_contents.strip().split('\n')
        
        if len(lines) < 2:
            print(""ERROR: Missing lines in result.txt file, Expected 2!"")
        else:
            if lines[0] == lowest_fare_name:
                print(""Correct Passenger"")
                score += 50
            else:
                print(""Incorrect Passenger"", lowest_fare_name)
            
            if autograder.equals(lines[1], lowest_fare):
                print(""Correct Lowest Fare"")
                score += 50
            else:
                print(""Incorrect Lowest Fare."", lowest_fare)
    
    return score
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,
563,FileIO_titanicfares,4,lab,0,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>This program makes use of the Titanic dataset. Here is a typical line from the file:</p>
<p><code>0,3,Mr. Owen Harris Braund,male,22,1,0,7.25</code></p>
<p><br />As you will undoubtedly recall from class, each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Survived<br />(0=False; 1=True)</th>
<th>Class</th>
<th>Name</th>
<th>Gender</th>
<th>Age</th>
<th>Siblings/Spouses Aboard<br />(0=False; 1=True)</th>
<th>Parents/Children Aboard<br />(0=False; 1=True)</th>
<th>Fare</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>0</th>
<th>3</th>
<th>Mr. Owen Harris Braund</th>
<th>male</th>
<th>22</th>
<th>1</th>
<th>0</th>
<th>7.25</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python algorithm that asks the user for the name of the file containing some or all of the Titanic dataset, as well as a passenger class (an integer between the values of 1 and 3). Your program should calculate the highest and lowest fare for that passenger class, and print out the result to a file called ""result.txt"".</p>
<p>For example, if the highest and lowest fare for 2nd class is $20 and $8, respectively, your output file should contain:</p>
<pre>20<br />8</pre>
<p><br /><strong>NOTES:</strong></p>
<ul>
<li>The values used in the above example are purely hypothetical. Your answers will be different.</li>
<li>Some passengers in the real dataset (like Jack in the movie Titanic--yes, I've seen it . . . don't judge me) have a fare of $0. To thoroughly test your code, we made a separate dataset (titanic2.csv) that removes these values.</li>
</ul>
</div>","from cs110 import autograder
import random, math, os.path

highest_fare = 0
lowest_fare = 9999999

def solution(filename, passenger_class):
    global highest_fare, lowest_fare

    file = open(filename, 'r')
    file_contents = file.read()
    lines_in_file = file_contents.split('\n')
    result = ''

    for line in lines_in_file:
        line_components = line.split(',')
        
        p_class = int(line_components[1])
        fare = float(line_components[7])
        
        if passenger_class == p_class:
            if fare > highest_fare:
                highest_fare = fare
            if fare < lowest_fare:
                lowest_fare = fare

    file.close()


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    random_passenger_class = random.randint(1, 3)
    
    # Deletes Result.txt if it already exists
    if (os.path.exists(""result.txt"")):
        os.remove(""result.txt"")
    
    output, error_message = autograder.run_script(""FileIO_titanicfares.py"", [""titanic2.csv"", random_passenger_class])
    
    # Checks to see if the file was created by the program
    if (not os.path.exists(""result.txt"")):
        print(""result.txt is missing"")
    else:
        solution(""titanic2.csv"", random_passenger_class)
        
        file = open(""result.txt"", ""r"")
        file_contents = file.read()
        lines = file_contents.strip().split('\n')
        if len(lines) < 2:
            print(""Not enough lines in result.txt"")
        
        if autograder.equals(lines[0], highest_fare):
            print(""Correct Highest Fare"")
            score += 50
        else:
            print(""Incorrect Highest Fare.  Expected:"", highest_fare)
        
        if autograder.equals(lines[1], lowest_fare):
            print(""Correct Lowest Fare"")
            score += 50
        else:
            print(""Incorrect Lowest Fare.  Expected:"", lowest_fare)
    
    return score
    

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)














# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,1,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,
564,FileIO_survivors_by_gender,4,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>This program makes use of the Titanic dataset. Here is a typical line from the file:</p>
<p><code>0,3,Mr. Owen Harris Braund,male,22,1,0,7.25</code></p>
<p><br />As you will undoubtedly recall from class, each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Survived<br />(0=False; 1=True)</th>
<th>Class</th>
<th>Name</th>
<th>Gender</th>
<th>Age</th>
<th>Siblings/Spouses Aboard<br />(0=False; 1=True)</th>
<th>Parents/Children Aboard<br />(0=False; 1=True)</th>
<th>Fare</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>0</th>
<th>3</th>
<th>Mr. Owen Harris Braund</th>
<th>male</th>
<th>22</th>
<th>1</th>
<th>0</th>
<th>7.25</th>
</tr>
</tbody>
</table>
<p><br /><br />Write a Python algorithm that asks the user for the name of the file containing the titanic dataset, and counts how many males/females survived. Your program should print out each answer to a file called ""result.txt"".</p>
<p>For example, if 400 men, and 700 women survived, your output file should contain:<br />400<br />700</p>
<p>&nbsp;</p>
<p><strong>NOTE: When you print to a file, make sure you put a new line at the end of each answer!</strong></p>
</div>","from cs110 import autograder
import random, math, os.path

num_males = 0
num_females = 0

def solution(filename):
    global num_males, num_females

    input_file = open(filename, ""r"")
    contents = input_file.read()
    lines = contents.split(""\n"")

    for line in lines:
        line_components = line.split(',')
        
        if line_components[0] == '1' and line_components[3] == 'male':
            num_males += 1
        if line_components[0] == '1' and line_components[3] == 'female':
            num_females += 1

    input_file.close()


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    
    # Deletes Result.txt if it already exists
    if (os.path.exists(""result.txt"")):
        os.remove(""result.txt"")
    
    output, error_message = autograder.run_script(""FileIO_survivors_by_gender.py"", [""titanic.csv""])
    
    # Checks to see if the file was created by the program
    if (not os.path.exists(""result.txt"")):
        print(""result.txt is missing"")
    else:
        solution(""titanic.csv"")
        
        file = open(""result.txt"", ""r"")
        file_contents = file.read()
        lines = file_contents.strip().split('\n')
        if len(lines) < 2:
            print(""Not enough lines in result.txt"")
        else:    
            if autograder.equals(lines[0], num_males):
                print(""Correct Number of Males:"")
                score += 50
            else:
                print(""Incorrect Number of Males"")
            
            if autograder.equals(lines[1], num_females):
                print(""Correct Number of Females"")
                score += 50
            else:
                print(""Incorrect Number of Females"")
    
    return score
    
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
















# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,0,1,1,0,0,0,0,0,
565,FileIO_runways,4,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>This program makes use of the Runways dataset. Here is a typical line from the file:</p>
<p>&nbsp;</p>
<p><code>17245.8*A ND17/35, RICKETYBACK FIELD, 2600, 100, TURF</code></p>
<p>&nbsp;</p>
<p><br />Each position in the line represents a different ""data element"". Here is a key for your reference:</p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Location ID</th>
<th>Name</th>
<th>Runway Length (in feet)</th>
<th>Runway Width (in feet)</th>
<th>Runway Type</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>17245.8*A ND17/35</th>
<th>RICKETYBACK FIELD</th>
<th>2600</th>
<th>100</th>
<th>TURF</th>
</tr>
</tbody>
</table>
<p><br /><br />Write a Python program that asks the user for the name of the file containing the Runways dataset, as well as the length and width of the runway. Your program should print the Location ID of every runway whose length and width meets or exceeds the specified values.</p>
<p>For example, if the user types 4000 and 100 for length and width, respectively, your program should output:</p>
<pre>17265.<em>A ND03/21<br />17265.</em>A ND13/31<br />17302.<em>A ND13/31<br />17304.</em>A ND14/32<br />17367.<em>A ND13/31<br />17417.5</em>A ND11/29<br />17418.<em>A ND08/26<br />17418.</em>A ND13/31<br />17328.<em>A ND09/27<br />17328.</em>A ND18/36<br />17347.<em>A ND08/26<br />17349.1</em>A ND08/26<br />17349.1<em>A ND17R/3<br />17496.1</em>A ND11/29</pre>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def solution(filename, length, width):
    file = open(filename, 'r')
    file_contents = file.read()
    lines_in_file = file_contents.split('\n')
    result = ''

    for line in lines_in_file:
        columns = line.split(',')
        if length <= float(columns[2]) and width <= float(columns[3]):
            result += columns[0] + ""\n""

    file.close()
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_length = random.randint(3000, 4000)
    random_width = random.randint(100, 200)
    
    output, error_message = autograder.run_script(""FileIO_runways.py"", [""runways.csv"", random_length, random_width])
    expected_output = solution(""runways.csv"", random_length, random_width)
    
    lines = output.strip().split('\n')
    expected_lines = expected_output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_lines)
    
    if num_matches == len(lines):
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT"")
        return 0.0
        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)














# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,0,1,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,
566,FileIO_echo,4,lab,0,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write a program that asks the user to type the name of a file (e.g., ""file.txt""), and a letter. Your program should then open the file, and print out all of the lines where the first character starts with the letter</p>
<p>For example, if the user types the following filename:</p>
<pre><code>input1.txt
a
</code></pre>
<p>and the contents of input1.txt are:</p>
<pre><code>aspiration
classified
federation
</code></pre>
<p>the output should be:</p>
<pre><code>aspiration
</code></pre>
<p>&nbsp;</p>
<p>Notes:</p>
<ul>
<li>Each line ends with the '\n' character. Use&nbsp;<code>split()</code>&nbsp;to get each line.</li>
<li>Refer to the String Functions slide to see how you can get the first character from a string</li>
</ul>
</div>","from cs110 import autograder
import random, math

def solution(filename, letter):
    result = ''
    
    file = open(filename, ""r"")
    contents = file.read()
    lines = contents.split(""\n"")

    for line in lines:
        if line[0] == letter:
            result += line + ""\n""

    file.close()

    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    random_letter = chr(random.randint(97, 122))
    
    output, error_message = autograder.run_script(""FileIO_echo.py"", [""file.txt"", random_letter])
    expected_output = solution(""file.txt"", random_letter)
    
    lines = output.strip().split('\n')
    expected_lines = expected_output.strip().split('\n')
    
    num_matches = autograder.compare_strings(lines, expected_lines)
    
    if num_matches == len(lines):
        print(""CORRECT"")
        return 100.0
    else:
        print(""INCORRECT"")
        return 0.0
        

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)














# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,
567,a3_7_minpower,4,lab,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset called&nbsp;<code>powerplants.csv</code>&nbsp;that contains information about various power production facilities across the nation. Here is a typical line from the dataset (each line ends with the newline &ldquo;\n&rdquo; character):</p>
<p>&nbsp;</p>
<p><code>-121.8601395, 38.01598436, 19, GWFPW2_1_UNIT 1, SteamTurbine</code></p>
<p>&nbsp;</p>
<p>Each position in the line (separated by a comma) represents a different &ldquo;data element,&rdquo; or &ldquo;column.&rdquo; The following table shows how the above line can be interpreted:<br /><br /></p>
<table border=""2"">
<thead>
<tr>
<th>&nbsp;</th>
<th>Longitude</th>
<th>Latitude</th>
<th>Power Output (in MW)</th>
<th>Name</th>
<th>Power Generation Method</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>-<strong>121.8601395</strong></th>
<th>38.01598436</th>
<th>19</th>
<th>GWFPW2<em>1</em>UNIT 1</th>
<th>SteamTurbine</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python program that asks the user for:</p>
<ul>
<li>A power generation method (e.g., &ldquo;SteamTurbine&rdquo;)</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then read the file and print on separate lines:</p>
<ul>
<li>The minimum power output for power plants of this particular type, and</li>
<li>The names of all power plants that are of this <strong>particular type</strong>, and within 1 MW (inclusive) of the minimum power output</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td>Input</td>
<td>
<p>Other</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>0.53<br />ELNIDS_2_DODPEV</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def solution(power_generation_type):
    file = open(""powerplants.csv"", 'r')
    contents = file.read()
    lines_in_file = contents.split('\n')
    result = []

    table_of_power_plants = []

    for current_line in lines_in_file:
        columns = current_line.split(',')
        power_mw = float(columns[2])
        power_name = columns[3]
        power_type = columns[4]
        
        if power_type == power_generation_type:
            table_of_power_plants.append([power_mw, power_name])

    min_mw = min(table_of_power_plants)

    result.append(str(min_mw[0]))

    for row in table_of_power_plants:
        if row[0] <= min_mw[0] + 1:
            result.append(row[1])
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 3
    num_min_correct = 0
    num_min_names = 0
    
    types_to_test = ['Other', 'SteamTurbine', 'GasTurbine', 'CombinedCycle', 'HydraulicTurbine']
    
    for i in range(NUM_TESTS):
        power_type = types_to_test[random.randint(0, len(types_to_test)-1)]
        types_to_test.remove(power_type)
        
        print(""-------------------------"")
        print(""Test"", i+1, ""of"", NUM_TESTS, "":"", power_type)
        print(""-------------------------"")
        
        output, error = autograder.run_script(""a3_7_minpower.py"", [power_type])
        expected_output = solution(power_type)
        student_output = output.strip().split('\n')

        # Determines if the stat is correct
        print(""CHECKING MIN VALUE:"")
        if autograder.equals(student_output[0], expected_output[0]):
            print(""CORRECT\n"")
            num_min_correct += 1
        else:
            print(""INCORRECT\n"")

        # Determines if the names are correct
        print(""CHECKING PLANT NAMES:"")
        num_matches = 0
        
        for item in expected_output[1:]:
            print(""Looking for"", item, "". . . "", end="""")
            if item in student_output[1:]:
                print(""FOUND"")
                num_matches += 1
            else:
                print(""NOT FOUND"")            
        
        if num_matches == len(expected_output[1:]) and len(student_output[1:]) == len(expected_output[1:]):
            print(""CORRECT\n"")
            num_min_names += 1
        elif num_matches == len(expected_output[1:]) and len(student_output[1:]) >= len(expected_output[1:]):
            print(""INCORRECT.  Your program is printing more power plant names than are expected.\n"") 
        else:
            print(""INCORRECT.  Missing"", str(len(expected_output[1:]) - num_matches), ""plant names"")
            
    return round(60 * (num_min_correct / NUM_TESTS) + 40 * (num_min_names / NUM_TESTS), 1)
    

    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
568,a3_7_min_lego,4,lab,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset called <code>legos.csv</code>&nbsp;that contains information about various Lego sets. Here is a typical line from the dataset (each line ends with the newline &ldquo;\n&rdquo; character):</p>
<p>&nbsp;</p>
<p><code>10197-1,Fire Brigade,2009,City,2236</code></p>
<p>&nbsp;</p>
<p>Each position in the line (separated by a comma) represents a different &ldquo;data element,&rdquo; or &ldquo;column.&rdquo; The following table shows how the above line can be interpreted:<br /><br /></p>
<table border=""2"">
<thead>
<tr>
<th>&nbsp;</th>
<th>Set Number</th>
<th>Name</th>
<th>Year</th>
<th>Theme</th>
<th>Number of Parts</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>10197-1</th>
<th>Fire Brigade</th>
<th>2009</th>
<th>City</th>
<th>2236</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python program that asks the user for:</p>
<ul>
<li>A Theme (e.g., ""City"")</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then read the file and print on separate lines:</p>
<ul>
<li>The minimum number of parts in a set of the given theme, and</li>
<li>The names of all Lego sets that are of this <strong>particular theme</strong>, and within 14 (inclusive) of the minimum part count</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td>Input</td>
<td>
<p>Duplo</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>
<p>1<br />Zoo friends</p>
<p>Big Front Loader</p>
<p>Baby Calf</p>
<p>Farm Animals</p>
<p>...</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def solution(set_theme):
    file = open(""legos.csv"", 'r')
    contents = file.read()
    lines_in_file = contents.split('\n')
    result = []

    table_of_lego_sets = []

    for current_line in lines_in_file:
        columns = current_line.split(',')
        set_part_count = float(columns[4])
        set_name = columns[1]
        curr_set_theme = columns[3]
        
        if curr_set_theme == set_theme:
            table_of_lego_sets.append([set_part_count, set_name])

    min_set_count = min(table_of_lego_sets)

    result.append(str(min_set_count[0]))

    for row in table_of_lego_sets:
        if row[0] <= min_set_count[0] + 14:
            result.append(row[1])
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 3
    num_max_correct = 0
    num_max_names = 0
    
    types_to_test = [""Model"", ""Technic"", ""City"", ""Town"", ""Vehicle"", ""Space"", ""Star Wars"", ""Seasonal"", ""Educational"", ""Bionicle""]
    
    for i in range(NUM_TESTS):
        lego_theme = types_to_test[random.randint(0, len(types_to_test)-1)]
        types_to_test.remove(lego_theme)
        
        print(""-------------------------"")
        print(""Test"", i+1, ""of"", NUM_TESTS, "":"", lego_theme)
        print(""-------------------------"")
        
        output, error = autograder.run_script(""a3_7_min_lego.py"", [lego_theme])
        expected_output = solution(lego_theme)
        student_output = output.strip().split('\n')
                
        # Determines if the stat is correct
        print(""CHECKING MIN VALUE:"")
        if autograder.equals(student_output[0], expected_output[0]):
            print(""CORRECT\n"")
            num_max_correct += 1
        else:
            print(""INCORRECT\n"")
        
        # Determines if the names are correct
        print(""CHECKING LEGO SET NAMES:"")
        num_matches = 0
        
        for item in expected_output[1:]:
            print(""Looking for"", item, "". . . "", end="""")
            if item in student_output[1:]:
                print(""FOUND"")
                num_matches += 1
            else:
                print(""NOT FOUND"")            
        
        if num_matches == len(expected_output[1:]) and len(student_output[1:]) == len(expected_output[1:]):
            print(""CORRECT\n"")
            num_max_names += 1
        elif num_matches == len(expected_output[1:]) and len(student_output[1:]) >= len(expected_output[1:]):
            print(""INCORRECT.  Your program is printing more Lego set names than are expected.\n"") 
        else:
            print(""INCORRECT.  Missing"", str(len(expected_output[1:]) - num_matches), ""Lego set names"")
            
            
    return round(60 * (num_max_correct / NUM_TESTS) + 40 * (num_max_names / NUM_TESTS), 1)
    

    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
569,a3_7_maxpower,4,lab,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset called&nbsp;<code>powerplants.csv</code>&nbsp;that contains information about various power production facilities across the nation. Here is a typical line from the dataset (each line ends with the newline &ldquo;\n&rdquo; character):</p>
<p>&nbsp;</p>
<p><code>-121.8601395, 38.01598436, 19, GWFPW2_1_UNIT 1, SteamTurbine</code></p>
<p>&nbsp;</p>
<p>Each position in the line (separated by a comma) represents a different &ldquo;data element,&rdquo; or &ldquo;column.&rdquo; The following table shows how the above line can be interpreted:<br /><br /></p>
<table>
<thead>
<tr>
<th>&nbsp;</th>
<th>Longitude</th>
<th>Latitude</th>
<th>Power Output (in MW)</th>
<th>Name</th>
<th>Power Generation Method</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>-<strong>121.8601395</strong></th>
<th>38.01598436</th>
<th>19</th>
<th>GWFPW2<em>1</em>UNIT 1</th>
<th>SteamTurbine</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python program that asks the user for:</p>
<ul>
<li>A power generation method (e.g., &ldquo;SteamTurbine&rdquo;)</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then read the file and print on separate lines:</p>
<ul>
<li>The maximum power output for power plants of this particular type, and</li>
<li>The names of all power plants that are of this <strong>particular type</strong>, and within 15 MW (inclusive) of the maximum power output</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td>Input</td>
<td>
<p>SteamTurbine</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>1164.0<br />DIABLO_7_UNIT 1<br />DIABLO_7_UNIT 2</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def solution(power_generation_type):
    file = open(""powerplants.csv"", 'r')
    contents = file.read()
    lines_in_file = contents.split('\n')
    result = []

    table_of_power_plants = []

    for current_line in lines_in_file:
        columns = current_line.split(',')
        power_mw = float(columns[2])
        power_name = columns[3]
        power_type = columns[4]
        
        if power_type == power_generation_type:
            table_of_power_plants.append([power_mw, power_name])

    max_mw = max(table_of_power_plants)

    result.append(str(max_mw[0]))

    for row in table_of_power_plants:
        if row[0] >= max_mw[0] - 15:
            result.append(row[1])
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 3
    num_max_correct = 0
    num_max_names = 0
    
    types_to_test = ['Other', 'SteamTurbine', 'GasTurbine', 'CombinedCycle', 'HydraulicTurbine']
    
    for i in range(NUM_TESTS):
        power_type = types_to_test[random.randint(0, len(types_to_test)-1)]
        types_to_test.remove(power_type)
        
        print(""-------------------------"")
        print(""Test"", i+1, ""of"", NUM_TESTS, "":"", power_type)
        print(""-------------------------"")
        
        output, error = autograder.run_script(""a3_7_maxpower.py"", [power_type])
        expected_output = solution(power_type)
        student_output = output.strip().split('\n')
                
        # Determines if the stat is correct
        print(""CHECKING MAX VALUE:"")
        if autograder.equals(student_output[0], expected_output[0]):
            print(""CORRECT\n"")
            num_max_correct += 1
        else:
            print(""INCORRECT\n"")
        
        # Determines if the names are correct
        print(""CHECKING PLANT NAMES:"")
        num_matches = 0
        
        for item in expected_output[1:]:
            print(""Looking for"", item, "". . . "", end="""")
            if item in student_output[1:]:
                print(""FOUND"")
                num_matches += 1
            else:
                print(""NOT FOUND"")            
        
        if num_matches == len(expected_output[1:]) and len(student_output[1:]) == len(expected_output[1:]):
            print(""CORRECT\n"")
            num_max_names += 1
        elif num_matches == len(expected_output[1:]) and len(student_output[1:]) >= len(expected_output[1:]):
            print(""INCORRECT.  Your program is printing more power plant names than are expected.\n"") 
        else:
            print(""INCORRECT.  Missing"", str(len(expected_output[1:]) - num_matches), ""plant names"")
            
    return round(60 * (num_max_correct / NUM_TESTS) + 40 * (num_max_names / NUM_TESTS), 1)
    
# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
570,a3_7_max,4,lab,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset called&nbsp;<code>powerplants.csv</code>&nbsp;that contains information about various power production facilities across the nation. Here is a typical line from the dataset (each line ends with the newline &ldquo;\n&rdquo; character):</p>
<p>&nbsp;</p>
<p><code>-121.8601395, 38.01598436, 19, GWFPW2_1_UNIT 1, SteamTurbine</code></p>
<p>&nbsp;</p>
<p>Each position in the line (separated by a comma) represents a different &ldquo;data element,&rdquo; or &ldquo;column.&rdquo; The following table shows how the above line can be interpreted:<br /><br /></p>
<table border=""2"">
<thead>
<tr>
<th>&nbsp;</th>
<th>Longitude</th>
<th>Latitude</th>
<th>Power Output (in MW)</th>
<th>Name</th>
<th>Power Generation Method</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>-<strong>121.8601395</strong></th>
<th>38.01598436</th>
<th>19</th>
<th>GWFPW2<em>1</em>UNIT 1</th>
<th>SteamTurbine</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python program that asks the user for:</p>
<ul>
<li>A power generation method (e.g., &ldquo;SteamTurbine&rdquo;)</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then read the file and print on separate lines:</p>
<ul>
<li>The maximum power output for power plants of this particular type, and</li>
<li>The names of all power plants that are of this <strong>particular type</strong>, and within 8 MW (inclusive) of the maximum power output</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td>Input</td>
<td>
<p>SteamTurbine</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>1164.0<br />DIABLO_7_UNIT 1<br />DIABLO_7_UNIT 2</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def solution(power_generation_type):
    file = open(""powerplants.csv"", 'r')
    contents = file.read()
    lines_in_file = contents.split('\n')
    result = []

    table_of_power_plants = []

    for current_line in lines_in_file:
        columns = current_line.split(',')
        power_mw = float(columns[2])
        power_name = columns[3]
        power_type = columns[4]
        
        if power_type == power_generation_type:
            table_of_power_plants.append([power_mw, power_name])

    max_mw = max(table_of_power_plants)

    result.append(str(max_mw[0]))

    for row in table_of_power_plants:
        if row[0] >= max_mw[0] - 8:
            result.append(row[1])
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 3
    num_max_correct = 0
    num_max_names = 0
    
    types_to_test = ['Other', 'SteamTurbine', 'GasTurbine', 'CombinedCycle', 'HydraulicTurbine']
    
    for i in range(NUM_TESTS):
        power_type = types_to_test[random.randint(0, len(types_to_test)-1)]
        types_to_test.remove(power_type)
        
        print(""-------------------------"")
        print(""Test"", i+1, ""of"", NUM_TESTS, "":"", power_type)
        print(""-------------------------"")
        
        output, error = autograder.run_script(""a3_7_max.py"", [power_type])
        expected_output = solution(power_type)
        student_output = output.strip().split('\n')
                
        # Determines if the stat is correct
        print(""CHECKING MAX VALUE:"")
        if autograder.equals(student_output[0], expected_output[0]):
            print(""CORRECT\n"")
            num_max_correct += 1
        else:
            print(""INCORRECT\n"")
        
        # Determines if the names are correct
        print(""CHECKING PLANT NAMES:"")
        num_matches = 0
        
        for item in expected_output[1:]:
            print(""Looking for"", item, "". . . "", end="""")
            if item in student_output[1:]:
                print(""FOUND"")
                num_matches += 1
            else:
                print(""NOT FOUND"")            
        
        if num_matches == len(expected_output[1:]) and len(student_output[1:]) == len(expected_output[1:]):
            print(""CORRECT\n"")
            num_max_names += 1
        elif num_matches == len(expected_output[1:]) and len(student_output[1:]) >= len(expected_output[1:]):
            print(""INCORRECT.  Your program is printing more power plant names than are expected.\n"") 
        else:
            print(""INCORRECT.  Missing"", str(len(expected_output[1:]) - num_matches), ""plant names"")
            
            
    return round(60 * (num_max_correct / NUM_TESTS) + 40 * (num_max_names / NUM_TESTS), 1)
    

    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
571,a3_7_max_lego,4,lab,1,"<div>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a dataset called <code>legos.csv</code>&nbsp;that contains information about various Lego sets. Here is a typical line from the dataset (each line ends with the newline &ldquo;\n&rdquo; character):</p>
<p>&nbsp;</p>
<p><code>10197-1,Fire Brigade,2009,City,2236</code></p>
<p>&nbsp;</p>
<p>Each position in the line (separated by a comma) represents a different &ldquo;data element,&rdquo; or &ldquo;column.&rdquo; The following table shows how the above line can be interpreted:<br /><br /></p>
<table border=""2"">
<thead>
<tr>
<th>&nbsp;</th>
<th>Set Number</th>
<th>Name</th>
<th>Year</th>
<th>Theme</th>
<th>Number of Parts</th>
</tr>
</thead>
<tbody>
<tr>
<th>Value</th>
<th>10197-1</th>
<th>Fire Brigade</th>
<th>2009</th>
<th>City</th>
<th>2236</th>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Write a Python program that asks the user for:</p>
<ul>
<li>A Theme (e.g., ""City"")</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then read the file and print on separate lines:</p>
<ul>
<li>The maximum number of parts in a set of the given theme, and</li>
<li>The names of all Lego sets that are of this <strong>particular theme</strong>, and within 150 (inclusive) of the maximum part count</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
</tr>
<tr>
<td>Input</td>
<td>
<p>Duplo</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>
<p>250</p>
<p>XXL 250 Canister</p>
<p>Giant Tower</p>
<p>Large Creative Box</p>
<p>Around the World</p>
<p>...</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def solution(set_theme):
    file = open(""legos.csv"", 'r')
    contents = file.read()
    lines_in_file = contents.split('\n')
    result = []

    table_of_lego_sets = []

    for current_line in lines_in_file:
        columns = current_line.split(',')
        set_part_count = float(columns[4])
        set_name = columns[1]
        curr_set_theme = columns[3]
        
        if curr_set_theme == set_theme:
            table_of_lego_sets.append([set_part_count, set_name])

    max_set_count = max(table_of_lego_sets)

    result.append(str(max_set_count[0]))

    for row in table_of_lego_sets:
        if row[0] >= max_set_count[0] - 150:
            result.append(row[1])
    
    return result


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    NUM_TESTS = 3
    num_max_correct = 0
    num_max_names = 0
    
    types_to_test = [""Model"", ""Technic"", ""City"", ""Town"", ""Vehicle"", ""Space"", ""Star Wars"", ""Seasonal"", ""Educational"", ""Bionicle""]
    
    for i in range(NUM_TESTS):
        lego_theme = types_to_test[random.randint(0, len(types_to_test)-1)]
        types_to_test.remove(lego_theme)
        
        print(""-------------------------"")
        print(""Test"", i+1, ""of"", NUM_TESTS, "":"", lego_theme)
        print(""-------------------------"")
        
        output, error = autograder.run_script(""a3_7_max_lego.py"", [lego_theme])
        expected_output = solution(lego_theme)
        student_output = output.strip().split('\n')
                
        # Determines if the stat is correct
        print(""CHECKING MAX VALUE:"")
        if autograder.equals(student_output[0], expected_output[0]):
            print(""CORRECT\n"")
            num_max_correct += 1
        else:
            print(""INCORRECT\n"")
        
        # Determines if the names are correct
        print(""CHECKING LEGO SET NAMES:"")
        num_matches = 0
        
        for item in expected_output[1:]:
            print(""Looking for"", item, "". . . "", end="""")
            if item in student_output[1:]:
                print(""FOUND"")
                num_matches += 1
            else:
                print(""NOT FOUND"")            
        
        if num_matches == len(expected_output[1:]) and len(student_output[1:]) == len(expected_output[1:]):
            print(""CORRECT\n"")
            num_max_names += 1
        elif num_matches == len(expected_output[1:]) and len(student_output[1:]) >= len(expected_output[1:]):
            print(""INCORRECT.  Your program is printing more Lego set names than are expected.\n"") 
        else:
            print(""INCORRECT.  Missing"", str(len(expected_output[1:]) - num_matches), ""Lego set names"")
            
            
    return round(60 * (num_max_correct / NUM_TESTS) + 40 * (num_max_names / NUM_TESTS), 1)
    

    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,0,0,
572,a3_6_tests,4,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been asked to write a program that analyzes scores of a recent test given to a class. Write a program that gets from the user the number of tests scored, and gets that many test scores (which you may assume are whole numbers) from the user. Your program must print out:</p>
<ul>
<li>The average score of all tests.</li>
<li>The count of tests that scored lower than the average.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>3<br />75<br />90<br />88<br /><br /><br /></td>
<td>5<br />86<br />79<br />90<br />90<br />100</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>84.3<br />1</td>
<td>89.0<br />2</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_tests.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    print('-----------------------------')

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
573,a3_6_situps,4,lab,1,"<div><strong>PROBLEM STATEMENT:<br></strong>You have been asked to write a program that analyzes the number of situps done by a group of cadets.&nbsp; Write a program that gets from the user the number of people tested, and gets that many situp scores (which you may assume are whole numbers) from the user.&nbsp; Your program must print out:</p>
<ul>
<li>The average number of situps for the group.</li>
<li>The count of cadets that scored higher than the average.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table style=""border-collapse: collapse; width: 40%; margin-left: auto; margin-right: auto;"" border=""1"">
<tbody>
<tr>
<td></td>
<td style=""text-align: center;""><strong>Example 1</strong></td>
<td style=""text-align: center;""><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td style=""text-align: center;"">3<br>75<br>90<br>88<br><br><br></td>
<td style=""text-align: center;"">5<br>86<br>79<br>90<br>90<br>100</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td style=""text-align: center;"">84.3<br>2</td>
<td style=""text-align: center;"">89.0<br>3</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_situps.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""situps"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
            
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0
    
    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)
    
    print('-----------------------------')

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (10%) -- scores exist that exactly match average
    weight = 10.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
574,a3_6_sami,4,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been asked to write a program that analyzes the cadet wing's performance on a recent SAMI. Write a program that gets from the user the number of squadrons scored, and gets that many squadron SAMI scores (which you may assume are whole numbers) from the user. Your program must print out:</p>
<ul>
<li>The average score of all squadrons.</li>
<li>The count of squadrons that scored higher than the average.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>3<br />75<br />90<br />88<br /><br /><br /></td>
<td>5<br />86<br />79<br />90<br />90<br />100</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>84.3<br />2</td>
<td>89.0<br />3</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_sami.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    print('-----------------------------')

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
575,a3_6_pushups,4,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been asked to write a program that analyzes number of pushups done by a group of cadets. Write a program that gets from the user the number of people tested, and gets that many pushup scores (which you may assume are whole numbers) from the user. Your program must print out:</p>
<ul>
<li>The average number of pushups for the group.</li>
<li>The count of cadets that scored higher than the average.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>3<br />75<br />90<br />88<br /><br /><br /></td>
<td>5<br />86<br />79<br />90<br />90<br />100</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>84.3<br />2</td>
<td>89.0<br />3</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_pushups.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    print('-----------------------------')

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
576,a3_6_missiletest,4,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been asked to write a program that analyzes the results acquired from several missile tests executed last week. Write a program that gets from the user the number missile tests preformed, and gets the result from each test (which you may assume are whole numbers) from the user. Your program must print out:</p>
<ul>
<li>The average result for the missile tests.</li>
<li>The count of missile tests that scored above the average.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>3<br />350<br />410<br />256<br /><br /><br /></td>
<td>5<br />178<br />98<br />200<br />200<br />154</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>338.7<br />2</td>
<td>166.0<br />3</td>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_missiletest.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
        if base_script == ""flighttest"" and score < average:
            count += 1
        if base_script == ""missiletest"" and score > average:
            count += 1
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    print('-----------------------------')

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
577,a3_6_flighttest,4,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been asked to write a program that analyzes the results acquired from several flight tests executed last week. Write a program that gets from the user the number flight tests preformed, and gets the result from each flight (which you may assume are whole numbers) from the user. Your program must print out:</p>
<ul>
<li>The average result for the flight tests.</li>
<li>The count of flight tests that scored below the average.</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>3<br />350<br />410<br />256<br /><br /><br /></td>
<td>5<br />178<br />98<br />200<br />200<br />154</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>338.7<br />1</td>
<td>166.0<br />2</td>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random, math

def script_name():
    return ""a3_6_flighttest.py""

# There should be two outputs:
#    The average followed by a count.
# The test cases should be constructed so that:
#    The average is >= 30
#    The count   is <= 20

# AUTOGRADER RUBRIC for scoring one test:

# Number of outputs (10 pt):
# 10 pt Output consists of exactly two values
#  5 pt Output consists of one value or more than two values
#  0 pt Output consists of either zero

# Output of average (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 0.1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 0.1 but is not first value in list

# Output of count (45 pt):
# 45 pt Exactly correct and is first value in list
# 30 pt Within 1 and is first value in list
# 30 pt Exactly correct but is not first value in list
# 15 pt Within 1 but is not first value in list

def base_name(name_of_script):
    return (name_of_script.split('.')[0]).split('_')[2]

def solution(input_list):

    # Input is a count followed by that many values
    # Create a list of just the values
    items_list = input_list[1:]
    
    # Determine the average of the values
    average = sum(items_list) / len(items_list)
    
    # Count the number of items that meet the criteria
    # This depends on the specific variant of the problem
    base_script = base_name(script_name())
    count = 0
    for score in items_list:
        if base_script == ""pushups"" and score > average:
            count += 1
        if base_script == ""sami"" and score > average:
            count += 1
        if base_script == ""tests"" and score < average:
            count += 1
        if base_script == ""flighttest"" and score < average:
            count += 1
        
    
    # Output is average (rounded to 1 decimal place) and count 
    return [str(round(average,1)), str(count)]

def is_value(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
# Returns the position and distance of the closes user value from the solution value.
# Returns found=False if list from user contains no numeric values
def matchup_numeric(value, from_user):
    value = float(value)
    found = False
    position = -1
    within = 1E10
    for i in range(len(from_user)):
        item = from_user[i]
        if is_value(item):
            found = True
            user_value = float(item)
            distance = abs(value - user_value)
            if  distance < within:
                within = distance
                position = i 
                
    return (found, position, within)

def decimal_places(float_string):
    if is_value(float_string):
        decimal_point_index = float_string.find('.')
        if decimal_point_index == -1:
            return 0
        else:
            return len(float_string) - (decimal_point_index + 1)
    else:
        return -1
    
def grade_item(name, correct_position, places, tolerance, from_soln, from_user):
    score = 0
    
    value_from_soln = from_soln[correct_position]
    
    (found, position, within) = matchup_numeric(value_from_soln, from_user)
    if not found:
        print(name, ""not found.  Expected: "", value_from_soln)
        score += 0
    else:
        place_penalty = 0
        if   (position == correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct."")
            score += 45 - place_penalty
        elif (position == correct_position) and (within <= tolerance[1]):
            print(name, ""is close.  Expected: "", value_from_soln)
            score += 30 - place_penalty
        elif (position != correct_position) and (within <= tolerance[0]):
            print(name, ""appears correct, but in wrong position."")
            score += 30 - place_penalty
        elif  (position != correct_position) and (within <= tolerance[1]):
            print(name, ""is close, but in wrong position.  Expected: "", value_from_soln)
            score += 15 - place_penalty
        else:
            print(name, ""is not close and probably in wrong position.  Expected: "", value_from_soln)
            score += 0
    return score            

def run_1_test(script_being_tested, input_list):

    (output, error) = autograder.run_script(script_being_tested, input_list)
    lines = output.strip().split('\n')
    expected_output = solution(input_list)
    
    score = 0

    # Number of outputs
    if len(lines) == 2:
        print(""Number of output lines is correct."")
        score += 10
    elif len(lines) == 1:
        print(""Number of output lines is not quite correct."")
        score += 5
    else:
        print(""Number of output lines is not correct."")
        score += 0

    score += grade_item(""Average"", 0, 1, [0.1, 10], expected_output, lines)
    score += grade_item(""Count"", 1, 0, [0, 1], expected_output, lines)

    print('-----------------------------')

    return score

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    script_being_tested = script_name()
    score = 0
    cum_weight = 0.0

    # Corner Case #1 (5%) -- only a single score
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0
    
    random_people = 1
    input_list = [random_people]
        
    for i in range(random_people):
        random_score = random.randint(30, 100)
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #2 (5%) -- multiple all scores that are all the same
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(5, 10)
    input_list = [random_people]
        
    random_score = random.randint(30, 100)
    for i in range(random_people):
        input_list.append(random_score)
    
    score += weight * run_1_test(script_being_tested, input_list)

    # Corner Case #3 (5%) -- scores exist that exactly match average
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100.0

    random_people = random.randint(7,15)
    input_list = [random_people]
        
    random_mean = random.randint(50, 70)
    
    for i in range(random_people % 3):
        input_list.append(random_mean)
        
    for i in range(random_people // 3):
        random_step = random.randint(3,20)
        input_list.append(random_mean)
        input_list.append(random_mean + random_step)
        input_list.append(random_mean - random_step)
    
    score += weight * run_1_test(script_being_tested, input_list)
    
    #Corner Case # 4 makes sure students are rounding to one decimal place
    weight = 5.0
    runs = 1
    cum_weight += runs * weight
    weight /= runs * 100
    
    input_list = [17,82,98,100,42,95,45,93,71,91,39,65,82,46,77,56,67,44]
    rounding_score = run_1_test(script_being_tested, input_list)
    score += weight * rounding_score
    
    # General Case (80%) -- 4 runs @ 20% each
    runs = 2
    weight = (100.0 - cum_weight)
    weight /= runs * 100.0

    
    for run in range(runs):
        random_people = random.randint(2, 20)
        input_list = [random_people]
            
        for i in range(random_people):
            random_score = random.randint(30, 100)
            input_list.append(random_score)
        
        score += weight * run_1_test(script_being_tested, input_list)
    score = min([score,rounding_score])
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,0,0,0,
578,a3_5_map,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a table that describes a simple landscape. In this code, a list (<code>simple_map</code>) is populated with characters representing the location of various landmarks (Road, Water, Trees, Stones, Mud).</p>
<p>&nbsp;</p>
<pre>R = Road; W = Water; T = Trees; S = Stones; M = Mud; _ = Grass</pre>
<p>&nbsp;</p>
<p>Write a program that gets two values from the user in the following order:</p>
<p>1) a row, a 1 indicates the Top row and 8 the Bottom row</p>
<p>2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column</p>
<p>&nbsp;</p>
<p>Finally,&nbsp;<strong>Print&nbsp;</strong>out the contents of the table at that particular cell.</p>
<p>&nbsp;</p>
<p> </p>
<p><strong>HINT:</strong></p>
<ul>
<li>Your output should be one of the following letters: ""R"", ""W"", ""T"", ""S"", ""M"", or ""_""</li>
</ul>
</div>
","import random
from cs110 import autograder

## EDITED 15 MAR 2022 by Capt Ben McGraw

simple_map = [['_', 'T', '_', '_', '_', 'R', '_', '_'],
              ['_', '_', 'T', 'S', 'B', 'R', '_', '_'],
              ['W', '_', '_', '_', '_', '_', 'R', '_'],
              ['W', 'W', 'S', '_', '_', 'B', '_', '_'],
              ['W', '_', '_', 'S', '_', '_', 'B', 'R'],
              ['_', '_', '_', '_', '_', 'T', '_', '_'],
              ['_', '_', '_', '_', '_', '_', 'T', '_'],
              ['R', 'R', 'R', 'R', 'R', '_', '_', '_']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row, col))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_map.py"", [row, col])

    if simple_map[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", simple_map[row][col], ""\n"")
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0

    if (check_location(0,
                       1)):
        score += 20

    if (check_location(1,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(7,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    return score
# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
simple_map = [['_', 'T', '_', '_', '_', 'R', '_', '_'],
                    ['_', '_', 'T', 'S', 'B', 'R', '_', '_'],
                    ['W', '_', '_', '_', '_', '_', 'R', '_'],
                    ['W', 'W', 'S', '_', '_', 'B', '_', '_'],
                    ['W', '_', '_', 'S', '_', '_', 'B', 'R'],
                    ['_', '_', '_', '_', '_', 'T', '_', '_'],
                    ['_', '_', '_', '_', '_', '_', 'T', '_'],
                    ['R', 'R', 'R', 'R', 'R', '_', '_', '_']]

#Your code goes here."
579,a3_5_connect,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong><span>You have been provided with a table that describes a connect 4 board. In this code, a list (<code>connect_4</code>) is populated with characters representing the location of each of the pieces (Red, Yellow, or Blank).</span></p>
<p>&nbsp;</p>
<pre><span>X = Red; 0 = Yellow; _ = Blank</span></pre>
<p>&nbsp;</p>
<p>Write a program that gets two values from the user in the following order:</p>
<p>1) a row index, a 0 indicates the Top row and 5 the Bottom row</p>
<p>2) a column index, a 0 indicates the Leftmost column and 6 the Rightmost column</p>
<p>&nbsp;</p>
<p>Finally,<span>&nbsp;</span><span><strong>Print&nbsp;</strong></span>out the contents of the table at that particular cell.</p>
<p>&nbsp;</p>
<p>&nbsp;&nbsp;</p>
<p><strong>HINT:</strong></p>
<ul>
<li>Your output should be one of the following letters:&nbsp; ""X"", ""0"" or ""_""</li>
</ul>
</div>","import random
from cs110 import autograder

## EDITED 15 MAR 2022 by Capt Ben McGraw

connect_4   =      [['X', '_', '_', '_', '_', '_', '_'],
                    ['X', '_', 'X', '_', '_', '_', '_'],
                    ['0', '_', 'X', '_', '_', '_', '_'],
                    ['0', '_', '0', 'X', '_', '_', '0'],
                    ['0', '_', '0', '0', 'X', '_', 'X'],
                    ['X', '_', 'X', '0', '0', 'X', 'X']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row, col))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_connect.py"", [row, col])

    if connect_4[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", connect_4[row][col], ""\n"")
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0

    if (check_location(0,
                       2)):
        score += 20

    if (check_location(1,
                       random.randint(0, len(connect_4[0])-1))):
        score += 20

    if (check_location(5,
                       random.randint(0, len(connect_4[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(connect_4)-1),
                       random.randint(0, len(connect_4[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(connect_4)-1),
                       random.randint(0, len(connect_4[0])-1))):
        score += 20

    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
connect_4   =      [['X', '_', '_', '_', '_', '_', '_'],
                    ['X', '_', 'X', '_', '_', '_', '_'],
                    ['0', '_', 'X', '_', '_', '_', '_'],
                    ['0', '_', '0', 'X', '_', '_', '0'],
                    ['0', '_', '0', '0', 'X', '_', 'X'],
                    ['X', '_', 'X', '0', '0', 'X', 'X']]

#Your code goes here."
580,a3_5_chess,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a table that describes a chess board. In this code, a list (<code>chess_board</code>) is populated with characters representing the location of each of the pieces(Rook, Knight, Bishop,King,Queen,Pawn).</p>
<p>&nbsp;</p>
<pre>R = Rook; N = Knight; B = Bishop; K = King; Q = Queen; P = pawn; _ = Empty</pre>
<p>&nbsp;</p>
<p>Write a program that gets two values from the user in the following order:</p>
<p>1) a row, a 1 indicates the Top row and 8 the Bottom row</p>
<p>2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column</p>
<p>&nbsp;</p>
<p>Finally,&nbsp;<strong>Print&nbsp;</strong>out the contents of the table at that particular cell.</p>
<p>&nbsp;</p>
<p> </p>
<p><strong>HINT:</strong></p>
<ul>
<li>Your output should be one of the following letters: ""R"", ""N"", ""B"", ""K"", ""Q"", ""P"", or ""_""</li>
</ul>
</div>
","import random
from cs110 import autograder

## EDITED 15 MAR 2022 by Capt Ben McGraw

chess_board = [['R', 'N', '_', 'K', '_', 'B', 'N', 'R'],
               ['p', 'p', 'p', '_', 'p', 'p', 'p', 'p'],
               ['_', '_', 'Q', '_', '_', '_', '_', '_'],
               ['_', '_', '_', 'p', '_', 'B', '_', '_'],
               ['_', '_', '_', 'p', '_', '_', '_', '_'],
               ['_', '_', '_', '_', 'p', '_', '_', '_'],
               ['p', 'p', 'p', '_', '_', 'p', 'p', 'p'],
               ['R', 'N', 'B', 'K', 'Q', 'B', 'N', 'R']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row, col))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_chess.py"", [row, col])

    if chess_board[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", chess_board[row][col], ""\n"")
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0

    if (check_location(0,
                       2)):
        score += 20

    if (check_location(1,
                       random.randint(0, len(chess_board[0])-1))):
        score += 20

    if (check_location(7,
                       random.randint(0, len(chess_board[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(chess_board)-1),
                       random.randint(0, len(chess_board[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(chess_board)-1),
                       random.randint(0, len(chess_board[0])-1))):
        score += 20

    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
chess_board =      [['R', 'N', '_', 'K', '_', 'B', 'N', 'R'],
                    ['p', 'p', 'p', '_', 'p', 'p', 'p', 'p'],
                    ['_', '_', 'Q', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', 'p', '_', 'B', '_', '_'],
                    ['_', '_', '_', 'p', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', 'p', '_', '_', '_'],
                    ['p', 'p', 'p', '_', '_', 'p', 'p', 'p'],
                    ['R', 'N', 'B', 'K', 'Q', 'B', 'N', 'R']]

#Your code goes here."
581,a3_5_carnival,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a table that describes a simple carnival ring toss. In this code, a list (<code>simple_map</code>) is populated with characters representing the colors of the bottles.</p>
<p>&nbsp;</p>
<pre>G = Green; B = Blue; P = Purple; R = Red; O = Orange; _ = Clear</pre>
<p>&nbsp;</p>
<p>Write a program that gets two values from the user in the following order:</p>
<p>1) a row, a 1 indicates the Top row and 8 the Bottom row</p>
<p>2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column</p>
<p>&nbsp;</p>
<p>Finally,&nbsp;<strong>Print&nbsp;</strong>out the contents of the table at that particular cell.</p>
<p>&nbsp;</p>
<p> </p>
<p><strong>HINT:</strong></p>
<ul>
<li>Your output should be one of the following letters: ""G"", ""B"", ""P"", ""R"", ""O"", or ""_""</li>
</ul>
</div>
","import random
from cs110 import autograder

## EDITED 15 MAR 2022 by Capt Ben McGraw

simple_map = [['O', '_', '_', 'P', '_', 'R', '_', 'G'],
              ['R', 'O', '_', '_', '_', 'P', '_', '_'],
              ['_', '_', 'O', '_', '_', 'O', 'P', '_'],
              ['R', '_', 'G', '_', '_', '_', '_', 'P'],
              ['B', '_', '_', '_', '_', '_', '_', 'P'],
              ['G', 'R', 'P', 'O', 'O', '_', '_', 'G'],
              ['P', '_', '_', '_', '_', 'G', 'B', '_'],
              ['B', 'R', 'G', 'B', '_', 'G', 'B', 'G']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row, col))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_carnival.py"", [row, col])

    if simple_map[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", simple_map[row][col], ""\n"")
        return False


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0

    if (check_location(0,
                       3)):
        score += 20

    if (check_location(1,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(7,
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    if (check_location(random.randint(0, len(simple_map)-1),
                       random.randint(0, len(simple_map[0])-1))):
        score += 20

    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
simple_map = [['O', '_', '_', 'P', '_', 'R', '_', 'G'],
              ['R', 'O', '_', '_', '_', 'P', '_', '_'],
              ['_', '_', 'O', '_', '_', 'O', 'P', '_'],
              ['R', '_', 'G', '_', '_', '_', '_', 'P'],
              ['B', '_', '_', '_', '_', '_', '_', 'P'],
              ['G', 'R', 'P', 'O', 'O', '_', '_', 'G'],
              ['P', '_', '_', '_', '_', 'G', 'B', '_'],
              ['B', 'R', 'G', 'B', '_', 'G', 'B', 'G']]

#Your code goes here."
582,a3_5_battleship,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a table that describes the board game, Battleship. In this code, a list (<code>battleship_board</code>) is populated with characters representing the location of each of the game&rsquo;s ship types (Carrier, Battleship, Submarine, Cruiser, and Destroyer).</p>
<p>&nbsp;</p>
<pre>C = Carrier; B = Battleship; S = Submarine; R = Cruiser; D = Destroyer; _ = Blank</pre>
<p>&nbsp;</p>
<p>Write a program that gets two values from the user in the following order:</p>
<p>1) a row, a 1 indicates the Top row and 8 the Bottom row</p>
<p>2) a column, a 1 indicates the Leftmost column and 8 the Rightmost column</p>
<p>&nbsp;</p>
<p>Finally,&nbsp;<strong>Print&nbsp;</strong>out the contents of the table at that particular cell.</p>
<p>&nbsp;</p>
<p><strong>HINT:</strong></p>
<ul>
<li>Your output should be one of the following letters: ""C"", ""B"", ""S"", ""R"", ""D"", or ""_""</li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","import random
from cs110 import autograder

## EDITED 15 MAR 2022 by Capt Ben McGraw

battleship_board = [['_', '_', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', 'C', 'S', 'S', 'S', '_', '_'],
                    ['D', 'D', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', '_', 'R', 'R', 'R'],
                    ['_', '_', '_', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', '_', '_', '_', '_'],
                    ['_', 'B', 'B', 'B', 'B', '_', '_', '_']]


def check_location(row, col):
    print(""-----------------------------"")
    print(""Checking row:{} col:{}"".format(row, col))
    print(""-----------------------------"")

    output, error = autograder.run_script(""a3_5_battleship.py"", [row, col])

    if battleship_board[row][col] == output.strip():
        print(""Correct\n"")
        return True
    else:
        print(""Incorrect.  Expected:"", battleship_board[row][col], ""\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    if check_location(0, 2):
        score += 20
    if check_location(1, random.randint(0, len(battleship_board[0])-1)):
        score += 20
    if check_location(7, random.randint(0, len(battleship_board[0])-1)):
        score += 20
    if check_location(random.randint(0, len(battleship_board)-1),
                      random.randint(0, len(battleship_board[0])-1)):
        score += 20
    if check_location(random.randint(0, len(battleship_board)-1),
                      random.randint(0, len(battleship_board[0])-1)):
        score += 20
    return score


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 5
# --------------------------------------------------------------
#DO NOT TOUCH THIS LIST!
battleship_board = [['_', '_', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', 'C', 'S', 'S', 'S', '_', '_'],
                    ['D', 'D', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', 'C', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', '_', 'R', 'R', 'R'],
                    ['_', '_', '_', '_', '_', '_', '_', '_'],
                    ['_', '_', '_', '_', '_', '_', '_', '_'],
                    ['_', 'B', 'B', 'B', 'B', '_', '_', '_']]

#Your code goes here."
583,a3_4_weights,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called list_of_weights. Write a program that prints out the range (<em>i.e.,&nbsp;</em>the difference between the max and min weight)</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the values: 103, 110, 115</p>
<p>Your program should print:</p>
<pre>12</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_weights.py""
ANSWER = 5416


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if len(lines) >= 1:           
        if autograder.equals(lines[0], ANSWER):
            print(""CORRECT: Range Looks Good!"")
            score += 100
        else:
            print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
            
    else:
        print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
584,a3_4_testscores,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong><span>You have been provided with a list called list_of_test_scores</span><span>. Write a program that prints out the range (<em>i.e.,&nbsp;</em>the difference between the max and min scores)</span></p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br></strong>If, for example, the list contained the values:&nbsp; 50, 64, 72</p>
<p>Your program should print:</p>
<pre>22</pre>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_testscores.py""
ANSWER = 6092


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if len(lines) >= 1:           
        if autograder.equals(lines[0], ANSWER):
            print(""CORRECT: Range Looks Good!"")
            score += 100
        else:
            print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
            
    else:
        print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
585,a3_4_run,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called list_of_run_times. Write a program that prints out the range (<em>i.e.,&nbsp;</em>the difference between the max and min run time)</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the values: 3, 10, 15</p>
<p>Your program should print:</p>
<pre>12</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_run.py""
ANSWER = 4491

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if len(lines) >= 1:           
        if autograder.equals(lines[0], ANSWER):
            print(""CORRECT: Range Looks Good!"")
            score += 100
        else:
            print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
            
    else:
        print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
586,a3_4_ptscores,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called list_of_pt_scores. Write a program that prints out the range (<em>i.e.,&nbsp;</em>the difference between the max and min pt scores)</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the values: 3, 10, 15</p>
<p>Your program should print:</p>
<pre>12</pre>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_ptscores.py""
ANSWER = 6068


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if len(lines) >= 1:           
        if autograder.equals(lines[0], ANSWER):
            print(""CORRECT: Range Looks Good!"")
            score += 100
        else:
            print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
            
    else:
        print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
587,a3_4_heights,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called list_of_heights. Write a program that prints out the range (<em>i.e.,&nbsp;</em>the difference between the max and min height)</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the values: 53, 60, 65</p>
<p>Your program should print:</p>
<pre>12</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_heights.py""
ANSWER = 8942


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if len(lines) >= 1:           
        if autograder.equals(lines[0], ANSWER):
            print(""CORRECT: Range Looks Good!"")
            score += 100
        else:
            print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
            
    else:
        print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
588,a3_4_ages,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong>You have been provided with a list called list_of_ages. Write a program that prints out the range (<em>i.e.,&nbsp;</em>the difference between the max and min ages)</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br /></strong>If, for example, the list contained the values: 50, 64, 72</p>
<p>Your program should print:</p>
<pre>22</pre>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

STUDENT_FILE = ""a3_4_ages.py""
ANSWER = 9840


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    output, error = autograder.run_script(STUDENT_FILE, [])
    lines = output.strip().split('\n')
    score = 0
    
    if len(lines) >= 1:           
        if autograder.equals(lines[0], ANSWER):
            print(""CORRECT: Range Looks Good!"")
            score += 100
        else:
            print(""Incorrect range.  Remember that the range is the difference between the max and the min"")
            
    else:
        print(""More lines expected in your answer.  Make sure you are printing out the range."")
    
    return score

# ---------------------------------------------------------------------
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
589,a3_3_chars3,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong><span>You have been provided with a list called&nbsp;</span><code>list_of_characters</code><span>. Write a program that prints out each of the items in this list (one item per line).&nbsp;&nbsp;</span></p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br></strong>If, for example, the list was:&nbsp; [""ab"", ""cd"", ""ef""]</p>
<p>Your program should print:</p>
<pre>ab<br>cd<br>ef</pre>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You must use a loop to complete this task.&nbsp;&nbsp;</li>
</ul>
</div>","from cs110 import autograder
import random, math, traceback

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    try:        
        output, error = autograder.run_script(""a3_3_chars3.py"", [])
        expected_output = ""sp\njm\nbt\ncv\nti\nnn\nig\nau\nhi\nvc\nom\npf\ntk\nve\nxd\nsj\nbg\npk\nrk\nvy\nuz\nuv\njp\nwg\nzi\neg\nov\nzt\nsb\nki\nua\nft\nhq\nik\nxq\nhz\ndh\ngx\ngg\njg\ndm\npb\noq\ntm\nmx\nnh\nkv\nqk\nml\nli\ndi\niy\nsr\nps\nrz\njl\nmr\nna\nax\nqb\nxt\nfe\nay\niv\nkn\nky\nuh\ndq\nib\njz\nvb\nfq\nje\ncy\nwy\nxo\nex\ntg\njw\nii\ncd\ndo\nnw\nzh\nel\ntu\nit\nkb\nwp\njs\nei\nfz\nea\nie\nts\nmd\npx\nsq\nnm\ngi\n""
        
        if error == """":
            student_lines = output.strip().split('\n')
            expected_lines = expected_output.strip().split('\n')
                
            for idx in range(len(student_lines)):
                if idx < len(student_lines) and idx < len(expected_lines):
                    if student_lines[idx] == expected_lines[idx]:
                        score += 100 / len(expected_lines)
            
            if score < 100.0:
                print(""**** Start of Expected Output ****"")
                print(expected_output)
                print(""INCORRECT: Missing Entries, Expected the above ^^"")
            else:
                print(""CORRECT!"")
            
            return round(score, 1)
        else:
            print(""INCORRECT: There was an error while running your code.\n"")
            print(error)
            
            return 0
    
    except Exception as e:
        print(""There was an error while running your code."")
        print(traceback.print_exc())
        if score == 100:
            return 90
        else:
            return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_characters = [""sp"",""jm"",""bt"",""cv"",""ti"",""nn"",""ig"",""au"",""hi"",""vc"",""om"",""pf"",""tk"",""ve"",""xd"",""sj"",""bg"",""pk"",""rk"",""vy"",""uz"",""uv"",""jp"",""wg"",""zi"",""eg"",""ov"",""zt"",""sb"",""ki"",""ua"",""ft"",""hq"",""ik"",""xq"",""hz"",""dh"",""gx"",""gg"",""jg"",""dm"",""pb"",""oq"",""tm"",""mx"",""nh"",""kv"",""qk"",""ml"",""li"",""di"",""iy"",""sr"",""ps"",""rz"",""jl"",""mr"",""na"",""ax"",""qb"",""xt"",""fe"",""ay"",""iv"",""kn"",""ky"",""uh"",""dq"",""ib"",""jz"",""vb"",""fq"",""je"",""cy"",""wy"",""xo"",""ex"",""tg"",""jw"",""ii"",""cd"",""do"",""nw"",""zh"",""el"",""tu"",""it"",""kb"",""wp"",""js"",""ei"",""fz"",""ea"",""ie"",""ts"",""md"",""px"",""sq"",""nm"",""gi""]

#Your code goes here."
590,a3_3_chars2,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong><span>You have been provided with a list called&nbsp;</span><code>list_of_characters</code><span>. Write a program that prints out each of the items in this list (one item per line).&nbsp;&nbsp;</span></p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br></strong>If, for example, the list was:&nbsp; [""ab"", ""cd"", ""ef""]</p>
<p>Your program should print:</p>
<pre>ab<br>cd<br>ef</pre>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You must use a loop to complete this task.&nbsp;&nbsp;</li>
</ul>
</div>","from cs110 import autograder
import random, math, traceback

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    try:        
        output, error = autograder.run_script(""a3_3_chars2.py"", [])
        expected_output = ""ao\nrh\nvs\nrf\net\nsm\neg\nwf\npp\nmr\niq\nti\npn\npm\nlx\nie\nqh\nls\ngy\nzv\nop\ntc\nlt\nvb\nwh\nxk\nqx\nud\nrv\noa\ndr\ngk\nqk\ner\nmw\nea\ndg\nby\nxa\ngn\nbr\nve\npr\noy\nxw\nwy\nxi\nbs\nae\nlz\nnb\niy\nsz\nyf\ngs\njc\nzy\nxv\nnn\nvm\nxt\nup\nrn\nit\nyc\nwn\nhp\nzp\ney\nfy\nld\ngd\nis\nyk\nfi\nvi\nqq\nyo\ntj\nen\nzm\nrc\nos\nqz\nyu\nmv\nke\nmy\nqe\naz\nun\nox\nvy\nou\nia\nyh\nne\nwd\nbb\ndt\n""

        if error == """":
            student_lines = output.strip().split('\n')
            expected_lines = expected_output.strip().split('\n')
            
            for idx in range(len(student_lines)):
                if idx < len(student_lines) and idx < len(expected_lines):
                    if student_lines[idx] == expected_lines[idx]:
                        score += 100 / len(expected_lines)
            
            if score < 100.0:
                print(""**** Start of Expected Output ****"")
                print(expected_output)
                print(""INCORRECT: Missing Entries, Expected the above ^^"")
            else:
                print(""CORRECT!"")
            
            return round(score, 1)
        else:
            print(""INCORRECT: There was an error while running your code.\n"")
            print(error)
            
            return 0
    
    except Exception as e:
        print(""There was an error while running your code."")
        print(traceback.print_exc())
        return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_characters = [""ao"",""rh"",""vs"",""rf"",""et"",""sm"",""eg"",""wf"",""pp"",""mr"",""iq"",""ti"",""pn"",""pm"",""lx"",""ie"",""qh"",""ls"",""gy"",""zv"",""op"",""tc"",""lt"",""vb"",""wh"",""xk"",""qx"",""ud"",""rv"",""oa"",""dr"",""gk"",""qk"",""er"",""mw"",""ea"",""dg"",""by"",""xa"",""gn"",""br"",""ve"",""pr"",""oy"",""xw"",""wy"",""xi"",""bs"",""ae"",""lz"",""nb"",""iy"",""sz"",""yf"",""gs"",""jc"",""zy"",""xv"",""nn"",""vm"",""xt"",""up"",""rn"",""it"",""yc"",""wn"",""hp"",""zp"",""ey"",""fy"",""ld"",""gd"",""is"",""yk"",""fi"",""vi"",""qq"",""yo"",""tj"",""en"",""zm"",""rc"",""os"",""qz"",""yu"",""mv"",""ke"",""my"",""qe"",""az"",""un"",""ox"",""vy"",""ou"",""ia"",""yh"",""ne"",""wd"",""bb"",""dt""]

#Your code goes here."
591,a3_3_chars1,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong><span>You have been provided with a list called&nbsp;</span><code>list_of_characters</code><span>. Write a program that prints out each of the items in this list (one item per line).&nbsp;&nbsp;</span></p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:<br></strong>If, for example, the list was:&nbsp; [""ab"", ""cd"", ""ef""]</p>
<p>Your program should print:</p>
<pre>ab<br>cd<br>ef</pre>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You must use a loop to complete this task.&nbsp;&nbsp;</li>
</ul>
</div>","from cs110 import autograder
import random, math, traceback

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    try:        
        output, error = autograder.run_script(""a3_3_chars1.py"", [])
        expected_output = ""mz\nnz\noe\npq\nzy\nuu\nir\ngy\ntl\npd\nlb\nks\nuf\nvj\nas\nkh\npr\nam\ncd\nlh\nci\nsg\nzt\nwn\nnp\nvt\nme\ngs\nqs\nwe\nxt\nrc\nkw\nxw\nyk\nin\neq\nkt\nfr\nwi\nku\naj\nor\noz\npo\nvo\ngo\nxo\nxx\nca\nxj\ncj\nwj\nxp\njd\nfo\nxq\nnj\nbq\nlr\ndw\nmy\nhj\nve\ncq\ndo\njq\nld\nkl\neu\ngw\njy\nvd\nau\nwq\nnt\ngd\nvx\nxz\nao\ntu\nxb\nyd\nki\nkj\nns\nda\npv\nrq\nvf\nxi\nlo\nue\naa\nct\nxr\nxn\nmr\niv\nmu\n""
        
        if error == """":
            student_lines = output.strip().split('\n')
            expected_lines = expected_output.strip().split('\n')
                
            for idx in range(len(student_lines)):
                if idx < len(student_lines) and idx < len(expected_lines):
                    if student_lines[idx] == expected_lines[idx]:
                        score += 100 / len(expected_lines)
            
            if score < 100.0:
                print(""**** Start of Expected Output ****"")
                print(expected_output)
                print(""INCORRECT: Missing Entries, Expected the above ^^"")
            else:
                print(""CORRECT!"")
            
            return round(score, 1)
        else:
            print(""INCORRECT: There was an error while running your code.\n"")
            print(error)
            
            return 0
    
    except Exception as e:
        print(""There was an error while running your code."")
        print(traceback.print_exc())
        return score
    
# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,"# AUTOGRADER IMPORT REMOVED

# --------------------------------------------------------------
# Assessment #3, Problem 3
# --------------------------------------------------------------

# This list is being provided to you.  DO NOT TOUCH!
list_of_characters = [""mz"",""nz"",""oe"",""pq"",""zy"",""uu"",""ir"",""gy"",""tl"",""pd"",""lb"",""ks"",""uf"",""vj"",""as"",""kh"",""pr"",""am"",""cd"",""lh"",""ci"",""sg"",""zt"",""wn"",""np"",""vt"",""me"",""gs"",""qs"",""we"",""xt"",""rc"",""kw"",""xw"",""yk"",""in"",""eq"",""kt"",""fr"",""wi"",""ku"",""aj"",""or"",""oz"",""po"",""vo"",""go"",""xo"",""xx"",""ca"",""xj"",""cj"",""wj"",""xp"",""jd"",""fo"",""xq"",""nj"",""bq"",""lr"",""dw"",""my"",""hj"",""ve"",""cq"",""do"",""jq"",""ld"",""kl"",""eu"",""gw"",""jy"",""vd"",""au"",""wq"",""nt"",""gd"",""vx"",""xz"",""ao"",""tu"",""xb"",""yd"",""ki"",""kj"",""ns"",""da"",""pv"",""rq"",""vf"",""xi"",""lo"",""ue"",""aa"",""ct"",""xr"",""xn"",""mr"",""iv"",""mu""]

#Your code goes here."
592,a3_2_jets,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called&nbsp;<code>list_of_aircraft</code>. Write a program that gets two aircraft designator names from the user. Then append the aircraft (in the same order they were provided) to the list.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>Do not touch the code we provide you. Otherwise, the test cases will not work.</li>
</ul>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

list_of_jets = ['F-16', 'F-15', 'F-22', 'F-35', 'B-1', 'B-2']



# Runs the Python script and sees if it passes the test(s)
def test_passed():

    index_list = [1, random.randint(2, len(list_of_jets)-2), len(list_of_jets)]
    score = 0

    new_jets = [""B-52"",""KC-10"",""KC-135"",""A-10"",""AC-130"",""C-130"",""CV-22""]

    random_ac1 = new_jets[random.randint(0, len(new_jets)-1)]
    new_jets.remove(random_ac1)
    random_ac2 = new_jets[random.randint(0, len(new_jets)-1)]

    list_of_jets.append(random_ac1)
    list_of_jets.append(random_ac2)

    output, error = autograder.run_script(""a3_2_jets.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')

    if lines[len(lines)-2].strip() == list_of_jets[len(list_of_jets)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())

    if lines[len(lines)-1].strip() == list_of_jets[len(list_of_jets)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())

    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
593,a3_2_grammys,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called <code>grammy_list</code>. Write a program that gets two new Grammy awards categories from the user. Then append the categories (in the same order they were provided) to the list.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>Do not touch the code we provide you. Otherwise, the test cases will not work.</li>
</ul>
</div>
","from cs110 import autograder
import random, math

grammy_list = ['Pop', 'Global', 'Rock', 'Rap', 'Jazz', 'R&B', 'Comedy']

             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(grammy_list)-2), len(grammy_list)]
    score = 0

    new_categories = [""Dance"", ""Country"", ""Classical"", ""Gospel"", ""Alternative"", ""Soundtrack"", ""Instrumental"", ""Latin"", ""Reggae""]
    
    random_ac1 = new_categories[random.randint(0, len(new_categories)-1)]
    new_categories.remove(random_ac1)
    random_ac2 = new_categories[random.randint(0, len(new_categories)-1)]
    
    grammy_list.append(random_ac1)
    grammy_list.append(random_ac2)

    output, error = autograder.run_script(""a3_2_grammys.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')
    
    if lines[len(lines)-2].strip() == grammy_list[len(grammy_list)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())
    
    if lines[len(lines)-1].strip() == grammy_list[len(grammy_list)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
594,a3_2_departments,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called&nbsp;<code>department_list</code>. Write a program that gets two new departments from the user. Then append the departments (in the same order they were provided) to the list.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>Do not touch the code we provide you. Otherwise, the test cases will not work.</li>
</ul>
</div>
","from cs110 import autograder
import random, math

department_list = ['Science','Engineering','Humanities','Social Science']

             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(department_list)-2), len(department_list)]
    score = 0

    new_departments = ['Education', 'E-Sports', '8-Bit Gaming', 'Midi Music', 'General Studies', ""Deep Space"", ""Department of Motor Vehicles""]
    
    random_ac1 = new_departments[random.randint(0, len(new_departments)-1)]
    new_departments.remove(random_ac1)
    random_ac2 = new_departments[random.randint(0, len(new_departments)-1)]
    
    department_list.append(random_ac1)
    department_list.append(random_ac2)

    output, error = autograder.run_script(""a3_2_departments.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')
    
    if lines[len(lines)-2].strip() == department_list[len(department_list)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())
    
    if lines[len(lines)-1].strip() == department_list[len(department_list)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
595,a3_2_cities,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called <code>list_of_cities</code>. Write a program that gets two new cities from the user. Then append the cities (in the same order they were provided) to the list.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>Do not touch the code we provide you. Otherwise, the test cases will not work.</li>
</ul>
</div>
","from cs110 import autograder
import random, math

list_of_cities = ['Tokyo', 'Delhi', 'Shanghai', 'Cairo', 'Mumbai', 'Bejing', 'Dhaka']

             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(list_of_cities)-2), len(list_of_cities)]
    score = 0

    new_cities = [""Osaka"", ""Karachi"", ""Istanbul"", ""Kolkata"", ""Manila"", ""Lagos"", ""Moscow"", ""Lahore"", ""Paris""]
    
    random_ac1 = new_cities[random.randint(0, len(new_cities)-1)]
    new_cities.remove(random_ac1)
    random_ac2 = new_cities[random.randint(0, len(new_cities)-1)]
    
    list_of_cities.append(random_ac1)
    list_of_cities.append(random_ac2)

    output, error = autograder.run_script(""a3_2_cities.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')
    
    if lines[len(lines)-2].strip() == list_of_cities[len(list_of_cities)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())
    
    if lines[len(lines)-1].strip() == list_of_cities[len(list_of_cities)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
596,a3_2_cars,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called <code>list_of_cars</code>. Write a program that gets two new cars from the user. Then append the cars (in the same order they were provided) to the list.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>Do not touch the code we provide you. Otherwise, the test cases will not work.</li>
</ul>
</div>
","from cs110 import autograder
import random, math

list_of_cars = ['Viper', 'Highlander', 'Audi A8', 'Tundra', 'Porsche', 'Mazada', 'Fiesta']

             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(list_of_cars)-2), len(list_of_cars)]
    score = 0

    new_cars = [""Ford"", ""Maserati"", ""BMW"", ""Cheetah"", ""Scion"", ""Lambo"", ""Pilot"", ""Civic"", ""Corolla""]
    
    random_ac1 = new_cars[random.randint(0, len(new_cars)-1)]
    new_cars.remove(random_ac1)
    random_ac2 = new_cars[random.randint(0, len(new_cars)-1)]
    
    list_of_cars.append(random_ac1)
    list_of_cars.append(random_ac2)

    output, error = autograder.run_script(""a3_2_cars.py"", [random_ac1, random_ac2])
    output = output.strip().replace(""["", """")
    output = output.strip().replace(""]"", """")
    output = output.strip().replace(""'"", """")
    lines = output.split(',')
    
    if lines[len(lines)-2].strip() == list_of_cars[len(list_of_cars)-2]:
        print(""Second to Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Second to Last Element in List.  Expected:"", random_ac1, ""instead of"", lines[len(lines)-2].strip())
    
    if lines[len(lines)-1].strip() == list_of_cars[len(list_of_cars)-1]:
        print(""Last Element in List is Correct!"")
        score += 50
    else:
        print(""Incorrect Last Element in List.  Expected:"", random_ac2, ""instead of"", lines[len(lines)-1].strip())
    
    return score

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
597,a3_1_medals,4,skill,1,"<div>
<p><strong>PROBLEM STATEMENT: <br /></strong></p>
<p>You have been provided with a list called&nbsp;<code>list_of_medals</code> that contains the current Air Force and Space Force approved decorations. Write a program that prints a single, specified decoration from the list. Your program shall take a number via user input used to identify which decoration to print. For example, if the user types a 3, you should print out the third item.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)</li>
</ul>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

soln_list = [
                    'Congressional Medal of Honor', 'Air Force Cross',	'Air Force Distinguished Service Medal',
                    ""Airman's Medal"",	""Aerial Achievement Medal"",	""Air Force Commendation Medal"",
                    ""Air Force Achievement Medal"", 'Air Force Combat Action Medal',	'Combat Readiness Medal',
                    'Air and Space Campaign Medal',	'Nuclear Deterrence Operations Service Medal',
                    'Remote Combat Effects Campaign Medal'
            ] 
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_medals.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == soln_list[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(soln_list[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
598,a3_1_light_aircraft,4,skill,1,"<div ><strong>PROBLEM STATEMENT:<br></strong></p>
<p><span>You have been provided with a list called&nbsp;</span><code>list_of_aircraft</code><span>. Write a program that prints a single, specified aircraft from the list. Your program shall take a number via user input used to identify which aircraft to print. For example, if the user types a 3, you should print out the third item.</span></p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)</li>
</ul>
</div>","from cs110 import autograder
import random, math

list_of_aircraft = [""F-16"",""F-15"",""F-22"",""F-35"", ""A-10"", ""B-1"",""B-2"", ""B-52"" ]

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(list_of_aircraft)-2), len(list_of_aircraft)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_light_aircraft.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == list_of_aircraft[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != list_of_aircraft[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(list_of_aircraft[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
599,a3_1_countries,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called&nbsp;<code>list_of_coalition_countries</code>. Write a program that prints a single, specified country from the list. Your program shall take a number via user input used to identify which country to print. For example, if the user types a 3, you should print out the third item.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)</li>
</ul>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

soln_list = ['United States', 'United Kingdom', 'Australia', 'South Korea', 'Czech Republic', 'Romania', 'El Salvador', 'Estonia', 
             'Bulgaria', 'Moldova', 'Albania', 'Ukraine', 'Denmark', 'Tonga', 'Azerbaijan', 'Singapore', 'Bosnia', 'Macedonia',
             'Latvia', 'Poland', 'Kazakhstan']
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_countries.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == soln_list[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(soln_list[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
600,a3_1_commands,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called&nbsp;<code>list_of_usaf_commands</code>. Write a program that prints a single, specified command organization from the list. Your program shall take a number via user input used to identify which command organization to print. For example, if the user types a 3, you should print out the third item.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)</li>
</ul>
</div>
","from cs110 import autograder
import random, math

list_of_usaf_commands = ['ACC','AETC','AFGSC','AFMC',
                         'AFRC','AFSOC','AMC','PACAF',
                         'USAFE']
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(list_of_usaf_commands)-2), len(list_of_usaf_commands)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_commands.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == list_of_usaf_commands[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != list_of_usaf_commands[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(list_of_usaf_commands[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
601,a3_1_cargo,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a list called&nbsp;<code>list_of_cargo_planes</code>. Write a program that prints a single, specified plane from the list. Your program shall take a number via user input used to identify which plane to print. For example, if the user types a 3, you should print out the third item.</p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)</li>
</ul>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, math

soln_list =  [
                'C-2', 'C-5', 'C-9', 'C-12', 'C-17', 'UV-18', 'C-20', 'C-21', 'C-22', 'C-23', 'C-26', 'C-27',
                'C-35', 'C-38', 'CT-39', 'C-40', 'C-130', 'C-135', 'C-141', 'ATT', 'CSA', 'NSA', 'GRA', 'CRAF'
            ] 
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_cargo.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == soln_list[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(soln_list[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
602,a3_1_afbs,4,skill,1,"<div id=""question_196458395_question_text"" class=""question_text user_content enhanced"">
          
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br></strong></p>
<p><span>You have been provided with a list called&nbsp;</span><code>list_of_bases</code><span>. Write a program that prints a single, specified base from the list. Your program shall take a number via user input used to identify which base to print. For example, if the user types a 3, you should print out the third item.</span></p>
<p>&nbsp;</p>
<p><strong>NOTE:</strong></p>
<ul>
<li>You may assume that the user will always enter a value that ""should"" exist within the list (e.g., the user will not enter 100 when the list only contains 5 elements)</li>
</ul>
      </div>
","from cs110 import autograder
import random, math

soln_list = ['Travis', 'Eglin', 'Offutt', 'Minot', 'Luke', 'Malmstrom', 'Ellsworth', 'Patrick', 'Moody', 'Barksdale',
             'Maxwell', 'Mountain Home', 'Keesler', 'Lackland', 'Kelly', 'Andrews', 'Tinker', 'Peterson', 'Buckley',
             'Hill', 'Dyess', 'Wright-Patterson', 'Nellis']
             

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    index_list = [1, random.randint(2, len(soln_list)-2), len(soln_list)]
    tests_passed = 0

    for i in range(len(index_list)):
        print(""----------------------------------------------------------"")
        print(""Testing item #"" + str(index_list[i]) + "": "")
        print(""----------------------------------------------------------"")
               
        # Runs the Script
        output, error_message = autograder.run_script(""a3_1_afbs.py"", [index_list[i]])

        # Test Goes Here
        lines = output.split(""\n"")
        
        if lines[0] == soln_list[index_list[i]-1]:
            print(""Looks Good!"")
            tests_passed += 1
        elif error_message == '' and lines[0] != soln_list[index_list[i]-1]:
            print(""Unexpected Output (Expected "" + str(soln_list[index_list[i]-1]) + "")"")
    
        print()
    
    return (100 / len(index_list)) * tests_passed


# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
603,a2_5_virus,4,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You are writing a program that will help you decide if there are too many people at a restaurant for you to dine safely. Your program will ask for the number of people in the restaurant. It will then ask for the distance between yourself and each of the people (in feet, which do not have to be whole numbers). Your program will keep track of how many people are within 6 feet of you (inclusive). Your program will then print one of the following statements:</p>
<table border=""1"">
<tbody>
<tr>
<td><strong># of People within 6 Feet</strong></td>
<td><strong>0</strong></td>
<td><strong>1-2</strong></td>
<td><strong>&gt;2</strong></td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>All Clear</td>
<td>Warning</td>
<td>Find Another Place</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>INPUT</strong></td>
<td>3<br />5.7<br />10.2<br />12.4</td>
<td>2<br />7.0<br />15.1</td>
</tr>
<tr>
<td><strong>OUTPUT</strong></td>
<td>Warning</td>
<td>All Clear</td>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random, math

def run_test(num_violating, num_people):    
    inputs = [num_people]
    
    for i in range(num_people):
        if i < num_violating:
            if (i + 1 == num_violating):
                inputs.append(6)
            else:
                inputs.append(round(random.uniform(0, 6), 1))
        else:
            inputs.append(round(random.uniform(7, 20), 1))

    # Generates Expected Answer
    if num_violating == 0:
        answer = ""All Clear""
    elif num_violating <= 2:
        answer = ""Warning""
    else:
        answer = ""Find Another Place""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_5_virus.py"", inputs)
    
    print(""Testing when"", num_violating, ""out of"", num_people, ""are violating . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 2))):
        num_passed += 1
    
    if (run_test(2, random.randint(3, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
604,a2_5_traffic_lights,4,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>The City Manager is having a traffic problem and asked you are to write a program that will determine whether or not to activate a newly installed alternate traffic light schedule to help alleviate traffic throughout the city during peak traffic hours. Your program will ask for the number of traffic ""time periods"" to analyze. It will then ask for the traffic throughput (in average number of cars per minute, which does not have to be a whole number) for each ""time period"". Your program will keep track of how many ""time periods"" are considered heavy traffic, as defined as 15 cars per minutes or more (inclusive). Your program will then print one of the following statements:</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong># of ""time periods"" of heavy traffic</strong></td>
<td><strong>0</strong></td>
<td><strong>1-2</strong></td>
<td><strong>&gt;2</strong></td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Regular Schedule</td>
<td>Prepare Activation</td>
<td>Activate New Schedule</td>
</tr>
</tbody>
</table>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>INPUT</strong></td>
<td>
<p>3</p>
<p>12.8</p>
<p>15.0</p>
<p>6.7</p>
</td>
<td>
<p>3</p>
<p>17.3</p>
<p>15.1</p>
<p>19.2</p>
</td>
</tr>
<tr>
<td><strong>OUTPUT</strong></td>
<td>Prepare Activation</td>
<td>Activate New Schedule</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

def run_test(num_over, traffic):    
    inputs = [traffic]
    
    for i in range(traffic):
        if i < num_over:
            if (i + 1 == num_over):
                inputs.append(15)
            else:
                inputs.append(round(random.uniform(15, 30), 1))
        else:
            inputs.append(round(random.uniform(1, 15), 1))

    # Generates Expected Answer
    if num_over == 0:
        answer = ""Regular Schedule""
    elif num_over <= 2:
        answer = ""Prepare Activation""
    else:
        answer = ""Activate New Schedule""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_5_traffic_lights.py"", inputs)
    
    print(""Testing when"", num_over, ""out of"", traffic, ""\""time periods\"" are experiencing heavy traffic . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 2))):
        num_passed += 1
    
    if (run_test(2, random.randint(3, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
605,a2_5_network_traffic,4,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>The 10th Communications Squadron (10 CS) recently detected a higher volume of network traffic on the base network. The 10 CS Director of Operations asked you are to write a program that will determine whether or not to activate an additional Network Load Balancer (NLB) to improve the network performance during these peak loads. Your program will ask for the number of network traffic ""snapshots"" to analyze. It will then ask for the network load (in Gigabits per second (Gbps), which does not have to be a whole number) for each ""snapshot"". Your program will keep track of how many ""snapshots"" are designated as high volume network traffic, defined as loads greater than 512 Gbps. Your program will then print one of the following statements:</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong># of ""snapshots"" with high network traffic volume</strong></td>
<td><strong>0</strong></td>
<td><strong>1-2</strong></td>
<td><strong>&gt;2</strong></td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Ops Normal</td>
<td>Initialize NLB</td>
<td>Activate NLB</td>
</tr>
</tbody>
</table>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>INPUT</strong></td>
<td>
<p>3</p>
<p>512.0</p>
<p>738.5</p>
<p>199.6</p>
</td>
<td>
<p>3</p>
<p>498.6</p>
<p>372.9</p>
<p>512.0</p>
</td>
</tr>
<tr>
<td><strong>OUTPUT</strong></td>
<td>Initialize NLB</td>
<td>Ops Normal</td>
</tr>
</tbody>
</table>
</div>","from cs110 import autograder
import random, math

def run_test(num_over, traffic):    
    inputs = [traffic]
    
    for i in range(traffic):
        if i < num_over:
            if (i + 1 == num_over):
                inputs.append(512.1)
            else:
                inputs.append(round(random.uniform(512, 1024), 1))
        else:
            inputs.append(round(random.uniform(256, 512), 1))

    # Generates Expected Answer
    if num_over == 0:
        answer = ""Ops Normal""
    elif num_over <= 2:
        answer = ""Initialize NLB""
    else:
        answer = ""Activate NLB""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_5_network_traffic.py"", inputs)
    
    print(""Testing when"", num_over, ""out of"", traffic, ""\""snapshots\"" have high volume of network traffic . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 2))):
        num_passed += 1
    
    if (run_test(2, random.randint(3, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
606,a2_5_grades,4,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You are writing a program that will help your instructors analyze student performance on an exam. Your program will ask for the number of students in the class. It will then ask for the grade of each student (this grade does not have to be a whole number). Your program will keep track of how many students received less than 70 on an assignment. Your program will then print one of the following statements.</p>
<p>&nbsp;</p>
<table border=""1"">
<tbody>
<tr>
<td><strong># of scores below 70</strong></td>
<td><strong>0</strong></td>
<td><strong>1-2</strong></td>
<td><strong>&gt;2</strong></td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Excellent</td>
<td>Satisfactory</td>
<td>Unsatisfactory</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>INPUT</strong></td>
<td>
<p>4<br />75.6<br />80.2<br />95.5<br />71.0</p>
</td>
<td>
<p>3<br />68.2<br />72.9<br />95.4</p>
</td>
<td>
<p>3<br />67.0<br />65.5<br />68.3</p>
</td>
</tr>
<tr>
<td><strong>OUTPUT</strong></td>
<td>Excellent</td>
<td>Satisfactory</td>
<td>Unsatisfactory</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import random, math

def run_test(num_failures, num_papers):    
    inputs = [num_papers]
    
    for i in range(num_papers):
        if i < num_failures:
            inputs.append(round(random.uniform(0, 70), 1))
        else:
            if (i == num_failures):
                inputs.append(70)
            else:
                inputs.append(round(random.uniform(70, 100), 1))

    # Generates Expected Answer
    if num_failures == 0:
        answer = ""Excellent""
    elif num_failures >= 1 and num_failures <= 2:
        answer = ""Satisfactory""
    else:
        answer = ""Unsatisfactory""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_5_grades.py"", inputs)
    
    print(""Testing when"", num_failures, ""out of"", num_papers, ""failed . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 2))):
        num_passed += 1
    
    if (run_test(2, random.randint(3, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
607,a2_5_gameday,4,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>The Academy Athletic Director asked you are to write a program that will determine whether or not a football game in progress should be delayed based on current weather conditions. Your program will ask for the number of lightning strikes occurred in the immediate area in the past thirty minutes. It will then ask for the distance from Falcon Stadium to each lightning strike (in miles, which do not have to be whole numbers). Your program will keep track of how many lightning strikes are within 15 miles of the stadium (inclusive). Your program will then print one of the following statements:</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong># of lightning strikes in immediate area</strong></td>
<td><strong>0</strong></td>
<td><strong>1-3</strong></td>
<td><strong>&gt;3</strong></td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>All Clear</td>
<td>Weather Warning</td>
<td>Game Delay</td>
</tr>
</tbody>
</table>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>INPUT</strong></td>
<td>
<p>4</p>
<p>15.0</p>
<p>13.2</p>
<p>6.5</p>
<p>9.8</p>
</td>
<td>
<p>3</p>
<p>17.8</p>
<p>15.1</p>
<p>19.0</p>
<p>&nbsp;</p>
</td>
</tr>
<tr>
<td><strong>OUTPUT</strong></td>
<td>Game Delay</td>
<td>All Clear</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, math

def run_test(num_close, num_strikes):    
    inputs = [num_strikes]
    
    for i in range(num_strikes):
        if i < num_close:
            if (i + 1 == num_close):
                inputs.append(15)
            else:
                inputs.append(round(random.uniform(0, 15), 1))
        else:
            inputs.append(round(random.uniform(15, 50), 1))

    # Generates Expected Answer
    if num_close == 0:
        answer = ""All Clear""
    elif num_close <= 2:
        answer = ""Weather Warning""
    else:
        answer = ""Game Delay""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_5_gameday.py"", inputs)
    
    print(""Testing when"", num_close, ""out of"", num_strikes, ""\""strikes\"" are are close . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(2, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 2))):
        num_passed += 1
    
    if (run_test(2, random.randint(4, 6))):
        num_passed += 1
    
    if (run_test(4, random.randint(4, 6))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
608,a2_5_combat,4,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You are writing a program that will determine whether or not a fighter pilot will need to make an evasive action when enemy aircraft are near. Your program will ask for the number of enemy planes in the area. It will then ask for the distance between the pilot and each of the enemy planes (in miles, which do not have to be whole numbers). Your program will keep track of how many enemy planes are within 20 miles of the pilot (inclusive). Your program will then print one of the following statements:</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong># of Enemy Planes in Area</strong></td>
<td><strong>0</strong></td>
<td><strong>1-2</strong></td>
<td><strong>&gt;2</strong></td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>All Clear</td>
<td>Warning</td>
<td>Evasive Action</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>INPUT</strong></td>
<td>
<p>3</p>
<p>10.5</p>
<p>17.2</p>
<p>23.7</p>
</td>
<td>
<p>3</p>
<p>21.4</p>
<p>34.0</p>
<p>27.9</p>
</td>
</tr>
<tr>
<td><strong>OUTPUT</strong></td>
<td>Warning</td>
<td>All Clear</td>
</tr>
</tbody>
</table>
</div>
","from cs110 import autograder
import random, math

def run_test(num_close, num_planes):    
    inputs = [num_planes]
    
    for i in range(num_planes):
        if i < num_close:
            if (i + 1 == num_close):
                inputs.append(20)
            else:
                inputs.append(round(random.uniform(0, 20), 1))
        else:
            inputs.append(round(random.uniform(20, 50), 1))

    # Generates Expected Answer
    if num_close == 0:
        answer = ""All Clear""
    elif num_close <= 2:
        answer = ""Warning""
    else:
        answer = ""Evasive Action""
        
    # Runs the Script
    output, error_message = autograder.run_script(""a2_5_combat.py"", inputs)
    
    print(""Testing when"", num_close, ""out of"", num_planes, ""are close . . . "")
    print(""  Inputs:"", inputs)
    print(""  Result: "", end='')
    
    if answer.strip() == output.strip():
        print(""CORRECT!\n"")
        return True
    else:
        print(""INCORRECT. Expected: '"" + answer + ""' instead of '"" + output + ""'\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    num_passed = 0
    
    if (run_test(0, random.randint(1, 5))):
        num_passed += 1
    
    if (run_test(1, random.randint(1, 2))):
        num_passed += 1
    
    if (run_test(2, random.randint(3, 5))):
        num_passed += 1
    
    if (run_test(3, random.randint(3, 5))):
        num_passed += 1
        
    return (100 / 4) * num_passed


# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,
609,a2_4_semic,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>You have been provided with a Python program that already contains code to get the following two items from the
        user:</p>
    <ul>
        <li><span style=""color: #3598db;""><strong>the_string</strong></span>:&nbsp; A semicolon-separated
            string.<br>Example: johnson81;4081;30no86;cj4081;Craig;Johnson;Depot;London</li>
        <li><span style=""color: #3598db;""><strong>column_to_print</strong></span>:&nbsp; A number indicating which item
            from the string to print.<br>NOTE:&nbsp; 0 indicates the first item in the string, 1 indicates the second,
            etc.</li>
    </ul>
    <p>Add code to this program that:</p>
    <ol>
        <li>Splits <span style=""color: #3598db;"">the_</span><span><span style=""color: #3598db;"">string </span>into
                separate items.</span></li>
        <li><span>Prints the number of items that result from splitting <span
                    style=""color: #3598db;"">the_string</span>&nbsp;(not the number of characters in the string).</span>
        </li>
        <li>Prints the item indicated by the <span style=""color: #3598db;"">column_to_print&nbsp;</span>value.</li>
    </ol>
    <p><strong>EXAMPLE:</strong></p>
    <p>If the user types:</p>
    <pre>johnson81;4081;30no86;cj4081;Craig;Johnson;Depot;London<br>2</pre>
    <p>Your program should output:</p>
    <pre>8<br>30no86</pre>
    <p><strong>HINT: A semicolon looks like this: ';'. On most keyboards it is located to the right of the 'L' key. If
            you cannot find it, ask an instructor for help.</strong></p>
</div>","from cs110 import autograder
import random

variant = ""semic""
verbose = False

variants = {
            ""validate"": {""delimiter"": '.'}, 
            ""comma""   : {""delimiter"": ','},
            ""pipe""    : {""delimiter"": '|'}, #
            ""amp""     : {""delimiter"": '&'}, #
            ""caret""   : {""delimiter"": '^'}, #
            ""dollar""  : {""delimiter"": '$'}, #
            ""hash""    : {""delimiter"": '#'}, #
            ""ques""    : {""delimiter"": '?'}, #
            ""semic""   : {""delimiter"": ';'}, #
            ""slash""   : {""delimiter"": '/'}, #
            ""star""    : {""delimiter"": '*'}, #
            ""colon""   : {""delimiter"": ':'}, #
            ""hyphen""  : {""delimiter"": '-'}, #
            ""score""   : {""delimiter"": '_'}, #
           }

delimiter_proper = variants[variant][""delimiter""]

def generate_test_string(delimiter):
    
    random_lists = [
                    [""booker12"",""9012"",""12se74"",""rb9012"",""Rachel"",""Booker"",""Sales"",""Coventry""],
                    [""grey07"",""2070"",""04ap67"",""lg2070"",""Laura"",""Grey"",""Depot"",""London""],
                    [""johnson81"",""4081"",""30no86"",""cj4081"",""Craig"",""Johnson"",""Shipping"",""Westminster""],
                    [""jenkins46"",""9346"",""14ju73"",""mj9346"",""Mary"",""Jenkins"",""Engineering"",""Liverpool""],
                    [""smith79"",""5079"",""09ja61"",""js5079"",""Jamie"",""Smith"",""Testing"",""Manchester""]
                   ]
    
    random_list = random_lists[random.randrange(len(random_lists))]
    random_column = random.randrange(len(random_list))
    test_string = """"
    for field in random_list:
        if test_string != """":
            test_string += delimiter
        test_string += field
    return test_string, random_column

def solution(delimiter, string, column_num):
    
    #print(""SOLUTION:"", string, delimiter, column_num, sep=""\n"")
    columns = string.split(delimiter)
    output = str(len(columns)) + '\n'
    output += columns[column_num] + '\n'
        
    return output

def print_test_results(test_score, actual_output, expected_output):

    if verbose:
        
        if test_score == 100:
            print(""CORRECT: %.1f%%"" % (test_score))
        else:
            print(""INCORRECT: %.1f%%"" % (test_score))
            print(""Expected:"")
            print(expected_output)

    else:

        if test_score == 100:
            print(""CORRECT"")
        else:
            print(""INCORRECT"")
            print(""Expected:"")
            print(expected_output)

def run1test(delimiter):

    # Rubric
    # 1 Runs without errors
    # 1 Prints out the correct item count (regardless of order)
    # 1 Prints out the correct item value (regardless of order)
    # 1 Prints out the items in the correct order (0.5 for each)

    test_score = 0
    test_max = 4
    
    test_string, random_column = generate_test_string(delimiter)
    output, error = autograder.run_script(""a2_4_%s.py"" % (variant), [ test_string, random_column ])
    expected_output = solution(delimiter, test_string, random_column)

    if error == """":
        test_score += 1
    
    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]
    
    expected_lines = expected_output.strip().split('\n')
    expected_count = expected_lines[0]
    expected_item = expected_lines[1]

    if returned_count in expected_lines:
        test_score += 1
    if returned_count == expected_count:
        test_score += 0.5
    
    if returned_item in expected_lines:
        test_score += 1
    if returned_item == expected_item:
        test_score += 0.5

    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)
    
    return test_score

def initial_test():
    global delimiter_used
    
    test_max = 12

    test_score = 1 # For testing against the server

    sensor_string = ""sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end""
    delimiter_column = 1

    detection_failed = False
    output, error   = autograder.run_script(""a2_4_%s.py"" % (variant), [ sensor_string, delimiter_column ])
    
    if error == """":
        test_score += 1
        if verbose: print(""+1 Running without error."")
    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)

    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]

    expected_lines = expected_output.strip().split('\n')
    #expected_count = expected_lines[0]
    #expected_item = expected_lines[1]

    if len(returned_lines) >= 1 and returned_lines[0] != '':
        test_score += 1
        if verbose: print(""+1 At least one line of output."")
    if len(returned_lines) == 2:
        test_score += 1
        if verbose: print(""+1 Exactly two lines of output."")
        
    if returned_count in expected_lines:
        test_score += 1
        if verbose: print(""+1 Count contained in output somewhere."")
    if returned_item in expected_lines:
        test_score += 1
        if verbose: print(""+1 Requested item contained in output somewhere."")

    detection_failed = len(returned_lines) < 2
    
    if verbose:
        print(""Delimiter Detection:"")
        if detection_failed:
            print(""Failed:"", returned_lines)
        else:
            print(""Detected delimiter: "", returned_lines[1])
            print(""Sensor fields: "", returned_lines[0])
    
    if variant in returned_lines:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is correct."")

    delimiter_used = None
    if (not detection_failed) and (returned_lines[1] in variants):
        delimiter_used = variants[returned_lines[1]][""delimiter""]

    if delimiter_used == delimiter_proper:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is proper."")

    if delimiter_used == None:
        delimiter_used = delimiter_proper
        
    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)

    return test_score
    
def test_passed():

    test_weights = [20, 12,4,4]
    test_total = sum(test_weights) - test_weights[0]
    if test_total != test_weights[0]:
        print(""Individual tests do not add to total value.\n"")
        
    score = 0
    test_num = 0
    #------------------------------------------------
    # Test #1: Sense delimiter used
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(test_weights[test_num]/test_total)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = initial_test()
    
    score += (test_score/100) * test_weight
    
    #------------------------------------------------
    # Test #2: Using detected delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    
    test_score = run1test(delimiter_used)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # Test #3: Use correct delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = run1test(delimiter_proper)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # End of Test
    #------------------------------------------------
    
    print(""\nOVERALL SCORE:"")
    return round(score,1)

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':   
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
610,a2_4_pipe,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p>You have been provided with a Python program that already contains code to get the following two items from the user:</p>
<ul>
<li><span style=""color: #3598db;""><strong>the_string</strong></span>:&nbsp; A pipe-separated string.<br>Example: johnson81|4081|30no86|cj4081|Craig|Johnson|Depot|London</li>
<li><span style=""color: #3598db;""><strong>column_to_print</strong></span>:&nbsp; A number indicating which item from the input string to print<br>NOTE:&nbsp; 0 indicates the first item in the string, 1 indicates the second, etc.</li>
</ul>
<p>Add code to this program that:</p>
<ol>
<li>Splits the<span> <span style=""color: #3598db;"">the_string </span>into separate items.</span></li>
<li><span>Prints the number of items that result from splitting <span style=""color: #3598db;"">the_string</span>&nbsp;(not the number of characters in the string).</span></li>
<li>Prints the item indicated by the <span style=""color: #3598db;"">column_to_print&nbsp;</span>value.</li>
</ol>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types:</p>
<pre>johnson81|4081|30no86|cj4081|Craig|Johnson|Depot|London<br>2</pre>
<p>Your program should output:</p>
<pre>8<br>30no86</pre>
<p>&nbsp;</p>
<p><strong>HINT: A pipe is this: '|'. On most keyboards it is located on the same key as the backslash ('\'). </strong><strong>If you cannot find it, ask an instructor for help.</strong></p>
</div>","from cs110 import autograder
import random

variant = ""pipe""
verbose = False

variants = {
            ""validate"": {""delimiter"": '.'}, 
            ""comma""   : {""delimiter"": ','},
            ""pipe""    : {""delimiter"": '|'}, #
            ""amp""     : {""delimiter"": '&'}, #
            ""caret""   : {""delimiter"": '^'}, #
            ""dollar""  : {""delimiter"": '$'}, #
            ""hash""    : {""delimiter"": '#'}, #
            ""ques""    : {""delimiter"": '?'}, #
            ""semic""   : {""delimiter"": ';'}, #
            ""slash""   : {""delimiter"": '/'}, #
            ""star""    : {""delimiter"": '*'}, #
            ""colon""   : {""delimiter"": ':'}, #
            ""hyphen""  : {""delimiter"": '-'}, #
            ""score""   : {""delimiter"": '_'}, #
           }

delimiter_proper = variants[variant][""delimiter""]

def generate_test_string(delimiter):
    
    random_lists = [
                    [""booker12"",""9012"",""12se74"",""rb9012"",""Rachel"",""Booker"",""Sales"",""Coventry""],
                    [""grey07"",""2070"",""04ap67"",""lg2070"",""Laura"",""Grey"",""Depot"",""London""],
                    [""johnson81"",""4081"",""30no86"",""cj4081"",""Craig"",""Johnson"",""Shipping"",""Westminster""],
                    [""jenkins46"",""9346"",""14ju73"",""mj9346"",""Mary"",""Jenkins"",""Engineering"",""Liverpool""],
                    [""smith79"",""5079"",""09ja61"",""js5079"",""Jamie"",""Smith"",""Testing"",""Manchester""]
                   ]
    
    random_list = random_lists[random.randrange(len(random_lists))]
    random_column = random.randrange(len(random_list))
    test_string = """"
    for field in random_list:
        if test_string != """":
            test_string += delimiter
        test_string += field
    return test_string, random_column

def solution(delimiter, string, column_num):
    
    #print(""SOLUTION:"", string, delimiter, column_num, sep=""\n"")
    columns = string.split(delimiter)
    output = str(len(columns)) + '\n'
    output += columns[column_num] + '\n'
        
    return output

def print_test_results(test_score, actual_output, expected_output):

    if verbose:
        
        if test_score == 100:
            print(""CORRECT: %.1f%%"" % (test_score))
        else:
            print(""INCORRECT: %.1f%%"" % (test_score))
            print(""Expected:"")
            print(expected_output)

    else:

        if test_score == 100:
            print(""CORRECT"")
        else:
            print(""INCORRECT"")
            print(""Expected:"")
            print(expected_output)

def run1test(delimiter):

    # Rubric
    # 1 Runs without errors
    # 1 Prints out the correct item count (regardless of order)
    # 1 Prints out the correct item value (regardless of order)
    # 1 Prints out the items in the correct order (0.5 for each)

    test_score = 0
    test_max = 4
    
    test_string, random_column = generate_test_string(delimiter)
    output, error = autograder.run_script(""a2_4_%s.py"" % (variant), [ test_string, random_column ])
    expected_output = solution(delimiter, test_string, random_column)

    if error == """":
        test_score += 1
    
    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]
    
    expected_lines = expected_output.strip().split('\n')
    expected_count = expected_lines[0]
    expected_item = expected_lines[1]

    if returned_count in expected_lines:
        test_score += 1
    if returned_count == expected_count:
        test_score += 0.5
    
    if returned_item in expected_lines:
        test_score += 1
    if returned_item == expected_item:
        test_score += 0.5

    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)
    
    return test_score

def initial_test():
    global delimiter_used
    
    test_max = 12

    test_score = 1 # For testing against the server

    sensor_string = ""sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end""
    delimiter_column = 1

    detection_failed = False
    output, error   = autograder.run_script(""a2_4_%s.py"" % (variant), [ sensor_string, delimiter_column ])
    
    if error == """":
        test_score += 1
        if verbose: print(""+1 Running without error."")
    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)

    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]

    expected_lines = expected_output.strip().split('\n')
    #expected_count = expected_lines[0]
    #expected_item = expected_lines[1]

    if len(returned_lines) >= 1 and returned_lines[0] != '':
        test_score += 1
        if verbose: print(""+1 At least one line of output."")
    if len(returned_lines) == 2:
        test_score += 1
        if verbose: print(""+1 Exactly two lines of output."")
        
    if returned_count in expected_lines:
        test_score += 1
        if verbose: print(""+1 Count contained in output somewhere."")
    if returned_item in expected_lines:
        test_score += 1
        if verbose: print(""+1 Requested item contained in output somewhere."")

    detection_failed = len(returned_lines) < 2
    
    if verbose:
        print(""Delimiter Detection:"")
        if detection_failed:
            print(""Failed:"", returned_lines)
        else:
            print(""Detected delimiter: "", returned_lines[1])
            print(""Sensor fields: "", returned_lines[0])
    
    if variant in returned_lines:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is correct."")

    delimiter_used = None
    if (not detection_failed) and (returned_lines[1] in variants):
        delimiter_used = variants[returned_lines[1]][""delimiter""]

    if delimiter_used == delimiter_proper:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is proper."")

    if delimiter_used == None:
        delimiter_used = delimiter_proper
        
    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)

    return test_score
    
def test_passed():

    test_weights = [20, 12,4,4]
    test_total = sum(test_weights) - test_weights[0]
    if test_total != test_weights[0]:
        print(""Individual tests do not add to total value.\n"")
        
    score = 0
    test_num = 0
    #------------------------------------------------
    # Test #1: Sense delimiter used
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(test_weights[test_num]/test_total)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = initial_test()
    
    score += (test_score/100) * test_weight
    
    #------------------------------------------------
    # Test #2: Using detected delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    
    test_score = run1test(delimiter_used)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # Test #3: Use correct delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = run1test(delimiter_proper)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # End of Test
    #------------------------------------------------
    
    print(""\nOVERALL SCORE:"")
    return round(score,1)

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':   
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
611,a2_4_hyphen,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p>You have been provided with a Python program that already contains code to get the following two items from the user:</p>
<ul>
<li><span style=""color: #3598db;""><strong>the_string</strong></span>:&nbsp; A hyphen-separated string.<br>Example: johnson81-4081-30no86-cj4081-Craig-Johnson-Depot-London</li>
</ul>
<ul>
<li><span style=""color: #3598db;""><strong>column_to_print</strong></span>:&nbsp; A number indicating which item from the string to print.<br>NOTE:&nbsp; 0 indicates the first item in the string, 1 indicates the second, etc.</li>
</ul>
<p>Add code to this program that:</p>
<ol>
<li>Splits <span style=""color: #3598db;"">the_</span><span><span style=""color: #3598db;"">string </span>into separate items.</span></li>
<li><span>Prints the number of items that result from splitting <span style=""color: #3598db;"">the_string</span>&nbsp;(not the number of characters in the string).</span></li>
<li>Prints the item indicated by the <span style=""color: #3598db;"">column_to_print&nbsp;</span>value.</li>
</ol>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types:</p>
<pre>johnson81-4081-30no86-cj4081-Craig-Johnson-Depot-London<br>2</pre>
<p>Your program should output:</p>
<pre>8<br>30no86</pre>
<p><strong>HINT: A hyphen (dash) is this: '-'. On most keyboards it is located to the right of the '0' key. </strong><strong>If you cannot find it, ask an instructor for help.</strong></p>
</div>","from cs110 import autograder
import random

variant = ""hyphen""
verbose = False

variants = {
            ""validate"": {""delimiter"": '.'}, 
            ""comma""   : {""delimiter"": ','},
            ""pipe""    : {""delimiter"": '|'}, #
            ""amp""     : {""delimiter"": '&'}, #
            ""caret""   : {""delimiter"": '^'}, #
            ""dollar""  : {""delimiter"": '$'}, #
            ""hash""    : {""delimiter"": '#'}, #
            ""ques""    : {""delimiter"": '?'}, #
            ""semic""   : {""delimiter"": ';'}, #
            ""slash""   : {""delimiter"": '/'}, #
            ""star""    : {""delimiter"": '*'}, #
            ""colon""   : {""delimiter"": ':'}, #
            ""hyphen""  : {""delimiter"": '-'}, #
            ""score""   : {""delimiter"": '_'}, #
           }

delimiter_proper = variants[variant][""delimiter""]

def generate_test_string(delimiter):
    
    random_lists = [
                    [""booker12"",""9012"",""12se74"",""rb9012"",""Rachel"",""Booker"",""Sales"",""Coventry""],
                    [""grey07"",""2070"",""04ap67"",""lg2070"",""Laura"",""Grey"",""Depot"",""London""],
                    [""johnson81"",""4081"",""30no86"",""cj4081"",""Craig"",""Johnson"",""Shipping"",""Westminster""],
                    [""jenkins46"",""9346"",""14ju73"",""mj9346"",""Mary"",""Jenkins"",""Engineering"",""Liverpool""],
                    [""smith79"",""5079"",""09ja61"",""js5079"",""Jamie"",""Smith"",""Testing"",""Manchester""]
                   ]
    
    random_list = random_lists[random.randrange(len(random_lists))]
    random_column = random.randrange(len(random_list))
    test_string = """"
    for field in random_list:
        if test_string != """":
            test_string += delimiter
        test_string += field
    return test_string, random_column

def solution(delimiter, string, column_num):
    
    #print(""SOLUTION:"", string, delimiter, column_num, sep=""\n"")
    columns = string.split(delimiter)
    output = str(len(columns)) + '\n'
    output += columns[column_num] + '\n'
        
    return output

def print_test_results(test_score, actual_output, expected_output):

    if verbose:
        
        if test_score == 100:
            print(""CORRECT: %.1f%%"" % (test_score))
        else:
            print(""INCORRECT: %.1f%%"" % (test_score))
            print(""Expected:"")
            print(expected_output)

    else:

        if test_score == 100:
            print(""CORRECT"")
        else:
            print(""INCORRECT"")
            print(""Expected:"")
            print(expected_output)

def run1test(delimiter):

    # Rubric
    # 1 Runs without errors
    # 1 Prints out the correct item count (regardless of order)
    # 1 Prints out the correct item value (regardless of order)
    # 1 Prints out the items in the correct order (0.5 for each)

    test_score = 0
    test_max = 4
    
    test_string, random_column = generate_test_string(delimiter)
    output, error = autograder.run_script(""a2_4_%s.py"" % (variant), [ test_string, random_column ])
    expected_output = solution(delimiter, test_string, random_column)

    if error == """":
        test_score += 1
    
    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]
    
    expected_lines = expected_output.strip().split('\n')
    expected_count = expected_lines[0]
    expected_item = expected_lines[1]

    if returned_count in expected_lines:
        test_score += 1
    if returned_count == expected_count:
        test_score += 0.5
    
    if returned_item in expected_lines:
        test_score += 1
    if returned_item == expected_item:
        test_score += 0.5

    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)
    
    return test_score

def initial_test():
    global delimiter_used
    
    test_max = 12

    test_score = 1 # For testing against the server

    sensor_string = ""sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end""
    delimiter_column = 1

    detection_failed = False
    output, error   = autograder.run_script(""a2_4_%s.py"" % (variant), [ sensor_string, delimiter_column ])
    
    if error == """":
        test_score += 1
        if verbose: print(""+1 Running without error."")
    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)

    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]

    expected_lines = expected_output.strip().split('\n')
    #expected_count = expected_lines[0]
    #expected_item = expected_lines[1]

    if len(returned_lines) >= 1 and returned_lines[0] != '':
        test_score += 1
        if verbose: print(""+1 At least one line of output."")
    if len(returned_lines) == 2:
        test_score += 1
        if verbose: print(""+1 Exactly two lines of output."")
        
    if returned_count in expected_lines:
        test_score += 1
        if verbose: print(""+1 Count contained in output somewhere."")
    if returned_item in expected_lines:
        test_score += 1
        if verbose: print(""+1 Requested item contained in output somewhere."")

    detection_failed = len(returned_lines) < 2
    
    if verbose:
        print(""Delimiter Detection:"")
        if detection_failed:
            print(""Failed:"", returned_lines)
        else:
            print(""Detected delimiter: "", returned_lines[1])
            print(""Sensor fields: "", returned_lines[0])
    
    if variant in returned_lines:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is correct."")

    delimiter_used = None
    if (not detection_failed) and (returned_lines[1] in variants):
        delimiter_used = variants[returned_lines[1]][""delimiter""]

    if delimiter_used == delimiter_proper:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is proper."")

    if delimiter_used == None:
        delimiter_used = delimiter_proper
        
    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)

    return test_score
    
def test_passed():

    test_weights = [20, 12,4,4]
    test_total = sum(test_weights) - test_weights[0]
    if test_total != test_weights[0]:
        print(""Individual tests do not add to total value.\n"")
        
    score = 0
    test_num = 0
    #------------------------------------------------
    # Test #1: Sense delimiter used
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(test_weights[test_num]/test_total)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = initial_test()
    
    score += (test_score/100) * test_weight
    
    #------------------------------------------------
    # Test #2: Using detected delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    
    test_score = run1test(delimiter_used)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # Test #3: Use correct delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = run1test(delimiter_proper)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # End of Test
    #------------------------------------------------
    
    print(""\nOVERALL SCORE:"")
    return round(score,1)

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':   
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
612,a2_4_hash,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p>You have been provided with a Python program that already contains code to get the following two items from the user:</p>
<ul>
<li><span style=""color: #3598db;""><strong>the_string</strong></span>:&nbsp; A hashtag-separated string.<br>Example: johnson81#4081#30no86#cj4081#Craig#Johnson#Depot#London</li>
<li><span style=""color: #3598db;""><strong>column_to_print</strong></span>:&nbsp; A number indicating which item from the string to print.<br>NOTE:&nbsp; 0 indicates the first item in the string, 1 indicates the second, etc.</li>
</ul>
<p>Add code to this program that:</p>
<ol>
<li>Splits <span style=""color: #3598db;"">the_</span><span><span style=""color: #3598db;"">string </span>into separate items.</span></li>
<li><span>Prints the number of items that result from splitting <span style=""color: #3598db;"">the_string</span>&nbsp;(not the number of characters in the string).</span></li>
<li>Prints the item indicated by the <span style=""color: #3598db;"">column_to_print&nbsp;</span>value.</li>
</ol>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types:</p>
<pre>johnson81#4081#30no86#cj4081#Craig#Johnson#Depot#London<br>2</pre>
<p>Your program should output:</p>
<pre><code>8</code><br><code>30no86</code></pre>
<p><strong>HINT: A hashtag (pound sign) looks like this: '#'. On most keyboards it is on the same key as the '3'. If you cannot find it, ask an instructor for help.</strong><strong></strong></p>
</div>","from cs110 import autograder
import random

variant = ""hash""
verbose = False

variants = {
            ""validate"": {""delimiter"": '.'}, 
            ""comma""   : {""delimiter"": ','},
            ""pipe""    : {""delimiter"": '|'}, #
            ""amp""     : {""delimiter"": '&'}, #
            ""caret""   : {""delimiter"": '^'}, #
            ""dollar""  : {""delimiter"": '$'}, #
            ""hash""    : {""delimiter"": '#'}, #
            ""ques""    : {""delimiter"": '?'}, #
            ""semic""   : {""delimiter"": ';'}, #
            ""slash""   : {""delimiter"": '/'}, #
            ""star""    : {""delimiter"": '*'}, #
            ""colon""   : {""delimiter"": ':'}, #
            ""hyphen""  : {""delimiter"": '-'}, #
            ""score""   : {""delimiter"": '_'}, #
           }

delimiter_proper = variants[variant][""delimiter""]

def generate_test_string(delimiter):
    
    random_lists = [
                    [""booker12"",""9012"",""12se74"",""rb9012"",""Rachel"",""Booker"",""Sales"",""Coventry""],
                    [""grey07"",""2070"",""04ap67"",""lg2070"",""Laura"",""Grey"",""Depot"",""London""],
                    [""johnson81"",""4081"",""30no86"",""cj4081"",""Craig"",""Johnson"",""Shipping"",""Westminster""],
                    [""jenkins46"",""9346"",""14ju73"",""mj9346"",""Mary"",""Jenkins"",""Engineering"",""Liverpool""],
                    [""smith79"",""5079"",""09ja61"",""js5079"",""Jamie"",""Smith"",""Testing"",""Manchester""]
                   ]
    
    random_list = random_lists[random.randrange(len(random_lists))]
    random_column = random.randrange(len(random_list))
    test_string = """"
    for field in random_list:
        if test_string != """":
            test_string += delimiter
        test_string += field
    return test_string, random_column

def solution(delimiter, string, column_num):
    
    #print(""SOLUTION:"", string, delimiter, column_num, sep=""\n"")
    columns = string.split(delimiter)
    output = str(len(columns)) + '\n'
    output += columns[column_num] + '\n'
        
    return output

def print_test_results(test_score, actual_output, expected_output):

    if verbose:
        
        if test_score == 100:
            print(""CORRECT: %.1f%%"" % (test_score))
        else:
            print(""INCORRECT: %.1f%%"" % (test_score))
            print(""Expected:"")
            print(expected_output)

    else:

        if test_score == 100:
            print(""CORRECT"")
        else:
            print(""INCORRECT"")
            print(""Expected:"")
            print(expected_output)

def run1test(delimiter):

    # Rubric
    # 1 Runs without errors
    # 1 Prints out the correct item count (regardless of order)
    # 1 Prints out the correct item value (regardless of order)
    # 1 Prints out the items in the correct order (0.5 for each)

    test_score = 0
    test_max = 4
    
    test_string, random_column = generate_test_string(delimiter)
    output, error = autograder.run_script(""a2_4_%s.py"" % (variant), [ test_string, random_column ])
    expected_output = solution(delimiter, test_string, random_column)

    if error == """":
        test_score += 1
    
    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]
    
    expected_lines = expected_output.strip().split('\n')
    expected_count = expected_lines[0]
    expected_item = expected_lines[1]

    if returned_count in expected_lines:
        test_score += 1
    if returned_count == expected_count:
        test_score += 0.5
    
    if returned_item in expected_lines:
        test_score += 1
    if returned_item == expected_item:
        test_score += 0.5

    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)
    
    return test_score

def initial_test():
    global delimiter_used
    
    test_max = 12

    test_score = 1 # For testing against the server

    sensor_string = ""sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end""
    delimiter_column = 1

    detection_failed = False
    output, error   = autograder.run_script(""a2_4_%s.py"" % (variant), [ sensor_string, delimiter_column ])
    
    if error == """":
        test_score += 1
        if verbose: print(""+1 Running without error."")
    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)

    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]

    expected_lines = expected_output.strip().split('\n')
    #expected_count = expected_lines[0]
    #expected_item = expected_lines[1]

    if len(returned_lines) >= 1 and returned_lines[0] != '':
        test_score += 1
        if verbose: print(""+1 At least one line of output."")
    if len(returned_lines) == 2:
        test_score += 1
        if verbose: print(""+1 Exactly two lines of output."")
        
    if returned_count in expected_lines:
        test_score += 1
        if verbose: print(""+1 Count contained in output somewhere."")
    if returned_item in expected_lines:
        test_score += 1
        if verbose: print(""+1 Requested item contained in output somewhere."")

    detection_failed = len(returned_lines) < 2
    
    if verbose:
        print(""Delimiter Detection:"")
        if detection_failed:
            print(""Failed:"", returned_lines)
        else:
            print(""Detected delimiter: "", returned_lines[1])
            print(""Sensor fields: "", returned_lines[0])
    
    if variant in returned_lines:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is correct."")

    delimiter_used = None
    if (not detection_failed) and (returned_lines[1] in variants):
        delimiter_used = variants[returned_lines[1]][""delimiter""]

    if delimiter_used == delimiter_proper:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is proper."")

    if delimiter_used == None:
        delimiter_used = delimiter_proper
        
    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)

    return test_score
    
def test_passed():

    test_weights = [20, 12,4,4]
    test_total = sum(test_weights) - test_weights[0]
    if test_total != test_weights[0]:
        print(""Individual tests do not add to total value.\n"")
        
    score = 0
    test_num = 0
    #------------------------------------------------
    # Test #1: Sense delimiter used
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(test_weights[test_num]/test_total)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = initial_test()
    
    score += (test_score/100) * test_weight
    
    #------------------------------------------------
    # Test #2: Using detected delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    
    test_score = run1test(delimiter_used)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # Test #3: Use correct delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = run1test(delimiter_proper)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # End of Test
    #------------------------------------------------
    
    print(""\nOVERALL SCORE:"")
    return round(score,1)

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':   
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
613,a2_4_colon,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>You have been provided with a Python program that already contains code to get the following two items from the
        user:</p>
    <ul>
        <li><span style=""color: #3598db;""><strong>the_string</strong></span>:&nbsp; A colon-separated
            string.<br>Example: johnson81:4081:30no86:cj4081:Craig:Johnson:Depot:London</li>
        <li><span style=""color: #3598db;""><strong>column_to_print</strong></span>:&nbsp; A number representing which
            item from the string to print.<br>NOTE:&nbsp; 0 indicates the first item in the string, 1 indicates the
            second, etc.</li>
    </ul>
    <p>Add code to this program that:</p>
    <ol>
        <li>Splits <span style=""color: #3598db;"">the_</span><span><span style=""color: #3598db;"">string </span>into
                separate items.</span></li>
        <li><span>Prints the number of items that result from splitting <span
                    style=""color: #3598db;"">the_string</span>&nbsp;(not the number of characters in the string).</span>
        </li>
        <li>Prints the item indicated by the <span style=""color: #3598db;"">column_to_print&nbsp;</span>value.</li>
    </ol>
    <p><strong>EXAMPLE:</strong></p>
    <p>If the user types:</p>
    <pre>johnson81:4081:30no86:cj4081:Craig:Johnson:Depot:London<br>2</pre>
    <p>Your program should output:</p>
    <pre>8<br>30no86</pre>
    <p><strong>HINT: A colon is this: ':'. On most keyboards it is located to the right of the 'L' key.
        </strong><strong>If you cannot find it, ask an instructor for help.</strong></p>
</div>","from cs110 import autograder
import random

variant = ""colon""
verbose = False

variants = {
            ""validate"": {""delimiter"": '.'}, 
            ""comma""   : {""delimiter"": ','},
            ""pipe""    : {""delimiter"": '|'}, #
            ""amp""     : {""delimiter"": '&'}, #
            ""caret""   : {""delimiter"": '^'}, #
            ""dollar""  : {""delimiter"": '$'}, #
            ""hash""    : {""delimiter"": '#'}, #
            ""ques""    : {""delimiter"": '?'}, #
            ""semic""   : {""delimiter"": ';'}, #
            ""slash""   : {""delimiter"": '/'}, #
            ""star""    : {""delimiter"": '*'}, #
            ""colon""   : {""delimiter"": ':'}, #
            ""hyphen""  : {""delimiter"": '-'}, #
            ""score""   : {""delimiter"": '_'}, #
           }

delimiter_proper = variants[variant][""delimiter""]

def generate_test_string(delimiter):
    
    random_lists = [
                    [""booker12"",""9012"",""12se74"",""rb9012"",""Rachel"",""Booker"",""Sales"",""Coventry""],
                    [""grey07"",""2070"",""04ap67"",""lg2070"",""Laura"",""Grey"",""Depot"",""London""],
                    [""johnson81"",""4081"",""30no86"",""cj4081"",""Craig"",""Johnson"",""Shipping"",""Westminster""],
                    [""jenkins46"",""9346"",""14ju73"",""mj9346"",""Mary"",""Jenkins"",""Engineering"",""Liverpool""],
                    [""smith79"",""5079"",""09ja61"",""js5079"",""Jamie"",""Smith"",""Testing"",""Manchester""]
                   ]
    
    random_list = random_lists[random.randrange(len(random_lists))]
    random_column = random.randrange(len(random_list))
    test_string = """"
    for field in random_list:
        if test_string != """":
            test_string += delimiter
        test_string += field
    return test_string, random_column

def solution(delimiter, string, column_num):
    
    #print(""SOLUTION:"", string, delimiter, column_num, sep=""\n"")
    columns = string.split(delimiter)
    output = str(len(columns)) + '\n'
    output += columns[column_num] + '\n'
        
    return output

def print_test_results(test_score, actual_output, expected_output):

    if verbose:
        
        if test_score == 100:
            print(""CORRECT: %.1f%%"" % (test_score))
        else:
            print(""INCORRECT: %.1f%%"" % (test_score))
            print(""Expected:"")
            print(expected_output)

    else:

        if test_score == 100:
            print(""CORRECT"")
        else:
            print(""INCORRECT"")
            print(""Expected:"")
            print(expected_output)

def run1test(delimiter):

    # Rubric
    # 1 Runs without errors
    # 1 Prints out the correct item count (regardless of order)
    # 1 Prints out the correct item value (regardless of order)
    # 1 Prints out the items in the correct order (0.5 for each)

    test_score = 0
    test_max = 4
    
    test_string, random_column = generate_test_string(delimiter)
    output, error = autograder.run_script(""a2_4_%s.py"" % (variant), [ test_string, random_column ])
    expected_output = solution(delimiter, test_string, random_column)

    if error == """":
        test_score += 1
    
    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]
    
    expected_lines = expected_output.strip().split('\n')
    expected_count = expected_lines[0]
    expected_item = expected_lines[1]

    if returned_count in expected_lines:
        test_score += 1
    if returned_count == expected_count:
        test_score += 0.5
    
    if returned_item in expected_lines:
        test_score += 1
    if returned_item == expected_item:
        test_score += 0.5

    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)
    
    return test_score

def initial_test():
    global delimiter_used
    
    test_max = 12

    test_score = 1 # For testing against the server

    sensor_string = ""sensor.validate.,comma,|pipe|#hash#$dollar$^caret^:colon:;semic;*star*&amp&?ques?-hyphen-/slash/_score_end""
    delimiter_column = 1

    detection_failed = False
    output, error   = autograder.run_script(""a2_4_%s.py"" % (variant), [ sensor_string, delimiter_column ])
    
    if error == """":
        test_score += 1
        if verbose: print(""+1 Running without error."")
    expected_output = solution(delimiter_proper, sensor_string, delimiter_column)

    returned_lines = output.strip().split('\n')
    returned_count = None
    returned_item = None
    if len(returned_lines) > 0:
        returned_count = returned_lines[0]
    if len(returned_lines) > 1:
        returned_item = returned_lines[1]

    expected_lines = expected_output.strip().split('\n')
    #expected_count = expected_lines[0]
    #expected_item = expected_lines[1]

    if len(returned_lines) >= 1 and returned_lines[0] != '':
        test_score += 1
        if verbose: print(""+1 At least one line of output."")
    if len(returned_lines) == 2:
        test_score += 1
        if verbose: print(""+1 Exactly two lines of output."")
        
    if returned_count in expected_lines:
        test_score += 1
        if verbose: print(""+1 Count contained in output somewhere."")
    if returned_item in expected_lines:
        test_score += 1
        if verbose: print(""+1 Requested item contained in output somewhere."")

    detection_failed = len(returned_lines) < 2
    
    if verbose:
        print(""Delimiter Detection:"")
        if detection_failed:
            print(""Failed:"", returned_lines)
        else:
            print(""Detected delimiter: "", returned_lines[1])
            print(""Sensor fields: "", returned_lines[0])
    
    if variant in returned_lines:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is correct."")

    delimiter_used = None
    if (not detection_failed) and (returned_lines[1] in variants):
        delimiter_used = variants[returned_lines[1]][""delimiter""]

    if delimiter_used == delimiter_proper:
        test_score += 3
        if verbose: print(""+3 Detected delimiter is proper."")

    if delimiter_used == None:
        delimiter_used = delimiter_proper
        
    test_score = round(100 * (test_score / test_max), 1)
    print_test_results(test_score, output, expected_output)

    return test_score
    
def test_passed():

    test_weights = [20, 12,4,4]
    test_total = sum(test_weights) - test_weights[0]
    if test_total != test_weights[0]:
        print(""Individual tests do not add to total value.\n"")
        
    score = 0
    test_num = 0
    #------------------------------------------------
    # Test #1: Sense delimiter used
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(test_weights[test_num]/test_total)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = initial_test()
    
    score += (test_score/100) * test_weight
    
    #------------------------------------------------
    # Test #2: Using detected delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    
    test_score = run1test(delimiter_used)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # Test #3: Use correct delimiter
    #------------------------------------------------
    test_num += 1
    test_weight = 100*(4/20)
    
    if verbose:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
    else:
        print(""\nTEST #%d (weight: %.1f%%)"" % (test_num, test_weight))
        
    test_score = run1test(delimiter_proper)
    
    score += (test_score/100) * test_weight

    #------------------------------------------------
    # End of Test
    #------------------------------------------------
    
    print(""\nOVERALL SCORE:"")
    return round(score,1)

# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':   
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,
614,a2_3_twenty_one,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p>You have been pro<span style=""color: #000000;"">vided with program that gets a number from the user and stores it in a variable called&nbsp;<strong>starting_number</strong>.&nbsp; &nbsp;</span></p>
<p><span style=""color: #000000;"">Write a program that prints all of the numbers between&nbsp;<strong>starting_number</strong>&nbsp;and&nbsp;<strong>0</strong>&nbsp;(including <strong>0</strong>), counting down by <strong>21</strong> each time.</span></p>
<p>&nbsp;</p>
<p><span style=""color: #000000;"">For example, if the user types <strong>84</strong>, your program should print:</span></p>
<pre><span style=""color: #000000;"">84</span><br><span style=""color: #000000;"">63</span><br><span style=""color: #000000;"">42</span><br><span style=""color: #000000;"">21</span><br><span style=""color: #000000;"">0</span></pre>
<p><span style=""color: #000000;"">Similarly, if the user types&nbsp;<strong>51</strong>, your program should print:</span></p>
<pre><span style=""color: #000000;"">51</span><br><span style=""color: #000000;"">30</span><br>9</pre>
<p>You may assume that the user will only enter positive numbers.</p>
<p><strong>HINT:</strong></p>
<ul>
<li>This problem can be solved using either a<span>&nbsp;</span><strong>for</strong><span>&nbsp;</span>or<span>&nbsp;</span><strong>while</strong><span>&nbsp;</span>loop.</li>
</ul>
</div>","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 21
    return result


def test_passed():    
    score = 0
    random_number = 126 + 21 * random.randint(1, 15)
    
    output, error = autograder.run_script(""a2_3_twenty_one.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    #Exactly correct
    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    #Mostly correct but added an extra value or included one less value: -2 points
    elif output.strip().split('\n') == expected_lines[:-1] or \
         output.strip().split('\n')[:-1] == expected_lines:
        print(""INCORRECT.  Expected:\n""+expected_string)
        score+=90
    else:
        print(""INCORRECT.  Expected:\n""+expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
615,a2_3_thirteen,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p>You h<span style=""color: #000000;"">ave been provided with program that gets a number from the user and stores it in a variable called&nbsp;<strong>starting_number</strong>.&nbsp; &nbsp;</span></p>
<p><span style=""color: #000000;"">Write a program that prints all of the numbers between&nbsp;<strong>starting_number</strong>&nbsp;and <strong>0</strong> (including <strong>0</strong>), counting down by <strong>13</strong> each time.</span></p>
<p>&nbsp;</p>
<p><span style=""color: #000000;"">For example, if the user types <strong>45</strong>, your program should print:</span></p>
<pre><span style=""color: #000000;"">45</span><br><span style=""color: #000000;"">32</span><br><span style=""color: #000000;"">19</span><br><span style=""color: #000000;"">6</span></pre>
<p><span style=""color: #000000;"">Similarly, if the user types <strong>39</strong>, your program should print:</span></p>
<pre><span style=""color: #000000;"">39</span><br><span style=""color: #000000;"">26</span><br><span style=""color: #000000;"">13</span><br><span style=""color: #000000;"">0</span></pre>
<p><span style=""color: #000000;"">You may assume that the user will only ente</span>r positive numbers.</p>
<p><strong>HINT:</strong></p>
<ul>
<li>This problem can be solved using either a<span>&nbsp;</span><strong>for</strong><span>&nbsp;</span>or<span>&nbsp;</span><strong>while</strong><span>&nbsp;</span>loop.</li>
</ul>
</div>","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 13
    return result


def test_passed():    
    score = 0
    random_number = 78 + 13 * random.randint(1, 15)
    
    output, error = autograder.run_script(""a2_3_thirteen.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    #Exactly correct
    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    #Mostly correct but added an extra value or included one less value: -2 points
    elif output.strip().split('\n') == expected_lines[:-1] or \
         output.strip().split('\n')[:-1] == expected_lines:
        print(""INCORRECT.  Expected:\n""+expected_string)
        score+=90
    else:
        print(""INCORRECT.  Expected:\n""+expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
616,a2_3_seventeen,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p><span style=""color: #000000;"">You have been provided with program that gets a number from the user and stores it in a variable called <strong>starting_number</strong>.&nbsp; &nbsp;</span></p>
<p><span style=""color: #000000;"">Write a program that prints all of the numbers between <strong>starting_number</strong> and <strong>0</strong> (including <strong>0</strong>), counting down by <strong>17</strong> each time.</span></p>
<p>&nbsp;</p>
<p><span style=""color: #000000;"">For example, if the user types <strong>45</strong>, your program should print:</span></p>
<pre><span style=""color: #000000;"">45</span><br><span style=""color: #000000;"">28</span><br><span style=""color: #000000;"">11</span></pre>
<p><span style=""color: #000000;"">Similarly, if the user types <strong>51</strong>, your program should print:</span></p>
<pre><span style=""color: #000000;"">51</span><br><span style=""color: #000000;"">34</span><br><span style=""color: #000000;"">17</span><br><span style=""color: #000000;"">0</span></pre>
<p><span style=""color: #000000;"">You may assume that t</span>he user will only enter positive numbers.</p>
<p><strong>HINT:</strong></p>
<ul>
<li>This problem can be solved using either a <strong>for</strong> or <strong>while</strong> loop.</li>
</ul>
</div>","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 17
    return result


def test_passed():    
    score = 0
    random_number = 102 + 17 * random.randint(1, 20)
    
    output, error = autograder.run_script(""a2_3_seventeen.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    #Exactly correct
    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    #Mostly correct but added an extra value or included one less value: -2 points
    elif output.strip().split('\n') == expected_lines[:-1] or \
         output.strip().split('\n')[:-1] == expected_lines:
        print(""INCORRECT.  Expected:\n""+expected_string)
        score+=90
    else:
        print(""INCORRECT.  Expected:\n""+expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
617,a2_3_nineteen,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p><span style=""color: #000000;"">You have been provided with program that gets a number from the user and stores it in a variable called&nbsp;<strong>starting_number</strong>.&nbsp; &nbsp;</span></p>
<p><span style=""color: #000000;"">Write a program that prints all of the numbers between&nbsp;<strong>starting_number</strong>&nbsp;and <strong>0</strong> (including <strong>0</strong>), counting down by <strong>19</strong> each time.</span></p>
<p>&nbsp;</p>
<p>For example, if the user t<span style=""color: #000000;"">ypes <strong>45</strong>, y</span>our program should print:</p>
<pre>45<br>26<br>7</pre>
<p>Similarly, if the user type<span style=""color: #000000;"">s <strong>57</strong>, y</span>our program should print:</p>
<pre>57<br>38<br>19<br>0</pre>
<p>You may assume that the user will only enter positive numbers.</p>
<p><strong>HINT:</strong></p>
<ul>
<li>This problem can be solved using either a<span>&nbsp;</span><strong>for</strong><span>&nbsp;</span>or<span>&nbsp;</span><strong>while</strong><span>&nbsp;</span>loop.</li>
</ul>
</div>","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 19
    return result


def test_passed():    
    score = 0
    random_number = 114 + 19 * random.randint(1, 20)
    
    output, error = autograder.run_script(""a2_3_nineteen.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    #Exactly correct
    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    #Mostly correct but added an extra value or included one less value: -2 points
    elif output.strip().split('\n') == expected_lines[:-1] or \
         output.strip().split('\n')[:-1] == expected_lines:
        print(""INCORRECT.  Expected:\n""+expected_string)
        score+=90
    else:
        print(""INCORRECT.  Expected:\n""+expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
618,a2_3_nine,4,skill,1,"<div><strong>PROBLEM STATEMENT: </strong></p>
<p>You have been provided with program that gets a number from the user and stores it in a variable called<span>&nbsp;</span> <span><strong>starting_number</strong></span>.&nbsp; &nbsp;</p>
<p>Write a program that prints all of the numbers between&nbsp;<strong>starting_number</strong>&nbsp;and&nbsp;<strong>0</strong> (including <strong>0</strong>), counting down by <strong>9</strong>&nbsp;each time.</p>
<p>&nbsp;</p>
<p>For example, if the user types<strong> <span>45</span></strong>, your program should print:</p>
<pre>45<br>36<br>27<br>18<br>9<br>0</pre>
<p>Similarly, if the user types <strong>50</strong>, your program should print:</p>
<pre>50<br>41<br>32<br>23<br>14<br>5</pre>
<p>You may assume that the user will only enter positive numbers.</p>
<p><strong>HINT:</strong></p>
<ul>
<li>This problem can be solved using either a<span>&nbsp;</span><strong>for</strong> or<span>&nbsp;</span><strong>while</strong> loop.</li>
</ul>
</div>","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 9
    return result


def test_passed():    
    score = 0
    random_number = 81 + 9 * random.randint(1, 30)
    
    output, error = autograder.run_script(""a2_3_nine.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    #Exactly correct
    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    #Mostly correct but added an extra value or included one less value: -2 points
    elif output.strip().split('\n') == expected_lines[:-1] or \
         output.strip().split('\n')[:-1] == expected_lines:
        print(""INCORRECT.  Expected:\n""+expected_string)
        score+=90
    else:
        print(""INCORRECT.  Expected:\n""+expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
619,a2_3_eighteen,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p>You have been provided with program that gets a number from the u<span style=""color: #000000;"">ser and stores it in a variable called&nbsp;<strong>starting_number</strong>.&nbsp; &nbsp;</span></p>
<p><span style=""color: #000000;"">Write a program that prints all of the numbers between&nbsp;<strong>starting_number</strong>&nbsp;and&nbsp;<strong>0</strong>&nbsp;(including <strong>0</strong>), counting down by <strong>18</strong> each time.</span></p>
<p>&nbsp;</p>
<p><span style=""color: #000000;"">For example, if the user types&nbsp;<strong>108</strong>, your program should print:</span></p>
<pre><span style=""color: #000000;"">108</span><br><span style=""color: #000000;"">90</span><br><span style=""color: #000000;"">72</span><br><span style=""color: #000000;"">54</span><br><span style=""color: #000000;"">36</span><br><span style=""color: #000000;"">18<br>0</span></pre>
<p><span style=""color: #000000;"">Similarly, if the user types<strong> 92</strong>, your program should print:</span></p>
<pre><span style=""color: #000000;"">92<br>74</span><br><span style=""color: #000000;"">56<br>38</span><br><span style=""color: #000000;"">20<br>2</span></pre>
<p><span style=""color: #000000;"">You may assume that the user will only enter positive numbers.</span></p>
<p><span style=""color: #000000;""><strong>HINT:</strong></span></p>
<ul>
<li><span style=""color: #000000;"">This problem can be solved using either a&nbsp;<strong>for</strong>&nbsp;or&nbsp;<strong>while</strong>&nbsp;loop.</span></li>
</ul>
</div>","from cs110 import autograder
import random, math


def solution(starting_num):
    result = ''
    i = starting_num
    
    while i >= 0:
    
        result += str(i) + ""\n""
        
        i = i - 18
    return result


def test_passed():    
    score = 0
    random_number = 108 + 18 * random.randint(1, 15)
    
    output, error = autograder.run_script(""a2_3_eighteen.py"", [random_number])
    expected_string = solution(random_number)
    lines = output.strip().split('\n')
    expected_lines = expected_string.strip().split('\n')

    #Exactly correct
    if output.strip() == expected_string.strip():
        print(""CORRECT"")
        score += 100
    #Mostly correct but added an extra value or included one less value: -2 points
    elif output.strip().split('\n') == expected_lines[:-1] or \
         output.strip().split('\n')[:-1] == expected_lines:
        print(""INCORRECT.  Expected:\n""+expected_string)
        score+=90
    else:
        print(""INCORRECT.  Expected:\n""+expected_string)
    
    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
620,a2_2_unladen,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>The airspeed velocity of an unladen swallow can be estimated using the following formula:<br /><br /></p>
<p><code>SPEED = 3 * F * A</code></p>
<p>&nbsp;</p>
<p>In this formula:</p>
<ul>
<li><strong>F</strong> is the number of wing flaps per minute (integer)</li>
<li><strong>A</strong> is the distance the wing travels (up and down) per wing flap (floating point number in meters)</li>
</ul>
<p>&nbsp;</p>
<p>Write a function called <strong>speed_of_unladen_swallow</strong> that takes <strong>F</strong> and <strong>A</strong> as parameters (in that order), and <strong>returns</strong> the speed in meters per minute. </p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li>You do NOT need to call this function. Simply define it.</li>
</ul>
<p>&nbsp;</p>
</div>
","from cs110 import autograder
import a2_2_unladen

def solution(S, A):
    return 3 * S * A


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'speed_of_unladen_swallow' in dir(a2_2_unladen):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'speed_of_unladen_swallow' in dir(a2_2_unladen) and \
        abs(a2_2_unladen.speed_of_unladen_swallow(15, 0.22) - solution(15, 0.22)) < 0.001:
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
621,a2_2_stride,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You can calculate a person's speed using the following formula:</p>
<p><code>Speed = Stride * SPM * .011</code></p>
<p>&nbsp;</p>
<p>In this formula:</p>
<ul>
<li><strong>Stride</strong> in inches (float)</li>
<li><strong>SPM </strong>is strides per minute (integer)</li>
</ul>
<p>&nbsp;</p>
<p>Write a function called <strong>person_speed</strong> that takes <strong>Stride</strong>&nbsp;and <strong>SPM</strong>&nbsp;as parameters (in that order), and <strong>returns</strong> the speed. </p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li>You do NOT need to call this function. Simply define it</li>
</ul>
</div>
","from cs110 import autograder
import a2_2_stride

def solution(S, SPM):
    return S * SPM * .011


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'person_speed' in dir(a2_2_stride):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'person_speed' in dir(a2_2_stride) and a2_2_stride.person_speed(32, 60) == solution(32, 60):
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
622,a2_2_speed,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You can calculate how fast a vehicle is moving in feet per minute using the following formula:<br /><br /></p>
<p><code>SPEED = RPM * Cir / 12</code></p>
<p>&nbsp;</p>
<p>In this formula:</p>
<ul>
<li><strong>RPM</strong> is the rotations per minute of the wheel (integer)</li>
<li><strong>Cir </strong>is the Circumference of the wheel (floating point number in inches)</li>
</ul>
<p>&nbsp;</p>
<p>Write a function called <strong>speed_fpm</strong> that takes <strong>RPM</strong> and <strong>Cir</strong> as parameters (in that order), and <strong>returns</strong> the speed in feet per minute. </p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li>You do NOT need to call this function. Simply define it.</li>
</ul>
</div>
","from cs110 import autograder
import a2_2_speed

def solution(RPM, Cir):
    return RPM * Cir / 12


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'speed_fpm' in dir(a2_2_speed):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'speed_fpm' in dir(a2_2_speed) and a2_2_speed.speed_fpm(10, 6.6) == solution(10, 6.6):
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
623,a2_2_orbit,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p>The oribt period of a planet can be calculated using the following formula:</p>
<p>&nbsp;</p>
<p style=""text-align: center;""><code>Period = (D * 3.14)/ V</code></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>In this formula:</p>
<ul>
<li><span><strong>D</strong>&nbsp;</span>is the diameter of the orbit path (a floating point number)</li>
<li><span><strong>V</strong>&nbsp;</span>is the velocity of the planet (a floating point number)</li>
</ul>
<p>&nbsp;</p>
<p>Write a function called<span>&nbsp;</span><strong>orbit_period</strong><span>&nbsp;</span>that takes <span><strong>D</strong></span><span>&nbsp;</span>and <strong><span>V</span></strong><span>&nbsp;</span>as parameters (in that order), and<span>&nbsp;</span><span style=""text-decoration: underline;""><strong>returns</strong>&nbsp;</span>the orbit period.&nbsp;&nbsp;</p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li>You do NOT need to call this function.&nbsp; Simply define it.</li>
</ul>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import a2_2_orbit

def solution(D, V):
    return (D*3.14)/V


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'orbit_period' in dir(a2_2_orbit):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'orbit_period' in dir(a2_2_orbit) and a2_2_orbit.orbit_period(15, 0.22) == solution(15, 0.22):
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
624,a2_2_hp,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM </strong><strong>STATEMENT:<br /></strong></p>
<p>You can calculate a car's horsepower by using the following formula:</p>
<p><code>Horsepower = RPM * Torque / 5252</code></p>
<p>&nbsp;</p>
<p>In this formula:</p>
<ul>
<li><strong>RPM </strong>is rotations per minute (integer)</li>
<li><strong>Torque</strong>&nbsp;in foot pounds (floating point number)</li>
</ul>
<p>&nbsp;</p>
<p>Write a function called&nbsp;<strong>horsepower</strong>&nbsp;that takes&nbsp;<strong>RPM</strong>&nbsp;and&nbsp;<strong>Torque</strong>&nbsp;as parameters (in that order), and&nbsp;<strong>returns</strong> the calculated horsepower. </p>
<p>&nbsp;</p>
<p><strong>NOTES:</strong></p>
<ul>
<li>You do NOT need to call this function. Simply define it</li>
</ul>
</div>
","from cs110 import autograder
import a2_2_hp

def solution(RPM, Torque):
    return RPM*Torque/5252


def test_passed():    
    score = 0
    
    print(""Feedback:"")
    
    if 'horsepower' in dir(a2_2_hp):
        print(""Function Defined"")
        score += 50
    else:
        print(""Function Not Defined"")
    
    if 'horsepower' in dir(a2_2_hp) and a2_2_hp.horsepower(4000, 600) == solution(4000, 600):
        print(""Function Returns Correct Value"")
        score += 50
    else:
        print(""Function Does NOT Return the Correct Value"")

    return score

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
625,a2_1_surface,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a function called calculate_surface, which takes two parameters:</p>
<ul>
<li><strong>radius</strong></li>
<li><strong>Pi</strong></li>
</ul>
<p>Call this function and pass it<strong> 5</strong>&nbsp;for <strong>radius</strong>, and <strong>3.141592653589793 </strong>for <strong>Pi</strong>. Store the result in a variable called&nbsp;<strong>result</strong>. Do not print. Simply call the function and store the returned value in the variable <strong>result</strong>.</p>
</div>
","from cs110 import autograder
from a2_1_surface import *  

def calculate_surface(radius, Pi):
    return 4*Pi*radius**2


def test_passed():
    solution = calculate_surface(5,  3.141592653589793 )
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)
    



# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
626,a2_1_right_triangle,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p>You have been provided with a function called calculate_hypotenuse, which takes two parameters:</p>
<ul>
<li><span style=""color: #3598db;""><strong>side_1</strong></span></li>
<li><span style=""color: #3598db;""><strong>side_2</strong></span></li>
</ul>
<p>Call this function and pass it&nbsp;<span style=""color: #e03e2d;""><strong>15</strong>&nbsp;</span>for&nbsp;<span style=""color: #3598db;""><strong>side_1</strong></span>, and&nbsp;<span style=""color: #e03e2d;""><strong>6.786</strong></span><sup>&nbsp;</sup>for <strong><span style=""color: #3598db;"">side_2</span></strong>.&nbsp; Store the result in a variable called&nbsp;<span style=""color: #3598db;""><strong>result</strong></span>.&nbsp; Do not print.&nbsp; Simply call the function, and store the returned value in the variable&nbsp;<span style=""color: #3598db;""><strong>result</strong></span>.</p>
</div>","from cs110 import autograder
from a2_1_right_triangle import *  

def calculate_hypotenuse(side_1, side_2):
    return (side_1**2+side_2**2)**.5


def test_passed():
    solution = calculate_hypotenuse(15, 6.786)
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    test_case_result = test_passed()
    print(""Unit Test Returned:"", test_case_result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
627,a2_1_future_value,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a function called calculate_future_value, which takes two parameters:</p>
<ul>
<li><strong>present_value</strong></li>
<li><strong>years</strong></li>
</ul>
<p>Call this function and pass it<strong> 50000</strong>&nbsp;for <strong>present_value</strong>, and&nbsp;<strong>25&nbsp;</strong>for&nbsp;<strong>years</strong>. Store the result in a variable called&nbsp;<strong>result</strong>. Do not print. Simply call the function and store the returned value in the variable&nbsp;<strong>result</strong>.</p>
</div>
","from cs110 import autograder
from a2_1_future_value import *  

def calculate_future_value(present_value, years):
    return present_value * (1 + 0.05/12) ** (years * 12)


def test_passed():
    solution = calculate_future_value(50000, 25)
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    test_case_result = test_passed()
    print(""Unit Test Returned:"", test_case_result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
628,a2_1_equation,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a function called calculate_equation, which takes two parameters:</p>
<ul>
<li><strong>value</strong></li>
<li><strong>C</strong></li>
</ul>
<p>Call this function and pass it <strong>355000</strong> for <strong>value</strong>, and <strong>2.99 * 10</strong><sup><strong>8</strong>&nbsp;</sup>for <strong>C</strong>. Store the result in a variable called <strong>result. </strong>Do not print. Simply call the function, and store the returned value in the variable <strong>result</strong>.</p>
</div>
","from cs110 import autograder
from a2_1_equation import *  

def calculate_equation(value, C):
    return value * (1.0 / 1 - (value**2)/(C*2))


def test_passed():
    solution = calculate_equation(35500, 29900)
    solution_prev = 35500 * (1.0 / (1 - (35500**2)/(29900**2))**0.5)
    
    print(""Feedback:"")
        
    if 'result' in globals() and (abs(result - solution) < 0.1 or abs(result - solution_prev) < 0.1):
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    test_case_result = test_passed()
    print(""Unit Test Returned:"", test_case_result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
629,a2_1_calculate_volume,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a function called calculate_volume, which takes two parameters:</p>
<ul>
<li><strong>radius</strong></li>
<li><strong>Pi</strong></li>
</ul>
<p>Call this function and pass it<strong> 15</strong>&nbsp;for&nbsp;<strong>radius</strong>, and&nbsp;<strong>3.141592653589793&nbsp;</strong>for&nbsp;<strong>Pi</strong>. Store the result in a variable called&nbsp;<strong>result</strong>. Do not print. Simply call the function and store the returned value in the variable&nbsp;<strong>result</strong>.</p>
</div>
","from cs110 import autograder
from a2_1_calculate_volume import *  

def calculate_volume(radius, pi):
    return pi * 4/3 * radius **3


def test_passed():
    solution = calculate_volume(15, 3.1415)
    
    print(""Feedback:"")
        
    if 'result' in globals() and abs(result - solution) < 0.1:
        print(""PASSED"")
        return 100
    elif 'result' not in globals():
        print(""FAILED.  Could not find variable 'result'"")
    elif result != solution:
        print(""FAILED.  Variable 'result' has the wrong value "" + str(result))
    else:
        print(""FAILED.  Something unexpected happened."")
    
    return 0

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    test_case_result = test_passed()
    print(""Unit Test Returned:"", test_case_result)",100,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
630,a1_6_pilot_quals,4,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>C-130 Pilot qualifications usually depend on a pilot's flight experience in terms of flight hours.</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong>C-130 Pilot Qualification</strong></td>
<td><strong>Flight Hours</strong></td>
</tr>
<tr>
<td>Upgrade Pilot</td>
<td>600</td>
</tr>
<tr>
<td>Aircraft Commander</td>
<td>800</td>
</tr>
<tr>
<td>Formation Lead</td>
<td>1000</td>
</tr>
<tr>
<td>Instructor Pilot</td>
<td>1250</td>
</tr>
<tr>
<td>Evaluator Pilot</td>
<td>1500</td>
</tr>
</tbody>
</table>
<p><br />Write a Python program that asks the user to enter the number of flight hours they currently have (does not need to be a whole number). Then, referencing the table above, print out all qualifications they should have achieved in the aircraft (one per line). If the their experience in the C-130 is more than 600 flight hours, output ""Co-Pilot"".</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width="""">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>1996</td>
<td>1156.7</td>
<td>535.4</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>
<p>Upgrade Pilot<br />Aircraft Commander<br />Formation Lead<br />Instructor Pilot<br />Evaluator Pilot</p>
</td>
<td>
<p>Upgrade Pilot<br />Aircraft Commander<br />Formation Lead</p>
</td>
<td>Co-Pilot</td>
</tr>
</tbody>
</table>
<p>NOTE: The qualifications can be listed in any order, so long as only the ones in range are printed.</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(hours):
    result = """"

    if hours < 600:
        result += ""Co-Pilot\n""

    if hours >= 600:
        result += ""Upgrade Pilot\n""

    if hours >= 800:
        result += ""Aircraft Commander\n""
        
    if hours >= 1000:
        result += ""Formation Lead\n""

    if hours >=1250:
        result += ""Instructor Pilot\n""

    if hours >= 1500:
        result += ""Evaluator Pilot\n""

    
    return result.strip().split('\n')


def run_test(hours):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", hours, ""hours"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_6_pilot_quals.py"", [hours], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(hours)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 600), 1))
    run_test(600)
    run_test(round(random.uniform(600, 799), 1))
    run_test(800)
    run_test(round(random.uniform(800, 999), 1))
    run_test(1000)
    run_test(round(random.uniform(1000, 1249), 1))
    run_test(1250)
    run_test(round(random.uniform(1250, 1499), 1))
    run_test(1500)
    run_test(2750)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
631,a1_6_payload,4,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>The USAF is known for its massive cargo transport capabilities. Below are the names of 5 aircraft, as well as their maximum payload capacity</p>
<p>&nbsp;</p>
<table border=""1"" cellpadding=""1px"">
<tbody>
<tr>
<td width="""">
<p><strong>Cargo Aircraft</strong></p>
</td>
<td width="""">
<p><strong>Maximum Load (inclusive, in Lbs. )</strong></p>
</td>
</tr>
<tr>
<td width="""">
<p>C-5 Galaxy</p>
</td>
<td width="""">
<p>285000</p>
</td>
</tr>
<tr>
<td width="""">
<p>C-17 Globemaster</p>
</td>
<td width="""">
<p>170900</p>
</td>
</tr>
<tr>
<td width="""">
<p>KC-10 Extender</p>
</td>
<td width="""">
<p>169000</p>
</td>
</tr>
<tr>
<td width="""">
<p>C-130 Hercules</p>
</td>
<td width="""">
<p>42000</p>
</td>
</tr>
<tr>
<td width="""">
<p>V-22 Osprey</p>
</td>
<td width="""">
<p>6000</p>
</td>
</tr>
</tbody>
</table>
<p><br />Write a Python program that asks the user to enter the payload weight (in Lbs.) that needs to be moved. Then, referencing the table, print out all of the Aircraft that could potentially carry that payload (one per line). If no aircraft can carry the payload, output ""Too Heavy for Airlift"".</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width="""">
<tbody>
<tr>
<td>&nbsp;</td>
<td>
<p><strong>Example 1</strong></p>
</td>
<td>
<p><strong>Example 2</strong></p>
</td>
<td>
<p><strong>Example 3</strong></p>
</td>
</tr>
<tr>
<td>
<p><strong>Input</strong></p>
</td>
<td>
<p>150000</p>
</td>
<td>
<p>250000</p>
</td>
<td>
<p>300000</p>
</td>
</tr>
<tr>
<td>
<p><strong>Output</strong></p>
</td>
<td>
<p>C-5 Galaxy</p>
<p>C-17 Globemaster</p>
<p>KC-10 Extender</p>
</td>
<td>
<p>C-5 Galaxy</p>
</td>
<td>
<p>Too Heavy for Airlift</p>
</td>
</tr>
</tbody>
</table>
<p>NOTE: The aircraft can be listed in any order, so long as only the ones capable of the lift are printed.</p>
</div>

","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(payload_weight):
    result = """"
    
    if payload_weight <= 6000:
        result += ""V-22 Osprey\n""

    if payload_weight <= 42000:
        result += ""C-130 Hercules\n""
        
    if payload_weight <= 169000:
        result += ""KC-10 Extender\n""

    if payload_weight <= 170900:
        result += ""C-17 Globemaster\n""

    if payload_weight <= 285000:
        result += ""C-5 Galaxy\n""

    if payload_weight > 285000:
        result += ""Too Heavy for Airlift\n""
    
    return result.strip().split('\n')


def run_test(payload_weight):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", payload_weight, ""lbs"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_6_payload.py"", [payload_weight], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(payload_weight)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 5999), 1))
    run_test(6000)
    run_test(round(random.uniform(6001, 41999), 1))
    run_test(42000)
    run_test(round(random.uniform(42001, 168999), 1))
    run_test(169000)
    run_test(round(random.uniform(169001, 170899), 1))
    run_test(170900)
    run_test(round(random.uniform(170901, 284999), 1))
    run_test(285000)
    run_test(300000)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
632,a1_6_missilethreat,4,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>According to intelligence reports, the North Korean military uses at least 5 different classes of Ballistic Missiles. The names of these missiles, as well as their maximum theoretical range, are provided below:</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong>Missile Class</strong></td>
<td><strong>Maximum Range (inclusive, in Kilometers)</strong></td>
</tr>
<tr>
<td>Hwasong-6</td>
<td>500</td>
</tr>
<tr>
<td>KN-11</td>
<td>1200</td>
</tr>
<tr>
<td>Musudan BM-25</td>
<td>4000</td>
</tr>
<tr>
<td>Hwasong-14</td>
<td>8000</td>
</tr>
<tr>
<td>Taepodong-2</td>
<td>12000</td>
</tr>
</tbody>
</table>
<p><br />Write a Python program that asks the user to enter the distance to a potential target (in Kilometers). Then, referencing the table, print out all of the Missile Classes that could potentially reach the target (one per line). If no missiles are in range, output ""Not in range"".</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width="""">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>1800</td>
<td>8000</td>
<td>18000</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Musudan BM-25<br />Hwason-14<br />Taepodong-2</td>
<td>
<p>Hwasong-14<br />Taepodong-2</p>
</td>
<td>Not in range</td>
</tr>
</tbody>
</table>
<p>NOTE: The missiles can be listed in any order, so long as only the ones in range are printed.</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(target_range):
    result = """"
    
    if target_range <= 500:
        result += ""Hwasong-6\n""

    if target_range <= 1200:
        result += ""KN-11\n""
        
    if target_range <= 4000:
        result += ""Musudan BM-25\n""

    if target_range <= 8000:
        result += ""Hwasong-14\n""

    if target_range <= 12000:
        result += ""Taepodong-2\n""

    if target_range > 12000:
        result += ""Not in range\n""
    
    return result.strip().split('\n')


def run_test(target_range):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", target_range, ""kilometers"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_6_missilethreat.py"", [target_range], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(target_range)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 499), 1))
    run_test(500)
    run_test(round(random.uniform(501, 1199), 1))
    run_test(1200)
    run_test(round(random.uniform(1201, 3999), 1))
    run_test(4000)
    run_test(round(random.uniform(4001, 7999), 1))
    run_test(8000)
    run_test(round(random.uniform(8001, 11999), 1))
    run_test(12000)
    run_test(12001)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
633,a1_6_evacuation,4,lab,1,"<html><head/><body><p><span style="" font-weight:600;"">PROBLEM STATEMENT:<br/></span></p><p>Terrorist groups in the past have created improvised explosive devices in various shapes and sizes. According to the National Counterterrorism Center, the following evacuation distances are appropriate for certain explosive devices.</p><table border=""1"" style="" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px;"" width=""200"" cellspacing=""0"" cellpadding=""0""><tr><td><p><span style="" font-weight:600;"">Explosive Container</span></p></td><td><p><span style="" font-weight:600;"">Evacuation Distance (inclusive, in Feet)</span></p></td></tr><tr><td><p>Pipe Bomb</p></td><td><p>850</p></td></tr><tr><td><p>Suitcase Bomb</p></td><td><p>1850</p></td></tr><tr><td><p>Sedan</p></td><td><p>2000</p></td></tr><tr><td><p>Cargo Van</p></td><td><p>2750</p></td></tr><tr><td><p>Semi-Trailer</p></td><td><p>7000</p></td></tr></table><p><br/>Write a Python program that asks the user to enter a distance to a device (in feet). Then, referencing the table, print out all of the explosive devices that could potentially reach a target at the specified distance (one per line). If no explosives can reach the specified distance, output &quot;Not in range&quot;.</p><p><span style="" font-weight:600;"">EXAMPLES:</span></p><table border=""1"" style="" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px;"" width=""200"" cellspacing=""0"" cellpadding=""0""><tr><td/><td><p><span style="" font-weight:600;"">Example 1</span></p></td><td><p><span style="" font-weight:600;"">Example 2</span></p></td><td><p><span style="" font-weight:600;"">Example 3</span></p></td></tr><tr><td><p><span style="" font-weight:600;"">Input</span></p></td><td><p>1900</p></td><td><p>2500</p></td><td><p>8000</p></td></tr><tr><td><p><span style="" font-weight:600;"">Output</span></p></td><td><p>Sedan<br/>Cargo Van<br/>Semi-Trailer</p></td><td><p>Cargo Van<br/>Semi-Trailer</p></td><td><p>Not in range</p></td></tr></table><p>NOTE: The devices can be listed in any order, so long as only the ones in range are printed.</p></body></html>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(target_range):
    result = """"
    
    if target_range <= 850:
        result += ""Pipe Bomb\n""

    if target_range <= 1850:
        result += ""Suitcase Bomb\n""
        
    if target_range <= 2000:
        result += ""Sedan\n""

    if target_range <= 2750:
        result += ""Cargo Van\n""

    if target_range <= 7000:
        result += ""Semi-Trailer\n""

    if target_range > 7000:
        result += ""Not in range\n""
    
    return result.strip().split('\n')


def run_test(target_range):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", target_range, ""feet"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_6_evacuation.py"", [target_range], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(target_range)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 899), 1))
    run_test(850)
    run_test(round(random.uniform(851, 1849), 1))
    run_test(1850)
    run_test(round(random.uniform(1851, 1999), 1))
    run_test(2000)
    run_test(round(random.uniform(2001, 2749), 1))
    run_test(2750)
    run_test(round(random.uniform(2751, 7999), 1))
    run_test(7000)
    run_test(7001)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
634,a1_6_digitalstorage,4,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Assume someone takes hundreds of photos on their smartphone every week. They are seeking the best and least expensive alternatives to store/share their images because their phone's storage capacity is limited. Using the table below, determine which storage options they should consider, assuming each image has an average file size of 6 MB.</p>
<p>&nbsp;</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong>Storage Option</strong></td>
<td><strong>Short Name</strong></td>
<td><strong>Number of Images (inclusive)</strong></td>
</tr>
<tr>
<td>CD-ROM (700 MB)</td>
<td>CD</td>
<td>116</td>
</tr>
<tr>
<td>DVD-ROM (4.7 GB)</td>
<td>DVD</td>
<td>780</td>
</tr>
<tr>
<td>USB Thumb Drive (16 GB)</td>
<td>USB Small</td>
<td>2660</td>
</tr>
<tr>
<td>USB Thumb Drive (64 GB)</td>
<td>USB Large</td>
<td>10600</td>
</tr>
<tr>
<td>Portable Hard Drive (256 GB)</td>
<td>Portable HDD</td>
<td>42600</td>
</tr>
</tbody>
</table>
<p><br />Write a Python program that asks the user to enter the number of images that need to be shared/stored (non-negative, whole number). Then, referencing the table above, print out all the storage options (by Short Name) capable of holding that many images (one per line). If no storage options are capable of storing that many images, output ""Consider Cloud Storage"".</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width="""">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>2000</td>
<td>4000</td>
<td>45000</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>USB Small<br />USB Large<br />Portable HDD</td>
<td>
<p>USB Large<br />Portable HDD</p>
</td>
<td>Consider Cloud Storage</td>
</tr>
</tbody>
</table>
<p>NOTE: The devices can be listed in any order, so long as only the ones in range are printed.</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(num_images):
    result = """"
    
    if num_images <= 116:
        result += ""CD\n""

    if num_images <= 780:
        result += ""DVD\n""
        
    if num_images <= 2660:
        result += ""USB Small\n""

    if num_images <= 10600:
        result += ""USB Large\n""

    if num_images <= 42600:
        result += ""Portable HDD\n""

    if num_images > 42600:
        result += ""Consider Cloud Storage\n""
    
    return result.strip().split('\n')


def run_test(num_images):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", num_images, ""images"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_6_digitalstorage.py"", [num_images], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(num_images)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(int(random.uniform(0, 115)))
    run_test(116)
    run_test(int(random.uniform(117, 779)))
    run_test(780)
    run_test(int(random.uniform(781, 2659)))
    run_test(2660)
    run_test(int(random.uniform(2661, 10599)))
    run_test(10600)
    run_test(int(random.uniform(10601, 42599)))
    run_test(42600)
    run_test(45000)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
635,a1_6_broadband,4,lab,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Choosing the right broadband speed for your internet connection depends on which online activities you plan on engaging while online. Using the table below, determine which activities are possible with a given broadband speed, given in Kilobits per second (Kbps).</p>
<p>&nbsp;</p>
<table border=""1"" width="""">
<tbody>
<tr>
<td><strong>Activity</strong></td>
<td><strong>Short Name</strong></td>
<td><strong>Minimum Broadband Speed <br />(inclusive, in Kbps)</strong></td>
</tr>
<tr>
<td>Social Media</td>
<td>Social Media</td>
<td>1000</td>
</tr>
<tr>
<td>Multiplayer Gaming</td>
<td>Gaming</td>
<td>4000</td>
</tr>
<tr>
<td>HD Video Conferencing</td>
<td>Video Conferencing</td>
<td>6000</td>
</tr>
<tr>
<td>File Downloading</td>
<td>File Downloads</td>
<td>10000</td>
</tr>
<tr>
<td>Stream Ultra HD 4K Video</td>
<td>HD 4K Video</td>
<td>25000</td>
</tr>
</tbody>
</table>
<p><br />Write a Python program that asks the user to enter the broadband speed in Kbps. Then, referencing the table above, print out all the activities (by Short Name) that can be achieved using that speed (one per line). If the broadband speed is less than 1000 Kbps, output ""Upgrade to Broadband"".</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width="""">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>8500</td>
<td>5000</td>
<td>750</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>
<p>Social Media<br />Gaming<br />Video Conferencing</p>
</td>
<td>
<p>Social Media<br />Gaming</p>
</td>
<td>Upgrade to Broadband</td>
</tr>
</tbody>
</table>
<p>NOTE: The activities can be listed in any order, so long as only the ones in range are printed.</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0


def solution(speed):
    result = """"
    
    if speed >= 1000:
        result += ""Social Media\n""

    if speed >= 4000:
        result += ""Gaming\n""
        
    if speed >= 6000:
        result += ""Video Conferencing\n""

    if speed >= 10000:
        result += ""File Downloads\n""

    if speed >= 25000:
        result += ""HD 4K Video\n""

    if speed < 1000:
        result += ""Upgrade to Broadband\n""
    
    return result.strip().split('\n')


def run_test(speed):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""------------------------------"")
    print(""Test"", num_tests_run, ""-"", speed, ""Kbps"")
    print(""------------------------------"")
    
    output, error_message = autograder.run_script(""a1_6_broadband.py"", [speed], True)
    lines = output.strip().split(""\n"")
    expected_answer = solution(speed)
    
    count = 0
    
    for answer in expected_answer:
        if answer in lines:
            print(""Expecting"", answer, "" . . . FOUND!"")
            count += 1
        else:
            print(""Expecting"", answer, "" . . . MISSING!"")
            
    if count == len(expected_answer) and len(expected_answer) == len(lines):
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    elif len(expected_answer) < len(lines):
        print(""Problems Detected - Your output has more lines than expected.\n"")
    else:
        print(""Problems Detected - Your output is missing one or more expected outputs.\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 999), 1))
    run_test(1000)
    run_test(round(random.uniform(1001, 4999), 1))
    run_test(4000)
    run_test(round(random.uniform(4001, 5999), 1))
    run_test(6000)
    run_test(round(random.uniform(6001, 9999), 1))
    run_test(10000)
    run_test(round(random.uniform(10001, 24999), 1))
    run_test(25000)
    run_test(30000)
    
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Testbench (to run on outside of zyBooks)
if __name__ == '__main__':
    class Console:
        def write(self, txt):
            print(txt, end='')
    
    test_passed()


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
636,a1_5_scuba,4,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Recreational SCUBA divers have to plan out how many air tanks they will need in order to safely dive. The amount varies per diver because each person consumes air at a different rate. This rate is commonly called Surface Air Consumption. You want to figure whether you can afford the air requirements for the trips that you are planning.</p>
<p>Write an algorithm that asks for:</p>
<ul>
<li>
<ul>
<li>The total dive time for the trip in minutes&nbsp;</li>
<li>The air budget (in dollars--do not worry about the dollar sign)</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then output:</p>
<ul>
<li>
<ul>
<li>The number of liters needed for the project.</li>
<li>The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)</li>
<li>Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of compressed air is greater than or not greater than the budget, respectfully.</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Assume that your Surface Air Consumption is <strong>14.5</strong> liters/minute, and that air costs <strong>2 cents</strong> per liter. You may assume that all inputs are non-negative numbers.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<p>&nbsp;</p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>180<br />70</td>
<td>
<p>120<br />30</p>
</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>2610.0<br />52.2<br />Within Budget</td>
<td>1740.0<br />34.800000000000004<br />Over Budget</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(target_minutes, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    
    total_liters = target_minutes*14.5
    total_cost = total_liters*.02
        
    if total_cost > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_5_scuba.py"", [target_minutes, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], total_liters):
        print(""Amount of Air Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount. Expected:"", total_liters)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], total_cost):
        print(""Cost of Air Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", total_cost)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    for x in range(4):
        run_test(round(random.uniform(10,100), 1), random.randint(10, 50))
    run_test(round(random.uniform(10,100), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
637,a1_5_runway,4,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:</strong></p>
<p>The CSAF has authorized new runways for any base that can accomplish the project under their current budget. The new runways will be solid concrete with their lengths measured in meters.</p>
<p>Write an algorithm that asks for:</p>
<ul>
<li>
<ul>
<li>The length of runway to be built (in meters)</li>
<li>The base&rsquo;s budget (in dollars--do not worry about the dollar sign, do not round to the nearest)</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then output:</p>
<ul>
<li>
<ul>
<li>The amount of concrete (in tons) needed for the base's runway</li>
<li>The estimated cost (in dollars--do not output a dollar sign)</li>
<li>Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of materials is greater than or not greater than the base's budget, respectfully.</li>
</ul>
</li>
</ul>
<p>Assume that each meter of runway<sup>&nbsp;</sup>requires<strong>&nbsp;2.5</strong>&nbsp;tons of concrete to build, and that concrete costs&nbsp;<strong>$75.50</strong>&nbsp;per ton. You may assume that all inputs are non-negative numbers.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td width=""214"">&nbsp;</td>
<td width=""215"">
<p>Example 1</p>
</td>
<td width=""214"">
<p>Example 2</p>
</td>
</tr>
<tr>
<td width=""214"">
<p>Input</p>
</td>
<td width=""215"">
<p>2000<br />400000</p>
</td>
<td width=""214"">
<p>1500<br />250000</p>
</td>
</tr>
<tr>
<td width=""214"">
<p>Output</p>
</td>
<td width=""215"">
<p>5000.0<br />377500.0<br />Within Budget</p>
</td>
<td width=""214"">
<p>3750.0<br />283125.0<br />Over Budget</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(runway_length, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    tons_of_concrete = 2.5 * runway_length
    cost_of_materials = 75.50 * tons_of_concrete
    if cost_of_materials > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_5_runway.py"", [runway_length, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], tons_of_concrete):
        print(""Amount of Concrete Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount. Expected:"", tons_of_concrete)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):
        print(""Cost of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", cost_of_materials)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(500, 3000), 1), random.randint(100000, 500000))
    run_test(round(random.uniform(500, 3000), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)












# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
638,a1_5_printer,4,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>A 3D printer converts computer generated models into physical objects by heating and extruding a filament known as Polylactic Acid (PLA). PLA, normally sold in spools, is directly fed to the printer head like a thread. You want to determine if you can afford to 3D print a project given its volume of material.</p>
<p>Write an algorithm that asks for:</p>
<ul>
<li>
<ul>
<li>The volume of the 3D model to be printed (in cm<sup>3</sup>)</li>
<li>The user's budget (in dollars--do not worry about the dollar sign, do not round to the nearest)</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then output:</p>
<ul>
<li>
<ul>
<li>The length of material (in meters) needed to produce the object</li>
<li>The estimated cost (in dollars--do not output a dollar sign)</li>
<li>Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of materials is greater than or not greater than the user's budget, respectfully.</li>
</ul>
</li>
</ul>
<p>Assume that each cm<sup>3&nbsp;</sup>requires<strong>&nbsp;0.312</strong>&nbsp;meters of PLA to print, and that PLA filament costs&nbsp;<strong>$0.063</strong>&nbsp;per meter. You may assume that all inputs are non-negative numbers.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td>Example 1</td>
<td>Example 2</td>
</tr>
<tr>
<td>Input</td>
<td>15.0<br />2.5</td>
<td>500.0<br />5.0</td>
</tr>
<tr>
<td>Output</td>
<td>4.68<br />0.29484<br />Within Budget</td>
<td>156.0<br />9.828<br />Over Budget</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(volume, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    length_of_materials = 0.312 * volume
    cost_of_materials = 0.063 * length_of_materials
    if cost_of_materials > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_5_printer.py"", [volume, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], length_of_materials):
        print(""Length of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Length. Expected:"", length_of_materials)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):
        print(""Cost of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", cost_of_materials)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(0, 100), 1), random.randint(10, 50))
    run_test(round(random.uniform(0, 100), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
639,a1_5_paint,4,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You are tasked to paint a large wall and need to see if your unit can afford the paint for the project</p>
<p>Write an algorithm that asks for:</p>
<ul>
<li>
<ul>
<li>The size of the wall in square feet</li>
<li>The budget (in dollars--do not worry about the dollar sign)</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then output:</p>
<ul>
<li>
<ul>
<li>The amount of paint required to cover the wall</li>
<li>The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)</li>
<li>Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of paint is greater than or not greater than the budget, respectfully.</li>
</ul>
</li>
</ul>
<p>Assume that a gallon of paint covers <strong>15</strong> square feet, and that the current price of paint is&nbsp;<strong>$12.23</strong>&nbsp;per gallon. You may assume that all inputs are non-negative numbers. You should also assume that you can purchase portions of gallons of paint so do NOT round up to the nearest full gallon.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width=>
<tbody>
<tr>
<td>&nbsp;</td>
<td>Example 1</td>
<td>Example 2</td>
</tr>
<tr>
<td>Input</td>
<td>120.0<br />900.0</td>
<td>
<p>750.0<br />100.0</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>8.0<br />97.84<br />Within Budget</td>
<td>50.0<br />611.5<br />Over Budget</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(target_distance, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    fuel_required = target_distance / 15
    cost_of_materials = 12.23 * fuel_required
    
    if cost_of_materials > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_5_paint.py"", [target_distance, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], fuel_required):
        print(""Amount of Paint Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount of Paint. Expected:"", fuel_required)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):
        print(""Cost of Paint Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost of Paint. Expected:"", cost_of_materials)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(500, 3000), 1), random.randint(100000, 500000))
    run_test(round(random.uniform(500, 3000), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
640,a1_5_fueldepot,4,lab,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Fuel in the military is essential to conducting operations. Balancing mission requirements against budgetary constraints is a constant concern.</p>
<p>Write an algorithm that asks for:</p>
<ul>
<li>
<ul>
<li>The distance to a target in miles</li>
<li>The budget (in dollars--do not worry about the dollar sign)</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p>Your program should then output:</p>
<ul>
<li>
<ul>
<li>The amount of fuel (in gallons) needed to reach the target</li>
<li>The estimated cost (in dollars--do not output a dollar sign, do not round to the nearest)</li>
<li>Either ""Over Budget"" or ""Within Budget"", depending on whether the cost of fuel is greater than or not greater than the budget, respectfully.</li>
</ul>
</li>
</ul>
<p>Assume that the convoy can get<strong>&nbsp;12.5</strong>&nbsp;miles to the gallon, and that the current price of fuel is&nbsp;<strong>$3.73</strong>&nbsp;per gallon. You may assume that all inputs are non-negative numbers.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width="""">
<tbody>
<tr>
<td>&nbsp;</td>
<td>Example 1</td>
<td>Example 2</td>
</tr>
<tr>
<td>Input</td>
<td>130.7<br />50.50</td>
<td>
<p>750<br />100</p>
</td>
</tr>
<tr>
<td>Output</td>
<td>10.456<br />39.0009<br />Within Budget</td>
<td>60.0<br />223.80<br />Over Budget</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(target_distance, budget):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Test #"" + str(num_tests_run))
    print(""----------------------------------"")
    
    fuel_required = target_distance / 12.5
    cost_of_materials = 3.73 * fuel_required
    
    if cost_of_materials > budget:
        expected_output = ""Over Budget""
    else:
        expected_output = ""Within Budget""
    
    output, error_message = autograder.run_script(""a1_5_fueldepot.py"", [target_distance, budget])
    
    lines = output.split(""\n"")
    
    # Length of Materials
    if len(lines) >= 1 and autograder.equals(lines[0], fuel_required):
        print(""Amount of Fuel Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Amount. Expected:"", fuel_required)

    # Cost of Materials
    if len(lines) >= 2 and autograder.equals(lines[1], cost_of_materials):
        print(""Cost of Materials Looks Good!"")
        num_tests_passed += 0.33
    else:
        print(""Incorrect Cost. Expected:"", cost_of_materials)
        
    # Cost Analysis
    if len(lines) >= 3 and lines[2].strip() == expected_output:
        print(""Correct Budget Analysis\n"")
        num_tests_passed += 0.34
    else:
        print(""Incorrect Budget Analysis. Expected:"", expected_output, ""\n"")

    return round((num_tests_passed / num_tests_run) * 100.0, 1)

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(500, 3000), 1), random.randint(100000, 500000))
    run_test(round(random.uniform(500, 3000), 1), 0)
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
641,a1_4_sickness,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong>You have been provided with a template that gets the following values from
    the user:</p>
    <ul>
        <li>Body temperature (in Fahrenheit)</li>
        <li>Body aches (<strong><span style=""text-decoration: underline;"">a string</span></strong>, which will be either
            ""yes"" or ""no"")</li>
        <li>Loss of smell (<span style=""text-decoration: underline;""><strong>a string</strong></span>, which will be
            either ""yes"" or ""no"")</li>
    </ul>
    <p>&nbsp;</p>
    <p>Using the following rules as a guide, have your program determine a person's risk of having an infectious
        disease:</p>
    <ol>
        <li>If the person's temperature is above 100.4 degrees, print ""High Risk""</li>
        <li>If the person is experiencing both body aches and loss of smell, print ""High Risk""</li>
        <li>For all other situations, print ""Low Risk""</li>
    </ol>
    <p>&nbsp;</p>
    <p style=""text-align: left;""><strong>EXAMPLE:<br></strong></p>
    <table style=""border-collapse: collapse; width: 78.1598%; height: 182px; margin-left: auto; margin-right: auto;""
        border=""1"">
        <tbody>
            <tr>
                <td style=""width: 33.3333%; text-align: center;""></td>
                <td style=""width: 33.3333%; text-align: center;""><strong>Example 1</strong></td>
                <td style=""width: 33.3333%; text-align: center;""><strong>Example 2</strong></td>
            </tr>
            <tr>
                <td style=""width: 33.3333%; text-align: center;"">Input</td>
                <td style=""width: 33.3333%; text-align: center;"">
                    <p>99.0<br>yes<br>yes</p>
                </td>
                <td style=""width: 33.3333%; text-align: center;"">100.4<br>no<br>yes</td>
            </tr>
            <tr>
                <td style=""width: 33.3333%; text-align: center;"">Output</td>
                <td style=""width: 33.3333%; text-align: center;"">High Risk</td>
                <td style=""width: 33.3333%; text-align: center;"">Low Risk</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def run_test(temperature, body_aches, loss_of_smell, expected_output):
    output, error = autograder.run_script(""a1_4_sickness.py"", [temperature, body_aches, loss_of_smell])
    lines = output.split('\n')
    
    if len(lines) >= 4:
        if lines[3] == expected_output:
            print(""Correct Output\n"")
            return True
        else:
            print(""Incorrect Output.  Expected"", expected_output, '\n')
            return False
    else:
        print(""No Output Found\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    num_tests_passed = 0
    
    testcase_library = [(round(random.uniform(98.0, 99.9), 1), ""yes"", ""no"", ""Low Risk""),
                        (round(random.uniform(100.5, 102.0), 1), ""yes"", ""yes"", ""High Risk""),
                        (round(random.uniform(98.0, 99.9), 1), ""yes"", ""yes"", ""High Risk""),
                        (round(random.uniform(100.5, 102.0), 1), ""no"", ""no"", ""High Risk"")]
    
    for i in range(len(testcase_library)):
        print(""-------------------"")
        print(""Test"", i+1, ""of"", len(testcase_library))
        print(""-------------------"")
        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):
            num_tests_passed += 1
    
    return round(100 / len(testcase_library) * num_tests_passed, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
642,a1_4_run,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong>You have been provided with a template that gets the following values from
    the user:</p>
    <ul>
        <li>Outside Temperature (in Fahrenheit)</li>
        <li>Is it daytime? <span style=""text-decoration: underline;""><strong>(a string</strong></span> that will be
            either ""yes"" or ""no"")</li>
        <li>Is it raining? (<span style=""text-decoration: underline;""><strong>a string </strong></span>that will be
            either ""yes"" or ""no"")</li>
    </ul>
    <p>&nbsp;</p>
    <p>Using the following rules as a guide, have your program determine if you go on a run:</p>
    <ol>
        <li>If the outside temperature is above 95 degrees, print ""Do Not Run""</li>
        <li>If it is daytime and it is NOT raining, print ""Go Run""</li>
        <li>For all other situations, print ""Do Not Run""</li>
    </ol>
    <p>&nbsp;</p>
    <p><strong>EXAMPLE:<br></strong></p>
    <table border=""1"">
        <tbody>
            <tr>
                <td></td>
                <td><strong>Example 1</strong></td>
                <td><strong>Example 2</strong></td>
                <td><strong>Example 3</strong></td>
            </tr>
            <tr>
                <td>Input</td>
                <td>
                    <p>99.0<br>yes<br>no</p>
                </td>
                <td>80<br>yes<br>no</td>
                <td>75<br>no<br>yes</td>
            </tr>
            <tr>
                <td>Output</td>
                <td>Do Not Run</td>
                <td>Go Run</td>
                <td>Do Not Run</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def run_test(temperature, daytime, raining, expected_output):
    output, error = autograder.run_script(""a1_4_run.py"", [temperature, daytime, raining])
    lines = output.split('\n')
    
    if len(lines) >= 4:
        if lines[3] == expected_output:
            print(""Correct Output\n"")
            return True
        else:
            print(""Incorrect Output.  Expected"", expected_output, '\n')
            return False
    else:
        print(""No Output Found\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    num_tests_passed = 0
    
    testcase_library = [(round(random.uniform(93.0, 94.9), 1), ""yes"", ""no"", ""Go Run""),
                        (round(random.uniform(93.0, 94.9), 1), ""no"", ""yes"", ""Do Not Run""),
                        (round(random.uniform(93.0, 94.9), 1), ""no"", ""no"", ""Do Not Run""),
                        (round(random.uniform(100.5, 102.0), 1), ""no"", ""yes"", ""Do Not Run""),
                        (round(random.uniform(100.5, 102.0), 1), ""yes"", ""yes"", ""Do Not Run""),
                        (95.0, ""yes"", ""no"", ""Go Run"")]
    
    for i in range(len(testcase_library)):
        print(""-------------------"")
        print(""Test"", i+1, ""of"", len(testcase_library))
        print(""-------------------"")
        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):
            num_tests_passed += 1
    
    return round(100 / len(testcase_library) * num_tests_passed, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
643,a1_4_pt,4,skill,1,"<div><strong>PROBLEM STATEMENT: <br></strong>You have been provided with a template that gets the following values from
    the user:</p>
    <ul>
        <li>Outside Temperature (in Fahrenheit)</li>
        <li>Is it raining? (<span style=""text-decoration: underline;""><strong>a string</strong></span>, which will be
            either ""yes"" or ""no"")</li>
        <li>Winds over 20 knots? (<span style=""text-decoration: underline;""><strong>a string</strong></span>, which will
            be either ""yes"" or ""no"")</li>
    </ul>
    <p>&nbsp;</p>
    <p>Using the following rules as a guide, have your program determine if PT is cancelled or a go:</p>
    <ol>
        <li>If the outside temperature is above 90 degrees, print ""PT Cancelled""</li>
        <li>If it is raining and there are winds over 20 knots print ""PT Cancelled""</li>
        <li>For all other situations, print ""PT is a Go""</li>
    </ol>
    <p>&nbsp;</p>
    <p><strong>EXAMPLE: <br></strong></p>
    <table style=""width: 475px; height: 240px;"" border=""1"">
        <tbody>
            <tr>
                <td style=""width: 96px;""></td>
                <td style=""width: 126px;""><strong>Example 1</strong></td>
                <td style=""width: 127px;""><strong>Example 2</strong></td>
                <td style=""width: 114px;""><strong>Example 3</strong></td>
            </tr>
            <tr>
                <td style=""width: 96px;"">Input</td>
                <td style=""width: 126px;"">
                    <p>99.0 <br>no <br>no</p>
                </td>
                <td style=""width: 127px; vertical-align: middle;"">85 <br>yes <br>yes</td>
                <td style=""width: 114px; vertical-align: middle;"">85 <br>no <br>yes</td>
            </tr>
            <tr>
                <td style=""width: 96px;"">Output</td>
                <td style=""width: 126px;"">PT Cancelled</td>
                <td style=""width: 127px;"">PT Cancelled</td>
                <td style=""width: 114px;"">PT is a Go</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def run_test(temperature, raining, winds, expected_output):
    output, error = autograder.run_script(""a1_4_pt.py"", [temperature, raining, winds])
    lines = output.split('\n')
    
    if len(lines) >= 4:
        if lines[3] == expected_output:
            print(""Correct Output\n"")
            return True
        else:
            print(""Incorrect Output.  Expected"", expected_output, '\n')
            return False
    else:
        print(""No Output Found\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    num_tests_passed = 0
    
    testcase_library = [(round(random.uniform(72.0, 90), 1), ""no"", ""no"", ""PT is a Go""),
                        (round(random.uniform(100.5, 102.0), 1), ""yes"", ""yes"", ""PT Cancelled""),
                        (round(random.uniform(72.0, 90), 1), ""yes"", ""no"", ""PT is a Go""),
                        (round(random.uniform(100.5, 102.0), 1), ""no"", ""no"", ""PT Cancelled""),
                        (round(random.uniform(72.0, 90), 1), ""yes"", ""yes"", ""PT Cancelled"")]
    
    for i in range(len(testcase_library)):
        print(""-------------------"")
        print(""Test"", i+1, ""of"", len(testcase_library))
        print(""-------------------"")
        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):
            num_tests_passed += 1
    
    return round(100 / len(testcase_library) * num_tests_passed, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
644,a1_4_dog,4,skill,1,"<div><strong>PROBLEM STATEMENT: <br></strong>You have been provided with a template that gets the following values from
    the user:</p>
    <ul>
        <li>Outside Temperature (in Fahrenheit)</li>
        <li>Is it raining? (<span style=""text-decoration: underline;""><strong>a string </strong></span>that will be
            either ""yes"" or ""no"")</li>
        <li>Is it daytime? (<span style=""text-decoration: underline;""><strong>a string </strong></span>that will be
            either ""yes"" or ""no"")</li>
    </ul>
    <p>&nbsp;</p>
    <p>Using the following rules as a guide, have your program determine if the dog is outside:</p>
    <ol>
        <li>If the outside temperature is above 85 degrees, print ""Dog Inside""</li>
        <li>If it is raining outside and it is NOT daytime, print ""Dog Inside""</li>
        <li>For all other situations, print ""Dog Outside""</li>
    </ol>
    <p>&nbsp;</p>
    <p><strong>EXAMPLE: <br></strong></p>
    <table border=""1"">
        <tbody>
            <tr>
                <td></td>
                <td><strong>Example 1</strong></td>
                <td><strong>Example 2</strong></td>
                <td><strong>Example 3</strong></td>
            </tr>
            <tr>
                <td>Input</td>
                <td>
                    <p>99.0 <br>no <br>yes</p>
                </td>
                <td>80 <br>yes <br>no</td>
                <td>75 <br>no <br>yes</td>
            </tr>
            <tr>
                <td>Output</td>
                <td>Dog Inside</td>
                <td>Dog Inside</td>
                <td>Dog Outside</td>
            </tr>
        </tbody>
    </table>
    <p>&nbsp;</p>
</div>","from cs110 import autograder
import random, math

def run_test(temperature, raining, daytime, expected_output):
    output, error = autograder.run_script(""a1_4_dog.py"", [temperature, raining, daytime])
    lines = output.split('\n')
    
    if len(lines) >= 4:
        if lines[3] == expected_output:
            print(""Correct Output\n"")
            return True
        else:
            print(""Incorrect Output.  Expected"", expected_output, '\n')
            return False
    else:
        print(""No Output Found\n"")
        return False

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    score = 0
    num_tests_passed = 0
    
    testcase_library = [(round(random.uniform(83.0, 84.9), 1), ""no"", ""yes"", ""Dog Outside""),
                        (round(random.uniform(83.0, 84.9), 1), ""yes"", ""no"", ""Dog Inside""),
                        (round(random.uniform(83.0, 84.9), 1), ""no"", ""no"", ""Dog Outside""),
                        (round(random.uniform(100.5, 102.0), 1), ""no"", ""yes"", ""Dog Inside""),
                        (round(random.uniform(100.5, 102.0), 1), ""yes"", ""yes"", ""Dog Inside""),
                        (85.0, ""yes"", ""yes"", ""Dog Outside"")]
    
    for i in range(len(testcase_library)):
        print(""-------------------"")
        print(""Test"", i+1, ""of"", len(testcase_library))
        print(""-------------------"")
        if run_test(testcase_library[i][0], testcase_library[i][1], testcase_library[i][2], testcase_library[i][3]):
            num_tests_passed += 1
    
    return round(100 / len(testcase_library) * num_tests_passed, 1)
    
    

# ---------------------------------------------------------------------
# Optional
# Runs your code in an IDE (for testing purposes)
# ---------------------------------------------------------------------
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
645,a1_3_vspeed,4,skill,1,"<div><strong style=""color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;"">PROBLEM
        STATEMENT:</strong></p>
    <div class=""text"">
        <div id=""question_131193026_question_text"" class=""question_text user_content enhanced"">
            <p>You have been provided with a partially complete Python program that contains 2 variables.</p>
            <ol>
                <li>speed_of_vehicle(input by the user in mph)</li>
                <li>speed_limit (already initialized in mph)</li>
            </ol>
            <p>&nbsp;</p>
            <p>Add code to the end of this program that will output:</p>
            <ul>
                <li style=""list-style-type: none;"">
                    <ul>
                        <li>
                            <pre>Too fast, slow down!</pre>
                            If the vehicle speed is higher than the speed limit<br><br>
                        </li>
                        <li>
                            <pre>Maintain Speed</pre>
                            If the vehicle speed is equal to the speed limit<br><br>
                        </li>
                        <li>
                            <pre>Too slow, speed up!</pre>
                            If the vehicle speed is lower than the speed limit<br><br>
                        </li>
                    </ul>
                </li>
            </ul>
            <p>&nbsp;</p>
            <p><strong>EXAMPLES:</strong><strong></strong></p>
            <table border=""1"" width=""859"">
                <tbody>
                    <tr>
                        <td></td>
                        <td><strong>Example 1</strong></td>
                        <td><strong>Example 2</strong></td>
                        <td><strong>Example 3</strong></td>
                    </tr>
                    <tr>
                        <td><strong>Input</strong></td>
                        <td>80</td>
                        <td>65</td>
                        <td>40</td>
                    </tr>
                    <tr>
                        <td><strong>Output</strong></td>
                        <td>Too fast, slow down!</td>
                        <td>Maintain Speed</td>
                        <td>Too slow, speed up!</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(speed):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing speed ="", speed, ""MPH"")
    print(""----------------------------------"")
    
    if speed > 65:
        solution = ""Too fast, slow down!""
    elif speed == 65:
        solution = ""Maintain Speed""
    else:
        solution = ""Too slow, speed up!""
    
    output, error_message = autograder.run_script(""a1_3_vspeed.py"", [speed])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(66, 150), 1))
    run_test(65)
    run_test(round(random.uniform(0.0, 64), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
646,a1_3_speed,4,skill,1,"<div>
<div>
<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a partially complete Python program that contains 2 variables.</p>
<ol>
<li>aircraft_speed (input by the user in mph)</li>
<li>speed_of_sound (already initialized in mph)</li>
</ol>
<p>&nbsp;</p>
<p>Add code to the end of this program that will output:</p>
<ul>
<li>
<ul>
<li>
<pre>Faster than Mach 1 </pre>
If the aircraft speed is higher than the speed of sound<br /><br /></li>
<li>
<pre>Mach 1 </pre>
If the aircraft speed is equal to the speed of sound<br /><br /></li>
<li>
<pre>Slower than Mach 1 </pre>
If the aircraft speed is lower than the speed of sound<br /><br /></li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>800</td>
<td>767.269</td>
<td>450.8</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Faster than Mach 1</td>
<td>Mach 1</td>
<td>Slower than Mach 1</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(speed):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing speed ="", speed, ""MPH"")
    print(""----------------------------------"")
    
    if speed > 767.269:
        solution = ""Faster than Mach 1""
    elif speed == 767.269:
        solution = ""Mach 1""
    else:
        solution = ""Slower than Mach 1""
    
    output, error_message = autograder.run_script(""a1_3_speed.py"", [speed])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(768.0, 1000.0), 1))
    run_test(767.269)
    run_test(round(random.uniform(0.0, 767.0), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
647,a1_3_satellite,4,skill,1,"<div id=""question_138313788_question_text"" class=""question_text user_content enhanced"">
          

<p><strong>PROBLEM STATEMENT:</strong></p>
<p>You have been provided with a partially complete Python program that contains 2 variables.</p>
<ol>
<li>satellite_speed (input by the user in km/s)</li>
<li>orbit_speed (already initialize in km/s)</li>
</ol>
<p>&nbsp;</p>
<p>Add code to the end of this program that will output:</p>
<ul>
<ul>
<li style=""list-style-type: none;"">
<ul>
<li>
<pre>Crashed to Earth</pre>
<p>If the speed of the satellite is below the orbital speed.</p>
</li>
<li>
<pre>In Orbit</pre>
<p>If the speed of the satellite is equal to the orbital speed.</p>
</li>
<li>
<pre>Lost to Space</pre>
<p>If the speed of the satellite is above the orbital speed.</p>
</li>
</ul>
</li>
</ul>
</ul>
<p>&nbsp;</p>
<p><strong>&nbsp;</strong></p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width=""859"">
<tbody>
<tr>
<td width=""215""></td>
<td width=""215"">
<p><strong>Example 1</strong></p>
</td>
<td width=""214"">
<p><strong>Example 2</strong></p>
</td>
<td width=""214"">
<p><strong>Example 3</strong></p>
</td>
</tr>
<tr>
<td width=""215"">
<p><strong>Input</strong></p>
</td>
<td width=""215"">
<p>3</p>
</td>
<td width=""214"">
<p>7.8</p>
</td>
<td width=""214"">
<p>9</p>
</td>
</tr>
<tr>
<td width=""215"">
<p><strong>Output</strong></p>
</td>
<td width=""215"">
<p>Crashed to Earth</p>
</td>
<td width=""214"">
<p>In Orbit</p>
</td>
<td width=""214"">
<p>Lost to Space</p>
</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
      </div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(speed):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing speed ="", speed, ""km/s"")
    print(""----------------------------------"")
    
    if speed > 7.8:
        solution = ""Lost to Space""
    elif speed == 7.8:
        solution = ""In Orbit""
    else:
        solution = ""Crashed to Earth""
    
    output, error_message = autograder.run_script(""a1_3_satellite.py"", [speed])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(7.8, 20), 1))
    run_test(7.8)
    run_test(round(random.uniform(0.0, 7.7), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
648,a1_3_goldilocks,4,skill,1,"<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a partially complete Python program that contains 2 variables.</p>
<ol>
<li>porridge_temp (input by the user in &deg;F)</li>
<li>correct_temp (already initialized in &deg;F)</li>
</ol>
<p>&nbsp;</p>
<p>Add code to the end of this program that will output:</p>
<ul>
<li>
<ul>
<li>
<pre>Too Hot </pre>
When the porridge temp is above the correct temperature.<br /><br /></li>
<li>
<pre>Just Right </pre>
When the porridge temp is equal to the correct temperature<br /><br /></li>
<li>
<pre>Too Cold </pre>
When the porridge temp is below the correct temperature.<br /><br /></li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>110</td>
<td>105</td>
<td>98</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Too Hot</td>
<td>Just Right</td>
<td>Too Cold</td>
</tr>
</tbody>
</table>
</div>

","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(temp):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing temperature ="", temp, ""degrees"")
    print(""----------------------------------"")
    
    if temp > 105:
        solution = ""Too Hot""
    elif temp == 105:
        solution = ""Just Right""
    else:
        solution = ""Too Cold""
    
    output, error_message = autograder.run_script(""a1_3_goldilocks.py"", [temp])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(106, 130), 1))
    run_test(105)
    run_test(round(random.uniform(80, 104), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
649,a1_3_cards,4,skill,1,"<div>
<div>
<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a partially complete Python program that contains 2 variables.</p>
<ol>
<li>number_of_cards (input by the user)</li>
<li>cards_needed (already initialized)</li>
</ol>
<p>&nbsp;</p>
<p>Add code to the end of this program that will output whether you have enough cards to make a full deck of 52 cards (already initialized):</p>
<ul>
<li>
<ul>
<li>
<pre>Too many cards </pre>
If the number of cards is more than the cards needed<br /><br /></li>
<li>
<pre>Full deck</pre>
If the number of cards is equal to the cards needed<br /><br /></li>
<li>
<pre>Not enough cards </pre>
If the number of cards is fewer than the cards needed<br /><br /></li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<p>&nbsp;</p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>57</td>
<td>52</td>
<td>38</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Too many cards</td>
<td>Full deck</td>
<td>Not enough cards</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(num_cards):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing number of cards ="", num_cards, ""cards"")
    print(""----------------------------------"")
    
    if num_cards > 52:
        solution = ""Too many cards""
    elif num_cards == 52:
        solution = ""Full deck""
    else:
        solution = ""Not enough cards""
    
    output, error_message = autograder.run_script(""a1_3_cards.py"", [num_cards])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(53, 60)))
    run_test(52)
    run_test(round(random.uniform(0, 51)))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
650,a1_3_arrow,4,skill,1,"<div>
<div>
<div>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>You have been provided with a partially complete Python program that contains 2 variables.</p>
<ol>
<li>arrow_height (input by the user in feet)</li>
<li>apple_height (already initialized in feet)</li>
</ol>
<p>&nbsp;</p>
<p>Add code to the end of this program that will output:</p>
<ul>
<li>
<ul>
<li>
<pre>Arrow too high </pre>
If the arrow height is higher than the apple<br /><br /></li>
<li>
<pre>Direct hit</pre>
If the arrow height is equal to the apple<br /><br /></li>
<li>
<pre>Arrow too low </pre>
If the arrow is lower than the apple<br /><br /></li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p><strong>EXAMPLES:</strong></p>
<p>&nbsp;</p>
<table border=""1"" width=""1"">
<tbody>
<tr>
<td>&nbsp;</td>
<td><strong>Example 1</strong></td>
<td><strong>Example 2</strong></td>
<td><strong>Example 3</strong></td>
</tr>
<tr>
<td><strong>Input</strong></td>
<td>7.1</td>
<td>6.2</td>
<td>5.9</td>
</tr>
<tr>
<td><strong>Output</strong></td>
<td>Arrow too high</td>
<td>Direct hit</td>
<td>Arrow too low</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test(height):
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    print(""----------------------------------"")
    print(""Testing height ="", height, ""feet"")
    print(""----------------------------------"")
    
    if height > 6.2:
        solution = ""Arrow too high""
    elif height == 6.2:
        solution = ""Direct hit""
    else:
        solution = ""Arrow too low""
    
    output, error_message = autograder.run_script(""a1_3_arrow.py"", [height])
    
    if output.strip() == solution:
        print(""CORRECT!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test(round(random.uniform(6.2, 20), 1))
    run_test(6.2)
    run_test(round(random.uniform(0.0, 6.1), 1))
    
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
651,a1_2_spheres,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Write a program that calculates the volume of a multiple spheres.&nbsp; The template provided to you defines 2
        variables:</p>
    <ul>
        <li><span><strong>radius</strong>&nbsp;</span>- radius of the sphere</li>
        <li><span><strong>total</strong>&nbsp;</span>- The number of spheres</li>
    </ul>
    <p>&nbsp;</p>
    <p>Calculate the volume, using the following formula:</p>
    <pre class=""lr-fy-ecl lr-fy-eq-elem""
        data-var=""V""><span><span id=""MathJax-Span-34"" class=""mi"">V</span><span id=""MathJax-Span-35"" class=""mo"">=(</span><span id=""MathJax-Span-36"" class=""mfrac""><span id=""MathJax-Span-37"" class=""mn"">4/</span><span id=""MathJax-Span-38"" class=""mn"">3)</span></span><span id=""MathJax-Span-39"" class=""mi""></span><span class=""msup""><span class=""mi"">r</span></span></span><span><sup>3</sup></span><span>t</span></pre>
    <p>Where . . .</p>
    <ul>
        <li style=""list-style-type: none;"">
            <ul>
                <li><strong><span></span></strong><span>&nbsp;</span>is the mathematical constant (<span>see the HINT
                        for more details)</span></li>
                <li><span><strong>r</strong>&nbsp;is the radius of the cylinder</span></li>
                <li><span><strong>t</strong> is the number of spheres</span></li>
            </ul>
        </li>
    </ul>
    <p>&nbsp;</p>
    <p>Store the answer in a variable called<span><strong>&nbsp;volume</strong>.&nbsp; You do not need to print the
            variable.</span></p>
    <p>&nbsp;</p>
    <p><strong>HINT:</strong><strong></strong></p>
    <p>The math module contains the mathematical constant,<span>&nbsp;</span><span></span>.&nbsp; To use it, simply
        type<span>&nbsp;</span><span><strong>math.pi</strong></span></p>
</div>","from cs110 import autograder
import random, math

from a1_2_spheres import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (4/3) * (radius**3)*total
    file = open(""a1_2_spheres.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see if variable 'volume' exists . . . "", end='')
    if 'volume' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'volume' . . . "", end='')
        if 'volume' in globals() and autograder.equals(volume, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
652,a1_2_radius,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Write a program that calculates the area of multiple circles.&nbsp; The template provided to you defines 2
        variables:</p>
    <ul>
        <li><span><strong>radius</strong>&nbsp;</span>- radius of the circle</li>
        <li><span><strong>total</strong>&nbsp;</span>- The number of circles</li>
    </ul>
    <p>&nbsp;</p>
    <p>Calculate the area, using the following formula:</p>
    <pre class=""lr-fy-ecl lr-fy-eq-elem""
        data-var=""V""><span><span id=""MathJax-Span-34"" class=""mi"">A</span><span id=""MathJax-Span-35"" class=""mo"">=</span><span id=""MathJax-Span-39"" class=""mi""></span><span class=""msup""><span class=""mi"">r<sup>2</sup></span></span></span><span>t</span></pre>
    <p>Where . . .</p>
    <ul>
        <li style=""list-style-type: none;"">
            <ul>
                <li><strong><span></span></strong><span>&nbsp;</span>is the mathematical constant (s<span>ee the HINT
                        for more details)</span></li>
                <li><span><strong>r</strong> is the radius of the circle</span></li>
                <li><span><strong>t</strong> is the number of circles</span></li>
            </ul>
        </li>
    </ul>
    <p>&nbsp;</p>
    <p>Store the answer in a variable called<span><strong> area</strong>.&nbsp; You do not need to print the
            variable.</span></p>
    <p>&nbsp;</p>
    <p><strong>HINT:</strong><strong></strong></p>
    <p>The math module contains the mathematical constant,<span>&nbsp;</span><span></span>.&nbsp; To use it, simply
        type<span>&nbsp;</span><span><strong>math.pi</strong></span></p>
</div>
<div class=""variable_definitions_holder calculated_question_answers"" style=""display: none;"">
    <div class=""calculated_question_answers_header"">Variables</div>
    <div class=""calculated_question_answers_content"">
        <table class=""variable_definitions"">
            <thead>
                <tr>
                    <th>Variable</th>
                    <th>Min</th>
                    <th>Max</th>
                    <th>Decimal Places</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>
<div class=""formulas_holder calculated_question_answers"" style=""display: none;"">
    <div class=""calculated_question_answers_header"">Formulas</div>
    <div class=""calculated_question_answers_content"">
        <div class=""formulas_list"">
        </div>
    </div>
</div>
<div class=""equation_combinations_holder_holder calculated_question_answers"" style=""display: none;"">
    <div style=""display: none;"" class=""answer_tolerance"">0</div>
    <div style=""display: none;"" class=""formula_decimal_places"">0</div>
    <div class=""calculated_question_answers_header"">Possible Solutions</div>
    <div class=""calculated_question_answers_content equation_combinations_holder"">
        <table class=""equation_combinations"">
        </table>
    </div>
</div>
<div class=""multiple_answer_sets_holder"" style=""display: none;"">
    Show Answers for <select class=""blank_id_select"">
    </select>
</div>
<div class=""answers"">
    <div class=""answers_wrapper"">

    </div>
</div>
<div class=""after_answers"">
</div>
</div>","from cs110 import autograder
import random, math

from a1_2_radius import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (radius**2) * height * total
    file = open(""a1_2_radius.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see areif variable 'volume' exists . . . "", end='')
    if 'volume' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'volume' . . . "", end='')
        if 'volume' in globals() and autograder.equals(volume, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
653,a1_2_cones,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Write a program that calculates the volume of multiple identical cones.&nbsp; The template provided to you
        defines 3 variables:</p>
    <ul>
        <li><span><strong>radius</strong>&nbsp;</span>- radius of the cones</li>
        <li><span><strong>height</strong></span>- height of the cones</li>
        <li><span><strong>total</strong>&nbsp;</span>- The number of cones</li>
    </ul>
    <p>&nbsp;</p>
    <p>Calculate the volume, using the following formula:</p>
    <pre class=""lr-fy-ecl lr-fy-eq-elem""
        data-var=""V"">V =<span>&nbsp;</span><span>&nbsp;</span><span>r</span><sup><span>2</span></sup><span>(</span><span>h/3)t</span></pre>
    <p>Where . . .</p>
    <ul>
        <li style=""list-style-type: none;"">
            <ul>
                <li><strong><span></span></strong><span>&nbsp;</span>is the mathematical constant (<span>see the HINT
                        for more details)</span></li>
                <li><span><strong>r</strong>&nbsp;is the radius of the cones</span></li>
                <li><strong>h&nbsp;</strong>is the height of the cones</li>
                <li><span><strong>t</strong>&nbsp;is the total amount of cones</span></li>
            </ul>
        </li>
    </ul>
    <p>&nbsp;</p>
    <p>Store the answer in a variable called<span><strong> volume</strong>.&nbsp; You do not need to print the
            variable.</span></p>
    <p>&nbsp;</p>
    <p><strong>HINT:</strong><strong></strong></p>
    <p>The math module contains the mathematical constant, <span></span>.&nbsp; To use it, simply
        type<span>&nbsp;</span><span><strong>math.pi</strong></span></p>
</div>","from cs110 import autograder
import random, math

from a1_2_cones import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (radius**2) * (height/3) * total
    file = open(""a1_2_cones.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see if variable 'volume' exists . . . "", end='')
    if 'volume' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'volume' . . . "", end='')
        if 'volume' in globals() and autograder.equals(volume, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
654,a1_2_circles,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
    <p>Write a program that calculates the area of multiple circles.&nbsp; The template provided to you defines 2
        variables:</p>
    <ul>
        <li><span><strong>radius</strong>&nbsp;</span>- radius of the circle</li>
        <li><span><strong>total</strong>&nbsp;</span>- The number of circles</li>
    </ul>
    <p>&nbsp;</p>
    <p>Calculate the area, using the following formula:</p>
    <pre class=""lr-fy-ecl lr-fy-eq-elem""
        data-var=""V""><span><span id=""MathJax-Span-34"" class=""mi"">A</span><span id=""MathJax-Span-35"" class=""mo"">=</span><span id=""MathJax-Span-39"" class=""mi""></span><span class=""msup""><span class=""mi"">r<sup>2</sup></span></span></span><span>t</span></pre>
    <p>Where . . .</p>
    <ul>
        <li style=""list-style-type: none;"">
            <ul>
                <li><strong><span></span></strong><span>&nbsp;</span>is the mathematical constant (s<span>ee the HINT
                        for more details)</span></li>
                <li><span><strong>r</strong> is the radius of the circle</span></li>
                <li><span><strong>t</strong> is the number of circles</span></li>
            </ul>
        </li>
    </ul>
    <p>&nbsp;</p>
    <p>Store the answer in a variable called<span><strong> area</strong>.&nbsp; You do not need to print the
            variable.</span></p>
    <p>&nbsp;</p>
    <p><strong>HINT:</strong><strong></strong></p>
    <p>The math module contains the mathematical constant,<span>&nbsp;</span><span></span>.&nbsp; To use it, simply
        type<span>&nbsp;</span><span><strong>math.pi</strong></span></p>
</div>
<div class=""variable_definitions_holder calculated_question_answers"" style=""display: none;"">
    <div class=""calculated_question_answers_header"">Variables</div>
    <div class=""calculated_question_answers_content"">
        <table class=""variable_definitions"">
            <thead>
                <tr>
                    <th>Variable</th>
                    <th>Min</th>
                    <th>Max</th>
                    <th>Decimal Places</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>
<div class=""formulas_holder calculated_question_answers"" style=""display: none;"">
    <div class=""calculated_question_answers_header"">Formulas</div>
    <div class=""calculated_question_answers_content"">
        <div class=""formulas_list"">
        </div>
    </div>
</div>
<div class=""equation_combinations_holder_holder calculated_question_answers"" style=""display: none;"">
    <div style=""display: none;"" class=""answer_tolerance"">0</div>
    <div style=""display: none;"" class=""formula_decimal_places"">0</div>
    <div class=""calculated_question_answers_header"">Possible Solutions</div>
    <div class=""calculated_question_answers_content equation_combinations_holder"">
        <table class=""equation_combinations"">
        </table>
    </div>
</div>
<div class=""multiple_answer_sets_holder"" style=""display: none;"">
    Show Answers for <select class=""blank_id_select"">
    </select>
</div>
<div class=""answers"">
    <div class=""answers_wrapper"">

    </div>
</div>
<div class=""after_answers"">
</div>
</div>","from cs110 import autograder
import random, math

from a1_2_circles import *

# Runs the Python script and sees if it passes the test(s)
def test_passed():
    
    score = 0
    answer = math.pi * (radius**2)*total
    file = open(""a1_2_circles.py"", ""r"")
    file_contents = file.read()
    
    print(""Checking to see if variable 'area' exists . . . "", end='')
    if 'area' in globals():
        print(""FOUND!"")
        score += 10
        
        print(""Checking mathematical formula . . . "", end='')
        if '*' in file_contents and 'math.pi' in file_contents and ('**' in file_contents or 'math.pow' in file_contents or 'pow' in file_contents):
            print(""CORRECT!"")
            score += 60
        else:
            print(""NOT FOUND. Make sure you are using the formula."")
        
        print(""Checking the value of 'area' . . . "", end='')
        if 'area' in globals() and autograder.equals(area, answer):
            print(""CORRECT!"")
            score += 30
        else:
            print(""INCORRECT"")
    else:
        print(""NOT FOUND. Make sure you name your variable according to the prompt."")
      
    return score
    
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)",100,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
655,a1_1_squad,4,skill,1,"<html><head/><body><p><span style="" font-weight:600;"">PROBLEM STATEMENT:<br/></span></p><p>Write the Python code needed to get three values from the user:</p><ol style=""margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;""><li style="" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"">A string representing the name of a cadet squadron (e.g., Grim Reapers). Store this value in a variable called<span style="" font-weight:600;""> sqd_name</span></li><li style="" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"">A floating point value representing average age for all cadets in the squadron. Store this value in a variable called <span style="" font-weight:600;"">sqd_avg_age</span></li><li style="" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;"">An integer representing the weight of the ICBM in kilograms. Store this value in a variable called <span style="" font-weight:600;"">sqd_number</span></li></ol><p><span style="" font-weight:600;"">IMPORTANT:</span> Your template file contains a print statement that combines these values to produce an output (see Example). <span style="" font-weight:600;"">Do not modify this line.</span> Simply add your input statements in the space provided.</p><p><span style="" font-weight:600;"">EXAMPLE:</span></p><p>If the user types &quot;Grim Reapers&quot;, 20.5, and 31, your program should print: </p><pre style="" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;""><span style="" font-family:'Courier New';"">Cadet Squadron 31, aka &quot;Grim Reapers&quot;,</span></pre><pre style="" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;""><span style="" font-family:'Courier New';""> has an average cadet age of 20.5.</span></pre><p><br/></p></body></html>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    squad_list = [(""Warhawks"", 21.2, 40), (""Barnstormers"", 19.2, 23), (""Black Panthers"", 20.7, 29), (""Dogs of War"", 21.1, 3)]
    squad = squad_list[random.randint(0, len(squad_list) - 1)]
    solution = ""The \""%s\"" has an average cadet age of %1.1f and is Squadron %i."" % (squad[0], squad[1], squad[2])
    
    output, error_message = autograder.run_script(""a1_1_squad.py"", [squad[0], squad[1], squad[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
656,a1_1_icbm,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write the Python code needed to get three values from the user:</p>
<ol>
<li>A string representing the name of an Intercontinental Ballistic Missile (ICBM) (e.g., Minuteman). Store this value in a variable called<strong>&nbsp;icbm</strong><strong>_name</strong></li>
<li>A floating point value representing the length of this missile in meters. Store this value in a variable called&nbsp;<strong>icbm_length</strong></li>
<li>An integer representing the weight of the ICBM in kilograms. Store this value in a variable called&nbsp;<strong>icbm_weight</strong></li>
</ol>
<p><strong>IMPORTANT:</strong> Your template file contains a print statement that combines these values to produce an output (see Example). <strong>Do not modify this line.</strong> Simply add your input statements in the space provided.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types ""Minuteman"", 16.3, and 290000, your program should print:</p>
<pre>The Minuteman has a total length of 16.3 meters and it weighs 290000 kilograms.</pre>
</div>
","#import cs110,
import random, math
from cs110 import autograder
num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    icbm_list = [(""Peacekeeper"", 21.8, 88450), (""Minuteman"", 16.36, 29000), (""Titan"", 31.394, 155000)]
    icbm = icbm_list[random.randint(0, len(icbm_list) - 1)]
    solution = ""The %s has a total length of %1.1f meters and it weighs %d kilograms."" % (icbm[0], icbm[1], icbm[2])
    
    output, error_message = autograder.run_script(""a1_1_icbm.py"", [icbm[0], icbm[1], icbm[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
657,a1_1_dorms,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write the Python code needed to get three values from the user:</p>
<ol>
<li>A string representing the name of an USAFA dormitory (e.g., Vandenburg). Store this value in a variable called<strong> dorm</strong><strong>_name</strong></li>
<li>A floating point value representing the total area, in square feet, that the dormitory contains. Store this value in a variable called <strong>dorm_area</strong></li>
<li>An integer representing the number cadets living in this dormitory. Store this value in a variable called <strong>dorm_population</strong></li>
</ol>
<p><strong>IMPORTANT:</strong> Your template file contains a print statement that combines these values to produce an output (see Example). <strong>Do not modify this line.</strong> Simply add your input statements in the space provided.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types ""Vandenberg"", 63383.5, and 1720, your program should print:</p>
<pre>The Vandenburg dormitory has an area of 63383.5 square feet and has 1720 cadets living in it.</pre>
<p>&nbsp;</p>
</div>

","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    dorm_list = [(""Vandenburg"", 111874.79, 2212), (""Sijan"", 124488.97, 2112)]
    dorm = dorm_list[random.randint(0, len(dorm_list) - 1)]
    solution = ""The %s dormitory has an area of %1.1f square feet and has %d cadets living in it."" % (dorm[0], dorm[1], dorm[2])
    
    output, error_message = autograder.run_script(""a1_1_dorms.py"", [dorm[0], dorm[1], dorm[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
658,a1_1_cadet,4,skill,1,"<div><strong>PROBLEM STATEMENT:<br></strong></p>
<p>Write the Python code needed to get three values from the user:</p>
<ol>
<li>A string representing the users name.&nbsp; Store this value in a variable called<strong><span> cadet</span></strong><span><strong>_name</strong></span></li>
<li>A floating point value representing their height in meters.&nbsp; Store this value in a variable called<span> <strong>cadet_height</strong></span></li>
<li>An integer representing their weight.&nbsp; Store this value in a variable called <strong>cadet_weight</strong></li>
</ol>
<p><strong>IMPORTANT:</strong>&nbsp; Your template file contains a print statement that combines these values to produce an output (see Example).&nbsp;<span>&nbsp;</span><strong>Do not modify this line.</strong>&nbsp; Simply add your input statements in the space provided.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong><strong></strong></p>
<p>If the user types ""Snuffy"", 2.1, and 185, your program should print:</p>
<pre>Cadet Snuffy is 2.1 meters tall and weighs 180 lbs.</pre>
</div>","#import cs110,
import random, math
from cs110 import autograder
num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    cadet_list = [(""Snuffy"", 2.1, 185), (""Smith"", 1.9, 205), (""Green"", 2.0, 155)]
    cadet = cadet_list[random.randint(0, len(cadet_list) - 1)]
    solution = ""Cadet %s is %1.1f meters tall and weighs %d lbs."" % (cadet[0], cadet[1], cadet[2])
        
    output, error_message = autograder.run_script(""a1_1_cadet.py"", [cadet[0], cadet[1], cadet[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
659,a1_1_bases,4,skill,1,"<div>
<p>&nbsp;</p>
<p><strong>PROBLEM STATEMENT:<br /></strong></p>
<p>Write the Python code needed to get three values from the user:</p>
<ol>
<li>A string representing the name of an Air Force Base (e.g., Travis). Store this value in a variable called<strong>&nbsp;base</strong><strong>_name</strong></li>
<li>A floating point value representing the area of this base in acres. Store this value in a variable called&nbsp;<strong>base_acres</strong></li>
<li>An integer representing the number of buildings on this base. Store this value in a variable called&nbsp;<strong>building_</strong><strong>quantity</strong></li>
</ol>
<p><strong>IMPORTANT:</strong> Your template file contains a print statement that combines these values to produce an output (see Example). <strong>Do not modify this line.</strong> Simply add your input statements in the space provided.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types ""Travis"", 6383.5, and 1720, your program should print:</p>
<pre>Travis Air Force Base sits on 6383.5 acres and has 1720 buildings on it.</pre>
</div>","from cs110 import autograder
import random, math

num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    base_list = [(""Travis"", 1874.79, 1288), (""Barksdale"", 1488.97, 1680), (""Eglin"", 1611.08, 1388)]
    base = base_list[random.randint(0, len(base_list) - 1)]
    solution = ""%s Air Force Base sits on %1.1f acres and has %d buildings on it."" % (base[0], base[1], base[2])
    
    output, error_message = autograder.run_script(""a1_1_bases.py"", [base[0], base[1], base[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
660,a1_1_aircraft,4,skill,1,"<div>
<p>&nbsp;</p>
<p>Write the Python code needed to get three values from the user:</p>
<ol>
<li>A string representing the name of an aircraft (e.g., F-16). Store this value in a variable called&nbsp;<strong>aircraft_name</strong></li>
<li>A floating point value representing the maximum speed of the aircraft. Store this value in a variable called&nbsp;<strong>aircraft_speed</strong></li>
<li>An integer representing the number of airplanes of this type owned by the USAF. Store this value in a variable called&nbsp;<strong>quantity</strong></li>
</ol>
<p><strong>IMPORTANT:</strong> Your template file contains a print statement that combines these values to produce an output (see Example). <strong>Do not modify this line.</strong> Simply add your input statements in the space provided.</p>
<p>&nbsp;</p>
<p><strong>EXAMPLE:</strong></p>
<p>If the user types ""F-16"", 1500.1, and 600, your program should print:</p>
<pre>The F-16 has a top speed of 1500.1 MPH. The USAF has 600 in its inventory. </pre>
</div>
","#import cs110,
import random, math
from cs110 import autograder
num_tests_passed = 0
num_tests_run = 0

def run_test():
    global num_tests_run, num_tests_passed
        
    num_tests_run += 1
    
    aircraft_list = [(""F-15"", 1874.79, 288), (""F-16"", 1488.97, 680), (""F-22"", 1611.08, 88)]
    aircraft = aircraft_list[random.randint(0, len(aircraft_list) - 1)]
    solution = ""The %s has a top speed of %1.1f MPH.  The USAF has %d in its inventory."" % (aircraft[0], aircraft[1], aircraft[2])
    
    output, error_message = autograder.run_script(""a1_1_aircraft.py"", [aircraft[0], aircraft[1], aircraft[2]])
        
    if output.strip() == solution:
        print(""SUCCESS!\n"")
        num_tests_passed += 1
    else:
        print(""INCORRECT. Expected:"", solution)
        print(""\n"")


# Runs the Python script and sees if it passes the test(s)
def test_passed():
    run_test()
    return round(num_tests_passed * (100 / num_tests_run), 1)

        
# Runs your code in an IDE (for testing purposes)
if __name__ == '__main__':    
    result = test_passed()
    print(""Unit Test Returned:"", result)


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------


# --------------------------------------------------
# Downloaded from https://www.autograder.net
# --------------------------------------------------",100,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
